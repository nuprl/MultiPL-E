{
  "language": "lua",
  "name": "HumanEval_58_common",
  "results": [
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1 do\n        t1[l1[i]] = true\n    end\n    for i = 1, #l2 do\n        t2[l2[i]] = true\n    end\n    for k, v in pairs(t1) do\n        if not t2[k] then return table.concat(t1, k) end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplkp_h243.lua:16: invalid value (boolean) at index 1 in table for 'concat'\nstack traceback:\n\t/tmp/tmplkp_h243.lua:16: in local 'candidate'\n\t/tmp/tmplkp_h243.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] == l2[1] then\n            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.sort(t1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpckj07ftc.lua:21: expected: {1, 5, 653}\nactual: nil\nstack traceback:\n\t/tmp/tmpckj07ftc.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907469
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] == l2[1] then\n            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.sort(t1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpckj07ftc.lua:21: expected: {1, 5, 653}\nactual: nil\nstack traceback:\n\t/tmp/tmpckj07ftc.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907469
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpbdithuzc.lua:10: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907469
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil and l2[i] ~= nil then\n            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.sort(t1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5an3cvo6.lua:21: expected: {1, 5, 653}\nactual: nil\nstack traceback:\n\t/tmp/tmp5an3cvo6.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907469
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] == l2[1] then\n            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.sort(t1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpckj07ftc.lua:21: expected: {1, 5, 653}\nactual: nil\nstack traceback:\n\t/tmp/tmpckj07ftc.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907469
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpbdithuzc.lua:10: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907469
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpbdithuzc.lua:10: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907469
    },
    {
      "exit_code": 0,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    for i = 1, #l1 do\n        t1[l1[i]] = true\n    end\n    local t2 = {}\n    for i = 1, #l2 do\n        t2[l2[i]] = true\n    end\n    local t3 = {}\n    for k, v in pairs(t1) do\n        if t2[k] then\n            table.insert(t3, k)\n        end\n    end\n    return t3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907469
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    for i=1,#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpqp5jaic_.lua:9: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907470
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    for i=1,#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpqp5jaic_.lua:9: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907470
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t = {}\n    for i = 1, #l1, 2 do\n        for j = 1, #l2, 2 do\n            if l1[i] == l2[j] then\n                table.insert(t, l1[i])\n                break\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpgcim0dnu.lua:27: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907469
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 1 do\n        t1[l1[i]] = true\n    end\n    for i = 1, #l2, 1 do\n        t2[l2[i]] = true\n    end\n    for k, v in pairs(t1) do\n        if not t2[k] then\n            return table.concat(t1, k)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzokrgbsb.lua:17: invalid value (boolean) at index 1 in table for 'concat'\nstack traceback:\n\t/tmp/tmpzokrgbsb.lua:17: in local 'candidate'\n\t/tmp/tmpzokrgbsb.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907470
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil and l2[i] ~= nil then\n            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfv5qs1kh.lua:15: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpfv5qs1kh.lua:15: in local 'candidate'\n\t/tmp/tmpfv5qs1kh.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] == l2[1] then\n            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.sort(t1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpckj07ftc.lua:21: expected: {1, 5, 653}\nactual: nil\nstack traceback:\n\t/tmp/tmpckj07ftc.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907469
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t = {}\n    for i = 1, #l1, 1 do\n        for j = 1, #l2, 1 do\n            if l1[i] == l2[j] then\n                table.insert(t, l1[i])\n                break\n            end\n        end\n    end\n    return table.sort(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp081zuvdb.lua:22: expected: {1, 5, 653}\nactual: nil\nstack traceback:\n\t/tmp/tmp081zuvdb.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907470
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1 do\n        t1[l1[i]] = true\n    end\n    for i = 1, #l2 do\n        t2[l2[i]] = true\n    end\n    local t = {}\n    for k, v in pairs(t1) do\n        if t2[k] then t[k] = true end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp02ug7t02.lua:25: expected: {1, 5, 653}\nactual: {true, 5=true, 653=true}\nstack traceback:\n\t/tmp/tmp02ug7t02.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907470
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2 do\n        t2[l2[i]] = true\n    end\n    for k,v in pairs(t1) do\n        if not t2[k] then\n            return k\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxh7zsft8.lua:26: expected: {1, 5, 653}\nactual: 2\nstack traceback:\n\t/tmp/tmpxh7zsft8.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    for i=1,#l1 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    local t2 = {}\n    for i=1,#l2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i=1,#l2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4x1rup0y.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmp4x1rup0y.lua:19: in local 'candidate'\n\t/tmp/tmp4x1rup0y.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2 do\n        t2[l2[i]] = true\n    end\n    for k in t1 do\n        if not t2[k] then\n            return table.concat(t1, k)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1q0vqj95.lua:15: attempt to call a table value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmp1q0vqj95.lua:15: in local 'candidate'\n\t/tmp/tmp1q0vqj95.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i=1,#l2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4x1rup0y.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmp4x1rup0y.lua:19: in local 'candidate'\n\t/tmp/tmp4x1rup0y.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil and l2[i] ~= nil then\n            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfv5qs1kh.lua:15: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpfv5qs1kh.lua:15: in local 'candidate'\n\t/tmp/tmpfv5qs1kh.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil and l2[i] ~= nil then\n            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfv5qs1kh.lua:15: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpfv5qs1kh.lua:15: in local 'candidate'\n\t/tmp/tmpfv5qs1kh.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2 do\n        t2[l2[i]] = true\n    end\n    for k in t1 do\n        if not t2[k] then\n            return table.concat(t1, k)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1q0vqj95.lua:15: attempt to call a table value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmp1q0vqj95.lua:15: in local 'candidate'\n\t/tmp/tmp1q0vqj95.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2 do\n        t2[l2[i]] = true\n    end\n    for k in t1 do\n        if not t2[k] then\n            return table.concat(t1, k)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1q0vqj95.lua:15: attempt to call a table value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmp1q0vqj95.lua:15: in local 'candidate'\n\t/tmp/tmp1q0vqj95.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil and l2[i] ~= nil then\n            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfv5qs1kh.lua:15: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpfv5qs1kh.lua:15: in local 'candidate'\n\t/tmp/tmpfv5qs1kh.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i=1,#l2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4x1rup0y.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmp4x1rup0y.lua:19: in local 'candidate'\n\t/tmp/tmp4x1rup0y.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] == l2[1] then\n            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.sort(t1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpckj07ftc.lua:21: expected: {1, 5, 653}\nactual: nil\nstack traceback:\n\t/tmp/tmpckj07ftc.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907469
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    local t2 = {}\n    for i=1,#l2 do\n        t2[l2[i]] = true\n    end\n    local t3 = {}\n    for k,v in pairs(t1) do\n        if t2[k] then\n            t3[k] = true\n        end\n    end\n    return t3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpenosdium.lua:27: expected: {1, 5, 653}\nactual: {true, 5=true, 653=true}\nstack traceback:\n\t/tmp/tmpenosdium.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1,2 do\n        if l1[i] ~= nil then\n            t1[l1[i]] = true\n        end\n        if l2[i] ~= nil then\n            t2[l2[i]] = true\n        end\n    end\n    for k,v in pairs(t1) do\n        if not t2[k] then\n            return k\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppaih16vb.lua:28: expected: {1, 5, 653}\nactual: 3\nstack traceback:\n\t/tmp/tmppaih16vb.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "exit_code": 0,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    for i = 1, #l1 do\n        t1[l1[i]] = true\n    end\n    local t2 = {}\n    for i = 1, #l2 do\n        t2[l2[i]] = true\n    end\n    local t3 = {}\n    for k, v in pairs(t1) do\n        if t2[k] then\n            table.insert(t3, k)\n        end\n    end\n    return t3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907469
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i=1,#l2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4x1rup0y.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmp4x1rup0y.lua:19: in local 'candidate'\n\t/tmp/tmp4x1rup0y.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil and l2[i] ~= nil then\n            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfv5qs1kh.lua:15: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpfv5qs1kh.lua:15: in local 'candidate'\n\t/tmp/tmpfv5qs1kh.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpljrox_nn.lua:17: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpljrox_nn.lua:17: in local 'candidate'\n\t/tmp/tmpljrox_nn.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1,2 do\n        if l1[i] == l2[1] then\n            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.sort(t1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj8lxvk3e.lua:21: expected: {1, 5, 653}\nactual: nil\nstack traceback:\n\t/tmp/tmpj8lxvk3e.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    for i=1,#l1 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    local t2 = {}\n    for i=1,#l2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil and l2[i] ~= nil then\n            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.sort(t1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5an3cvo6.lua:21: expected: {1, 5, 653}\nactual: nil\nstack traceback:\n\t/tmp/tmp5an3cvo6.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907469
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2 do\n        t2[l2[i]] = true\n    end\n    for k in t1 do\n        if not t2[k] then\n            return table.concat(t1, k)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1q0vqj95.lua:15: attempt to call a table value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmp1q0vqj95.lua:15: in local 'candidate'\n\t/tmp/tmp1q0vqj95.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2 do\n        t2[l2[i]] = true\n    end\n    for k in t1 do\n        if not t2[k] then\n            return table.concat(t1, k)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1q0vqj95.lua:15: attempt to call a table value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmp1q0vqj95.lua:15: in local 'candidate'\n\t/tmp/tmp1q0vqj95.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2 do\n        t2[l2[i]] = true\n    end\n    for k in t1 do\n        if not t2[k] then\n            return table.concat(t1, k)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1q0vqj95.lua:15: attempt to call a table value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmp1q0vqj95.lua:15: in local 'candidate'\n\t/tmp/tmp1q0vqj95.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2 do\n        t2[l2[i]] = true\n    end\n    for k in t1 do\n        if not t2[k] then\n            return table.concat(t1, k)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1q0vqj95.lua:15: attempt to call a table value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmp1q0vqj95.lua:15: in local 'candidate'\n\t/tmp/tmp1q0vqj95.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2 do\n        t2[l2[i]] = true\n    end\n    for k in t1 do\n        if not t2[k] then\n            return table.concat(t1, k)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1q0vqj95.lua:15: attempt to call a table value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmp1q0vqj95.lua:15: in local 'candidate'\n\t/tmp/tmp1q0vqj95.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2 do\n        t2[l2[i]] = true\n    end\n    for k,v in pairs(t1) do\n        if not t2[k] then\n            return k\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxh7zsft8.lua:26: expected: {1, 5, 653}\nactual: 2\nstack traceback:\n\t/tmp/tmpxh7zsft8.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2 do\n        t2[l2[i]] = true\n    end\n    for k,v in pairs(t1) do\n        if not t2[k] then\n            return table.concat({k}, l1, l2)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphnjfj_bp.lua:17: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmphnjfj_bp.lua:17: in local 'candidate'\n\t/tmp/tmphnjfj_bp.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1,2 do\n        if l1[i] == l2[1] then\n            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.sort(t1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj8lxvk3e.lua:21: expected: {1, 5, 653}\nactual: nil\nstack traceback:\n\t/tmp/tmpj8lxvk3e.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] == l2[1] then\n            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.sort(t1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpckj07ftc.lua:21: expected: {1, 5, 653}\nactual: nil\nstack traceback:\n\t/tmp/tmpckj07ftc.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907469
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.sort(table.concat(t1, t2))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwqapeyt6.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpwqapeyt6.lua:19: in local 'candidate'\n\t/tmp/tmpwqapeyt6.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 1 do\n        t1[l1[i]] = true\n    end\n    for i = 1, #l2, 1 do\n        t2[l2[i]] = true\n    end\n    for k, v in pairs(t1) do\n        if not t2[k] then return table.concat(t1, l2) end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgv127jlr.lua:16: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpgv127jlr.lua:16: in local 'candidate'\n\t/tmp/tmpgv127jlr.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] == l2[1] then\n            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.sort(t1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpckj07ftc.lua:21: expected: {1, 5, 653}\nactual: nil\nstack traceback:\n\t/tmp/tmpckj07ftc.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907469
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    for i = 1, #l1 do\n        t1[l1[i]] = true\n    end\n    local t2 = {}\n    for i = 1, #l2 do\n        t2[l2[i]] = true\n    end\n    local t3 = {}\n    for k, v in pairs(t1) do\n        if t2[k] then\n            t3[k] = true\n        end\n    end\n    return t3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp288eqzm4.lua:27: expected: {1, 5, 653}\nactual: {true, 5=true, 653=true}\nstack traceback:\n\t/tmp/tmp288eqzm4.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1,1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2,1 do\n        t2[l2[i]] = true\n    end\n    for k,v in pairs(t1) do\n        if not t2[k] then\n            return table.concat(t1, k)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5jgca_f4.lua:17: invalid value (boolean) at index 1 in table for 'concat'\nstack traceback:\n\t/tmp/tmp5jgca_f4.lua:17: in local 'candidate'\n\t/tmp/tmp5jgca_f4.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 0,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    for i = 1, #l1 do\n        t1[l1[i]] = true\n    end\n    local t2 = {}\n    for i = 1, #l2 do\n        t2[l2[i]] = true\n    end\n    local t3 = {}\n    for k, v in pairs(t1) do\n        if t2[k] then\n            table.insert(t3, k)\n        end\n    end\n    return t3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907469
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] == l2[1] then\n            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.sort(t1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpckj07ftc.lua:21: expected: {1, 5, 653}\nactual: nil\nstack traceback:\n\t/tmp/tmpckj07ftc.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907469
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.sort(table.concat(t1, t2))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwqapeyt6.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpwqapeyt6.lua:19: in local 'candidate'\n\t/tmp/tmpwqapeyt6.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2 do\n        t2[l2[i]] = true\n    end\n    for k,v in pairs(t1) do\n        if not t2[k] then\n            return table.concat(t1, k)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmfop9hpu.lua:17: invalid value (boolean) at index 1 in table for 'concat'\nstack traceback:\n\t/tmp/tmpmfop9hpu.lua:17: in local 'candidate'\n\t/tmp/tmpmfop9hpu.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] == l2[1] then\n            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.sort(t1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpckj07ftc.lua:21: expected: {1, 5, 653}\nactual: nil\nstack traceback:\n\t/tmp/tmpckj07ftc.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907469
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1,1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2,1 do\n        t2[l2[i]] = true\n    end\n    for k,v in pairs(t1) do\n        if not t2[k] then\n            table.insert(l1, k)\n        end\n    end\n    for k,v in pairs(t2) do\n        if not t1[k] then\n            table.insert(l2, k)\n        end\n    end\n    return l1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzwz5wwxs.lua:31: expected: {1, 5, 653}\nactual: {1, 4, 3, 34, 653, 2, 5, 2, 3, 4, 34}\nstack traceback:\n\t/tmp/tmpzwz5wwxs.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 1 do\n        t1[l1[i]] = true\n    end\n    for i = 1, #l2, 1 do\n        t2[l2[i]] = true\n    end\n    for k in t1, t2 do\n        if not t2[k] then\n            return table.unpack(k)\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu0_egpw0.lua:15: attempt to call a table value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmpu0_egpw0.lua:15: in local 'candidate'\n\t/tmp/tmpu0_egpw0.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2 do\n        t2[l2[i]] = true\n    end\n    for k,v in pairs(t1) do\n        if not t2[k] then\n            table.insert(l1, k)\n        end\n    end\n    return l1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7sjtusjs.lua:26: expected: {1, 5, 653}\nactual: {1, 4, 3, 34, 653, 2, 5, 2, 3, 4, 34}\nstack traceback:\n\t/tmp/tmp7sjtusjs.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2 do\n        t2[l2[i]] = true\n    end\n    for k in t1 do\n        if not t2[k] then\n            return table.concat(t1, k)\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] == l2[1] then\n            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.sort(t1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpckj07ftc.lua:21: expected: {1, 5, 653}\nactual: nil\nstack traceback:\n\t/tmp/tmpckj07ftc.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907469
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpljrox_nn.lua:17: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpljrox_nn.lua:17: in local 'candidate'\n\t/tmp/tmpljrox_nn.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i=1,#l2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4x1rup0y.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmp4x1rup0y.lua:19: in local 'candidate'\n\t/tmp/tmp4x1rup0y.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2 do\n        t2[l2[i]] = true\n    end\n    for k in t1 do\n        if not t2[k] then\n            return table.concat(t1, k)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1q0vqj95.lua:15: attempt to call a table value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmp1q0vqj95.lua:15: in local 'candidate'\n\t/tmp/tmp1q0vqj95.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 1 do\n        t1[l1[i]] = true\n    end\n    for i = 1, #l2, 1 do\n        t2[l2[i]] = true\n    end\n    local t = {}\n    for k, v in pairs(t1) do\n        if t2[k] then\n            table.insert(t, k)\n        end\n    end\n    return table.sort(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3y9p3b30.lua:27: expected: {1, 5, 653}\nactual: nil\nstack traceback:\n\t/tmp/tmp3y9p3b30.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    local t2 = {}\n    for i=1,#l2 do\n        t2[l2[i]] = true\n    end\n    local t3 = {}\n    for k,v in pairs(t1) do\n        if t2[k] then\n            t3[k] = true\n        end\n    end\n    return t3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpenosdium.lua:27: expected: {1, 5, 653}\nactual: {true, 5=true, 653=true}\nstack traceback:\n\t/tmp/tmpenosdium.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] == l2[1] then\n            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.sort(t1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpckj07ftc.lua:21: expected: {1, 5, 653}\nactual: nil\nstack traceback:\n\t/tmp/tmpckj07ftc.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907469
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] == l2[1] then\n            table.insert(t1, l1[i])\n            table.insert(t1, l2[i])\n        end\n    end\n    return table.unpack(t1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkqud_dx_.lua:20: expected: {1, 5, 653}\nactual: 5\nstack traceback:\n\t/tmp/tmpkqud_dx_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil and l2[i] ~= nil then\n            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfv5qs1kh.lua:15: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpfv5qs1kh.lua:15: in local 'candidate'\n\t/tmp/tmpfv5qs1kh.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1,2 do\n        if l1[i] ~= nil then\n            t1[l1[i]] = true\n        end\n        if l2[i] ~= nil then\n            t2[l2[i]] = true\n        end\n    end\n    for k,v in pairs(t1) do\n        if not t2[k] then\n            return k\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppaih16vb.lua:28: expected: {1, 5, 653}\nactual: 3\nstack traceback:\n\t/tmp/tmppaih16vb.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2 do\n        t2[l2[i]] = true\n    end\n    for k,v in pairs(t1) do\n        if not t2[k] then\n            return table.concat(t1, l2)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkfr38ek5.lua:17: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpkfr38ek5.lua:17: in local 'candidate'\n\t/tmp/tmpkfr38ek5.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1,2 do\n        if l1[i] ~= nil and l2[i] ~= nil then\n            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] == l2[1] then\n            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.sort(t1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpckj07ftc.lua:21: expected: {1, 5, 653}\nactual: nil\nstack traceback:\n\t/tmp/tmpckj07ftc.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907469
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil and l2[i] ~= nil then\n            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfv5qs1kh.lua:15: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpfv5qs1kh.lua:15: in local 'candidate'\n\t/tmp/tmpfv5qs1kh.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] == l2[1] then\n            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.sort(t1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpckj07ftc.lua:21: expected: {1, 5, 653}\nactual: nil\nstack traceback:\n\t/tmp/tmpckj07ftc.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907469
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] == l2[1] then\n            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.sort(t1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpckj07ftc.lua:21: expected: {1, 5, 653}\nactual: nil\nstack traceback:\n\t/tmp/tmpckj07ftc.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907469
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    for i = 1, #l1 do\n        t1[l1[i]] = true\n    end\n    local t2 = {}\n    for i = 1, #l2 do\n        t2[l2[i]] = true\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl68aurrb.lua:15: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpl68aurrb.lua:15: in local 'candidate'\n\t/tmp/tmpl68aurrb.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i=1,#l2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4x1rup0y.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmp4x1rup0y.lua:19: in local 'candidate'\n\t/tmp/tmp4x1rup0y.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 1 do\n        t1[l1[i]] = true\n    end\n    for i = 1, #l2, 1 do\n        t2[l2[i]] = true\n    end\n    local t = {}\n    for k, v in pairs(t1) do\n        if t2[k] then\n            t[k] = true\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi69v9niy.lua:27: expected: {1, 5, 653}\nactual: {true, 5=true, 653=true}\nstack traceback:\n\t/tmp/tmpi69v9niy.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1,2 do\n        if l1[i] == l2[1] then\n            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpncwcjfyk.lua:15: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpncwcjfyk.lua:15: in local 'candidate'\n\t/tmp/tmpncwcjfyk.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2 do\n        t2[l2[i]] = true\n    end\n    for k in t1 do\n        if not t2[k] then\n            return table.concat(t1, k)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1q0vqj95.lua:15: attempt to call a table value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmp1q0vqj95.lua:15: in local 'candidate'\n\t/tmp/tmp1q0vqj95.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] == l2[1] then\n            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.sort(t1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpckj07ftc.lua:21: expected: {1, 5, 653}\nactual: nil\nstack traceback:\n\t/tmp/tmpckj07ftc.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907469
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] == l2[1] then\n            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp60g3paka.lua:15: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmp60g3paka.lua:15: in local 'candidate'\n\t/tmp/tmp60g3paka.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2 do\n        t2[l2[i]] = true\n    end\n    for k in t1 do\n        if not t2[k] then\n            return table.concat(t1, k)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1q0vqj95.lua:15: attempt to call a table value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmp1q0vqj95.lua:15: in local 'candidate'\n\t/tmp/tmp1q0vqj95.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    for i=1,#l1 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    local t2 = {}\n    for i=1,#l2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i=1,#l2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4x1rup0y.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmp4x1rup0y.lua:19: in local 'candidate'\n\t/tmp/tmp4x1rup0y.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i=1,#l2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4x1rup0y.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmp4x1rup0y.lua:19: in local 'candidate'\n\t/tmp/tmp4x1rup0y.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] == l2[1] then\n            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.sort(t1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpckj07ftc.lua:21: expected: {1, 5, 653}\nactual: nil\nstack traceback:\n\t/tmp/tmpckj07ftc.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907469
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2 do\n        t2[l2[i]] = true\n    end\n    for k,v in pairs(t1) do\n        if not t2[k] then\n            return table.concat({k}, l1)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx1zpjphu.lua:17: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpx1zpjphu.lua:17: in local 'candidate'\n\t/tmp/tmpx1zpjphu.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2 do\n        t2[l2[i]] = true\n    end\n    for k,v in pairs(t1) do\n        if not t2[k] then\n            table.insert(l1, k)\n        end\n    end\n    for k,v in pairs(t2) do\n        if not t1[k] then\n            table.insert(l2, k)\n        end\n    end\n    return l1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzw0_5qpb.lua:31: expected: {1, 5, 653}\nactual: {1, 4, 3, 34, 653, 2, 5, 2, 3, 4, 34}\nstack traceback:\n\t/tmp/tmpzw0_5qpb.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2 do\n        t2[l2[i]] = true\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmpbmv91z.lua:15: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpmpbmv91z.lua:15: in local 'candidate'\n\t/tmp/tmpmpbmv91z.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil and l2[i] ~= nil then\n            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.sort(table.concat(t1, t2))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkczd0qn6.lua:15: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpkczd0qn6.lua:15: in local 'candidate'\n\t/tmp/tmpkczd0qn6.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2 do\n        t2[l2[i]] = true\n    end\n    for k in t1 do\n        if not t2[k] then\n            return table.concat({k}, l1)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_5gujyzw.lua:15: attempt to call a table value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmp_5gujyzw.lua:15: in local 'candidate'\n\t/tmp/tmp_5gujyzw.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] == l2[1] then\n            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.sort(t1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpckj07ftc.lua:21: expected: {1, 5, 653}\nactual: nil\nstack traceback:\n\t/tmp/tmpckj07ftc.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907469
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] == l2[1] then\n            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp60g3paka.lua:15: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmp60g3paka.lua:15: in local 'candidate'\n\t/tmp/tmp60g3paka.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t = {}\n    for i=1,#l1 do\n        for j=1,#l2 do\n            if l1[i] == l2[j] then\n                table.insert(t, l1[i])\n                break\n            end\n        end\n    end\n    return table.unpack(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpewyytp_q.lua:22: expected: {1, 5, 653}\nactual: 1\nstack traceback:\n\t/tmp/tmpewyytp_q.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1,1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2,1 do\n        t2[l2[i]] = true\n    end\n    for k,v in pairs(t1) do\n        if not t2[k] then\n            return table.concat(t1, k)\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyc5kodqx.lua:17: invalid value (boolean) at index 1 in table for 'concat'\nstack traceback:\n\t/tmp/tmpyc5kodqx.lua:17: in local 'candidate'\n\t/tmp/tmpyc5kodqx.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t = {}\n    for i = 1, #l1, 2 do\n        for j = 1, #l2, 2 do\n            if l1[i] == l2[j] then\n                table.insert(t, l1[i])\n                break\n        end\n    end\n    return table.sort(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmpeytxamcb.lua:27: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1,2 do\n        if l1[i] ~= nil then\n            t1[l1[i]] = true\n        end\n        if l2[i] ~= nil then\n            t2[l2[i]] = true\n        end\n    end\n    for k, v in pairs(t1) do\n        if not t2[k] then\n            table.remove(t2, k)\n        end\n    end\n    return table.keys(t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdmmoin5i.lua:19: bad argument #1 to 'remove' (position out of bounds)\nstack traceback:\n\t/tmp/tmpdmmoin5i.lua:19: in local 'candidate'\n\t/tmp/tmpdmmoin5i.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1,2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb2mhblgh.lua:17: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpb2mhblgh.lua:17: in local 'candidate'\n\t/tmp/tmpb2mhblgh.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1,1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2,1 do\n        t2[l2[i]] = true\n    end\n    local t = {}\n    for k,v in pairs(t1) do\n        if t2[k] then\n            table.insert(t, k)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpux97mp1h.lua:28: expected: {2, 3}\nactual: {3, 2}\nstack traceback:\n\t/tmp/tmpux97mp1h.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 1 do\n        table.insert(t1, l1[i])\n    end\n    for i = 1, #l2, 1 do\n        table.insert(t2, l2[i])\n    end\n    local t = {}\n    for k, v in pairs(t1) do\n        if table.find(t2, v) then\n            table.insert(t, v)\n        end\n    end\n    return table.sort(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp074z0kfg.lua:17: attempt to call a nil value (field 'find')\nstack traceback:\n\t/tmp/tmp074z0kfg.lua:17: in local 'candidate'\n\t/tmp/tmp074z0kfg.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1,2 do\n        if l1[i] ~= nil and l2[i] ~= nil then\n            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.sort(t1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv7fhyfo9.lua:21: expected: {1, 5, 653}\nactual: nil\nstack traceback:\n\t/tmp/tmpv7fhyfo9.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] == l2[1] then\n            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp60g3paka.lua:15: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmp60g3paka.lua:15: in local 'candidate'\n\t/tmp/tmp60g3paka.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1,2 do\n        if l1[i] ~= nil then\n            t1[l1[i]] = true\n        end\n        if l2[i] ~= nil then\n            t2[l2[i]] = true\n        end\n    end\n    for k,v in pairs(t1) do\n        if not t2[k] then\n            return k\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppaih16vb.lua:28: expected: {1, 5, 653}\nactual: 3\nstack traceback:\n\t/tmp/tmppaih16vb.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1,2 do\n        if l1[i] ~= nil and l2[i] ~= nil then\n            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 0,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    for i = 1, #l1 do\n        t1[l1[i]] = true\n    end\n    local t2 = {}\n    for i = 1, #l2 do\n        t2[l2[i]] = true\n    end\n    local t3 = {}\n    for k, v in pairs(t1) do\n        if t2[k] then\n            table.insert(t3, k)\n        end\n    end\n    return t3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907469
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2 do\n        t2[l2[i]] = true\n    end\n    for k in t1 do\n        if not t2[k] then\n            return table.concat(t1, k)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1q0vqj95.lua:15: attempt to call a table value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmp1q0vqj95.lua:15: in local 'candidate'\n\t/tmp/tmp1q0vqj95.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 1 do\n        table.insert(t1, l1[i])\n    end\n    for i = 1, #l2, 1 do\n        table.insert(t2, l2[i])\n    end\n    local t = {}\n    for k, v in pairs(t1) do\n        if table.find(t2, v) then\n            table.insert(t, v)\n        end\n    end\n    return table.sort(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp074z0kfg.lua:17: attempt to call a nil value (field 'find')\nstack traceback:\n\t/tmp/tmp074z0kfg.lua:17: in local 'candidate'\n\t/tmp/tmp074z0kfg.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] == l2[1] then\n            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp60g3paka.lua:15: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmp60g3paka.lua:15: in local 'candidate'\n\t/tmp/tmp60g3paka.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    for i=1,#l1 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    local t2 = {}\n    for i=1,#l2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2 do\n        t2[l2[i]] = true\n    end\n    for k in t1 do\n        if not t2[k] then\n            return table.concat(t1, k)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1q0vqj95.lua:15: attempt to call a table value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmp1q0vqj95.lua:15: in local 'candidate'\n\t/tmp/tmp1q0vqj95.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2 do\n        t2[l2[i]] = true\n    end\n    for k in t1 do\n        if not t2[k] then\n            return table.concat(t1, k)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1q0vqj95.lua:15: attempt to call a table value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmp1q0vqj95.lua:15: in local 'candidate'\n\t/tmp/tmp1q0vqj95.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2 do\n        t2[l2[i]] = true\n    end\n    for k in t1 do\n        if not t2[k] then\n            return table.concat({k}, l1)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_5gujyzw.lua:15: attempt to call a table value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmp_5gujyzw.lua:15: in local 'candidate'\n\t/tmp/tmp_5gujyzw.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] == l2[1] then\n            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp60g3paka.lua:15: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmp60g3paka.lua:15: in local 'candidate'\n\t/tmp/tmp60g3paka.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil and l2[i] ~= nil then\n            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfv5qs1kh.lua:15: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpfv5qs1kh.lua:15: in local 'candidate'\n\t/tmp/tmpfv5qs1kh.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2 do\n        t2[l2[i]] = true\n    end\n    for k in t1 do\n        if not t2[k] then\n            return table.concat(t1, k)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1q0vqj95.lua:15: attempt to call a table value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmp1q0vqj95.lua:15: in local 'candidate'\n\t/tmp/tmp1q0vqj95.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1 do\n        t1[l1[i]] = true\n    end\n    for i = 1, #l2 do\n        t2[l2[i]] = true\n    end\n    for k, v in pairs(t1) do\n        if not t2[k] then\n            return table.concat(t1, k)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp3y5u9lg.lua:17: invalid value (boolean) at index 1 in table for 'concat'\nstack traceback:\n\t/tmp/tmpp3y5u9lg.lua:17: in local 'candidate'\n\t/tmp/tmpp3y5u9lg.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2 do\n        t2[l2[i]] = true\n    end\n    for k in t1 do\n        if t2[k] then\n            table.insert(l1, k)\n            table.insert(l2, k)\n        end\n    end\n    return l1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt79rqlfc.lua:15: attempt to call a table value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmpt79rqlfc.lua:15: in local 'candidate'\n\t/tmp/tmpt79rqlfc.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 1 do\n        table.insert(t1, l1[i])\n    end\n    for i = 1, #l2, 1 do\n        table.insert(t2, l2[i])\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpencllz0u.lua:15: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpencllz0u.lua:15: in local 'candidate'\n\t/tmp/tmpencllz0u.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2 do\n        t2[l2[i]] = true\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmpbmv91z.lua:15: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpmpbmv91z.lua:15: in local 'candidate'\n\t/tmp/tmpmpbmv91z.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        if not t1[l1[i]] then\n            t1[l1[i]] = 1\n            t2[l2[i]] = 1\n        end\n    end\n    return unpack(t1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmwguijyi.lua:15: attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpmwguijyi.lua:15: in local 'candidate'\n\t/tmp/tmpmwguijyi.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil and l2[i] ~= nil then\n            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfv5qs1kh.lua:15: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpfv5qs1kh.lua:15: in local 'candidate'\n\t/tmp/tmpfv5qs1kh.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2 do\n        t2[l2[i]] = true\n    end\n    for k,v in pairs(t1) do\n        if not t2[k] then\n            table.insert(l1, k)\n        end\n    end\n    return l1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7sjtusjs.lua:26: expected: {1, 5, 653}\nactual: {1, 4, 3, 34, 653, 2, 5, 2, 3, 4, 34}\nstack traceback:\n\t/tmp/tmp7sjtusjs.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil and l2[i] ~= nil then\n            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfv5qs1kh.lua:15: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpfv5qs1kh.lua:15: in local 'candidate'\n\t/tmp/tmpfv5qs1kh.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            t1[l1[i]] = true\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            t2[l2[i]] = true\n        end\n    end\n    for k, v in pairs(t1) do\n        if not t2[k] then\n            return k\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkpl2twwu.lua:30: expected: {1, 5, 653}\nactual: 3\nstack traceback:\n\t/tmp/tmpkpl2twwu.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t = {}\n    for i=1,#l1 do\n        for j=1,#l2 do\n            if l1[i] == l2[j] then\n                table.insert(t, l1[i])\n                break\n        end\n    end\n    return table.sort(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmpfqs7_7qg.lua:27: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1,2 do\n        if l1[i] == l2[1] then\n            t1[l1[i]] = true\n            t2[l2[1]] = true\n        end\n    end\n    return t1, t2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpps_k32wg.lua:21: expected: {1, 5, 653}\nactual: {5=true}\nstack traceback:\n\t/tmp/tmpps_k32wg.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2 do\n        t2[l2[i]] = true\n    end\n    for k in t1 do\n        if not t2[k] then\n            return table.concat(t1, k)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1q0vqj95.lua:15: attempt to call a table value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmp1q0vqj95.lua:15: in local 'candidate'\n\t/tmp/tmp1q0vqj95.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] == l2[1] then\n            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.sort(t1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpckj07ftc.lua:21: expected: {1, 5, 653}\nactual: nil\nstack traceback:\n\t/tmp/tmpckj07ftc.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907469
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i=1,#l2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4x1rup0y.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmp4x1rup0y.lua:19: in local 'candidate'\n\t/tmp/tmp4x1rup0y.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2 do\n        t2[l2[i]] = true\n    end\n    for k in t1 do\n        if not t2[k] then\n            return table.concat(t1, k)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1q0vqj95.lua:15: attempt to call a table value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmp1q0vqj95.lua:15: in local 'candidate'\n\t/tmp/tmp1q0vqj95.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    local t2 = {}\n    for i=1,#l2 do\n        t2[l2[i]] = true\n    end\n    local t3 = {}\n    for k,v in pairs(t1) do\n        if t2[k] then\n            table.insert(t3, k)\n        end\n    end\n    return t3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx97b66ra.lua:28: expected: {2, 3}\nactual: {3, 2}\nstack traceback:\n\t/tmp/tmpx97b66ra.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 1 do\n        t1[l1[i]] = true\n    end\n    for i = 1, #l2, 1 do\n        t2[l2[i]] = true\n    end\n    local t = {}\n    for k, v in pairs(t1) do\n        if t2[k] then\n            t[k] = true\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi69v9niy.lua:27: expected: {1, 5, 653}\nactual: {true, 5=true, 653=true}\nstack traceback:\n\t/tmp/tmpi69v9niy.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2 do\n        t2[l2[i]] = true\n    end\n    for k,v in pairs(t1) do\n        if not t2[k] then\n            return table.concat(t1, k)\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmfop9hpu.lua:17: invalid value (boolean) at index 1 in table for 'concat'\nstack traceback:\n\t/tmp/tmpmfop9hpu.lua:17: in local 'candidate'\n\t/tmp/tmpmfop9hpu.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    local t2 = {}\n    for i=1,#l2 do\n        t2[l2[i]] = true\n    end\n    local t3 = {}\n    for k,v in pairs(t1) do\n        if t2[k] then\n            t3[k] = true\n        end\n    end\n    return t3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpenosdium.lua:27: expected: {1, 5, 653}\nactual: {true, 5=true, 653=true}\nstack traceback:\n\t/tmp/tmpenosdium.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] == l2[1] then\n            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.sort(t1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpckj07ftc.lua:21: expected: {1, 5, 653}\nactual: nil\nstack traceback:\n\t/tmp/tmpckj07ftc.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907469
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t = {}\n    for i = 1, #l1 do\n        for j = 1, #l2 do\n            if l1[i] == l2[j] then\n                table.insert(t, l1[i])\n                break\n        end\n    end\n    return table.unpack(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmpnvow479s.lua:27: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2 do\n        t2[l2[i]] = true\n    end\n    return filter(function(k)\n        return t1[k] and t2[k]\n    end, t1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv205ex1f.lua:15: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpv205ex1f.lua:15: in local 'candidate'\n\t/tmp/tmpv205ex1f.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 1 do\n        t1[l1[i]] = true\n    end\n    for i = 1, #l2, 1 do\n        t2[l2[i]] = true\n    end\n    local t = {}\n    for k, v in pairs(t1) do\n        if t2[k] then\n            table.insert(t, k)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph0fkue35.lua:28: expected: {2, 3}\nactual: {3, 2}\nstack traceback:\n\t/tmp/tmph0fkue35.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbada1adi.lua:19: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbada1adi.lua:19: in local 'candidate'\n\t/tmp/tmpbada1adi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907469
    },
    {
      "program": "-- Return sorted unique common elements for two tables.\n-- >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5, 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] == l2[1] then\n            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp60g3paka.lua:15: bad argument #2 to 'concat' (string expected, got table)\nstack traceback:\n\t/tmp/tmp60g3paka.lua:15: in local 'candidate'\n\t/tmp/tmp60g3paka.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}