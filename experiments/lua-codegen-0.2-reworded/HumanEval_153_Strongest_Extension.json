{
  "name": "HumanEval_153_Strongest_Extension",
  "language": "lua",
  "prompt": "-- You will be given the name of a class (a string) and a table of extensions.\n-- The extensions are to be used to load additional classes to the class. The\n-- strength of the extension is as follows: Let CAP be the number of the uppercase\n-- letters in the extension's name, and let SM be the number of lowercase letters \n-- in the extension's name, the strength is given by the fraction CAP - SM. \n-- You should find the strongest extension and return a string in this \n-- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions with the same strength, you should\n-- choose the one that comes first in the table.\n-- For example, if you are given \"Slices\" as the class and a table of the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n-- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n-- (its strength is -1).\n-- Example:\n-- >>> Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\n-- 'my_class.AA'\nlocal function Strongest_Extension(class_name, extensions)\n",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly', {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_', {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}), 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())",
  "completions": [
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    for _, extension in ipairs(extensions) do\n        local extension_name = extension.sub(1, extension.length - 1)\n        local extension_strength = 0\n        for _, char in ipairs(extension_name) do\n            if char.upper() > 0 then\n                extension_strength = extension_strength + 1\n            end\n        end\n        if extension_strength > strong_extension_strength then\n            strong_extension_name = extension_name\n            strong_extension_strength = extension_strength\n        end\n    end\n    if strong_extension_strength > 0 then\n        strong_extension = class_name .. '.' .. strong_extension_name\n    end\n    return strong_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    local i = 1\n    while i <= #extensions do\n        local extension_name = extensions[i]\n        local extension_strength = 0\n        local extension_name_upper = string.upper(extension_name)\n        local extension_name_lower = string.lower(extension_name)\n        local extension_name_upper_count = #extension_name_upper\n        local extension_name_lower_count = #extension_name_lower\n        local extension_name_count = extension_name_upper_count + extension_name_lower_count\n        local extension_name_count_count = #extension_name_count\n        local extension_name_count_count_count = #extension_name_count_count\n        local extension_name_count_count_count_count = #extension_name_count_count_count\n        local extension_name_count_count_count_count_count = #extension_name_count_count_count_count\n        local extension_name_count_count_count_count_count_count = #extension_name_count_count_count_count_count\n        local extension_name_count_count_count_count_count_count_count = #extension_name_count_count_count_count_count_count\n        local extension_name_count_count_count_count_count_count_count_count = #extension_name_count_count_count_count_count_count_count\n        local extension_name_count_count_count_count_count_count_count_count_count = #extension_name_count_count_count_count_count_count_count_count\n        local extension_name_count_count_count_count_count_count_count_count_count_count = #extension_name_count_count_count_count_count_count_count_count_count\n        local extension_name_count_count_count_count_count_count_count_count_count_count_count = #",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    for _, extension in ipairs(extensions) do\n        local extension_name = extension\n        local extension_strength = 0\n        for _, char in ipairs(extension_name) do\n            if char.upper() > 0 then\n                extension_strength = extension_strength + 1\n            end\n        end\n        if extension_strength > strong_extension_strength then\n            strong_extension_name = extension_name\n            strong_extension_strength = extension_strength\n        end\n    end\n    if strong_extension_strength > 0 then\n        strong_extension = class_name .. '.' .. strong_extension_name\n    end\n    return strong_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local strong_extension = ''\n    for _, extension in ipairs(extensions) do\n        local strength = table.count(class_table, extension) - table.count(class_table, string.lower(extension))\n        if strength > strong_extension then\n            strong_extension = extension\n        end\n    end\n    return class_name .. '.' .. strong_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local class_table_sorted = table.sort(class_table)\n    local strongest_extension = class_name\n    for _, extension in ipairs(class_table_sorted) do\n        if class_table[extension] == class_table_sorted[extension] then\n            strongest_extension = class_name .. \".\" .. extension\n            break\n        end\n    end\n    return strongest_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_ext = ''\n    local strong_ext_name = ''\n    local strong_ext_strength = 0\n    local i = 1\n    while i <= #extensions do\n        local ext_name = extensions[i]\n        local ext_strength = 0\n        local ext_cap = 0\n        local ext_sm = 0\n        local j = 1\n        while j <= #ext_name do\n            if ext_name[j] == 'A' or ext_name[j] == 'a' then\n                ext_cap = ext_cap + 1\n            end\n            if ext_name[j] == 'a' or ext_name[j] == 'A' then\n                ext_sm = ext_sm + 1\n            end\n            j = j + 1\n        end\n        ext_strength = ext_cap - ext_sm\n        if ext_strength > strong_ext_strength then\n            strong_ext_strength = ext_strength\n            strong_ext_name = ext_name\n        end\n        i = i + 1\n    end\n    strong_ext = class_name .. '.' .. strong_ext_name\n    return strong_ext\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        class_table[extension] = class_table[extension] or 0\n        class_table[extension] = class_table[extension] + 1\n    end\n    local strong_extension = ''\n    for extension, count in class_table do\n        if count > 1 then\n            strong_extension = strong_extension .. '.' .. extension\n        end\n    end\n    return class_name .. '.' .. strong_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local class_table_sorted = class_table:sort()\n    local strongest_extension = class_table_sorted[1]\n    return class_name .. '.' .. strongest_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    for _, extension in ipairs(extensions) do\n        local extension_name = extension.lower()\n        local extension_strength = 0\n        for _, char in ipairs(extension_name) do\n            if char.upper() == char then\n                extension_strength = extension_strength + 1\n            end\n        end\n        if extension_strength > strong_extension_strength then\n            strong_extension_name = extension_name\n            strong_extension_strength = extension_strength\n        end\n    end\n    if strong_extension_strength > 0 then\n        strong_extension = class_name .. '.' .. strong_extension_name\n    end\n    return strong_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local i = 1\n    while i <= #extensions do\n        local extension = extensions[i]\n        local strength = 0\n        local cap = 0\n        local sm = 0\n        local extension_name = string.lower(extension)\n        for j = 1, #extension_name do\n            if extension_name[j] == '_' then\n                cap = cap + 1\n            else\n                sm = sm + 1\n            end\n        end\n        strength = cap - sm\n        if strength > strong_extension then\n            strong_extension = strength\n            strong_extension_name = extension\n        end\n        i = i + 1\n    end\n    return class_name .. '.' .. strong_extension_name\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local class_table_sorted = class_table:sort()\n    local strongest_extension = class_table_sorted[1]\n    return class_name .. '.' .. strongest_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local i = 1\n    while i <= #extensions do\n        local extension = extensions[i]\n        local strength = 0\n        local cap = 0\n        local sm = 0\n        local extension_name = extension\n        local extension_name_len = #extension_name\n        while extension_name_len > 0 do\n            local c = string.char(extension_name, extension_name_len)\n            if c == 'A' or c == 'a' then\n                cap = cap + 1\n            else\n                sm = sm + 1\n            end\n            extension_name_len = extension_name_len - 1\n        end\n        strength = cap - sm\n        if strength > strong_extension then\n            strong_extension = strength\n            strong_extension_name = extension\n        end\n        i = i + 1\n    end\n    return class_name .. '.' .. strong_extension_name\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        local strength = #extension - #extension:lower()\n        table.insert(class_table, {extension, strength})\n    end\n    local max_strength = 0\n    for _, extension in ipairs(extensions) do\n        if strength > max_strength then\n            max_strength = strength\n            max_extension = extension\n        end\n    end\n    return class_name .. '.' .. max_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    local i = 1\n    while i <= #extensions do\n        local extension_name = extensions[i]\n        local extension_strength = 0\n        local extension_name_upper = string.upper(extension_name)\n        local extension_name_lower = string.lower(extension_name)\n        local extension_name_upper_count = #extension_name_upper\n        local extension_name_lower_count = #extension_name_lower\n        local extension_name_count = extension_name_upper_count + extension_name_lower_count\n        local extension_name_strength = extension_name_upper_count - extension_name_lower_count\n        if extension_name_strength > strong_extension_strength then\n            strong_extension_strength = extension_name_strength\n            strong_extension_name = extension_name\n        end\n        i = i + 1\n    end\n    if strong_extension_strength > 0 then\n        strong_extension = class_name .. '.' .. strong_extension_name\n    end\n    return strong_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    for _, ext in ipairs(extensions) do\n        local ext_strength = 0\n        local ext_name = ext\n        for _, char in ipairs(ext_name) do\n            if char.upper() == char then\n                ext_strength = ext_strength + 1\n            end\n        end\n        if ext_strength > strong_extension_strength then\n            strong_extension_strength = ext_strength\n            strong_extension_name = ext_name\n            strong_extension = ext\n        end\n    end\n    return class_name .. '.' .. strong_extension_name .. '.' .. strong_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        class_table[extension] = class_table[extension] or 0\n        class_table[extension] = class_table[extension] + 1\n    end\n    local class_name_upper = string.upper(class_name)\n    local class_name_lower = string.lower(class_name)\n    local class_name_cap = string.upper(class_name)\n    local class_name_sm = string.lower(class_name)\n    local strongest_extension = class_name\n    for extension, strength in class_table do\n        if strength > class_table[strongest_extension] then\n            strongest_extension = extension\n        end\n    end\n    if class_table[strongest_extension] > 1 then\n        strongest_extension = '.' .. strongest_extension\n    end\n    return class_name .. '.' .. strongest_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local i = 1\n    for _,extension in ipairs(extensions) do\n        local ext_strength = math.floor((string.upper(extension) - string.lower(extension)) / 2)\n        if ext_strength > strong_extension then\n            strong_extension = ext_strength\n            strong_extension_name = extension\n        end\n    end\n    return class_name .. '.' .. strong_extension_name\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_ext = ''\n    local strong_ext_name = ''\n    local i = 1\n    local j = 1\n    for i = 1, #extensions, 2 do\n        if extensions[i] ~= extensions[i+1] then\n            if strong_ext_name ~= '' then\n                strong_ext = strong_ext .. '.' .. strong_ext_name\n                strong_ext_name = ''\n            end\n            strong_ext_name = extensions[i]\n            strong_ext = strong_ext .. '.' .. strong_ext_name\n            strong_ext_name = ''\n            strong_ext = strong_ext .. '.' .. strong_ext_name\n            strong_ext_name = ''\n        end\n    end\n    return class_name .. '.' .. strong_ext_name .. '.' .. strong_ext\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local strong_extension = ''\n    for _, extension in ipairs(extensions) do\n        local strength = 0\n        for _, char in ipairs(extension) do\n            if char.isupper() then\n                strength = strength + 1\n            end\n        end\n        if strength > strong_extension then\n            strong_extension = extension\n        end\n    end\n    return class_name .. '.' .. strong_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        local strength = #extension - #extension:lower()\n        table.insert(class_table, {extension, strength})\n    end\n    local max_strength = 0\n    for _, extension in ipairs(extensions) do\n        if strength > max_strength then\n            max_strength = strength\n            max_extension = extension\n        end\n    end\n    return class_name .. '.' .. max_extension\nend",
    "    local table = {}\n    for _, extension in ipairs(extensions) do\n        table[extension] = table[extension] or 0\n        table[extension] = table[extension] + tonumber(string.upper(extension))\n    end\n    local max = 0\n    for _, extension in ipairs(extensions) do\n        if table[extension] > max then\n            max = table[extension]\n            strongest = extension\n        end\n    end\n    return class_name .. '.' .. strongest\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local strong_extension = nil\n    for _, extension in ipairs(extensions) do\n        local strength = 0\n        for _, char in ipairs(extension) do\n            if char.upper() > char then strength = strength + 1\n            end\n        end\n        if strength > strong_extension then strong_extension = extension\n        end\n    end\n    return class_name .. '.' .. strong_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local strong_extension = ''\n    for _, extension in ipairs(extensions) do\n        local strength = #extension - #extension:lower()\n        if strength > strong_extension then\n            strong_extension = extension\n        end\n    end\n    return class_name .. '.' .. strong_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local strong_extension = ''\n    for _, extension in ipairs(extensions) do\n        local strength = 0\n        for _, char in ipairs(extension) do\n            if char.upper() > char then strength = strength + 1\n            end\n        end\n        if strength > strong_extension then strong_extension = extension\n        end\n    end\n    return class_name .. '.' .. strong_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength = #extension - #extension:lower()\n        if extension_strength > strong_extension_strength then\n            strong_extension_name = extension\n            strong_extension_strength = extension_strength\n        end\n    end\n    if strong_extension_strength > 0 then\n        strong_extension = class_name .. '.' .. strong_extension_name\n    end\n    return strong_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local i = 1\n    for _, extension in ipairs(extensions) do\n        local extension_name = string.lower(extension)\n        local extension_cap = #extension_name\n        local extension_sm = #extension_name\n        if extension_cap > extension_sm then\n            extension_cap = extension_cap - extension_sm\n        end\n        if extension_cap > strong_extension then\n            strong_extension = extension\n            strong_extension_name = extension_name\n        end\n        i = i + 1\n    end\n    return class_name .. '.' .. strong_extension_name\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    for _, extension in ipairs(extensions) do\n        local extension_name = string.lower(extension)\n        local extension_strength = 0\n        for _, c in ipairs(extension_name) do\n            if c == 'a' then\n                extension_strength = extension_strength + 1\n            end\n        end\n        if extension_strength > strong_extension_strength then\n            strong_extension_name = extension\n            strong_extension_strength = extension_strength\n        end\n    end\n    strong_extension = class_name .. '.' .. strong_extension_name\n    return strong_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local max_strength = 0\n    for _, extension in ipairs(extensions) do\n        local strength = 0\n        for _, char in ipairs(extension) do\n            if char.upper() == char then\n                strength = strength + 1\n            end\n        end\n        if strength > max_strength then\n            max_strength = strength\n            max_extension = extension\n        end\n    end\n    return class_name .. '.' .. max_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local result = class_name\n    local max_strength = -1\n    for _, extension in ipairs(extensions) do\n        local strength = #extension - #extension:lower()\n        if strength > max_strength then\n            max_strength = strength\n            result = class_name .. '.' .. extension\n        end\n    end\n    return result\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    for _, extension in ipairs(extensions) do\n        local extension_name = string.lower(extension)\n        local extension_strength = 0\n        for _, char in ipairs(extension_name) do\n            if char == 'a' or char == 'A' then\n                extension_strength = extension_strength + 1\n            end\n        end\n        if extension_strength > strong_extension_strength then\n            strong_extension_name = extension\n            strong_extension_strength = extension_strength\n        end\n    end\n    if strong_extension_strength > 0 then\n        strong_extension = class_name .. '.' .. strong_extension_name\n    end\n    return strong_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local strong_extension = ''\n    for _, extension in ipairs(extensions) do\n        local strength = 0\n        for _, char in ipairs(extension) do\n            strength = strength + (string.upper(char) - string.lower(char))\n        end\n        if strength > strong_extension then\n            strong_extension = extension\n        end\n    end\n    return class_name .. '.' .. strong_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local i = 1\n    local j = 1\n    for i = 1, #extensions do\n        if #extensions[i] == 0 then\n            strong_extension = class_name .. '.' .. strong_extension\n            strong_extension_name = strong_extension\n            return strong_extension_name\n        end\n        local extension_name = string.lower(extensions[i])\n        local extension_name_length = #extension_name\n        local extension_name_upper_count = 0\n        for j = 1, extension_name_length do\n            if extension_name[j] == 'A' or extension_name[j] == 'a' then\n                extension_name_upper_count = extension_name_upper_count + 1\n            end\n        end\n        local extension_name_lower_count = extension_name_length - extension_name_upper_count\n        local extension_name_strength = extension_name_upper_count - extension_name_lower_count\n        if extension_name_strength > strong_extension_name_strength then\n            strong_extension_name = extension_name\n            strong_extension_name_strength = extension_name_strength\n        end\n    end\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    for _,extension in pairs(extensions) do\n        local ext_strength = #extension:upper() - #extension:lower()\n        if ext_strength > strong_extension_strength then\n            strong_extension_strength = ext_strength\n            strong_extension_name = extension\n        end\n    end\n    strong_extension = class_name .. '.' .. strong_extension_name\n    return strong_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local i = 1\n    for _, extension in ipairs(extensions) do\n        local strength = #extension - #extension:lower()\n        if strength > strong_extension then\n            strong_extension = strength\n            strong_extension_name = extension\n        end\n    end\n    return class_name .. '.' .. strong_extension_name\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    for _, extension in ipairs(extensions) do\n        local extension_name = string.lower(extension)\n        local extension_strength = 0\n        for _, char in ipairs(extension_name) do\n            if char == 'a' or char == 'A' then\n                extension_strength = extension_strength + 1\n            end\n        end\n        if extension_strength > strong_extension_strength then\n            strong_extension_name = extension\n            strong_extension_strength = extension_strength\n        end\n    end\n    if strong_extension_strength > 0 then\n        strong_extension = class_name .. '.' .. strong_extension_name\n    end\n    return strong_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = nil\n    local i = 1\n    for i, extension in ipairs(extensions) do\n        local strength = #extension - #extension:lower()\n        if strength > strong_extension then\n            strong_extension = strength\n            strong_extension_name = extension\n        end\n    end\n    return class_name .. '.' .. strong_extension_name\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    local i = 1\n    while i <= #extensions do\n        local extension_name = extensions[i]\n        local extension_strength = 0\n        local extension_cap = 0\n        local extension_sm = 0\n        local extension_name_upper = string.upper(extension_name)\n        local extension_name_lower = string.lower(extension_name)\n        local extension_cap_upper = #extension_name_upper\n        local extension_cap_lower = #extension_name_lower\n        local extension_sm_upper = #extension_name_upper - #extension_name_lower\n        local extension_sm_lower = #extension_name_lower - #extension_name_lower\n        if extension_name_upper > extension_name_lower then\n            extension_cap = extension_cap_upper\n            extension_sm = extension_sm_upper\n        else\n            extension_cap = extension_cap_lower\n            extension_sm = extension_sm_lower\n        extension_strength = extension_cap - extension_sm\n        if extension_strength > strong_extension_strength then\n            strong_extension_name = extension_name\n            strong_extension_strength = extension_strength\n        end\n        i = i + 1\n    end\n    if strong_extension_strength > 0 then\n        strong_extension = class_name .. '.' .. strong_extension_name\n    end\n    return strong_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local i = 1\n    while i <= #extensions do\n        local extension = extensions[i]\n        local strength = #extension - #extension:lower()\n        if strength > strong_extension then\n            strong_extension = strength\n            strong_extension_name = extension\n        end\n        i = i + 1\n    end\n    return class_name .. '.' .. strong_extension_name\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = nil\n    local i = 1\n    while i <= #extensions do\n        local extension = extensions[i]\n        local strength = #extension - #extension:lower()\n        if strength > strong_extension then\n            strong_extension = strength\n            strong_extension_name = extension\n        end\n        i = i + 1\n    end\n    return class_name .. '.' .. strong_extension_name\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local i = 1\n    while i <= #extensions do\n        local extension = extensions[i]\n        local extension_name = string.sub(extension, 1, -1)\n        local extension_strength = #extension_name - #extension_name:find('[a-z]')\n        if extension_strength > strong_extension_strength then\n            strong_extension_name = extension_name\n            strong_extension = class_name .. '.' .. strong_extension_name\n        end\n        i = i + 1\n    end\n    return strong_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_ext = ''\n    local strong_ext_name = ''\n    local strong_ext_strength = 0\n    for _, ext in ipairs(extensions) do\n        local ext_strength = #ext - #ext:lower()\n        if ext_strength > strong_ext_strength then\n            strong_ext_strength = ext_strength\n            strong_ext_name = ext\n        end\n    end\n    strong_ext = class_name .. '.' .. strong_ext_name\n    return strong_ext\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local class_table_sorted = class_table:sort()\n    local strongest_extension = class_table_sorted[1]\n    return class_name..strongest_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local i = 1\n    for _, extension in ipairs(extensions) do\n        local strength = #extension - #extension:lower()\n        if strength > strong_extension then\n            strong_extension = strength\n            strong_extension_name = extension\n        end\n    end\n    return class_name .. '.' .. strong_extension_name\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = nil\n    local strong_extension_name = nil\n    local strong_extension_strength = nil\n    for _, extension in ipairs(extensions) do\n        local extension_name = extension\n        local extension_strength = 0\n        for _, char in ipairs(extension_name) do\n            if char.upper() then\n                extension_strength = extension_strength + 1\n            end\n        end\n        if extension_strength > strong_extension_strength then\n            strong_extension_name = extension_name\n            strong_extension_strength = extension_strength\n        end\n    end\n    if strong_extension_strength > 0 then\n        strong_extension = class_name .. '.' .. strong_extension_name\n    end\n    return strong_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local i = 1\n    local j = 1\n    local k = 1\n    local l = 1\n    local m = 1\n    local n = 1\n    local o = 1\n    local p = 1\n    local q = 1\n    local r = 1\n    local s = 1\n    local t = 1\n    local u = 1\n    local v = 1\n    local w = 1\n    local x = 1\n    local y = 1\n    local z = 1\n    local a = 1\n    local b = 1\n    local c = 1\n    local d = 1\n    local e = 1\n    local f = 1\n    local g = 1\n    local h = 1\n    local i = 1\n    local j = 1\n    local k = 1\n    local l = 1\n    local m = 1\n    local n = 1\n    local o = 1\n    local p = 1\n    local q = 1\n    local r = 1\n    local s = 1\n    local t = 1\n    local u = 1\n    local v = 1\n    local w = 1\n    local x = 1\n    local y = 1\n    local z = 1\n    local a = 1\n    local b = 1\n    local c = 1\n    local d = 1\n    local e = 1\n    local f = 1\n    local g = 1\n    local h = 1\n    local i = 1\n    local j = 1\n    local k = 1\n    local l = 1\n    local m = 1\n    local n = 1\n    local o = 1\n    local p = 1\n    local q = 1\n    local r = 1\n    local s = 1\n    local t = 1\n    local u = 1\n    local v = 1\n    local w = 1\n    local x = 1\n    local y = 1\n    local z = 1\n    local a = 1\n    local b = 1\n    local c = 1\n    local d = 1\n    local e = 1\n    local f = 1\n    local g = 1\n    local h = 1\n    local i = 1\n    local",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local i = 1\n    while i <= #extensions do\n        local extension = extensions[i]\n        local strength = #extension - #extension:lower()\n        if strength > strong_extension then\n            strong_extension = strength\n            strong_extension_name = extension\n        end\n        i = i + 1\n    end\n    return class_name .. '.' .. strong_extension_name\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local result = class_name\n    local strength = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength = 0\n        local extension_name = extension\n        for _, char in ipairs(extension_name) do\n            if char.upper() == char then\n                extension_strength = extension_strength + 1\n            end\n        end\n        if extension_strength > strength then\n            strength = extension_strength\n            result = class_name .. '.' .. extension\n        end\n    end\n    return result\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local class_table_sorted = table.sort(class_table)\n    local strongest_extension = class_name\n    for _, extension in ipairs(class_table_sorted) do\n        if class_table[extension] == class_table_sorted[extension] then\n            strongest_extension = class_name .. \".\" .. extension\n            break\n        end\n    end\n    return strongest_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local class_table_sorted = class_table:sort()\n    local strongest_extension = class_table_sorted[1]\n    return class_name..'.'..strongest_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        local strength = #extension - #extension:lower()\n        table.insert(class_table, {extension, strength})\n    end\n    local max_strength = 0\n    for _, extension in ipairs(class_table) do\n        if max_strength < extension:max_strength then\n            max_strength = extension:max_strength\n            local max_extension = extension:extension\n        end\n    end\n    return class_name .. '.' .. max_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    for _, extension in ipairs(extensions) do\n        local extension_name = string.lower(extension)\n        local extension_strength = 0\n        for _, c in ipairs(extension_name) do\n            if string.isupper(c) then\n                extension_strength = extension_strength + 1\n            end\n        end\n        if extension_strength > strong_extension_strength then\n            strong_extension_name = extension\n            strong_extension_strength = extension_strength\n        end\n    end\n    if strong_extension_strength > 0 then\n        strong_extension = class_name .. '.' .. strong_extension_name\n    end\n    return strong_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    for _, extension in ipairs(extensions) do\n        local extension_name = string.lower(extension)\n        local extension_strength = 0\n        for _, letter in ipairs(extension_name) do\n            if string.upper(letter) == string.upper(class_name) then\n                extension_strength = extension_strength + 1\n            end\n        end\n        if extension_strength > strong_extension_strength then\n            strong_extension_name = extension\n            strong_extension_strength = extension_strength\n        end\n    end\n    if strong_extension_strength > 0 then\n        strong_extension = class_name .. '.' .. strong_extension_name\n    end\n    return strong_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = nil\n    local strong_extension_name = nil\n    local i = 1\n    while i <= #extensions do\n        local extension_name = extensions[i]\n        local extension_strength = 0\n        local extension_cap = 0\n        local extension_sm = 0\n        local extension_name_upper = string.upper(extension_name)\n        local extension_name_lower = string.lower(extension_name)\n        local extension_name_upper_len = #extension_name_upper\n        local extension_name_lower_len = #extension_name_lower\n        local extension_name_len = #extension_name\n        local extension_name_upper_len_len = #extension_name_upper_len\n        local extension_name_lower_len_len = #extension_name_lower_len\n        local extension_name_len_len = #extension_name_len\n        local extension_name_upper_len_len_len = #extension_name_upper_len_len\n        local extension_name_lower_len_len_len = #extension_name_lower_len_len\n        local extension_name_len_len_len = #extension_name_len_len\n        local extension_name_upper_len_len_len_len = #extension_name_upper_len_len_len\n        local extension_name_lower_len_len_len_len = #extension_name_lower_len_len_len\n        local extension_name_len_len_len_len = #extension_name_len_len_len\n        local extension_name_upper_len_len_len_len_len = #extension_name_upper_len_len_len_len\n        local extension_name_lower_len_len_len_len_len = #extension_name_lower_len_len_len_len\n        local extension_name_len_len_len_len_len = #extension_name_len_len_len_len\n        local extension_name_upper_len_len_len_len_len_len =",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        local strength = #extension - #extension:lower()\n        table.insert(class_table, {extension, strength})\n    end\n    local max_strength = 0\n    local max_extension = nil\n    for _, extension in ipairs(extensions) do\n        if strength = #extension - #extension:lower() then\n            if strength > max_strength then\n                max_strength = strength\n                max_extension = extension\n            end\n        end\n    end\n    return class_name .. '.' .. max_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    local i = 1\n    while i <= #extensions do\n        local extension = extensions[i]\n        local extension_name = string.lower(extension)\n        local extension_cap = #extension_name\n        local extension_sm = #extension_name\n        local extension_strength = 0\n        local j = 1\n        while j <= extension_cap do\n            if string.upper(extension_name[j]) ~= string.upper(extension_name[j]) then\n                extension_strength = extension_strength + 1\n            end\n            j = j + 1\n        end\n        if extension_strength > strong_extension_strength then\n            strong_extension_name = extension\n            strong_extension_strength = extension_strength\n        end\n        i = i + 1\n    end\n    strong_extension = class_name .. '.' .. strong_extension_name\n    return strong_extension\nend",
    "    local table = {}\n    for _, extension in ipairs(extensions) do\n        table[extension] = table[extension] or 0\n        table[extension] = table[extension] + tonumber(string.upper(extension))\n    end\n    local max = 0\n    for _, extension in ipairs(table) do\n        if table[extension] > max then\n            max = table[extension]\n            strongest = extension\n        end\n    end\n    return class_name .. '.' .. strongest\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = nil\n    local strong_extension_name = nil\n    local strong_extension_strength = nil\n    for _, extension in ipairs(extensions) do\n        local extension_name = extension\n        local extension_strength = 0\n        for _, char in ipairs(extension_name) do\n            if char.upper() == char then\n                extension_strength = extension_strength + 1\n            end\n        end\n        if extension_strength > strong_extension_strength then\n            strong_extension = extension\n            strong_extension_name = extension_name\n            strong_extension_strength = extension_strength\n        end\n    end\n    return class_name .. '.' .. strong_extension_name\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local strength = 0\n    for _, extension in ipairs(extensions) do\n        local cap = 0\n        local sm = 0\n        for _, c in ipairs(extension) do\n            if c == 'A' or c == 'a' then\n                cap = cap + 1\n            end\n            if c == 'a' or c == 'A' then\n                sm = sm + 1\n            end\n        end\n        strength = strength + (cap - sm)\n    end\n    local max_strength = 0\n    for _, extension in ipairs(extensions) do\n        if strength < max_strength then\n            break\n        end\n        if strength == max_strength then\n            if table.find(class_table, extension) <> nil then\n                return class_name .. '.' .. extension\n            end\n        end\n        max_strength = max_strength + 1\n    end\n    return class_name\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        local strength = 0\n        for _, c in ipairs(extension) do\n            if string.char(c) ~= string.char(tostring(c)) then\n                strength = strength + 1\n            end\n        end\n        table.insert(class_table, {extension, strength})\n    end\n    local max_strength = 0\n    for _, extension in ipairs(class_table) do\n        if extension.strength > max_strength then\n            max_strength = extension.strength\n            max_extension = extension.extension\n        end\n    end\n    return class_name .. '.' .. max_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local result = class_name\n    local i = 1\n    for i, extension in ipairs(extensions) do\n        local strength = #extension - #extension:lower()\n        if strength > 0 then\n            result = result .. '.' .. extension\n        end\n    end\n    return result\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    local i = 1\n    while i <= #extensions do\n        local extension = extensions[i]\n        local extension_name = string.sub(extension, 1, -1)\n        local extension_strength = #extension_name - #extension_name:find('[a-z]')\n        if extension_strength > strong_extension_strength then\n            strong_extension_name = extension_name\n            strong_extension_strength = extension_strength\n            strong_extension = class_name .. '.' .. strong_extension_name\n        end\n        i = i + 1\n    end\n    return strong_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_ext = ''\n    local strong_ext_name = ''\n    local strong_ext_strength = 0\n    local i = 1\n    while i <= #extensions do\n        local ext_name = extensions[i]\n        local ext_strength = 0\n        local ext_cap = 0\n        local ext_sm = 0\n        local ext_name_len = #ext_name\n        local j = 1\n        while j <= ext_name_len do\n            if ext_name[j] == 'A' or ext_name[j] == 'a' then\n                ext_cap = ext_cap + 1\n            else\n                ext_sm = ext_sm + 1\n            end\n            j = j + 1\n        end\n        ext_strength = ext_cap - ext_sm\n        if ext_strength > strong_ext_strength then\n            strong_ext_strength = ext_strength\n            strong_ext_name = ext_name\n        end\n        i = i + 1\n    end\n    if strong_ext_strength > 0 then\n        strong_ext = class_name .. '.' .. strong_ext_name\n    end\n    return strong_ext\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strength = 0\n    for _,extension in ipairs(extensions) do\n        local ext_strength = #extension - #extension:lower()\n        if ext_strength > strength then\n            strong_extension = extension\n            strength = ext_strength\n        end\n    end\n    return class_name .. '.' .. strong_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength = #extension:upper() - #extension:lower()\n        if extension_strength > strong_extension_strength then\n            strong_extension_strength = extension_strength\n            strong_extension_name = extension\n        end\n    end\n    if strong_extension_strength > 0 then\n        strong_extension = class_name .. '.' .. strong_extension_name\n    end\n    return strong_extension\nend",
    "    local table = {}\n    for _, extension in ipairs(extensions) do\n        table[extension] = table[extension] or 0\n        table[extension] = table[extension] + tonumber(string.upper(extension))\n    end\n    local max = math.min(table)\n    local max_extension = nil\n    for _, extension in ipairs(table) do\n        if table[extension] == max then\n            max_extension = extension\n        end\n    end\n    return class_name .. '.' .. max_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local strong_extension = ''\n    for _, extension in ipairs(extensions) do\n        local strength = 0\n        for _, char in ipairs(extension) do\n            if char.upper() > strength then strength = char.upper() end\n        end\n        if strength > 0 then strength = strength - 1 end\n        if strength > strong_extension then strong_extension = extension end\n    end\n    return class_name .. '.' .. strong_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local class_table_sorted = class_table:sort()\n    local strongest_extension = class_table_sorted[1]\n    return class_name..'.'..strongest_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        local strength = #extension - #extension:lower()\n        table.insert(class_table, {extension, strength})\n    end\n    local strongest_extension = nil\n    for _, extension in ipairs(extensions) do\n        if not strongest_extension or strength < class_table[1][1] then\n            strongest_extension = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local class_table_sorted = table.sort(class_table)\n    local strongest_extension = class_name\n    for _, extension in ipairs(class_table_sorted) do\n        if table.count(class_table, extension) == 1 then\n            strongest_extension = class_name .. '.' .. extension\n            break\n        end\n    end\n    return strongest_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    local i = 1\n    while i <= #extensions do\n        local extension_name = extensions[i]\n        local extension_strength = 0\n        local extension_cap = 0\n        local extension_sm = 0\n        local extension_name_upper = string.upper(extension_name)\n        local extension_name_lower = string.lower(extension_name)\n        local extension_cap_upper = #extension_name_upper\n        local extension_cap_lower = #extension_name_lower\n        local extension_sm_upper = #extension_name_upper - #extension_name_lower\n        local extension_sm_lower = #extension_name_lower - #extension_name_lower\n        if extension_name_upper > extension_name_lower then\n            extension_cap = extension_cap_upper\n            extension_sm = extension_sm_upper\n        else\n            extension_cap = extension_cap_lower\n            extension_sm = extension_sm_lower\n        extension_strength = extension_cap - extension_sm\n        if extension_strength > strong_extension_strength then\n            strong_extension_strength = extension_strength\n            strong_extension_name = extension_name\n            strong_extension = class_name + '.' + extension_name\n        end\n        i = i + 1\n    end\n    return strong_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local i = 1\n    while i <= #extensions do\n        local extension = extensions[i]\n        local strength = #extension - #extension:lower()\n        if strength > strong_extension then\n            strong_extension = strength\n            strong_extension_name = extension\n        end\n        i = i + 1\n    end\n    return class_name .. '.' .. strong_extension_name\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        class_table[extension] = tostring(class_name .. '.' .. extension)\n    end\n    local max_strength = 0\n    local max_extension = nil\n    for extension, strength in pairs(class_table) do\n        if strength > max_strength then\n            max_strength = strength\n            max_extension = extension\n        end\n    end\n    return class_table[max_extension]\nend",
    "    local table = {}\n    for _, extension in ipairs(extensions) do\n        table[extension] = table[extension] or 0\n        table[extension] = table[extension] + tonumber(string.upper(extension))\n    end\n    local max = 0\n    for _, extension in ipairs(table) do\n        if max < table[extension] then\n            max = table[extension]\n            strongest = extension\n        end\n    end\n    return class_name .. '.' .. strongest\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    for i = 1, #extensions, 1 do\n        local extension = extensions[i]\n        local extension_name = extension\n        local extension_strength = 0\n        local extension_cap = 0\n        local extension_sm = 0\n        for j = 1, #extension, 1 do\n            local c = string.char(extension[j])\n            if c == string.char(class_name[j]) then\n                extension_cap = extension_cap + 1\n            else\n                extension_sm = extension_sm + 1\n            end\n        end\n        extension_strength = extension_cap - extension_sm\n        if extension_strength > strong_extension_strength then\n            strong_extension_name = extension_name\n            strong_extension_strength = extension_strength\n        end\n    end\n    if strong_extension_strength > 0 then\n        strong_extension = class_name .. '.' .. strong_extension_name\n    end\n    return strong_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local max_strength = 0\n    for _, extension in ipairs(extensions) do\n        local strength = #extension - #extension:lower()\n        if strength > max_strength then\n            max_strength = strength\n            max_extension = extension\n        end\n    end\n    return class_name .. '.' .. max_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local strong_extension = ''\n    for _, extension in ipairs(extensions) do\n        local strength = 0\n        for _, c in ipairs(extension) do\n            if c == 'A' or c == 'a' then strength = strength + 1\n            end\n        end\n        if strength > strong_extension then\n            strong_extension = extension\n        end\n    end\n    return class_name .. '.' .. strong_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = nil\n    local i = 1\n    while i <= #extensions do\n        local extension = extensions[i]\n        local strength = #extension - #extension:lower()\n        if strength > 0 then\n            if strength > strong_extension then\n                strong_extension = strength\n                strong_extension_name = extension\n            end\n        end\n        i = i + 1\n    end\n    return class_name .. '.' .. strong_extension_name\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local strong_extension = ''\n    for _, extension in ipairs(extensions) do\n        local strength = #extension - #extension:lower()\n        if strength > strong_extension then\n            strong_extension = extension\n        end\n    end\n    return class_name .. '.' .. strong_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local i = 1\n    for _, extension in ipairs(extensions) do\n        local strength = #extension - #extension:lower()\n        if strength > strong_extension then\n            strong_extension = strength\n            strong_extension_name = extension\n        end\n    end\n    return class_name .. '.' .. strong_extension_name\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    for _, extension in ipairs(extensions) do\n        local extension_name = string.lower(extension)\n        local extension_strength = 0\n        for _, char in ipairs(extension_name) do\n            if char.upper() > 0 then\n                extension_strength = extension_strength + 1\n            end\n        end\n        if extension_strength > strong_extension_strength then\n            strong_extension_name = extension\n            strong_extension_strength = extension_strength\n        end\n    end\n    strong_extension = class_name .. '.' .. strong_extension_name\n    return strong_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local max_strength = 0\n    for _, extension in ipairs(extensions) do\n        local strength = 0\n        for _, char in ipairs(extension) do\n            if char.isupper() then\n                strength = strength + 1\n            end\n        end\n        if strength > max_strength then\n            max_strength = strength\n            class_table.strongest_extension = extension\n        end\n    end\n    return class_name .. '.' .. class_table.strongest_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local max_strength = 0\n    for _, extension in ipairs(extensions) do\n        local strength = 0\n        for _, char in ipairs(extension) do\n            if char.upper() then strength = strength + 1 else strength = strength + 2\n        end\n        if strength > max_strength then max_strength = strength\n    end\n    local max_strength_index = 1\n    for _, extension in ipairs(extensions) do\n        if strength = max_strength then\n            return class_name .. '.' .. extension\n        end\n        if strength > max_strength then\n            max_strength_index = max_strength_index + 1\n        end\n    end\n    return class_name .. '.' .. extensions[max_strength_index]\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local result = class_name\n    local strength = 0\n    for _, extension in ipairs(extensions) do\n        local ext_strength = #extension - #extension:lower()\n        if ext_strength > strength then\n            strength = ext_strength\n            result = class_name .. '.' .. extension\n        end\n    end\n    return result\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local strength = 0\n    for _, extension in ipairs(extensions) do\n        local cap = 0\n        local sm = 0\n        for _, c in ipairs(extension) do\n            if c == 'A' or c == 'a' then\n                cap = cap + 1\n            end\n            if c == 'a' then\n                sm = sm + 1\n            end\n        end\n        strength = strength + (cap - sm)\n    end\n    local result = class_name\n    for _, extension in ipairs(extensions) do\n        if table.find(class_table, extension) then\n            result = result .. '.' .. extension\n        end\n    end\n    return result\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local class_table_sorted = table.sort(class_table)\n    local strongest_extension = class_name\n    for _, extension in ipairs(class_table_sorted) do\n        if class_name ~= extension then\n            strongest_extension = extension\n            break\n        end\n    end\n    return class_name .. '.' .. strongest_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    for _, extension in ipairs(extensions) do\n        local extension_name = string.lower(extension)\n        local extension_strength = 0\n        for _, char in ipairs(extension_name) do\n            if char == 'a' or char == 'A' then\n                extension_strength = extension_strength + 1\n            end\n        end\n        if extension_strength > strong_extension_strength then\n            strong_extension_name = extension\n            strong_extension_strength = extension_strength\n        end\n    end\n    if strong_extension_strength > 0 then\n        strong_extension = class_name .. '.' .. strong_extension_name\n    end\n    return strong_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local strong_extension = nil\n    for _, extension in ipairs(extensions) do\n        local strength = 0\n        for _, char in ipairs(extension) do\n            if char.upper() > strength then\n                strength = char.upper()\n            end\n        end\n        if strength > strong_extension then\n            strong_extension = extension\n        end\n    end\n    return class_name .. '.' .. strong_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    for _, extension in ipairs(extensions) do\n        local extension_name = string.lower(extension)\n        local extension_strength = 0\n        for _, c in ipairs(extension_name) do\n            if c == 'a' then\n                extension_strength = extension_strength + 1\n            end\n        end\n        if extension_strength > strong_extension_strength then\n            strong_extension_name = extension\n            strong_extension_strength = extension_strength\n        end\n    end\n    if strong_extension_strength > 0 then\n        strong_extension = class_name .. '.' .. strong_extension_name\n    end\n    return strong_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local strong_extension = ''\n    for _, extension in ipairs(extensions) do\n        local strength = 0\n        for _, c in ipairs(extension) do\n            strength = strength + (c.upper() - c.lower())\n        end\n        if strength > strong_extension then\n            strong_extension = extension\n        end\n    end\n    return class_name .. '.' .. strong_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local strong_extension = ''\n    for _, extension in ipairs(extensions) do\n        local strength = #extension - #extension:lower()\n        if strength > strong_extension then\n            strong_extension = extension\n        end\n    end\n    return class_name .. '.' .. strong_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        local strength = #extension - #extension:lower()\n        table.insert(class_table, {extension, strength})\n    end\n    local max_strength = 0\n    for _, class_extension in ipairs(class_table) do\n        if class_extension.strength > max_strength then\n            max_strength = class_extension.strength\n            max_extension = class_extension.extension\n        end\n    end\n    return class_name .. '.' .. max_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local strong_extension = ''\n    for _, extension in ipairs(extensions) do\n        local strength = 0\n        for _, char in ipairs(extension) do\n            if char.upper() == char then\n                strength = strength + 1\n            end\n        end\n        if strength > strong_extension then\n            strong_extension = extension\n        end\n    end\n    return class_name .. '.' .. strong_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        local strength = #extension - #extension:lower()\n        table.insert(class_table, {extension, strength})\n    end\n    local max_strength = 0\n    for _, extension in ipairs(extensions) do\n        if strength > max_strength then\n            max_strength = strength\n            max_extension = extension\n        end\n    end\n    return class_name .. '.' .. max_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strength = 0\n    for _, extension in ipairs(extensions) do\n        local cap = 0\n        local sm = 0\n        for _, c in ipairs(extension) do\n            if c ~= '_' then\n                cap = cap + 1\n            end\n            if c ~= '_' then\n                sm = sm + 1\n            end\n        end\n        strength = strength + (cap - sm)\n        if strength > strong_extension then\n            strong_extension = extension\n        end\n    end\n    return class_name .. '.' .. strong_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        local strength = #extension - #extension:lower()\n        table.insert(class_table, {extension, strength})\n    end\n    local max_strength = 0\n    for _, extension in ipairs(class_table) do\n        if strength > max_strength then\n            max_strength = strength\n            max_extension = extension\n        end\n    end\n    return class_name .. '.' .. max_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local class_table_sorted = class_table:sort()\n    local strongest_extension = class_table_sorted:shift()\n    return class_name .. '.' .. strongest_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local i = 1\n    while i <= #extensions do\n        local extension_name = extensions[i]\n        local extension_strength = 0\n        local extension_name_upper = string.upper(extension_name)\n        local extension_name_lower = string.lower(extension_name)\n        local num_upper = string.find(extension_name_upper, 'A')\n        local num_lower = string.find(extension_name_lower, 'a')\n        if num_upper > 0 and num_lower > 0 then\n            extension_strength = num_upper - num_lower\n        end\n        if extension_strength > strong_extension then\n            strong_extension = extension_strength\n            strong_extension_name = extension_name\n        end\n        i = i + 1\n    end\n    return class_name .. '.' .. strong_extension_name\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    for _,extension in ipairs(extensions) do\n        local ext_strength = #extension - #extension:lower()\n        if ext_strength > strong_extension_strength then\n            strong_extension_strength = ext_strength\n            strong_extension_name = extension\n        end\n    end\n    if strong_extension_strength > 0 then\n        strong_extension = class_name .. '.' .. strong_extension_name\n    end\n    return strong_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    for _, extension in ipairs(extensions) do\n        local extension_name = string.lower(extension)\n        local extension_strength = 0\n        for _, c in ipairs(extension_name) do\n            if c >= 'A' and c <= 'Z' then\n                extension_strength = extension_strength + 1\n            end\n        end\n        if extension_strength > strong_extension_strength then\n            strong_extension_name = extension\n            strong_extension_strength = extension_strength\n        end\n    end\n    if strong_extension_strength > 0 then\n        strong_extension = class_name .. '.' .. strong_extension_name\n    end\n    return strong_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        local strength = #extension - #extension:lower()\n        table.insert(class_table, {extension, strength})\n    end\n    local max_strength = 0\n    for _, extension in ipairs(class_table) do\n        if max_strength < extension:max_strength then\n            max_strength = extension:max_strength\n            local strongest_extension = extension:extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local result = class_name\n    local strength = 0\n    for _, extension in ipairs(extensions) do\n        local cap = string.find(extension, 'A')\n        local sm = string.find(extension, 'a')\n        if cap > sm then\n            cap = cap\n        end\n        if cap - sm > strength then\n            strength = cap - sm\n            result = class_name .. '.' .. extension\n        end\n    end\n    return result\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        local strength = #extension - #extension:lower()\n        table.insert(class_table, {extension, strength})\n    end\n    local max_strength = 0\n    for _, extension in ipairs(class_table) do\n        if max_strength < extension:max_strength then\n            max_strength = extension\n            max_strength_extension = extension:extension\n        end\n    end\n    return class_name .. '.' .. max_strength_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strength = 0\n    for _, extension in ipairs(extensions) do\n        local cap = 0\n        local sm = 0\n        for i, c in ipairs(extension) do\n            if c == 'A' or c == 'a' then\n                cap = cap + 1\n            else\n                sm = sm + 1\n        end\n        strength = strength + (cap - sm)\n        if strength > strong_extension then\n            strong_extension = extension\n        end\n    end\n    return class_name .. '.' .. strong_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    for _,extension in ipairs(extensions) do\n        local ext_name = string.lower(extension)\n        local ext_cap = #ext_name\n        local ext_sm = #ext_name\n        local strength = ext_cap - ext_sm\n        if strength > strong_extension_strength then\n            strong_extension_name = ext_name\n            strong_extension_strength = strength\n        end\n    end\n    if strong_extension_strength > 0 then\n        strong_extension = class_name .. '.' .. strong_extension_name\n    end\n    return strong_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    local i = 1\n    while i <= #extensions do\n        local extension_name = extensions[i]\n        local extension_strength = 0\n        local extension_cap = 0\n        local extension_sm = 0\n        local extension_name_upper = string.upper(extension_name)\n        local extension_name_lower = string.lower(extension_name)\n        local extension_cap_upper = #extension_name_upper\n        local extension_cap_lower = #extension_name_lower\n        local extension_sm_upper = #extension_name_upper - extension_cap_upper\n        local extension_sm_lower = #extension_name_lower - extension_cap_lower\n        extension_strength = extension_sm_upper - extension_sm_lower\n        if extension_strength > strong_extension_strength then\n            strong_extension_strength = extension_strength\n            strong_extension_name = extension_name\n        end\n        i = i + 1\n    end\n    strong_extension = class_name .. '.' .. strong_extension_name\n    return strong_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local max_strength = 0\n    for _, extension in ipairs(extensions) do\n        local strength = #extension - #extension:lower()\n        if strength > max_strength then\n            max_strength = strength\n            class_table[1] = extension\n        end\n    end\n    return class_name .. '.' .. class_table[1]\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local class_table_sorted = class_table\n    class_table_sorted:sort()\n    local strongest_extension = class_table_sorted[1]\n    return class_name..strongest_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        local strength = #extension - #extension:lower()\n        table.insert(class_table, {extension, strength})\n    end\n    local strongest_extension = nil\n    for _, extension in ipairs(extensions) do\n        if not strongest_extension or class_table[strongest_extension][1] < class_table[extension][1] then\n            strongest_extension = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local max_strength = 0\n    for _, extension in ipairs(extensions) do\n        local strength = #extension - #extension:lower()\n        if strength > max_strength then\n            max_strength = strength\n            class_table[1] = extension\n        end\n    end\n    return class_name .. '.' .. class_table[1]\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local strength = 0\n    for _, extension in ipairs(extensions) do\n        local cap = string.find(extension, 'A')\n        local sm = string.find(extension, 'a')\n        strength = strength + (cap - sm)\n    end\n    for _, extension in ipairs(extensions) do\n        if strength == class_table[extension] then\n            return class_name .. '.' .. extension\n        end\n    end\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local i = 1\n    for _, extension in ipairs(extensions) do\n        local strength = #extension - #extension:lower()\n        if strength > strong_extension then\n            strong_extension = strength\n            strong_extension_name = extension\n        end\n    end\n    return class_name .. '.' .. strong_extension_name\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local class_table_sorted = class_table:sort()\n    local strongest_extension = class_table_sorted[1]\n    return class_name .. '.' .. strongest_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    for _, ext in ipairs(extensions) do\n        local ext_strength = #ext - #ext:lower()\n        if ext_strength > strong_extension_strength then\n            strong_extension_strength = ext_strength\n            strong_extension_name = ext\n        end\n    end\n    if strong_extension_strength > 0 then\n        strong_extension = class_name .. '.' .. strong_extension_name\n    end\n    return strong_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local class_table_sorted = class_table:sort()\n    local strongest_extension = class_table_sorted[1]\n    return class_name..'.'..strongest_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        class_table[extension] = class_table[extension] or 0\n        class_table[extension] = class_table[extension] + 1\n    end\n    local max_strength = 0\n    local max_extension = nil\n    for extension, strength in pairs(class_table) do\n        if strength > max_strength then\n            max_strength = strength\n            max_extension = extension\n        end\n    end\n    return class_name .. '.' .. max_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        local strength = #extension - #extension:lower()\n        table.insert(class_table, {extension, strength})\n    end\n    local max_strength = 0\n    for _, extension in ipairs(extensions) do\n        if strength > max_strength then\n            max_strength = strength\n            local max_extension = extension\n        end\n    end\n    return class_name .. '.' .. max_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    local i = 1\n    while i <= #extensions do\n        local extension_name = extensions[i]\n        local extension_strength = 0\n        local extension_name_upper = string.upper(extension_name)\n        local extension_name_lower = string.lower(extension_name)\n        local extension_name_upper_count = #extension_name_upper\n        local extension_name_lower_count = #extension_name_lower\n        local extension_name_count = extension_name_upper_count + extension_name_lower_count\n        local extension_name_count_upper = extension_name_upper_count\n        local extension_name_count_lower = extension_name_lower_count\n        while i <= #extensions do\n            local next_extension_name = extensions[i]\n            local next_extension_name_upper = string.upper(next_extension_name)\n            local next_extension_name_lower = string.lower(next_extension_name)\n            local next_extension_name_upper_count = #next_extension_name_upper\n            local next_extension_name_lower_count = #next_extension_name_lower\n            local next_extension_name_count = next_extension_name_upper_count + next_extension_name_lower_count\n            local next_extension_name_count_upper = next_extension_name_upper_count\n            local next_extension_name_count_lower = next_extension_name_lower_count\n            if extension_name_upper == next_extension_name_upper and extension_name_lower == next_extension_name_lower then\n                extension_strength = extension_strength + 1\n            end\n            i = i + 1\n        end\n        if extension_strength > strong_extension_strength then\n            strong_extension = class_name\n            strong_extension_name = extension_name\n            strong_extension_strength = extension",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    for _,extension in ipairs(extensions) do\n        local ext_strength = #extension - #extension:lower()\n        if ext_strength > strong_extension_strength then\n            strong_extension_strength = ext_strength\n            strong_extension_name = extension\n        end\n    end\n    if strong_extension_strength > 0 then\n        strong_extension = class_name .. '.' .. strong_extension_name\n    end\n    return strong_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strength = 0\n    for _, extension in ipairs(extensions) do\n        local ext_strength = 0\n        for _, char in ipairs(extension) do\n            if char.upper() > 0 then\n                ext_strength = ext_strength + 1\n            end\n        end\n        if ext_strength > strength then\n            strong_extension = extension\n            strength = ext_strength\n        end\n    end\n    return class_name .. '.' .. strong_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strength = 0\n    for _, ext in ipairs(extensions) do\n        local ext_strength = 0\n        local ext_cap = 0\n        local ext_sm = 0\n        for _, c in ipairs(ext) do\n            if c.isupper() then\n                ext_cap = ext_cap + 1\n            else\n                ext_sm = ext_sm + 1\n            end\n        end\n        ext_strength = ext_cap - ext_sm\n        if ext_strength > strength then\n            strong_extension = ext\n            strength = ext_strength\n        end\n    end\n    return class_name .. '.' .. strong_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    local i = 1\n    while i <= #extensions do\n        local extension_name = extensions[i]\n        local extension_strength = 0\n        local extension_cap = 0\n        local extension_sm = 0\n        local extension_name_upper = string.upper(extension_name)\n        local extension_name_lower = string.lower(extension_name)\n        local extension_cap_upper = #extension_name_upper\n        local extension_cap_lower = #extension_name_lower\n        local extension_sm_upper = #extension_name_upper - #extension_name_lower\n        local extension_sm_lower = #extension_name_lower - #extension_name_lower\n        if extension_cap_upper > extension_cap_lower then\n            extension_cap = extension_cap_upper\n        else\n            extension_cap = extension_cap_lower\n        if extension_sm_upper > extension_sm_lower then\n            extension_sm = extension_sm_upper\n        else\n            extension_sm = extension_sm_lower\n        extension_strength = extension_cap - extension_sm\n        if extension_strength > strong_extension_strength then\n            strong_extension_strength = extension_strength\n            strong_extension_name = extension_name\n            strong_extension = class_name + '.' + extension_name\n        i = i + 1\n    end\n    return strong_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        local strength = #extension - #extension:lower()\n        table.insert(class_table, {extension, strength})\n    end\n    local max_strength = 0\n    for _, extension in ipairs(class_table) do\n        if strength > max_strength then\n            max_strength = strength\n            max_extension = extension\n        end\n    end\n    return class_name .. '.' .. max_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = nil\n    local i = 1\n    while i <= #extensions do\n        local extension = extensions[i]\n        local strength = #extension - #extension:lower()\n        if strength > 0 then\n            if strength > strong_extension then\n                strong_extension = strength\n                strong_extension_name = extension\n            end\n        end\n        i = i + 1\n    end\n    return class_name .. '.' .. strong_extension_name\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength = #extension - #extension:lower()\n        if extension_strength > strong_extension_strength then\n            strong_extension_strength = extension_strength\n            strong_extension_name = extension\n        end\n    end\n    if strong_extension_strength > 0 then\n        strong_extension = class_name .. '.' .. strong_extension_name\n    end\n    return strong_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_ext = ''\n    local i = 1\n    while i <= #extensions do\n        local ext = extensions[i]\n        local ext_name = string.lower(ext)\n        local ext_cap = #ext_name\n        local ext_sm = #ext_name\n        while ext_cap >= ext_sm do\n            ext_cap = ext_cap - 1\n            ext_sm = ext_sm - 1\n        end\n        if ext_cap - ext_sm > strong_ext then\n            strong_ext = ext\n        end\n        i = i + 1\n    end\n    return class_name .. '.' .. strong_ext\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    for _, extension in ipairs(extensions) do\n        local extension_name = string.lower(extension)\n        local extension_strength = 0\n        for _, c in ipairs(extension_name) do\n            if c == 'a' or c == 'A' then\n                extension_strength = extension_strength + 1\n            end\n        end\n        if extension_strength > strong_extension_strength then\n            strong_extension_name = extension\n            strong_extension_strength = extension_strength\n        end\n    end\n    if strong_extension_strength > 0 then\n        strong_extension = class_name .. '.' .. strong_extension_name\n    end\n    return strong_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local i = 1\n    while i <= #extensions do\n        local extension = extensions[i]\n        local strength = #extension - #extension:lower()\n        if strength > strong_extension then\n            strong_extension = strength\n            strong_extension_name = extension\n        end\n        i = i + 1\n    end\n    return class_name .. '.' .. strong_extension_name\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    local i = 1\n    while i <= #extensions do\n        local extension_name = extensions[i]\n        local extension_strength = 0\n        local extension_name_upper = string.upper(extension_name)\n        local extension_name_lower = string.lower(extension_name)\n        local extension_name_upper_count = #extension_name_upper\n        local extension_name_lower_count = #extension_name_lower\n        local extension_name_count = extension_name_upper_count + extension_name_lower_count\n        local extension_name_strength = extension_name_upper_count - extension_name_lower_count\n        if extension_name_strength > strong_extension_strength then\n            strong_extension_strength = extension_name_strength\n            strong_extension_name = extension_name\n        end\n        i = i + 1\n    end\n    if strong_extension_strength > 0 then\n        strong_extension = class_name .. '.' .. strong_extension_name\n    end\n    return strong_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local strength = 0\n    for _, extension in ipairs(extensions) do\n        local cap = string.find(extension, 'A')\n        local sm = string.find(extension, 'a')\n        strength = strength + cap - sm\n    end\n    for _, extension in ipairs(extensions) do\n        if strength == 0 then\n            return class_name .. '.' .. extension\n        end\n        if strength < 0 then\n            strength = strength + 1\n        end\n        if strength > strength then\n            return class_name .. '.' .. extension\n        end\n    end\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local i = 1\n    while i <= #extensions do\n        local extension = extensions[i]\n        local strength = #extension - #extension:lower()\n        if strength > strong_extension then\n            strong_extension = strength\n            strong_extension_name = extension\n        end\n        i = i + 1\n    end\n    return class_name .. '.' .. strong_extension_name\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local i = 1\n    for _, extension in ipairs(extensions) do\n        local strength = #extension - #extension:lower()\n        if strength > strong_extension then\n            strong_extension = strength\n            strong_extension_name = extension\n        end\n        i = i + 1\n    end\n    return class_name .. '.' .. strong_extension_name\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strength = 0\n    for _, ext in ipairs(extensions) do\n        local ext_strength = math.floor((string.upper(ext) - string.lower(ext)) / 2)\n        if ext_strength > strength then\n            strong_extension = ext\n            strength = ext_strength\n        end\n    end\n    return class_name .. '.' .. strong_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local max_strength = 0\n    local max_extension = nil\n    for _, extension in ipairs(extensions) do\n        local strength = 0\n        for _, extension_name in ipairs(extension) do\n            strength = strength + tonumber(string.upper(extension_name)) - tonumber(string.lower(extension_name))\n        end\n        if strength > max_strength then\n            max_strength = strength\n            max_extension = extension\n        end\n    end\n    return class_name .. '.' .. max_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local strong_extension = ''\n    for _, extension in ipairs(extensions) do\n        local strength = #extension - #extension:lower()\n        if strength > strong_extension then\n            strong_extension = extension\n        end\n    end\n    return class_name .. '.' .. strong_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local class_table_sorted = class_table\n    class_table_sorted:sort()\n    local strongest_extension = class_table_sorted[1]\n    return class_name..strongest_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local class_table_sorted = class_table:sort()\n    local strongest_extension = class_table_sorted[1]\n    return class_name .. '.' .. strongest_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    local i = 1\n    while i <= #extensions do\n        local extension_name = extensions[i]\n        local extension_strength = 0\n        local extension_cap = 0\n        local extension_sm = 0\n        local extension_name_upper = string.upper(extension_name)\n        local extension_name_lower = string.lower(extension_name)\n        local extension_cap_upper = #extension_name_upper\n        local extension_cap_lower = #extension_name_lower\n        local extension_sm_upper = #extension_name_upper - extension_cap_upper\n        local extension_sm_lower = #extension_name_lower - extension_cap_lower\n        extension_strength = extension_sm_upper - extension_sm_lower\n        extension_cap = extension_cap_upper\n        extension_sm = extension_sm_upper\n        if extension_strength > strong_extension_strength then\n            strong_extension_strength = extension_strength\n            strong_extension_name = extension_name\n        end\n        i = i + 1\n    end\n    strong_extension = class_name .. '.' .. strong_extension_name\n    return strong_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    local i = 1\n    while i <= #extensions do\n        local extension_name = extensions[i]\n        local extension_strength = 0\n        local extension_cap = 0\n        local extension_sm = 0\n        local extension_name_length = #extension_name\n        local extension_name_upper = string.upper(extension_name)\n        local extension_name_lower = string.lower(extension_name)\n        while i <= #extensions do\n            local extension_name = extensions[i]\n            local extension_name_length = #extension_name\n            local extension_name_upper = string.upper(extension_name)\n            local extension_name_lower = string.lower(extension_name)\n            if extension_name_upper == extension_name_lower then\n                extension_cap = extension_cap + 1\n            else\n                extension_sm = extension_sm + 1\n            end\n            i = i + 1\n        end\n        extension_strength = extension_cap - extension_sm\n        if extension_strength > strong_extension_strength then\n            strong_extension_strength = extension_strength\n            strong_extension_name = extension_name\n        end\n        i = i + 1\n    end\n    strong_extension = class_name .. '.' .. strong_extension_name\n    return strong_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        class_table[extension] = class_table[extension] or 0\n        class_table[extension] = class_table[extension] + 1\n    end\n    local max_strength = 0\n    local max_extension = ''\n    for extension, strength in pairs(class_table) do\n        if strength > max_strength then\n            max_strength = strength\n            max_extension = extension\n        end\n    end\n    return class_name .. '.' .. max_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_ext = ''\n    local strong_ext_name = ''\n    local strong_ext_strength = 0\n    for _, ext in ipairs(extensions) do\n        local ext_strength = #ext - #ext:lower()\n        if ext_strength > strong_ext_strength then\n            strong_ext_strength = ext_strength\n            strong_ext_name = ext\n        end\n    end\n    strong_ext = class_name .. '.' .. strong_ext_name\n    return strong_ext\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        local strength = #extension - #extension:lower()\n        table.insert(class_table, {extension, strength})\n    end\n    local max_strength = 0\n    for _, extension in ipairs(class_table) do\n        if extension[1] > max_strength then\n            max_strength = extension[1]\n            max_extension = extension[2]\n        end\n    end\n    return class_name .. '.' .. max_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = nil\n    local i = 1\n    while i <= #extensions do\n        local extension = extensions[i]\n        local strength = #extension - #extension:lower()\n        if strength > 0 then\n            if strength > strong_extension then\n                strong_extension = strength\n                strong_extension_name = extension\n            end\n        end\n        i = i + 1\n    end\n    return class_name .. '.' .. strong_extension_name\nend",
    "    local table = {}\n    for _, extension in ipairs(extensions) do\n        table[extension] = table[extension] or 0\n        table[extension] = table[extension] + tonumber(string.upper(extension))\n    end\n    for _, extension in ipairs(extensions) do\n        if table[extension] > table.StrongestExtensionName then\n            table.StrongestExtensionName = extension\n        end\n    end\n    return class_name .. '.' .. table.StrongestExtensionName\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        local strength = 0\n        for _, c in ipairs(extension) do\n            if c >= 'A' and c <= 'Z' then strength = strength + 1\n            if c >= 'a' and c <= 'z' then strength = strength + 1\n        end\n        table.insert(class_table, {extension, strength})\n    end\n    local max_strength = 0\n    local max_extension = nil\n    for _, extension in ipairs(class_table) do\n        if extension.strength > max_strength then\n            max_strength = extension.strength\n            max_extension = extension.extension\n        end\n    end\n    return class_name .. '.' .. max_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local class_table_sorted = class_table:sort()\n    local strongest_extension = class_table_sorted[1]\n    return class_name .. '.' .. strongest_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    for i, ext in ipairs(extensions) do\n        local ext_strength = 0\n        local ext_name = ext\n        local ext_caps = 0\n        local ext_sm = 0\n        for c in ext_name do\n            if c == 'A' or c == 'a' then\n                ext_caps = ext_caps + 1\n            end\n            if c == 'a' then\n                ext_sm = ext_sm + 1\n            end\n        end\n        ext_strength = ext_caps - ext_sm\n        if ext_strength > strong_extension_strength then\n            strong_extension_name = ext_name\n            strong_extension_strength = ext_strength\n        end\n    end\n    if strong_extension_strength > 0 then\n        strong_extension = class_name .. '.' .. strong_extension_name\n    end\n    return strong_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    for _, extension in ipairs(extensions) do\n        local extension_name = string.lower(extension)\n        local extension_strength = 0\n        for _, char in ipairs(extension_name) do\n            if char == 'a' or char == 'A' then\n                extension_strength = extension_strength + 1\n            end\n        end\n        if extension_strength > strong_extension_strength then\n            strong_extension_name = extension\n            strong_extension_strength = extension_strength\n        end\n    end\n    if strong_extension_strength > 0 then\n        strong_extension = class_name .. '.' .. strong_extension_name\n    end\n    return strong_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local class_table_sorted = class_table:sort()\n    local class_name_sorted = class_name:lower()\n    local strength = 0\n    for _, extension in ipairs(class_table_sorted) do\n        local extension_sorted = extension:lower()\n        local extension_strength = 0\n        for _, letter in ipairs(extension_sorted) do\n            if class_name_sorted[#class_name_sorted - 1] == letter then\n                extension_strength = extension_strength + 1\n            end\n        end\n        if extension_strength > strength then\n            strength = extension_strength\n            class_name_sorted = class_name_sorted .. '.' .. extension\n        end\n    end\n    return class_name_sorted\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_ext = ''\n    local strong_ext_name = ''\n    local strong_ext_strength = 0\n    for _, ext in ipairs(extensions) do\n        local ext_strength = #ext - #string.lower(ext)\n        if ext_strength > strong_ext_strength then\n            strong_ext_strength = ext_strength\n            strong_ext_name = ext\n        end\n    end\n    strong_ext = class_name .. '.' .. strong_ext_name\n    return strong_ext\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    for _, extension in ipairs(extensions) do\n        local extension_name = string.lower(extension)\n        local extension_strength = 0\n        for _, c in ipairs(extension_name) do\n            if c ~= 'a' and c ~= 'e' and c ~= 'i' and c ~= 'o' and c ~= 'u' then\n                extension_strength = extension_strength + 1\n            end\n        end\n        if extension_strength > strong_extension_strength then\n            strong_extension_strength = extension_strength\n            strong_extension_name = extension_name\n            strong_extension = extension\n        end\n    end\n    return class_name .. '.' .. strong_extension_name .. '.' .. strong_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local strength = 0\n    for _, extension in ipairs(extensions) do\n        local cap = string.find(extension, 'A')\n        local sm = string.find(extension, 'a')\n        local strength = strength + (cap - sm)\n    end\n    for _, extension in ipairs(extensions) do\n        if strength == class_table[extension] then\n            return class_name .. '.' .. extension\n        end\n    end\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local i = 1\n    while i <= #extensions do\n        local extension = extensions[i]\n        local strength = #extension - #extension:lower()\n        if strength > strong_extension then\n            strong_extension = strength\n            strong_extension_name = extension\n        end\n        i = i + 1\n    end\n    return class_name .. '.' .. strong_extension_name\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local max_strength = 0\n    for _, extension in ipairs(extensions) do\n        local strength = 0\n        for _, char in ipairs(extension) do\n            if char.isupper() then\n                strength = strength + 1\n            end\n        end\n        if strength > max_strength then\n            max_strength = strength\n            max_extension = extension\n        end\n    end\n    return class_name .. '.' .. max_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local strong_extension = nil\n    for _, extension in ipairs(extensions) do\n        local strength = 0\n        for _, char in ipairs(extension) do\n            if char.upper() > 0 then\n                strength = strength + 1\n            end\n        end\n        if strength > strong_extension then\n            strong_extension = extension\n        end\n    end\n    return class_name .. '.' .. strong_extension\nend",
    "    local table = {}\n    for _, extension in ipairs(extensions) do\n        table[extension] = table[extension] or 0\n        table[extension] = table[extension] + tonumber(string.upper(extension))\n    end\n    local max = math.min(... table)\n    local max_extension = nil\n    for _, extension in ipairs(table) do\n        if table[extension] == max then\n            max_extension = extension\n        end\n    end\n    return class_name .. '.' .. max_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension\n    local strong_extension_name\n    local strong_extension_strength\n    local i\n    local j\n    local k\n    local l\n    local m\n    local n\n    local o\n    local p\n    local q\n    local r\n    local s\n    local t\n    local u\n    local v\n    local w\n    local x\n    local y\n    local z\n    local extension_name\n    local extension_strength\n    local extension_name_index\n    local extension_name_index_index\n    local extension_name_index_index_index\n    local extension_name_index_index_index_index\n    local extension_name_index_index_index_index_index\n    local extension_name_index_index_index_index_index_index\n    local extension_name_index_index_index_index_index_index_index\n    local extension_name_index_index_index_index_index_index_index_index\n    local extension_name_index_index_index_index_index_index_index_index_index\n    local extension_name_index_index_index_index_index_index_index_index_index_index\n    local extension_name_index_index_index_index_index_index_index_index_index_index_index\n    local extension_name_index_index_index_index_index_index_index_index_index_index_index_index\n    local extension_name_index_index_index_index_index_index_index_index_index_index_index_index_index\n    local extension_name_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n    local extension_name_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n    local extension_name_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\n    local extension_name_index_index_index_index_index_index_index",
    "    local class_name = class_name\n    local extensions = extensions\n    local result = class_name\n    for _, extension in ipairs(extensions) do\n        local strength = #extension - #extension:lower()\n        if strength > result:\n            result = extension\n    end\n    return result\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    for _, extension in ipairs(extensions) do\n        local extension_name = string.lower(extension)\n        local extension_strength = 0\n        for _, c in ipairs(extension_name) do\n            if string.isupper(c) then\n                extension_strength = extension_strength + 1\n            end\n        end\n        if extension_strength > strong_extension_strength then\n            strong_extension = class_name\n            strong_extension_name = extension\n            strong_extension_strength = extension_strength\n        end\n    end\n    return strong_extension .. '.' .. strong_extension_name\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    for _, extension in ipairs(extensions) do\n        local extension_name = string.lower(extension)\n        local extension_strength = 0\n        for _, char in ipairs(extension_name) do\n            if char == 'a' or char == 'A' then\n                extension_strength = extension_strength + 1\n            end\n        end\n        if extension_strength > strong_extension_strength then\n            strong_extension_name = extension\n            strong_extension_strength = extension_strength\n        end\n    end\n    if strong_extension_strength > 0 then\n        strong_extension = class_name .. '.' .. strong_extension_name\n    end\n    return strong_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local class_table_sorted = class_table:sort()\n    local strongest_extension = class_table_sorted[1]\n    return class_name .. '.' .. strongest_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local result = class_name\n    local i = 1\n    for _, extension in ipairs(extensions) do\n        local strength = #extension - #extension:lower()\n        if strength > result:\n            result = strength\n            result = class_name .. '.' .. extension\n        end\n        i = i + 1\n    end\n    return result\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local strong_extension = ''\n    for _, extension in ipairs(extensions) do\n        local strength = 0\n        for _, char in ipairs(extension) do\n            if char.upper() > char then strength = strength + 1\n            end\n        end\n        if strength > strong_extension then strong_extension = extension\n        end\n    end\n    return class_name .. '.' .. strong_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local result = class_name\n    local i = 1\n    while i <= #extensions do\n        local extension = extensions[i]\n        local strength = #extension - #extension:lower()\n        if strength > 0 then\n            result = result .. '.' .. extension\n        end\n        i = i + 1\n    end\n    return result\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        local strength = #extension - #extension:lower()\n        table.insert(class_table, {extension, strength})\n    end\n    local max_strength = 0\n    for _, extension in ipairs(class_table) do\n        if max_strength < extension.strength then\n            max_strength = extension.strength\n            local strongest_extension = extension.extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local i = 1\n    while i <= #extensions do\n        local extension = extensions[i]\n        local strength = #extension - #extension:lower()\n        if strength > strong_extension then\n            strong_extension = strength\n            strong_extension_name = extension\n        end\n        i = i + 1\n    end\n    return class_name .. '.' .. strong_extension_name\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    local i = 1\n    while i <= #extensions do\n        local extension_name = extensions[i]\n        local extension_strength = 0\n        local extension_cap = 0\n        local extension_sm = 0\n        local extension_name_upper = string.upper(extension_name)\n        local extension_name_lower = string.lower(extension_name)\n        local extension_cap_upper = #extension_name_upper\n        local extension_cap_lower = #extension_name_lower\n        local extension_sm_upper = #extension_name_upper - extension_cap_upper\n        local extension_sm_lower = #extension_name_lower - extension_cap_lower\n        extension_strength = extension_sm_upper - extension_sm_lower\n        if extension_strength > strong_extension_strength then\n            strong_extension_name = extension_name\n            strong_extension_strength = extension_strength\n        end\n        i = i + 1\n    end\n    if strong_extension_strength > 0 then\n        strong_extension = class_name .. '.' .. strong_extension_name\n    end\n    return strong_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    local i = 1\n    for i = 1, #extensions do\n        local extension = extensions[i]\n        local extension_name = extension\n        local extension_strength = 0\n        local extension_cap = 0\n        local extension_sm = 0\n        local extension_name_upper = extension_name\n        for j = 1, #extension_name_upper do\n            if extension_name_upper[j] == 'A' or extension_name_upper[j] == 'a' then\n                extension_cap = extension_cap + 1\n            end\n            if extension_name_upper[j] == 'M' or extension_name_upper[j] == 'm' then\n                extension_sm = extension_sm + 1\n            end\n        end\n        extension_strength = extension_cap - extension_sm\n        if extension_strength > strong_extension_strength then\n            strong_extension_strength = extension_strength\n            strong_extension_name = extension_name\n            strong_extension = class_name .. '.' .. extension_name\n        end\n    end\n    return strong_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        local strength = #extension - #extension:lower()\n        table.insert(class_table, {extension, strength})\n    end\n    local max_strength = 0\n    local max_extension = ''\n    for _, extension in ipairs(class_table) do\n        if extension[1] > max_strength then\n            max_strength = extension[1]\n            max_extension = extension[2]\n        end\n    end\n    return class_name .. '.' .. max_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local strong_extension = ''\n    for _, extension in ipairs(extensions) do\n        local strength = 0\n        for _, char in ipairs(extension) do\n            if char.isupper() then\n                strength = strength + 1\n            end\n        end\n        if strength > strong_extension then\n            strong_extension = extension\n        end\n    end\n    return class_name .. '.' .. strong_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local i = 1\n    while i <= #extensions do\n        local extension_name = extensions[i]\n        local extension_name_upper = string.upper(extension_name)\n        local extension_name_lower = string.lower(extension_name)\n        local extension_name_upper_count = #extension_name_upper\n        local extension_name_lower_count = #extension_name_lower\n        local extension_strength = extension_name_upper_count - extension_name_lower_count\n        if extension_strength > strong_extension_strength then\n            strong_extension_name = extension_name\n            strong_extension_strength = extension_strength\n        end\n        i = i + 1\n    end\n    strong_extension = class_name .. '.' .. strong_extension_name\n    return strong_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local class_table_sorted = class_table:sort()\n    local strong_extension = class_table_sorted[1]\n    return class_name .. '.' .. strong_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    for _, extension in ipairs(extensions) do\n        local extension_name = string.lower(extension)\n        local extension_strength = 0\n        for _, char in ipairs(extension_name) do\n            if char == 'a' or char == 'A' then\n                extension_strength = extension_strength + 1\n            end\n        end\n        if extension_strength > strong_extension_strength then\n            strong_extension_name = extension\n            strong_extension_strength = extension_strength\n        end\n    end\n    if strong_extension_strength > 0 then\n        strong_extension = class_name .. '.' .. strong_extension_name\n    end\n    return strong_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local max_strength = 0\n    for _, extension in ipairs(extensions) do\n        local strength = 0\n        for _, char in ipairs(extension) do\n            if char.upper() == char then\n                strength = strength + 1\n            end\n        end\n        if strength > max_strength then\n            max_strength = strength\n            max_extension = extension\n        end\n    end\n    return class_name .. '.' .. max_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local class_table_sorted = class_table:sort()\n    local strongest_extension = class_table_sorted[1]\n    return class_name .. '.' .. strongest_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local max_strength = -1\n    for _, ext in ipairs(extensions) do\n        local strength = #ext - #ext:lower()\n        if strength > max_strength then\n            strong_extension = ext\n            max_strength = strength\n        end\n    end\n    return class_name .. '.' .. strong_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local i = 1\n    for _,extension in ipairs(extensions) do\n        local strength = #extension - #extension:lower()\n        if strength > strong_extension then\n            strong_extension = strength\n            strong_extension_name = extension\n        end\n    end\n    return class_name .. '.' .. strong_extension_name\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    local i = 1\n    while i <= #extensions do\n        local extension_name = extensions[i]\n        local extension_strength = 0\n        local extension_name_upper = string.upper(extension_name)\n        local extension_name_lower = string.lower(extension_name)\n        local extension_name_upper_count = #extension_name_upper\n        local extension_name_lower_count = #extension_name_lower\n        local extension_name_count = extension_name_upper_count + extension_name_lower_count\n        local extension_name_strength = extension_name_upper_count - extension_name_lower_count\n        if extension_name_strength > strong_extension_strength then\n            strong_extension_name = extension_name\n            strong_extension_strength = extension_name_strength\n        end\n        i = i + 1\n    end\n    if strong_extension_strength > 0 then\n        strong_extension = class_name .. '.' .. strong_extension_name\n    end\n    return strong_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        local strength = #extension - #extension:lower()\n        table.insert(class_table, {extension, strength})\n    end\n    local max_strength = 0\n    for _, extension in ipairs(class_table) do\n        if max_strength < extension.strength then\n            max_strength = extension.strength\n            local max_extension = extension.extension\n        end\n    end\n    return class_name .. '.' .. max_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local i = 1\n    local j = 1\n    local k = 1\n    local l = 1\n    local m = 1\n    local n = 1\n    local o = 1\n    local p = 1\n    local q = 1\n    local r = 1\n    local s = 1\n    local t = 1\n    local u = 1\n    local v = 1\n    local w = 1\n    local x = 1\n    local y = 1\n    local z = 1\n    local a = 1\n    local b = 1\n    local c = 1\n    local d = 1\n    local e = 1\n    local f = 1\n    local g = 1\n    local h = 1\n    local i = 1\n    local j = 1\n    local k = 1\n    local l = 1\n    local m = 1\n    local n = 1\n    local o = 1\n    local p = 1\n    local q = 1\n    local r = 1\n    local s = 1\n    local t = 1\n    local u = 1\n    local v = 1\n    local w = 1\n    local x = 1\n    local y = 1\n    local z = 1\n    local a = 1\n    local b = 1\n    local c = 1\n    local d = 1\n    local e = 1\n    local f = 1\n    local g = 1\n    local h = 1\n    local i = 1\n    local j = 1\n    local k = 1\n    local l = 1\n    local m = 1\n    local n = 1\n    local o = 1\n    local p = 1\n    local q = 1\n    local r = 1\n    local s = 1\n    local t = 1\n    local u = 1\n    local v = 1\n    local w = 1\n    local x = 1\n    local y = 1\n    local z = 1\n    local a = 1\n    local b = 1\n    local c = 1\n    local d = 1\n    local e = 1\n    local f = 1\n    local g = 1\n    local h = 1\n    local i = 1\n    local",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local strong_extension = ''\n    for _, extension in ipairs(extensions) do\n        local strength = 0\n        for _, char in ipairs(extension) do\n            if char.upper() == char then\n                strength = strength + 1\n            end\n        end\n        if strength > strong_extension then\n            strong_extension = extension\n        end\n    end\n    return class_name .. '.' .. strong_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    for _, extension in ipairs(extensions) do\n        local extension_name = string.lower(extension)\n        local extension_strength = 0\n        for _, c in ipairs(extension_name) do\n            if c == 'a' or c == 'A' then\n                extension_strength = extension_strength + 1\n            end\n        end\n        if extension_strength > strong_extension_strength then\n            strong_extension_name = extension\n            strong_extension_strength = extension_strength\n        end\n    end\n    strong_extension = class_name .. '.' .. strong_extension_name\n    return strong_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength = #extension - #extension:lower()\n        if extension_strength > strong_extension_strength then\n            strong_extension_name = extension\n            strong_extension_strength = extension_strength\n        end\n    end\n    return class_name .. '.' .. strong_extension_name\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    local i = 1\n    while i <= #extensions do\n        local extension = extensions[i]\n        local extension_name = extension\n        local extension_strength = 0\n        local j = 1\n        while j <= #extension do\n            if string.sub(extension_name, j, j) ~= string.sub(class_name, j, j) then\n                extension_strength = extension_strength + 1\n            end\n            j = j + 1\n        end\n        if extension_strength > strong_extension_strength then\n            strong_extension_name = extension_name\n            strong_extension_strength = extension_strength\n        end\n        i = i + 1\n    end\n    if strong_extension_strength > 0 then\n        strong_extension = class_name .. '.' .. strong_extension_name\n    end\n    return strong_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    local i = 1\n    while i <= #extensions do\n        local extension = extensions[i]\n        local extension_name = string.lower(extension)\n        local extension_strength = #extension - #extension_name\n        if extension_strength > strong_extension_strength then\n            strong_extension_name = extension_name\n            strong_extension_strength = extension_strength\n            strong_extension = extension\n        end\n        i = i + 1\n    end\n    return class_name .. '.' .. strong_extension_name .. '.' .. strong_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local i = 1\n    local j = 1\n    local k = 1\n    local l = 1\n    local m = 1\n    local n = 1\n    local o = 1\n    local p = 1\n    local q = 1\n    local r = 1\n    local s = 1\n    local t = 1\n    local u = 1\n    local v = 1\n    local w = 1\n    local x = 1\n    local y = 1\n    local z = 1\n    local a = 1\n    local b = 1\n    local c = 1\n    local d = 1\n    local e = 1\n    local f = 1\n    local g = 1\n    local h = 1\n    local i = 1\n    local j = 1\n    local k = 1\n    local l = 1\n    local m = 1\n    local n = 1\n    local o = 1\n    local p = 1\n    local q = 1\n    local r = 1\n    local s = 1\n    local t = 1\n    local u = 1\n    local v = 1\n    local w = 1\n    local x = 1\n    local y = 1\n    local z = 1\n    local a = 1\n    local b = 1\n    local c = 1\n    local d = 1\n    local e = 1\n    local f = 1\n    local g = 1\n    local h = 1\n    local i = 1\n    local j = 1\n    local k = 1\n    local l = 1\n    local m = 1\n    local n = 1\n    local o = 1\n    local p = 1\n    local q = 1\n    local r = 1\n    local s = 1\n    local t = 1\n    local u = 1\n    local v = 1\n    local w = 1\n    local x = 1\n    local y = 1\n    local z = 1\n    local a = 1\n    local b = 1\n    local c = 1\n    local d = 1\n    local e = 1\n    local f = 1\n    local g = 1\n    local h = 1\n    local i = 1\n    local",
    "    local table = {}\n    for _, extension in ipairs(extensions) do\n        table[extension] = table[extension] or 0\n        table[extension] = table[extension] + tonumber(string.upper(extension))\n    end\n    for _, extension in ipairs(extensions) do\n        if table[extension] == table[extension] then\n            return class_name .. '.' .. extension\n        end\n    end\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    for _, extension in ipairs(extensions) do\n        local extension_name = string.lower(extension)\n        local extension_strength = 0\n        for _, char in ipairs(extension_name) do\n            if char == 'a' then\n                extension_strength = extension_strength + 1\n            elseif char == 'b' then\n                extension_strength = extension_strength + 1\n            elseif char == 'c' then\n                extension_strength = extension_strength + 1\n            end\n        end\n        if extension_strength > strong_extension_strength then\n            strong_extension_name = extension\n            strong_extension_strength = extension_strength\n        end\n    end\n    if strong_extension_strength > 0 then\n        strong_extension = class_name .. '.' .. strong_extension_name\n    end\n    return strong_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_ext = ''\n    local strong_ext_name = ''\n    local strong_ext_strength = 0\n    local i = 1\n    while i <= #extensions do\n        local ext_name = extensions[i]\n        local ext_strength = 0\n        local ext_cap = 0\n        local ext_sm = 0\n        local ext_cap_l = 0\n        local ext_sm_l = 0\n        local j = 1\n        while j <= #ext_name do\n            if ext_name[j] ~= '.' then\n                ext_cap_l = ext_cap_l + 1\n            else\n                ext_sm_l = ext_sm_l + 1\n            end\n            j = j + 1\n        end\n        ext_cap = ext_cap_l\n        ext_sm = ext_sm_l\n        ext_strength = ext_cap - ext_sm\n        if ext_strength > strong_ext_strength then\n            strong_ext_name = ext_name\n            strong_ext_strength = ext_strength\n        end\n        i = i + 1\n    end\n    strong_ext = class_name .. '.' .. strong_ext_name\n    return strong_ext\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_ext = ''\n    local strong_ext_name = ''\n    local i = 1\n    for _, ext in ipairs(extensions) do\n        local ext_name = string.lower(ext)\n        local ext_cap = #ext_name\n        local ext_sm = #ext_name\n        for i=1,#ext_name do\n            if ext_name[i] ~= 'a' and ext_name[i] ~= 'e' and ext_name[i] ~= 'i' and ext_name[i] ~= 'o' and ext_name[i] ~= 'u' then\n                ext_cap = ext_cap - 1\n                ext_sm = ext_sm - 1\n            end\n        end\n        if ext_cap - ext_sm > 0 then\n            strong_ext = class_name .. '.' .. ext\n            strong_ext_name = ext\n            break\n        end\n    end\n    return strong_ext, strong_ext_name\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strength = 0\n    for _, extension in ipairs(extensions) do\n        local cap = string.find(extension, 'A')\n        local sm = string.find(extension, 'a')\n        if cap > sm then\n            strength = strength + cap - sm\n        end\n    end\n    for _, extension in ipairs(extensions) do\n        if strength == 0 or strength == strength then\n            strong_extension = strong_extension .. '.' .. extension\n        end\n    end\n    return class_name .. '.' .. strong_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    local i = 1\n    while i <= #extensions do\n        local extension_name = extensions[i]\n        local extension_strength = 0\n        local extension_name_upper = string.upper(extension_name)\n        local extension_name_lower = string.lower(extension_name)\n        local extension_name_upper_count = 0\n        local extension_name_lower_count = 0\n        while i <= #extensions do\n            local extension_name_upper = string.upper(extensions[i])\n            local extension_name_lower = string.lower(extensions[i])\n            if extension_name_upper == extension_name_upper_count then\n                extension_name_upper_count = extension_name_upper_count + 1\n            else\n                extension_name_upper_count = extension_name_upper_count + 1\n            if extension_name_lower == extension_name_lower_count then\n                extension_name_lower_count = extension_name_lower_count + 1\n            else\n                extension_name_lower_count = extension_name_lower_count + 1\n            end\n            i = i + 1\n        end\n        extension_strength = extension_name_upper_count - extension_name_lower_count\n        if extension_strength > strong_extension_strength then\n            strong_extension_strength = extension_strength\n            strong_extension_name = extension_name\n        end\n        i = i + 1\n    end\n    strong_extension = class_name .. '.' .. strong_extension_name\n    return strong_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local strength = 0\n    for _, extension in ipairs(extensions) do\n        local cap = 0\n        local sm = 0\n        for _, c in ipairs(extension) do\n            if c ~= '.' then\n                cap = cap + 1\n            end\n            if c ~= '_' then\n                sm = sm + 1\n            end\n        end\n        strength = strength + (cap - sm)\n    end\n    local strongest = nil\n    for _, extension in ipairs(extensions) do\n        if strength == table.count(class_table) and table.count(class_table) > 0 then\n            strongest = extension\n            break\n        end\n    end\n    return class_name .. '.' .. strongest\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    for _, extension in ipairs(extensions) do\n        local extension_name = string.lower(extension)\n        local extension_strength = 0\n        for _, char in ipairs(extension_name) do\n            if char == 'a' or char == 'A' then\n                extension_strength = extension_strength + 1\n            end\n        end\n        if extension_strength > strong_extension_strength then\n            strong_extension = class_name\n            strong_extension_name = extension\n            strong_extension_strength = extension_strength\n        end\n    end\n    return strong_extension .. '.' .. strong_extension_name\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        local strength = #extension - #extension:lower()\n        table.insert(class_table, {extension, strength})\n    end\n    local max_strength = 0\n    for _, extension in ipairs(class_table) do\n        if strength > max_strength then\n            max_strength = strength\n            max_extension = extension\n        end\n    end\n    return class_name .. '.' .. max_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local class_table_sorted = class_table:sort()\n    local strongest_extension = class_table_sorted[1]\n    return class_name .. '.' .. strongest_extension\nend",
    "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n    local class_table_sorted = table.sort(class_table)\n    local strongest_extension = class_name\n    for _, extension in ipairs(class_table_sorted) do\n        if table.count(class_table, extension) == 1 then\n            strongest_extension = class_name .. '.' .. extension\n            break\n        end\n    end\n    return strongest_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local i = 1\n    for _, extension in ipairs(extensions) do\n        local extension_name = string.lower(extension)\n        local extension_cap = #extension_name\n        local extension_sm = #extension_name\n        for c in string.lower(extension_name) do\n            if c == 'a' then\n                extension_cap = extension_cap + 1\n            elseif c == 'e' then\n                extension_sm = extension_sm + 1\n            end\n        end\n        if extension_cap - extension_sm > strong_extension_name then\n            strong_extension_name = extension_name\n            strong_extension = class_name .. '.' .. extension_name\n        end\n        i = i + 1\n    end\n    return strong_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength = 0\n    local i = 1\n    while i <= #extensions do\n        local extension_name = extensions[i]\n        local extension_strength = 0\n        local extension_cap = 0\n        local extension_sm = 0\n        local extension_name_upper = string.upper(extension_name)\n        local extension_name_lower = string.lower(extension_name)\n        local extension_cap_upper = #extension_name_upper\n        local extension_cap_lower = #extension_name_lower\n        local extension_sm_upper = #extension_name_upper - #extension_name_lower\n        local extension_sm_lower = #extension_name_lower - #extension_name_lower\n        if extension_name_upper > extension_name_lower then\n            extension_cap = extension_cap_upper\n            extension_sm = extension_sm_upper\n        else\n            extension_cap = extension_cap_lower\n            extension_sm = extension_sm_lower\n        extension_strength = extension_cap - extension_sm\n        if extension_strength > strong_extension_strength then\n            strong_extension_strength = extension_strength\n            strong_extension_name = extension_name\n        end\n        i = i + 1\n    end\n    strong_extension = class_name .. '.' .. strong_extension_name\n    return strong_extension\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local i = 1\n    for _, extension in ipairs(extensions) do\n        local strength = #extension - #extension:lower()\n        if strength > strong_extension then\n            strong_extension = strength\n            strong_extension_name = extension\n        end\n        i = i + 1\n    end\n    return class_name .. '.' .. strong_extension_name\nend",
    "    local class_name = class_name\n    local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name = ''\n    local i = 1\n    while i <= #extensions do\n        local extension_name = extensions[i]\n        local extension_name_upper = string.upper(extension_name)\n        local extension_name_lower = string.lower(extension_name)\n        local extension_name_cap = string.upper(extension_name)\n        local extension_name_sm = string.lower(extension_name)\n        local strength = (extension_name_cap - extension_name_sm)\n        if strength > strong_extension then\n            strong_extension = strength\n            strong_extension_name = extension_name\n        end\n        i = i + 1\n    end\n    return class_name .. '.' .. strong_extension_name\nend"
  ],
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ]
}