{
  "language": "lua",
  "name": "HumanEval_77_iscube",
  "results": [
    {
      "exit_code": 1,
      "program": "-- Write a function that takes an integer a and returns true \n-- if this ingeger is a cube of some integer number.\n-- Note: you may assume the input is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- True\n-- >>> iscube(2)\n-- False\n-- >>> iscube(-1)\n-- True\n-- >>> iscube(64)\n-- True\n-- >>> iscube(0)\n-- True\n-- >>> iscube(180)\n-- False\nlocal function iscube(a)\n    if a == 0 or a == 1 then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjxrwcvpm.lua:30: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjxrwcvpm.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938051
    },
    {
      "exit_code": 1,
      "program": "-- Write a function that takes an integer a and returns true \n-- if this ingeger is a cube of some integer number.\n-- Note: you may assume the input is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- True\n-- >>> iscube(2)\n-- False\n-- >>> iscube(-1)\n-- True\n-- >>> iscube(64)\n-- True\n-- >>> iscube(0)\n-- True\n-- >>> iscube(180)\n-- False\nlocal function iscube(a)\n    if a == 0 or a == 1 then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjxrwcvpm.lua:30: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjxrwcvpm.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938051
    },
    {
      "exit_code": 1,
      "program": "-- Write a function that takes an integer a and returns true \n-- if this ingeger is a cube of some integer number.\n-- Note: you may assume the input is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- True\n-- >>> iscube(2)\n-- False\n-- >>> iscube(-1)\n-- True\n-- >>> iscube(64)\n-- True\n-- >>> iscube(0)\n-- True\n-- >>> iscube(180)\n-- False\nlocal function iscube(a)\n    if a < 0 then\n        return true\n    end\n    if a == 0 then\n        return true\n    end\n    return a % a == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt8gtcish.lua:31: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpt8gtcish.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938051
    },
    {
      "exit_code": 1,
      "program": "-- Write a function that takes an integer a and returns true \n-- if this ingeger is a cube of some integer number.\n-- Note: you may assume the input is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- True\n-- >>> iscube(2)\n-- False\n-- >>> iscube(-1)\n-- True\n-- >>> iscube(64)\n-- True\n-- >>> iscube(0)\n-- True\n-- >>> iscube(180)\n-- False\nlocal function iscube(a)\n    return a % 1 == 0 and a % 4 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplxvynco_.lua:24: expected: true, actual: false\nstack traceback:\n\t/tmp/tmplxvynco_.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938051
    },
    {
      "exit_code": 1,
      "program": "-- Write a function that takes an integer a and returns true \n-- if this ingeger is a cube of some integer number.\n-- Note: you may assume the input is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- True\n-- >>> iscube(2)\n-- False\n-- >>> iscube(-1)\n-- True\n-- >>> iscube(64)\n-- True\n-- >>> iscube(0)\n-- True\n-- >>> iscube(180)\n-- False\nlocal function iscube(a)\n    return a % a == 0 and a % (a * a) == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gth47ao.lua:27: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3gth47ao.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938051
    },
    {
      "exit_code": 1,
      "program": "-- Write a function that takes an integer a and returns true \n-- if this ingeger is a cube of some integer number.\n-- Note: you may assume the input is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- True\n-- >>> iscube(2)\n-- False\n-- >>> iscube(-1)\n-- True\n-- >>> iscube(64)\n-- True\n-- >>> iscube(0)\n-- True\n-- >>> iscube(180)\n-- False\nlocal function iscube(a)\n    if a < 0 then\n        return true\n    elseif a == 0 then\n        return true\n    else\n        return a % 2 == 0 and iscube(a / 2)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz17yyl80.lua:30: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpz17yyl80.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938051
    },
    {
      "exit_code": 1,
      "program": "-- Write a function that takes an integer a and returns true \n-- if this ingeger is a cube of some integer number.\n-- Note: you may assume the input is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- True\n-- >>> iscube(2)\n-- False\n-- >>> iscube(-1)\n-- True\n-- >>> iscube(64)\n-- True\n-- >>> iscube(0)\n-- True\n-- >>> iscube(180)\n-- False\nlocal function iscube(a)\n    return a % 1 == 0 and a % 4 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplxvynco_.lua:24: expected: true, actual: false\nstack traceback:\n\t/tmp/tmplxvynco_.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938051
    },
    {
      "exit_code": 1,
      "program": "-- Write a function that takes an integer a and returns true \n-- if this ingeger is a cube of some integer number.\n-- Note: you may assume the input is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- True\n-- >>> iscube(2)\n-- False\n-- >>> iscube(-1)\n-- True\n-- >>> iscube(64)\n-- True\n-- >>> iscube(0)\n-- True\n-- >>> iscube(180)\n-- False\nlocal function iscube(a)\n    return a % 1 == 0 and a % 4 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplxvynco_.lua:24: expected: true, actual: false\nstack traceback:\n\t/tmp/tmplxvynco_.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938051
    },
    {
      "exit_code": 1,
      "program": "-- Write a function that takes an integer a and returns true \n-- if this ingeger is a cube of some integer number.\n-- Note: you may assume the input is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- True\n-- >>> iscube(2)\n-- False\n-- >>> iscube(-1)\n-- True\n-- >>> iscube(64)\n-- True\n-- >>> iscube(0)\n-- True\n-- >>> iscube(180)\n-- False\nlocal function iscube(a)\n    if a < 0 then\n        return true\n    else\n        return a % a == 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnw522f7z.lua:29: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpnw522f7z.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938051
    },
    {
      "exit_code": 1,
      "program": "-- Write a function that takes an integer a and returns true \n-- if this ingeger is a cube of some integer number.\n-- Note: you may assume the input is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- True\n-- >>> iscube(2)\n-- False\n-- >>> iscube(-1)\n-- True\n-- >>> iscube(64)\n-- True\n-- >>> iscube(0)\n-- True\n-- >>> iscube(180)\n-- False\nlocal function iscube(a)\n    if a < 0 then\n        return true\n    end\n    if a == 0 then\n        return true\n    end\n    if a % 3 == 0 then\n        return iscube(a / 3)\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpivjgayjs.lua:33: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpivjgayjs.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938051
    },
    {
      "exit_code": 1,
      "program": "-- Write a function that takes an integer a and returns true \n-- if this ingeger is a cube of some integer number.\n-- Note: you may assume the input is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- True\n-- >>> iscube(2)\n-- False\n-- >>> iscube(-1)\n-- True\n-- >>> iscube(64)\n-- True\n-- >>> iscube(0)\n-- True\n-- >>> iscube(180)\n-- False\nlocal function iscube(a)\n    if a == 0 or a == 1 then\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd9gdwf0r.lua:29: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpd9gdwf0r.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938051
    },
    {
      "exit_code": 1,
      "program": "-- Write a function that takes an integer a and returns true \n-- if this ingeger is a cube of some integer number.\n-- Note: you may assume the input is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- True\n-- >>> iscube(2)\n-- False\n-- >>> iscube(-1)\n-- True\n-- >>> iscube(64)\n-- True\n-- >>> iscube(0)\n-- True\n-- >>> iscube(180)\n-- False\nlocal function iscube(a)\n    if a == 0 then return true end\n    if a < 0 then return true end\n    if a % 3 == 0 then return true end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_pjc73yl.lua:27: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_pjc73yl.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938051
    },
    {
      "exit_code": 1,
      "program": "-- Write a function that takes an integer a and returns true \n-- if this ingeger is a cube of some integer number.\n-- Note: you may assume the input is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- True\n-- >>> iscube(2)\n-- False\n-- >>> iscube(-1)\n-- True\n-- >>> iscube(64)\n-- True\n-- >>> iscube(0)\n-- True\n-- >>> iscube(180)\n-- False\nlocal function iscube(a)\n    if a < 0 then\n        return true\n    end\n    if a == 0 then\n        return true\n    end\n    if a % 3 == 0 then\n        return iscube(a / 3)\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpivjgayjs.lua:33: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpivjgayjs.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938051
    },
    {
      "exit_code": 1,
      "program": "-- Write a function that takes an integer a and returns true \n-- if this ingeger is a cube of some integer number.\n-- Note: you may assume the input is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- True\n-- >>> iscube(2)\n-- False\n-- >>> iscube(-1)\n-- True\n-- >>> iscube(64)\n-- True\n-- >>> iscube(0)\n-- True\n-- >>> iscube(180)\n-- False\nlocal function iscube(a)\n    if a < 0 then\n        return true\n    elseif a == 0 then\n        return true\n    elseif a % 3 == 0 then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx0_ap1p0.lua:32: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpx0_ap1p0.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938051
    },
    {
      "exit_code": 1,
      "program": "-- Write a function that takes an integer a and returns true \n-- if this ingeger is a cube of some integer number.\n-- Note: you may assume the input is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- True\n-- >>> iscube(2)\n-- False\n-- >>> iscube(-1)\n-- True\n-- >>> iscube(64)\n-- True\n-- >>> iscube(0)\n-- True\n-- >>> iscube(180)\n-- False\nlocal function iscube(a)\n    if a == 0 then return true end\n    if a < 0 then return true end\n    if a % 3 == 0 then return true end\n    if a % 4 == 0 then return true end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfma_qp8q.lua:28: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfma_qp8q.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938051
    },
    {
      "exit_code": 1,
      "program": "-- Write a function that takes an integer a and returns true \n-- if this ingeger is a cube of some integer number.\n-- Note: you may assume the input is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- True\n-- >>> iscube(2)\n-- False\n-- >>> iscube(-1)\n-- True\n-- >>> iscube(64)\n-- True\n-- >>> iscube(0)\n-- True\n-- >>> iscube(180)\n-- False\nlocal function iscube(a)\n    if a < 0 then\n        return true\n    end\n    return a % a == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeq1fxmc5.lua:28: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpeq1fxmc5.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938051
    },
    {
      "exit_code": 1,
      "program": "-- Write a function that takes an integer a and returns true \n-- if this ingeger is a cube of some integer number.\n-- Note: you may assume the input is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- True\n-- >>> iscube(2)\n-- False\n-- >>> iscube(-1)\n-- True\n-- >>> iscube(64)\n-- True\n-- >>> iscube(0)\n-- True\n-- >>> iscube(180)\n-- False\nlocal function iscube(a)\n    if a == 0 then\n        return true\n    end\n    if a < 0 then\n        return iscube(-a)\n    end\n    return a % a == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfh2ioked.lua:31: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfh2ioked.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938051
    },
    {
      "exit_code": 1,
      "program": "-- Write a function that takes an integer a and returns true \n-- if this ingeger is a cube of some integer number.\n-- Note: you may assume the input is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- True\n-- >>> iscube(2)\n-- False\n-- >>> iscube(-1)\n-- True\n-- >>> iscube(64)\n-- True\n-- >>> iscube(0)\n-- True\n-- >>> iscube(180)\n-- False\nlocal function iscube(a)\n    return a % a == 0 and a >= 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprzizu8x8.lua:25: expected: false, actual: true\nstack traceback:\n\t/tmp/tmprzizu8x8.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938051
    },
    {
      "exit_code": 1,
      "program": "-- Write a function that takes an integer a and returns true \n-- if this ingeger is a cube of some integer number.\n-- Note: you may assume the input is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- True\n-- >>> iscube(2)\n-- False\n-- >>> iscube(-1)\n-- True\n-- >>> iscube(64)\n-- True\n-- >>> iscube(0)\n-- True\n-- >>> iscube(180)\n-- False\nlocal function iscube(a)\n    if a == 0 or a == 1 then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjxrwcvpm.lua:30: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjxrwcvpm.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938051
    },
    {
      "exit_code": 1,
      "program": "-- Write a function that takes an integer a and returns true \n-- if this ingeger is a cube of some integer number.\n-- Note: you may assume the input is always valid.\n-- Examples:\n-- >>> iscube(1)\n-- True\n-- >>> iscube(2)\n-- False\n-- >>> iscube(-1)\n-- True\n-- >>> iscube(64)\n-- True\n-- >>> iscube(0)\n-- True\n-- >>> iscube(180)\n-- False\nlocal function iscube(a)\n    if a == 0 then return true end\n    if a < 0 then a = -a end\n    if a % 3 == 0 then return true end\n    if a % 2 == 0 then return true end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64), true)\n    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000), true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpml2a8eob.lua:28: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpml2a8eob.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938051
    }
  ]
}