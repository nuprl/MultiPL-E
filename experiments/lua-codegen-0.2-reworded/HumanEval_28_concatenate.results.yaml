language: lua
name: HumanEval_28_concatenate
results:
- exit_code: 0
  program: "-- Concatenate table of strings into a single string\n-- >>> concatenate([])\n\
    -- ''\n-- >>> concatenate(['a', 'b', 'c'])\n-- 'abc'\nlocal function concatenate(strings)\n\
    \    local result = ''\n    for _, string in ipairs(strings) do\n        result\
    \ = result .. string\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = concatenate\n    lu.assertEquals(candidate({}),\
    \ '')\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'xyz')\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z', 'w', 'k'}), 'xyzwk')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1661907435
- exit_code: 0
  program: "-- Concatenate table of strings into a single string\n-- >>> concatenate([])\n\
    -- ''\n-- >>> concatenate(['a', 'b', 'c'])\n-- 'abc'\nlocal function concatenate(strings)\n\
    \    local result = ''\n    for _, string in ipairs(strings) do\n        result\
    \ = result .. string\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = concatenate\n    lu.assertEquals(candidate({}),\
    \ '')\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'xyz')\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z', 'w', 'k'}), 'xyzwk')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1661907435
- exit_code: 0
  program: "-- Concatenate table of strings into a single string\n-- >>> concatenate([])\n\
    -- ''\n-- >>> concatenate(['a', 'b', 'c'])\n-- 'abc'\nlocal function concatenate(strings)\n\
    \    if #strings == 0 then\n        return ''\n    end\n    local result = strings[1]\n\
    \    for i = 2, #strings do\n        result = result .. strings[i]\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = concatenate\n    lu.assertEquals(candidate({}), '')\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'xyz')\n    lu.assertEquals(candidate({'x', 'y', 'z', 'w', 'k'}),\
    \ 'xyzwk')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1661907435
- exit_code: 0
  program: "-- Concatenate table of strings into a single string\n-- >>> concatenate([])\n\
    -- ''\n-- >>> concatenate(['a', 'b', 'c'])\n-- 'abc'\nlocal function concatenate(strings)\n\
    \    if not strings or #strings == 0 then return '' end\n    local result = strings[1]\n\
    \    for i = 2, #strings do\n        result = result .. strings[i]\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = concatenate\n    lu.assertEquals(candidate({}), '')\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'xyz')\n    lu.assertEquals(candidate({'x', 'y', 'z', 'w', 'k'}),\
    \ 'xyzwk')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1661907435
- exit_code: 0
  program: "-- Concatenate table of strings into a single string\n-- >>> concatenate([])\n\
    -- ''\n-- >>> concatenate(['a', 'b', 'c'])\n-- 'abc'\nlocal function concatenate(strings)\n\
    \    if #strings == 0 then\n        return ''\n    end\n    local result = strings[1]\n\
    \    for i = 2, #strings do\n        result = result .. strings[i]\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = concatenate\n    lu.assertEquals(candidate({}), '')\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'xyz')\n    lu.assertEquals(candidate({'x', 'y', 'z', 'w', 'k'}),\
    \ 'xyzwk')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1661907435
- exit_code: 0
  program: "-- Concatenate table of strings into a single string\n-- >>> concatenate([])\n\
    -- ''\n-- >>> concatenate(['a', 'b', 'c'])\n-- 'abc'\nlocal function concatenate(strings)\n\
    \    local result = ''\n    for i = 1, #strings, 1 do\n        result = result\
    \ .. strings[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = concatenate\n    lu.assertEquals(candidate({}),\
    \ '')\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'xyz')\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z', 'w', 'k'}), 'xyzwk')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1661907435
- exit_code: 0
  program: "-- Concatenate table of strings into a single string\n-- >>> concatenate([])\n\
    -- ''\n-- >>> concatenate(['a', 'b', 'c'])\n-- 'abc'\nlocal function concatenate(strings)\n\
    \    local result = ''\n    for _, string in ipairs(strings) do\n        result\
    \ = result .. string\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = concatenate\n    lu.assertEquals(candidate({}),\
    \ '')\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'xyz')\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z', 'w', 'k'}), 'xyzwk')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1661907435
- exit_code: 1
  program: "-- Concatenate table of strings into a single string\n-- >>> concatenate([])\n\
    -- ''\n-- >>> concatenate(['a', 'b', 'c'])\n-- 'abc'\nlocal function concatenate(strings)\n\
    \    if #strings == 0 then\n        return ''\n    elseif #strings == 1 then\n\
    \        return strings[1]\n    else\n        return string.concat(strings)\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = concatenate\n    lu.assertEquals(candidate({}), '')\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'xyz')\n    lu.assertEquals(candidate({'x', 'y', 'z', 'w', 'k'}),\
    \ 'xyzwk')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgh391scw.lua:12:\
    \ attempt to call a nil value (field 'concat')\nstack traceback:\n\t/tmp/tmpgh391scw.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpgh391scw.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1661907435
- exit_code: 0
  program: "-- Concatenate table of strings into a single string\n-- >>> concatenate([])\n\
    -- ''\n-- >>> concatenate(['a', 'b', 'c'])\n-- 'abc'\nlocal function concatenate(strings)\n\
    \    if #strings == 0 then\n        return ''\n    end\n    local result = strings[1]\n\
    \    for i = 2, #strings do\n        result = result .. strings[i]\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = concatenate\n    lu.assertEquals(candidate({}), '')\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'xyz')\n    lu.assertEquals(candidate({'x', 'y', 'z', 'w', 'k'}),\
    \ 'xyzwk')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1661907435
- exit_code: 0
  program: "-- Concatenate table of strings into a single string\n-- >>> concatenate([])\n\
    -- ''\n-- >>> concatenate(['a', 'b', 'c'])\n-- 'abc'\nlocal function concatenate(strings)\n\
    \    local result = ''\n    for i = 1, #strings, 1 do\n        result = result\
    \ .. strings[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = concatenate\n    lu.assertEquals(candidate({}),\
    \ '')\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'xyz')\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z', 'w', 'k'}), 'xyzwk')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1661907435
- exit_code: 0
  program: "-- Concatenate table of strings into a single string\n-- >>> concatenate([])\n\
    -- ''\n-- >>> concatenate(['a', 'b', 'c'])\n-- 'abc'\nlocal function concatenate(strings)\n\
    \    local result = ''\n    for _, string in ipairs(strings) do\n        result\
    \ = result .. string\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = concatenate\n    lu.assertEquals(candidate({}),\
    \ '')\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'xyz')\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z', 'w', 'k'}), 'xyzwk')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1661907435
- exit_code: 0
  program: "-- Concatenate table of strings into a single string\n-- >>> concatenate([])\n\
    -- ''\n-- >>> concatenate(['a', 'b', 'c'])\n-- 'abc'\nlocal function concatenate(strings)\n\
    \    if #strings == 0 then\n        return ''\n    end\n    local result = strings[1]\n\
    \    for i = 2, #strings do\n        result = result .. strings[i]\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = concatenate\n    lu.assertEquals(candidate({}), '')\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'xyz')\n    lu.assertEquals(candidate({'x', 'y', 'z', 'w', 'k'}),\
    \ 'xyzwk')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1661907435
- exit_code: 0
  program: "-- Concatenate table of strings into a single string\n-- >>> concatenate([])\n\
    -- ''\n-- >>> concatenate(['a', 'b', 'c'])\n-- 'abc'\nlocal function concatenate(strings)\n\
    \    local result = ''\n    for _, s in ipairs(strings) do\n        result = result\
    \ .. s\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = concatenate\n    lu.assertEquals(candidate({}), '')\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'xyz')\n    lu.assertEquals(candidate({'x', 'y', 'z', 'w', 'k'}),\
    \ 'xyzwk')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1661907435
- exit_code: 0
  program: "-- Concatenate table of strings into a single string\n-- >>> concatenate([])\n\
    -- ''\n-- >>> concatenate(['a', 'b', 'c'])\n-- 'abc'\nlocal function concatenate(strings)\n\
    \    local result = ''\n    for _, string in ipairs(strings) do\n        result\
    \ = result .. string\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = concatenate\n    lu.assertEquals(candidate({}),\
    \ '')\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'xyz')\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z', 'w', 'k'}), 'xyzwk')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1661907435
- exit_code: 0
  program: "-- Concatenate table of strings into a single string\n-- >>> concatenate([])\n\
    -- ''\n-- >>> concatenate(['a', 'b', 'c'])\n-- 'abc'\nlocal function concatenate(strings)\n\
    \    local result = ''\n    for _, string in ipairs(strings) do\n        result\
    \ = result .. string\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = concatenate\n    lu.assertEquals(candidate({}),\
    \ '')\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'xyz')\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z', 'w', 'k'}), 'xyzwk')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1661907435
- exit_code: 0
  program: "-- Concatenate table of strings into a single string\n-- >>> concatenate([])\n\
    -- ''\n-- >>> concatenate(['a', 'b', 'c'])\n-- 'abc'\nlocal function concatenate(strings)\n\
    \    local result = ''\n    for _, string in ipairs(strings) do\n        result\
    \ = result .. string\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = concatenate\n    lu.assertEquals(candidate({}),\
    \ '')\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'xyz')\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z', 'w', 'k'}), 'xyzwk')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1661907435
- exit_code: 0
  program: "-- Concatenate table of strings into a single string\n-- >>> concatenate([])\n\
    -- ''\n-- >>> concatenate(['a', 'b', 'c'])\n-- 'abc'\nlocal function concatenate(strings)\n\
    \    local result = ''\n    for _, string in ipairs(strings) do\n        result\
    \ = result .. string\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = concatenate\n    lu.assertEquals(candidate({}),\
    \ '')\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'xyz')\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z', 'w', 'k'}), 'xyzwk')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1661907435
- exit_code: 0
  program: "-- Concatenate table of strings into a single string\n-- >>> concatenate([])\n\
    -- ''\n-- >>> concatenate(['a', 'b', 'c'])\n-- 'abc'\nlocal function concatenate(strings)\n\
    \    local result = ''\n    for _, string in ipairs(strings) do\n        result\
    \ = result .. string\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = concatenate\n    lu.assertEquals(candidate({}),\
    \ '')\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'xyz')\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z', 'w', 'k'}), 'xyzwk')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1661907435
- exit_code: 0
  program: "-- Concatenate table of strings into a single string\n-- >>> concatenate([])\n\
    -- ''\n-- >>> concatenate(['a', 'b', 'c'])\n-- 'abc'\nlocal function concatenate(strings)\n\
    \    if #strings == 0 then\n        return ''\n    end\n    local result = strings[1]\n\
    \    for i = 2, #strings do\n        result = result .. strings[i]\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = concatenate\n    lu.assertEquals(candidate({}), '')\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'xyz')\n    lu.assertEquals(candidate({'x', 'y', 'z', 'w', 'k'}),\
    \ 'xyzwk')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1661907435
- exit_code: 0
  program: "-- Concatenate table of strings into a single string\n-- >>> concatenate([])\n\
    -- ''\n-- >>> concatenate(['a', 'b', 'c'])\n-- 'abc'\nlocal function concatenate(strings)\n\
    \    local result = ''\n    for i = 1, #strings, 1 do\n        result = result\
    \ .. strings[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = concatenate\n    lu.assertEquals(candidate({}),\
    \ '')\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'xyz')\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z', 'w', 'k'}), 'xyzwk')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1661907435
