name: HumanEval_130_tri
language: lua
prompt: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) = 3\n\
  -- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2) + tri(n\
  \ + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n-- tri(4) =\
  \ 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You are given\
  \ a non-negative integer number n, you have to a return a table of the \n-- first\
  \ n + 1 numbers of the Tribonacci sequence.\n-- Examples:\n-- >>> tri(3)\n-- [1,\
  \ 3, 2, 8]\nlocal function tri(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = tri\n\
  \    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
  \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n   \
  \ lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
  \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8, 3,\
  \ 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
  \ 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
  \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0), {1})\n\
  \    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    if n == 1 then return [1]\n    if n == 2 then return [1, 3]\n \
    \   if n == 3 then return [1, 3, 2, 8]\n    return [1, 3, 2, 8] .. tri(n - 1)\
    \ .. tri(n - 2) .. tri(n - 3)\nend", "    if n == 1 then return [1]\n    if n\
    \ == 2 then return [1, 3]\n    if n == 3 then return [1, 3, 2, 8]\n    return\
    \ [1, 3, 2, 8] .. tri(n - 1) .. tri(n - 2) .. tri(n - 3)\nend", "    if n == 1\
    \ then return [1]\n    if n == 2 then return [1, 3]\n    if n == 3 then return\
    \ [1, 3, 2, 8]\n    return [1, 1 + n / 2, tri(n - 1) + tri(n - 2) + tri(n + 1)]\n\
    end", "    if n == 1 then return [1]\n    if n == 2 then return [1, 1]\n    if\
    \ n == 3 then return [1, 3, 2, 8]\n    if n % 2 == 0 then return [1, 1, tri(n\
    \ / 2)]\n    else return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ - 2)]\nend", "    if n == 1 then return [1]\n    if n == 2 then return [1, 3]\n\
    \    if n == 3 then return [1, 3, 2, 8]\n    if n % 2 == 0 then return [1, 1 +\
    \ n / 2, 1 + n / 2 - 1, 1 + n / 2 + 1]\n    else return [1, 1 + n / 2, 1 + n /\
    \ 2 - 1, 1 + n / 2 + 1, 1 + n / 2 + 2]\nend", "    if n == 1 then return [1]\n\
    \    if n == 2 then return [1, 3]\n    if n == 3 then return [1, 3, 2, 8]\n  \
    \  return [1, tri(n - 1) + tri(n - 2) + tri(n + 1)]\nend", "    if n == 1 then\
    \ return [1]\n    if n == 2 then return [1, 3]\n    if n == 3 then return [1,\
    \ 3, 2, 8]\n    if n % 2 == 0 then return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    else return tri(n - 1) + tri(n - 2) + tri(n + 1)\nend", "    if n == 1 then\
    \ return [1]\n    if n == 2 then return [1, 3]\n    if n == 3 then return [1,\
    \ 3, 2, 8]\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\nend", "    if n ==\
    \ 1 then return [1]\n    if n == 2 then return [1, 3]\n    if n == 3 then return\
    \ [1, 3, 2, 8]\n    return [1, tri(n - 1) + tri(n - 2) + tri(n + 1)]\nend", " \
    \   if n == 1 then return [1]\n    if n == 2 then return [1, 3]\n    if n == 3\
    \ then return [1, 3, 2, 8]\n    return tri(n - 1) + tri(n - 2) + tri(n - 3)\n\
    end", "    if n == 1 then return [1]\n    if n == 2 then return [1, 1]\n    if\
    \ n == 3 then return [1, 3, 2, 8]\n    if n % 2 == 0 then return [1, 1, tri(n\
    \ / 2) + tri(n / 2) + tri(n / 2)]\n    else return [tri(n - 1) + tri(n - 2) +\
    \ tri(n - 1), tri(n - 1) + tri(n - 1) + tri(n - 2)]\nend", "    if n == 1 then\
    \ return [1]\n    if n == 2 then return [1, 3]\n    if n == 3 then return [1,\
    \ 3, 2, 8]\n    if n % 2 == 0 then return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    else return tri(n - 1) + tri(n - 2) + tri(n + 1)\nend", "    if n == 1 then\
    \ return [1]\n    if n == 2 then return [1, 1]\n    if n == 3 then return [1,\
    \ 3, 2, 8]\n    return [1, 1 + n / 2, tri(n - 1) + tri(n - 2) + tri(n + 1)]\n\
    end", "    if n == 1 then return [1]\n    if n == 2 then return [1, 1]\n    if\
    \ n == 3 then return [1, 3, 2, 8]\n    return [1, tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)]\nend", "    if n == 1 then return [1]\n    if n == 2 then return [1, 3]\n\
    \    if n == 3 then return [1, 3, 2, 8]\n    return [1, 1 + n / 2, tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)]\nend", "    if n == 1 then return [1]\n    if n ==\
    \ 2 then return [1, 3]\n    if n == 3 then return [1, 3, 2, 8]\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3)\nend", "    if n == 0 then return 0 end\n   \
    \ if n == 1 then return 3 end\n    if n % 2 == 0 then return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n    else return tri(n - 1) + tri(n - 2) + tri(n + 1)\nend",
  "    if n == 1 then return [1]\n    if n == 2 then return [1, 3]\n    if n == 3\
    \ then return [1, 3, 2, 8]\n    return [1, 3, 2, 8] .. tri(n - 1) .. [1, 3]\n\
    end", "    if n == 0 then return {} end\n    local t = {}\n    for i = 1, n, 2\
    \ do\n        t[i] = tri(i - 1)\n    end\n    return t\nend", "    if n == 1 then\
    \ return [1]\n    if n == 2 then return [1, 1]\n    if n == 3 then return [1,\
    \ 3, 2, 8]\n    if n == 4 then return [1, 3, 2, 8, 5, 9]\n    return [1, 3, 2,\
    \ 8, 5, 9, 13, 24, 34, 56, 89]\nend", "    if n == 1 then return [1]\n    if n\
    \ == 2 then return [1, 3]\n    if n == 3 then return [1, 3, 2, 8]\n    if n %\
    \ 2 == 0 then return [1, 1 + n / 2, 1 + n / 2 + n / 2, 1 + n / 2 + n / 2 + n /\
    \ 2]\n    else return [1, 1 + n / 2, 1 + n / 2 + n / 2, 1 + n / 2 + n / 2 + n\
    \ / 2, 1 + n / 2 + n / 2 + n / 2 + n / 2]\nend", "    local t = {}\n    for i\
    \ = 1, n + 1, 1 do\n        if i % 2 == 0 then\n            t[i] = tri(i / 2)\
    \ + tri(i / 2 - 1) + tri(i / 2 + 1)\n        else\n            t[i] = tri(i /\
    \ 2) + tri(i / 2 - 1) + tri(i / 2 + 1)\n        end\n    end\n    return t\nend",
  "    if n == 1 then return [1]\n    if n == 2 then return [1, 1]\n    if n == 3\
    \ then return [1, 3, 2, 8]\n    return [1, tri(n - 1) + tri(n - 2) + tri(n + 1)]\n\
    end", "    local table = {}\n    table[1] = 3\n    table[2] = 1 + (2 / 2)\n  \
    \  table[3] = 2\n    table[4] = 3\n    for i = 5, 1, -1 do\n        table[i] =\
    \ table[i - 1] + table[i - 2] + table[i + 1]\n    end\n    return table\nend",
  "    if n == 0 then return {} end\n    local t = {}\n    for i = 1, n, 2 do\n  \
    \      t[i] = tri(i - 1) + tri(i - 2) + tri(i + 1)\n    end\n    return t\nend",
  "    if n == 0 then return 1 end\n    if n == 1 then return 3 end\n    if n % 2\
    \ == 0 then return tri(n - 1) + tri(n - 2) + tri(n + 1) else return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) end\nend", "    local t = {}\n    for i = 1, n + 1\
    \ do\n        if i % 2 == 0 then\n            t[i] = tri(i / 2) + tri(i / 2 -\
    \ 1) + tri(i / 2 + 1)\n        else\n            t[i] = tri(i / 2) + tri(i / 2\
    \ - 1) + tri(i / 2 + 1)\n        end\n    end\n    return t\nend", "    if n ==\
    \ 1 then return [1, 3, 2, 8] end\n    if n == 2 then return [1, 3, 2, 8] end\n\
    \    if n == 3 then return [1, 3, 2, 8] end\n    if n == 4 then return [1, 3,\
    \ 2, 8] end\n    if n == 5 then return [1, 3, 2, 8] end\n    if n == 6 then return\
    \ [1, 3, 2, 8] end\n    if n == 7 then return [1, 3, 2, 8] end\n    if n == 8\
    \ then return [1, 3, 2, 8] end\n    if n == 9 then return [1, 3, 2, 8] end\n \
    \   if n == 10 then return [1, 3, 2, 8] end\n    if n == 11 then return [1, 3,\
    \ 2, 8] end\n    if n == 12 then return [1, 3, 2, 8] end\n    if n == 13 then\
    \ return [1, 3, 2, 8] end\n    if n == 14 then return [1, 3, 2, 8] end\n    if\
    \ n == 15 then return [1, 3, 2, 8] end\n    if n == 16 then return [1, 3, 2, 8]\
    \ end\n    if n == 17 then return [1, 3, 2, 8] end\n    if n == 18 then return\
    \ [1, 3, 2, 8] end\n    if n == 19 then return [1, 3, 2, 8] end\n    if n == 20\
    \ then return [1, 3, 2, 8] end\n    if n == 21 then return [1, 3, 2, 8] end\n\
    \    if n == 22 then return [1, 3, 2, 8] end\n    if n == 23 then return [1, 3,\
    \ 2, 8] end\n    if n == 24 then return [1, 3, 2, 8] end\n    if n == 25 then\
    \ return [1, 3, 2, 8] end\n    if n == 26 then return [1, 3, 2, 8] end\n    if\
    \ n == 27 then return [1, 3, 2, 8] end\n    if n == 28 then return [1, 3, 2, 8]\
    \ end\n    if n == 29 then return [", "    if n == 1 then return [1]\n    if n\
    \ == 2 then return [1, 3]\n    if n == 3 then return [1, 3, 2, 8]\n    return\
    \ [1, 1 + n / 2, tri(n - 1) + tri(n - 2) + tri(n + 1)]\nend", "    if n == 0 then\
    \ return 0 end\n    if n == 1 then return 1 end\n    if n == 2 then return 2 end\n\
    \    return tri(n - 1) + tri(n - 2) + tri(n + 1)\nend", "    local t = {}\n  \
    \  for i = 1, n + 1, 1 do\n        if i % 2 == 0 then\n            t[i] = tri(i\
    \ / 2) + tri(i / 2 - 1) + tri(i / 2 + 1)\n        else\n            t[i] = tri(i\
    \ / 2) + tri(i / 2 - 1) + tri(i / 2 + 1)\n        end\n    end\n    return t\n\
    end", "    local table = {}\n    table[1] = 1\n    table[2] = 3\n    table[3]\
    \ = 2\n    table[4] = 8\n    for i = 5, 1, -1 do\n        table[i] = table[i -\
    \ 1] + table[i - 2] + table[i + 1]\n    end\n    return table\nend", "    if n\
    \ == 0 then return 1 end\n    if n == 1 then return 3 end\n    if n % 2 == 0 then\
    \ return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\nend", "    local t = {}\n    for i = 1, n + 1, 1 do\n   \
    \     if i % 2 == 0 then\n            t[i] = tri(i / 2) + tri(i / 2 - 1) + tri(i\
    \ / 2 + 1)\n        else\n            t[i] = tri(i / 2) + tri(i / 2 - 1) + tri(i\
    \ / 2 + 1)\n        end\n    end\n    return t\nend", "    if n == 1 then return\
    \ [1]\n    if n == 2 then return [1, 3]\n    if n == 3 then return [1, 3, 2, 8]\n\
    \    return [1, 1 + n / 2, tri(n - 1) + tri(n - 2) + tri(n + 1)]\nend", "    if\
    \ n == 1 then return [1]\n    if n == 2 then return [1, 1]\n    if n == 3 then\
    \ return [1, 3, 2, 8]\n    local t1 = tri(n - 1)\n    local t2 = tri(n - 2)\n\
    \    local t3 = tri(n - 3)\n    return t1 + t2 + t3\nend", "    if n == 1 then\
    \ return [1]\n    if n == 2 then return [1, 3]\n    if n == 3 then return [1,\
    \ 3, 2, 8]\n    return [1, 3, 2, 8] .. tri(n - 1) .. tri(n - 2) .. tri(n - 3)\n\
    end", "    if n == 0 then return 1 end\n    if n == 1 then return 3 end\n    if\
    \ n % 2 == 0 then return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\nend", "    if n == 0 then return 0 end\n\
    \    if n == 1 then return 1 end\n    return tri(n - 1) + tri(n - 2) + tri(n -\
    \ 3)\nend", "    if n == 1 then return [1]\n    if n == 2 then return [1, 3]\n\
    \    return [1, 1 + n / 2, 1 + n / 2 + n / 2]\nend", "    if n == 0 then return\
    \ 0 end\n    if n == 1 then return 1 end\n    if n == 2 then return 2 end\n  \
    \  if n % 2 == 0 then return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\nend", "    if n == 1 then return [1]\n\
    \    if n == 2 then return [1, 3]\n    if n == 3 then return [1, 3, 2, 8]\n  \
    \  return tri(n - 1) + tri(n - 2) + tri(n - 3)\nend", "    if n == 1 then return\
    \ [1]\n    if n == 2 then return [1, 3]\n    if n == 3 then return [1, 3, 2, 8]\n\
    \    return [1, tri(n - 1) + tri(n - 2) + tri(n + 1)]\nend", "    if n == 1 then\
    \ return [1]\n    if n == 2 then return [1, 3]\n    if n == 3 then return [1,\
    \ 3, 2, 8]\n    if n % 2 == 0 then return [1, 1 + n / 2]\n    return [1 + n /\
    \ 2, 1 + n / 2 + n / 2, 1 + n / 2 + n / 2 + n / 2]\nend", "    if n == 1 then\
    \ return [1]\n    if n == 2 then return [1, 3]\n    if n == 3 then return [1,\
    \ 3, 2, 8]\n    return [1, 3, 2, 8] .. tri(n - 1) .. tri(n - 2) .. tri(n - 3)\n\
    end", "    if n == 1 then return [1, 3, 2, 8]\n    if n == 2 then return [1, 3,\
    \ 2, 8]\n    if n == 3 then return [1, 3, 2, 8]\n    if n % 2 == 0 then return\
    \ [1, 3, 2, 8]\n    return [1, 1 + n / 2, 1 + n / 2 + n / 2, 1 + n / 2 + n / 2\
    \ + n / 2]\nend", "    if n == 1 then return [1, 3, 2, 8] end\n    if n == 2 then\
    \ return [1, 3, 2, 8] end\n    local t1, t2, t3, t4, t5, t6, t7, t8, t9, t10,\
    \ t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26,\
    \ t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42,\
    \ t43, t44, t45, t46, t47, t48, t49, t50, t51, t52, t53, t54, t55, t56, t57, t58,\
    \ t59, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t70, t71, t72, t73, t74,\
    \ t75, t76, t77, t78, t79, t80, t81, t82, t83, t84, t85, t86, t87, t88, t89, t90,\
    \ t91, t92, t93, t94, t95, t96, t97, t98, t99, t100, t101, t102, t103, t104, t105,\
    \ t106, t107, t108, t109, t110, t111, t112, t113, t114, t115, t116, t117, t118,\
    \ t119, t120, t121, t122, t123, t124, t125, t126, t127, t128, t129, t130, t131,\
    \ t132, t133, t134, t135, t136, t137, t138, t139, t140, t141, t142, t143, t144,\
    \ t145, t146, t147, t148, t149, t150, t151, t152, t153, t154, t155, t156, t157,\
    \ t158,", "    if n == 1 then return [1]\n    if n == 2 then return [1, 3]\n \
    \   if n == 3 then return [1, 3, 2, 8]\n    return [1, 3, 2, 8] .. tri(n - 1)\
    \ .. tri(n - 2) .. tri(n - 3)\nend", "    if n == 1 then return [1]\n    if n\
    \ == 2 then return [1, 3]\n    if n == 3 then return [1, 3, 2, 8]\n    return\
    \ [1, 3, 2, 8] .. tri(n - 1) .. tri(n - 2) .. tri(n - 3)\nend", "    if n == 1\
    \ then return [1]\n    if n == 2 then return [1, 3]\n    if n == 3 then return\
    \ [1, 3, 2, 8]\n    return [1, tri(n - 1) + tri(n - 2) + tri(n + 1)]\nend", " \
    \   if n == 1 then return [1]\n    if n == 2 then return [1, 3]\n    if n == 3\
    \ then return [1, 3, 2, 8]\n    if n == 4 then return [1, 3, 2, 8, 5]\n    if\
    \ n == 5 then return [1, 3, 2, 8, 5, 9]\n    if n == 6 then return [1, 3, 2, 8,\
    \ 5, 9, 13]\n    if n == 7 then return [1, 3, 2, 8, 5, 9, 13, 10]\n    if n ==\
    \ 8 then return [1, 3, 2, 8, 5, 9, 13, 10, 14]\n    if n == 9 then return [1,\
    \ 3, 2, 8, 5, 9, 13, 10, 14, 17]\n    if n == 10 then return [1, 3, 2, 8, 5, 9,\
    \ 13, 10, 14, 17, 19]\n    if n == 11 then return [1, 3, 2, 8, 5, 9, 13, 10, 14,\
    \ 17, 19, 20]\n    if n == 12 then return [1, 3, 2, 8, 5, 9, 13, 10, 14, 17, 19,\
    \ 20, 22]\n    if n == 13 then return [1, 3, 2, 8, 5, 9, 13, 10, 14, 17, 19, 20,\
    \ 22, 24]\n    if n == 14 then return [1, 3, 2, 8, 5, 9, 13, 10, 14, 17, 19, 20,\
    \ 22, 24, 25]\n    if n == 15 then return [1, 3, 2, 8, 5, 9, 13, 10, 14, 17, 19,\
    \ 20, 22, 24, 25, 27]\n    if n == 16 then return [1, 3, 2, 8, 5, 9, 13, 10, 14,\
    \ 17, 19, 20, 22, 24, 25, 27, 29]\n    if n == 17 then return [1, 3, 2, 8, 5,\
    \ 9, 13, 10, 14, 17, 19, 20, 22, 24, 25, 27, 29, 31]\n    if n == 18 then return\
    \ [1, 3, 2, 8, 5, 9, 13, 10", "    if n == 1 then return [1, 3, 2, 8] end\n  \
    \  if n == 2 then return [1, 3, 2, 8] end\n    if n == 3 then return [1, 3, 2,\
    \ 8] end\n    if n == 4 then return [1, 3, 2, 8] end\n    return [1, 3, 2, 8]\
    \ .. tri(n - 1) .. tri(n - 2) .. tri(n - 3)\nend", "    if n == 1 then return\
    \ [1]\n    if n == 2 then return [1, 3]\n    if n == 3 then return [1, 3, 2, 8]\n\
    \    return [1, 3, 2, 8] .. tri(n - 1) .. tri(n - 2) .. tri(n - 3)\nend", "  \
    \  if n == 1 then return [1, 3, 2, 8] end\n    if n == 2 then return [1, 3, 2,\
    \ 8] end\n    if n == 3 then return [1, 3, 2, 8] end\n    if n == 4 then return\
    \ [1, 3, 2, 8] end\n    if n == 5 then return [1, 3, 2, 8] end\n    if n == 6\
    \ then return [1, 3, 2, 8] end\n    if n == 7 then return [1, 3, 2, 8] end\n \
    \   if n == 8 then return [1, 3, 2, 8] end\n    if n == 9 then return [1, 3, 2,\
    \ 8] end\n    if n == 10 then return [1, 3, 2, 8] end\n    if n == 11 then return\
    \ [1, 3, 2, 8] end\n    if n == 12 then return [1, 3, 2, 8] end\n    if n == 13\
    \ then return [1, 3, 2, 8] end\n    if n == 14 then return [1, 3, 2, 8] end\n\
    \    if n == 15 then return [1, 3, 2, 8] end\n    if n == 16 then return [1, 3,\
    \ 2, 8] end\n    if n == 17 then return [1, 3, 2, 8] end\n    if n == 18 then\
    \ return [1, 3, 2, 8] end\n    if n == 19 then return [1, 3, 2, 8] end\n    if\
    \ n == 20 then return [1, 3, 2, 8] end\n    if n == 21 then return [1, 3, 2, 8]\
    \ end\n    if n == 22 then return [1, 3, 2, 8] end\n    if n == 23 then return\
    \ [1, 3, 2, 8] end\n    if n == 24 then return [1, 3, 2, 8] end\n    if n == 25\
    \ then return [1, 3, 2, 8] end\n    if n == 26 then return [1, 3, 2, 8] end\n\
    \    if n == 27 then return [1, 3, 2, 8] end\n    if n == 28 then return [1, 3,\
    \ 2, 8] end\n    if n == 29 then return [", "    if n == 0 then return {} end\n\
    \    local t = {}\n    for i = 1, n + 1, 1 do\n        t[i] = tri(i - 1) + tri(i\
    \ - 2) + tri(i + 1)\n    end\n    return t\nend", "    local t = {}\n    for i\
    \ = 1, n + 1, 1 do\n        if i % 2 == 0 then\n            t[i] = tri(i / 2)\
    \ + tri(i / 2 - 1) + tri(i / 2 + 1)\n        else\n            t[i] = tri(i /\
    \ 2) + tri(i / 2 - 1) + tri(i / 2 + 1)\n        end\n    end\n    return t\nend",
  "    if n == 1 then return [1]\n    if n == 2 then return [1, 3]\n    if n == 3\
    \ then return [1, 3, 2, 8]\n    return [1, 1 + n / 2, tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\nend", "    if n == 1 then return [1]\n    if n == 2 then return\
    \ [1, 3]\n    if n == 3 then return [1, 3, 2, 8]\n    return [1, tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1)]\nend", "    local t = {}\n    for i = 1, n + 1, 1 do\n\
    \        if i % 2 == 0 then\n            t[i] = tri(i / 2)\n        else\n   \
    \         t[i] = tri(i / 2) + tri(i / 2 - 1) + tri(i / 2 + 1)\n        end\n \
    \   end\n    return t\nend", "    if n == 1 then return [1]\n    if n == 2 then\
    \ return [1, 3]\n    local t1, t2, t3 = 1, 1, 1\n    for i = 1, n, 1 do\n    \
    \    if i % 2 == 0 then\n            t2 = t1 + t2\n            t1 = t2 + t3\n\
    \        else\n            t3 = t1 + t2\n            t1 = t2 + t3\n        end\n\
    \    end\n    return t1\nend", "    if n == 0 then return {} end\n    local t\
    \ = {}\n    for i = 1, n + 1, 1 do\n        t[i] = tri(i - 1) + tri(i - 2) + tri(i\
    \ + 1)\n    end\n    return t\nend", "    if n == 1 then return [1]\n    if n\
    \ == 2 then return [1, 3]\n    if n == 3 then return [1, 3, 2, 8]\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 3)\nend", "    if n == 1 then return [1]\n\
    \    if n == 2 then return [1, 3]\n    if n == 3 then return [1, 3, 2, 8]\n  \
    \  if n == 4 then return [1, 3, 2, 8, 5, 9]\n    return [1, 3, 2, 8, 5, 9, 13,\
    \ 24]\nend", "    if n == 1 then return [1]\n    if n == 2 then return [1, 3]\n\
    \    if n == 3 then return [1, 3, 2, 8]\n    return [1, 3, 2, 8] .. tri(n - 1)\
    \ .. [1, 3]\nend", "    if n == 1 then return [1]\n    if n == 2 then return [1,\
    \ 3]\n    if n == 3 then return [1, 3, 2, 8]\n    if n % 2 == 0 then return [1,\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)]\n    else return [tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1)]\nend", "    if n == 0\
    \ then return {1, 0, 0} end\n    if n == 1 then return {3, 1, 0} end\n    if n\
    \ == 2 then return {2, 1, 1} end\n    if n == 3 then return {8, 3, 2} end\n  \
    \  return {tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1), tri(n - 2)}\nend",
  "    if n == 0 then return 0 end\n    if n == 1 then return 3 end\n    if n % 2\
    \ == 0 then return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\nend", "    if n == 1 then return [1]\n    if\
    \ n == 2 then return [1, 3]\n    if n == 3 then return [1, 3, 2, 8]\n    return\
    \ [1, tri(n - 1) + tri(n - 2) + tri(n + 1)]\nend", "    if n == 1 then return\
    \ [1, 3, 2, 8]\n    if n == 2 then return [1, 3, 2, 8]\n    if n == 3 then return\
    \ [1, 3, 2, 8]\n    if n == 4 then return [1, 3, 2, 8]\n    if n == 5 then return\
    \ [1, 3, 2, 8]\n    if n == 6 then return [1, 3, 2, 8]\n    if n == 7 then return\
    \ [1, 3, 2, 8]\n    if n == 8 then return [1, 3, 2, 8]\n    if n == 9 then return\
    \ [1, 3, 2, 8]\n    if n == 10 then return [1, 3, 2, 8]\n    if n == 11 then return\
    \ [1, 3, 2, 8]\n    if n == 12 then return [1, 3, 2, 8]\n    if n == 13 then return\
    \ [1, 3, 2, 8]\n    if n == 14 then return [1, 3, 2, 8]\n    if n == 15 then return\
    \ [1, 3, 2, 8]\n    if n == 16 then return [1, 3, 2, 8]\n    if n == 17 then return\
    \ [1, 3, 2, 8]\n    if n == 18 then return [1, 3, 2, 8]\n    if n == 19 then return\
    \ [1, 3, 2, 8]\n    if n == 20 then return [1, 3, 2, 8]\n    if n == 21 then return\
    \ [1, 3, 2, 8]\n    if n == 22 then return [1, 3, 2, 8]\n    if n == 23 then return\
    \ [1, 3, 2, 8]\n    if n == 24 then return [1, 3, 2, 8]\n    if n == 25 then return\
    \ [1, 3, 2, 8]\n    if n == 26 then return [1, 3, 2, 8]\n    if n == 27 then return\
    \ [1, 3, 2, 8]\n    if n == 28 then return [1, 3, 2, 8]\n    if n == 29 then return\
    \ [1, 3, 2, 8]\n    if n == 30 then return [1, 3, 2, 8]\n    if", "    if n ==\
    \ 0 then return {} end\n    local t = {}\n    for i = 1, n, 2 do\n        t[i]\
    \ = tri(i)\n    end\n    return t\nend", "    if n == 0 then return 0 end\n  \
    \  if n == 1 then return 1 end\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    end", "    if n == 0 then return [0] end\n    if n == 1 then return [1, 3] end\n\
    \    if n == 2 then return [1, 3, 2, 8] end\n    return [1, 3, 2, 8] .. tri(n\
    \ - 1) .. tri(n - 2) .. tri(n - 3)\nend", "    if n == 1 then return [1]\n   \
    \ if n == 2 then return [1, 3]\n    if n == 3 then return [1, 3, 2, 8]\n    return\
    \ [1, 3, 2, 8] .. tri(n - 1) .. [1, 3]\nend", "    if n == 0 then return {} end\n\
    \    local t = {}\n    for i = 1, n + 1, 1 do\n        if i % 2 == 0 then\n  \
    \          t[i] = tri(i / 2)\n        else\n            t[i] = tri(i / 2) + tri(i\
    \ / 2 - 1) + tri(i / 2 + 1)\n        end\n    end\n    return t\nend", "    if\
    \ n == 1 then return [1]\n    if n == 2 then return [1, 3]\n    return [1, 1 +\
    \ (n / 2), tri(n - 1) + tri(n - 2) + tri(n + 1)]\nend", "    if n == 0 then return\
    \ {1} end\n    if n == 1 then return {3} end\n    if n % 2 == 0 then return {1,\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)} end\n    return {tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1)}\nend", "    local t =\
    \ {}\n    for i = 1, n + 1, 1 do\n        if i % 2 == 0 then\n            t[i]\
    \ = tri(i / 2) + tri(i / 2 - 1) + tri(i / 2 + 1)\n        else\n            t[i]\
    \ = tri(i / 2) + tri(i / 2 - 1) + tri(i / 2 + 1)\n        end\n    end\n    return\
    \ t\nend", "    if n == 1 then return [1]\n    if n == 2 then return [1, 3]\n\
    \    return [1, 1 + n / 2, tri(n - 1) + tri(n - 2) + tri(n + 1)]\nend", "    if\
    \ n == 1 then return [1]\n    if n == 2 then return [1, 1]\n    if n == 3 then\
    \ return [1, 3, 2, 8]\n    return [1, tri(n - 1) + tri(n - 2) + tri(n + 1)]\n\
    end", "    if n == 0 then return 1 end\n    if n == 1 then return 3 end\n    if\
    \ n % 2 == 0 then return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\nend", "    if n == 1 then return [1]\n\
    \    if n == 2 then return [1, 3]\n    local t1, t2, t3 = 1, 1, 1\n    for i =\
    \ 1, n, 1 do\n        t3 = t1 + t2\n        t1 = t2\n        t2 = t3\n       \
    \ table.insert(t3, t3)\n    end\n    return t3\nend", "    if n == 0 then return\
    \ 0 end\n    if n == 1 then return 1 end\n    if n == 2 then return 2 end\n  \
    \  if n % 2 == 0 then return tri(n - 1) + tri(n - 2) + tri(n + 1) else return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) end\nend", "    if n == 1 then return [1]\n\
    \    if n == 2 then return [1, 3]\n    if n == 3 then return [1, 3, 2, 8]\n  \
    \  return [1, tri(n - 1) + tri(n - 2) + tri(n + 1)]\nend", "    if n == 1 then\
    \ return [1]\n    if n == 2 then return [1, 3]\n    if n == 3 then return [1,\
    \ 3, 2, 8]\n    if n % 2 == 0 then return [1, 1 + n / 2]\n    return [1 + n /\
    \ 2, 1 + n / 2 + n / 2, 1 + n / 2 + n / 2 + n / 2]\nend", "    if n == 1 then\
    \ return [1]\n    if n == 2 then return [1, 3]\n    if n == 3 then return [1,\
    \ 3, 2, 8]\n    return tri(n - 1) + tri(n - 2) + tri(n - 3)\nend", "    if n ==\
    \ 0 then return {} end\n    local t = {}\n    for i = 1, n, 1 do\n        if i\
    \ % 2 == 0 then\n            t[i] = tri(i / 2)\n        else\n            t[i]\
    \ = tri(i / 2) + tri(i / 2 - 1) + tri(i / 2 + 1)\n        end\n    end\n    return\
    \ t\nend", "    if n == 0 then return 0 end\n    if n == 1 then return 1 end\n\
    \    if n == 2 then return 2 end\n    return tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1)\nend", "    if n == 0 then return {} end\n    local t = {}\n    for i = 1,\
    \ n, 2 do\n        if i % 2 == 0 then\n            t[i] = tri(i - 1) + tri(i -\
    \ 2) + tri(i + 1)\n        else\n            t[i] = tri(i - 1) + tri(i - 2) +\
    \ tri(i + 1)\n        end\n    end\n    return t\nend", "    if n == 0 then return\
    \ 0 end\n    if n == 1 then return 1 end\n    if n % 2 == 0 then return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) else return tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1) + tri(n + 2) end\nend", "    if n == 1 then return [1]\n    if n == 2 then\
    \ return [1, 3]\n    if n == 3 then return [1, 3, 2, 8]\n    return [1, 3, 2,\
    \ 8] .. tri(n - 1) .. tri(n - 2) .. tri(n - 3)\nend", "    if n == 0 then return\
    \ {} end\n    local t = {}\n    t[1] = 3\n    for i = 2, n, 2 do\n        t[i]\
    \ = 1 + (i / 2)\n    end\n    for i = 3, n, 3 do\n        t[i] = tri[i - 1] +\
    \ tri[i - 2] + tri[i + 1]\n    end\n    return t\nend", "    local t = {}\n  \
    \  for i = 1, n + 1, 1 do\n        if i % 2 == 0 then\n            t[i] = tri(i\
    \ / 2) + tri(i / 2 - 1) + tri(i / 2 + 1)\n        else\n            t[i] = tri(i\
    \ / 2) + tri(i / 2 - 1) + tri(i / 2 + 1)\n        end\n    end\n    return t\n\
    end", "    if n == 0 then return 0 end\n    if n == 1 then return 3 end\n    if\
    \ n % 2 == 0 then return tri(n - 1) + tri(n - 2) + tri(n + 1) else\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    end\nend", "    if n == 1 then return\
    \ [1]\n    if n == 2 then return [1, 3]\n    if n == 3 then return [1, 3, 2, 8]\n\
    \    return [1, 3, 2, 8] .. tri(n - 1) .. tri(n - 2) .. tri(n - 3)\nend", "  \
    \  if n == 1 then return [1]\n    if n == 2 then return [1, 1]\n    if n == 3\
    \ then return [1, 3, 2, 8]\n    return [1, 1 + n / 2, tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\nend", "    if n == 0 then return [0] end\n    if n == 1 then\
    \ return [1, 3] end\n    if n == 2 then return [1, 3, 2, 8] end\n    return [1,\
    \ 3, 2, 8] .. tri(n - 2) .. tri(n - 1)\nend", "    if n == 0 then return [0] end\n\
    \    if n == 1 then return [3] end\n    if n == 2 then return [1, 3] end\n   \
    \ if n % 2 == 0 then return [1, 1 + (n / 2)] end\n    return [1 + (n / 2), 1 +\
    \ (n / 2) + (n / 2), 1 + (n / 2) + (n / 2) + (n / 2)]\nend", "    if n == 1 then\
    \ return [1]\n    if n == 2 then return [1, 3]\n    if n == 3 then return [1,\
    \ 3, 2, 8]\n    return [1, 1 + n / 2, tri(n - 1) + tri(n - 2) + tri(n + 1)]\n\
    end", "    if n == 1 then return [1]\n    if n == 2 then return [1, 3]\n    if\
    \ n == 3 then return [1, 3, 2, 8]\n    return [1, 3, 2, 8] .. tri(n - 1) .. tri(n\
    \ - 2) .. tri(n - 3)\nend", "    if n == 0 then return 0 end\n    if n == 1 then\
    \ return 1 end\n    if n % 2 == 0 then return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) else return tri(n - 1) + tri(n - 2) + tri(n + 1) end\nend", "    local\
    \ t = {}\n    for i = 1, n + 1, 1 do\n        if i % 2 == 0 then\n           \
    \ t[i] = tri(i / 2) + tri(i / 2 - 1) + tri(i / 2 + 1)\n        else\n        \
    \    t[i] = tri(i / 2) + tri(i / 2 - 1) + tri(i / 2 + 1)\n        end\n    end\n\
    \    return t\nend", "    if n == 1 then return [1]\n    if n == 2 then return\
    \ [1, 3]\n    if n == 3 then return [1, 3, 2, 8]\n    if n % 2 == 0 then return\
    \ [1, tri(n - 1) + tri(n - 2) + tri(n + 1)]\n    else return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1)]\nend", "    if n ==\
    \ 1 then return [1]\n    if n == 2 then return [1, 3]\n    if n == 3 then return\
    \ [1, 3, 2, 8]\n    return [1, 3, 2, 8] .. tri(n - 1) .. tri(n - 2) .. tri(n -\
    \ 3)\nend", "    if n == 1 then return [1]\n    if n == 2 then return [1, 3]\n\
    \    if n == 3 then return [1, 3, 2, 8]\n    local t1, t2, t3\n    t1 = tri(n\
    \ - 1)\n    t2 = tri(n - 2)\n    t3 = tri(n - 3)\n    return t1 + t2 + t3\nend",
  "    local t = {}\n    for i = 1, n + 1, 1 do\n        if i % 2 == 0 then\n    \
    \        t[i] = tri(i / 2)\n        else\n            t[i] = tri(i / 2) + tri(i\
    \ / 2 - 1) + tri(i / 2 + 1)\n        end\n    end\n    return t\nend", "    local\
    \ t = {}\n    for i = 1, n + 1, 1 do\n        if i % 2 == 0 then\n           \
    \ t[i] = tri(i / 2) + tri(i / 2 - 1) + tri(i / 2 + 1)\n        else\n        \
    \    t[i] = tri(i / 2) + tri(i / 2 - 1) + tri(i / 2 + 1)\n        end\n    end\n\
    \    return t\nend", "    if n == 1 then return [1]\n    if n == 2 then return\
    \ [1, 1]\n    if n == 3 then return [1, 3, 2, 8]\n    return [1, tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1)]\nend", "    if n == 1 then return [1]\n    if n ==\
    \ 2 then return [1, 3]\n    if n == 3 then return [1, 3, 2, 8]\n    return [1,\
    \ 3, 2, 8] .. tri(n - 1) .. tri(n - 2) .. tri(n - 3)\nend", "    if n == 1 then\
    \ return [1]\n    if n == 2 then return [1, 3]\n    return [1, 3, 2, 8]\nend",
  "    local t = {}\n    for i = 1, n + 1, 1 do\n        if i % 2 == 0 then\n    \
    \        t[i] = tri(i / 2)\n        else\n            t[i] = tri(i / 2) + tri(i\
    \ / 2 - 1) + tri(i / 2 + 1)\n        end\n    end\n    return t\nend", "    if\
    \ n == 0 then return {} end\n    local t = {}\n    for i = 1, n, 2 do\n      \
    \  t[i] = tri(i)\n    end\n    return t\nend", "    if n == 1 then return [1]\n\
    \    if n == 2 then return [1, 3]\n    if n == 3 then return [1, 3, 2, 8]\n  \
    \  if n % 2 == 0 then return [1, 1 + n / 2]\n    else return [1 + n / 2, 1 + n\
    \ / 2 + n / 2, 1 + n / 2 + n / 2 + n / 2]\nend", "    if n == 1 then return [1]\n\
    \    if n == 2 then return [1, 1]\n    if n == 3 then return [1, 3, 2, 8]\n  \
    \  return [1, tri(n - 1) + tri(n - 2) + tri(n + 1)]\nend", "    if n == 1 then\
    \ return [1]\n    if n == 2 then return [1, 1]\n    if n == 3 then return [1,\
    \ 3, 2, 8]\n    return [1, 1 + n / 2, tri(n - 1) + tri(n - 2) + tri(n + 1)]\n\
    end", "    if n == 1 then return [1]\n    if n == 2 then return [1, 3]\n    if\
    \ n == 3 then return [1, 3, 2, 8]\n    return [1, tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)]\nend", "    if n == 1 then return [1]\n    if n == 2 then return [1, 3]\n\
    \    if n == 3 then return [1, 3, 2, 8]\n    return tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1)\nend", "    local t = {}\n    for i = 1, n + 1 do\n        if i %\
    \ 2 == 0 then\n            t[i] = 1 + (i / 2)\n        else\n            t[i]\
    \ = tri(i - 1) + tri(i - 2) + tri(i + 1)\n        end\n    end\n    return t\n\
    end", "    if n == 1 then return [1]\n    if n == 2 then return [1, 3]\n    if\
    \ n == 3 then return [1, 3, 2, 8]\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3)\nend", "    if n == 0 then return 0 end\n    if n == 1 then return 1 end\n\
    \    if n % 2 == 0 then return tri(n - 1) + tri(n - 2) + tri(n + 1) else return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) end\nend", "    local t = {}\n    for i\
    \ = 1, n + 1, 1 do\n        if i % 2 == 0 then\n            t[i] = tri(i / 2)\
    \ + tri(i / 2 - 1) + tri(i / 2 + 1)\n        else\n            t[i] = tri(i /\
    \ 2) + tri(i / 2 - 1) + tri(i / 2 + 1)\n        end\n    end\n    return t\nend",
  "    if n == 1 then return [1]\n    if n == 2 then return [1, 3]\n    if n == 3\
    \ then return [1, 3, 2, 8]\n    if n % 2 == 0 then return tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n    else return tri(n - 1) + tri(n - 2) + tri(n + 1)\nend",
  "    if n == 0 then return [0] end\n    local t = {}\n    for i = 1, n + 1, 1 do\n\
    \        if i % 2 == 0 then\n            t[i] = tri(i / 2)\n        else\n   \
    \         t[i] = tri(i / 2) + tri(i / 2 - 1) + tri(i / 2 + 1)\n        end\n \
    \   end\n    return t\nend", "    if n == 0 then return 0 end\n    if n == 1 then\
    \ return 1 end\n    if n % 2 == 0 then return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) else return tri(n - 1) + tri(n - 2) + tri(n + 1) end\nend", "    if n ==\
    \ 1 then return [1]\n    if n == 2 then return [1, 3]\n    if n == 3 then return\
    \ [1, 3, 2, 8]\n    return [1, 3, 2, 8] .. tri(n - 1) .. tri(n - 2) .. tri(n -\
    \ 3)\nend", "    if n == 0 then return 1 end\n    if n == 1 then return 3 end\n\
    \    if n % 2 == 0 then return tri(n - 1) + tri(n - 2) + tri(n + 1) else return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) end\nend", "    if n == 0 then return {}\
    \ end\n    local t = {}\n    for i = 1, n, 1 do\n        if i % 2 == 0 then\n\
    \            t[i] = tri(i / 2)\n        else\n            t[i] = tri(i / 2) +\
    \ tri(i / 2 - 1) + tri(i / 2 + 1)\n        end\n    end\n    return t\nend", " \
    \   if n == 1 then return [1]\n    if n == 2 then return [1, 3]\n    local t1,\
    \ t2, t3 = 1, 1, 1\n    for i = 1, n - 1, 2 do\n        t3 = t1 + t2\n       \
    \ t1 = t2\n        t2 = t3\n        print(t3)\n    end\n    return t3\nend", " \
    \   if n == 1 then return [1, 3, 2, 8]\n    if n == 2 then return [1, 3, 2, 8]\n\
    \    if n == 3 then return [1, 3, 2, 8]\n    if n == 4 then return [1, 3, 2, 8]\n\
    \    if n == 5 then return [1, 3, 2, 8]\n    if n == 6 then return [1, 3, 2, 8]\n\
    \    if n == 7 then return [1, 3, 2, 8]\n    if n == 8 then return [1, 3, 2, 8]\n\
    \    if n == 9 then return [1, 3, 2, 8]\n    if n == 10 then return [1, 3, 2,\
    \ 8]\n    if n == 11 then return [1, 3, 2, 8]\n    if n == 12 then return [1,\
    \ 3, 2, 8]\n    if n == 13 then return [1, 3, 2, 8]\n    if n == 14 then return\
    \ [1, 3, 2, 8]\n    if n == 15 then return [1, 3, 2, 8]\n    if n == 16 then return\
    \ [1, 3, 2, 8]\n    if n == 17 then return [1, 3, 2, 8]\n    if n == 18 then return\
    \ [1, 3, 2, 8]\n    if n == 19 then return [1, 3, 2, 8]\n    if n == 20 then return\
    \ [1, 3, 2, 8]\n    if n == 21 then return [1, 3, 2, 8]\n    if n == 22 then return\
    \ [1, 3, 2, 8]\n    if n == 23 then return [1, 3, 2, 8]\n    if n == 24 then return\
    \ [1, 3, 2, 8]\n    if n == 25 then return [1, 3, 2, 8]\n    if n == 26 then return\
    \ [1, 3, 2, 8]\n    if n == 27 then return [1, 3, 2, 8]\n    if n == 28 then return\
    \ [1, 3, 2, 8]\n    if n == 29 then return [1, 3, 2, 8]\n    if n == 30 then return\
    \ [1, 3, 2, 8]\n    if", "    if n == 1 then return [1]\n    if n == 2 then return\
    \ [1, 3]\n    if n == 3 then return [1, 3, 2, 8]\n    return [1, 3, 2, 8] .. tri(n\
    \ - 1) .. [1, 3]\nend", "    if n == 0 then return {} end\n    local t = {}\n\
    \    for i = 1, n + 1, 1 do\n        t[i] = tri(i - 1) + tri(i - 2) + tri(i +\
    \ 1)\n    end\n    return t\nend", "    if n == 1 then return [1, 3, 2, 8]\n \
    \   if n == 2 then return [1, 3, 2, 8]\n    if n == 3 then return [1, 3, 2, 8]\n\
    \    if n == 4 then return [1, 3, 2, 8]\n    if n == 5 then return [1, 3, 2, 8]\n\
    \    if n == 6 then return [1, 3, 2, 8]\n    if n == 7 then return [1, 3, 2, 8]\n\
    \    if n == 8 then return [1, 3, 2, 8]\n    if n == 9 then return [1, 3, 2, 8]\n\
    \    if n == 10 then return [1, 3, 2, 8]\n    if n == 11 then return [1, 3, 2,\
    \ 8]\n    if n == 12 then return [1, 3, 2, 8]\n    if n == 13 then return [1,\
    \ 3, 2, 8]\n    if n == 14 then return [1, 3, 2, 8]\n    if n == 15 then return\
    \ [1, 3, 2, 8]\n    if n == 16 then return [1, 3, 2, 8]\n    if n == 17 then return\
    \ [1, 3, 2, 8]\n    if n == 18 then return [1, 3, 2, 8]\n    if n == 19 then return\
    \ [1, 3, 2, 8]\n    if n == 20 then return [1, 3, 2, 8]\n    if n == 21 then return\
    \ [1, 3, 2, 8]\n    if n == 22 then return [1, 3, 2, 8]\n    if n == 23 then return\
    \ [1, 3, 2, 8]\n    if n == 24 then return [1, 3, 2, 8]\n    if n == 25 then return\
    \ [1, 3, 2, 8]\n    if n == 26 then return [1, 3, 2, 8]\n    if n == 27 then return\
    \ [1, 3, 2, 8]\n    if n == 28 then return [1, 3, 2, 8]\n    if n == 29 then return\
    \ [1, 3, 2, 8]\n    if n == 30 then return [1, 3, 2, 8]\n    if", "    if n ==\
    \ 1 then return [1]\n    if n == 2 then return [1, 3]\n    if n == 3 then return\
    \ [1, 3, 2, 8]\n    return [1, 3, 2, 8] .. tri(n - 1) .. tri(n - 2) .. tri(n -\
    \ 3)\nend", "    if n == 0 then return {} end\n    local t = {}\n    for i = 1,\
    \ n + 1, 1 do\n        t[i] = tri(i - 1) + tri(i - 2) + tri(i + 1)\n    end\n\
    \    return t\nend", "    if n == 0 then return {1} end\n    if n == 1 then return\
    \ {3} end\n    local t1, t2, t3\n    t1 = 1\n    t2 = 3\n    t3 = 2\n    for i\
    \ = 2, n, 1 do\n        t3 = t1 + t2\n        t1 = t2\n        t2 = t3\n     \
    \   table.insert(t3, t3)\n    end\n    return t3\nend", "    if n == 1 then return\
    \ [1]\n    if n == 2 then return [1, 3]\n    return [1, 1 + n / 2, tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)]\nend", "    if n == 1 then return [1, 3, 2, 8] end\n\
    \    if n == 2 then return [1, 3, 2, 8] end\n    if n == 3 then return [1, 3,\
    \ 2, 8] end\n    if n % 2 == 0 then return [1, 3, 2, 8] end\n    return [1, 1\
    \ + n / 2, 1 + n / 2 + n / 2, 1 + n / 2 + n / 2 + n / 2]\nend", "    if n == 0\
    \ then return 0 end\n    if n == 1 then return 1 end\n    if n % 2 == 0 then return\
    \ tri(n / 2) + tri(n / 2) + tri(n / 2) end\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1)\nend", "    if n == 1 then return [1]\n    if n == 2 then return\
    \ [1, 3]\n    if n == 3 then return [1, 3, 2, 8]\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n - 3)\nend", "    local t = {}\n    for i = 1, n + 1, 1 do\n   \
    \     if i % 2 == 0 then\n            t[i] = tri(i / 2) + tri(i / 2 - 1) + tri(i\
    \ / 2 + 1)\n        else\n            t[i] = tri(i / 2) + tri(i / 2 - 1) + tri(i\
    \ / 2 + 1)\n        end\n    end\n    return t\nend", "    if n == 0 then return\
    \ 0 end\n    if n == 1 then return 1 end\n    if n % 2 == 0 then return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\nend", "    if n == 0 then return {} end\n    local t = {}\n    for i =\
    \ 1, n + 1 do\n        if i % 2 == 0 then\n            t[i] = tri(i - 1) + tri(i\
    \ - 2) + tri(i + 1)\n        else\n            t[i] = tri(i - 1) + tri(i - 2)\
    \ + tri(i + 1)\n        end\n    end\n    return t\nend", "    local t = {}\n\
    \    for i = 1, n + 1, 1 do\n        if i % 2 == 0 then\n            t[i] = tri(i\
    \ / 2)\n        else\n            t[i] = tri(i / 2) + tri(i / 2 - 1) + tri(i /\
    \ 2 + 1)\n        end\n    end\n    return t\nend", "    if n == 0 then return\
    \ {} end\n    local t = {}\n    for i = 1, n, 1 do\n        if i % 2 == 0 then\n\
    \            t[i] = tri(i / 2)\n        else\n            t[i] = tri(i / 2) +\
    \ tri(i / 2 - 1) + tri(i / 2 + 1)\n        end\n    end\n    return t\nend", " \
    \   if n == 0 then return 0 end\n    if n == 1 then return 1 end\n    if n ==\
    \ 2 then return 2 end\n    if n % 2 == 0 then return tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1) else return tri(n - 1) + tri(n - 2) + tri(n + 1) end\nend", "   \
    \ local t = {}\n    for i = 1, n + 1, 1 do\n        if i % 2 == 0 then\n     \
    \       t[i] = tri(i / 2) + tri(i / 2 - 1) + tri(i / 2 + 1)\n        else\n  \
    \          t[i] = tri(i / 2) + tri(i / 2 - 1) + tri(i / 2 + 1)\n        end\n\
    \    end\n    return t\nend", "    if n == 1 then return [1]\n    if n == 2 then\
    \ return [1, 3]\n    if n == 3 then return [1, 3, 2, 8]\n    return [1, 3, 2,\
    \ 8] .. tri(n - 1) .. tri(n - 2) .. tri(n - 3)\nend", "    if n == 1 then return\
    \ [1]\n    if n == 2 then return [1, 3]\n    return [1, 3, 2, 8]\nend", "    if\
    \ n == 1 then return [1]\n    if n == 2 then return [1, 1]\n    if n == 3 then\
    \ return [1, 3, 2, 8]\n    return [1, 1 + n / 2, tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)]\nend", "    if n == 1 then return [1]\n    if n == 2 then return [1, 3]\n\
    \    if n == 3 then return [1, 3, 2, 8]\n    return [1, tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\nend", "    local t = {}\n    for i = 1, n + 1 do\n        if\
    \ i % 2 == 0 then\n            t[i] = 1 + (i / 2)\n        else\n            t[i]\
    \ = tri(i - 1) + tri(i - 2) + tri(i + 1)\n        end\n    end\n    return t\n\
    end", "    if n == 1 then return [1]\n    if n == 2 then return [1, 3]\n    if\
    \ n == 3 then return [1, 3, 2, 8]\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\nend", "    if n == 1 then return [1]\n    if n == 2 then return [1, 3]\n\
    \    if n == 3 then return [1, 3, 2, 8]\n    return [1, 3, 2, 8] .. tri(n - 1)\
    \ .. [1, 3]\nend", "    if n == 1 then return [1]\n    if n == 2 then return [1,\
    \ 3]\n    if n == 3 then return [1, 3, 2, 8]\n    return tri(n - 1) + tri(n -\
    \ 2) + tri(n - 3)\nend", "    if n == 0 then return [0] end\n    if n == 1 then\
    \ return [1] end\n    if n == 2 then return [1, 1] end\n    local t1, t2, t3\n\
    \    t1 = 1\n    t2 = 1\n    t3 = 1\n    for i = 3, 1, -1 do\n        t3 = t1\
    \ + t2\n        t1 = t2\n        t2 = t3\n        table.insert(n + 1, t3)\n  \
    \  end\n    return table.concat({t1, t2, t3})\nend", "    if n == 1 then return\
    \ [1]\n    if n == 2 then return [1, 3]\n    if n == 3 then return [1, 3, 2, 8]\n\
    \    return [1, 1 + n / 2, tri(n - 1) + tri(n - 2) + tri(n + 1)]\nend", "    if\
    \ n == 1 then return [1]\n    if n == 2 then return [1, 1]\n    if n == 3 then\
    \ return [1, 3, 2, 8]\n    return [1, 1 + n / 2, tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)]\nend", "    if n == 1 then return [1]\n    if n == 2 then return [1, 3]\n\
    \    if n == 3 then return [1, 3, 2, 8]\n    return [1, 3, 2, 8] .. tri(n - 1)\
    \ .. tri(n - 2) .. tri(n - 3)\nend", "    local t = {}\n    for i = 1, n + 1,\
    \ 1 do\n        if i % 2 == 0 then\n            t[i] = tri(i / 2) + tri(i / 2\
    \ - 1) + tri(i / 2 + 1)\n        else\n            t[i] = tri(i / 2) + tri(i /\
    \ 2 - 1) + tri(i / 2 + 1)\n        end\n    end\n    return t\nend", "    if n\
    \ == 1 then return [1]\n    if n == 2 then return [1, 3]\n    if n == 3 then return\
    \ [1, 3, 2, 8]\n    if n % 2 == 0 then return [1, 1 + n / 2, 1 + n / 2 + n / 2,\
    \ 1 + n / 2 + n / 2 + n / 2]\n    else return [1, 1 + n / 2, 1 + n / 2 + n / 2,\
    \ 1 + n / 2 + n / 2 + n / 2, 1 + n / 2 + n / 2 + n / 2 + n / 2]\nend", "    if\
    \ n == 1 then return [1]\n    if n == 2 then return [1, 3]\n    if n == 3 then\
    \ return [1, 3, 2, 8]\n    if n == 4 then return [1, 3, 2, 8, 5, 9]\n    if n\
    \ == 5 then return [1, 3, 2, 8, 5, 9, 4, 10, 13, 12, 17]\n    if n == 6 then return\
    \ [1, 3, 2, 8, 5, 9, 4, 10, 13, 12, 17, 14, 19, 18, 23, 22, 29]\n    if n == 7\
    \ then return [1, 3, 2, 8, 5, 9, 4, 10, 13, 12, 17, 14, 19, 18, 23, 22, 29, 16,\
    \ 25, 24, 33, 32, 41, 40, 47, 46, 55, 54, 63, 62, 71, 70, 79, 78, 87, 86, 95,\
    \ 94, 103, 102, 111, 110, 119, 118, 127, 126, 135, 134, 143, 142, 151, 150, 159,\
    \ 158, 167, 166, 175, 174, 183, 182, 191, 190, 199, 198, 207, 206, 215, 214, 223,\
    \ 222, 231, 230, 239, 238, 247, 246, 255, 254, 263, 262, 271, 270, 279, 278, 287,\
    \ 286, 295, 294, 303, 302, 311, 310, 319, 318, 327, 326, 335, 334, 343, 342, 351,\
    \ 350, 359, 358, 367, 366, 375, 374, 383, 382, 391, 390, 399, 398, 407, 406, 415,\
    \ 414, 423, 422, 431, 430, 439, 438, 447, 446, 455, 454, 463, 462, 471, 470, 479,\
    \ 478, 487, 486, 495, 494, 503, 502, 511, 510, 519, 518, 527, 526, 535, 534, 543,\
    \ 542, 551, 550, 559, 558, 567, 566, 575, 574, 583, 582, 591, 590, 599, 598, 6",
  "    if n == 1 then return [1]\n    if n == 2 then return [1, 3]\n    if n == 3\
    \ then return [1, 3, 2, 8]\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    end", "    if n == 0 then return 0 end\n    if n == 1 then return 1 end\n    if\
    \ n == 2 then return 2 end\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    end", "    if n == 1 then return [1, 3, 2, 8]\n    if n == 2 then return [1, 3,\
    \ 2, 8]\n    if n == 3 then return [1, 3, 2, 8]\n    if n == 4 then return [1,\
    \ 3, 2, 8]\n    if n == 5 then return [1, 3, 2, 8]\n    if n == 6 then return\
    \ [1, 3, 2, 8]\n    if n == 7 then return [1, 3, 2, 8]\n    if n == 8 then return\
    \ [1, 3, 2, 8]\n    if n == 9 then return [1, 3, 2, 8]\n    if n == 10 then return\
    \ [1, 3, 2, 8]\n    if n == 11 then return [1, 3, 2, 8]\n    if n == 12 then return\
    \ [1, 3, 2, 8]\n    if n == 13 then return [1, 3, 2, 8]\n    if n == 14 then return\
    \ [1, 3, 2, 8]\n    if n == 15 then return [1, 3, 2, 8]\n    if n == 16 then return\
    \ [1, 3, 2, 8]\n    if n == 17 then return [1, 3, 2, 8]\n    if n == 18 then return\
    \ [1, 3, 2, 8]\n    if n == 19 then return [1, 3, 2, 8]\n    if n == 20 then return\
    \ [1, 3, 2, 8]\n    if n == 21 then return [1, 3, 2, 8]\n    if n == 22 then return\
    \ [1, 3, 2, 8]\n    if n == 23 then return [1, 3, 2, 8]\n    if n == 24 then return\
    \ [1, 3, 2, 8]\n    if n == 25 then return [1, 3, 2, 8]\n    if n == 26 then return\
    \ [1, 3, 2, 8]\n    if n == 27 then return [1, 3, 2, 8]\n    if n == 28 then return\
    \ [1, 3, 2, 8]\n    if n == 29 then return [1, 3, 2, 8]\n    if n == 30 then return\
    \ [1, 3, 2, 8]\n    if", "    if n == 1 then return [1]\n    if n == 2 then return\
    \ [1, 3]\n    if n == 3 then return [1, 3, 2, 8]\n    return [1, 3, 2, 8] .. tri(n\
    \ - 1) .. tri(n - 2) .. tri(n - 3)\nend", "    if n == 0 then return 1 end\n \
    \   if n == 1 then return 3 end\n    if n % 2 == 0 then return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) else return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1) end\nend", "    if n == 0 then return 1 end\n \
    \   if n == 1 then return 3 end\n    if n % 2 == 0 then return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) else return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n +\
    \ 2) end\nend", "    if n == 1 then return [1]\n    if n == 2 then return [1,\
    \ 3]\n    if n == 3 then return [1, 3, 2, 8]\n    if n == 4 then return [1, 3,\
    \ 2, 8, 5]\n    return [1, 3, 2, 8, 5, 9]\nend", "    if n == 1 then return [1]\n\
    \    if n == 2 then return [1, 3]\n    if n == 3 then return [1, 3, 2, 8]\n  \
    \  return tri(n - 1) + tri(n - 2) + tri(n - 3)\nend", "    if n == 0 then return\
    \ 1 end\n    if n == 1 then return 3 end\n    if n % 2 == 0 then return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\nend", "    if n == 1 then return [1]\n    if n == 2 then return [1, 3]\n\
    \    if n == 3 then return [1, 3, 2, 8]\n    return [1, 3, 2, 8] .. tri(n - 1)\
    \ .. tri(n - 2) .. tri(n - 3)\nend", "    local t = {}\n    for i = 1, n + 1,\
    \ 1 do\n        if i % 2 == 0 then\n            t[i] = tri(i / 2)\n        else\n\
    \            t[i] = tri(i / 2) + tri(i / 2 - 1) + tri(i / 2 + 1)\n        end\n\
    \    end\n    return t\nend", "    if n == 0 then return {} end\n    if n == 1\
    \ then return {1} end\n    if n == 2 then return {1, 3} end\n    if n % 2 == 0\
    \ then return {1, 3, 2, 8} end\n    return {1, 3, 2, 8} .. {1, 3, 2, 8} .. {1,\
    \ 3, 2, 8} .. {1, 3, 2, 8} .. {1, 3, 2, 8} .. {1, 3, 2, 8} .. {1, 3, 2, 8} ..\
    \ {1, 3, 2, 8} .. {1, 3, 2, 8} .. {1, 3, 2, 8} .. {1, 3, 2, 8} .. {1, 3, 2, 8}\
    \ .. {1, 3, 2, 8} .. {1, 3, 2, 8} .. {1, 3, 2, 8} .. {1, 3, 2, 8} .. {1, 3, 2,\
    \ 8} .. {1, 3, 2, 8} .. {1, 3, 2, 8} .. {1, 3, 2, 8} .. {1, 3, 2, 8} .. {1, 3,\
    \ 2, 8} .. {1, 3, 2, 8} .. {1, 3, 2, 8} .. {1, 3, 2, 8} .. {1, 3, 2, 8} .. {1,\
    \ 3, 2, 8} .. {1, 3, 2, 8} .. {1, 3, 2, 8} .. {1, 3, 2, 8} .. {1, 3, 2, 8} ..\
    \ {1, 3, 2, 8} .. {1, 3, 2, 8} .. {1, 3, 2, 8} .. {1, 3, 2, 8} .. {1, 3, 2, 8}\
    \ .. {1, 3, 2, 8} .. {1, 3, 2, 8} .. {1, 3, 2, 8} .. {1, 3, 2, 8} .. {1, 3, 2,\
    \ 8} .. {1, 3, 2, 8} .. {1, 3, 2, 8} .. {1, 3, 2, 8} .. {1, 3, 2, 8} .. {1, 3",
  "    if n == 0 then return {1} end\n    if n == 1 then return {3} end\n    if n\
    \ % 2 == 0 then return {1, tri(n / 2)} end\n    return {tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)}\nend", "    if n == 1 then return [1]\n    if n == 2 then return\
    \ [1, 3]\n    if n == 3 then return [1, 3, 2, 8]\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n - 3)\nend", "    if n == 1 then return [1]\n    if n == 2 then\
    \ return [1, 1]\n    if n == 3 then return [1, 3, 2, 8]\n    return [1, tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)]\nend", "    if n == 0 then return 1 end\n  \
    \  if n == 1 then return 3 end\n    if n % 2 == 0 then return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) else return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1) end\nend", "    if n == 1 then return [1]\n   \
    \ if n == 2 then return [1, 3]\n    if n == 3 then return [1, 3, 2, 8]\n    return\
    \ [1, 1 + n / 2, tri(n - 1) + tri(n - 2) + tri(n + 1)]\nend", "    if n == 1 then\
    \ return [1]\n    if n == 2 then return [1, 3]\n    if n == 3 then return [1,\
    \ 3, 2, 8]\n    return [1, 1 + (n / 2), tri(n - 1) + tri(n - 2) + tri(n + 1)]\n\
    end", "    if n == 0 then return {1} end\n    if n == 1 then return {3} end\n\
    \    if n == 2 then return {1, 3} end\n    if n == 3 then return {2, 8} end\n\
    \    return {tri(n - 1) + tri(n - 2) + tri(n + 1)}\nend", "    local table = {}\n\
    \    table[1] = 3\n    table[2] = 1 + (2 / 2)\n    table[3] = 2\n    table[4]\
    \ = 3\n    for i = 5, 1, -1 do\n        table[i] = table[i - 1] + table[i - 2]\
    \ + table[i + 1]\n        table[i] = table[i] - table[i - 2]\n    end\n    return\
    \ table\nend", "    if n == 0 then return 0 end\n    if n == 1 then return 1 end\n\
    \    if n == 2 then return 2 end\n    if n % 2 == 0 then return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) else return tri(n - 1) + tri(n - 2) + tri(n + 1) end\nend",
  "    if n == 0 then return 0 end\n    if n == 1 then return 1 end\n    if n == 2\
    \ then return 2 end\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\nend", " \
    \   if n == 1 then return [1]\n    if n == 2 then return [1, 1]\n    if n == 3\
    \ then return [1, 3, 2, 8]\n    return [1, tri(n - 1) + tri(n - 2) + tri(n + 1)]\n\
    end", "    if n == 1 then return [1, 3, 2, 8] end\n    if n == 2 then return [1,\
    \ 3, 2, 8] end\n    if n == 3 then return [1, 3, 2, 8] end\n    if n == 4 then\
    \ return [1, 3, 2, 8] end\n    if n == 5 then return [1, 3, 2, 8] end\n    if\
    \ n == 6 then return [1, 3, 2, 8] end\n    if n == 7 then return [1, 3, 2, 8]\
    \ end\n    if n == 8 then return [1, 3, 2, 8] end\n    if n == 9 then return [1,\
    \ 3, 2, 8] end\n    if n == 10 then return [1, 3, 2, 8] end\n    if n == 11 then\
    \ return [1, 3, 2, 8] end\n    if n == 12 then return [1, 3, 2, 8] end\n    if\
    \ n == 13 then return [1, 3, 2, 8] end\n    if n == 14 then return [1, 3, 2, 8]\
    \ end\n    if n == 15 then return [1, 3, 2, 8] end\n    if n == 16 then return\
    \ [1, 3, 2, 8] end\n    if n == 17 then return [1, 3, 2, 8] end\n    if n == 18\
    \ then return [1, 3, 2, 8] end\n    if n == 19 then return [1, 3, 2, 8] end\n\
    \    if n == 20 then return [1, 3, 2, 8] end\n    if n == 21 then return [1, 3,\
    \ 2, 8] end\n    if n == 22 then return [1, 3, 2, 8] end\n    if n == 23 then\
    \ return [1, 3, 2, 8] end\n    if n == 24 then return [1, 3, 2, 8] end\n    if\
    \ n == 25 then return [1, 3, 2, 8] end\n    if n == 26 then return [1, 3, 2, 8]\
    \ end\n    if n == 27 then return [1, 3, 2, 8] end\n    if n == 28 then return\
    \ [1, 3, 2, 8] end\n    if n == 29 then return [", "    if n == 1 then return\
    \ [1]\n    if n == 2 then return [1, 3]\n    if n == 3 then return [1, 3, 2, 8]\n\
    \    return [1, 1 + (n / 2), tri(n - 1) + tri(n - 2) + tri(n + 1)]\nend", "  \
    \  if n == 1 then return [1]\n    if n == 2 then return [1, 3]\n    local t1,\
    \ t2, t3\n    t1 = tri(n - 1)\n    t2 = tri(n - 2)\n    t3 = tri(n - 3)\n    return\
    \ t1 + t2 + t3\nend", "    if n == 0 then return {} end\n    local t = {}\n  \
    \  for i = 1, n + 1, 1 do\n        t[i] = tri(i - 1) + tri(i - 2) + tri(i + 1)\n\
    \    end\n    return t\nend", "    if n == 1 then return [1]\n    if n == 2 then\
    \ return [1, 3]\n    if n == 3 then return [1, 3, 2, 8]\n    if n % 2 == 0 then\
    \ return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\nend", "    if n == 1 then return [1]\n    if n == 2 then\
    \ return [1, 3]\n    if n == 3 then return [1, 3, 2, 8]\n    return [1, 1 + n\
    \ / 2, tri(n - 1) + tri(n - 2) + tri(n + 1)]\nend", "    if n == 0 then return\
    \ 0 end\n    if n == 1 then return 1 end\n    if n % 2 == 0 then return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) else return tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1) + tri(n + 2) end\nend", "    if n == 1 then return [1]\n    if n == 2 then\
    \ return [1, 3]\n    if n == 3 then return [1, 3, 2, 8]\n    return [1, 1 + (n\
    \ / 2), tri(n - 1) + tri(n - 2) + tri(n + 1)]\nend", "    if n == 0 then return\
    \ 0 end\n    if n == 1 then return 1 end\n    if n == 2 then return 2 end\n  \
    \  return tri(n - 1) + tri(n - 2) + tri(n - 3)\nend", "    if n == 1 then return\
    \ [1, 3, 2, 8]\n    if n == 2 then return [1, 3, 2, 8]\n    if n == 3 then return\
    \ [1, 3, 2, 8]\n    if n == 4 then return [1, 3, 2, 8]\n    if n == 5 then return\
    \ [1, 3, 2, 8]\n    if n == 6 then return [1, 3, 2, 8]\n    if n == 7 then return\
    \ [1, 3, 2, 8]\n    if n == 8 then return [1, 3, 2, 8]\n    if n == 9 then return\
    \ [1, 3, 2, 8]\n    if n == 10 then return [1, 3, 2, 8]\n    if n == 11 then return\
    \ [1, 3, 2, 8]\n    if n == 12 then return [1, 3, 2, 8]\n    if n == 13 then return\
    \ [1, 3, 2, 8]\n    if n == 14 then return [1, 3, 2, 8]\n    if n == 15 then return\
    \ [1, 3, 2, 8]\n    if n == 16 then return [1, 3, 2, 8]\n    if n == 17 then return\
    \ [1, 3, 2, 8]\n    if n == 18 then return [1, 3, 2, 8]\n    if n == 19 then return\
    \ [1, 3, 2, 8]\n    if n == 20 then return [1, 3, 2, 8]\n    if n == 21 then return\
    \ [1, 3, 2, 8]\n    if n == 22 then return [1, 3, 2, 8]\n    if n == 23 then return\
    \ [1, 3, 2, 8]\n    if n == 24 then return [1, 3, 2, 8]\n    if n == 25 then return\
    \ [1, 3, 2, 8]\n    if n == 26 then return [1, 3, 2, 8]\n    if n == 27 then return\
    \ [1, 3, 2, 8]\n    if n == 28 then return [1, 3, 2, 8]\n    if n == 29 then return\
    \ [1, 3, 2, 8]\n    if n == 30 then return [1, 3, 2, 8]\n    if", "    local t\
    \ = {}\n    for i = 1, n + 1 do\n        if i % 2 == 0 then\n            t[i]\
    \ = 1 + (i / 2)\n        else\n            t[i] = tri(i - 1) + tri(i - 2) + tri(i\
    \ + 1)\n        end\n    end\n    return t\nend", "    if n == 0 then return 1\
    \ end\n    if n == 1 then return 3 end\n    if n % 2 == 0 then return tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1)\n    else return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\nend", "    if n == 0 then return 0 end\n    if n == 1 then return 3 end\n\
    \    if n % 2 == 0 then return tri(n - 1) + tri(n - 2) + tri(n + 1) else return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2) end\nend", "    if n == 1\
    \ then return [1]\n    if n == 2 then return [1, 3]\n    local t1, t2, t3\n  \
    \  t1 = 1\n    t2 = 1\n    t3 = 1\n    for i = 3, 1, -1 do\n        t3 = t1 +\
    \ t2\n        t1 = t2\n        t2 = t3\n        if i % 2 == 0 then t3 = t1 + t2\
    \ + t3\n        t1 = t2 + t3\n        t2 = t3\n        print(t3)\n    end\nend",
  "    local t = {}\n    for i = 1, n + 1, 1 do\n        if i % 2 == 0 then\n    \
    \        t[i] = tri(i / 2) + tri(i / 2 - 1) + tri(i / 2 + 1)\n        else\n \
    \           t[i] = tri(i / 2) + tri(i / 2 - 1) + tri(i / 2 + 1)\n        end\n\
    \    end\n    return t\nend", "    if n == 1 then return [1]\n    if n == 2 then\
    \ return [1, 3]\n    if n == 3 then return [1, 3, 2, 8]\n    return [1, 3, 2,\
    \ 8] .. tri(n - 1) .. tri(n - 2) .. tri(n - 3)\nend", "    if n == 1 then return\
    \ [1]\n    if n == 2 then return [1, 3]\n    if n == 3 then return [1, 3, 2, 8]\n\
    \    return tri(n - 1) + tri(n - 2) + tri(n - 3)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
