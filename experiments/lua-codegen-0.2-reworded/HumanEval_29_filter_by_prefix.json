{
  "name": "HumanEval_29_filter_by_prefix",
  "language": "lua",
  "prompt": "-- Filter an input table of strings only for ones that start with a given prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings, prefix)\n",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())",
  "completions": [
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, #prefix) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local result = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local filtered = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local result = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, #prefix) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, #prefix) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local result = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local result = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, #prefix) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local result = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local filtered = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local result = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, #prefix) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local result = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, #prefix) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local result = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, s in ipairs(strings) do\n        if string.sub(s, 1, string.len(prefix)) == prefix then\n            table.insert(result, s)\n        end\n    end\n    return result\nend",
    "    local filtered = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local result = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local filtered = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local result = {}\n    for _, s in pairs(strings) do\n        if string.byte(s, 1, math.min(prefix.length, string.len(s))) == prefix then\n            table.insert(result, s)\n        end\n    end\n    return result\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local result = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local result = {}\n    for _, v in pairs(strings) do\n        if string.byte(v, 1, string.len(prefix)) == string.byte(prefix, 1, string.len(prefix)) then\n            table.insert(result, v)\n        end\n    end\n    return result\nend",
    "    local filtered = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local result = {}\n    for _, string in ipairs(strings) do\n        if string.sub(1, prefix.length) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local result = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string:starts_with(string, prefix) then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local result = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local result = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local result = {}\n    for _, string in ipairs(strings) do\n        if string.sub(1, #prefix) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local result = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local result = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local result = {}\n    for _, s in pairs(strings) do\n        if string.byte(s, 1, #prefix) == #prefix then\n            table.insert(result, s)\n        end\n    end\n    return result\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local result = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local result = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local result = {}\n    for _, string in ipairs(strings) do\n        if string:starts_with(string, prefix) then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local filtered = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local result = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.sub(1, #prefix) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local result = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local result = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local filtered = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local result = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string:sub(1, #prefix) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local result = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.sub(1, prefix.length) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local result = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, #prefix) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local result = {}\n    for _, s in pairs(strings) do\n        if string.byte(s, 1, math.min(prefix.length, string.len(s))) == prefix.byte(1, 1) then\n            table.insert(result, s)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local filtered = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local result = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string:sub(1, #prefix) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local result = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local filtered = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local result = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local filtered = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local result = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local result = {}\n    for _, string in pairs(strings) do\n        if string:sub(1, #prefix) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, s in pairs(strings) do\n        if string.byte(s, 1, #prefix) == #prefix then\n            table.insert(result, s)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local result = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local filtered = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local result = {}\n    for _, s in pairs(strings) do\n        if s.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, s)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local result = {}\n    for _, string in ipairs(strings) do\n        if string:sub(1, #prefix) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local result = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, s in pairs(strings) do\n        if string.byte(s, 1, #prefix) == prefix then\n            table.insert(result, s)\n        end\n    end\n    return result\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local result = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string:sub(1, #prefix) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local result = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local result = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, #prefix) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, s in ipairs(strings) do\n        if string.sub(s, 1, string.len(prefix)) == prefix then\n            table.insert(result, s)\n        end\n    end\n    return result\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local result = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string:sub(1, #prefix) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local result = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local result = {}\n    for _, string in pairs(strings) do\n        if string:starts_with(string, prefix) then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local filtered = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local result = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local result = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local filtered = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend",
    "    local result = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend",
    "    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend"
  ],
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ]
}