language: lua
name: HumanEval_56_correct_bracketing
results:
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local open_brackets = {'<', '>'}\n    local\
    \ close_brackets = {'<', '>'}\n    local i = 1\n    while i <= #brackets do\n\
    \        if brackets[i] == '<' then\n            if not (i+1) in open_brackets\
    \ then\n                return false\n            end\n            open_brackets[i+1]\
    \ = true\n        elseif brackets[i] == '>' then\n            if not (i-1) in\
    \ close_brackets then\n                return false\n            end\n       \
    \     close_brackets[i-1] = true\n        end\n        i = i + 1\n    end\n  \
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpshewf7uj.lua:17: ''then'' expected near ''in''

    '
  stdout: ''
  timestamp: 1661907438
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n      \
    \      result = false\n            break\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907438
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n      \
    \      result = false\n            break\n    end\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvyofec69.lua:38: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1661907438
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"<\" or brackets[i+1] ~= \">\" then\n     \
    \       result = false\n            break\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3t7phkcq.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3t7phkcq.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907438
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"<\" or brackets[i+1] ~= \">\" then\n     \
    \       result = false\n            break\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3t7phkcq.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3t7phkcq.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907438
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n      \
    \      result = false\n            break\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907438
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local function is_open_bracket(char)\n   \
    \     return char == \"(\" or char == \"[\" or char == \"{\"\n    end\n    local\
    \ function is_close_bracket(char)\n        return char == \")\" or char == \"\
    ]\" or char == \"}\"\n    end\n    local function is_balanced(brackets)\n    \
    \    local i = 1\n        while i <= #brackets do\n            if not is_open_bracket(brackets[i])\
    \ and not is_close_bracket(brackets[i]) then\n                return false\n \
    \           end\n            i = i + 1\n        end\n        return true\n   \
    \ end\n    return is_balanced(brackets)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppa7wl4tb.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppa7wl4tb.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907438
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local open_brackets = {'<', '>'}\n    local\
    \ close_brackets = {'<', '>'}\n    local i = 1\n    while i <= #brackets do\n\
    \        if brackets[i] == '<' then\n            if not (i + 1) in open_brackets\
    \ then\n                return false\n            else\n                open_brackets[i\
    \ + 1] = true\n            end\n        else\n            if not (i - 1) in close_brackets\
    \ then\n                return false\n            else\n                close_brackets[i\
    \ - 1] = true\n            end\n        end\n        i = i + 1\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9rlnqk90.lua:17: ''then'' expected near ''in''

    '
  stdout: ''
  timestamp: 1661907438
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local function is_opening_bracket(char)\n\
    \        return char == \"<\"\n    end\n    local function is_closing_bracket(char)\n\
    \        return char == \">\"\n    end\n    local function is_opening_bracket_or_closing_bracket(char)\n\
    \        return is_opening_bracket(char) or is_closing_bracket(char)\n    end\n\
    \    local function is_closing_bracket_or_opening_bracket(char)\n        return\
    \ is_closing_bracket(char) or is_opening_bracket(char)\n    end\n    local function\
    \ is_balanced(brackets)\n        local i = 1\n        while i <= #brackets do\n\
    \            if not is_opening_bracket_or_closing_bracket(brackets[i]) then\n\
    \                return false\n            end\n            i = i + 1\n      \
    \  end\n        return true\n    end\n    return is_balanced(brackets)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpruq8x5ek.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpruq8x5ek.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907438
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n      \
    \      result = false\n            break\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907438
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n      \
    \      result = false\n            break\n    end\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvyofec69.lua:38: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1661907438
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n      \
    \      result = false\n            break\n    end\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvyofec69.lua:38: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1661907438
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n      \
    \      result = false\n            break\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907438
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local open_brackets = {'<', '<>'}\n    local\
    \ close_brackets = {'>', '<>'}\n    local bracket_stack = {}\n    for _, char\
    \ in pairs(brackets) do\n        if char == '<' then\n            if bracket_stack.count('<')\
    \ == 0 then\n                bracket_stack['<'] = true\n            else\n   \
    \             bracket_stack['<'] = false\n            end\n        elseif char\
    \ == '>' then\n            if bracket_stack.count('>') == 0 then\n           \
    \     bracket_stack['>'] = true\n            else\n                bracket_stack['>']\
    \ = false\n            end\n        end\n    end\n    for _, open_bracket in pairs(open_brackets)\
    \ do\n        if not bracket_stack[open_bracket] then\n            return false\n\
    \        end\n    end\n    for _, close_bracket in pairs(close_brackets) do\n\
    \        if not bracket_stack[close_bracket] then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9hki5pfy.lua:15:\
    \ bad argument #1 to 'pairs' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmp9hki5pfy.lua:15: in local 'candidate'\n\t/tmp/tmp9hki5pfy.lua:46: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1661907438
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n      \
    \      result = false\n            break\n    end\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvyofec69.lua:38: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1661907438
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n      \
    \      result = false\n            break\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907438
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n      \
    \      result = false\n            break\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907438
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n      \
    \      result = false\n            break\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907438
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local open_brackets = {'<', '>'}\n    local\
    \ close_brackets = {'<', '>'}\n    local i = 1\n    while i <= #brackets do\n\
    \        if brackets[i] == '<' then\n            if not (i + 1) <= #brackets and\
    \ brackets[i + 1] == '>' then\n                return false\n            else\n\
    \                open_brackets = {brackets[i], brackets[i + 1]}\n            end\n\
    \        else\n            if not (i - 1) >= 1 and open_brackets[1] == brackets[i\
    \ - 1] then\n                close_brackets = {brackets[i - 1], brackets[i]}\n\
    \            end\n        end\n        i = i + 1\n    end\n    return #open_brackets\
    \ == #close_brackets\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphko6rmgd.lua:23:\
    \ attempt to compare number with boolean\nstack traceback:\n\t/tmp/tmphko6rmgd.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmphko6rmgd.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1661907438
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
    )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
    <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n      \
    \      result = false\n            break\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907438
