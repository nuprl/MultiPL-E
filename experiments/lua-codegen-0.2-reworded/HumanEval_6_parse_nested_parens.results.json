{
  "language": "lua",
  "name": "HumanEval_6_parse_nested_parens",
  "results": [
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_count = 0\n    local paren_stack = {}\n    local paren_stack_count = 0\n    local paren_stack_count_max = 0\n    local paren_stack_count_min = math.inf\n    local paren_stack_count_min_max = math.inf\n    local paren_stack_count_min_min = math.inf\n    local paren_stack_count_min_min_max = math.inf\n    local paren_stack_count_min_min_min = math.inf\n    local paren_stack_count_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_min_min_min = math.inf\n    local paren_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpa2dnpo6j.lua:40: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_index = 1\n    local paren_char = ''\n    local paren_char_count = 0\n    local paren_char_index = 1\n    local paren_char_count_stack = {}\n    local paren_char_index_stack = {}\n    local paren_char_stack = {}\n    local paren_char_stack_count = {}\n    local paren_char_stack_index = {}\n    local paren_char_stack_count_stack = {}\n    local paren_char_stack_index_stack = {}\n    local paren_char_stack_stack = {}\n    local paren_char_stack_stack_count = {}\n    local paren_char_stack_stack_index = {}\n    local paren_char_stack_stack_count_stack = {}\n    local paren_char_stack_stack_index_stack = {}\n    local paren_char_stack_stack_stack = {}\n    local paren_char_stack_stack_stack_count = {}\n    local paren_char_stack_stack_stack_index = {}\n    local paren_char_stack_stack_stack_count_stack = {}\n    local paren_char_stack_stack_stack_index_stack = {}\n    local paren_char_stack_stack_stack_stack = {}\n    local paren_char_stack_stack_stack_stack_count = {}\n    local paren_char_stack_stack_stack_stack_index = {}\n    local paren_char_stack_stack_stack_stack_stack = {}\n    local paren_char_stack_stack_stack_stack_stack_count = {}\n    local paren_char_stack_stack_stack_stack_stack_index = {}\n    local paren_char_stack_stack_stack_stack_stack_stack = {}\n    local paren_char_stack_stack_stack_stack_stack_stack_count = {}\n    local paren_char_stack_stack_stack_stack_stack_stack_index = {}\n    local paren_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp_odkwqb3.lua:50: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_string_index = 1\n    local paren_string_len = len(paren_string)\n    local paren_string_index_end = paren_string_len\n    local paren_string_index_start = 0\n    local paren_string_index_end_start = 0\n    local paren_string_index_start_end = 0\n    local paren_string_index_start_end_end = 0\n    local paren_string_index_start_end_end_end = 0\n    local paren_string_index_start_end_end_end_end = 0\n    local paren_string_index_start_end_end_end_end_end = 0\n    local paren_string_index_start_end_end_end_end_end_end = 0\n    local paren_string_index_start_end_end_end_end_end_end_end = 0\n    local paren_string_index_start_end_end_end_end_end_end_end_end = 0\n    local paren_string_index_start_end_end_end_end_end_end_end_end_end = 0\n    local paren_string_index_start_end_end_end_end_end_end_end_end_end_end = 0\n    local paren_string_index_start_end_end_end_end_end_end_end_end_end_end_end = 0\n    local paren_string_index_start_end_end_end_end_end_end_end_end_end_end_end_end = 0\n    local paren_string_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end = 0\n    local paren_string_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0\n    local paren_string_index_start_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpuhn858hf.lua:40: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 1\n    local paren_stack_size = 0\n    local paren_stack_max = 0\n    local paren_stack_max_index = 0\n    local paren_stack_max_size = 0\n    local paren_stack_max_max = 0\n    local paren_stack_max_max_index = 0\n    local paren_stack_max_max_size = 0\n    local paren_stack_max_max_max = 0\n    local paren_stack_max_max_max_index = 0\n    local paren_stack_max_max_max_size = 0\n    local paren_stack_max_max_max_max = 0\n    local paren_stack_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max = 0\n    local paren_stack_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max = 0\n    local paren_stack_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max_max = 0\n    local paren_stack_max_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max_max_max = 0\n    local paren_stack_max_max_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_max_max_size = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpl9o28szz.lua:45: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_stack_index = 0\n    local paren_stack_count = 0\n    local paren_stack_depth = 0\n    local paren_stack_index_count = 0\n    local paren_stack_depth_count = 0\n    local paren_stack_depth_index = 0\n    local paren_stack_depth_index_count = 0\n    local paren_stack_depth_index_count_count = 0\n    local paren_stack_depth_index_count_count_count = 0\n    local paren_stack_depth_index_count_count_count_count = 0\n    local paren_stack_depth_index_count_count_count_count_count = 0\n    local paren_stack_depth_index_count_count_count_count_count_count = 0\n    local paren_stack_depth_index_count_count_count_count_count_count_count = 0\n    local paren_stack_depth_index_count_count_count_count_count_count_count_count = 0\n    local paren_stack_depth_index_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_depth_index_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_depth_index_count_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_depth_index_count_count_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_depth_index_count_count_count_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_depth_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_depth_index_count_count_count_count_count_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp96g7zc7v.lua:40: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n            paren_count = paren_count + 1\n            if paren_stacknlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpyg2u8m63.lua:14: ']' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        resultnlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp64_4yv1_.lua:10: ']' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_count = 0\n    local paren_stack_max = 0\n    local paren_stack_max_index = 0\n    local paren_stack_max_count = 0\n    local paren_stack_max_count_index = 0\n    local paren_stack_max_count_count = 0\n    local paren_stack_max_count_count_index = 0\n    local paren_stack_max_count_count_count = 0\n    local paren_stack_max_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpncqgkefu.lua:43: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmprid48a_k.lua:10: ']' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmprid48a_k.lua:10: ']' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmprid48a_k.lua:10: ']' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmprid48a_k.lua:10: ']' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp752n33v4.lua:10: ']' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n            if paren_stack[#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpcarn_i9q.lua:14: ']' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    for i = 1,#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp8ww_7dn1.lua:12: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    local paren_stack = {}\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpnl50y5hk.lua:10: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?)')) do\n        result[#                                                                                                                                                      \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp89032yvh.lua:10: ']' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmprid48a_k.lua:10: ']' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_size = 0\n    local paren_stack_max = 0\n    local paren_stack_max_index = 0\n    local paren_stack_max_size = 0\n    local paren_stack_max_max = 0\n    local paren_stack_max_max_index = 0\n    local paren_stack_max_max_size = 0\n    local paren_stack_max_max_max = 0\n    local paren_stack_max_max_max_index = 0\n    local paren_stack_max_max_max_size = 0\n    local paren_stack_max_max_max_max = 0\n    local paren_stack_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max = 0\n    local paren_stack_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max = 0\n    local paren_stack_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max_max = 0\n    local paren_stack_max_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max_max_max = 0\n    local paren_stack_max_max_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_max_max_size = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpqs1mc0sn.lua:45: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_count = 0\n    local paren_stack_index_count = 0\n    local paren_stack_count_count = 0\n    local paren_stack_count_index = 0\n    local paren_stack_count_index_count = 0\n    local paren_stack_count_index_count_count = 0\n    local paren_stack_count_index_count_index = 0\n    local paren_stack_count_index_count_index_count = 0\n    local paren_stack_count_index_count_index_count_count = 0\n    local paren_stack_count_index_count_index_count_index = 0\n    local paren_stack_count_index_count_index_count_index_count = 0\n    local paren_stack_count_index_count_index_count_index_count_count = 0\n    local paren_stack_count_index_count_index_count_index_count_index = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count_count = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count_index = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count_index_count = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count_index_count_count = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count_index_count_index = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count_index_count_index_count = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp3qdi6n0m.lua:41: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    for i = 1,#paren_string,1 do\n        if paren_string[i] == '(' then\n            if paren_stack_index == paren_count then\n                paren_stack[paren_count] = paren_level\n                paren_count = paren_count + 1\n            end\n            paren_level = paren_level + 1\n            paren_stack_index = paren_stack_index + 1\n        elseif paren_string[i] == ')' then\n            if paren_stack_index == paren_count then\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "lua: /tmp/tmpz1eg26xq.lua:50: ']' expected near '='\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_count = 0\n    local paren_stack_level = 0\n    local paren_stack_string = ''\n    local paren_stack_string_count = 0\n    local paren_stack_string_level = 0\n    local paren_stack_string_string = ''\n    local paren_stack_string_string_count = 0\n    local paren_stack_string_string_level = 0\n    local paren_stack_string_string_string = ''\n    local paren_stack_string_string_string_count = 0\n    local paren_stack_string_string_string_level = 0\n    local paren_stack_string_string_string_string = ''\n    local paren_stack_string_string_string_string_count = 0\n    local paren_stack_string_string_string_string_level = 0\n    local paren_stack_string_string_string_string_string = ''\n    local paren_stack_string_string_string_string_string_count = 0\n    local paren_stack_string_string_string_string_string_level = 0\n    local paren_stack_string_string_string_string_string_string = ''\n    local paren_stack_string_string_string_string_string_string_count = 0\n    local paren_stack_string_string_string_string_string_string_level = 0\n    local paren_stack_string_string_string_string_string_string_string = ''\n    local paren_stack_string_string_string_string_string_string_string_count = 0\n    local paren_stack_string_string_string_string_string_string_string_level = 0\n    local paren_stack_string_string_string_string_string_string_string_string = ''\n    local paren_stack_string_string_string_string_string_string_string_string_count = 0\n    local paren_stack_string_string_string_string_string_string_string_string_level = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "lua: /tmp/tmp_p35gdsu.lua:45: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_size = 0\n    local paren_stack_max = 0\n    local paren_stack_max_index = 0\n    local paren_stack_max_size = 0\n    local paren_stack_max_max = 0\n    local paren_stack_max_max_index = 0\n    local paren_stack_max_max_size = 0\n    local paren_stack_max_max_max = 0\n    local paren_stack_max_max_max_index = 0\n    local paren_stack_max_max_max_size = 0\n    local paren_stack_max_max_max_max = 0\n    local paren_stack_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max = 0\n    local paren_stack_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max = 0\n    local paren_stack_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max_max = 0\n    local paren_stack_max_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max_max_max = 0\n    local paren_stack_max_max_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_max_max_size = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpqs1mc0sn.lua:45: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_size = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "lua: /tmp/tmpvtfwg4q4.lua:21: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    local paren_stack = {}\n    for i=1,#paren_string,2 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack] == 0 then\n                result[#result+1] = i\n            end\n            paren_stack[#paren_stack+1] = i\n        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack] > 0 then\n                paren_stack[#paren_stack] = paren_stack[#paren_stack]-1\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprr26j5iv.lua:27: expected: {2, 3, 1, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmprr26j5iv.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_string_index = 1\n    local paren_string_length = len(paren_string)\n    local paren_string_length_index = 1\n    local paren_string_length_length = len(paren_string_length)\n    local paren_string_length_length_index = 1\n    local paren_string_length_length_length = len(paren_string_length_length)\n    local paren_string_length_length_length_index = 1\n    local paren_string_length_length_length_length = len(paren_string_length_length_length)\n    local paren_string_length_length_length_length_index = 1\n    local paren_string_length_length_length_length_length = len(paren_string_length_length_length_length)\n    local paren_string_length_length_length_length_length_index = 1\n    local paren_string_length_length_length_length_length_length = len(paren_string_length_length_length_length_length)\n    local paren_string_length_length_length_length_length_length_index = 1\n    local paren_string_length_length_length_length_length_length_length = len(paren_string_length_length_length_length_length_length)\n    local paren_string_length_length_length_length_length_length_length_index = 1\n    local paren_string_length_length_length_length_length_length_length_length = len(paren_string_length_length_length_length_length_length_length)\n    local paren_string_length_length_length_length_length_length_length_length_index = 1\n    local paren_string_length_length_length_length_length_length_length_length_length = len(paren_string_length_length_length_length_length_length_length_length)\n    local paren_string_length\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "lua: /tmp/tmp8hbq11zv.lua:40: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for i = 1, #paren_string, 2 do\n        local paren_count = 0\n        for j = i, #paren_string, 2 do\n            if paren_string[j] == '(' then\n                paren_count = paren_count + 1\n            elseif paren_string[j] == ')' then\n                paren_count = paren_count - 1\n            end\n            if paren_count == 0 then\n                break\n        end\n        if paren_count > 0 then\n            result[#result + 1] = paren_count\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "lua: /tmp/tmpxxdunm4j.lua:34: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_size = 0\n    local paren_stack_max = 0\n    local paren_stack_min = 0\n    local paren_stack_max_index = 0\n    local paren_stack_min_index = 0\n    local paren_stack_max_size = 0\n    local paren_stack_min_size = 0\n    local paren_stack_max_size_index = 0\n    local paren_stack_min_size_index = 0\n    local paren_stack_max_size_size = 0\n    local paren_stack_min_size_size = 0\n    local paren_stack_max_size_size_index = 0\n    local paren_stack_min_size_size_index = 0\n    local paren_stack_max_size_size_size = 0\n    local paren_stack_min_size_size_size = 0\n    local paren_stack_max_size_size_size_index = 0\n    local paren_stack_min_size_size_size_index = 0\n    local paren_stack_max_size_size_size_size = 0\n    local paren_stack_min_size_size_size_size = 0\n    local paren_stack_max_size_size_size_size_index = 0\n    local paren_stack_min_size_size_size_size_index = 0\n    local paren_stack_max_size_size_size_size_size = 0\n    local paren_stack_min_size_size_size_size_size = 0\n    local paren_stack_max_size_size_size_size_size_index = 0\n    local paren_stack_min_size_size_size_size_size_index = 0\n    local paren_stack_max_size_size_size_size_size_size = 0\n    local paren_stack_min_size_size_size_size_size_size = 0\n    local paren_stack_max_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "lua: /tmp/tmp5c5rlp3z.lua:48: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_index = 1\n    local paren_char = ''\n    local paren_char_count = 0\n    local paren_char_index = 1\n    local paren_char_count_stack = {}\n    local paren_char_index_stack = {}\n    local paren_char_stack = {}\n    local paren_char_stack_index = 0\n    local paren_char_stack_count = 0\n    local paren_char_stack_index_stack = {}\n    local paren_char_stack_count_stack = {}\n    local paren_char_stack_stack = {}\n    local paren_char_stack_stack_index = 0\n    local paren_char_stack_stack_count = 0\n    local paren_char_stack_stack_index_stack = {}\n    local paren_char_stack_stack_count_stack = {}\n    local paren_char_stack_stack_stack = {}\n    local paren_char_stack_stack_index_stack = {}\n    local paren_char_stack_stack_count_stack = {}\n    local paren_char_stack_stack_stack_index = 0\n    local paren_char_stack_stack_stack_count = 0\n    local paren_char_stack_stack_stack_index_stack = {}\n    local paren_char_stack_stack_stack_count_stack = {}\n    local paren_char_stack_stack_stack_stack = {}\n    local paren_char_stack_stack_stack_index_stack = {}\n    local paren_char_stack_stack_stack_count_stack = {}\n    local paren_char_stack_stack_stack_stack = {}\n    local paren_char_stack_stack_stack_index_stack = {}\n    local paren_char_stack_stack_stack_count_stack = {}\n    local paren_char_stack_stack_stack_stack = {}\n    local paren_char_stack_stack_stack_index_stack = {}\n    local paren_char_stack\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "lua: /tmp/tmp8r3b81sr.lua:51: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    local paren_stack = {}\n    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack] == 0 then\n                result[#result + 1] = i - 1\n            end\n            paren_stack[#paren_stack + 1] = i\n        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack] > 0 then\n                paren_stack[#paren_stack] = paren_stack[#paren_stack] - 1\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl7j6m89c.lua:27: expected: {2, 3, 1, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmpl7j6m89c.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_size = 0\n    local paren_stack_max = 0\n    local paren_stack_min = 0\n    local paren_stack_max_index = 0\n    local paren_stack_min_index = 0\n    local paren_stack_max_size = 0\n    local paren_stack_min_size = 0\n    local paren_stack_max_size_index = 0\n    local paren_stack_min_size_index = 0\n    local paren_stack_max_size_size = 0\n    local paren_stack_min_size_size = 0\n    local paren_stack_max_size_size_index = 0\n    local paren_stack_min_size_size_index = 0\n    local paren_stack_max_size_size_size = 0\n    local paren_stack_min_size_size_size = 0\n    local paren_stack_max_size_size_size_index = 0\n    local paren_stack_min_size_size_size_index = 0\n    local paren_stack_max_size_size_size_size = 0\n    local paren_stack_min_size_size_size_size = 0\n    local paren_stack_max_size_size_size_size_index = 0\n    local paren_stack_min_size_size_size_size_index = 0\n    local paren_stack_max_size_size_size_size_size = 0\n    local paren_stack_min_size_size_size_size_size = 0\n    local paren_stack_max_size_size_size_size_size_index = 0\n    local paren_stack_min_size_size_size_size_size_index = 0\n    local paren_stack_max_size_size_size_size_size_size = 0\n    local paren_stack_min_size_size_size_size_size_size = 0\n    local paren_stack_max_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "lua: /tmp/tmp5c5rlp3z.lua:48: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    for i=1,#paren_string,2 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack] == 0 then\n                paren_stack[#paren_stack] = 1\n            else\n                paren_stack[#paren_stack] = 0\n            end\n            paren_count = paren_count + 1\n            paren_level = paren_stack[#paren_stack]\n            paren_string = paren_string[i+1]\n        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack] == 1 then\n                paren_stack[#paren_stack] = 0\n            else\n                paren_stack[#paren_stack] = 1\n            end\n            paren_count = paren_count - 1\n            paren_level = paren_stack[#paren_stack]\n            paren_string = paren_string[i+1]\n        end\n    end\n    return paren_count, paren_level\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_index = 1\n    local paren_start = 1\n    local paren_end = 0\n    local paren_string_length = len(paren_string)\n    local paren_string_index = 1\n    local paren_string_length_index = 1\n    local paren_string_index_index = 1\n    local paren_string_index_length = 0\n    local paren_string_index_length_index = 1\n    local paren_string_index_length_length = 0\n    local paren_string_index_length_length_index = 1\n    local paren_string_index_length_length_length = 0\n    local paren_string_index_length_length_length_index = 1\n    local paren_string_index_length_length_length_length = 0\n    local paren_string_index_length_length_length_length_index = 1\n    local paren_string_index_length_length_length_length_length = 0\n    local paren_string_index_length_length_length_length_length_index = 1\n    local paren_string_index_length_length_length_length_length_length = 0\n    local paren_string_index_length_length_length_length_length_length_index = 1\n    local paren_string_index_length_length_length_length_length_length_length = 0\n    local paren_string_index_length_length_length_length_length_length_length_index = 1\n    local paren_string_index_length_length_length_length_length_length_length_length = 0\n    local paren_string_index_length_length_length_length_length_length_length_length_index = 1\n    local paren_string_index_length_length_length_length_length_length_length_length_length = 0\n    local paren_string_index_length_length_length_length_length_length_length_length_length_index = 1\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "lua: /tmp/tmpq9evx5yf.lua:46: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_string_index = 1\n    local paren_string_count = 0\n    local paren_string_depth = 0\n    local paren_string_stack = {}\n    local paren_string_stack_index = 1\n    local paren_string_stack_count = 0\n    local paren_string_stack_depth = 0\n    local paren_string_stack_stack = {}\n    local paren_string_stack_stack_index = 1\n    local paren_string_stack_stack_count = 0\n    local paren_string_stack_stack_depth = 0\n    local paren_string_stack_stack_stack = {}\n    local paren_string_stack_stack_stack_index = 1\n    local paren_string_stack_stack_stack_count = 0\n    local paren_string_stack_stack_stack_depth = 0\n    local paren_string_stack_stack_stack_stack = {}\n    local paren_string_stack_stack_stack_stack_index = 1\n    local paren_string_stack_stack_stack_stack_count = 0\n    local paren_string_stack_stack_stack_stack_depth = 0\n    local paren_string_stack_stack_stack_stack_stack = {}\n    local paren_string_stack_stack_stack_stack_stack_index = 1\n    local paren_string_stack_stack_stack_stack_stack_count = 0\n    local paren_string_stack_stack_stack_stack_stack_depth = 0\n    local paren_string_stack_stack_stack_stack_stack_stack = {}\n    local paren_string_stack_stack_stack_stack_stack_stack_index = 1\n    local paren_string_stack_stack_stack_stack_stack_stack_count = 0\n    local paren_string_stack_stack_stack_stack_stack_stack_depth = 0\n    local paren_string_stack_stack_stack_stack\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "lua: /tmp/tmp5yriu0se.lua:49: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_stack_index = 1\n    local paren_stack_count = 0\n    local paren_stack_depth = 0\n    local paren_stack_string = ''\n    local paren_stack_index = 1\n    local paren_stack_count = 0\n    local paren_stack_depth = 0\n    local paren_stack_string = ''\n    local paren_stack_index = 1\n    local paren_stack_count = 0\n    local paren_stack_depth = 0\n    local paren_stack_string = ''\n    local paren_stack_index = 1\n    local paren_stack_count = 0\n    local paren_stack_depth = 0\n    local paren_stack_string = ''\n    local paren_stack_index = 1\n    local paren_stack_count = 0\n    local paren_stack_depth = 0\n    local paren_stack_string = ''\n    local paren_stack_index = 1\n    local paren_stack_count = 0\n    local paren_stack_depth = 0\n    local paren_stack_string = ''\n    local paren_stack_index = 1\n    local paren_stack_count = 0\n    local paren_stack_depth = 0\n    local paren_stack_string = ''\n    local paren_stack_index = 1\n    local paren_stack_count = 0\n    local paren_stack_depth = 0\n    local paren_stack_string = ''\n    local paren_stack_index = 1\n    local paren_stack_count = 0\n    local paren_stack_depth = 0\n    local paren_stack_string = ''\n    local paren_stack_index = 1\n    local paren_stack_count = 0\n    local paren_stack_depth = 0\n    local paren_stack_string = ''\n    local paren_stack_index = 1\n    local paren_stack_count = 0\n    local paren_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "lua: /tmp/tmpnrhhsaxy.lua:64: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_count = 0\n    local paren_stack = {}\n    local paren_stack_count = 0\n    local paren_stack_count_max = 0\n    local paren_stack_count_min = 0\n    local paren_stack_count_min_max = 0\n    local paren_stack_count_min_min = 0\n    local paren_stack_count_min_min_max = 0\n    local paren_stack_count_min_min_min = 0\n    local paren_stack_count_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "lua: /tmp/tmprrxfbpx9.lua:41: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_count = 0\n    local paren_stack_max = 0\n    local paren_stack_max_index = 0\n    local paren_stack_max_count = 0\n    local paren_stack_max_count_index = 0\n    local paren_stack_max_count_count = 0\n    local paren_stack_max_count_count_index = 0\n    local paren_stack_max_count_count_count = 0\n    local paren_stack_max_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpncqgkefu.lua:43: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_count = 0\n    local paren_stack_max = 0\n    local paren_stack_max_index = 0\n    local paren_stack_max_count = 0\n    local paren_stack_max_count_index = 0\n    local paren_stack_max_count_count = 0\n    local paren_stack_max_count_count_index = 0\n    local paren_stack_max_count_count_count = 0\n    local paren_stack_max_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpncqgkefu.lua:43: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    local paren_stack = {}\n    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n            if not paren_stack[#paren_stack] then\n                paren_stack[#paren_stack] = 1\n            else\n                paren_stack[#paren_stack] = paren_stack[#paren_stack] + 1\n            end\n        else\n            if paren_stack[#paren_stack] then\n                if paren_stack[#paren_stack] == 1 then\n                    result[#result + 1] = i - 1\n                end\n                paren_stack[#paren_stack] = paren_stack[#paren_stack] - 1\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr8ncpiwm.lua:31: expected: {2, 3, 1, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmpr8ncpiwm.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n            paren_count = paren_count + 1\n            if paren_count > paren_level then\n                paren_level = paren_count\n            end\n        elseif paren_string[i] == ')' then\n            paren_count = paren_count - 1\n            if paren_count < paren_level then\n                paren_level = paren_count\n            end\n        end\n    end\n    return paren_stack[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp89pler34.lua:29: expected: {2, 3, 1, 3}\nactual: nil\nstack traceback:\n\t/tmp/tmp89pler34.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    local paren_stack = {}\n    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack] == 0 then\n                result[#result + 1] = i - 1\n            end\n            paren_stack[#paren_stack] = #paren_stack + 1\n        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack] == 1 then\n                result[#result + 1] = i - 1\n            end\n            paren_stack[#paren_stack] = #paren_stack - 1\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpim3qr5qu.lua:28: expected: {2, 3, 1, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmpim3qr5qu.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?)')) do\n        local depth = 0\n        for _, paren in ipairs(group) do\n            if paren == '(' then depth = depth + 1\n            elseif paren == ')' then depth = depth - 1\n        end\n        result[depth] = result[depth] + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "lua: /tmp/tmpe008_0en.lua:27: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result+1] = #group\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_groups = {}\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 0\n    local paren_start = 0\n    local paren_end = 0\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 0\n    local paren_start = 0\n    local paren_end = 0\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 0\n    local paren_start = 0\n    local paren_end = 0\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 0\n    local paren_start = 0\n    local paren_end = 0\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 0\n    local paren_start = 0\n    local paren_end = 0\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 0\n    local paren_start = 0\n    local paren_end = 0\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 0\n    local paren_start = 0\n    local paren_end = 0\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 0\n    local paren_start = 0\n    local paren_end = 0\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 0\n    local paren_start = 0\n    local paren_end = 0\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 0\n    local paren_start = 0\n    local paren_end = 0\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 0\n    local paren_start = 0\n    local paren_end = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "lua: /tmp/tmp_ic2o9is.lua:73: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 1\n    local paren_stack_size = 0\n    local paren_stack_max = 0\n    local paren_stack_max_index = 0\n    local paren_stack_max_size = 0\n    local paren_stack_max_size_index = 0\n    local paren_stack_max_size_size = 0\n    local paren_stack_max_size_size_index = 0\n    local paren_stack_max_size_size_size = 0\n    local paren_stack_max_size_size_size_index = 0\n    local paren_stack_max_size_size_size_size = 0\n    local paren_stack_max_size_size_size_size_index = 0\n    local paren_stack_max_size_size_size_size_size = 0\n    local paren_stack_max_size_size_size_size_size_index = 0\n    local paren_stack_max_size_size_size_size_size_size = 0\n    local paren_stack_max_size_size_size_size_size_size_index = 0\n    local paren_stack_max_size_size_size_size_size_size_size = 0\n    local paren_stack_max_size_size_size_size_size_size_size_index = 0\n    local paren_stack_max_size_size_size_size_size_size_size_size = 0\n    local paren_stack_max_size_size_size_size_size_size_size_size_index = 0\n    local paren_stack_max_size_size_size_size_size_size_size_size_size = 0\n    local paren_stack_max_size_size_size_size_size_size_size_size_size_index = 0\n    local paren_stack_max_size_size_size_size_size_size_size_size_size_size = 0\n    local paren_stack_max_size_size\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "lua: /tmp/tmpcsktzz5m.lua:43: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_string_index = 1\n    local paren_string_len = len(paren_string)\n    local paren_string_index_end = paren_string_len\n    local paren_stack_index = 1\n    local paren_stack_len = 0\n    local paren_stack_index_end = 0\n    local paren_stack_index_start = 1\n    local paren_stack_len_end = 0\n    local paren_stack_index_start_end = 0\n    local paren_stack_len_start = 0\n    local paren_stack_index_start_end_end = 0\n    local paren_stack_len_start_end = 0\n    local paren_stack_index_start_end_end_end = 0\n    local paren_stack_len_start_end_end = 0\n    local paren_stack_index_start_end_end_end = 0\n    local paren_stack_len_start_end_end = 0\n    local paren_stack_index_start_end_end_end = 0\n    local paren_stack_len_start_end_end = 0\n    local paren_stack_index_start_end_end_end = 0\n    local paren_stack_len_start_end_end = 0\n    local paren_stack_index_start_end_end_end = 0\n    local paren_stack_len_start_end_end = 0\n    local paren_stack_index_start_end_end_end = 0\n    local paren_stack_len_start_end_end = 0\n    local paren_stack_index_start_end_end_end = 0\n    local paren_stack_len_start_end_end = 0\n    local paren_stack_index_start_end_end_end = 0\n    local paren_stack_len_start_end_end = 0\n    local paren_stack_index_start_end_end_end = 0\n    local p\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "lua: /tmp/tmpadv2pzdz.lua:50: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack] == 0 then\n                paren_stack[#paren_stack] = 1\n                paren_count = paren_count + 1\n            end\n            if paren_stack[#paren_stack] == 1 then\n                paren_stack[#paren_stack] = 2\n                paren_level = paren_level + 1\n            end\n        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack] == 2 then\n                paren_stack[#paren_stack] = 1\n                paren_level = paren_level - 1\n            end\n            if paren_stack[#paren_stack] == 1 then\n                if paren_level == 0 then\n                    paren_count = paren_count - 1\n                    if paren_count == 0 then\n                        return paren_stack[1]\n                    end\n                end\n            end\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmiti_yf2.lua:42: expected: {2, 3, 1, 3}\nactual: nil\nstack traceback:\n\t/tmp/tmpmiti_yf2.lua:42: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    local paren_stack = {}\n    for i = 1,#paren_string,2 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack] == 0 then\n                result[#result+1] = i\n            end\n            paren_stack[#paren_stack+1] = #paren_stack\n        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack] > 0 then\n                paren_stack[#paren_stack] = paren_stack[#paren_stack]-1\n            end\n        end\n    end\n    for i = 1,#paren_stack,1 do\n        if paren_stack[i] > 0 then\n            result[#result+1] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc5i95y2d.lua:32: expected: {2, 3, 1, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmpc5i95y2d.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_size = 0\n    local paren_stack_max = 0\n    local paren_stack_min = math.inf\n    local paren_stack_max_index = 0\n    local paren_stack_min_index = 0\n    local paren_stack_min_size = math.inf\n    local paren_stack_min_max_index = 0\n    local paren_stack_min_max_size = math.inf\n    local paren_stack_min_max_index_size = math.inf\n    local paren_stack_min_max_size_index = 0\n    local paren_stack_min_max_size_size = math.inf\n    local paren_stack_min_max_size_index_size = 0\n    local paren_stack_min_max_size_size_index = 0\n    local paren_stack_min_max_size_size_size = math.inf\n    local paren_stack_min_max_size_size_index_size = 0\n    local paren_stack_min_max_size_size_size_index = 0\n    local paren_stack_min_max_size_size_size_size = math.inf\n    local paren_stack_min_max_size_size_size_index_size = 0\n    local paren_stack_min_max_size_size_size_size_index = 0\n    local paren_stack_min_max_size_size_size_size_size = math.inf\n    local paren_stack_min_max_size_size_size_size_index_size = 0\n    local paren_stack_min_max_size_size_size_size_size_index = 0\n    local paren_stack_min_max_size_size_size_size_size_size = math.inf\n    local paren_stack_min_max_size_size_size_size_size_index_size = 0\n    local paren_stack_min_max_size\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "lua: /tmp/tmpnof71wt3.lua:45: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack_index = 0\n    local paren_stack_count = 0\n    local paren_stack_level = 0\n    local paren_stack_string = ''\n    local paren_stack_index_count = 0\n    local paren_stack_index_level = 0\n    local paren_stack_index_string = ''\n    local paren_stack_index_count_level = 0\n    local paren_stack_index_count_level_string = ''\n    local paren_stack_index_count_level_string_count = 0\n    local paren_stack_index_count_level_string_count_string = ''\n    local paren_stack_index_count_level_string_count_string_count = 0\n    local paren_stack_index_count_level_string_count_string_count_string = ''\n    local paren_stack_index_count_level_string_count_string_count_string_count = 0\n    local paren_stack_index_count_level_string_count_string_count_string_count_string = ''\n    local paren_stack_index_count_level_string_count_string_count_string_count_string_count = 0\n    local paren_stack_index_count_level_string_count_string_count_string_count_string_count_string = ''\n    local paren_stack_index_count_level_string_count_string_count_string_count_string_count_string_count = 0\n    local paren_stack_index_count_level_string_count_string_count_string_count_string_count_string_count_string = ''\n    local paren_stack_index_count_level_string_count_string_count_string_count_string_count_string_count_string_count_string = ''\n    local paren_stack_index_count_level_string_count_string_count_string_count_string_count_string_count_string_count_string_count\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "lua: /tmp/tmpt7k9ekuj.lua:41: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    for i = 1,#paren_string,2 do\n        if paren_string[i] == '(' then\n            paren_count = paren_count + 1\n            paren_stack[paren_count] = paren_level\n            paren_level = paren_level + 1\n        elseif paren_string[i] == ')' then\n            paren_level = paren_level - 1\n            if paren_level < 0 then\n                error('unbalanced parentheses')\n            end\n            if paren_count > 0 then\n                paren_count = paren_count - 1\n                if paren_count < 0 then\n                    error('unbalanced parentheses')\n                end\n                if paren_count == 0 then\n                    if paren_level > 0 then\n                        error('unbalanced parentheses')\n                    end\n                    return paren_stack[1]\n                end\n            end\n        end\n        paren_string = paren_string:sub(i+1,#paren_string)\n    end\n    error('unbalanced parentheses')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoyt0v3ky.lua:36: unbalanced parentheses\nstack traceback:\n\t/tmp/tmpoyt0v3ky.lua:36: in local 'candidate'\n\t/tmp/tmpoyt0v3ky.lua:42: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    for i = 1,#paren_string,1 do\n        if paren_string[i] == '(' then\n            if paren_stack_index == #paren_stack then\n                paren_stack[#paren_stack] = paren_count\n                paren_stack_index = #paren_stack\n                paren_count = 0\n            end\n            paren_count = paren_count + 1\n            paren_stack_index = paren_stack_index + 1\n        elseif paren_string[i] == ')' then\n            if paren_stack_index == 1 then\n                return paren_stack[1]\n            end\n            paren_count = paren_count - 1\n            if paren_count < 0 then\n                return nil\n            end\n            paren_stack_index = paren_stack_index - 1\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdrcfa5a6.lua:36: expected: {2, 3, 1, 3}\nactual: nil\nstack traceback:\n\t/tmp/tmpdrcfa5a6.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_string_index = 1\n    local paren_string_length = len(paren_string)\n    local paren_string_index_end = paren_string_index + 1\n    local paren_string_index_start = paren_string_index + 1\n    while paren_string_index < paren_string_length do\n        if paren_string[paren_string_index] == '(' then\n            if paren_string[paren_string_index_end] == ')' then\n                -- This is a single level of nesting.\n                -- Add it to the stack.\n                -- Increment the count.\n                -- Increment the level.\n                -- Increment the index.\n                -- Increment the length.\n                -- Increment the index end.\n                -- Increment the index start.\n                -- Increment the string.\n                -- Increment the string index.\n                -- Increment the string length.\n                -- Increment the string index end.\n                -- Increment the string index start.\n                -- Increment the string.\n                -- Increment the string index.\n                -- Increment the string length.\n                -- Increment the string index end.\n                -- Increment the string index start.\n                -- Increment the string.\n                -- Increment the string index.\n                -- Increment the string length.\n                -- Increment the string index end.\n                -- Increment the string index start.\n                -- Increment the string.\n                -- Increment the string index.\n                -- Increment the string length.\n                -- Increment the string index end.\n                -- Increment the string index start.\n                -- Increment the string.\n                -- Increment the string index.\n                -- Increment the string length.\n                -- Increment the string index end.\n                -- Increment the string index start.\n                -- Increment the string.\n                -- Increment the string index.\n                -- Increment the string length.\n                -- Increment the string index end.\n                -- Increment the string index start.\n                -- Increment the string.\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "lua: /tmp/tmpnq9_lgct.lua:67: 'end' expected (to close 'if' at line 17) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for i = 1, #paren_string, 2 do\n        local paren_count = 0\n        local paren_level = 0\n        for j = i, #paren_string, 2 do\n            if paren_string[j] == '(' then\n                paren_count = paren_count + 1\n                if paren_count > paren_level then\n                    paren_level = paren_count\n                end\n            elseif paren_string[j] == ')' then\n                paren_count = paren_count - 1\n                if paren_count < paren_level then\n                    paren_level = paren_count\n                end\n            end\n        end\n        result[#result + 1] = paren_level\n        i = i + 2\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu7iv150y.lua:33: expected: {2, 3, 1, 3}\nactual: {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}\nstack traceback:\n\t/tmp/tmpu7iv150y.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_size = 0\n    local paren_stack_max = 0\n    local paren_stack_max_index = 0\n    local paren_stack_max_size = 0\n    local paren_stack_max_max = 0\n    local paren_stack_max_max_index = 0\n    local paren_stack_max_max_size = 0\n    local paren_stack_max_max_max = 0\n    local paren_stack_max_max_max_index = 0\n    local paren_stack_max_max_max_size = 0\n    local paren_stack_max_max_max_max = 0\n    local paren_stack_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max = 0\n    local paren_stack_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max = 0\n    local paren_stack_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max_max = 0\n    local paren_stack_max_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max_max_max = 0\n    local paren_stack_max_max_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_max_max_size = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpqs1mc0sn.lua:45: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_count = 0\n    local paren_stack_max = 0\n    local paren_stack_max_index = 0\n    local paren_stack_max_count = 0\n    local paren_stack_max_count_index = 0\n    local paren_stack_max_count_count = 0\n    local paren_stack_max_count_count_index = 0\n    local paren_stack_max_count_count_count = 0\n    local paren_stack_max_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpncqgkefu.lua:43: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    local paren_stack = {}\n    local paren_count = 0\n    for i=1,#paren_string,2 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack] == 0 then\n                paren_stack[#paren_stack] = 1\n            end\n            paren_count = paren_count + 1\n        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack] == 1 then\n                result[#result + 1] = paren_count\n                paren_stack[#paren_stack] = 0\n            end\n            paren_count = paren_count - 1\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_stack_index = 0\n    local paren_stack_count = 0\n    local paren_stack_depth = 0\n    local paren_stack_index_count = 0\n    local paren_stack_count_count = 0\n    local paren_stack_depth_count = 0\n    local paren_stack_index_depth = 0\n    local paren_stack_count_depth = 0\n    local paren_stack_depth_depth = 0\n    local paren_stack_index_depth_depth = 0\n    local paren_stack_count_depth_depth = 0\n    local paren_stack_depth_depth_depth = 0\n    local paren_stack_index_depth_depth_depth = 0\n    local paren_stack_count_depth_depth_depth = 0\n    local paren_stack_depth_depth_depth_depth = 0\n    local paren_stack_index_depth_depth_depth_depth = 0\n    local paren_stack_count_depth_depth_depth_depth = 0\n    local paren_stack_depth_depth_depth_depth_depth = 0\n    local paren_stack_index_depth_depth_depth_depth_depth = 0\n    local paren_stack_count_depth_depth_depth_depth_depth = 0\n    local paren_stack_depth_depth_depth_depth_depth_depth = 0\n    local paren_stack_index_depth_depth_depth_depth_depth_depth = 0\n    local paren_stack_count_depth_depth_depth_depth_depth_depth = 0\n    local paren_stack_depth_depth_depth_depth_depth_depth_depth = 0\n    local paren_stack_index_depth_depth_depth_depth_depth_depth_depth = 0\n    local paren_stack_count_depth_depth_depth_depth_depth_depth_depth = 0\n    local paren_stack_depth_depth_depth_depth_depth_depth_depth_depth = 0\n    local paren_stack_index_depth_depth_depth\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "lua: /tmp/tmptci0b2q4.lua:47: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_count = 0\n    local paren_stack_count_max = 0\n    local paren_stack_count_min = math.inf\n    local paren_stack_count_min_index = 0\n    local paren_stack_count_min_index_max = 0\n    local paren_stack_count_min_index_min = math.inf\n    local paren_stack_count_min_index_min_index = 0\n    local paren_stack_count_min_index_min_index_max = 0\n    local paren_stack_count_min_index_min_index_min = math.inf\n    local paren_stack_count_min_index_min_index_min_index = 0\n    local paren_stack_count_min_index_min_index_min_index_max = 0\n    local paren_stack_count_min_index_min_index_min_index_min = math.inf\n    local paren_stack_count_min_index_min_index_min_index_min_index = 0\n    local paren_stack_count_min_index_min_index_min_index_min_index_max = 0\n    local paren_stack_count_min_index_min_index_min_index_min_index_min = math.inf\n    local paren_stack_count_min_index_min_index_min_index_min_index_min_index = 0\n    local paren_stack_count_min_index_min_index_min_index_min_index_min_index_max = 0\n    local paren_stack_count_min_index_min_index_min_index_min_index_min_index_min = math.inf\n    local paren_stack_count_min_index_min_index_min_index_min_index_min_index_min_index = 0\n    local paren_stack_count_min_index_min_index_min_index_min_index_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "lua: /tmp/tmpntssohhb.lua:40: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n            paren_count = paren_count + 1\n            if paren_count > paren_level then\n                paren_level = paren_count\n                paren_stack[paren_count] = i\n            end\n        else\n            if paren_count > paren_level then\n                paren_count = paren_count - 1\n                if paren_count == paren_level then\n                    if paren_stack[paren_count] ~= nil then\n                        local paren_start = paren_stack[paren_count]\n                        local paren_end = i\n                        local paren_string = paren_string[paren_start+1, paren_end]\n                        local paren_string_length = #paren_string\n                        local paren_string_new = ''\n                        for j = 1, paren_string_length, 2 do\n                            if paren_string[j] == '(' then\n                                paren_string_new = paren_string_new .. '('\n                            else\n                                paren_string_new = paren_string_new .. ')'\n                            end\n                            j = j + 1\n                        end\n                        if paren_string_new ~= '' then\n                            if paren_string_new ~= paren_string then\n                                local paren_string_new_length = #paren_string_new\n                                local paren_string_new_new = ''\n                                for j = 1, paren_string_new_length, 2 do\n                                    if paren_string_new[j] == '(' then\n                                        paren_string_new_new = paren_string_new_new .. '('\n                                    else\n                                        paren_string_new_new = paren_string_new_new .. ')'\n                                    end\n                                    j = j + 1\n                                end\n                                if paren_string_new_new ~= '' then\n                                    if p\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "lua: /tmp/tmp9e4vnow8.lua:25: ']' expected near ','\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_count = 0\n    local paren_stack_max = 0\n    local paren_stack_max_index = 0\n    local paren_stack_max_count = 0\n    local paren_stack_max_count_index = 0\n    local paren_stack_max_count_count = 0\n    local paren_stack_max_count_count_index = 0\n    local paren_stack_max_count_count_count = 0\n    local paren_stack_max_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpncqgkefu.lua:43: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    for i = 1,#paren_string,1 do\n        if paren_string[i] == '(' then\n            if paren_stack_index == #paren_stack then\n                paren_stack[#paren_stack] = paren_count\n                paren_stack_index = #paren_stack\n                paren_count = 0\n            end\n            paren_count = paren_count + 1\n            paren_stack_index = paren_stack_index + 1\n            paren_level = paren_level + 1\n        elseif paren_string[i] == ')' then\n            paren_count = paren_count - 1\n            if paren_count < 0 then\n                error('Unbalanced parentheses')\n            end\n            if paren_count == 0 then\n                if paren_stack_index == #paren_stack then\n                    error('Unbalanced parentheses')\n                end\n                paren_stack_index = paren_stack_index - 1\n                if paren_stack_index < 0 then\n                    error('Unbalanced parentheses')\n                end\n                paren_level = paren_level - 1\n            end\n        end\n    end\n    return paren_stack[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpofk75ort.lua:44: expected: {2, 3, 1, 3}\nactual: nil\nstack traceback:\n\t/tmp/tmpofk75ort.lua:44: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_count = 0\n    local paren_stack = {}\n    local paren_stack_count = 0\n    local paren_stack_count_max = 0\n    local paren_stack_count_min = math.inf\n    local paren_stack_count_min_max = math.inf\n    local paren_stack_count_min_min = math.inf\n    local paren_stack_count_min_min_max = math.inf\n    local paren_stack_count_min_min_min = math.inf\n    local paren_stack_count_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_min_min_min = math.inf\n    local paren_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpa2dnpo6j.lua:40: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_string_len = 0\n    local paren_string_index = 1\n    local paren_string_len_index = 1\n    local paren_string_len_len = 0\n    local paren_string_len_len_index = 1\n    local paren_string_len_len_len = 0\n    local paren_string_len_len_len_index = 1\n    local paren_string_len_len_len_len = 0\n    local paren_string_len_len_len_len_index = 1\n    local paren_string_len_len_len_len_len = 0\n    local paren_string_len_len_len_len_len_index = 1\n    local paren_string_len_len_len_len_len_len = 0\n    local paren_string_len_len_len_len_len_len_index = 1\n    local paren_string_len_len_len_len_len_len_len = 0\n    local paren_string_len_len_len_len_len_len_len_index = 1\n    local paren_string_len_len_len_len_len_len_len_len = 0\n    local paren_string_len_len_len_len_len_len_len_len_index = 1\n    local paren_string_len_len_len_len_len_len_len_len_len = 0\n    local paren_string_len_len_len_len_len_len_len_len_len_index = 1\n    local paren_string_len_len_len_len_len_len_len_len_len_len = 0\n    local paren_string_len_len_len_len_len_len_len_len_len_len_index = 1\n    local paren_string_len_len_len_len_len_len_len_len_len_len_len = 0\n    local paren_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "lua: /tmp/tmp74za30mc.lua:44: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    local paren_stack = {}\n    for i = 1,#paren_string,2 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack] == 0 then\n                result[#result+1] = i\n            end\n            paren_stack[#paren_stack+1] = i\n        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack] > 0 then\n                result[#result+1] = i\n                paren_stack[#paren_stack] = 0\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1af62fo3.lua:28: expected: {2, 3, 1, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmp1af62fo3.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_count = 0\n    local paren_stack = {}\n    local paren_stack_count = 0\n    local paren_stack_count_max = 0\n    local paren_stack_count_min = 0\n    local paren_stack_count_min_max = 0\n    local paren_stack_count_min_min = 0\n    local paren_stack_count_min_min_max = 0\n    local paren_stack_count_min_min_min = 0\n    local paren_stack_count_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "lua: /tmp/tmprrxfbpx9.lua:41: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?)')) do\n        result[#result + 1] = #(group)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_count = 0\n    local paren_stack_max = 0\n    local paren_stack_max_index = 0\n    local paren_stack_max_count = 0\n    local paren_stack_max_count_index = 0\n    local paren_stack_max_count_count = 0\n    local paren_stack_max_count_count_index = 0\n    local paren_stack_max_count_count_count = 0\n    local paren_stack_max_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpncqgkefu.lua:43: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n            if paren_stack_index == #paren_stack then\n                paren_stack[#paren_stack] = paren_count\n                paren_stack_index = #paren_stack\n                paren_count = 0\n            end\n            paren_count = paren_count + 1\n            paren_stack_index = paren_stack_index + 1\n        elseif paren_string[i] == ')' then\n            if paren_stack_index == 1 then\n                return paren_stack[1]\n            else\n                paren_stack_index = paren_stack_index - 1\n            end\n            paren_count = paren_count - 1\n        end\n    end\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqa75qxuc.lua:35: expected: {2, 3, 1, 3}\nactual: nil\nstack traceback:\n\t/tmp/tmpqa75qxuc.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n            paren_count = paren_count + 1\n            if paren_count > paren_level then\n                paren_level = paren_count\n                paren_stack[paren_count] = i\n            end\n        elseif paren_string[i] == ')' then\n            paren_count = paren_count - 1\n            if paren_count < paren_level then\n                paren_level = paren_count\n                paren_stack[paren_count] = i\n            end\n        end\n        if paren_count == 0 then\n            if paren_level > 0 then\n                print(paren_stack[1] .. ' ' .. paren_stack[2])\n            end\n            return\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppgomrylx.lua:37: expected: {2, 3, 1, 3}\nactual: nil\nstack traceback:\n\t/tmp/tmppgomrylx.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result+1] = #group\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for i = 1, #paren_string, 2 do\n        local paren_group = string.sub(paren_string, i, i)\n        local paren_count = 0\n        for j = 1, #paren_group, 2 do\n            if paren_group[j] == '(' then\n                paren_count = paren_count + 1\n            elseif paren_group[j] == ')' then\n                paren_count = paren_count - 1\n            end\n        end\n        result[#result + 1] = paren_count\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpir0qi9la.lua:26: expected: {2, 3, 1, 3}\nactual: {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}\nstack traceback:\n\t/tmp/tmpir0qi9la.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_count = 0\n    local paren_stack = {}\n    local paren_stack_count = 0\n    local paren_stack_count_max = 0\n    local paren_stack_count_min = 0\n    local paren_stack_count_min_max = 0\n    local paren_stack_count_min_min = 0\n    local paren_stack_count_min_min_max = 0\n    local paren_stack_count_min_min_min = 0\n    local paren_stack_count_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "lua: /tmp/tmprrxfbpx9.lua:41: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "",
      "stderr": "lua: /tmp/tmpod5epp5h.lua:73: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_start = 1\n    local paren_end = 1\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_start = 1\n    local paren_end = 1\n    for i = 1,#paren_string,1 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack] == 0 then\n                paren_stack[#paren_stack] = 1\n                paren_count = paren_count + 1\n                paren_start = i\n            end\n        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack] == 1 then\n                paren_stack[#paren_stack] = 0\n                paren_count = paren_count - 1\n                paren_end = i\n            end\n        elseif paren_stack[#paren_stack] == 1 then\n            if paren_string[i] == '(' then\n                paren_stack[#paren_stack] = 2\n                paren_depth = paren_depth + 1\n            elseif paren_string[i] == ')' then\n                paren_stack[#paren_stack] = 1\n                paren_depth = paren_depth - 1\n            end\n        end\n    end\n    return paren_count, paren_depth\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpif1sfmni.lua:45: expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmpif1sfmni.lua:45: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result+1] = #group\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_count = 0\n    local paren_stack_max = 0\n    local paren_stack_max_index = 0\n    local paren_stack_max_count = 0\n    local paren_stack_max_count_index = 0\n    local paren_stack_max_count_count = 0\n    local paren_stack_max_count_count_index = 0\n    local paren_stack_max_count_count_count = 0\n    local paren_stack_max_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpncqgkefu.lua:43: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    for i = 1, #paren_string, 1 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack] == 0 then\n                paren_stack[#paren_stack] = 1\n            else\n                paren_stack[#paren_stack] = 0\n            end\n            paren_count = paren_count + 1\n        else\n            if paren_stack[#paren_stack] == 1 then\n                paren_stack[#paren_stack] = 0\n                if paren_count > paren_level then\n                    paren_level = paren_count\n                end\n            end\n            paren_count = paren_count - 1\n        end\n    end\n    return paren_level\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp98437byp.lua:34: expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmp98437byp.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_size = 0\n    local paren_stack_max = 0\n    local paren_stack_min = math.inf\n    local paren_stack_max_index = 0\n    local paren_stack_min_index = math.inf\n    local paren_stack_max_size = 0\n    local paren_stack_min_size = math.inf\n    local paren_stack_max_size_index = 0\n    local paren_stack_min_size_index = math.inf\n    local paren_stack_max_size_size = 0\n    local paren_stack_min_size_size = math.inf\n    local paren_stack_max_size_size_index = 0\n    local paren_stack_min_size_size_index = math.inf\n    local paren_stack_max_size_size_size = 0\n    local paren_stack_min_size_size_size = math.inf\n    local paren_stack_max_size_size_size_index = 0\n    local paren_stack_min_size_size_size_index = math.inf\n    local paren_stack_max_size_size_size_size = 0\n    local paren_stack_min_size_size_size_size = math.inf\n    local paren_stack_max_size_size_size_size_index = 0\n    local paren_stack_min_size_size_size_size_index = math.inf\n    local paren_stack_max_size_size_size_size_size = 0\n    local paren_stack_min_size_size_size_size_size = math.inf\n    local paren_stack_max_size_size_size_size_size_index = 0\n    local paren_stack_min_size_size_size_size_size_index = math.inf\n    local paren_stack_max_size_size_size_size_size_size = 0\n    local paren_stack_min\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "",
      "stderr": "lua: /tmp/tmp_604g_42.lua:47: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_count = 0\n    local paren_stack = {}\n    local paren_stack_count = 0\n    local paren_stack_count_max = 0\n    local paren_stack_count_min = math.inf\n    local paren_stack_count_min_max = math.inf\n    local paren_stack_count_min_min = math.inf\n    local paren_stack_count_min_min_max = math.inf\n    local paren_stack_count_min_min_min = math.inf\n    local paren_stack_count_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_min_min_min = math.inf\n    local paren_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpa2dnpo6j.lua:40: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "",
      "stderr": "lua: /tmp/tmpddqftozw.lua:73: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 1\n    local paren_stack_count = 0\n    local paren_stack_index_count = 0\n    local paren_stack_count_count = 0\n    local paren_stack_count_index = 0\n    local paren_stack_count_index_count = 0\n    local paren_stack_count_index_count_count = 0\n    local paren_stack_count_index_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count_count_count_count_count\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "",
      "stderr": "lua: /tmp/tmpopx66xx0.lua:39: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result+1] = #group\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 1\n    local paren_stack_size = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "lua: /tmp/tmpbu1kd2kd.lua:21: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_stack_index = 0\n    local paren_stack_max = 0\n    local paren_stack_max_index = 0\n    local paren_stack_max_depth = 0\n    local paren_stack_max_depth_index = 0\n    local paren_stack_max_depth_count = 0\n    local paren_stack_max_depth_count_index = 0\n    local paren_stack_max_depth_count_count = 0\n    local paren_stack_max_depth_count_count_index = 0\n    local paren_stack_max_depth_count_count_count = 0\n    local paren_stack_max_depth_count_count_count_index = 0\n    local paren_stack_max_depth_count_count_count_count = 0\n    local paren_stack_max_depth_count_count_count_count_index = 0\n    local paren_stack_max_depth_count_count_count_count_count = 0\n    local paren_stack_max_depth_count_count_count_count_count_index = 0\n    local paren_stack_max_depth_count_count_count_count_count_count = 0\n    local paren_stack_max_depth_count_count_count_count_count_count_index = 0\n    local paren_stack_max_depth_count_count_count_count_count_count_count = 0\n    local paren_stack_max_depth_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_depth_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_depth_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_depth_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_depth_count_count_count_count_count_count_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "",
      "stderr": "lua: /tmp/tmpec1pdpqm.lua:42: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_count = 0\n    local paren_stack = {}\n    local paren_stack_count = 0\n    local paren_stack_count_max = 0\n    local paren_stack_count_min = math.inf\n    local paren_stack_count_min_max = math.inf\n    local paren_stack_count_min_min = math.inf\n    local paren_stack_count_min_min_max = math.inf\n    local paren_stack_count_min_min_min = math.inf\n    local paren_stack_count_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_min_min_min = math.inf\n    local paren_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpa2dnpo6j.lua:40: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_count = 0\n    local paren_stack_max = 0\n    local paren_stack_max_index = 0\n    local paren_stack_max_count = 0\n    local paren_stack_max_count_index = 0\n    local paren_stack_max_count_count = 0\n    local paren_stack_max_count_count_index = 0\n    local paren_stack_max_count_count_count = 0\n    local paren_stack_max_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpncqgkefu.lua:43: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_string_len = 0\n    local paren_string_index = 0\n    local paren_string_index_end = 0\n    local paren_string_index_start = 0\n    local paren_string_index_end_prev = 0\n    local paren_string_index_start_prev = 0\n    local paren_string_index_start_prev_prev = 0\n    local paren_string_index_end_prev_prev = 0\n    local paren_string_index_start_prev_prev_prev = 0\n    local paren_string_index_end_prev_prev_prev = 0\n    local paren_string_index_start_prev_prev_prev_prev = 0\n    local paren_string_index_end_prev_prev_prev_prev = 0\n    local paren_string_index_start_prev_prev_prev_prev_prev = 0\n    local paren_string_index_end_prev_prev_prev_prev_prev = 0\n    local paren_string_index_start_prev_prev_prev_prev_prev_prev = 0\n    local paren_string_index_end_prev_prev_prev_prev_prev_prev = 0\n    local paren_string_index_start_prev_prev_prev_prev_prev_prev_prev = 0\n    local paren_string_index_end_prev_prev_prev_prev_prev_prev_prev = 0\n    local paren_string_index_start_prev_prev_prev_prev_prev_prev_prev_prev = 0\n    local paren_string_index_end_prev_prev_prev_prev_prev_prev_prev_prev = 0\n    local paren_string_index_start_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0\n    local paren_string_index_end_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0\n    local paren_string_index_start_prev\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "",
      "stderr": "lua: /tmp/tmpx1cff3p2.lua:43: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    local paren_stack = {}\n    for i = 1,#paren_string,2 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack] == 0 then\n                result[#result+1] = i\n            end\n            paren_stack[#paren_stack+1] = i\n        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack] == 0 then\n                result[#result+1] = i\n            end\n            paren_stack[#paren_stack-1] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfmf8m7qq.lua:28: expected: {2, 3, 1, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmpfmf8m7qq.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 1\n    local paren_stack_count = 0\n    local paren_stack_index_count = 0\n    local paren_stack_count_count = 0\n    local paren_stack_count_index = 0\n    local paren_stack_count_index_count = 0\n    local paren_stack_count_index_count_count = 0\n    local paren_stack_count_index_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count_count_count_count_count\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "",
      "stderr": "lua: /tmp/tmpopx66xx0.lua:39: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        if group ~= '' then\n            result[#result + 1] = #group\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    local paren_stack = {}\n    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack] == 0 then\n                result[#result + 1] = i\n            end\n            paren_stack[#paren_stack] = #paren_stack + 1\n        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack] == 1 then\n                result[#result + 1] = i\n            end\n            paren_stack[#paren_stack] = #paren_stack - 1\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpehut3z7o.lua:28: expected: {2, 3, 1, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmpehut3z7o.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_count = 0\n    local paren_stack = {}\n    local paren_stack_count = 0\n    local paren_stack_count_max = 0\n    local paren_stack_count_min = math.inf\n    local paren_stack_count_min_index = 0\n    local paren_stack_count_max_index = 0\n    local paren_stack_count_min_index_max = 0\n    local paren_stack_count_max_index_min = 0\n    local paren_stack_count_min_index_max_index = 0\n    local paren_stack_count_max_index_min_index = 0\n    local paren_stack_count_min_index_max_index_min = 0\n    local paren_stack_count_max_index_min_index_max = 0\n    local paren_stack_count_min_index_max_index_min_index = 0\n    local paren_stack_count_max_index_min_index_max_index = 0\n    local paren_stack_count_min_index_max_index_min_index_max = 0\n    local paren_stack_count_max_index_min_index_max_index_min = 0\n    local paren_stack_count_min_index_max_index_min_index_max_index = 0\n    local paren_stack_count_max_index_min_index_max_index_min_index = 0\n    local paren_stack_count_min_index_max_index_min_index_max_index_min = 0\n    local paren_stack_count_max_index_min_index_max_index_min_index_max = 0\n    local paren_stack_count_min_index_max_index_min_index_max_index_min_index = 0\n    local paren_stack_count_max_index_min_index_max_index_min_index_max_index = 0\n    local paren_stack_count_min_index_max_index_min_index_max_index_min_index_max = 0\n    local paren_stack_count\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "",
      "stderr": "lua: /tmp/tmpuw2cedjm.lua:41: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result+1] = #group\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    local paren_stack = {}\n    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack] == 0 then\n                result[#result + 1] = i - 1\n            end\n            paren_stack[#paren_stack] = #paren_stack + 1\n        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack] == 1 then\n                result[#result + 1] = i - 1\n            end\n            paren_stack[#paren_stack] = #paren_stack - 1\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpim3qr5qu.lua:28: expected: {2, 3, 1, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmpim3qr5qu.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_stack_index = 0\n    local paren_stack_count = 0\n    local paren_stack_depth = 0\n    local paren_stack_index_count = 0\n    local paren_stack_depth_count = 0\n    local paren_stack_depth_index = 0\n    local paren_stack_depth_index_count = 0\n    local paren_stack_depth_index_count_max = 0\n    local paren_stack_depth_index_count_min = 0\n    local paren_stack_depth_index_count_max_min = 0\n    local paren_stack_depth_index_count_min_max = 0\n    local paren_stack_depth_index_count_min_max_min = 0\n    local paren_stack_depth_index_count_min_max_min_max = 0\n    local paren_stack_depth_index_count_min_max_min_max_min = 0\n    local paren_stack_depth_index_count_min_max_min_max_min_max = 0\n    local paren_stack_depth_index_count_min_max_min_max_min_max_min = 0\n    local paren_stack_depth_index_count_min_max_min_max_min_max_min_max = 0\n    local paren_stack_depth_index_count_min_max_min_max_min_max_min_max_min = 0\n    local paren_stack_depth_index_count_min_max_min_max_min_max_min_max_min_max = 0\n    local paren_stack_depth_index_count_min_max_min_max_min_max_min_max_min_max_min = 0\n    local paren_stack_depth_index_count_min_max_min_max_min_max_min_max_min_max_min_max = 0\n    local paren_stack_depth_index_count_min_max_min_max_min_max_min\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "",
      "stderr": "lua: /tmp/tmpm6y22nnt.lua:41: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_stack_index = 0\n    local paren_stack_size = 0\n    local paren_stack_max = 0\n    local paren_stack_max_index = 0\n    local paren_stack_max_size = 0\n    local paren_stack_max_max = 0\n    local paren_stack_max_max_index = 0\n    local paren_stack_max_max_size = 0\n    local paren_stack_max_max_max = 0\n    local paren_stack_max_max_max_index = 0\n    local paren_stack_max_max_max_size = 0\n    local paren_stack_max_max_max_max = 0\n    local paren_stack_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max = 0\n    local paren_stack_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max = 0\n    local paren_stack_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max_max = 0\n    local paren_stack_max_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max_max_max = 0\n    local paren_stack_max_max_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_max_max_size = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsxns3168.lua:45: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack] == 0 then\n                paren_stack[#paren_stack] = 1\n            else\n                paren_stack[#paren_stack] = 0\n            end\n            paren_count = paren_count + 1\n            paren_level = paren_level + 1\n        else\n            if paren_stack[#paren_stack] == 1 then\n                paren_stack[#paren_stack] = 0\n            else\n                paren_stack[#paren_stack] = 1\n            end\n            paren_count = paren_count - 1\n            if paren_count == 0 then\n                if paren_level > 1 then\n                    return paren_level\n                end\n            end\n        end\n    end\n    return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpli99j8e2.lua:40: expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmpli99j8e2.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?)')) do\n        result[#result + 1] = #(group)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "",
      "stderr": "lua: /tmp/tmpod5epp5h.lua:73: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n            if paren_string[i+1] == '(' then\n                result[#result+1] = #result\n            else\n                result[#result+1] = #result + 1\n            end\n        else\n            result[#result+1] = #result\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxhg62fw_.lua:25: expected: {2, 3, 1, 3}\nactual: {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13}\nstack traceback:\n\t/tmp/tmpxhg62fw_.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_index = 1\n    local paren_start = 1\n    local paren_end = 0\n    local paren_string = ''\n    local paren_string_length = 0\n    local paren_string_index = 0\n    local paren_string_index_start = 0\n    local paren_string_index_end = 0\n    local paren_string_index_end_start = 0\n    local paren_string_index_end_end = 0\n    local paren_string_index_end_end_start = 0\n    local paren_string_index_end_end_end = 0\n    local paren_string_index_end_end_end_start = 0\n    local paren_string_index_end_end_end_end = 0\n    local paren_string_index_end_end_end_end_start = 0\n    local paren_string_index_end_end_end_end_end = 0\n    local paren_string_index_end_end_end_end_end_start = 0\n    local paren_string_index_end_end_end_end_end_end = 0\n    local paren_string_index_end_end_end_end_end_end_start = 0\n    local paren_string_index_end_end_end_end_end_end_end = 0\n    local paren_string_index_end_end_end_end_end_end_end_start = 0\n    local paren_string_index_end_end_end_end_end_end_end_end = 0\n    local paren_string_index_end_end_end_end_end_end_end_end_start = 0\n    local paren_string_index_end_end_end_end_end_end_end_end_end = 0\n    local paren_string_index_end_end_end_end_end_end_end_end_end_start = 0\n    local paren_string_index_end_end_end_end_end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7s_evowv.lua:45: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = group\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "",
      "stderr": "lua: /tmp/tmpddqftozw.lua:73: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_string_len = 0\n    local paren_string_index = 0\n    local paren_string_index_end = 0\n    local paren_string_index_start = 0\n    local paren_string_index_end_prev = 0\n    local paren_string_index_start_prev = 0\n    local paren_string_index_start_next = 0\n    local paren_string_index_end_next = 0\n    local paren_string_index_start_next_prev = 0\n    local paren_string_index_end_next_prev = 0\n    local paren_string_index_start_next_next = 0\n    local paren_string_index_end_next_next = 0\n    local paren_string_index_start_next_next_prev = 0\n    local paren_string_index_end_next_next_prev = 0\n    local paren_string_index_start_next_next_next = 0\n    local paren_string_index_end_next_next_next = 0\n    local paren_string_index_start_next_next_next_prev = 0\n    local paren_string_index_end_next_next_next_prev = 0\n    local paren_string_index_start_next_next_next_next = 0\n    local paren_string_index_end_next_next_next_next = 0\n    local paren_string_index_start_next_next_next_next_prev = 0\n    local paren_string_index_end_next_next_next_next_next = 0\n    local paren_string_index_start_next_next_next_next_next_prev = 0\n    local paren_string_index_end_next_next_next_next_next_next = 0\n    local paren_string_index_start_next_next_next_next_next_next_prev = 0\n    local paren_string_index_end_next_next_next_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "",
      "stderr": "lua: /tmp/tmpgo2hun3w.lua:46: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "",
      "stderr": "lua: /tmp/tmpod5epp5h.lua:73: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_index = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_index = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_index = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_index = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_index = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_index = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_index = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_index = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_index = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_index = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_index = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "",
      "stderr": "lua: /tmp/tmpjlqj5rlh.lua:73: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_stack_index = 0\n    local paren_stack_count = 0\n    local paren_stack_depth = 0\n    local paren_stack_index_count = 0\n    local paren_stack_depth_count = 0\n    local paren_stack_depth_index = 0\n    local paren_stack_depth_index_count = 0\n    local paren_stack_depth_index_count_max = 0\n    local paren_stack_depth_index_count_min = 0\n    local paren_stack_depth_index_count_max_index = 0\n    local paren_stack_depth_index_count_min_index = 0\n    local paren_stack_depth_index_count_max_index_count = 0\n    local paren_stack_depth_index_count_min_index_count = 0\n    local paren_stack_depth_index_count_max_index_count_index = 0\n    local paren_stack_depth_index_count_min_index_count_index = 0\n    local paren_stack_depth_index_count_max_index_count_index_count = 0\n    local paren_stack_depth_index_count_min_index_count_index_count = 0\n    local paren_stack_depth_index_count_max_index_count_index_count_index = 0\n    local paren_stack_depth_index_count_min_index_count_index_count_index = 0\n    local paren_stack_depth_index_count_max_index_count_index_count_index_count = 0\n    local paren_stack_depth_index_count_min_index_count_index_count_index_count_index = 0\n    local paren_stack_depth_index_count_max_index_count_index_count_index_count_index_count = 0\n    local paren_stack_depth_index_count_min_index_count_index_count_index_count_index_count_index = 0\n    local paren_stack\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "",
      "stderr": "lua: /tmp/tmp86ga8s3s.lua:43: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    local paren_stack = {}\n    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack] == 0 then\n                result[#result + 1] = i - 1\n            end\n            paren_stack[#paren_stack] = #paren_stack + 1\n        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack] == 1 then\n                result[#result + 1] = i - 1\n            end\n            paren_stack[#paren_stack] = #paren_stack - 1\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpim3qr5qu.lua:28: expected: {2, 3, 1, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmpim3qr5qu.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    for i = 1,#paren_string,2 do\n        if paren_string[i] == '(' then\n            if paren_stack_index == #paren_stack then\n                paren_stack[#paren_stack] = paren_count\n                paren_stack_index = #paren_stack\n                paren_count = 0\n            end\n            paren_count = paren_count + 1\n            paren_stack_index = paren_stack_index + 1\n            paren_level = paren_level + 1\n        elseif paren_string[i] == ')' then\n            paren_count = paren_count - 1\n            if paren_count < 0 then\n                print('Error: unmatched parenthesis')\n                return\n            end\n            if paren_count == 0 then\n                paren_level = paren_level - 1\n                if paren_level < 0 then\n                    print('Error: unmatched parenthesis')\n                    return\n                end\n            end\n        end\n    end\n    return paren_stack[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1cmnam7a.lua:42: expected: {2, 3, 1, 3}\nactual: nil\nstack traceback:\n\t/tmp/tmp1cmnam7a.lua:42: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_index = 1\n    local paren_char = ''\n    local paren_char_count = 0\n    local paren_char_index = 1\n    local paren_char_count_stack = {}\n    local paren_char_index_stack = {}\n    local paren_char_stack = {}\n    local paren_char_stack_index = 0\n    local paren_char_stack_count = 0\n    local paren_char_stack_count_stack = {}\n    local paren_char_stack_index_stack = {}\n    local paren_char_stack_stack = {}\n    local paren_char_stack_stack_index = 0\n    local paren_char_stack_stack_count = 0\n    local paren_char_stack_stack_count_stack = {}\n    local paren_char_stack_stack_index_stack = {}\n    local paren_char_stack_stack_stack = {}\n    local paren_char_stack_stack_stack_index = 0\n    local paren_char_stack_stack_stack_count = 0\n    local paren_char_stack_stack_stack_count_stack = {}\n    local paren_char_stack_stack_stack_index_stack = {}\n    local paren_char_stack_stack_stack_stack = {}\n    local paren_char_stack_stack_stack_stack_index = 0\n    local paren_char_stack_stack_stack_stack_count = 0\n    local paren_char_stack_stack_stack_stack_count_stack = {}\n    local paren_char_stack_stack_stack_stack_index_stack = {}\n    local paren_char_stack_stack_stack_stack_stack = {}\n    local paren_char_stack_stack_stack_stack_stack_index = 0\n    local paren_char_stack_stack_stack_stack_stack_count = 0\n    local paren_char_stack_stack_stack_stack_stack_count_stack = {}\n    local paren_char_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "",
      "stderr": "lua: /tmp/tmp3bh0v4kf.lua:50: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for i=1,#paren_string,2 do\n        if paren_string[i] == '(' then\n            if paren_string[i+1] == '(' then\n                result[#result+1] = #result\n                i = i+2\n            else\n                result[#result+1] = #result\n                i = i+1\n        else\n            result[#result+1] = #result\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?)')) do\n        result[#result + 1] = #(group)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_string_count = 0\n    local paren_string_level = 0\n    for i = 1, #paren_string, 1 do\n        if paren_string[i] == '(' then\n            if paren_string[i+1] == '(' then\n                paren_stack[paren_count] = paren_level\n                paren_count = paren_count + 1\n                paren_level = paren_level + 1\n                paren_string_count = paren_string_count + 1\n                paren_string_level = paren_string_level + 1\n                i = i + 1\n            elseif paren_string[i+1] == ')' then\n                paren_stack[paren_count] = paren_level\n                paren_count = paren_count + 1\n                paren_level = paren_level - 1\n                paren_string_count = paren_string_count + 1\n                paren_string_level = paren_string_level - 1\n                i = i + 1\n            else\n                paren_string = paren_string .. ' ' .. paren_string[i]\n                paren_string_count = paren_string_count + 1\n            end\n        elseif paren_string[i] == ')' then\n            if paren_string[i+1] == ')' then\n                paren_stack[paren_count] = paren_level\n                paren_count = paren_count + 1\n                paren_level = paren_level - 1\n                paren_string_count = paren_string_count + 1\n                paren_string_level = paren_string_level - 1\n                i = i + 1\n            elseif paren_string[i+1] == '(' then\n                paren_stack[paren_count] = paren_level\n                paren_count = paren_count + 1\n                paren_level = paren_level + 1\n                paren_string_count = paren_string_count + 1\n                paren_string_level = paren_string_level\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "",
      "stderr": "lua: /tmp/tmpr4_5d2fw.lua:56: 'end' expected (to close 'if' at line 34) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_index = 1\n    local paren_char = ''\n    local paren_char_count = 0\n    local paren_char_index = 1\n    local paren_char_count_stack = {}\n    local paren_char_index_stack = {}\n    local paren_char_stack = {}\n    local paren_char_stack_count = 0\n    local paren_char_stack_index = 1\n    local paren_char_stack_count_stack = {}\n    local paren_char_stack_index_stack = {}\n    local paren_char_stack_stack = {}\n    local paren_char_stack_stack_count = 0\n    local paren_char_stack_stack_index = 1\n    local paren_char_stack_stack_count_stack = {}\n    local paren_char_stack_stack_index_stack = {}\n    local paren_char_stack_stack_stack = {}\n    local paren_char_stack_stack_count = 0\n    local paren_char_stack_stack_index = 1\n    local paren_char_stack_stack_count_stack = {}\n    local paren_char_stack_stack_index_stack = {}\n    local paren_char_stack_stack_stack = {}\n    local paren_char_stack_stack_count = 0\n    local paren_char_stack_stack_index = 1\n    local paren_char_stack_stack_count_stack = {}\n    local paren_char_stack_stack_index_stack = {}\n    local paren_char_stack_stack_stack = {}\n    local paren_char_stack_stack_count = 0\n    local paren_char_stack_stack_index = 1\n    local paren_char_stack_stack_count_stack = {}\n    local paren_char_stack_stack_index_stack = {}\n    local paren_char_stack_stack_stack = {}\n    local paren_char_stack_stack_count = 0\n    local paren_char_stack\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "",
      "stderr": "lua: /tmp/tmpapj_a3zu.lua:53: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_count = 0\n    local paren_stack = {}\n    local paren_stack_count = 0\n    local paren_stack_count_max = 0\n    local paren_stack_count_min = 0\n    local paren_stack_count_min_max = 0\n    local paren_stack_count_min_min = 0\n    local paren_stack_count_min_min_max = 0\n    local paren_stack_count_min_min_min = 0\n    local paren_stack_count_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "lua: /tmp/tmprrxfbpx9.lua:41: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_stack_index = 1\n    local paren_stack_size = 0\n    local paren_stack_max = 0\n    local paren_stack_max_index = 0\n    local paren_stack_max_size = 0\n    local paren_stack_max_max_index = 0\n    local paren_stack_max_max_size = 0\n    local paren_stack_max_max_max_index = 0\n    local paren_stack_max_max_max_size = 0\n    local paren_stack_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "",
      "stderr": "lua: /tmp/tmpr5kcl87n.lua:43: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    local paren_stack = {}\n    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack] == 0 then\n                result[#result + 1] = i - 1\n            end\n            paren_stack[#paren_stack] = #paren_stack + 1\n        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack] == 1 then\n                result[#result + 1] = i - 1\n            end\n            paren_stack[#paren_stack] = #paren_stack - 1\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpim3qr5qu.lua:28: expected: {2, 3, 1, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmpim3qr5qu.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    local paren_stack = {}\n    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack] == 0 then\n                result[#result + 1] = i - 1\n            end\n            paren_stack[#paren_stack] = #paren_stack + 1\n        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack] == 1 then\n                result[#result + 1] = i - 1\n            end\n            paren_stack[#paren_stack] = #paren_stack - 1\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpim3qr5qu.lua:28: expected: {2, 3, 1, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmpim3qr5qu.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        if group ~= '' then\n            result[#result + 1] = #group\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_stack_index = 0\n    local paren_stack_count = 0\n    local paren_stack_depth = 0\n    local paren_stack_index_count = 0\n    local paren_stack_count_count = 0\n    local paren_stack_depth_count = 0\n    local paren_stack_index_depth = 0\n    local paren_stack_count_depth = 0\n    local paren_stack_depth_depth = 0\n    local paren_stack_index_depth_depth = 0\n    local paren_stack_count_depth_depth = 0\n    local paren_stack_depth_depth_depth = 0\n    local paren_stack_index_depth_depth_depth = 0\n    local paren_stack_count_depth_depth_depth = 0\n    local paren_stack_depth_depth_depth_depth = 0\n    local paren_stack_index_depth_depth_depth_depth = 0\n    local paren_stack_count_depth_depth_depth_depth = 0\n    local paren_stack_depth_depth_depth_depth_depth = 0\n    local paren_stack_index_depth_depth_depth_depth_depth = 0\n    local paren_stack_count_depth_depth_depth_depth_depth = 0\n    local paren_stack_depth_depth_depth_depth_depth_depth = 0\n    local paren_stack_index_depth_depth_depth_depth_depth_depth = 0\n    local paren_stack_count_depth_depth_depth_depth_depth_depth = 0\n    local paren_stack_depth_depth_depth_depth_depth_depth_depth = 0\n    local paren_stack_index_depth_depth_depth_depth_depth_depth_depth = 0\n    local paren_stack_count_depth_depth_depth_depth_depth_depth_depth = 0\n    local paren_stack_depth_depth_depth_depth_depth_depth_depth_depth = 0\n    local paren_stack_index_depth_depth_depth\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "lua: /tmp/tmptci0b2q4.lua:47: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_count = 0\n    local paren_stack_max = 0\n    local paren_stack_max_index = 0\n    local paren_stack_max_count = 0\n    local paren_stack_max_count_index = 0\n    local paren_stack_max_count_count = 0\n    local paren_stack_max_count_count_index = 0\n    local paren_stack_max_count_count_count = 0\n    local paren_stack_max_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpncqgkefu.lua:43: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?)')) do\n        result[#result+1] = #(group)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    local paren_stack = {}\n    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack] == 0 then\n                result[#result + 1] = #paren_stack\n                table.insert(result, #result)\n            end\n            paren_stack[#paren_stack + 1] = #paren_stack\n            table.insert(paren_stack, #paren_stack)\n        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack] > paren_stack[#paren_stack + 1] then\n                result[#result + 1] = #paren_stack - paren_stack[#paren_stack]\n                table.insert(result, #result)\n            end\n            if paren_stack[#paren_stack] == paren_stack[#paren_stack + 1] then\n                table.erase(table.concat(result, paren_stack))\n                result = {}\n                table.insert(result, #result)\n            end\n            paren_stack[#paren_stack - 1] = #paren_stack\n            table.erase(table.concat(paren_stack, 1))\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3x2p49mz.lua:37: expected: {2, 3, 1, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmp3x2p49mz.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 1\n    local paren_stack_size = 0\n    local paren_stack_max = 0\n    local paren_stack_min = math.inf\n    local paren_stack_max_index = 0\n    local paren_stack_min_index = math.inf\n    local paren_stack_max_size = 0\n    local paren_stack_min_size = math.inf\n    local paren_stack_max_size_index = 0\n    local paren_stack_min_size_index = math.inf\n    local paren_stack_max_size_size = 0\n    local paren_stack_min_size_size = math.inf\n    local paren_stack_max_size_size_index = 0\n    local paren_stack_min_size_size_index = math.inf\n    local paren_stack_max_size_size_size = 0\n    local paren_stack_min_size_size_size = math.inf\n    local paren_stack_max_size_size_size_index = 0\n    local paren_stack_min_size_size_size_index = math.inf\n    local paren_stack_max_size_size_size_size = 0\n    local paren_stack_min_size_size_size_size = math.inf\n    local paren_stack_max_size_size_size_size_index = 0\n    local paren_stack_min_size_size_size_size_index = math.inf\n    local paren_stack_max_size_size_size_size_size = 0\n    local paren_stack_min_size_size_size_size_size = math.inf\n    local paren_stack_max_size_size_size_size_size_index = 0\n    local paren_stack_min_size_size_size_size_size_index = math.inf\n    local paren_stack_max_size_size_size_size_size_size = 0\n    local paren_stack_min\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "",
      "stderr": "lua: /tmp/tmpzda1rrfs.lua:47: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_count = 0\n    local paren_stack_max = 0\n    local paren_stack_max_index = 0\n    local paren_stack_max_count = 0\n    local paren_stack_max_count_index = 0\n    local paren_stack_max_count_count = 0\n    local paren_stack_max_count_count_index = 0\n    local paren_stack_max_count_count_count = 0\n    local paren_stack_max_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpncqgkefu.lua:43: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_count = 0\n    local paren_stack = {}\n    local paren_stack_count = 0\n    local paren_stack_count_max = 0\n    local paren_stack_count_min = 0\n    local paren_stack_count_min_max = 0\n    local paren_stack_count_min_min = 0\n    local paren_stack_count_min_min_max = 0\n    local paren_stack_count_min_min_min = 0\n    local paren_stack_count_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "lua: /tmp/tmprrxfbpx9.lua:41: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    for i=1,#paren_string,2 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack] == 0 then\n                paren_stack[#paren_stack] = 1\n                paren_count = paren_count + 1\n            end\n            paren_stack[#paren_stack] = paren_stack[#paren_stack] + 1\n        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack] == 1 then\n                paren_stack[#paren_stack] = paren_stack[#paren_stack] - 1\n                if paren_stack[#paren_stack] == 0 then\n                    paren_count = paren_count - 1\n                end\n            end\n        end\n        if paren_stack[#paren_stack] == 0 then\n            if paren_count == 0 then\n                paren_level = paren_level + 1\n            end\n        end\n        paren_string = paren_string .. ' ' .. paren_string[i]\n    end\n    return paren_level\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n271b1f.lua:39: expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmp2n271b1f.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 1\n    local paren_stack_count = 0\n    local paren_stack_index_count = 0\n    local paren_stack_count_count = 0\n    local paren_stack_count_index = 0\n    local paren_stack_count_index_count = 0\n    local paren_stack_count_index_count_count = 0\n    local paren_stack_count_index_count_index = 0\n    local paren_stack_count_index_count_index_count = 0\n    local paren_stack_count_index_count_index_count_index = 0\n    local paren_stack_count_index_count_index_count_index_count = 0\n    local paren_stack_count_index_count_index_count_index_count_index = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count_index = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count_index_count = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count_index_count_index = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count_index_count_index_count = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count_index_count_index_count_index = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index = 0\n    local paren_stack_count_index_count_index_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "",
      "stderr": "lua: /tmp/tmp9w5rgwb4.lua:40: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_count = 0\n    local paren_stack = {}\n    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n            paren_count = paren_count + 1\n            if paren_count > paren_stack[-1] then\n                paren_stack[-1] = paren_count\n            end\n        elseif paren_string[i] == ')' then\n            paren_count = paren_count - 1\n            if paren_count < paren_stack[-1] then\n                paren_stack[-1] = paren_count\n            end\n        end\n    end\n    return paren_stack\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6_pguoey.lua:28: expected: {2, 3, 1, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmp6_pguoey.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "",
      "stderr": "lua: /tmp/tmpod5epp5h.lua:73: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    local paren_stack = {}\n    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack] == 0 then\n                result[#result + 1] = i - 1\n            end\n            paren_stack[#paren_stack + 1] = i\n        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack] > 0 then\n                paren_stack[#paren_stack] = paren_stack[#paren_stack] - 1\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl7j6m89c.lua:27: expected: {2, 3, 1, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmpl7j6m89c.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_size = 0\n    local paren_stack_max = 0\n    local paren_stack_min = 0\n    local paren_stack_count = 0\n    local paren_stack_max_count = 0\n    local paren_stack_min_count = 0\n    local paren_stack_count_max = 0\n    local paren_stack_count_min = 0\n    local paren_stack_count_max_count = 0\n    local paren_stack_count_min_count = 0\n    local paren_stack_count_max_count_min = 0\n    local paren_stack_count_min_count_max = 0\n    local paren_stack_count_max_count_min_count = 0\n    local paren_stack_count_min_count_max_count = 0\n    local paren_stack_count_max_count_min_count_max = 0\n    local paren_stack_count_min_count_max_count_min_count = 0\n    local paren_stack_count_max_count_min_count_max_count_min = 0\n    local paren_stack_count_min_count_max_count_min_count_max_count_min = 0\n    local paren_stack_count_max_count_min_count_max_count_min_count_max_count_min = 0\n    local paren_stack_count_min_count_max_count_min_count_max_count_min_count_max_count_min = 0\n    local paren_stack_count_max_count_min_count_max_count_min_count_max_count_min_count_max_count_min = 0\n    local paren_stack_count_min_count_max_count_min_count_max_count_min_count_max_count_min_count_max_count_min = 0\n    local paren_stack_count_max_count_min_count_max_count_min\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "",
      "stderr": "lua: /tmp/tmprk8rpnzd.lua:43: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?)')) do\n        if group ~= '' then\n            result[#result + 1] = #group\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_char = ''\n    local paren_index = 1\n    local paren_start = 1\n    local paren_end = 0\n    local paren_length = 0\n    local paren_index_start = 1\n    local paren_index_end = 0\n    local paren_index_length = 0\n    local paren_index_count = 0\n    local paren_index_char = ''\n    local paren_index_start_char = ''\n    local paren_index_end_char = ''\n    local paren_index_char_count = 0\n    local paren_index_char_start = 1\n    local paren_index_char_end = 0\n    local paren_index_char_length = 0\n    local paren_index_char_count = 0\n    local paren_index_char_start_char = ''\n    local paren_index_char_end_char = ''\n    local paren_index_char_length = 0\n    local paren_index_char_count = 0\n    local paren_index_char_start = 1\n    local paren_index_char_end = 0\n    local paren_index_char_length = 0\n    local paren_index_char_count = 0\n    local paren_index_char_start_char = ''\n    local paren_index_char_end_char = ''\n    local paren_index_char_length = 0\n    local paren_index_char_count = 0\n    local paren_index_char_start = 1\n    local paren_index_char_end = 0\n    local paren_index_char_length = 0\n    local paren_index_char_count = 0\n    local paren_index_char_start_char = ''\n    local paren_index_char_end_char = ''\n    local paren_index_char_length = 0\n    local paren_index_char_count = 0\n    local paren_index_char_start = 1\n    local p\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "",
      "stderr": "lua: /tmp/tmp1enr2_yw.lua:59: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_stack_index = 0\n    local paren_stack_size = 0\n    local paren_stack_max = 0\n    local paren_stack_min = 0\n    local paren_stack_max_index = 0\n    local paren_stack_min_index = 0\n    local paren_stack_max_size = 0\n    local paren_stack_min_size = 0\n    local paren_stack_max_size_index = 0\n    local paren_stack_min_size_index = 0\n    local paren_stack_max_size_size = 0\n    local paren_stack_min_size_size = 0\n    local paren_stack_max_size_size_index = 0\n    local paren_stack_min_size_size_index = 0\n    local paren_stack_max_size_size_size = 0\n    local paren_stack_min_size_size_size = 0\n    local paren_stack_max_size_size_size_index = 0\n    local paren_stack_min_size_size_size_index = 0\n    local paren_stack_max_size_size_size_size = 0\n    local paren_stack_min_size_size_size_size = 0\n    local paren_stack_max_size_size_size_size_index = 0\n    local paren_stack_min_size_size_size_size_index = 0\n    local paren_stack_max_size_size_size_size_size = 0\n    local paren_stack_min_size_size_size_size_size = 0\n    local paren_stack_max_size_size_size_size_size_index = 0\n    local paren_stack_min_size_size_size_size_size_index = 0\n    local paren_stack_max_size_size_size_size_size_size = 0\n    local paren_stack_min_size_size_size_size_size_size = 0\n    local paren_stack_max_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "",
      "stderr": "lua: /tmp/tmpjx67fa66.lua:48: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 1\n    local paren_stack_max = 0\n    local paren_stack_max_index = 0\n    local paren_stack_max_count = 0\n    local paren_stack_max_count_index = 0\n    local paren_stack_max_count_count = 0\n    local paren_stack_max_count_count_index = 0\n    local paren_stack_max_count_count_count = 0\n    local paren_stack_max_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "",
      "stderr": "lua: /tmp/tmpq9hw3zk2.lua:42: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_string_index = 1\n    local paren_string_length = len(paren_string)\n    local paren_string_length_index = 1\n    local paren_string_length_length = len(paren_string_length)\n    local paren_string_length_length_index = 1\n    local paren_string_length_length_length = len(paren_string_length_length)\n    local paren_string_length_length_length_index = 1\n    local paren_string_length_length_length_length = len(paren_string_length_length_length)\n    local paren_string_length_length_length_length_index = 1\n    local paren_string_length_length_length_length_length = len(paren_string_length_length_length_length)\n    local paren_string_length_length_length_length_length_index = 1\n    local paren_string_length_length_length_length_length_length = len(paren_string_length_length_length_length_length)\n    local paren_string_length_length_length_length_length_length_index = 1\n    local paren_string_length_length_length_length_length_length_length = len(paren_string_length_length_length_length_length_length)\n    local paren_string_length_length_length_length_length_length_length_index = 1\n    local paren_string_length_length_length_length_length_length_length_length = len(paren_string_length_length_length_length_length_length_length)\n    local paren_string_length_length_length_length_length_length_length_length_index = 1\n    local paren_string_length_length_length_length_length_length_length_length_length = len(paren_string_length_length_length_length_length_length_length_length_length)\n    local paren_string\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "",
      "stderr": "lua: /tmp/tmpfpkvnwjz.lua:40: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_count = 0\n    local paren_stack = {}\n    local paren_stack_count = 0\n    local paren_stack_count_max = 0\n    local paren_stack_count_min = 0\n    local paren_stack_count_max_min = 0\n    local paren_stack_count_min_max = 0\n    local paren_stack_count_min_max_min = 0\n    local paren_stack_count_min_max_min_max = 0\n    local paren_stack_count_min_max_min_max_min = 0\n    local paren_stack_count_min_max_min_max_min_max = 0\n    local paren_stack_count_min_max_min_max_min_max_min = 0\n    local paren_stack_count_min_max_min_max_min_max_min_max = 0\n    local paren_stack_count_min_max_min_max_min_max_min_max_min = 0\n    local paren_stack_count_min_max_min_max_min_max_min_max_min_max = 0\n    local paren_stack_count_min_max_min_max_min_max_min_max_min_max_min = 0\n    local paren_stack_count_min_max_min_max_min_max_min_max_min_max_min_max = 0\n    local paren_stack_count_min_max_min_max_min_max_min_max_min_max_min_max_min = 0\n    local paren_stack_count_min_max_min_max_min_max_min_max_min_max_min_max_min_max = 0\n    local paren_stack_count_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min = 0\n    local paren_stack_count_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max = 0\n    local paren_stack_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "",
      "stderr": "lua: /tmp/tmp1egtz5_d.lua:38: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_index = 1\n    local paren_char = ''\n    local paren_char_count = 0\n    local paren_char_index = 1\n    local paren_char_count_stack = {}\n    local paren_char_count_stack_index = 0\n    local paren_char_count_stack_count = 0\n    local paren_char_count_stack_count_stack = {}\n    local paren_char_count_stack_count_stack_index = 0\n    local paren_char_count_stack_count_stack_count = 0\n    local paren_char_count_stack_count_stack_count_stack = {}\n    local paren_char_count_stack_count_stack_count_stack_index = 0\n    local paren_char_count_stack_count_stack_count_stack_count = 0\n    local paren_char_count_stack_count_stack_count_stack_count_stack = {}\n    local paren_char_count_stack_count_stack_count_stack_count_stack_index = 0\n    local paren_char_count_stack_count_stack_count_stack_count_stack_count = 0\n    local paren_char_count_stack_count_stack_count_stack_count_stack_count_stack = {}\n    local paren_char_count_stack_count_stack_count_stack_count_stack_count_stack_index = 0\n    local paren_char_count_stack_count_stack_count_stack_count_stack_count_stack_count = 0\n    local paren_char_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack = {}\n    local paren_char_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack_index = 0\n    local paren_char_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count = 0\n    local paren_char_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7w88o5l7.lua:42: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        if group ~= '' then\n            result[#result + 1] = #group\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 1\n    local paren_stack_size = 0\n    local paren_stack_max = 0\n    local paren_stack_min = 0\n    local paren_stack_max_index = 0\n    local paren_stack_min_index = 0\n    local paren_stack_max_size = 0\n    local paren_stack_min_size = 0\n    local paren_stack_max_size_index = 0\n    local paren_stack_min_size_index = 0\n    local paren_stack_max_size_size = 0\n    local paren_stack_min_size_size = 0\n    local paren_stack_max_size_size_index = 0\n    local paren_stack_min_size_size_index = 0\n    local paren_stack_max_size_size_size = 0\n    local paren_stack_min_size_size_size = 0\n    local paren_stack_max_size_size_size_index = 0\n    local paren_stack_min_size_size_size_index = 0\n    local paren_stack_max_size_size_size_size = 0\n    local paren_stack_min_size_size_size_size = 0\n    local paren_stack_max_size_size_size_size_index = 0\n    local paren_stack_min_size_size_size_size_index = 0\n    local paren_stack_max_size_size_size_size_size = 0\n    local paren_stack_min_size_size_size_size_size = 0\n    local paren_stack_max_size_size_size_size_size_index = 0\n    local paren_stack_min_size_size_size_size_size_index = 0\n    local paren_stack_max_size_size_size_size_size_size = 0\n    local paren_stack_min_size_size_size_size_size_size = 0\n    local paren_stack_max_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "",
      "stderr": "lua: /tmp/tmpfugasskv.lua:48: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_size = 0\n    local paren_stack_max = 0\n    local paren_stack_min = 0\n    local paren_stack_max_index = 0\n    local paren_stack_min_index = 0\n    local paren_stack_max_size = 0\n    local paren_stack_min_size = 0\n    local paren_stack_max_size_index = 0\n    local paren_stack_min_size_index = 0\n    local paren_stack_max_size_size = 0\n    local paren_stack_min_size_size = 0\n    local paren_stack_max_size_size_index = 0\n    local paren_stack_min_size_size_index = 0\n    local paren_stack_max_size_size_size = 0\n    local paren_stack_min_size_size_size = 0\n    local paren_stack_max_size_size_size_index = 0\n    local paren_stack_min_size_size_size_index = 0\n    local paren_stack_max_size_size_size_size = 0\n    local paren_stack_min_size_size_size_size = 0\n    local paren_stack_max_size_size_size_size_index = 0\n    local paren_stack_min_size_size_size_size_index = 0\n    local paren_stack_max_size_size_size_size_size = 0\n    local paren_stack_min_size_size_size_size_size = 0\n    local paren_stack_max_size_size_size_size_size_index = 0\n    local paren_stack_min_size_size_size_size_size_index = 0\n    local paren_stack_max_size_size_size_size_size_size = 0\n    local paren_stack_min_size_size_size_size_size_size = 0\n    local paren_stack_max_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "lua: /tmp/tmp5c5rlp3z.lua:48: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_count = 0\n    local paren_stack_max = 0\n    local paren_stack_max_index = 0\n    local paren_stack_max_count = 0\n    local paren_stack_max_count_index = 0\n    local paren_stack_max_count_count = 0\n    local paren_stack_max_count_count_index = 0\n    local paren_stack_max_count_count_count = 0\n    local paren_stack_max_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpncqgkefu.lua:43: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_stack_index = 0\n    local paren_stack_size = 0\n    local paren_stack_max = 0\n    local paren_stack_min = 0\n    local paren_stack_max_index = 0\n    local paren_stack_min_index = 0\n    local paren_stack_max_size = 0\n    local paren_stack_min_size = 0\n    local paren_stack_max_size_index = 0\n    local paren_stack_min_size_index = 0\n    local paren_stack_max_size_size = 0\n    local paren_stack_min_size_size = 0\n    local paren_stack_max_size_size_index = 0\n    local paren_stack_min_size_size_index = 0\n    local paren_stack_max_size_size_size = 0\n    local paren_stack_min_size_size_size = 0\n    local paren_stack_max_size_size_size_index = 0\n    local paren_stack_min_size_size_size_index = 0\n    local paren_stack_max_size_size_size_size = 0\n    local paren_stack_min_size_size_size_size = 0\n    local paren_stack_max_size_size_size_size_index = 0\n    local paren_stack_min_size_size_size_size_index = 0\n    local paren_stack_max_size_size_size_size_size = 0\n    local paren_stack_min_size_size_size_size_size = 0\n    local paren_stack_max_size_size_size_size_size_index = 0\n    local paren_stack_min_size_size_size_size_size_index = 0\n    local paren_stack_max_size_size_size_size_size_size = 0\n    local paren_stack_min_size_size_size_size_size_size = 0\n    local paren_stack_max_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "",
      "stderr": "lua: /tmp/tmpjx67fa66.lua:48: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result+1] = #(group)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_stack_index = 1\n    local paren_stack_max = 0\n    local paren_stack_max_index = 0\n    local paren_stack_max_depth = 0\n    local paren_stack_max_depth_index = 0\n    local paren_stack_max_depth_count = 0\n    local paren_stack_max_depth_count_index = 0\n    local paren_stack_max_depth_count_count = 0\n    local paren_stack_max_depth_count_count_index = 0\n    local paren_stack_max_depth_count_count_count = 0\n    local paren_stack_max_depth_count_count_count_index = 0\n    local paren_stack_max_depth_count_count_count_count = 0\n    local paren_stack_max_depth_count_count_count_count_index = 0\n    local paren_stack_max_depth_count_count_count_count_count = 0\n    local paren_stack_max_depth_count_count_count_count_count_index = 0\n    local paren_stack_max_depth_count_count_count_count_count_count = 0\n    local paren_stack_max_depth_count_count_count_count_count_count_index = 0\n    local paren_stack_max_depth_count_count_count_count_count_count_count = 0\n    local paren_stack_max_depth_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_depth_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_depth_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_depth_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_depth_count_count_count_count_count_count_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "",
      "stderr": "lua: /tmp/tmpmjh2ppy2.lua:42: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 1\n    local paren_stack_size = 0\n    local paren_stack_max = 0\n    local paren_stack_max_index = 0\n    local paren_stack_max_size = 0\n    local paren_stack_max_max_index = 0\n    local paren_stack_max_max_size = 0\n    local paren_stack_max_max_max_index = 0\n    local paren_stack_max_max_max_size = 0\n    local paren_stack_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "",
      "stderr": "lua: /tmp/tmp6eeg9iqe.lua:43: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack] == 0 then\n                paren_stack[#paren_stack] = 1\n                paren_count = paren_count + 1\n            end\n            if paren_stack[#paren_stack] == 1 then\n                paren_stack[#paren_stack] = 2\n            end\n        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack] == 2 then\n                paren_stack[#paren_stack] = 3\n            end\n        end\n        if paren_stack[#paren_stack] == 3 then\n            if paren_count == 0 then\n                paren_count = paren_count + 1\n            end\n            if paren_count == 1 then\n                paren_level = paren_level + 1\n            end\n        end\n        if paren_stack[#paren_stack] == 2 then\n            if paren_count == 1 then\n                paren_count = paren_count + 1\n            end\n            if paren_count == 2 then\n                paren_level = paren_level + 1\n            end\n        end\n        if paren_stack[#paren_stack] == 1 then\n            if paren_count == 2 then\n                paren_count = paren_count + 1\n            end\n            if paren_count == 3 then\n                paren_level = paren_level + 1\n            end\n        end\n        if paren_stack[#paren_stack] == 0 then\n            if paren_count == 3 then\n                paren_count = paren_count + 1\n            end\n            if paren_count == 4 then\n                paren_level = paren_level + 1\n            end\n        end\n        if paren_stack[#paren_stack] == 3 then\n            if paren_count == 4 then\n                paren_count = paren_count + 1\n            end\n            if paren_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "",
      "stderr": "lua: /tmp/tmp9sbvlrz9.lua:62: 'then' expected near 'lu'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_stack_index = 0\n    local paren_stack_count = 0\n    local paren_stack_depth = 0\n    local paren_stack_index_count = 0\n    local paren_stack_depth_count = 0\n    local paren_stack_index_depth = 0\n    local paren_stack_index_depth_count = 0\n    local paren_stack_index_depth_count_count = 0\n    local paren_stack_index_depth_count_count_count = 0\n    local paren_stack_index_depth_count_count_count_count = 0\n    local paren_stack_index_depth_count_count_count_count_count = 0\n    local paren_stack_index_depth_count_count_count_count_count_count = 0\n    local paren_stack_index_depth_count_count_count_count_count_count_count = 0\n    local paren_stack_index_depth_count_count_count_count_count_count_count_count = 0\n    local paren_stack_index_depth_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_index_depth_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_index_depth_count_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_index_depth_count_count_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_index_depth_count_count_count_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_index_depth_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_index_depth_count_count_count_count_count_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "",
      "stderr": "lua: /tmp/tmp_7wqv7he.lua:40: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?)')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    for i = 1,#paren_string,1 do\n        if paren_string[i] == '(' then\n            paren_stack[#paren_stack+1] = paren_count\n            paren_count = paren_count + 1\n            paren_depth = paren_depth + 1\n        elseif paren_string[i] == ')' then\n            if paren_depth == 1 then\n                return paren_stack[#paren_stack]\n            else\n                paren_stack[#paren_stack] = paren_stack[#paren_stack] + 1\n                paren_depth = paren_depth - 1\n            end\n        end\n    end\n    return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3fha1bjk.lua:30: expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmp3fha1bjk.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 1\n    local paren_stack_count = 0\n    local paren_stack_index_count = 0\n    local paren_stack_count_index = 0\n    local paren_stack_count_index_count = 0\n    local paren_stack_count_index_count_index = 0\n    local paren_stack_count_index_count_index_count = 0\n    local paren_stack_count_index_count_index_count_index = 0\n    local paren_stack_count_index_count_index_count_index_count = 0\n    local paren_stack_count_index_count_index_count_index_count_index = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count_index = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count_index_count = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count_index_count_index = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count_index_count_index_count = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count_index_count_index_count_index = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count = 0\n    local\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "",
      "stderr": "lua: /tmp/tmpo99z65nw.lua:39: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_count = 0\n    local paren_stack_max = 0\n    local paren_stack_max_index = 0\n    local paren_stack_max_count = 0\n    local paren_stack_max_count_index = 0\n    local paren_stack_max_count_count = 0\n    local paren_stack_max_count_count_index = 0\n    local paren_stack_max_count_count_count = 0\n    local paren_stack_max_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpncqgkefu.lua:43: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_string = ''\n    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack] == 0 then\n                paren_stack[#paren_stack] = 1\n                paren_count = paren_count + 1\n            end\n            if paren_stack[#paren_stack] > paren_depth then\n                paren_depth = paren_stack[#paren_stack]\n            end\n        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack] == 1 then\n                paren_stack[#paren_stack] = 0\n                paren_count = paren_count - 1\n            end\n            if paren_stack[#paren_stack] > paren_depth then\n                paren_depth = paren_stack[#paren_stack]\n            end\n        end\n        if paren_count == 0 then\n            if paren_stack[#paren_stack] > 0 then\n                print(paren_stack[#paren_stack])\n            end\n            paren_stack[#paren_stack] = 0\n        end\n        paren_string = paren_string:sub(i, i)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa3s4klc6.lua:42: expected: {2, 3, 1, 3}\nactual: nil\nstack traceback:\n\t/tmp/tmpa3s4klc6.lua:42: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_stack_index = 0\n    local paren_stack_count = 0\n    local paren_stack_depth = 0\n    local paren_stack_index_count = 0\n    local paren_stack_count_count = 0\n    local paren_stack_depth_count = 0\n    local paren_stack_index_depth_count = 0\n    local paren_stack_count_depth_count = 0\n    local paren_stack_depth_index_count = 0\n    local paren_stack_depth_count_count = 0\n    local paren_stack_depth_index_depth_count = 0\n    local paren_stack_depth_count_depth_count = 0\n    local paren_stack_depth_index_depth_count_count = 0\n    local paren_stack_depth_count_depth_count_count = 0\n    local paren_stack_depth_index_depth_count_count_count = 0\n    local paren_stack_depth_count_depth_count_count_count = 0\n    local paren_stack_depth_index_depth_count_count_count_count = 0\n    local paren_stack_depth_count_depth_count_count_count_count = 0\n    local paren_stack_depth_index_depth_count_count_count_count_count = 0\n    local paren_stack_depth_count_depth_count_count_count_count_count = 0\n    local paren_stack_depth_index_depth_count_count_count_count_count_count = 0\n    local paren_stack_depth_count_depth_count_count_count_count_count_count = 0\n    local paren_stack_depth_index_depth_count_count_count_count_count_count_count = 0\n    local paren_stack_depth_count_depth_count_count_count_count_count_count_count = 0\n    local paren_stack_depth_index_depth_count_count_count_count_count_count_count_count = 0\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "",
      "stderr": "lua: /tmp/tmp4ibpnbxf.lua:45: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 1\n    local paren_stack_count = 0\n    local paren_stack_index_count = 0\n    local paren_stack_count_count = 0\n    local paren_stack_count_index = 0\n    local paren_stack_count_index_count = 0\n    local paren_stack_count_index_count_count = 0\n    local paren_stack_count_index_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count_count_count_count_count\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "",
      "stderr": "lua: /tmp/tmpopx66xx0.lua:39: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_groups = {}\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_group = ''\n    local paren_depth_stack = {}\n    local paren_depth_stack_index = 1\n    local paren_depth_stack_count = 0\n    local paren_depth_stack_max = 0\n    local paren_depth_stack_max_index = 0\n    local paren_depth_stack_max_count = 0\n    local paren_depth_stack_max_count_index = 0\n    local paren_depth_stack_max_count_count = 0\n    local paren_depth_stack_max_count_count_index = 0\n    local paren_depth_stack_max_count_count_count = 0\n    local paren_depth_stack_max_count_count_count_index = 0\n    local paren_depth_stack_max_count_count_count_count = 0\n    local paren_depth_stack_max_count_count_count_count_index = 0\n    local paren_depth_stack_max_count_count_count_count_count = 0\n    local paren_depth_stack_max_count_count_count_count_count_index = 0\n    local paren_depth_stack_max_count_count_count_count_count_count = 0\n    local paren_depth_stack_max_count_count_count_count_count_count_index = 0\n    local paren_depth_stack_max_count_count_count_count_count_count_count = 0\n    local paren_depth_stack_max_count_count_count_count_count_count_count_index = 0\n    local paren_depth_stack_max_count_count_count_count_count_count_count_count = 0\n    local paren_depth_stack_max_count_count_count_count_count_count_count_count_index = 0\n    local paren_depth_stack_max_count_count_count\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "",
      "stderr": "lua: /tmp/tmp6xx6nyng.lua:45: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result+1] = #(group)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292576,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result+1] = #group\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to index a function value\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}