{
  "language": "lua",
  "name": "HumanEval_6_parse_nested_parens",
  "results": [
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_count = 0\n    local paren_stack = {}\n    local paren_stack_count = 0\n    local paren_stack_count_max = 0\n    local paren_stack_count_min = math.inf\n    local paren_stack_count_min_max = math.inf\n    local paren_stack_count_min_min = math.inf\n    local paren_stack_count_min_min_max = math.inf\n    local paren_stack_count_min_min_min = math.inf\n    local paren_stack_count_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_min_min_min = math.inf\n    local paren_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpa2dnpo6j.lua:40: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_index = 1\n    local paren_char = ''\n    local paren_char_count = 0\n    local paren_char_index = 1\n    local paren_char_count_stack = {}\n    local paren_char_index_stack = {}\n    local paren_char_stack = {}\n    local paren_char_stack_count = {}\n    local paren_char_stack_index = {}\n    local paren_char_stack_count_stack = {}\n    local paren_char_stack_index_stack = {}\n    local paren_char_stack_stack = {}\n    local paren_char_stack_stack_count = {}\n    local paren_char_stack_stack_index = {}\n    local paren_char_stack_stack_count_stack = {}\n    local paren_char_stack_stack_index_stack = {}\n    local paren_char_stack_stack_stack = {}\n    local paren_char_stack_stack_stack_count = {}\n    local paren_char_stack_stack_stack_index = {}\n    local paren_char_stack_stack_stack_count_stack = {}\n    local paren_char_stack_stack_stack_index_stack = {}\n    local paren_char_stack_stack_stack_stack = {}\n    local paren_char_stack_stack_stack_stack_count = {}\n    local paren_char_stack_stack_stack_stack_index = {}\n    local paren_char_stack_stack_stack_stack_stack = {}\n    local paren_char_stack_stack_stack_stack_stack_count = {}\n    local paren_char_stack_stack_stack_stack_stack_index = {}\n    local paren_char_stack_stack_stack_stack_stack_stack = {}\n    local paren_char_stack_stack_stack_stack_stack_stack_count = {}\n    local paren_char_stack_stack_stack_stack_stack_stack_index = {}\n    local paren_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp_odkwqb3.lua:50: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_string_index = 1\n    local paren_string_len = len(paren_string)\n    local paren_string_index_end = paren_string_len\n    local paren_string_index_start = 0\n    local paren_string_index_end_start = 0\n    local paren_string_index_start_end = 0\n    local paren_string_index_start_end_end = 0\n    local paren_string_index_start_end_end_end = 0\n    local paren_string_index_start_end_end_end_end = 0\n    local paren_string_index_start_end_end_end_end_end = 0\n    local paren_string_index_start_end_end_end_end_end_end = 0\n    local paren_string_index_start_end_end_end_end_end_end_end = 0\n    local paren_string_index_start_end_end_end_end_end_end_end_end = 0\n    local paren_string_index_start_end_end_end_end_end_end_end_end_end = 0\n    local paren_string_index_start_end_end_end_end_end_end_end_end_end_end = 0\n    local paren_string_index_start_end_end_end_end_end_end_end_end_end_end_end = 0\n    local paren_string_index_start_end_end_end_end_end_end_end_end_end_end_end_end = 0\n    local paren_string_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end = 0\n    local paren_string_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0\n    local paren_string_index_start_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpuhn858hf.lua:40: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 1\n    local paren_stack_size = 0\n    local paren_stack_max = 0\n    local paren_stack_max_index = 0\n    local paren_stack_max_size = 0\n    local paren_stack_max_max = 0\n    local paren_stack_max_max_index = 0\n    local paren_stack_max_max_size = 0\n    local paren_stack_max_max_max = 0\n    local paren_stack_max_max_max_index = 0\n    local paren_stack_max_max_max_size = 0\n    local paren_stack_max_max_max_max = 0\n    local paren_stack_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max = 0\n    local paren_stack_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max = 0\n    local paren_stack_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max_max = 0\n    local paren_stack_max_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max_max_max = 0\n    local paren_stack_max_max_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_max_max_size = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpl9o28szz.lua:45: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_stack_index = 0\n    local paren_stack_count = 0\n    local paren_stack_depth = 0\n    local paren_stack_index_count = 0\n    local paren_stack_depth_count = 0\n    local paren_stack_depth_index = 0\n    local paren_stack_depth_index_count = 0\n    local paren_stack_depth_index_count_count = 0\n    local paren_stack_depth_index_count_count_count = 0\n    local paren_stack_depth_index_count_count_count_count = 0\n    local paren_stack_depth_index_count_count_count_count_count = 0\n    local paren_stack_depth_index_count_count_count_count_count_count = 0\n    local paren_stack_depth_index_count_count_count_count_count_count_count = 0\n    local paren_stack_depth_index_count_count_count_count_count_count_count_count = 0\n    local paren_stack_depth_index_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_depth_index_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_depth_index_count_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_depth_index_count_count_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_depth_index_count_count_count_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_depth_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_depth_index_count_count_count_count_count_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp96g7zc7v.lua:40: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n            paren_count = paren_count + 1\n            if paren_stacknlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpyg2u8m63.lua:14: ']' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        resultnlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp64_4yv1_.lua:10: ']' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_count = 0\n    local paren_stack_max = 0\n    local paren_stack_max_index = 0\n    local paren_stack_max_count = 0\n    local paren_stack_max_count_index = 0\n    local paren_stack_max_count_count = 0\n    local paren_stack_max_count_count_index = 0\n    local paren_stack_max_count_count_count = 0\n    local paren_stack_max_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpncqgkefu.lua:43: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmprid48a_k.lua:10: ']' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmprid48a_k.lua:10: ']' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmprid48a_k.lua:10: ']' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmprid48a_k.lua:10: ']' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        resultnlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp752n33v4.lua:10: ']' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n            if paren_stack[#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpcarn_i9q.lua:14: ']' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    for i = 1,#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp8ww_7dn1.lua:12: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    local paren_stack = {}\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpnl50y5hk.lua:10: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?)')) do\n        result[#                                                                                                                                                      \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp89032yvh.lua:10: ']' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmprid48a_k.lua:10: ']' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_size = 0\n    local paren_stack_max = 0\n    local paren_stack_max_index = 0\n    local paren_stack_max_size = 0\n    local paren_stack_max_max = 0\n    local paren_stack_max_max_index = 0\n    local paren_stack_max_max_size = 0\n    local paren_stack_max_max_max = 0\n    local paren_stack_max_max_max_index = 0\n    local paren_stack_max_max_max_size = 0\n    local paren_stack_max_max_max_max = 0\n    local paren_stack_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max = 0\n    local paren_stack_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max = 0\n    local paren_stack_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max_max = 0\n    local paren_stack_max_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max_max_max = 0\n    local paren_stack_max_max_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_max_max_size = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpqs1mc0sn.lua:45: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907447
    },
    {
      "exit_code": 1,
      "program": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_count = 0\n    local paren_stack_index_count = 0\n    local paren_stack_count_count = 0\n    local paren_stack_count_index = 0\n    local paren_stack_count_index_count = 0\n    local paren_stack_count_index_count_count = 0\n    local paren_stack_count_index_count_index = 0\n    local paren_stack_count_index_count_index_count = 0\n    local paren_stack_count_index_count_index_count_count = 0\n    local paren_stack_count_index_count_index_count_index = 0\n    local paren_stack_count_index_count_index_count_index_count = 0\n    local paren_stack_count_index_count_index_count_index_count_count = 0\n    local paren_stack_count_index_count_index_count_index_count_index = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count_count = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count_index = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count_index_count = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count_index_count_count = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count_index_count_index = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count_index_count_index_count = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp3qdi6n0m.lua:41: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907447
    }
  ]
}