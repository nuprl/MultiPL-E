{
  "name": "HumanEval_101_words_string",
  "language": "lua",
  "prompt": "-- You will be given a string of words separated by commas or spaces. Your task is\n-- to split the string into words and return a table of the words.\n-- For example:\n-- >>> words_string(\"Hi, my name is John\")\n-- [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n-- >>> words_string(\"One, two, three, four, five, six\")\n-- [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nlocal function words_string(s)\n",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is', 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi, my name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two, three, four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})\nend\n\nos.exit(lu.LuaUnit.run())",
  "completions": [
    "    local words = {}\n    for i=1,#",
    "    local words = {}\n    for i=1,#",
    "    local words = {}\n    for i = 1, #s, 1 do\n        if s[i] == ',' then\n            words[#",
    "    local words = {}\n    for i
    "    local words = {}\n    for word in string.gmatch(s, \"[^ ,]+\") do\n        words[#",
    "    local words = {}\n    for i=1,#                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ",
    "    local words = {}\n    for word in string.gmatch(s, \"[^ ,]+\") do\n        words[#                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ",
    "    return string.gsub(s, \"[^a-zA-Z0-9]\", \" \") .. \" \"\nend",
    "    local words = {}\n    local word = \"\"\n    for i=1,#",
    "    local words = {}\n    for i=1,#                                                                                                                                                                                    ",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        if s[i] == ' ' then\n            table.insert(words, s[i+1:i+1])\n            i = i + 1\n        elseif s[i] == ',' then\n            table.insert(words, s[i+1:i+1])\n            i = i + 1\n        else\n            table.insert(words, s[i:i])\n            i = i + 1\n    end\n    return words\nend",
    "    local words = {}\n    for i
    "    local words = {}\n    for i=1,#",
    "    local words = {}\n    for i=1,#",
    "    local words = {}\n    local word = \"\"\n    for c in s:\n        if c == \" \" or c == \",\":\n            if word:\n                words[#",
    "    local words = {}\n    for c in string.gsub(s, \"[^a-zA-Z0-9]\", \" \") do\n        words[#                                                            ",
    "    local words = {}\n    for i = 1, #s, 1 do\n        if s[i] == ',' then\n            words[#",
    "    local words = {}\n    for c in s:\n        if c == ',' or c == ' ':\n            if words[#                                                            ",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        if s:sub(i, i) ~= \" \" then\n            words[#",
    "    local words = {}\n    for i
    "    local words = {}\n    for c in s:\n        if c == ' ' or c == ',':\n            if words[#words] > 0:\n                words[#words] = words[#words] + 1\n            words[#words + 1] = \"\"\n        else:\n            words[#words + 1] = words[#words + 1] + c\n    return words\nend",
    "    local words = {}\n    for c in s:\n        if c == ' ' or c == ',':\n            if words[#words] > 0:\n                words[#words] = words[#words] + 1\n            words[#words + 1] = \"\"\n        else:\n            words[#words] = words[#words] + 1\n    return words\nend",
    "    local words = {}\n    for c in s:\n        if c == ' ' or c == ',':\n            if words[#words] ~= nil:\n                words[#words] = words[#words] .. ' '\n            words[#words] = words[#words] .. c\n        else:\n            words[#words] = words[#words] .. c\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ',' then\n            words[#words+1] = s[i+1]\n            i = i + 1\n        end\n    end\n    return words\nend",
    "    return string.gsub(s, \"[^a-zA-Z0-9]\", \" \") .. \" \"\nend",
    "    local words = {}\n    for word in string.gmatch(s, \"[^ ,]+\") do\n        words[#words + 1] = word\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ' ' then\n            words[#words+1] = s[i+1:end]\n            break\n        end\n    end\n    return words\nend",
    "    return string.gsub(s, \"[^a-zA-Z0-9,]\", \" \")\nend",
    "    local words = {}\n    for i = 1, #s, 1 do\n        if s[i] == ',' then\n            words[#words + 1] = s[1:i - 1]\n            i = i + 1\n        end\n    end\n    return words\nend",
    "    return string.gsub(s, \"[^a-zA-Z0-9]\", \" \") .. \" \"\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        if s[i] == ' ' then\n            table.insert(words, s[i+1:i+1])\n            i = i + 1\n        elseif s[i] == ',' then\n            table.insert(words, s[i+1:i+1])\n            i = i + 1\n        else\n            table.insert(words, s[i:i])\n            i = i + 1\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ' ' then\n            words[#words+1] = s[i+1:end]\n            break\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ' ' then\n            words[#words+1] = s[i+1:end]\n            break\n        elseif s[i] == ',' then\n            words[#words+1] = s[i+1:end]\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i = 1, #s, 1 do\n        words[#words + 1] = s:sub(i, i)\n    end\n    return words\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        if s:sub(i, i) == ' ' then\n            table.insert(words, s:sub(1, i-1))\n            i = i + 1\n        elseif s:sub(i, i) == ',' then\n            table.insert(words, s:sub(1, i-1))\n            i = i + 1\n        else\n            i = i + 1\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ',' then\n            words[#words+1] = s[1:i-1]\n            words[#words+1] = words[#words+1] .. \" \"\n        else\n            words[#words+1] = s[1:i]\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ' ' then\n            words[#words+1] = s[i+1:end]\n            break\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i = 1,#s,1 do\n        if s[i] == ' ' then\n            words[#words+1] = s[i+1:end]\n            break\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i = 1,#s,1 do\n        if s[i] == ' ' then\n            words[#words+1] = s[i+1] .. \" \" .. s[i+2]\n            i = i + 2\n        elseif s[i] == ',' then\n            words[#words+1] = s[i+1] .. \" \" .. s[i+2]\n            i = i + 2\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for word in string.gmatch(s, \"[^ ,]+\") do\n        words[#words + 1] = word\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ' ' then\n            words[#words+1] = s[i+1:end]\n            words[#words+1] = words[#words+1] .. \" \"\n        else\n            words[#words+1] = s[i]\n        end\n    end\n    return words\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        if s[i] == ',' or s[i] == ' ' then\n            table.insert(words, s[1:i])\n            i = i + 1\n        end\n        i = i + 1\n    end\n    return words\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        if s[i] == ',' or s[i] == ' ' then\n            table.insert(words, s[1:i])\n            i = i + 1\n        end\n        i = i + 1\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ',' then\n            words[#words+1] = s[1:i-1]\n            words[#words+1] = words[#words+1] .. \" \"\n        else\n            words[#words+1] = s[1:i]\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ',' then\n            words[#words+1] = s[1:i-1]\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ',' then\n            words[#words+1] = s[i+1]\n            i = i + 1\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ' ' then\n            words[#words+1] = s[1:i-1]\n            words[#words+1] = words[#words+1] .. \" \"\n        elseif s[i] == ',' then\n            words[#words+1] = s[1:i-1]\n            words[#words+1] = words[#words+1] .. \" \"\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ',' then\n            words[#words+1] = s[i+1:end]\n            i = i + 1\n        end\n    end\n    return words\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        if s:sub(i, i, \" \") == \" \" then\n            table.insert(words, s:sub(1, i))\n            i = i + 1\n        elseif s:sub(i, i, \",\") == \",\" then\n            table.insert(words, s:sub(1, i))\n            i = i + 1\n        elseif s:sub(i, i, \" \") == \" \" then\n            table.insert(words, s:sub(1, i))\n            i = i + 1\n        elseif s:sub(i, i, \",\") == \",\" then\n            table.insert(words, s:sub(1, i))\n            i = i + 1\n        else\n            table.insert(words, s:sub(1, i))\n            i = i + 1\n        end\n    end\n    return words\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        if s[i] == ' ' then\n            table.insert(words, s[i+1:i+1])\n            i = i + 1\n        elseif s[i] == ',' then\n            table.insert(words, s[i+1:i+1])\n            i = i + 1\n        else\n            table.insert(words, s[i:i])\n            i = i + 1\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ',' then\n            words[#words+1] = s[i+1]\n            i = i + 1\n        end\n    end\n    return words\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        if s[i] == ',' or s[i] == ' ' then\n            table.insert(words, string.sub(s, 1, i - 1))\n            i = i + 1\n        end\n        i = i + 1\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        words[i] = s:sub(i,i)\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ',' then\n            words[#words+1] = s[i+1]\n            i = i+1\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ',' then\n            words[#words+1] = s[1:i-1]\n            words[#words+1] = words[#words+1] .. \" \"\n        else\n            words[#words+1] = s[1:i]\n        end\n    end\n    return words\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        if s[i] == ',' or s[i] == ' ' then\n            table.insert(words, string.sub(s, 1, i-1))\n            i = i + 1\n        end\n        i = i + 1\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ',' then\n            words[#words+1] = string.sub(s, i+1, #s)\n            i = i + 1\n        end\n    end\n    return words\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        if s[i] == ',' or s[i] == ' ' then\n            table.insert(words, string.sub(s, 1, i-1))\n            i = i + 1\n        end\n        i = i + 1\n    end\n    return words\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        if s[i] == ',' or s[i] == ' ' then\n            table.insert(words, s[1:i])\n            i = i + 1\n        end\n        i = i + 1\n    end\n    return words\nend",
    "    return string.gsub(s, \"[^a-zA-Z0-9,]\", \" \")\nend",
    "    return string.gsub(s, \"[^a-zA-Z0-9]\", \" \") .. \" \"\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ',' then\n            words[#words+1] = s[i+1]\n            i = i + 1\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ',' then\n            words[#words+1] = s[1:i-1]\n            words[#words+1] = words[#words+1] .. \" \"\n        else\n            words[#words+1] = s[1:i]\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        words[i] = s:sub(i,i)\n    end\n    return words\nend",
    "    local words = {}\n    for i = 1, #s, 1 do\n        words[#words + 1] = s:sub(i, i)\n    end\n    return words\nend",
    "    local words = {}\n    for c in s:\n        if c == ',' or c == ' ':\n            if words[#words] ~= nil:\n                words[#words] = words[#words] .. ' '\n            words[#words] = words[#words] .. c\n        else:\n            words[#words] = words[#words] .. c\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ',' then\n            words[#words+1] = s[1:i-1]\n            words[#words+1] = words[#words+1] .. \" \"\n        else\n            words[#words+1] = s[1:i]\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ' ' then\n            words[#words+1] = string.sub(s, i+1, #s)\n            i = i + 1\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        words[#words+1] = string.sub(s, i, i)\n    end\n    return words\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        if s[i] == ',' or s[i] == ' ' then\n            table.insert(words, string.sub(s, 1, i-1))\n            i = i + 1\n        end\n        i = i + 1\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        words[#words+1] = string.sub(s, i, i)\n    end\n    return words\nend",
    "    local words = {}\n    for word in string.gmatch(s, \"[^ ,]+\") do\n        words[#words+1] = word\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ',' then\n            words[#words+1] = s[1:i-1]\n            i = i+1\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ',' then\n            words[#words+1] = string.sub(s, i+1, #s)\n            i = i + 1\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ' ' then\n            words[#words+1] = s[i+1:end]\n            words[#words+1] = words[#words+1] .. \" \"\n        else\n            words[#words+1] = s[i:end]\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i = 1,#s,1 do\n        if s[i] == ',' then\n            words[#words+1] = s[1:i-1]\n            words[#words+1] = words[#words+1] .. \" \"\n        else\n            words[#words+1] = s[1:i]\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        words[#words+1] = string.sub(s, i, i)\n    end\n    return words\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        if s[i] == ',' or s[i] == ' ' then\n            table.insert(words, s[1:i])\n            i = i + 1\n        end\n        i = i + 1\n    end\n    return words\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        if s[i] == ',' or s[i] == ' ' then\n            table.insert(words, s[i+1:i-1])\n            i = i + 1\n        end\n        i = i + 1\n    end\n    return words\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        if s:sub(i, i) == \" \" then\n            table.insert(words, s:sub(1, i))\n            i = i + 1\n        elseif s:sub(i, i) == \",\" then\n            table.insert(words, s:sub(1, i))\n            i = i + 1\n        end\n    end\n    return words\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        if s[i] == ',' or s[i] == ' ' then\n            table.insert(words, s[1:i])\n            i = i + 1\n        end\n        i = i + 1\n    end\n    return words\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        if s[i] == ',' or s[i] == ' ' then\n            table.insert(words, string.sub(s, 1, i - 1))\n            i = i + 1\n        end\n        i = i + 1\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        words[#words+1] = s:sub(i,i)\n    end\n    return words\nend",
    "    return string.gsub(s, \"[^a-zA-Z0-9, ]+\", \" \")\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        if s[i] == ' ' then\n            table.insert(words, s[i+1:i-1])\n            i = i + 1\n        elseif s[i] == ',' then\n            table.insert(words, s[i+1:i-1])\n            i = i + 1\n        else\n            table.insert(words, s[i])\n            i = i + 1\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ',' then\n            words[#words+1] = s[1:i-1]\n            words[#words+1] = words[#words+1] .. \" \"\n        else\n            words[#words+1] = s[1:i]\n        end\n    end\n    return words\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        if s[i] == ',' or s[i] == ' ' then\n            table.insert(words, s[1:i])\n            i = i + 1\n        end\n        i = i + 1\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ' ' then\n            words[#words+1] = s[i+1:end]\n            break\n        end\n    end\n    return words\nend",
    "    return string.gsub(s, \"[^a-zA-Z0-9, ]\", \" \")\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ' ' then\n            words[#words+1] = s[i+1:end]\n            break\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i = 1, #s, 1 do\n        if s[i] == ',' then\n            words[#words + 1] = s[1:i]\n            i = i + 1\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ',' then\n            words[#words+1] = s[1:i-1]\n            words[#words+1] = words[#words+1] .. \" \"\n        else\n            words[#words+1] = s[1:i]\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i = 1, #s, 1 do\n        if s[i] == ' ' then\n            words[#words+1] = s[i+1:end]\n            words[#words+1] = words[#words+1] .. ' '\n            i = i + 1\n        elseif s[i] == ',' then\n            words[#words+1] = s[i+1:end]\n            words[#words+1] = words[#words+1] .. ' '\n            i = i + 1\n        else\n            words[#words+1] = s[i:end]\n            i = i + 1\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ',' then\n            words[#words+1] = s[i+1]\n            i = i + 1\n        end\n    end\n    return words\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        if s[i] == ',' or s[i] == ' ' then\n            table.insert(words, s[i+1:i])\n            i = i + 1\n        end\n        i = i + 1\n    end\n    return words\nend",
    "    return string.gsub(s, \"[^a-zA-Z0-9]\", \" \") .. \" \"\nend",
    "    local words = {}\n    for c in s:\n        if c == ' ' or c == ',':\n            if words[#words] > 0:\n                words[#words] = words[#words] + 1\n            words[#words + 1] = \"\"\n        else:\n            words[#words + 1] = words[#words + 1] + c\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ',' then\n            words[#words+1] = s[1:i-1]\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ',' then\n            words[#words+1] = s[i+1:end]\n            break\n        end\n    end\n    return words\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        if s[i] == ',' or s[i] == ' ' then\n            table.insert(words, string.sub(s, 1, i - 1))\n            i = i + 1\n        end\n        i = i + 1\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ',' then\n            words[#words+1] = s[1:i-1]\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ' ' then\n            words[#words+1] = s[i+1]\n            words[#words+1] = words[#words+1] .. \" \"\n        else\n            words[#words+1] = s[i]\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for c in s:\n        if c == ',' or c == ' ':\n            if words[#words] > 0:\n                words[#words] = words[#words] + 1\n            words[#words + 1] = \"\"\n        else:\n            words[#words] = words[#words] + 1\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ',' then\n            words[#words+1] = s[i+1]\n            i = i + 1\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ' ' then\n            words[#words+1] = s[i+1:end]\n            words[#words+1] = words[#words+1] .. ' '\n        else\n            words[#words+1] = s[i]\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        words[#words+1] = s:sub(i,i)\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ',' then\n            words[#words+1] = s[1:i-1]\n            words[#words+1] = words[#words+1] .. \" \"\n        else\n            words[#words+1] = s[1:i]\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ',' then\n            words[#words+1] = s[1:i-1]\n            words[#words+1] = words[#words+1] .. \" \"\n        else\n            words[#words+1] = s[1:i]\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ',' then\n            words[#words+1] = s[i+1]\n            i = i+1\n        elseif s[i] == ' ' then\n            words[#words+1] = s[i+1]\n            i = i+1\n        end\n    end\n    return words\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        local word = string.sub(s, i, i)\n        if word ~= '' then\n            table.insert(words, word)\n        end\n        i = i + 1\n    end\n    return words\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        if s:sub(i, i) == ' ' then\n            table.insert(words, s:sub(1, i))\n            i = i + 1\n        elseif s:sub(i, i) == ',' then\n            table.insert(words, s:sub(1, i))\n            i = i + 1\n        else\n            i = i + 1\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        words[#words+1] = string.sub(s, i, i)\n    end\n    return words\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        if s[i] == ',' or s[i] == ' ' then\n            local word = string.sub(s, i+1, -1)\n            words[#words+1] = word\n            i = i + 1\n        end\n        i = i + 1\n    end\n    return words\nend",
    "    local words = {}\n    for word in string.gmatch(s, \"[^ ,]+\") do\n        words[#words+1] = word\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ',' then\n            words[#words+1] = s[1:i-1]\n            words[#words+1] = words[#words+1] .. \" \"\n        else\n            words[#words+1] = s[1:i]\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ',' then\n            words[#words+1] = s[i+1]\n            i = i+1\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ',' then\n            words[#words+1] = s[1:i-1]\n            words[#words+1] = words[#words+1] .. \" \"\n        else\n            words[#words+1] = s[1:i]\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for word in string.gmatch(s, \"[^ ,]+\") do\n        words[#words + 1] = word\n    end\n    return words\nend",
    "    local words = {}\n    for word in string.gmatch(s, \"[^ ,]+\") do\n        words[#words + 1] = word\n    end\n    return words\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        if s[i] == ',' or s[i] == ' ' then\n            table.insert(words, string.sub(s, 1, i-1))\n            i = i + 1\n        end\n        i = i + 1\n    end\n    return words\nend",
    "    local words = {}\n    for i = 1, #s, 1 do\n        local word = string.sub(s, i, i)\n        if word ~= \"\" then\n            table.insert(words, word)\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ',' then\n            words[#words+1] = s[i+1]\n            i = i + 1\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ' ' then\n            words[#words+1] = s[i+1:end]\n            words[#words+1] = words[#words+1] .. ' '\n            i = i + 1\n        elseif s[i] == ',' then\n            words[#words+1] = s[i+1:end]\n            words[#words+1] = words[#words+1] .. ' '\n            i = i + 1\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for word in string.gmatch(s, \"[^ ,]+\") do\n        words[#words + 1] = word\n    end\n    return words\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        if s[i] == ',' or s[i] == ' ' then\n            table.insert(words, string.sub(s, 1, i - 1))\n            i = i + 1\n        end\n        i = i + 1\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ',' then\n            words[#words+1] = s[i+1]\n            i = i + 1\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i = 1, #s, 1 do\n        if s[i] == ',' then\n            words[#words + 1] = s[1:i - 1]\n            i = i + 1\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for word in string.gmatch(s, \"[^ ,]+\") do\n        words[#words + 1] = word\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ' ' then\n            words[#words+1] = s[i+1]\n            words[#words+1] = s[i+2]\n        else\n            words[#words+1] = s[i]\n        end\n    end\n    return words\nend",
    "    return string.gsub(s, \"[^a-zA-Z0-9, ]\", \" \")\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        if s[i] == ' ' then\n            words[#words + 1] = s[i + 1]\n            i = i + 1\n        elseif s[i] == ',' then\n            words[#words + 1] = s[i + 1]\n            i = i + 1\n        else\n            words[#words + 1] = s[i]\n            i = i + 1\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ' ' then\n            words[#words+1] = string.sub(s, i+1, #s)\n            i = i+1\n        end\n    end\n    return words\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        if s[i] == ',' or s[i] == ' ' then\n            local word = string.sub(s, i, i)\n            if word ~= '' then\n                words[#words + 1] = word\n            end\n            i = i + 1\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ',' then\n            words[#words+1] = s[1:i-1]\n            words[#words+1] = words[#words+1] .. \" \"\n        else\n            words[#words+1] = s[1:i]\n        end\n    end\n    return words\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        local word = string.sub(s, i, i)\n        if word ~= \"\" then\n            table.insert(words, word)\n        end\n        i = i + 1\n    end\n    return words\nend",
    "    return string.gsub(s, \"[^a-zA-Z0-9]\", \" \") .. \" \"\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ',' then\n            words[#words+1] = s[i+1]\n            i = i+1\n        end\n    end\n    return words\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        if s[i] == ',' or s[i] == ' ' then\n            table.insert(words, string.sub(s, 1, i-1))\n            i = i + 1\n        end\n        i = i + 1\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ' ' then\n            words[#words+1] = s[i+1:end]\n            break\n        end\n    end\n    return words\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        if s[i] == ' ' then\n            words[#words + 1] = s[i + 1]\n            i = i + 1\n        elseif s[i] == ',' then\n            words[#words + 1] = s[i + 1]\n            i = i + 1\n        else\n            words[#words + 1] = s[i]\n            i = i + 1\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ',' then\n            words[#words+1] = string.sub(s, i+1, #s)\n            i = i + 1\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        words[#words+1] = string.sub(s, i, i)\n    end\n    return words\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        if s[i] == ',' or s[i] == ' ' then\n            table.insert(words, string.sub(s, 1, i - 1))\n            i = i + 1\n        end\n        i = i + 1\n    end\n    return words\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        if s[i] == ',' or s[i] == ' ' then\n            table.insert(words, string.sub(s, 1, i - 1))\n            i = i + 1\n        end\n        i = i + 1\n    end\n    return words\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        if s:sub(i, i) == ' ' then\n            table.insert(words, s:sub(1, i))\n            i = i + 1\n        elseif s:sub(i, i) == ',' then\n            table.insert(words, s:sub(1, i))\n            i = i + 1\n        else\n            i = i + 1\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ',' then\n            words[#words+1] = string.sub(s, i+1, #s)\n            i = i + 1\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ' ' then\n            words[#words+1] = s[i+1:end]\n            words[#words+1] = words[#words+1] .. \" \"\n        else\n            words[#words+1] = s[i]\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ',' then\n            words[#words+1] = s[1:i-1]\n            i = i+1\n        end\n    end\n    return words\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        if s[i] == ' ' then\n            table.insert(words, s[i+1:i+1])\n            i = i + 1\n        elseif s[i] == ',' then\n            table.insert(words, s[i+1:i+1])\n            i = i + 1\n        else\n            table.insert(words, s[i:i])\n            i = i + 1\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ',' then\n            words[#words+1] = s[i+1]\n            i = i + 1\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ',' then\n            words[#words+1] = s[i+1:end]\n            break\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ',' then\n            words[#words+1] = s[i+1] .. \" \" .. s[i+2]\n            i = i + 2\n        elseif s[i] == ' ' then\n            words[#words+1] = s[i+1] .. \" \" .. s[i+2]\n            i = i + 2\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ' ' then\n            words[#words+1] = s[i+1:end]\n            words[#words+1] = words[#words+1] .. ' '\n            i = i + 1\n        elseif s[i] == ',' then\n            words[#words+1] = s[i+1:end]\n            i = i + 1\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ',' then\n            words[#words+1] = s[1:i-1]\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ',' then\n            words[#words+1] = s[i+1]\n            i = i + 1\n        end\n    end\n    return words\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        if s:sub(i, i) == ' ' then\n            table.insert(words, s:sub(1, i-1))\n            i = i + 1\n        elseif s:sub(i, i) == ',' then\n            table.insert(words, s:sub(1, i-1))\n            i = i + 1\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ',' then\n            words[#words+1] = s[1:i-1]\n            words[#words+1] = words[#words+1] .. \" \"\n        else\n            words[#words+1] = s[1:i]\n        end\n    end\n    return words\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        if s[i] == ',' or s[i] == ' ' then\n            table.insert(words, s[i+1:i])\n            i = i + 1\n        end\n        i = i + 1\n    end\n    return words\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        local word = string.sub(s, i, i)\n        if word ~= \"\" then\n            table.insert(words, word)\n        end\n        i = i + 1\n    end\n    return words\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        if s:sub(i, i) == ' ' then\n            table.insert(words, s:sub(1, i))\n            i = i + 1\n        elseif s:sub(i, i) == ',' then\n            table.insert(words, s:sub(1, i))\n            i = i + 1\n        else\n            i = i + 1\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ' ' then\n            words[#words+1] = s[i+1:end]\n            words[#words+1] = words[#words+1] .. \" \"\n        else\n            words[#words+1] = s[i]\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i = 1, #s, 1 do\n        words[#words + 1] = string.sub(s, i, i)\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ',' then\n            words[#words+1] = s[1:i-1]\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ' ' then\n            words[#words+1] = s[i+1:end]\n            break\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for word in string.gmatch(s, \"[^ ,]+\") do\n        words[#words + 1] = word\n    end\n    return words\nend",
    "    local words = {}\n    for i = 1, #s, 1 do\n        if s[i] == ' ' then\n            words[#words+1] = s[i+1]\n            i = i + 1\n        elseif s[i] == ',' then\n            words[#words+1] = s[i+1]\n            i = i + 1\n        end\n    end\n    return words\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        if s[i] == ',' or s[i] == ' ' then\n            local word = string.sub(s, i, i)\n            words[#words + 1] = word\n            i = i + 1\n        end\n        i = i + 1\n    end\n    return words\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        if s[i] == ',' or s[i] == ' ' then\n            local word = string.sub(s, i + 1, -1)\n            if word ~= '' then\n                words[#words + 1] = word\n            end\n            i = i + 1\n        end\n        i = i + 1\n    end\n    return words\nend",
    "    local words = {}\n    for i = 1, #s, 1 do\n        words[#words + 1] = string.sub(s, i, i)\n    end\n    return words\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        if s[i] == ',' or s[i] == ' ' then\n            table.insert(words, string.sub(s, 1, i-1))\n            i = i + 1\n        end\n        i = i + 1\n    end\n    return words\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        if s[i] == ',' or s[i] == ' ' then\n            table.insert(words, s[1:i])\n            i = i + 1\n        end\n        i = i + 1\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ',' then\n            words[#words+1] = s[i+1:end]\n            i = i + 1\n        end\n    end\n    return words\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        if s[i] == ',' or s[i] == ' ' then\n            local word = string.sub(s, i + 1, -1)\n            if word ~= '' then\n                words[#words + 1] = word\n            end\n            i = i + 1\n        end\n        i = i + 1\n    end\n    return words\nend",
    "    local words = {}\n    for i = 1, #s, 1 do\n        words[#words + 1] = s:sub(i, i)\n    end\n    return words\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        if s[i] == ',' or s[i] == ' ' then\n            table.insert(words, s[1:i])\n            i = i + 1\n        end\n        i = i + 1\n    end\n    return words\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        if s[i] == ',' or s[i] == ' ' then\n            table.insert(words, s[1:i])\n            i = i + 1\n        end\n        i = i + 1\n    end\n    return words\nend",
    "    local words = {}\n    for c in s:\n        if c == ',' or c == ' ':\n            if words[#words] ~= nil:\n                words[#words] = words[#words] .. ' '\n            words[#words] = words[#words] .. c\n        else:\n            words[#words] = words[#words] .. c\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ' ' then\n            words[#words+1] = s[i+1]\n            i = i+1\n        elseif s[i] == ',' then\n            words[#words+1] = s[i+1]\n            i = i+1\n        end\n    end\n    return words\nend",
    "    return string.gsub(s, \"[^a-zA-Z0-9,]\", \" \")\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        local word = string.sub(s, i, i)\n        if word ~= \"\" then\n            table.insert(words, word)\n        end\n        i = i + 1\n    end\n    return words\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        if s[i] == ',' or s[i] == ' ' then\n            table.insert(words, string.sub(s, 1, i-1))\n            i = i + 1\n        end\n        i = i + 1\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ',' then\n            words[#words+1] = s[1:i-1]\n            i = i+1\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ' ' then\n            words[#words+1] = s[i+1]\n            i = i + 1\n        elseif s[i] == ',' then\n            words[#words+1] = s[i+1]\n            i = i + 1\n        end\n    end\n    return words\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        if s[i] == ' ' then\n            table.insert(words, s[i+1:i-1])\n            i = i + 1\n        elseif s[i] == ',' then\n            table.insert(words, s[i+1:i-1])\n            i = i + 1\n        else\n            table.insert(words, s[i])\n            i = i + 1\n    end\n    return words\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        if s[i] == ',' then\n            table.insert(words, s[i+1:i+2])\n            i = i + 2\n        elseif s[i] == ' ' then\n            table.insert(words, s[i+1:i+2])\n            i = i + 2\n        else\n            table.insert(words, s[i])\n            i = i + 1\n    end\n    return words\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        local word = string.sub(s, i, i)\n        if word ~= \"\" then\n            table.insert(words, word)\n        end\n        i = i + 1\n    end\n    return words\nend",
    "    local words = {}\n    for i = 1,#s,1 do\n        if s[i] == ',' then\n            words[#words+1] = s[1:i-1]\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i = 1, #s, 1 do\n        words[#words + 1] = s:sub(i, i)\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        words[#words+1] = string.sub(s, i, i)\n    end\n    return words\nend",
    "    local words = {}\n    for word in string.gmatch(s, \"[^ ,]+\") do\n        words[#words + 1] = word\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ',' then\n            words[#words+1] = s[i+1]\n            i = i + 1\n        end\n    end\n    return words\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        if s[i] == ' ' then\n            table.insert(words, s[i+1:i-1])\n            i = i + 1\n        elseif s[i] == ',' then\n            table.insert(words, s[i+1:i-1])\n            i = i + 1\n        else\n            table.insert(words, s[i])\n            i = i + 1\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ',' then\n            words[#words+1] = string.sub(s, i+1, #s)\n            i = i + 1\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ' ' then\n            words[#words+1] = s[i+1]\n            i = i+1\n        end\n    end\n    return words\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        if s[i] == ',' or s[i] == ' ' then\n            table.insert(words, s[1:i])\n            i = i + 1\n        end\n        i = i + 1\n    end\n    return words\nend",
    "    local words = {}\n    for i=1,#s,1 do\n        if s[i] == ' ' then\n            words[#words+1] = s[i+1:end]\n            break\n        elseif s[i] == ',' then\n            words[#words+1] = s[i+1:end]\n        end\n    end\n    return words\nend",
    "    local words = {}\n    for i = 1, #s, 1 do\n        if s[i] == ',' then\n            words[#words+1] = s[1:i-1]\n            i = i+1\n        end\n    end\n    return words\nend",
    "    local words = {}\n    local i = 1\n    while i <= #s do\n        if s[i] == ',' or s[i] == ' ' then\n            table.insert(words, string.sub(s, 1, i-1))\n            i = i + 1\n        end\n        i = i + 1\n    end\n    return words\nend",
    "    local words = {}\n    for i = 1, #s, 1 do\n        words[#words + 1] = string.sub(s, i, i)\n    end\n    return words\nend",
    "    local words = {}\n    for i = 1, #s, 1 do\n        if s[i] == ',' then\n            words[#words + 1] = s[i + 1]\n            i = i + 1\n        elseif s[i] == ' ' then\n            words[#words + 1] = s[i + 1]\n            i = i + 1\n        end\n    end\n    return words\nend"
  ],
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ]
}