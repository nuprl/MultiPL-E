language: lua
name: HumanEval_61_correct_bracketing
results:
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n     \
    \       result = false\n            break\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907516
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local function is_open_bracket(c)\n      \
    \  return c == \"(\" or c == \"[\" or c == \"{\"\n    end\n    local function\
    \ is_close_bracket(c)\n        return c == \")\" or c == \"]\" or c == \"}\"\n\
    \    end\n    local function is_balanced(brackets)\n        local i = 1\n    \
    \    while i <= #brackets do\n            if not is_open_bracket(brackets[i])\
    \ and not is_close_bracket(brackets[i]) then\n                return false\n \
    \           end\n            i = i + 1\n        end\n        return true\n   \
    \ end\n    return is_balanced(brackets)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd2dmma21.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpd2dmma21.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907516
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n\
    \    local bracket_count = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i]\
    \ == '(' and brackets[i+1] == ')' then\n            bracket_count = bracket_count\
    \ + 1\n        end\n    end\n    if bracket_count == 0 then return true end\n\
    \    return bracket_count == #brackets - 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1jj20jdm.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1jj20jdm.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907516
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n     \
    \       result = false\n            break\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907516
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n     \
    \       result = false\n            break\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907516
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local open_brackets = {'(', '{', '['}\n  \
    \  local close_brackets = {')', '}', ']'}\n    local result = true\n    for _,\
    \ v in ipairs(brackets) do\n        if v not in open_brackets then\n         \
    \   result = false\n            break\n    end\n    for _, v in ipairs(brackets)\
    \ do\n        if v not in close_brackets then\n            result = false\n  \
    \          break\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqhnpcg83.lua:16: ''then'' expected near ''not''

    '
  stdout: ''
  timestamp: 1661907516
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n     \
    \       result = false\n            break\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907516
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n     \
    \       result = false\n            break\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907516
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local open_brackets = 0\n    local close_brackets\
    \ = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == '(' then\n  \
    \          open_brackets = open_brackets + 1\n        elseif brackets[i] == ')'\
    \ then\n            close_brackets = close_brackets + 1\n        end\n    end\n\
    \    return open_brackets == close_brackets\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd1api7v5.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpd1api7v5.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907516
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"(\" and brackets[i] ~= \")\" then\n      \
    \      result = false\n            break\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp658rd3gl.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp658rd3gl.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907516
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local function is_open_bracket(c)\n      \
    \  return c == \"(\" or c == \"[\" or c == \"{\"\n    end\n    local function\
    \ is_close_bracket(c)\n        return c == \")\" or c == \"]\" or c == \"}\"\n\
    \    end\n    local function is_balanced(brackets)\n        local i = 1\n    \
    \    while i <= #brackets do\n            if not is_open_bracket(brackets[i])\
    \ and not is_close_bracket(brackets[i]) then\n                return false\n \
    \           end\n            i = i + 1\n        end\n        return true\n   \
    \ end\n    return is_balanced(brackets)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd2dmma21.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpd2dmma21.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907516
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"(\" and brackets[i] ~= \")\" then\n      \
    \      result = false\n            break\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp658rd3gl.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp658rd3gl.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907516
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n\
    \    local open_brackets = 0\n    local close_brackets = 0\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] == \"(\" then open_brackets = open_brackets + 1\
    \ end\n        if brackets[i] == \")\" then close_brackets = close_brackets +\
    \ 1 end\n    end\n    if open_brackets == close_brackets then return true end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt__9vu15.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpt__9vu15.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907516
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n     \
    \       result = false\n            break\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907516
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n     \
    \       result = false\n            break\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907516
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local function is_open_bracket(c)\n      \
    \  return c == \"(\" or c == \"{\" or c == \"[\"\n    end\n    local function\
    \ is_close_bracket(c)\n        return c == \")\" or c == \"}\" or c == \"]\"\n\
    \    end\n    local function is_balanced(brackets)\n        local function is_balanced_bracket(c)\n\
    \            return is_open_bracket(c) and is_close_bracket(brackets[#       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                               \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfoai_nrj.lua:21: '']'' expected near ''=''

    '
  stdout: ''
  timestamp: 1661907516
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n     \
    \       result = false\n            break\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907516
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n\
    \    local bracket_count = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i]\
    \ == \"(\" and brackets[i+1] == \")\" then\n            bracket_count = bracket_count\
    \ + 1\n        end\n    end\n    if bracket_count == 0 then return true end\n\
    \    return bracket_count == #brackets\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_p2l2zy.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmph_p2l2zy.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907516
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    local i = 1\n    while i <= #brackets do\n\
    \        if brackets[i] ~= \"(\" then\n            return true\n        end\n\
    \        i = i + 1\n    end\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyk_2fxgh.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpyk_2fxgh.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907516
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
    )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
    (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
    \ correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n\
    \    local bracket_count = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i]\
    \ == \"(\" and brackets[i+1] == \")\" then\n            bracket_count = bracket_count\
    \ + 1\n        end\n    end\n    if bracket_count == 0 then return true end\n\
    \    return bracket_count == #brackets - 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpu9938l.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfpu9938l.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907516
