name: HumanEval_40_triples_sum_to_zero
language: lua
prompt: "-- triples_sum_to_zero takes a table of integers as an input.\n-- it returns\
  \ true if there are three distinct elements in the table that\n-- sum to zero, and\
  \ false otherwise.\n-- >>> triples_sum_to_zero([1, 3, 5, 0])\n-- False\n-- >>> triples_sum_to_zero([1,\
  \ 3, -2, 1])\n-- True\n-- >>> triples_sum_to_zero([1, 2, 3, 7])\n-- False\n-- >>>\
  \ triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n-- True\n-- >>> triples_sum_to_zero([1])\n\
  -- False\nlocal function triples_sum_to_zero(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triples_sum_to_zero\n\
  \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
  \ 3, 5, -1}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), true)\n    lu.assertEquals(candidate({1,\
  \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({1, 2, 5, 7}), false)\n    lu.assertEquals(candidate({2,\
  \ 4, -5, 3, 9, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({1,\
  \ 3, 5, -100}), false)\n    lu.assertEquals(candidate({100, 3, 5, -100}), false)\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local t = {}\n    for i = 1, #l, 3 do\n        if l[i] ~= 0 and\
    \ l[i+1] ~= 0 and l[i+2] ~= 0 then\n            table.insert(t, l[i] + l[i+1]\
    \ + l[i+2])\n        end\n    end\n    return #t == 0 and true or false\nend",
  "    local t = {}\n    for i = 1, #l, 3 do\n        t[l[i]] = l[i+1]\n    end\n\
    \    for i = 1, #t, 3 do\n        if t[i] == 0 then\n            return true\n\
    \        end\n    end\n    return false\nend", "    local t = {}\n    for i =\
    \ 1, #l, 3 do\n        t[l[i]] = l[i+1]\n    end\n    return #t == 0\nend", " \
    \   local t = {}\n    for i = 1, #l, 3 do\n        if l[i] ~= 0 and l[i+1] ~=\
    \ 0 and l[i+2] ~= 0 then\n            table.insert(t, l[i] + l[i+1] + l[i+2])\n\
    \        end\n    end\n    return #t > 0\nend", "    local t = {}\n    for i =\
    \ 1, #l, 3 do\n        if l[i] ~= 0 and l[i+1] ~= 0 and l[i+2] ~= 0 then\n   \
    \         table.insert(t, l[i] + l[i+1] + l[i+2])\n        end\n    end\n    return\
    \ #t > 0 and true or false\nend", "    local t = {}\n    for i = 1, #l, 3 do\n\
    \        if l[i] ~= 0 and l[i+1] ~= 0 and l[i+2] ~= 0 then\n            table.insert(t,\
    \ l[i] + l[i+1] + l[i+2])\n        end\n    end\n    return #t > 0 and table.concat(t,\
    \ table.concat({0}, table.concat(t, {0}))) == 0\nend", "    local t = {}\n   \
    \ for i = 1, #l, 3 do\n        if l[i] ~= 0 and l[i+1] ~= 0 and l[i+2] ~= 0 then\n\
    \            table.insert(t, l[i] + l[i+1] + l[i+2])\n        end\n    end\n \
    \   return #t > 0 and table.concat(t, table.concat({0}, table.concat(t, {0})))\
    \ == 0\nend", "    local t = {}\n    for i = 1, #l, 2 do\n        t[l[i]] = l[i+1]\n\
    \    end\n    for i = 1, #t, 2 do\n        if t[i] == 0 then\n            return\
    \ true\n        end\n    end\n    return false\nend", "    local t = {}\n    for\
    \ i = 1, #l, 3 do\n        t[l[i]] = l[i+1]\n    end\n    return #t == 0 and true\
    \ or false\nend", "    local t = {}\n    for i = 1, #l, 3 do\n        if l[i]\
    \ ~= 0 and l[i+1] ~= 0 and l[i+2] ~= 0 then\n            table.insert(t, l[i]\
    \ + l[i+1] + l[i+2])\n        end\n    end\n    return #t > 0 and table.concat(t,\
    \ t) == 0\nend", "    local t = {}\n    for i = 1, #l, 3 do\n        t[l[i]] =\
    \ l[i+1]\n    end\n    for i = 1, #l, 3 do\n        t[l[i]] = l[i+2]\n    end\n\
    \    for i = 1, #l, 3 do\n        t[l[i]] = l[i+1]\n    end\n    for i = 1, #l,\
    \ 3 do\n        t[l[i]] = l[i+2]\n    end\n    for i = 1, #l, 3 do\n        t[l[i]]\
    \ = l[i+1]\n    end\n    for i = 1, #l, 3 do\n        t[l[i]] = l[i+2]\n    end\n\
    \    for i = 1, #l, 3 do\n        t[l[i]] = l[i+1]\n    end\n    for i = 1, #l,\
    \ 3 do\n        t[l[i]] = l[i+2]\n    end\n    for i = 1, #l, 3 do\n        t[l[i]]\
    \ = l[i+1]\n    end\n    for i = 1, #l, 3 do\n        t[l[i]] = l[i+2]\n    end\n\
    \    for i = 1, #l, 3 do\n        t[l[i]] = l[i+1]\n    end\n    for i = 1, #l,\
    \ 3 do\n        t[l[i]] = l[i+2]\n    end\n    for i = 1, #l, 3 do\n        t[l[i]]\
    \ = l[i+1]\n    end\n    for i = 1, #l, 3 do\n        t[l[i]] = l[i+2]\n    end\n\
    \    for i = 1, #l, 3 do\n        t[l[i]] = l[i+1]\n    end\n    for i = 1, #l,\
    \ 3 do\n        t[l[i]] = l[i+2]\n    end\n    for i = 1, #l, 3 do\n        t[l[i]]\
    \ = l[i+1]", "    local t = {}\n    for i = 1, #l, 2 do\n        if l[i] ~= 0\
    \ then\n            if t[l[i]] == nil then\n                t[l[i]] = 1\n    \
    \        else\n                t[l[i]] = t[l[i]] + 1\n            end\n      \
    \      if t[l[i]] == 3 then\n                return true\n            end\n  \
    \      end\n    end\n    return false\nend", "    local t = {}\n    for i = 1,\
    \ #l, 3 do\n        t[l[i]] = l[i+1]\n    end\n    return t[1] == 0 and t[2] ==\
    \ 0 and t[3] == 0\nend", "    local t = {}\n    for i = 1, #l, 3 do\n        t[l[i]]\
    \ = l[i+1]\n    end\n    for i = 1, #t, 3 do\n        if t[i] == 0 then\n    \
    \        return true\n        end\n    end\n    return false\nend", "    local\
    \ t = {}\n    for i = 1, #l, 3 do\n        t[l[i]] = l[i+1]\n    end\n    return\
    \ t[1] == 0 and t[2] == 0 and t[3] == 0\nend", "    local t = {}\n    for i =\
    \ 1, #l, 3 do\n        t[l[i]] = l[i+1]\n    end\n    for i = 1, #t, 3 do\n  \
    \      t[t[i]] = i\n    end\n    return #t == 0 and true or false\nend", "   \
    \ local t = {}\n    for i = 1, #l, 3 do\n        if l[i] ~= 0 then\n         \
    \   if t[l[i]] == nil then\n                t[l[i]] = 1\n            else\n  \
    \              t[l[i]] = t[l[i]] + 1\n            end\n            if t[l[i] +\
    \ l[i + 1]] == nil then\n                t[l[i] + l[i + 1]] = 1\n            else\n\
    \                t[l[i] + l[i + 1]] = t[l[i] + l[i + 1]] + 1\n            end\n\
    \            if t[l[i] + l[i + 1] + l[i + 2]] == nil then\n                t[l[i]\
    \ + l[i + 1] + l[i + 2]] = 1\n            else\n                t[l[i] + l[i +\
    \ 1] + l[i + 2]] = t[l[i] + l[i + 1] + l[i + 2]] + 1\n            end\n      \
    \  end\n    end\n    return t[1] == 3\nend", "    local t = {}\n    for i = 1,\
    \ #l, 2 do\n        if l[i] ~= 0 then\n            if t[l[i]] == nil then\n  \
    \              t[l[i]] = 1\n            else\n                t[l[i]] = t[l[i]]\
    \ + 1\n            end\n            if t[l[i]] == 3 then\n                return\
    \ true\n            end\n        end\n    end\n    return false\nend", "    local\
    \ t = {}\n    for i = 1, #l, 3 do\n        if l[i] ~= 0 and l[i+1] ~= 0 and l[i+2]\
    \ ~= 0 then\n            table.insert(t, l[i] + l[i+1] + l[i+2])\n        end\n\
    \    end\n    return #t > 0 and true or false\nend", "    local t = {}\n    for\
    \ i = 1, #l, 3 do\n        t[l[i]] = l[i+1]\n    end\n    return t[1] == 0 and\
    \ t[2] == 0 and t[3] == 0\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
