{
  "language": "lua",
  "name": "HumanEval_19_sort_numbers",
  "results": [
    {
      "exit_code": 1,
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted = {}\n    for i=1,#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp0jqjxv0y.lua:9: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907406
    },
    {
      "exit_code": 1,
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted = {}\n    for i=1,#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp0jqjxv0y.lua:9: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907406
    },
    {
      "exit_code": 1,
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpgu3kogn3.lua:9: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907406
    },
    {
      "exit_code": 1,
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i = 1, #numbers, 2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i = 1, #sorted_numbers, 2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplvkmhu7w.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmplvkmhu7w.lua:14: in local 'candidate'\n\t/tmp/tmplvkmhu7w.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907407
    },
    {
      "exit_code": 1,
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i = 1, #numbers, 1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i = 1, #sorted_numbers, 1 do\n        for j = 2, #sorted_numbers, 2 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i] = sorted_numbers[j]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk5we37fi.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpk5we37fi.lua:18: in local 'candidate'\n\t/tmp/tmpk5we37fi.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907407
    },
    {
      "exit_code": 1,
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmq9w5ck5.lua:9: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907407
    },
    {
      "exit_code": 1,
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp0t16uhw9.lua:9: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907407
    },
    {
      "exit_code": 1,
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = ''\n    for i = 1, #numbers, 2 do\n        if numbers[i] < numbers[i+1] then\n            sorted_numbers = sorted_numbers .. numbers[i] .. ' ' .. numbers[i+1]\n        end\n    end\n    return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6z4frc1a.lua:9: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp6z4frc1a.lua:9: in local 'candidate'\n\t/tmp/tmp6z4frc1a.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907407
    },
    {
      "exit_code": 1,
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted = {}\n    for i = 1, #numbers, 2 do\n        sorted[tonumber(numbers[i])] = numbers[i]\n    end\n    for i = 1, #sorted, 2 do\n        sorted[tonumber(sorted[i])] = sorted[i]\n    end\n    return ' '.join(sorted[1], sorted[2], sorted[3])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmptks1w647.lua:14: 'end' expected (to close 'function' at line 6) near '.'\n",
      "stdout": "",
      "timestamp": 1661907407
    },
    {
      "exit_code": 1,
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i = 1, #numbers, 1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i = 1, #sorted_numbers, 1 do\n        for j = 2, #sorted_numbers, 2 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i], sorted_numbers[j] = sorted_numbers[j], sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbxkir8fd.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbxkir8fd.lua:18: in local 'candidate'\n\t/tmp/tmpbxkir8fd.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907407
    },
    {
      "exit_code": 1,
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpkh71omsg.lua:9: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907407
    },
    {
      "exit_code": 1,
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i = 1, #numbers, 2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i = 1, #sorted_numbers, 2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplvkmhu7w.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmplvkmhu7w.lua:14: in local 'candidate'\n\t/tmp/tmplvkmhu7w.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907407
    },
    {
      "exit_code": 1,
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i = 1, #numbers, 2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i = 1, #sorted_numbers, 2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return ' '.join(sorted_numbers)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp3pvzz582.lua:14: 'end' expected (to close 'function' at line 6) near '.'\n",
      "stdout": "",
      "timestamp": 1661907407
    },
    {
      "exit_code": 1,
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted = {}\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpn067wn77.lua:9: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907407
    },
    {
      "exit_code": 1,
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i = 1, #numbers, 1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i = 1, #sorted_numbers, 1 do\n        for j = 2, #sorted_numbers, 2 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i], sorted_numbers[j] = sorted_numbers[j], sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbxkir8fd.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpbxkir8fd.lua:18: in local 'candidate'\n\t/tmp/tmpbxkir8fd.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907407
    },
    {
      "exit_code": 1,
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = ''\n    for i = 1, #numbers, 2 do\n        if numbers[i] > numbers[i+1] then\n            sorted_numbers = sorted_numbers .. ' ' .. numbers[i] .. ' ' .. numbers[i+1]\n            numbers[i+1] = numbers[i]\n            numbers[i] = numbers[i+1]\n        end\n    end\n    return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppfkgg7l1.lua:9: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmppfkgg7l1.lua:9: in local 'candidate'\n\t/tmp/tmppfkgg7l1.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907407
    },
    {
      "exit_code": 1,
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp5k_3j297.lua:9: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907407
    },
    {
      "exit_code": 1,
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = ''\n    for i=1,#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmptryreieh.lua:9: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907407
    },
    {
      "exit_code": 1,
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = ''\n    local numbers_list = string.split(numbers, ' ')\n    for i=1,#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpva2yvpvv.lua:10: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907407
    },
    {
      "exit_code": 1,
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpjafdq2_l.lua:9: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907407
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted = {}\n    for i=1,#numbers do\n        sorted[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted do\n        for j=i+1,#sorted do\n            if sorted[i] > sorted[j] then\n                sorted[i],sorted[j] = sorted[j],sorted[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa0vsf_6_.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpa0vsf_6_.lua:18: in local 'candidate'\n\t/tmp/tmpa0vsf_6_.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = ''\n    for i=1,#numbers,2 do\n        if numbers[i] < numbers[i+1] then\n            sorted_numbers = sorted_numbers .. numbers[i] .. ' ' .. numbers[i+1]\n        end\n    end\n    return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphc_9rxe2.lua:9: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmphc_9rxe2.lua:9: in local 'candidate'\n\t/tmp/tmphc_9rxe2.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i = 1, #numbers, 1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i = 1, #sorted_numbers, 1 do\n        for j = 2, #sorted_numbers, 2 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i] = sorted_numbers[j]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk5we37fi.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpk5we37fi.lua:18: in local 'candidate'\n\t/tmp/tmpk5we37fi.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907407
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted = {}\n    for i = 1, #numbers, 1 do\n        sorted[tonumber(numbers[i])] = i\n    end\n    for i = 1, #sorted, 1 do\n        for j = 2, #sorted, 2 do\n            if sorted[j] < sorted[i] then\n                sorted[i], sorted[j] = sorted[j], sorted[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz2jixt0h.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpz2jixt0h.lua:18: in local 'candidate'\n\t/tmp/tmpz2jixt0h.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i = 1, #numbers, 2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i = 1, #sorted_numbers, 2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplvkmhu7w.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmplvkmhu7w.lua:14: in local 'candidate'\n\t/tmp/tmplvkmhu7w.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907407
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted = {}\n    for i=1,#numbers,2 do\n        sorted[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted,2 do\n        sorted[tonumber(sorted[i])] = sorted[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcz8r0568.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpcz8r0568.lua:14: in local 'candidate'\n\t/tmp/tmpcz8r0568.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted_numbers,2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1onp3vm_.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmp1onp3vm_.lua:14: in local 'candidate'\n\t/tmp/tmp1onp3vm_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted = {}\n    for i=1,#numbers,2 do\n        sorted[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted,2 do\n        sorted[tonumber(sorted[i])] = sorted[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcz8r0568.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpcz8r0568.lua:14: in local 'candidate'\n\t/tmp/tmpcz8r0568.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted_numbers,2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphxhmh5lv.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmphxhmh5lv.lua:14: in local 'candidate'\n\t/tmp/tmphxhmh5lv.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted_numbers,2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return string.gsub(sorted_numbers, '%d', '%d')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvfe65u1c.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpvfe65u1c.lua:14: in local 'candidate'\n\t/tmp/tmpvfe65u1c.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted = {}\n    for i=1,#numbers do\n        sorted[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted do\n        for j=i+1,#sorted do\n            if sorted[i] > sorted[j] then\n                sorted[i],sorted[j] = sorted[j],sorted[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa0vsf_6_.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpa0vsf_6_.lua:18: in local 'candidate'\n\t/tmp/tmpa0vsf_6_.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted = {}\n    for i=1,#numbers,2 do\n        sorted[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted,2 do\n        sorted[tonumber(sorted[i])] = sorted[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcz8r0568.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpcz8r0568.lua:14: in local 'candidate'\n\t/tmp/tmpcz8r0568.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted = {}\n    for i=1,#numbers do\n        sorted[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted do\n        for j=2,#sorted do\n            if sorted[i] > sorted[j] then\n                sorted[i],sorted[j] = sorted[j],sorted[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnu2mwwnq.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpnu2mwwnq.lua:18: in local 'candidate'\n\t/tmp/tmpnu2mwwnq.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted_numbers,2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1onp3vm_.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmp1onp3vm_.lua:14: in local 'candidate'\n\t/tmp/tmp1onp3vm_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i] = sorted_numbers[j]\n                sorted_numbers[j] = i\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ntdj3rq.lua:19: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmp7ntdj3rq.lua:19: in local 'candidate'\n\t/tmp/tmp7ntdj3rq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted = {}\n    for i=1,#numbers,2 do\n        sorted[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted,2 do\n        sorted[tonumber(sorted[i])] = sorted[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcz8r0568.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpcz8r0568.lua:14: in local 'candidate'\n\t/tmp/tmpcz8r0568.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted_numbers,2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1onp3vm_.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmp1onp3vm_.lua:14: in local 'candidate'\n\t/tmp/tmp1onp3vm_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted = {}\n    for i=1,#numbers,2 do\n        sorted[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted,2 do\n        sorted[tonumber(sorted[i])] = sorted[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcz8r0568.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpcz8r0568.lua:14: in local 'candidate'\n\t/tmp/tmpcz8r0568.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted_numbers,2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1onp3vm_.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmp1onp3vm_.lua:14: in local 'candidate'\n\t/tmp/tmp1onp3vm_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted = {}\n    for i = 1, #numbers, 2 do\n        sorted[tonumber(numbers[i])] = numbers[i]\n    end\n    for i = 1, #sorted, 2 do\n        sorted[tonumber(sorted[i])] = sorted[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyjdzb7o2.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpyjdzb7o2.lua:14: in local 'candidate'\n\t/tmp/tmpyjdzb7o2.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted = {}\n    for i=1,#numbers,2 do\n        sorted[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted,2 do\n        sorted[tonumber(sorted[i])] = sorted[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcz8r0568.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpcz8r0568.lua:14: in local 'candidate'\n\t/tmp/tmpcz8r0568.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted = {}\n    for i = 1, #numbers, 2 do\n        sorted[tonumber(numbers[i])] = numbers[i]\n    end\n    for i = 1, #sorted, 2 do\n        sorted[tonumber(sorted[i])] = sorted[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyjdzb7o2.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpyjdzb7o2.lua:14: in local 'candidate'\n\t/tmp/tmpyjdzb7o2.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted_numbers,2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1onp3vm_.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmp1onp3vm_.lua:14: in local 'candidate'\n\t/tmp/tmp1onp3vm_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i = 1, #numbers, 1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i = 1, #sorted_numbers, 1 do\n        for j = 2, #sorted_numbers, 2 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i] = sorted_numbers[j]\n                sorted_numbers[j] = i\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3q51h1m2.lua:19: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmp3q51h1m2.lua:19: in local 'candidate'\n\t/tmp/tmp3q51h1m2.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i = 1, #numbers, 1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i = 1, #sorted_numbers, 1 do\n        for j = 2, #sorted_numbers, 2 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i] = sorted_numbers[j]\n                sorted_numbers[j] = i\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3q51h1m2.lua:19: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmp3q51h1m2.lua:19: in local 'candidate'\n\t/tmp/tmp3q51h1m2.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i = 1, #numbers, 2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i = 1, #sorted_numbers, 2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return ' '.join(sorted_numbers)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp3pvzz582.lua:14: 'end' expected (to close 'function' at line 6) near '.'\n",
      "stdout": "",
      "timestamp": 1661907407
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i = 1, #numbers, 1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i = 1, #sorted_numbers, 1 do\n        for j = 2, #sorted_numbers, 2 do\n            if sorted_numbers[j] < sorted_numbers[i] then\n                sorted_numbers[j] = sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzu8o3o8j.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpzu8o3o8j.lua:18: in local 'candidate'\n\t/tmp/tmpzu8o3o8j.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i = 1, #numbers, 1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i = 1, #sorted_numbers, 1 do\n        for j = 2, #sorted_numbers, 2 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i] = sorted_numbers[j]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk5we37fi.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpk5we37fi.lua:18: in local 'candidate'\n\t/tmp/tmpk5we37fi.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907407
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i = 1, #numbers, 1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i = 1, #sorted_numbers, 1 do\n        for j = 2, #sorted_numbers, 2 do\n            if sorted_numbers[j] < sorted_numbers[i] then\n                sorted_numbers[j] = sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzu8o3o8j.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpzu8o3o8j.lua:18: in local 'candidate'\n\t/tmp/tmpzu8o3o8j.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i = 1, #numbers, 1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i = 1, #sorted_numbers, 1 do\n        for j = 2, #sorted_numbers, 2 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i] = sorted_numbers[j]\n                sorted_numbers[j] = i\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3q51h1m2.lua:19: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmp3q51h1m2.lua:19: in local 'candidate'\n\t/tmp/tmp3q51h1m2.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i = 1, #numbers, 1 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i = 1, #sorted_numbers, 1 do\n        sorted_numbers[i] = sorted_numbers[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8e0e6h4u.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmp8e0e6h4u.lua:14: in local 'candidate'\n\t/tmp/tmp8e0e6h4u.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted = {}\n    for i=1,#numbers,2 do\n        sorted[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted,2 do\n        sorted[tonumber(sorted[i])] = sorted[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcz8r0568.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpcz8r0568.lua:14: in local 'candidate'\n\t/tmp/tmpcz8r0568.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i = 1, #numbers, 2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i = 1, #sorted_numbers, 2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplvkmhu7w.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmplvkmhu7w.lua:14: in local 'candidate'\n\t/tmp/tmplvkmhu7w.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907407
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = ''\n    local numbers_list = string.split(numbers, ' ')\n    for i = 1, #numbers_list, 2 do\n        sorted_numbers = sorted_numbers .. string.lower(numbers_list[i])\n    end\n    return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm3aw95ex.lua:8: attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpm3aw95ex.lua:8: in local 'candidate'\n\t/tmp/tmpm3aw95ex.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted = {}\n    for i=1,#numbers,1 do\n        sorted[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted,1 do\n        for j=i+1,#sorted,1 do\n            if sorted[j] < sorted[i] then\n                sorted[i],sorted[j] = sorted[j],sorted[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptijo5xrq.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmptijo5xrq.lua:18: in local 'candidate'\n\t/tmp/tmptijo5xrq.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i = 1, #numbers, 2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i = 1, #sorted_numbers, 2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplvkmhu7w.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmplvkmhu7w.lua:14: in local 'candidate'\n\t/tmp/tmplvkmhu7w.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907407
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted_numbers,2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1onp3vm_.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmp1onp3vm_.lua:14: in local 'candidate'\n\t/tmp/tmp1onp3vm_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted_numbers,2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphxhmh5lv.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmphxhmh5lv.lua:14: in local 'candidate'\n\t/tmp/tmphxhmh5lv.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted = {}\n    for i=1,#numbers,2 do\n        sorted[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted,2 do\n        sorted[tonumber(sorted[i])] = sorted[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcz8r0568.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpcz8r0568.lua:14: in local 'candidate'\n\t/tmp/tmpcz8r0568.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted_numbers,2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1onp3vm_.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmp1onp3vm_.lua:14: in local 'candidate'\n\t/tmp/tmp1onp3vm_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i = 1, #numbers, 2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i = 1, #sorted_numbers, 2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplvkmhu7w.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmplvkmhu7w.lua:14: in local 'candidate'\n\t/tmp/tmplvkmhu7w.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907407
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted_numbers,2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1onp3vm_.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmp1onp3vm_.lua:14: in local 'candidate'\n\t/tmp/tmp1onp3vm_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted_numbers,2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1onp3vm_.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmp1onp3vm_.lua:14: in local 'candidate'\n\t/tmp/tmp1onp3vm_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i] = sorted_numbers[j]\n                sorted_numbers[j] = i\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ntdj3rq.lua:19: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmp7ntdj3rq.lua:19: in local 'candidate'\n\t/tmp/tmp7ntdj3rq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i = 1, #numbers, 1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i = 1, #sorted_numbers, 1 do\n        for j = 2, #sorted_numbers, 2 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i] = sorted_numbers[j]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk5we37fi.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpk5we37fi.lua:18: in local 'candidate'\n\t/tmp/tmpk5we37fi.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907407
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted = {}\n    for i=1,#numbers,2 do\n        sorted[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted,2 do\n        sorted[tonumber(sorted[i])] = sorted[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcz8r0568.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpcz8r0568.lua:14: in local 'candidate'\n\t/tmp/tmpcz8r0568.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted_numbers,2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1onp3vm_.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmp1onp3vm_.lua:14: in local 'candidate'\n\t/tmp/tmp1onp3vm_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted_numbers,2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1onp3vm_.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmp1onp3vm_.lua:14: in local 'candidate'\n\t/tmp/tmp1onp3vm_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i = 1, #numbers, 1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i = 1, #sorted_numbers, 1 do\n        for j = 2, #sorted_numbers, 2 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i] = sorted_numbers[j]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk5we37fi.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpk5we37fi.lua:18: in local 'candidate'\n\t/tmp/tmpk5we37fi.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907407
    },
    {
      "exit_code": 1,
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i = 1, #numbers, 2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i = 1, #sorted_numbers, 2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplvkmhu7w.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmplvkmhu7w.lua:14: in local 'candidate'\n\t/tmp/tmplvkmhu7w.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907407
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted = {}\n    for i=1,#numbers,2 do\n        sorted[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted,2 do\n        sorted[tonumber(sorted[i])] = sorted[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcz8r0568.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpcz8r0568.lua:14: in local 'candidate'\n\t/tmp/tmpcz8r0568.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted_numbers,2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1onp3vm_.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmp1onp3vm_.lua:14: in local 'candidate'\n\t/tmp/tmp1onp3vm_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,2 do\n        if numbers[i] ~= numbers[i+1] then\n            sorted_numbers[numbers[i]] = numbers[i]\n            sorted_numbers[numbers[i+1]] = numbers[i+1]\n        end\n    end\n    return table.concat(sorted_numbers, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9qd2gl2o.lua:21: expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp9qd2gl2o.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i] = sorted_numbers[j]\n                sorted_numbers[j] = sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplmkh5tl9.lua:19: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmplmkh5tl9.lua:19: in local 'candidate'\n\t/tmp/tmplmkh5tl9.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted_numbers,2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1onp3vm_.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmp1onp3vm_.lua:14: in local 'candidate'\n\t/tmp/tmp1onp3vm_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted_numbers,2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1onp3vm_.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmp1onp3vm_.lua:14: in local 'candidate'\n\t/tmp/tmp1onp3vm_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted_numbers,2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphxhmh5lv.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmphxhmh5lv.lua:14: in local 'candidate'\n\t/tmp/tmphxhmh5lv.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted = {}\n    for i=1,#numbers,2 do\n        sorted[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted,2 do\n        sorted[tonumber(sorted[i])] = sorted[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcz8r0568.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpcz8r0568.lua:14: in local 'candidate'\n\t/tmp/tmpcz8r0568.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i = 1, #numbers, 1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i = 1, #sorted_numbers, 1 do\n        for j = 2, #sorted_numbers, 2 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i] = sorted_numbers[j]\n                sorted_numbers[j] = i\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3q51h1m2.lua:19: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmp3q51h1m2.lua:19: in local 'candidate'\n\t/tmp/tmp3q51h1m2.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted = {}\n    for i=1,#numbers do\n        sorted[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted do\n        for j=i+1,#sorted do\n            if sorted[i] > sorted[j] then\n                sorted[i],sorted[j] = sorted[j],sorted[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa0vsf_6_.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpa0vsf_6_.lua:18: in local 'candidate'\n\t/tmp/tmpa0vsf_6_.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted_numbers,2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return string.gsub(sorted_numbers, '%d', '%d')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvfe65u1c.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpvfe65u1c.lua:14: in local 'candidate'\n\t/tmp/tmpvfe65u1c.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted = {}\n    for i=1,#numbers do\n        sorted[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted do\n        for j=i+1,#sorted do\n            if sorted[i] > sorted[j] then\n                sorted[i],sorted[j] = sorted[j],sorted[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa0vsf_6_.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpa0vsf_6_.lua:18: in local 'candidate'\n\t/tmp/tmpa0vsf_6_.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted_numbers,2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphxhmh5lv.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmphxhmh5lv.lua:14: in local 'candidate'\n\t/tmp/tmphxhmh5lv.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i = 1, #numbers, 2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i = 1, #sorted_numbers, 2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplvkmhu7w.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmplvkmhu7w.lua:14: in local 'candidate'\n\t/tmp/tmplvkmhu7w.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907407
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted = {}\n    for i=1,#numbers,2 do\n        sorted[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted,2 do\n        sorted[tonumber(sorted[i])] = sorted[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcz8r0568.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpcz8r0568.lua:14: in local 'candidate'\n\t/tmp/tmpcz8r0568.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i = 1, #numbers, 2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i = 1, #sorted_numbers, 2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplvkmhu7w.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmplvkmhu7w.lua:14: in local 'candidate'\n\t/tmp/tmplvkmhu7w.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907407
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted_numbers,2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1onp3vm_.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmp1onp3vm_.lua:14: in local 'candidate'\n\t/tmp/tmp1onp3vm_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted_numbers,2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1onp3vm_.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmp1onp3vm_.lua:14: in local 'candidate'\n\t/tmp/tmp1onp3vm_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i = 1, #numbers, 2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i = 1, #sorted_numbers, 2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplvkmhu7w.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmplvkmhu7w.lua:14: in local 'candidate'\n\t/tmp/tmplvkmhu7w.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907407
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=1,#sorted_numbers,1 do\n            if sorted_numbers[j] < sorted_numbers[i] then\n                sorted_numbers[j] = sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfqm4fw9e.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpfqm4fw9e.lua:18: in local 'candidate'\n\t/tmp/tmpfqm4fw9e.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[j] < sorted_numbers[i] then\n                sorted_numbers[j] = sorted_numbers[i]\n                sorted_numbers[i] = j\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnszx5_8d.lua:19: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpnszx5_8d.lua:19: in local 'candidate'\n\t/tmp/tmpnszx5_8d.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted_numbers,2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1onp3vm_.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmp1onp3vm_.lua:14: in local 'candidate'\n\t/tmp/tmp1onp3vm_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted = {}\n    for i=1,#numbers,2 do\n        sorted[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted,2 do\n        sorted[tonumber(sorted[i])] = sorted[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcz8r0568.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpcz8r0568.lua:14: in local 'candidate'\n\t/tmp/tmpcz8r0568.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted = {}\n    for i=1,#numbers,1 do\n        sorted[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted,1 do\n        for j=i+1,#sorted,1 do\n            if sorted[j] < sorted[i] then\n                sorted[i],sorted[j] = sorted[j],sorted[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptijo5xrq.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmptijo5xrq.lua:18: in local 'candidate'\n\t/tmp/tmptijo5xrq.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted_numbers,2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1onp3vm_.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmp1onp3vm_.lua:14: in local 'candidate'\n\t/tmp/tmp1onp3vm_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted_numbers,2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphxhmh5lv.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmphxhmh5lv.lua:14: in local 'candidate'\n\t/tmp/tmphxhmh5lv.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted_numbers,2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1onp3vm_.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmp1onp3vm_.lua:14: in local 'candidate'\n\t/tmp/tmp1onp3vm_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted_numbers,2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1onp3vm_.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmp1onp3vm_.lua:14: in local 'candidate'\n\t/tmp/tmp1onp3vm_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[j] < sorted_numbers[i] then\n                sorted_numbers[j] = sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7pg52msj.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmp7pg52msj.lua:18: in local 'candidate'\n\t/tmp/tmp7pg52msj.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,2 do\n        if numbers[i] ~= numbers[i+1] then\n            sorted_numbers[numbers[i]] = numbers[i]\n            sorted_numbers[numbers[i+1]] = numbers[i+1]\n        end\n    end\n    return table.concat(sorted_numbers, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9qd2gl2o.lua:21: expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp9qd2gl2o.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted = {}\n    for i=1,#numbers,2 do\n        sorted[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted,2 do\n        sorted[tonumber(sorted[i])] = sorted[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcz8r0568.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpcz8r0568.lua:14: in local 'candidate'\n\t/tmp/tmpcz8r0568.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted_numbers,2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphxhmh5lv.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmphxhmh5lv.lua:14: in local 'candidate'\n\t/tmp/tmphxhmh5lv.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted_numbers,2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1onp3vm_.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmp1onp3vm_.lua:14: in local 'candidate'\n\t/tmp/tmp1onp3vm_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted_numbers,2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphxhmh5lv.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmphxhmh5lv.lua:14: in local 'candidate'\n\t/tmp/tmphxhmh5lv.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[j] < sorted_numbers[i] then\n                sorted_numbers[j] = sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7pg52msj.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmp7pg52msj.lua:18: in local 'candidate'\n\t/tmp/tmp7pg52msj.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted = {}\n    for i=1,#numbers,1 do\n        sorted[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted,1 do\n        for j=i+1,#sorted,1 do\n            if sorted[j] < sorted[i] then\n                sorted[i],sorted[j] = sorted[j],sorted[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptijo5xrq.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmptijo5xrq.lua:18: in local 'candidate'\n\t/tmp/tmptijo5xrq.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=2,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i] = sorted_numbers[j]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu351f3i6.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpu351f3i6.lua:18: in local 'candidate'\n\t/tmp/tmpu351f3i6.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted_numbers,2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1onp3vm_.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmp1onp3vm_.lua:14: in local 'candidate'\n\t/tmp/tmp1onp3vm_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted_numbers,2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1onp3vm_.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmp1onp3vm_.lua:14: in local 'candidate'\n\t/tmp/tmp1onp3vm_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i = 1, #numbers, 2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i = 1, #sorted_numbers, 2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplvkmhu7w.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmplvkmhu7w.lua:14: in local 'candidate'\n\t/tmp/tmplvkmhu7w.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907407
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i = 1, #numbers, 1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i = 1, #sorted_numbers, 1 do\n        for j = 2, #sorted_numbers, 2 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i] = sorted_numbers[j]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk5we37fi.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpk5we37fi.lua:18: in local 'candidate'\n\t/tmp/tmpk5we37fi.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907407
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted = {}\n    for i = 1, #numbers, 2 do\n        sorted[tonumber(numbers[i])] = numbers[i]\n    end\n    for i = 1, #sorted, 2 do\n        sorted[tonumber(sorted[i])] = sorted[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyjdzb7o2.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpyjdzb7o2.lua:14: in local 'candidate'\n\t/tmp/tmpyjdzb7o2.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted_numbers,2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1onp3vm_.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmp1onp3vm_.lua:14: in local 'candidate'\n\t/tmp/tmp1onp3vm_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[j] < sorted_numbers[i] then\n                sorted_numbers[j] = sorted_numbers[i]\n                sorted_numbers[i] = j\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnszx5_8d.lua:19: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpnszx5_8d.lua:19: in local 'candidate'\n\t/tmp/tmpnszx5_8d.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted_numbers,2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return string.gsub(sorted_numbers, '%d', '%d')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvfe65u1c.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpvfe65u1c.lua:14: in local 'candidate'\n\t/tmp/tmpvfe65u1c.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted = {}\n    for i=1,#numbers,1 do\n        sorted[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted,1 do\n        for j=i+1,#sorted,1 do\n            if sorted[j] < sorted[i] then\n                sorted[i],sorted[j] = sorted[j],sorted[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptijo5xrq.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmptijo5xrq.lua:18: in local 'candidate'\n\t/tmp/tmptijo5xrq.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i = 1, #numbers, 1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i = 1, #sorted_numbers, 1 do\n        for j = 2, #sorted_numbers, 2 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i] = sorted_numbers[j]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk5we37fi.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpk5we37fi.lua:18: in local 'candidate'\n\t/tmp/tmpk5we37fi.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907407
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted_numbers,2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return string.gsub(sorted_numbers, '%d', '%d')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvfe65u1c.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpvfe65u1c.lua:14: in local 'candidate'\n\t/tmp/tmpvfe65u1c.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[j] < sorted_numbers[i] then\n                sorted_numbers[j] = sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7pg52msj.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmp7pg52msj.lua:18: in local 'candidate'\n\t/tmp/tmp7pg52msj.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpts5k8v0r.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpts5k8v0r.lua:18: in local 'candidate'\n\t/tmp/tmpts5k8v0r.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,2 do\n        if numbers[i] ~= numbers[i+1] then\n            sorted_numbers[numbers[i]] = numbers[i]\n            sorted_numbers[numbers[i+1]] = numbers[i+1]\n        end\n    end\n    return table.concat(sorted_numbers, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9qd2gl2o.lua:21: expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp9qd2gl2o.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted_numbers,2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return string.gsub(sorted_numbers, '%d', '%d')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvfe65u1c.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpvfe65u1c.lua:14: in local 'candidate'\n\t/tmp/tmpvfe65u1c.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted = {}\n    for i=1,#numbers,2 do\n        sorted[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted,2 do\n        sorted[tonumber(sorted[i])] = sorted[i]\n    end\n    return string.gsub(sorted, '%d', '%d')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4ueroicj.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmp4ueroicj.lua:14: in local 'candidate'\n\t/tmp/tmp4ueroicj.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted = {}\n    for i=1,#numbers,2 do\n        sorted[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted,2 do\n        sorted[tonumber(sorted[i])] = sorted[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcz8r0568.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpcz8r0568.lua:14: in local 'candidate'\n\t/tmp/tmpcz8r0568.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted = {}\n    for i=1,#numbers,2 do\n        sorted[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted,2 do\n        sorted[tonumber(sorted[i])] = sorted[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcz8r0568.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpcz8r0568.lua:14: in local 'candidate'\n\t/tmp/tmpcz8r0568.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpts5k8v0r.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpts5k8v0r.lua:18: in local 'candidate'\n\t/tmp/tmpts5k8v0r.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted_numbers,2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1onp3vm_.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmp1onp3vm_.lua:14: in local 'candidate'\n\t/tmp/tmp1onp3vm_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i] = sorted_numbers[j]\n                sorted_numbers[j] = i\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ntdj3rq.lua:19: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmp7ntdj3rq.lua:19: in local 'candidate'\n\t/tmp/tmp7ntdj3rq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,2 do\n        sorted_numbers[tonumber(numbers[i])] = numbers[i]\n    end\n    for i=1,#sorted_numbers,2 do\n        sorted_numbers[tonumber(sorted_numbers[i])] = sorted_numbers[i]\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1onp3vm_.lua:14: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmp1onp3vm_.lua:14: in local 'candidate'\n\t/tmp/tmp1onp3vm_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i=1,#numbers,1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i=1,#sorted_numbers,1 do\n        for j=i+1,#sorted_numbers,1 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i],sorted_numbers[j] = sorted_numbers[j],sorted_numbers[i]\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkwlft7i.lua:18: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmpdkwlft7i.lua:18: in local 'candidate'\n\t/tmp/tmpdkwlft7i.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n-- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal function sort_numbers(numbers)\n    local sorted_numbers = {}\n    for i = 1, #numbers, 1 do\n        sorted_numbers[tonumber(numbers[i])] = i\n    end\n    for i = 1, #sorted_numbers, 1 do\n        for j = 2, #sorted_numbers, 2 do\n            if sorted_numbers[i] > sorted_numbers[j] then\n                sorted_numbers[i] = sorted_numbers[j]\n                sorted_numbers[j] = i\n            end\n        end\n    end\n    return string.gsub(numbers, ' ', '') .. ' ' .. string.gsub(sorted_numbers, ' ', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six five four three two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3q51h1m2.lua:19: bad argument #1 to 'gsub' (string expected, got table)\nstack traceback:\n\t/tmp/tmp3q51h1m2.lua:19: in local 'candidate'\n\t/tmp/tmp3q51h1m2.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}