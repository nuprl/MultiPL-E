name: HumanEval_65_circular_shift
language: lua
prompt: "-- Circular shift the digits of the integer x, shift the digits right by\
  \ shift\n-- and return the result as a string.\n-- If shift > number of digits,\
  \ return digits reversed.\n-- >>> circular_shift(12, 1)\n-- \"21\"\n-- >>> circular_shift(12,\
  \ 2)\n-- \"12\"\nlocal function circular_shift(x, shift)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = circular_shift\n\
  \    lu.assertEquals(candidate(100, 2), '001')\n    lu.assertEquals(candidate(12,\
  \ 2), '12')\n    lu.assertEquals(candidate(97, 8), '79')\n    lu.assertEquals(candidate(12,\
  \ 1), '21')\n    lu.assertEquals(candidate(11, 101), '11')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local result = \"\"\n    for i = 1, shift do\n        result =\
    \ string.char(x % 10) .. result\n        x = x / 10\n    end\n    return result\n\
    end", "    local result = \"\"\n    for i = 1, shift do\n        result = string.char(x\
    \ % 10) .. result\n        x = x / 10\n    end\n    return result\nend", "   \
    \ local digits = string.split(x, \"\")\n    if shift > len(digits) then\n    \
    \    digits = string.reverse(digits)\n    end\n    for i = 1, shift, 1 do\n  \
    \      digits[i] = digits[i + shift]\n    end\n    return string.join(digits,\
    \ \"\")\nend", "    local digits = string.split(x, \"\")\n    if shift > len(digits)\
    \ then\n        digits = string.reverse(digits)\n    end\n    digits = digits[shift:]\n\
    \    digits = string.join(digits, \"\")\n    return digits\nend", "    local digits\
    \ = string.char(x, \"0\")\n    if shift > string.len(digits) then\n        digits\
    \ = string.char(x, \"0\")\n    end\n    local result = \"\"\n    for i = 1, shift,\
    \ 1 do\n        result = string.concat(result, digits[i])\n    end\n    return\
    \ result\nend", "    local digits = string.split(x, \"\")\n    if shift > len(digits)\
    \ then return string.reverse(digits) end\n    local result = \"\"\n    for i =\
    \ shift, len(digits) - 1 do\n        result = string.concat(result, digits[i])\n\
    \    end\n    return result\nend", "    local digits = string.split(x, \"\")\n\
    \    if shift > len(digits) then\n        digits = string.reverse(digits)\n  \
    \  end\n    digits = digits[1:shift] .. string.reverse(digits[shift:])\n    return\
    \ string.join(digits, \"\")\nend", "    local t = \"\"\n    for i = 1, shift,\
    \ 1 do\n        t = t .. x % 10\n        x = x / 10\n    end\n    t = t .. x\n\
    \    return t\nend", "    local digits = string.split(x, \"\")\n    local result\
    \ = \"\"\n    for i = 1, #digits, 1 do\n        result = string.concat(result,\
    \ digits[(i + shift) % #digits])\n    end\n    return result\nend", "    local\
    \ digits = string.split(x, \"\")\n    local result = \"\"\n    for i = shift,\
    \ shift + 1, 1 do\n        result = result .. digits[i]\n    end\n    return result\n\
    end", "    local digits = string.split(x, \"\")\n    local result = \"\"\n   \
    \ for i = 1, shift, 1 do\n        result = result .. digits[i]\n    end\n    return\
    \ result\nend", "    local digits = string.char(x, \"0\")\n    local result =\
    \ \"\"\n    for i = 1, #digits, 1 do\n        result = string.char(result, string.char(digits,\
    \ shift))\n        digits = string.char(digits, \"0\")\n    end\n    return result\n\
    end", "    local t = \"\"\n    for i = 1, shift, 1 do\n        t = t .. x % 10\n\
    \        x = x / 10\n    end\n    return t\nend", "    local digits = string.split(x,\
    \ \"\")\n    if shift > len(digits) then\n        digits = string.reverse(digits)\n\
    \    end\n    local result = \"\"\n    for i=1, shift, 1 do\n        result =\
    \ string.concat(result, digits[i])\n    end\n    return result\nend", "    local\
    \ digits = string.rep(\"0\", x)\n    local result = \"\"\n    for i = 1, shift\
    \ do\n        result = string.concat(digits, result)\n    end\n    return result\n\
    end", "    local digits = string.split(x, \"\")\n    if shift > len(digits) then\n\
    \        digits = string.reverse(digits)\n    end\n    digits = digits[shift:]\n\
    \    digits = digits[1:]\n    digits = string.join(digits, \"\")\n    return digits\n\
    end", "    local result = \"\"\n    for i = 1, shift do\n        result = string.char(x\
    \ % 10) .. result\n        x = x / 10\n    end\n    return result\nend", "   \
    \ local digits = string.split(x, \"\")\n    if shift > len(digits) then return\
    \ string.reverse(digits) end\n    for i = shift, 1, -1 do\n        digits[i] =\
    \ digits[i - 1]\n    end\n    return string.join(digits, \"\")\nend", "    local\
    \ digits = string.split(x, \"\")\n    if shift > len(digits) then\n        digits\
    \ = string.reverse(digits)\n    end\n    for i = 1, shift, 1 do\n        digits[i]\
    \ = digits[i+1]\n    end\n    digits[shift] = digits[1]\n    return string.join(digits,\
    \ \"\")\nend", "    local t = {}\n    for i = 1, shift do\n        t[i] = x %\
    \ 10\n        x = x / 10\n    end\n    for i = shift, 1, -1 do\n        t[i] =\
    \ x % 10\n        x = x / 10\n    end\n    return string.format(\"%d\", t[1])\
    \ .. \".\" .. string.format(\"%d\", t[2]) .. \".\" .. string.format(\"%d\", t[3])\
    \ .. \".\" .. string.format(\"%d\", t[4]) .. \".\" .. string.format(\"%d\", t[5])\
    \ .. \".\" .. string.format(\"%d\", t[6]) .. \".\" .. string.format(\"%d\", t[7])\
    \ .. \".\" .. string.format(\"%d\", t[8]) .. \".\" .. string.format(\"%d\", t[9])\
    \ .. \".\" .. string.format(\"%d\", t[10]) .. \".\" .. string.format(\"%d\", t[11])\
    \ .. \".\" .. string.format(\"%d\", t[12])\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
