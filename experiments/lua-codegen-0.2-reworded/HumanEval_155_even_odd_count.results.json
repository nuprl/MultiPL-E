{
  "language": "lua",
  "name": "HumanEval_155_even_odd_count",
  "results": [
    {
      "exit_code": 1,
      "program": "-- Given an integer. return a table that has the number of even and odd digits respectively.\n-- Example:\n-- >>> even_odd_count(-12) \n-- (1, 1)\n-- >>> even_odd_count(123) \n-- (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n    for i = 1, #num, 2 do\n        if num[i] % 2 == 0 then\n            even = even + 1\n        else\n            odd = odd + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyutlimos.lua:9: attempt to get length of a number value (local 'num')\nstack traceback:\n\t/tmp/tmpyutlimos.lua:9: in local 'candidate'\n\t/tmp/tmpyutlimos.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907446
    },
    {
      "exit_code": 1,
      "program": "-- Given an integer. return a table that has the number of even and odd digits respectively.\n-- Example:\n-- >>> even_odd_count(-12) \n-- (1, 1)\n-- >>> even_odd_count(123) \n-- (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n    for i = 1, #num, 2 do\n        if num[i] % 2 == 0 then\n            even = even + 1\n        else\n            odd = odd + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyutlimos.lua:9: attempt to get length of a number value (local 'num')\nstack traceback:\n\t/tmp/tmpyutlimos.lua:9: in local 'candidate'\n\t/tmp/tmpyutlimos.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907446
    },
    {
      "exit_code": 1,
      "program": "-- Given an integer. return a table that has the number of even and odd digits respectively.\n-- Example:\n-- >>> even_odd_count(-12) \n-- (1, 1)\n-- >>> even_odd_count(123) \n-- (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n    for i = 1, #num do\n        if num[i] % 2 == 0 then\n            even = even + 1\n        else\n            odd = odd + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsaylrmfr.lua:9: attempt to get length of a number value (local 'num')\nstack traceback:\n\t/tmp/tmpsaylrmfr.lua:9: in local 'candidate'\n\t/tmp/tmpsaylrmfr.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907446
    },
    {
      "exit_code": 1,
      "program": "-- Given an integer. return a table that has the number of even and odd digits respectively.\n-- Example:\n-- >>> even_odd_count(-12) \n-- (1, 1)\n-- >>> even_odd_count(123) \n-- (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n    for i = 1, #num, 2 do\n        if num[i] % 2 == 0 then\n            even = even + 1\n        else\n            odd = odd + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyutlimos.lua:9: attempt to get length of a number value (local 'num')\nstack traceback:\n\t/tmp/tmpyutlimos.lua:9: in local 'candidate'\n\t/tmp/tmpyutlimos.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907446
    },
    {
      "exit_code": 1,
      "program": "-- Given an integer. return a table that has the number of even and odd digits respectively.\n-- Example:\n-- >>> even_odd_count(-12) \n-- (1, 1)\n-- >>> even_odd_count(123) \n-- (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n    for i = 1, #num, 2 do\n        if num[i] % 2 == 0 then\n            even = even + 1\n        else\n            odd = odd + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyutlimos.lua:9: attempt to get length of a number value (local 'num')\nstack traceback:\n\t/tmp/tmpyutlimos.lua:9: in local 'candidate'\n\t/tmp/tmpyutlimos.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907446
    },
    {
      "exit_code": 1,
      "program": "-- Given an integer. return a table that has the number of even and odd digits respectively.\n-- Example:\n-- >>> even_odd_count(-12) \n-- (1, 1)\n-- >>> even_odd_count(123) \n-- (1, 2)\nlocal function even_odd_count(num)\n    local even = 0\n    local odd = 0\n    for i = 1, #num do\n        if num:sub(1, i) % 2 == 0 then\n            even = even + 1\n        else\n            odd = odd + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb_xtgnl0.lua:10: attempt to get length of a number value (local 'num')\nstack traceback:\n\t/tmp/tmpb_xtgnl0.lua:10: in local 'candidate'\n\t/tmp/tmpb_xtgnl0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907446
    },
    {
      "exit_code": 1,
      "program": "-- Given an integer. return a table that has the number of even and odd digits respectively.\n-- Example:\n-- >>> even_odd_count(-12) \n-- (1, 1)\n-- >>> even_odd_count(123) \n-- (1, 2)\nlocal function even_odd_count(num)\n    local even_count = 0\n    local odd_count = 0\n    for i = 1, #num, 2 do\n        if num[i] % 2 == 0 then\n            even_count = even_count + 1\n        end\n        if num[i] % 2 == 1 then\n            odd_count = odd_count + 1\n        end\n    end\n    return (even_count, odd_count)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp2dlr5zeh.lua:18: ')' expected near ','\n",
      "stdout": "",
      "timestamp": 1661907446
    },
    {
      "exit_code": 1,
      "program": "-- Given an integer. return a table that has the number of even and odd digits respectively.\n-- Example:\n-- >>> even_odd_count(-12) \n-- (1, 1)\n-- >>> even_odd_count(123) \n-- (1, 2)\nlocal function even_odd_count(num)\n    local even_count = 0\n    local odd_count = 0\n    for i = 1, #num, 2 do\n        if num[i] % 2 == 0 then\n            even_count = even_count + 1\n        else\n            odd_count = odd_count + 1\n        end\n    end\n    return (even_count, odd_count)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmphnrpxjwr.lua:17: ')' expected near ','\n",
      "stdout": "",
      "timestamp": 1661907446
    },
    {
      "exit_code": 1,
      "program": "-- Given an integer. return a table that has the number of even and odd digits respectively.\n-- Example:\n-- >>> even_odd_count(-12) \n-- (1, 1)\n-- >>> even_odd_count(123) \n-- (1, 2)\nlocal function even_odd_count(num)\n    local even = 0\n    local odd = 0\n    for i = 1, #num, 2 do\n        if num[i] % 2 == 0 then\n            even = even + 1\n        else\n            odd = odd + 1\n        end\n    end\n    return (even, odd)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp0puiomjk.lua:17: ')' expected near ','\n",
      "stdout": "",
      "timestamp": 1661907446
    },
    {
      "exit_code": 1,
      "program": "-- Given an integer. return a table that has the number of even and odd digits respectively.\n-- Example:\n-- >>> even_odd_count(-12) \n-- (1, 1)\n-- >>> even_odd_count(123) \n-- (1, 2)\nlocal function even_odd_count(num)\n    local even_count = 0\n    local odd_count = 0\n    for i = 1, #num, 2 do\n        if num[i] % 2 == 0 then\n            even_count = even_count + 1\n        else\n            odd_count = odd_count + 1\n        end\n    end\n    return (even_count, odd_count)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmphnrpxjwr.lua:17: ')' expected near ','\n",
      "stdout": "",
      "timestamp": 1661907446
    },
    {
      "exit_code": 1,
      "program": "-- Given an integer. return a table that has the number of even and odd digits respectively.\n-- Example:\n-- >>> even_odd_count(-12) \n-- (1, 1)\n-- >>> even_odd_count(123) \n-- (1, 2)\nlocal function even_odd_count(num)\n    local even_count = 0\n    local odd_count = 0\n    for i = 1, #num do\n        if num[i] % 2 == 0 then\n            even_count = even_count + 1\n        else\n            odd_count = odd_count + 1\n        end\n    end\n    return (even_count, odd_count)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpxx6ks_jr.lua:17: ')' expected near ','\n",
      "stdout": "",
      "timestamp": 1661907446
    },
    {
      "exit_code": 1,
      "program": "-- Given an integer. return a table that has the number of even and odd digits respectively.\n-- Example:\n-- >>> even_odd_count(-12) \n-- (1, 1)\n-- >>> even_odd_count(123) \n-- (1, 2)\nlocal function even_odd_count(num)\n    local even = 0\n    local odd = 0\n    for i = 1, #num do\n        if num[i] % 2 == 0 then\n            even = even + 1\n        else\n            odd = odd + 1\n        end\n    end\n    return (even, odd)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpnonqtzty.lua:17: ')' expected near ','\n",
      "stdout": "",
      "timestamp": 1661907446
    },
    {
      "exit_code": 1,
      "program": "-- Given an integer. return a table that has the number of even and odd digits respectively.\n-- Example:\n-- >>> even_odd_count(-12) \n-- (1, 1)\n-- >>> even_odd_count(123) \n-- (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n    for i = 1, #num do\n        if num[i] % 2 == 0 then\n            even = even + 1\n        else\n            odd = odd + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsaylrmfr.lua:9: attempt to get length of a number value (local 'num')\nstack traceback:\n\t/tmp/tmpsaylrmfr.lua:9: in local 'candidate'\n\t/tmp/tmpsaylrmfr.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907446
    },
    {
      "exit_code": 1,
      "program": "-- Given an integer. return a table that has the number of even and odd digits respectively.\n-- Example:\n-- >>> even_odd_count(-12) \n-- (1, 1)\n-- >>> even_odd_count(123) \n-- (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n    for i = 1, #num, 2 do\n        if num[i] % 2 == 0 then\n            even = even + 1\n        else\n            odd = odd + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyutlimos.lua:9: attempt to get length of a number value (local 'num')\nstack traceback:\n\t/tmp/tmpyutlimos.lua:9: in local 'candidate'\n\t/tmp/tmpyutlimos.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907446
    },
    {
      "exit_code": 1,
      "program": "-- Given an integer. return a table that has the number of even and odd digits respectively.\n-- Example:\n-- >>> even_odd_count(-12) \n-- (1, 1)\n-- >>> even_odd_count(123) \n-- (1, 2)\nlocal function even_odd_count(num)\n    local even_count = 0\n    local odd_count = 0\n    for i = 1, #num, 2 do\n        if num[i] % 2 == 0 then\n            even_count = even_count + 1\n        else\n            odd_count = odd_count + 1\n        end\n    end\n    return (even_count, odd_count)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmphnrpxjwr.lua:17: ')' expected near ','\n",
      "stdout": "",
      "timestamp": 1661907446
    },
    {
      "exit_code": 1,
      "program": "-- Given an integer. return a table that has the number of even and odd digits respectively.\n-- Example:\n-- >>> even_odd_count(-12) \n-- (1, 1)\n-- >>> even_odd_count(123) \n-- (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n    for i = 1, #num, 2 do\n        if num[i] % 2 == 0 then\n            even = even + 1\n        else\n            odd = odd + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyutlimos.lua:9: attempt to get length of a number value (local 'num')\nstack traceback:\n\t/tmp/tmpyutlimos.lua:9: in local 'candidate'\n\t/tmp/tmpyutlimos.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907446
    },
    {
      "exit_code": 1,
      "program": "-- Given an integer. return a table that has the number of even and odd digits respectively.\n-- Example:\n-- >>> even_odd_count(-12) \n-- (1, 1)\n-- >>> even_odd_count(123) \n-- (1, 2)\nlocal function even_odd_count(num)\n    local even = 0\n    local odd = 0\n    for i = 1, #num do\n        if num[i] % 2 == 0 then\n            even = even + 1\n        else\n            odd = odd + 1\n        end\n    end\n    return (even, odd)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpnonqtzty.lua:17: ')' expected near ','\n",
      "stdout": "",
      "timestamp": 1661907446
    },
    {
      "exit_code": 1,
      "program": "-- Given an integer. return a table that has the number of even and odd digits respectively.\n-- Example:\n-- >>> even_odd_count(-12) \n-- (1, 1)\n-- >>> even_odd_count(123) \n-- (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n    for i = 1, #num, 2 do\n        if num[i] % 2 == 0 then\n            even = even + 1\n        else\n            odd = odd + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyutlimos.lua:9: attempt to get length of a number value (local 'num')\nstack traceback:\n\t/tmp/tmpyutlimos.lua:9: in local 'candidate'\n\t/tmp/tmpyutlimos.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907446
    },
    {
      "exit_code": 1,
      "program": "-- Given an integer. return a table that has the number of even and odd digits respectively.\n-- Example:\n-- >>> even_odd_count(-12) \n-- (1, 1)\n-- >>> even_odd_count(123) \n-- (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n    for i = 1, #num, 2 do\n        if num[i] % 2 == 0 then\n            even = even + 1\n        else\n            odd = odd + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyutlimos.lua:9: attempt to get length of a number value (local 'num')\nstack traceback:\n\t/tmp/tmpyutlimos.lua:9: in local 'candidate'\n\t/tmp/tmpyutlimos.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907446
    },
    {
      "exit_code": 1,
      "program": "-- Given an integer. return a table that has the number of even and odd digits respectively.\n-- Example:\n-- >>> even_odd_count(-12) \n-- (1, 1)\n-- >>> even_odd_count(123) \n-- (1, 2)\nlocal function even_odd_count(num)\n    local even, odd = 0, 0\n    for i = 1, #num, 2 do\n        if num[i] % 2 == 0 then\n            even = even + 1\n        else\n            odd = odd + 1\n        end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyutlimos.lua:9: attempt to get length of a number value (local 'num')\nstack traceback:\n\t/tmp/tmpyutlimos.lua:9: in local 'candidate'\n\t/tmp/tmpyutlimos.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907446
    }
  ]
}