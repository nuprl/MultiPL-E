{
  "language": "lua",
  "name": "HumanEval_126_is_sorted",
  "results": [
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return whether or not they are sorted\n-- in ascending order. If table has more than 1 duplicate of the same\n-- number, return false. Assume no negative numbers and only integers.\n-- Examples\n-- >>> is_sorted([5]) \n-- True\n-- >>> is_sorted([1, 2, 3, 4, 5]) \n-- True\n-- >>> is_sorted([1, 3, 2, 4, 5]) \n-- False\n-- >>> is_sorted([1, 2, 3, 4, 5, 6]) \n-- True\n-- >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n-- True\n-- >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n-- False\n-- >>> is_sorted([1, 2, 2, 3, 3, 4]) \n-- True\n-- >>> is_sorted([1, 2, 2, 2, 3, 4]) \n-- False\nlocal function is_sorted(lst)\n    local i, j, tmp\n    for i = 1, #lst, 1 do\n        for j = i + 1, #lst, 1 do\n            if lst[i] > lst[j] then\n                tmp = lst[i]\n                lst[i] = lst[j]\n                lst[j] = tmp\n            end\n        end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_sorted\n    lu.assertEquals(candidate({5}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5, 6, 7}), false)\n    lu.assertEquals(candidate({}), true)\n    lu.assertEquals(candidate({1}), true)\n    lu.assertEquals(candidate({3, 2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 2, 2, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 3, 3, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpde6bmjj6.lua:38: expected: true, actual: {5}\nstack traceback:\n\t/tmp/tmpde6bmjj6.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907424
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return whether or not they are sorted\n-- in ascending order. If table has more than 1 duplicate of the same\n-- number, return false. Assume no negative numbers and only integers.\n-- Examples\n-- >>> is_sorted([5]) \n-- True\n-- >>> is_sorted([1, 2, 3, 4, 5]) \n-- True\n-- >>> is_sorted([1, 3, 2, 4, 5]) \n-- False\n-- >>> is_sorted([1, 2, 3, 4, 5, 6]) \n-- True\n-- >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n-- True\n-- >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n-- False\n-- >>> is_sorted([1, 2, 2, 3, 3, 4]) \n-- True\n-- >>> is_sorted([1, 2, 2, 2, 3, 4]) \n-- False\nlocal function is_sorted(lst)\n    local i = 1\n    local j = 2\n    local len = #lst\n    while i < len do\n        if lst[i] < lst[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_sorted\n    lu.assertEquals(candidate({5}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5, 6, 7}), false)\n    lu.assertEquals(candidate({}), true)\n    lu.assertEquals(candidate({1}), true)\n    lu.assertEquals(candidate({3, 2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 2, 2, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 3, 3, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnydjft6l.lua:26: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpnydjft6l.lua:26: in local 'candidate'\n\t/tmp/tmpnydjft6l.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907424
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return whether or not they are sorted\n-- in ascending order. If table has more than 1 duplicate of the same\n-- number, return false. Assume no negative numbers and only integers.\n-- Examples\n-- >>> is_sorted([5]) \n-- True\n-- >>> is_sorted([1, 2, 3, 4, 5]) \n-- True\n-- >>> is_sorted([1, 3, 2, 4, 5]) \n-- False\n-- >>> is_sorted([1, 2, 3, 4, 5, 6]) \n-- True\n-- >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n-- True\n-- >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n-- False\n-- >>> is_sorted([1, 2, 2, 3, 3, 4]) \n-- True\n-- >>> is_sorted([1, 2, 2, 2, 3, 4]) \n-- False\nlocal function is_sorted(lst)\n    local i, j, n = 1, 1, #lst\n    while n > 1 do\n        i = 1\n        while i < n and lst[i] <= lst[i+1] then\n            i = i + 1\n        j = n - 1\n        while j > i and lst[j] >= lst[j-1] then\n            j = j - 1\n        if j < i then\n            return false\n        n = j - i + 1\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_sorted\n    lu.assertEquals(candidate({5}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5, 6, 7}), false)\n    lu.assertEquals(candidate({}), true)\n    lu.assertEquals(candidate({1}), true)\n    lu.assertEquals(candidate({3, 2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 2, 2, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 3, 3, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp047sozz6.lua:25: 'do' expected near 'then'\n",
      "stdout": "",
      "timestamp": 1661907424
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return whether or not they are sorted\n-- in ascending order. If table has more than 1 duplicate of the same\n-- number, return false. Assume no negative numbers and only integers.\n-- Examples\n-- >>> is_sorted([5]) \n-- True\n-- >>> is_sorted([1, 2, 3, 4, 5]) \n-- True\n-- >>> is_sorted([1, 3, 2, 4, 5]) \n-- False\n-- >>> is_sorted([1, 2, 3, 4, 5, 6]) \n-- True\n-- >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n-- True\n-- >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n-- False\n-- >>> is_sorted([1, 2, 2, 3, 3, 4]) \n-- True\n-- >>> is_sorted([1, 2, 2, 2, 3, 4]) \n-- False\nlocal function is_sorted(lst)\n    local sorted = true\n    for i = 1, #lst do\n        if lst[i] < lst[i-1] then\n            sorted = false\n            break\n        end\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_sorted\n    lu.assertEquals(candidate({5}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5, 6, 7}), false)\n    lu.assertEquals(candidate({}), true)\n    lu.assertEquals(candidate({1}), true)\n    lu.assertEquals(candidate({3, 2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 2, 2, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 3, 3, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdcxrvkow.lua:24: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpdcxrvkow.lua:24: in local 'candidate'\n\t/tmp/tmpdcxrvkow.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907424
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return whether or not they are sorted\n-- in ascending order. If table has more than 1 duplicate of the same\n-- number, return false. Assume no negative numbers and only integers.\n-- Examples\n-- >>> is_sorted([5]) \n-- True\n-- >>> is_sorted([1, 2, 3, 4, 5]) \n-- True\n-- >>> is_sorted([1, 3, 2, 4, 5]) \n-- False\n-- >>> is_sorted([1, 2, 3, 4, 5, 6]) \n-- True\n-- >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n-- True\n-- >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n-- False\n-- >>> is_sorted([1, 2, 2, 3, 3, 4]) \n-- True\n-- >>> is_sorted([1, 2, 2, 2, 3, 4]) \n-- False\nlocal function is_sorted(lst)\n    local sorted = true\n    for i = 1, #lst, 2 do\n        if lst[i] < lst[i-1] then\n            sorted = false\n            break\n        end\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_sorted\n    lu.assertEquals(candidate({5}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5, 6, 7}), false)\n    lu.assertEquals(candidate({}), true)\n    lu.assertEquals(candidate({1}), true)\n    lu.assertEquals(candidate({3, 2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 2, 2, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 3, 3, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbi9_t_7w.lua:24: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpbi9_t_7w.lua:24: in local 'candidate'\n\t/tmp/tmpbi9_t_7w.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907424
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return whether or not they are sorted\n-- in ascending order. If table has more than 1 duplicate of the same\n-- number, return false. Assume no negative numbers and only integers.\n-- Examples\n-- >>> is_sorted([5]) \n-- True\n-- >>> is_sorted([1, 2, 3, 4, 5]) \n-- True\n-- >>> is_sorted([1, 3, 2, 4, 5]) \n-- False\n-- >>> is_sorted([1, 2, 3, 4, 5, 6]) \n-- True\n-- >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n-- True\n-- >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n-- False\n-- >>> is_sorted([1, 2, 2, 3, 3, 4]) \n-- True\n-- >>> is_sorted([1, 2, 2, 2, 3, 4]) \n-- False\nlocal function is_sorted(lst)\n    local sorted = true\n    for i = 1, #lst do\n        if lst[i] < lst[i - 1] then\n            sorted = false\n            break\n        end\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_sorted\n    lu.assertEquals(candidate({5}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5, 6, 7}), false)\n    lu.assertEquals(candidate({}), true)\n    lu.assertEquals(candidate({1}), true)\n    lu.assertEquals(candidate({3, 2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 2, 2, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 3, 3, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp78tz_yi_.lua:24: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp78tz_yi_.lua:24: in local 'candidate'\n\t/tmp/tmp78tz_yi_.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907424
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return whether or not they are sorted\n-- in ascending order. If table has more than 1 duplicate of the same\n-- number, return false. Assume no negative numbers and only integers.\n-- Examples\n-- >>> is_sorted([5]) \n-- True\n-- >>> is_sorted([1, 2, 3, 4, 5]) \n-- True\n-- >>> is_sorted([1, 3, 2, 4, 5]) \n-- False\n-- >>> is_sorted([1, 2, 3, 4, 5, 6]) \n-- True\n-- >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n-- True\n-- >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n-- False\n-- >>> is_sorted([1, 2, 2, 3, 3, 4]) \n-- True\n-- >>> is_sorted([1, 2, 2, 2, 3, 4]) \n-- False\nlocal function is_sorted(lst)\n    local i = 1\n    local j = 2\n    while j <= #lst do\n        if lst[i] < lst[j] then\n            return false\n        end\n        i = i + 1\n        j = j + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_sorted\n    lu.assertEquals(candidate({5}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5, 6, 7}), false)\n    lu.assertEquals(candidate({}), true)\n    lu.assertEquals(candidate({1}), true)\n    lu.assertEquals(candidate({3, 2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 2, 2, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 3, 3, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu97vwjb8.lua:38: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpu97vwjb8.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907424
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return whether or not they are sorted\n-- in ascending order. If table has more than 1 duplicate of the same\n-- number, return false. Assume no negative numbers and only integers.\n-- Examples\n-- >>> is_sorted([5]) \n-- True\n-- >>> is_sorted([1, 2, 3, 4, 5]) \n-- True\n-- >>> is_sorted([1, 3, 2, 4, 5]) \n-- False\n-- >>> is_sorted([1, 2, 3, 4, 5, 6]) \n-- True\n-- >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n-- True\n-- >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n-- False\n-- >>> is_sorted([1, 2, 2, 3, 3, 4]) \n-- True\n-- >>> is_sorted([1, 2, 2, 2, 3, 4]) \n-- False\nlocal function is_sorted(lst)\n    local i = 1\n    local j = 2\n    while j <= #lst do\n        if lst[i] > lst[j] then\n            return false\n        end\n        i = i + 1\n        j = j + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_sorted\n    lu.assertEquals(candidate({5}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5, 6, 7}), false)\n    lu.assertEquals(candidate({}), true)\n    lu.assertEquals(candidate({1}), true)\n    lu.assertEquals(candidate({3, 2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 2, 2, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 3, 3, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeai0tuws.lua:46: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpeai0tuws.lua:46: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907424
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return whether or not they are sorted\n-- in ascending order. If table has more than 1 duplicate of the same\n-- number, return false. Assume no negative numbers and only integers.\n-- Examples\n-- >>> is_sorted([5]) \n-- True\n-- >>> is_sorted([1, 2, 3, 4, 5]) \n-- True\n-- >>> is_sorted([1, 3, 2, 4, 5]) \n-- False\n-- >>> is_sorted([1, 2, 3, 4, 5, 6]) \n-- True\n-- >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n-- True\n-- >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n-- False\n-- >>> is_sorted([1, 2, 2, 3, 3, 4]) \n-- True\n-- >>> is_sorted([1, 2, 2, 2, 3, 4]) \n-- False\nlocal function is_sorted(lst)\n    local sorted = true\n    for i = 1, #lst do\n        if lst[i] < lst[i-1] then\n            sorted = false\n            break\n        end\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_sorted\n    lu.assertEquals(candidate({5}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5, 6, 7}), false)\n    lu.assertEquals(candidate({}), true)\n    lu.assertEquals(candidate({1}), true)\n    lu.assertEquals(candidate({3, 2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 2, 2, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 3, 3, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdcxrvkow.lua:24: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpdcxrvkow.lua:24: in local 'candidate'\n\t/tmp/tmpdcxrvkow.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907424
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return whether or not they are sorted\n-- in ascending order. If table has more than 1 duplicate of the same\n-- number, return false. Assume no negative numbers and only integers.\n-- Examples\n-- >>> is_sorted([5]) \n-- True\n-- >>> is_sorted([1, 2, 3, 4, 5]) \n-- True\n-- >>> is_sorted([1, 3, 2, 4, 5]) \n-- False\n-- >>> is_sorted([1, 2, 3, 4, 5, 6]) \n-- True\n-- >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n-- True\n-- >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n-- False\n-- >>> is_sorted([1, 2, 2, 3, 3, 4]) \n-- True\n-- >>> is_sorted([1, 2, 2, 2, 3, 4]) \n-- False\nlocal function is_sorted(lst)\n    local i = 1\n    local j = 2\n    while i < #lst do\n        if lst[i] < lst[j] then\n            return false\n        end\n        j = j + 1\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_sorted\n    lu.assertEquals(candidate({5}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5, 6, 7}), false)\n    lu.assertEquals(candidate({}), true)\n    lu.assertEquals(candidate({1}), true)\n    lu.assertEquals(candidate({3, 2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 2, 2, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 3, 3, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzrtml3wu.lua:38: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzrtml3wu.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907424
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return whether or not they are sorted\n-- in ascending order. If table has more than 1 duplicate of the same\n-- number, return false. Assume no negative numbers and only integers.\n-- Examples\n-- >>> is_sorted([5]) \n-- True\n-- >>> is_sorted([1, 2, 3, 4, 5]) \n-- True\n-- >>> is_sorted([1, 3, 2, 4, 5]) \n-- False\n-- >>> is_sorted([1, 2, 3, 4, 5, 6]) \n-- True\n-- >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n-- True\n-- >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n-- False\n-- >>> is_sorted([1, 2, 2, 3, 3, 4]) \n-- True\n-- >>> is_sorted([1, 2, 2, 2, 3, 4]) \n-- False\nlocal function is_sorted(lst)\n    local i, j, temp\n    for i = 1, #lst do\n        for j = i + 1, #lst do\n            if lst[i] > lst[j] then\n                temp = lst[i]\n                lst[i] = lst[j]\n                lst[j] = temp\n            end\n        end\n    end\n    return #lst == 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_sorted\n    lu.assertEquals(candidate({5}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5, 6, 7}), false)\n    lu.assertEquals(candidate({}), true)\n    lu.assertEquals(candidate({1}), true)\n    lu.assertEquals(candidate({3, 2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 2, 2, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 3, 3, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiqslq30z.lua:39: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpiqslq30z.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907425
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return whether or not they are sorted\n-- in ascending order. If table has more than 1 duplicate of the same\n-- number, return false. Assume no negative numbers and only integers.\n-- Examples\n-- >>> is_sorted([5]) \n-- True\n-- >>> is_sorted([1, 2, 3, 4, 5]) \n-- True\n-- >>> is_sorted([1, 3, 2, 4, 5]) \n-- False\n-- >>> is_sorted([1, 2, 3, 4, 5, 6]) \n-- True\n-- >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n-- True\n-- >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n-- False\n-- >>> is_sorted([1, 2, 2, 3, 3, 4]) \n-- True\n-- >>> is_sorted([1, 2, 2, 2, 3, 4]) \n-- False\nlocal function is_sorted(lst)\n    local sorted = true\n    for i = 1, #lst, 2 do\n        if lst[i] < lst[i-1] then\n            sorted = false\n            break\n        end\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_sorted\n    lu.assertEquals(candidate({5}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5, 6, 7}), false)\n    lu.assertEquals(candidate({}), true)\n    lu.assertEquals(candidate({1}), true)\n    lu.assertEquals(candidate({3, 2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 2, 2, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 3, 3, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbi9_t_7w.lua:24: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpbi9_t_7w.lua:24: in local 'candidate'\n\t/tmp/tmpbi9_t_7w.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907424
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return whether or not they are sorted\n-- in ascending order. If table has more than 1 duplicate of the same\n-- number, return false. Assume no negative numbers and only integers.\n-- Examples\n-- >>> is_sorted([5]) \n-- True\n-- >>> is_sorted([1, 2, 3, 4, 5]) \n-- True\n-- >>> is_sorted([1, 3, 2, 4, 5]) \n-- False\n-- >>> is_sorted([1, 2, 3, 4, 5, 6]) \n-- True\n-- >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n-- True\n-- >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n-- False\n-- >>> is_sorted([1, 2, 2, 3, 3, 4]) \n-- True\n-- >>> is_sorted([1, 2, 2, 2, 3, 4]) \n-- False\nlocal function is_sorted(lst)\n    local i, j\n    for i = 1, #lst do\n        for j = i + 1, #lst do\n            if lst[i] > lst[j] then\n                return false\n            end\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_sorted\n    lu.assertEquals(candidate({5}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5, 6, 7}), false)\n    lu.assertEquals(candidate({}), true)\n    lu.assertEquals(candidate({1}), true)\n    lu.assertEquals(candidate({3, 2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 2, 2, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 3, 3, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpugk6p9of.lua:45: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpugk6p9of.lua:45: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907424
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return whether or not they are sorted\n-- in ascending order. If table has more than 1 duplicate of the same\n-- number, return false. Assume no negative numbers and only integers.\n-- Examples\n-- >>> is_sorted([5]) \n-- True\n-- >>> is_sorted([1, 2, 3, 4, 5]) \n-- True\n-- >>> is_sorted([1, 3, 2, 4, 5]) \n-- False\n-- >>> is_sorted([1, 2, 3, 4, 5, 6]) \n-- True\n-- >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n-- True\n-- >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n-- False\n-- >>> is_sorted([1, 2, 2, 3, 3, 4]) \n-- True\n-- >>> is_sorted([1, 2, 2, 2, 3, 4]) \n-- False\nlocal function is_sorted(lst)\n    local t = {}\n    for i = 1, #lst do\n        if lst[i] < lst[i-1] then\n            t[lst[i]] = true\n        end\n    end\n    for i = 1, #lst do\n        if not t[i] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_sorted\n    lu.assertEquals(candidate({5}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5, 6, 7}), false)\n    lu.assertEquals(candidate({}), true)\n    lu.assertEquals(candidate({1}), true)\n    lu.assertEquals(candidate({3, 2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 2, 2, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 3, 3, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdukz412a.lua:24: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpdukz412a.lua:24: in local 'candidate'\n\t/tmp/tmpdukz412a.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907424
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return whether or not they are sorted\n-- in ascending order. If table has more than 1 duplicate of the same\n-- number, return false. Assume no negative numbers and only integers.\n-- Examples\n-- >>> is_sorted([5]) \n-- True\n-- >>> is_sorted([1, 2, 3, 4, 5]) \n-- True\n-- >>> is_sorted([1, 3, 2, 4, 5]) \n-- False\n-- >>> is_sorted([1, 2, 3, 4, 5, 6]) \n-- True\n-- >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n-- True\n-- >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n-- False\n-- >>> is_sorted([1, 2, 2, 3, 3, 4]) \n-- True\n-- >>> is_sorted([1, 2, 2, 2, 3, 4]) \n-- False\nlocal function is_sorted(lst)\n    local i = 1\n    local j = 2\n    while i < #lst do\n        if lst[i] < lst[j] then\n            return false\n        end\n        j = j + 1\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_sorted\n    lu.assertEquals(candidate({5}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5, 6, 7}), false)\n    lu.assertEquals(candidate({}), true)\n    lu.assertEquals(candidate({1}), true)\n    lu.assertEquals(candidate({3, 2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 2, 2, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 3, 3, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzrtml3wu.lua:38: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzrtml3wu.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907424
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return whether or not they are sorted\n-- in ascending order. If table has more than 1 duplicate of the same\n-- number, return false. Assume no negative numbers and only integers.\n-- Examples\n-- >>> is_sorted([5]) \n-- True\n-- >>> is_sorted([1, 2, 3, 4, 5]) \n-- True\n-- >>> is_sorted([1, 3, 2, 4, 5]) \n-- False\n-- >>> is_sorted([1, 2, 3, 4, 5, 6]) \n-- True\n-- >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n-- True\n-- >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n-- False\n-- >>> is_sorted([1, 2, 2, 3, 3, 4]) \n-- True\n-- >>> is_sorted([1, 2, 2, 2, 3, 4]) \n-- False\nlocal function is_sorted(lst)\n    local i = 1\n    local j = 2\n    while j <= #lst do\n        if lst[i] > lst[j] then\n            return false\n        end\n        i = i + 1\n        j = j + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_sorted\n    lu.assertEquals(candidate({5}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5, 6, 7}), false)\n    lu.assertEquals(candidate({}), true)\n    lu.assertEquals(candidate({1}), true)\n    lu.assertEquals(candidate({3, 2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 2, 2, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 3, 3, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeai0tuws.lua:46: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpeai0tuws.lua:46: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907424
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return whether or not they are sorted\n-- in ascending order. If table has more than 1 duplicate of the same\n-- number, return false. Assume no negative numbers and only integers.\n-- Examples\n-- >>> is_sorted([5]) \n-- True\n-- >>> is_sorted([1, 2, 3, 4, 5]) \n-- True\n-- >>> is_sorted([1, 3, 2, 4, 5]) \n-- False\n-- >>> is_sorted([1, 2, 3, 4, 5, 6]) \n-- True\n-- >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n-- True\n-- >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n-- False\n-- >>> is_sorted([1, 2, 2, 3, 3, 4]) \n-- True\n-- >>> is_sorted([1, 2, 2, 2, 3, 4]) \n-- False\nlocal function is_sorted(lst)\n    local i = 1\n    local j = 2\n    while i < #lst do\n        if lst[i] < lst[j] then\n            return false\n        end\n        i = i + 1\n        j = j + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_sorted\n    lu.assertEquals(candidate({5}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5, 6, 7}), false)\n    lu.assertEquals(candidate({}), true)\n    lu.assertEquals(candidate({1}), true)\n    lu.assertEquals(candidate({3, 2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 2, 2, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 3, 3, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu9rgenw5.lua:38: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpu9rgenw5.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907424
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return whether or not they are sorted\n-- in ascending order. If table has more than 1 duplicate of the same\n-- number, return false. Assume no negative numbers and only integers.\n-- Examples\n-- >>> is_sorted([5]) \n-- True\n-- >>> is_sorted([1, 2, 3, 4, 5]) \n-- True\n-- >>> is_sorted([1, 3, 2, 4, 5]) \n-- False\n-- >>> is_sorted([1, 2, 3, 4, 5, 6]) \n-- True\n-- >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n-- True\n-- >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n-- False\n-- >>> is_sorted([1, 2, 2, 3, 3, 4]) \n-- True\n-- >>> is_sorted([1, 2, 2, 2, 3, 4]) \n-- False\nlocal function is_sorted(lst)\n    local i = 1\n    local j = 2\n    while j <= #lst do\n        if lst[i] < lst[j] then\n            return false\n        end\n        i = i + 1\n        j = j + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_sorted\n    lu.assertEquals(candidate({5}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5, 6, 7}), false)\n    lu.assertEquals(candidate({}), true)\n    lu.assertEquals(candidate({1}), true)\n    lu.assertEquals(candidate({3, 2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 2, 2, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 3, 3, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu97vwjb8.lua:38: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpu97vwjb8.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907424
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return whether or not they are sorted\n-- in ascending order. If table has more than 1 duplicate of the same\n-- number, return false. Assume no negative numbers and only integers.\n-- Examples\n-- >>> is_sorted([5]) \n-- True\n-- >>> is_sorted([1, 2, 3, 4, 5]) \n-- True\n-- >>> is_sorted([1, 3, 2, 4, 5]) \n-- False\n-- >>> is_sorted([1, 2, 3, 4, 5, 6]) \n-- True\n-- >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n-- True\n-- >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n-- False\n-- >>> is_sorted([1, 2, 2, 3, 3, 4]) \n-- True\n-- >>> is_sorted([1, 2, 2, 2, 3, 4]) \n-- False\nlocal function is_sorted(lst)\n    local i = 1\n    local j = 2\n    while i < #lst do\n        if lst[i] < lst[j] then\n            return false\n        end\n        i = i + 1\n        j = j + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_sorted\n    lu.assertEquals(candidate({5}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5, 6, 7}), false)\n    lu.assertEquals(candidate({}), true)\n    lu.assertEquals(candidate({1}), true)\n    lu.assertEquals(candidate({3, 2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 2, 2, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 3, 3, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu9rgenw5.lua:38: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpu9rgenw5.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907424
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return whether or not they are sorted\n-- in ascending order. If table has more than 1 duplicate of the same\n-- number, return false. Assume no negative numbers and only integers.\n-- Examples\n-- >>> is_sorted([5]) \n-- True\n-- >>> is_sorted([1, 2, 3, 4, 5]) \n-- True\n-- >>> is_sorted([1, 3, 2, 4, 5]) \n-- False\n-- >>> is_sorted([1, 2, 3, 4, 5, 6]) \n-- True\n-- >>> is_sorted([1, 2, 3, 4, 5, 6, 7]) \n-- True\n-- >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n-- False\n-- >>> is_sorted([1, 2, 2, 3, 3, 4]) \n-- True\n-- >>> is_sorted([1, 2, 2, 2, 3, 4]) \n-- False\nlocal function is_sorted(lst)\n    local sorted = true\n    for i = 1, #lst do\n        if lst[i] < lst[i-1] then\n            sorted = false\n            break\n        end\n    end\n    return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_sorted\n    lu.assertEquals(candidate({5}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5, 6, 7}), false)\n    lu.assertEquals(candidate({}), true)\n    lu.assertEquals(candidate({1}), true)\n    lu.assertEquals(candidate({3, 2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 2, 2, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 3, 3, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4}), true)\n    lu.assertEquals(candidate({1, 2, 3, 4}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdcxrvkow.lua:24: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpdcxrvkow.lua:24: in local 'candidate'\n\t/tmp/tmpdcxrvkow.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907424
    }
  ]
}