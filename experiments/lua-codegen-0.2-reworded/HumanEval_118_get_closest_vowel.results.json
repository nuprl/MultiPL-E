{
  "language": "lua",
  "name": "HumanEval_118_get_closest_vowel",
  "results": [
    {
      "exit_code": 1,
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_lower = vowels.lower()\n    local vowels_upper = vowels.upper()\n    local vowels_lower_len = #vowels_lower\n    local vowels_upper_len = #vowels_upper\n    local vowels_len = vowels_lower_len + vowels_upper_len\n    local vowels_len_lower = vowels_lower_len\n    local vowels_len_upper = vowels_upper_len\n    local vowels_len_total = vowels_len_lower + vowels_len_upper\n    local vowels_len_total_lower = vowels_len_lower\n    local vowels_len_total_upper = vowels_len_upper\n    local vowels_len_total_total = vowels_len_total_lower + vowels_len_total_upper\n    local vowels_len_total_total_lower = vowels_len_total_lower\n    local vowels_len_total_total_upper = vowels_len_total_upper\n    local vowels_len_total_total_total = vowels_len_total_total_lower + vowels_len_total_total_upper\n    local vowels_len_total_total_total_lower = vowels_len_total_total_lower\n    local vowels_len_total_total_total_upper = vowels_len_total_total_upper\n    local vowels_len_total_total_total_total = vowels_len_total_total_total_lower + vowels_len_total_total_total_upper\n    local vowels_len_total_total_total_total_lower = vowels_len_total_total_total_lower\n    local vowels_len_total_total_total_total_upper = vowels_len_total_total_total_upper\n    local vowels_len_total_total_total_total_total = vowels_len_total_total_total_total_lower + vowels_len_total_total_total_total_upper\n    local vowels_len_total_total_total_total_total_lower = vow\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmppuz1it1h.lua:57: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907507
    },
    {
      "exit_code": 1,
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = #vowels\n    local i = 1\n    local j = 1\n    local k = 1\n    local word_len = #word\n    local word_upper_len = #word.upper()\n    local word_lower_len = #word.lower()\n    local word_upper_len_minus_1 = word_upper_len - 1\n    local word_lower_len_minus_1 = word_lower_len - 1\n    local word_upper_minus_1 = word.upper()[word_upper_len_minus_1]\n    local word_lower_minus_1 = word.lower()[word_lower_len_minus_1]\n    local word_upper_minus_2 = word.upper()[word_upper_len_minus_2]\n    local word_lower_minus_2 = word.lower()[word_lower_len_minus_2]\n    local word_upper_minus_3 = word.upper()[word_upper_len_minus_3]\n    local word_lower_minus_3 = word.lower()[word_lower_len_minus_3]\n    local word_upper_minus_4 = word.upper()[word_upper_len_minus_4]\n    local word_lower_minus_4 = word.lower()[word_lower_len_minus_4]\n    local word_upper_minus_5 = word.upper()[word_upper_len_minus_5]\n    local word_lower_minus_5 = word.lower()[word_lower_len_minus_5]\n    local word_upper_minus_6 = word.upper()[word_upper_len_minus_6]\n    local word_lower_minus_6 = word.lower()[word_lower_len_minus_6]\n    local word_upper_minus_7 = word.upper()[word_upper_len_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvdraa5v1.lua:43: ']' expected near 'lu'\n",
      "stdout": "",
      "timestamp": 1661907507
    },
    {
      "exit_code": 1,
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_len = #vowels\n    local vowels_upper = vowels:upper()\n    local vowels_lower = vowels:lower()\n    local vowels_upper_len = vowels_upper:len()\n    local vowels_lower_len = vowels_lower:len()\n    local vowels_upper_len = vowels_upper:len()\n    local vowels_lower_len = vowels_lower:len()\n    local vowels_upper_len = vowels_upper:len()\n    local vowels_lower_len = vowels_lower:len()\n    local vowels_upper_len = vowels_upper:len()\n    local vowels_lower_len = vowels_lower:len()\n    local vowels_upper_len = vowels_upper:len()\n    local vowels_lower_len = vowels_lower:len()\n    local vowels_upper_len = vowels_upper:len()\n    local vowels_lower_len = vowels_lower:len()\n    local vowels_upper_len = vowels_upper:len()\n    local vowels_lower_len = vowels_lower:len()\n    local vowels_upper_len = vowels_upper:len()\n    local vowels_lower_len = vowels_lower:len()\n    local vowels_upper_len = vowels_upper:len()\n    local vowels_lower_len = vowels_lower:len()\n    local vowels_upper_len = vowels_upper:len()\n    local vowels_lower_len = vowels_lower:len()\n    local vowels_upper_len = vowels_upper:len()\n    local vowels_lower_len = vowels_lower:len()\n    local vowels_upper_len = vowels_upper:len()\n    local vowels_lower_len = vowels_lower:len()\n    local vowels_upper_len = vowels_upper:len()\n    local vowels_lower_len = vowels_lower:len()\n    local vowels_upper_len = vowels_upper:len()\n    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpraba7i9j.lua:67: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907507
    },
    {
      "exit_code": 1,
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local vowels_len_2 = vowels_len / 2\n    local i = 1\n    local j = 1\n    local k = 1\n    local word_len = #word\n    local word_upper_len = #word.upper()\n    local word_lower_len = #word.lower()\n    local word_upper_len_2 = word_upper_len / 2\n    local word_lower_len_2 = word_lower_len / 2\n    local word_len_2 = word_len / 2\n    local word_len_3 = word_len / 3\n    local word_len_4 = word_len / 4\n    local word_len_5 = word_len / 5\n    local word_len_6 = word_len / 6\n    local word_len_7 = word_len / 7\n    local word_len_8 = word_len / 8\n    local word_len_9 = word_len / 9\n    local word_len_10 = word_len / 10\n    local word_len_11 = word_len / 11\n    local word_len_12 = word_len / 12\n    local word_len_13 = word_len / 13\n    local word_len_14 = word_len / 14\n    local word_len_15 = word_len / 15\n    local word_len_16 = word_len / 16\n    local word_len_17 = word_len / 17\n    local word_len_18 = word_len / 18\n    local word_len_19 = word_len / 19\n    local word_len_20 = word_len / 20\n    local word_len_21 = word_len / 21\n    local word_len_22 = word_len / 22\n    local word_len_23 = word_len / 23\n    local word_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmphvdur3wf.lua:73: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907507
    },
    {
      "exit_code": 1,
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n  local vowels = \"aeiouAEIOU\"\n  local vowels_upper = vowels.upper()\n  local vowels_lower = vowels.lower()\n  local vowels_upper_len = #vowels_upper\n  local vowels_lower_len = #vowels_lower\n  local vowels_len = #vowels\n  local word_len = #word\n  local i = 1\n  local j = 1\n  local k = 1\n  local closest_vowel = \"\"\n  while i <= word_len - 2 and j <= word_len - 2 and k <= word_len - 2:\n    if word[i] == word[i+1] and word[i] == word[i+2] and word[i] != word[i+3]:\n      if word[i] == vowels_upper[k] or word[i] == vowels_lower[k]:\n        if closest_vowel == \"\":\n          closest_vowel = word[i]\n        else:\n          if word[i] == vowels_upper[k] and word[i] > closest_vowel:\n            closest_vowel = word[i]\n          else if word[i] == vowels_lower[k] and word[i] < closest_vowel:\n            closest_vowel = word[i]\n        k = k + 1\n      else:\n        k = k + 1\n    else:\n      i = i + 1\n      j = j + 1\n      k = k + 1\n  return closest_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmc8w1_pv.lua:27: 'do' expected near ':'\n",
      "stdout": "",
      "timestamp": 1661907507
    },
    {
      "exit_code": 1,
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_upper_len_2 = vowels_upper_len * 2\n    local vowels_lower_len_2 = vowels_lower_len * 2\n    local vowels_upper_len_3 = vowels_upper_len * 3\n    local vowels_lower_len_3 = vowels_lower_len * 3\n    local vowels_upper_len_4 = vowels_upper_len * 4\n    local vowels_lower_len_4 = vowels_lower_len * 4\n    local vowels_upper_len_5 = vowels_upper_len * 5\n    local vowels_lower_len_5 = vowels_lower_len * 5\n    local vowels_upper_len_6 = vowels_upper_len * 6\n    local vowels_lower_len_6 = vowels_lower_len * 6\n    local vowels_upper_len_7 = vowels_upper_len * 7\n    local vowels_lower_len_7 = vowels_lower_len * 7\n    local vowels_upper_len_8 = vowels_upper_len * 8\n    local vowels_lower_len_8 = vowels_lower_len * 8\n    local vowels_upper_len_9 = vowels_upper_len * 9\n    local vowels_lower_len_9 = vowels_lower_len * 9\n    local vowels_upper_len_10 = vowels_upper_len * 10\n    local vowels_lower_len_10 = vowels_lower_len * 10\n    local vowels_upper_len_11 = vowels_upper_len * 11\n    local vowels_lower_len_11 = vowels_lower_len * 11\n    local vowels_upper_len_12 = vowels_upper_len * 12\n    local vowels_lower_len_12 = vowels_lower_len * 12\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmphneyn46m.lua:63: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907507
    },
    {
      "exit_code": 1,
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local vowels_upper_index = 1\n    local vowels_lower_index = 1\n    local i = 1\n    while i <= #word do\n        if word[i] == vowels_upper[vowels_upper_index] then\n            vowels_upper_index = vowels_upper_index + 1\n            if vowels_upper_index == vowels_upper_len then\n                vowels_upper_index = 1\n            end\n        elseif word[i] == vowels_lower[vowels_lower_index] then\n            vowels_lower_index = vowels_lower_index + 1\n            if vowels_lower_index == vowels_lower_len then\n                vowels_lower_index = 1\n            end\n        elseif word[i] == vowels[vowels_index] then\n            vowels_index = vowels_index + 1\n            if vowels_index == vowels_len then\n                vowels_index = 1\n            end\n        else\n            i = i + 1\n        end\n        i = i + 1\n    end\n    return vowels[vowels_index]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj4uyelei.lua:17: bad argument #1 to 'upper' (string expected, got no value)\nstack traceback:\n\t/tmp/tmpj4uyelei.lua:17: in local 'candidate'\n\t/tmp/tmpj4uyelei.lua:52: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907507
    },
    {
      "exit_code": 1,
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = \"AEIOU\"\n    local vowels_lower = \"aeiouAEIOU\"\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = #vowels\n    local word_len = #word\n    local i = 1\n    local j = 1\n    local k = 1\n    local closest_vowel = \"\"\n    while i <= word_len - 1 do\n        if word[i] == word[i + 1] then\n            if word[i] == \"A\" or word[i] == \"a\" then\n                if k == 1 then\n                    k = i\n                elseif k == 2 then\n                    k = i\n                elseif k == 3 then\n                    k = i\n                elseif k == 4 then\n                    k = i\n                elseif k == 5 then\n                    k = i\n                elseif k == 6 then\n                    k = i\n                elseif k == 7 then\n                    k = i\n                elseif k == 8 then\n                    k = i\n                elseif k == 9 then\n                    k = i\n                elseif k == 10 then\n                    k = i\n                elseif k == 11 then\n                    k = i\n                elseif k == 12 then\n                    k = i\n                elseif k == 13 then\n                    k = i\n                elseif k == 14 then\n                    k = i\n                elseif k == 15 then\n                    k = i\n                elseif k == 16 then\n                    k = i\n                elseif k == 17 then\n                    k = i\n                elseif k == 18 then\n                    k = i\n                elseif k == 19 then\n                    k = i\n                elseif k == 20 then\n                    k = i\n                elseif k == 21 then\n                    k = i\n                elseif k == 22 then\n                    k = i\n                elseif k == 23 then\n                    k = i\n                elseif k == 24 then\n                    k = i\n                elseif k == 25 then\n                    k = i\n                elseif k == 26 then\n                    k = i\n                elseif k\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpgebg3q3e.lua:83: 'then' expected near 'lu'\n",
      "stdout": "",
      "timestamp": 1661907507
    },
    {
      "exit_code": 1,
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_len = #vowels\n    local vowels_count = 0\n    local vowels_index = 0\n    local word_len = #word\n    for i = 1, word_len do\n        if word[i] ~= \" \" then\n            if vowels_count == 0 then\n                vowels_index = i\n                vowels_count = 1\n            elseif vowels_count == 1 then\n                if vowels[vowels_index] == word[i] then\n                    vowels_index = i\n                    vowels_count = 2\n                else\n                    vowels_index = i - 1\n                    vowels_count = 1\n                end\n            else\n                vowels_index = i - 1\n                vowels_count = 1\n            end\n        else\n            vowels_count = 0\n        end\n    end\n    if vowels_count == 2 then\n        return vowels[vowels_index]\n    else\n        return \"\"\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxc73mr61.lua:52: expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmpxc73mr61.lua:52: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907507
    },
    {
      "exit_code": 1,
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local vowels_upper_index = 1\n    local vowels_lower_index = 1\n    local i = 1\n    while i <= #word do\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \"-\" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \".\" then\n            i = i + 1\n            continue\n        if word[i] == \",\" then\n            i = i + 1\n            continue\n        if word[i] == \"!\" then\n            i = i + 1\n            continue\n        if word[i] == \"?\" then\n            i = i + 1\n            continue\n        if word[i] == \"\\\"\" then\n            i = i + 1\n            continue\n        if word[i] == \"'\" then\n            i = i + 1\n            continue\n        if word[i] == \"(\" then\n            i = i + 1\n            continue\n        if word[i] == \")\" then\n            i = i + 1\n            continue\n        if word[i] == \"{\" then\n            i = i + 1\n            continue\n        if word[i] == \"}\" then\n            i = i + 1\n            continue\n        if word[i] == \":\" then\n            i = i + 1\n            continue\n        if word[i] == \";\" then\n            i = i + 1\n            continue\n        if word[i] == \";\" then\n            i = i + 1\n            continue\n        if word[i] == \";\" then\n            i = i + 1\n            continue\n        if word[i] == \";\" then\n            i = i + 1\n            continue\n        if word[\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpop_vm175.lua:29: syntax error near 'if'\n",
      "stdout": "",
      "timestamp": 1661907507
    },
    {
      "exit_code": 1,
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_lower = vowels.lower()\n    local vowels_upper = vowels.upper()\n    local vowels_lower_len = #vowels_lower\n    local vowels_upper_len = #vowels_upper\n    local vowels_len = #vowels\n    local word_len = #word\n    local i = 1\n    local j = 1\n    local k = 1\n    local closest_vowel = \"\"\n    while i <= word_len - 1 do\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \".\" then\n            i = i + 1\n            continue\n        if word[i] == \",\" then\n            i = i + 1\n            continue\n        if word[i] == \"!\" then\n            i = i + 1\n            continue\n        if word[i] == \"?\" then\n            i = i + 1\n            continue\n        if word[i] == \";\" then\n            i = i + 1\n            continue\n        if word[i] == \":\" then\n            i = i + 1\n            continue\n        if word[i] == \"-\" then\n            i = i + 1\n            continue\n        if word[i] == \"(\" then\n            i = i + 1\n            continue\n        if word[i] == \")\" then\n            i = i + 1\n            continue\n        if word[i] == \"{\" then\n            i = i + 1\n            continue\n        if word[i] == \"}\" then\n            i = i + 1\n            continue\n        if word[i] == \"\\\"\" then\n            i = i + 1\n            continue\n        if word[i] == \"\\\\\" then\n            i = i + 1\n            continue\n        if word[i] == \"/\" then\n            i = i + 1\n            continue\n        if word[i] == \"*\" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpasgw53hd.lua:31: syntax error near 'if'\n",
      "stdout": "",
      "timestamp": 1661907507
    },
    {
      "exit_code": 1,
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_lower = vowels.lower()\n    local vowels_upper = vowels.upper()\n    local vowels_lower_len = #vowels_lower\n    local vowels_upper_len = #vowels_upper\n    local vowels_len = #vowels\n    local word_len = #word\n    local i = 1\n    local j = 1\n    local closest_vowel = \"\"\n    while i <= word_len and j <= word_len - 1 do\n        if word[j] == word[i] and word[i] != \" \" then\n            if j == word_len - 1 then\n                closest_vowel = vowels[vowels_len - 1]\n                break\n            elseif word[i] == vowels_lower[vowels_lower_len - 1] then\n                closest_vowel = vowels_lower[vowels_lower_len - 1]\n                break\n            elseif word[i] == vowels_upper[vowels_upper_len - 1] then\n                closest_vowel = vowels_upper[vowels_upper_len - 1]\n                break\n            elseif word[i] == vowels[vowels_len - 1] then\n                closest_vowel = vowels[vowels_len - 1]\n                break\n            else\n                j = j + 1\n        else\n            i = i + 1\n    end\n    return closest_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpblzg91xg.lua:27: 'then' expected near '!'\n",
      "stdout": "",
      "timestamp": 1661907508
    },
    {
      "exit_code": 1,
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local vowels_len_upper = vowels_upper_len\n    local vowels_len_lower = vowels_lower_len\n    local vowels_len_upper_len = vowels_len_upper\n    local vowels_len_lower_len = vowels_len_lower\n    local vowels_len_upper_len_lower = vowels_len_upper_len + vowels_len_lower_len\n    local vowels_len_upper_len_lower_len = vowels_len_upper_len + vowels_len_lower_len\n    local vowels_len_upper_len_lower_len_upper = vowels_len_upper_len + vowels_len_lower_len + vowels_len_upper\n    local vowels_len_upper_len_lower_len_upper_len = vowels_len_upper_len + vowels_len_lower_len + vowels_len_upper\n    local vowels_len_upper_len_lower_len_upper_len_lower = vowels_len_upper_len + vowels_len_lower_len + vowels_len_upper + vowels_len_lower\n    local vowels_len_upper_len_lower_len_upper_len_lower_len = vowels_len_upper_len + vowels_len_lower_len + vowels_len_upper + vowels_len_lower + vowels_len\n    local vowels_len_upper_len_lower_len_upper_len_lower_len_upper = vowels_len_upper_len + vowels_len_lower_len + vowels_len_upper + vowels_len_lower + vowels_len\n    local vowels_len_upper_len_lower_len_upper_len_lower_len_upper_len\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp66vh1mwu.lua:53: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907508
    },
    {
      "exit_code": 1,
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = #vowels\n    local vowels_upper_index = 1\n    local vowels_lower_index = 1\n    local vowels_index = 1\n    local word_len = #word\n    local i = 1\n    local j = 1\n    local k = 1\n    local word_upper = word.upper()\n    local word_lower = word.lower()\n    local word_upper_index = 1\n    local word_lower_index = 1\n    local word_index = 1\n    local closest_vowel = \"\"\n    while i <= word_len and j <= word_len and k <= word_len and word_index <= word_len:\n        if word_index == word_len:\n            break\n        if word_index == 1:\n            if word_lower[word_index] == \"a\" or word_lower[word_index] == \"e\" or word_lower[word_index] == \"i\" or word_lower[word_index] == \"o\" or word_lower[word_index] == \"u\":\n                closest_vowel = word_lower[word_index]\n                break\n            else:\n                word_index = word_index + 1\n                continue\n        if word_index == word_len:\n            break\n        if word_index == 2:\n            if word_lower[word_index] == \"a\" or word_lower[word_index] == \"e\" or word_lower[word_index] == \"i\" or word_lower[word_index] == \"o\" or word_lower[word_index] == \"u\":\n                closest_vowel = word_lower[word_index]\n                break\n            else:\n                word_index = word_index + 1\n                continue\n        if word_index == word_len:\n            break\n        if word_index == 3:\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp_hnan90a.lua:36: <name> expected near 'if'\n",
      "stdout": "",
      "timestamp": 1661907508
    },
    {
      "exit_code": 1,
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_lower = vowels.lower()\n    local vowels_upper = vowels.upper()\n    local vowels_lower_len = #vowels_lower\n    local vowels_upper_len = #vowels_upper\n    local vowels_len = #vowels\n    local word_len = #word\n    local i = 1\n    local j = 1\n    local closest_vowel = \"\"\n    while i <= word_len - 1 do\n        if word[i] == word[i+1] then\n            if j == 1 then\n                closest_vowel = vowels[vowels_lower_len]\n            elseif j == word_len - 1 then\n                closest_vowel = vowels[vowels_upper_len]\n            else\n                closest_vowel = vowels[vowels_len]\n            end\n            return closest_vowel\n        elseif word[i] == \" \" then\n            i = i + 1\n        elseif word[i] == \"-\" then\n            i = i + 1\n        elseif word[i] == \".\" then\n            i = i + 1\n        else\n            j = j + 1\n        end\n        i = i + 1\n    end\n    return \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpop0aogzy.lua:17: bad argument #1 to 'lower' (string expected, got no value)\nstack traceback:\n\t/tmp/tmpop0aogzy.lua:17: in local 'candidate'\n\t/tmp/tmpop0aogzy.lua:53: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907508
    },
    {
      "exit_code": 1,
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_len = #vowels\n    local vowels_count = 0\n    local vowels_pos = {}\n    for i = 1, vowels_len, 1 do\n        vowels_pos[i] = vowels:sub(i, i)\n    end\n    for i = 1, #word, 1 do\n        if word:sub(i, i) ~= vowels_pos[#                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpyqspkhbj.lua:25: ']' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907508
    },
    {
      "exit_code": 1,
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local vowels_len_upper = vowels_upper_len\n    local vowels_len_lower = vowels_lower_len\n    local vowels_len_upper_len = vowels_len_upper\n    local vowels_len_lower_len = vowels_len_lower\n    local vowels_len_upper_len_lower = vowels_len_upper_len + vowels_len_lower_len\n    local vowels_len_upper_len_lower_len = vowels_len_upper_len + vowels_len_lower_len\n    local vowels_len_upper_len_lower_len_upper = vowels_len_upper_len + vowels_len_lower_len + vowels_len_upper\n    local vowels_len_upper_len_lower_len_upper_len = vowels_len_upper_len + vowels_len_lower_len + vowels_len_upper\n    local vowels_len_upper_len_lower_len_upper_len_lower = vowels_len_upper_len + vowels_len_lower_len + vowels_len_upper + vowels_len_lower\n    local vowels_len_upper_len_lower_len_upper_len_lower_len = vowels_len_upper_len + vowels_len_lower_len + vowels_len_upper + vowels_len_lower + vowels_len_upper\n    local vowels_len_upper_len_lower_len_upper_len_lower_len_upper = vowels_len_upper_len + vowels_len_lower_len + vowels_len_upper + vowels_len_lower + vowels_len_upper\n    local vowels_len_upper_len_lower_len_upper_len_lower_len\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp7423xoya.lua:53: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907508
    },
    {
      "exit_code": 1,
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_count = 0\n    local vowels_index = 0\n    for i = 1, #word, 1 do\n        if string.sub(word, i, 1) ~= \" \" then\n            if string.sub(word, i, 1) in vowels then\n                vowels_count = vowels_count + 1\n                vowels_index = i\n            end\n        end\n    end\n    if vowels_count == 0 then\n        return \"\"\n    else\n        return string.sub(word, vowels_index + 1, 1)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmps0peqsv5.lua:21: 'then' expected near 'in'\n",
      "stdout": "",
      "timestamp": 1661907508
    },
    {
      "exit_code": 1,
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local word_len = #word\n    local i = 1\n    local j = 1\n    local closest_vowel = \"\"\n    while i <= word_len and j <= word_len:\n        if word[j] == \" \":\n            j = j + 1\n            continue\n        if word[i] == \" \":\n            i = i + 1\n            continue\n        if word[i] == word[j]:\n            i = i + 1\n            j = j + 1\n            continue\n        if word[i] == \" \":\n            i = i + 1\n            continue\n        if word[j] == \" \":\n            j = j + 1\n            continue\n        if word[i] == \" \":\n            i = i + 1\n            continue\n        if word[j] == \" \":\n            j = j + 1\n            continue\n        if word[i] == \" \":\n            i = i + 1\n            continue\n        if word[j] == \" \":\n            j = j + 1\n            continue\n        if word[i] == \" \":\n            i = i + 1\n            continue\n        if word[j] == \" \":\n            j = j + 1\n            continue\n        if word[i] == \" \":\n            i = i + 1\n            continue\n        if word[j] == \" \":\n            j = j + 1\n            continue\n        if word[i] == \" \":\n            i = i + 1\n            continue\n        if word[j] == \" \":\n            j = j + 1\n            continue\n        if word[i] == \" \":\n            i = i + 1\n            continue\n        if word[j] == \" \":\n            j = j + 1\n            continue\n        if word[i] == \"\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpagrwqty0.lua:27: <name> expected near 'if'\n",
      "stdout": "",
      "timestamp": 1661907508
    },
    {
      "exit_code": 1,
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_len = #vowels\n    local vowels_pos = {}\n    for i = 1, vowels_len do\n        vowels_pos[vowels[i]] = i\n    end\n    local vowels_pos_len = #vowels_pos\n    local vowels_pos_pos = {}\n    for i = 1, vowels_pos_len do\n        vowels_pos_pos[vowels_pos[i]] = i\n    end\n    local vowels_pos_pos_len = #vowels_pos_pos\n    local vowels_pos_pos_pos = {}\n    for i = 1, vowels_pos_pos_len do\n        vowels_pos_pos_pos[vowels_pos_pos[i]] = i\n    end\n    local vowels_pos_pos_pos_len = #vowels_pos_pos_pos\n    local vowels_pos_pos_pos_pos = {}\n    for i = 1, vowels_pos_pos_pos_len do\n        vowels_pos_pos_pos_pos[vowels_pos_pos_pos[i]] = i\n    end\n    local vowels_pos_pos_pos_pos_len = #vowels_pos_pos_pos_pos\n    local vowels_pos_pos_pos_pos_pos = {}\n    for i = 1, vowels_pos_pos_pos_pos_len do\n        vowels_pos_pos_pos_pos_pos[vowels_pos_pos_pos_pos[i]] = i\n    end\n    local vowels_pos_pos_pos_pos_pos_len = #vowels_pos_pos_pos_pos_pos\n    local vowels_pos_pos_pos_pos_pos_pos = {}\n    for i = 1, vowels_pos_pos_pos_pos_pos_len do\n        vowels_pos_pos_pos_pos_pos_pos[vowels_pos_pos_pos_pos_pos[i]] = i\n    end\n    local vowels_pos\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmphrts2_hu.lua:67: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907508
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local vowels_upper_index = 1\n    local vowels_lower_index = 1\n    local vowels_index = 1\n    local word_len = #word\n    local i = 1\n    local j = 1\n    local closest_vowel = \"\"\n    while i <= word_len and j <= word_len:\n        if word[i] == word[j]:\n            i = i + 1\n            j = j + 1\n        else:\n            if word[i] == vowels_upper[vowels_upper_index]:\n                vowels_upper_index = vowels_upper_index + 1\n                if vowels_upper_index == vowels_upper_len:\n                    vowels_upper_index = 1\n            else:\n                vowels_index = vowels_index + 1\n                if vowels_index == vowels_len:\n                    vowels_index = 1\n            if word[j] == vowels_lower[vowels_lower_index]:\n                vowels_lower_index = vowels_lower_index + 1\n                if vowels_lower_index == vowels_lower_len:\n                    vowels_lower_index = 1\n            else:\n                vowels_index = vowels_index + 1\n                if vowels_index == vowels_len:\n                    vowels_index = 1\n            if vowels_index == vowels_len:\n                closest_vowel = vowels[vowels_index]\n            if vowels_upper_index == vowels_upper_len:\n                closest_vowel = \"\"\n            if vowels_lower_index == vowels_lower_len:\n                closest_vowel = \"\"\n            i = i + 1\n            j =\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpe6vum2sz.lua:30: <name> expected near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = #vowels\n    local word_len = #word\n    local i = 1\n    local j = 1\n    local k = 1\n    local closest_vowel = \"\"\n    while i <= word_len - 1 do\n        if word[i] == word[i + 1] then\n            if k == 1 then\n                closest_vowel = vowels[k]\n                k = k + 1\n            elseif k > 1 and k < vowels_len then\n                if vowels_upper[k] == vowels_upper[k - 1] then\n                    closest_vowel = vowels_upper[k]\n                elseif vowels_lower[k] == vowels_lower[k - 1] then\n                    closest_vowel = vowels_lower[k]\n                else\n                    closest_vowel = vowels[k]\n                end\n            elseif k == vowels_len then\n                closest_vowel = vowels[k]\n            end\n            k = k + 1\n        elseif word[i] == word[i - 1] then\n            if k == 1 then\n                closest_vowel = vowels[k]\n                k = k + 1\n            elseif k > 1 and k < vowels_len then\n                if vowels_upper[k] == vowels_upper[k - 1] then\n                    closest_vowel = vowels_upper[k]\n                elseif vowels_lower[k] == vowels_lower[k - 1] then\n                    closest_vowel = vowels_lower[k]\n                else\n                    closest_vowel = vowels[k]\n                end\n            elseif k == vowels_len then\n                closest_vowel = vowels[k]\n            end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmprugt78ln.lua:79: 'end' expected (to close 'if' at line 28) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_len = #vowels\n    local vowels_pos = {}\n    for i = 1, vowels_len do\n        vowels_pos[vowels[i]] = i\n    end\n    local vowels_pos_len = #vowels_pos\n    local i = 1\n    while i <= #word do\n        if word[i] == word[i+1] then\n            return \"\"\n        end\n        if word[i] == word[i+2] then\n            return \"\"\n        end\n        if word[i] == word[i+3] then\n            return \"\"\n        end\n        if word[i] == word[i+4] then\n            return \"\"\n        end\n        if word[i] == word[i+5] then\n            return \"\"\n        end\n        if word[i] == word[i+6] then\n            return \"\"\n        end\n        if word[i] == word[i+7] then\n            return \"\"\n        end\n        if word[i] == word[i+8] then\n            return \"\"\n        end\n        if word[i] == word[i+9] then\n            return \"\"\n        end\n        if word[i] == word[i+10] then\n            return \"\"\n        end\n        if word[i] == word[i+11] then\n            return \"\"\n        end\n        if word[i] == word[i+12] then\n            return \"\"\n        end\n        if word[i] == word[i+13] then\n            return \"\"\n        end\n        if word[i] == word[i+14] then\n            return \"\"\n        end\n        if word[i] == word[i+15] then\n            return \"\"\n        end\n        if word[i] == word[i+16] then\n            return \"\"\n        end\n        if word[i] == word[i+17] then\n            return \"\"\n        end\n        if word[i] == word[i+18] then\n            return \"\"\n        end\n        if word[i] == word[i+19] then\n            return \"\"\n        \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpd7mtlyhe.lua:82: 'end' expected (to close 'if' at line 79) near 'lu'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n  local vowels = \"aeiouAEIOU\"\n  local vowels_upper = vowels.upper()\n  local vowels_lower = vowels.lower()\n  local vowels_upper_len = #vowels_upper\n  local vowels_lower_len = #vowels_lower\n  local vowels_len = vowels_upper_len + vowels_lower_len\n  local vowels_len_upper = vowels_upper_len\n  local vowels_len_lower = vowels_lower_len\n  local vowels_len_upper_len = vowels_len_upper\n  local vowels_len_lower_len = vowels_len_lower\n  local vowels_len_upper_len_lower = vowels_len_upper_len + vowels_len_lower_len\n  local vowels_len_upper_len_lower_len = vowels_len_upper_len + vowels_len_lower_len\n  local vowels_len_upper_len_lower_len_upper = vowels_len_upper_len + vowels_len_lower_len + vowels_len_upper\n  local vowels_len_upper_len_lower_len_upper_len = vowels_len_upper_len + vowels_len_lower_len + vowels_len_upper\n  local vowels_len_upper_len_lower_len_upper_len_lower = vowels_len_upper_len + vowels_len_lower_len + vowels_len_upper + vowels_len_lower\n  local vowels_len_upper_len_lower_len_upper_len_lower_len = vowels_len_upper_len + vowels_len_lower_len + vowels_len_upper + vowels_len_lower + vowels_len_upper\n  local vowels_len_upper_len_lower_len_upper_len_lower_len_upper = vowels_len_upper_len + vowels_len_lower_len + vowels_len_upper + vowels_len_lower + vowels_len_upper\n  local vowels_len_upper_len_lower_len_upper_len_lower_len\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp6t72_vxn.lua:53: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = #vowels\n    local i = 1\n    local j = 1\n    local k = 1\n    local l = 1\n    local m = 1\n    local n = 1\n    local vowels_upper_index = 1\n    local vowels_lower_index = 1\n    local vowels_index = 1\n    local word_len = #word\n    local word_upper_len = #word.upper()\n    local word_lower_len = #word.lower()\n    local word_index = 1\n    local word_upper_index = 1\n    local word_lower_index = 1\n    local word_upper_index_2 = 1\n    local word_lower_index_2 = 1\n    local word_index_2 = 1\n    local word_upper_index_3 = 1\n    local word_lower_index_3 = 1\n    local word_index_3 = 1\n    local word_upper_index_4 = 1\n    local word_lower_index_4 = 1\n    local word_index_4 = 1\n    local word_upper_index_5 = 1\n    local word_lower_index_5 = 1\n    local word_index_5 = 1\n    local word_upper_index_6 = 1\n    local word_lower_index_6 = 1\n    local word_index_6 = 1\n    local word_upper_index_7 = 1\n    local word_lower_index_7 = 1\n    local word_index_7 = 1\n    local word_upper_index_8 = 1\n    local word_lower_index_8 = 1\n    local word_index_8 = 1\n    local word_upper_index_9 = 1\n    local word_lower_index_9 = 1\n    local word_index_9 = 1\n    local word_upper_index_10 = 1\n    local word_lower_index_10 = 1\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp_wgxp___.lua:83: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n  local vowels = \"aeiouAEIOU\"\n  local vowels_len = #vowels\n  local vowels_pos = {}\n  for i = 1, vowels_len do\n    vowels_pos[vowels[i]] = i\n  end\n  local consonants = \"\"\n  local consonants_pos = {}\n  for i = 1, #word do\n    if word[i] ~= \" \" then\n      if word[i] ~= \" \" then\n        if vowels_pos[word[i]] ~= nil then\n          if consonants ~= \"\" then\n            return consonants\n          end\n          consonants = word[i]\n          consonants_pos[word[i]] = i\n        end\n      end\n    end\n  end\n  if consonants ~= \"\" then\n    return consonants\n  end\n  return \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt906w6yv.lua:20: table index is nil\nstack traceback:\n\t/tmp/tmpt906w6yv.lua:20: in local 'candidate'\n\t/tmp/tmpt906w6yv.lua:46: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_len = #vowels\n    local vowels_count = 0\n    local vowels_index = 0\n    local word_len = #word\n    local word_index = 1\n    local word_vowels_count = 0\n    local word_vowels_index = 0\n    local word_vowels_len = 0\n    local word_vowels_count_index = 0\n    local word_vowels_count_index_index = 0\n    local word_vowels_count_index_len = 0\n    local word_vowels_count_index_len_index = 0\n    local word_vowels_count_index_len_len = 0\n    local word_vowels_count_index_len_len_index = 0\n    local word_vowels_count_index_len_len_len = 0\n    local word_vowels_count_index_len_len_len_index = 0\n    local word_vowels_count_index_len_len_len_len = 0\n    local word_vowels_count_index_len_len_len_len_index = 0\n    local word_vowels_count_index_len_len_len_len_len = 0\n    local word_vowels_count_index_len_len_len_len_len_index = 0\n    local word_vowels_count_index_len_len_len_len_len_len = 0\n    local word_vowels_count_index_len_len_len_len_len_len_index = 0\n    local word_vowels_count_index_len_len_len_len_len_len_len = 0\n    local word_vowels_count_index_len_len_len_len_len_len_len_index = 0\n    local word_vowels_count_index_len_len_len_len_len_len_len_len = 0\n    local word_vowels_count_index_len_len_len_len_len_len_len_len_index = 0\n    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpa1rls5_4.lua:63: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = #vowels\n    local vowels_upper_index = 1\n    local vowels_lower_index = 1\n    local vowels_index = 1\n    local word_len = #word\n    local i = 1\n    local j = 1\n    local k = 1\n    local word_upper = word.upper()\n    local word_lower = word.lower()\n    local word_upper_index = 1\n    local word_lower_index = 1\n    local word_index = 1\n    local closest_vowel = \"\"\n    while i <= word_len - 1 do\n        if word_upper[i] == \" \" then\n            i = i + 1\n            continue\n        if word_lower[i] == \" \" then\n            i = i + 1\n            continue\n        if word_upper[i] == \" \" then\n            i = i + 1\n            continue\n        if word_lower[i] == \" \" then\n            i = i + 1\n            continue\n        if word_upper[i] == word_lower[i] then\n            i = i + 1\n            continue\n        if word_upper[i] == \" \" then\n            i = i + 1\n            continue\n        if word_lower[i] == \" \" then\n            i = i + 1\n            continue\n        if word_upper[i] == \" \" then\n            i = i + 1\n            continue\n        if word_lower[i] == \" \" then\n            i = i + 1\n            continue\n        if word_upper[i] == vowels_upper[vowels_upper_index] then\n            vowels_upper_index = vowels_upper_index + 1\n            if vowels_upper_index == vowels_upper_len then\n                vowels_upper_index = 1\n            if vowels_lower[vowels_lower_index] == word_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpgcml_0pc.lua:39: syntax error near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local vowels_upper_index = 1\n    local vowels_lower_index = 1\n    local vowels_index = 1\n    local i = 1\n    local j = 1\n    local k = 1\n    local word_len = #word\n    local word_upper_len = #word.upper()\n    local word_lower_len = #word.lower()\n    local word_upper_index = 1\n    local word_lower_index = 1\n    local word_index = 1\n    local closest_vowel = \"\"\n    while i <= word_len and j <= word_len and k <= word_len and word_index <= word_len:\n        if word_index == word_len:\n            break\n        if word_index == 1:\n            if word[word_index] == word[word_index].upper():\n                word_upper_index = word_index\n                word_lower_index = word_index\n                word_index = word_index + 1\n            else:\n                word_upper_index = word_index\n                word_lower_index = word_index\n                word_index = word_index + 1\n        else:\n            if word[word_index] == word[word_index].upper():\n                word_upper_index = word_index\n                word_lower_index = word_index\n                word_index = word_index + 1\n            else:\n                word_upper_index = word_index\n                word_lower_index = word_index\n                word_index = word_index + 1\n        if word_index == word_len:\n            break\n        if word_index == 1:\n            if word[word_index] == word[word_index].lower():\n                word_upper_index = word_index\n                word_lower_index = word_index\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpy3muzkcb.lua:36: <name> expected near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = #vowels\n    local word_len = #word\n    local i = 1\n    local j = 1\n    local k = 1\n    local word_upper = word.upper()\n    local word_lower = word.lower()\n    local word_upper_len = #word_upper\n    local word_lower_len = #word_lower\n    local word_len = #word\n    local closest_vowel = \"\"\n    while i <= word_len and j <= word_len and k <= word_len:\n        if word_upper[i] == word_lower[j] and word_upper[j] == word_lower[k]:\n            if closest_vowel == \"\":\n                closest_vowel = vowels[k]\n            else:\n                if k < vowels_len and k < vowels_lower_len and k < vowels_upper_len:\n                    closest_vowel = vowels[k]\n                else:\n                    closest_vowel = \"\"\n            i = i + 1\n            j = j + 1\n            k = k + 1\n        else:\n            if word_upper[i] == word_lower[j]:\n                if j < vowels_len and j < vowels_lower_len and j < vowels_upper_len:\n                    closest_vowel = vowels[j]\n                else:\n                    closest_vowel = \"\"\n                i = i + 1\n                j = j + 1\n            else:\n                if word_upper[j] == word_lower[k]:\n                    if k < vowels_len and k < vowels_lower_len and k < vowels_upper_len:\n                        closest_vowel = vowels[k]\n                    else:\n                        closest_vowel = \"\"\n                    j = j\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpkbjyt5s0.lua:33: <name> expected near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local vowels_upper_index = 1\n    local vowels_lower_index = 1\n    local vowels_index = 1\n    local word_len = #word\n    local i = 1\n    local j = 1\n    local closest_vowel = \"\"\n    while i <= word_len and j <= word_len:\n        if word[i] == word[j]:\n            i = i + 1\n            j = j + 1\n        else:\n            if word[i] == \" \":\n                i = i + 1\n            else:\n                if word[j] == \" \":\n                    j = j + 1\n                else:\n                    if vowels_index < vowels_len:\n                        if word[i] == vowels_upper[vowels_upper_index] or word[i] == vowels_lower[vowels_lower_index]:\n                            vowels_index = vowels_index + 1\n                            if vowels_index == vowels_upper_len:\n                                vowels_upper_index = vowels_upper_index + 1\n                            else:\n                                vowels_lower_index = vowels_lower_index + 1\n                        else:\n                            if word[i] < word[j]:\n                                closest_vowel = word[i]\n                            else:\n                                closest_vowel = word[j]\n                            return closest_vowel\n                    else:\n                        return closest_vowel\n    return closest_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpcsw8yfsb.lua:30: <name> expected near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = #vowels\n    local word_len = #word\n    local i = 1\n    local j = 1\n    local k = 1\n    local found = false\n    local closest_vowel = \"\"\n    while i <= word_len and not found do\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \".\" then\n            i = i + 1\n            continue\n        if word[i] == \"-\" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i +\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpeezium8j.lua:32: syntax error near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local word_len = #word\n    local i = 1\n    local j = 1\n    local closest_vowel = \"\"\n    while i <= word_len - 1 do\n        if word[i] == word[i + 1] then\n            if j <= vowels_len - 1 then\n                if word[i] == vowels_upper[j] then\n                    closest_vowel = vowels_upper[j]\n                    j = j + 1\n                elseif word[i] == vowels_lower[j] then\n                    closest_vowel = vowels_lower[j]\n                    j = j + 1\n                else\n                    j = j + 1\n                end\n            else\n                j = j + 1\n            end\n        else\n            i = i + 1\n        end\n    end\n    return closest_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk3squzst.lua:17: bad argument #1 to 'upper' (string expected, got no value)\nstack traceback:\n\t/tmp/tmpk3squzst.lua:17: in local 'candidate'\n\t/tmp/tmpk3squzst.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_len = #vowels\n    local vowels_count = 0\n    local i = 1\n    local j = 1\n    local result = \"\"\n    while i <= #word do\n        if word[i] == word[j] then\n            if vowels_count == 0 then\n                result = word[i]\n                break\n            elseif vowels_count < vowels_len then\n                result = vowels[vowels_count]\n                break\n            elseif vowels_count == vowels_len then\n                result = vowels[vowels_count]\n                break\n            end\n        elseif vowels_count > 0 then\n            vowels_count = vowels_count - 1\n        else\n            i = i + 1\n        end\n        j = j + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmput185_8z.lua:47: expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmput185_8z.lua:47: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local vowels_len_2 = vowels_len * 2\n    local vowels_len_3 = vowels_len * 3\n    local vowels_len_4 = vowels_len * 4\n    local vowels_len_5 = vowels_len * 5\n    local vowels_len_6 = vowels_len * 6\n    local vowels_len_7 = vowels_len * 7\n    local vowels_len_8 = vowels_len * 8\n    local vowels_len_9 = vowels_len * 9\n    local vowels_len_10 = vowels_len * 10\n    local vowels_len_11 = vowels_len * 11\n    local vowels_len_12 = vowels_len * 12\n    local vowels_len_13 = vowels_len * 13\n    local vowels_len_14 = vowels_len * 14\n    local vowels_len_15 = vowels_len * 15\n    local vowels_len_16 = vowels_len * 16\n    local vowels_len_17 = vowels_len * 17\n    local vowels_len_18 = vowels_len * 18\n    local vowels_len_19 = vowels_len * 19\n    local vowels_len_20 = vowels_len * 20\n    local vowels_len_21 = vowels_len * 21\n    local vowels_len_22 = vowels_len * 22\n    local vowels_len_23 = vowels_len * 23\n    local vowels_len_24 = vowels_len * 24\n    local vowels_len_25 = vowels_len * 25\n    local vowels_len_26 = vowels_len * 26\n    local vowels_len_27 = vowels_len * 27\n    local vow\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp_kret9yw.lua:68: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = #vowels\n    local vowels_upper_index = 1\n    local vowels_lower_index = 1\n    local vowels_index = 1\n    local word_len = #word\n    local word_upper_index = 1\n    local word_lower_index = 1\n    local word_index = 1\n    local closest_vowel = \"\"\n    while word_index < word_len do\n        if word_index == 1 then\n            if word[word_index] == word[word_index + 1] then\n                closest_vowel = word[word_index]\n                break\n            end\n        else\n            if word_index == word_len - 1 then\n                if word[word_index] == word[word_index - 1] then\n                    closest_vowel = word[word_index]\n                    break\n                end\n            else\n                if word[word_index] == word[word_index + 1] then\n                    closest_vowel = word[word_index]\n                    break\n                end\n                if word[word_index] == word[word_index - 1] then\n                    closest_vowel = word[word_index]\n                    break\n                end\n            end\n        end\n        word_index = word_index + 1\n    end\n    return closest_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwt2on996.lua:17: bad argument #1 to 'upper' (string expected, got no value)\nstack traceback:\n\t/tmp/tmpwt2on996.lua:17: in local 'candidate'\n\t/tmp/tmpwt2on996.lua:61: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_len = #vowels\n    local vowels_pos = {}\n    for i = 1, vowels_len do\n        vowels_pos[vowels[i]] = i\n    end\n    local vowels_pos_len = #vowels_pos\n    local vowels_pos_pos = {}\n    for i = 1, vowels_pos_len do\n        vowels_pos_pos[vowels_pos[i]] = i\n    end\n    local vowels_pos_pos_len = #vowels_pos_pos\n    local vowels_pos_pos_pos = {}\n    for i = 1, vowels_pos_pos_len do\n        vowels_pos_pos_pos[vowels_pos_pos[i]] = i\n    end\n    local vowels_pos_pos_pos_len = #vowels_pos_pos_pos\n    local vowels_pos_pos_pos_pos = {}\n    for i = 1, vowels_pos_pos_pos_len do\n        vowels_pos_pos_pos_pos[vowels_pos_pos_pos[i]] = i\n    end\n    local vowels_pos_pos_pos_pos_len = #vowels_pos_pos_pos_pos\n    local vowels_pos_pos_pos_pos_pos = {}\n    for i = 1, vowels_pos_pos_pos_pos_len do\n        vowels_pos_pos_pos_pos_pos[vowels_pos_pos_pos_pos[i]] = i\n    end\n    local vowels_pos_pos_pos_pos_pos_len = #vowels_pos_pos_pos_pos_pos\n    local vowels_pos_pos_pos_pos_pos_pos = {}\n    for i = 1, vowels_pos_pos_pos_pos_pos_len do\n        vowels_pos_pos_pos_pos_pos_pos[vowels_pos_pos_pos_pos_pos[i]] = i\n    end\n    local vowels_pos\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmphrts2_hu.lua:67: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907508
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local word_len = #word\n    local i = 1\n    local j = 1\n    local closest_vowel = \"\"\n    while i <= word_len and j <= word_len:\n        if word[i] == word[j]:\n            i = i + 1\n            j = j + 1\n        else:\n            if word[i] in vowels_upper:\n                if j - i < vowels_upper_len:\n                    closest_vowel = vowels_upper[j - i]\n                else:\n                    closest_vowel = \"\"\n                break\n            elif word[i] in vowels_lower:\n                if j - i < vowels_lower_len:\n                    closest_vowel = vowels_lower[j - i]\n                else:\n                    closest_vowel = \"\"\n                break\n            else:\n                i = i + 1\n    return closest_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpknm9i60m.lua:27: <name> expected near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local word_len = #word\n    local i = 1\n    local j = 1\n    local closest_vowel = \"\"\n    while i <= word_len - 1 do\n        if word[i] == word[i + 1] then\n            if j == 1 then\n                closest_vowel = vowels[vowels_upper_len + j - 1]\n            elseif j == vowels_lower_len then\n                closest_vowel = vowels[vowels_lower_len + j - 1]\n            else\n                closest_vowel = vowels[j - 1]\n            end\n            return closest_vowel\n        elseif word[i] == \" \" then\n            i = i + 1\n        elseif word[i] == \"-\" then\n            i = i + 1\n        elseif word[i] == \".\" then\n            i = i + 1\n        elseif word[i] == \",\" then\n            i = i + 1\n        elseif word[i] == \"!\" then\n            i = i + 1\n        elseif word[i] == \"?\" then\n            i = i + 1\n        elseif word[i] == \"(\" then\n            i = i + 1\n        elseif word[i] == \")\" then\n            i = i + 1\n        elseif word[i] == \"{\" then\n            i = i + 1\n        elseif word[i] == \"}\" then\n            i = i + 1\n        elseif word[i] == \"\\\"\" then\n            i = i + 1\n        elseif word[i] == \"\\\\\" then\n            i = i + 1\n        elseif word[i] == \"/\" then\n            i = i + 1\n        elseif word[i] == \":\" then\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmplhq53xrb.lua:83: 'end' expected (to close 'if' at line 27) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n  local vowels = \"aeiouAEIOU\"\n  local vowels_lower = vowels.lower()\n  local vowels_upper = vowels.upper()\n  local vowels_lower_len = #vowels_lower\n  local vowels_upper_len = #vowels_upper\n  local vowels_len = #vowels\n  local word_len = #word\n  local i = 1\n  local j = 1\n  local k = 1\n  local word_lower = word.lower()\n  local word_upper = word.upper()\n  local word_upper_len = #word_upper\n  local word_lower_len = #word_lower\n  local word_len = #word\n  local closest_vowel = \"\"\n  while i <= word_len - 1 and j <= word_len - 1 and k <= word_len - 1:\n    if word_lower[i] == word_lower[j] and word_lower[j] == word_lower[k]:\n      if word_upper[i] == word_upper[j] and word_upper[j] == word_upper[k]:\n        if i > j and i > k:\n          closest_vowel = vowels[k]\n        elif j > i and j > k:\n          closest_vowel = vowels[i]\n        elif k > i and k > j:\n          closest_vowel = vowels[j]\n        else:\n          closest_vowel = \"\"\n        break\n      else:\n        if i > j and i > k:\n          closest_vowel = vowels[k]\n        elif j > i and j > k:\n          closest_vowel = vowels[i]\n        elif k > i and k > j:\n          closest_vowel = vowels[j]\n        else:\n          closest_vowel = \"\"\n        break\n    else:\n      if word_lower[i] == word_lower[j]:\n        if i > j:\n          closest_vowel = vowels[k]\n        else:\n          \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpro41u69u.lua:32: 'do' expected near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_count = 0\n    local vowels_count_start = 0\n    local vowels_count_end = 0\n    local vowels_count_start_end = 0\n    local vowels_count_start_end_count = 0\n    local i = 0\n    local j = 0\n    local k = 0\n    local l = 0\n    local m = 0\n    local n = 0\n    local o = 0\n    local p = 0\n    local q = 0\n    local r = 0\n    local s = 0\n    local t = 0\n    local u = 0\n    local v = 0\n    local w = 0\n    local x = 0\n    local y = 0\n    local z = 0\n    local count = 0\n    local count_start = 0\n    local count_end = 0\n    local count_start_end = 0\n    local count_start_end_count = 0\n    local count_start_end_count_start = 0\n    local count_start_end_count_end = 0\n    local count_start_end_count_start_end = 0\n    local count_start_end_count_start_end_count = 0\n    local count_start_end_count_start_end_count_start = 0\n    local count_start_end_count_start_end_count_end = 0\n    local count_start_end_count_start_end_count_start_end = 0\n    local count_start_end_count_start_end_count_start_end_count = 0\n    local count_start_end_count_start_end_count_start_end_count_start = 0\n    local count_start_end_count_start_end_count_start_end_count_end = 0\n    local count_start_end_count_start_end_count_start_end_count_start_end = 0\n    local count_start_end_count_start_end_count_start_end_count_start_end_count = 0\n    local count_start_end_count_start_end_count_start_end_count_start_end_count_start\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpriztb2fh.lua:77: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = #vowels\n    local word_len = #word\n    local i = 1\n    local j = 1\n    local k = 1\n    local closest_vowel = \"\"\n    while i <= word_len - 1 do\n        if word[i] == word[i+1] then\n            if k == 1 then\n                k = i\n            elseif k == 2 then\n                k = i\n            elseif k == 3 then\n                k = i\n            elseif k == 4 then\n                k = i\n            elseif k == 5 then\n                k = i\n            elseif k == 6 then\n                k = i\n            elseif k == 7 then\n                k = i\n            elseif k == 8 then\n                k = i\n            elseif k == 9 then\n                k = i\n            elseif k == 10 then\n                k = i\n            elseif k == 11 then\n                k = i\n            elseif k == 12 then\n                k = i\n            elseif k == 13 then\n                k = i\n            elseif k == 14 then\n                k = i\n            elseif k == 15 then\n                k = i\n            elseif k == 16 then\n                k = i\n            elseif k == 17 then\n                k = i\n            elseif k == 18 then\n                k = i\n            elseif k == 19 then\n                k = i\n            elseif k == 20 then\n                k = i\n            elseif k == 21 then\n                k = i\n            elseif k == 22 then\n                k = i\n            elseif k == 23 then\n                k = i\n            elseif k == 24 then\n                k = i\n            elseif k == 25 then\n                k = i\n            elseif k == 26 then\n                k = i\n            elseif k == 27 then\n                k = i\n            elseif k == 28 then\n                k = i\n            else\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp6vs7ngdt.lua:105: 'end' expected (to close 'if' at line 29) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_len = #vowels\n    local vowels_pos = {}\n    for i = 1, vowels_len do\n        vowels_pos[vowels[i]] = i\n    end\n    local vowels_pos_len = #vowels_pos\n    local vowels_pos_pos = {}\n    for i = 1, vowels_pos_len do\n        vowels_pos_pos[vowels_pos[i]] = i\n    end\n    local vowels_pos_pos_len = #vowels_pos_pos\n    local right_side_consonants = {}\n    for i = 1, #word do\n        if word[i] ~= \"a\" and word[i] ~= \"e\" and word[i] ~= \"i\" and word[i] ~= \"o\" and word[i] ~= \"u\" then\n            right_side_consonants[i] = word[i]\n        end\n    end\n    local right_side_consonants_len = #right_side_consonants\n    local right_side_consonants_pos = {}\n    for i = 1, right_side_consonants_len do\n        right_side_consonants_pos[right_side_consonants[i]] = i\n    end\n    local right_side_consonants_pos_len = #right_side_consonants_pos\n    local right_side_consonants_pos_pos = {}\n    for i = 1, right_side_consonants_pos_len do\n        right_side_consonants_pos_pos[right_side_consonants_pos[i]] = i\n    end\n    local right_side_consonants_pos_pos_len = #right_side_consonants_pos_pos\n    local right_side_consonants_pos_pos_pos = {}\n    for i = 1, right_side_consonants_pos_pos_len do\n        right_side_consonants_pos_pos_pos[right_side_consonants_pos_pos\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpjp0zt7ic.lua:48: ']' expected near 'lu'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_len = #vowels\n    local vowels_pos = {}\n    for i = 1, vowels_len do\n        vowels_pos[vowels[i]] = i\n    end\n    local vowels_pos_len = #vowels_pos\n    local vowels_pos_pos = {}\n    for i = 1, vowels_pos_len do\n        vowels_pos_pos[vowels_pos[i]] = i\n    end\n    local vowels_pos_pos_len = #vowels_pos_pos\n    local vowels_pos_pos_pos = {}\n    for i = 1, vowels_pos_pos_len do\n        vowels_pos_pos_pos[vowels_pos_pos[i]] = i\n    end\n    local vowels_pos_pos_pos_len = #vowels_pos_pos_pos\n    local vowels_pos_pos_pos_pos = {}\n    for i = 1, vowels_pos_pos_pos_len do\n        vowels_pos_pos_pos_pos[vowels_pos_pos_pos[i]] = i\n    end\n    local vowels_pos_pos_pos_pos_len = #vowels_pos_pos_pos_pos\n    local vowels_pos_pos_pos_pos_pos = {}\n    for i = 1, vowels_pos_pos_pos_pos_len do\n        vowels_pos_pos_pos_pos_pos[vowels_pos_pos_pos_pos[i]] = i\n    end\n    local vowels_pos_pos_pos_pos_pos_len = #vowels_pos_pos_pos_pos_pos\n    local vowels_pos_pos_pos_pos_pos_pos = {}\n    for i = 1, vowels_pos_pos_pos_pos_pos_len do\n        vowels_pos_pos_pos_pos_pos_pos[vowels_pos_pos_pos_pos_pos[i]] = i\n    end\n    local vowels_pos\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmphrts2_hu.lua:67: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907508
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n  local vowels = \"aeiouAEIOU\"\n  local vowels_upper = vowels.upper()\n  local vowels_lower = vowels.lower()\n  local vowels_upper_len = #vowels_upper\n  local vowels_lower_len = #vowels_lower\n  local vowels_len = vowels_upper_len + vowels_lower_len\n  local vowels_len_2 = vowels_len * 2\n  local vowels_len_3 = vowels_len * 3\n  local vowels_len_4 = vowels_len * 4\n  local vowels_len_5 = vowels_len * 5\n  local vowels_len_6 = vowels_len * 6\n  local vowels_len_7 = vowels_len * 7\n  local vowels_len_8 = vowels_len * 8\n  local vowels_len_9 = vowels_len * 9\n  local vowels_len_10 = vowels_len * 10\n  local vowels_len_11 = vowels_len * 11\n  local vowels_len_12 = vowels_len * 12\n  local vowels_len_13 = vowels_len * 13\n  local vowels_len_14 = vowels_len * 14\n  local vowels_len_15 = vowels_len * 15\n  local vowels_len_16 = vowels_len * 16\n  local vowels_len_17 = vowels_len * 17\n  local vowels_len_18 = vowels_len * 18\n  local vowels_len_19 = vowels_len * 19\n  local vowels_len_20 = vowels_len * 20\n  local vowels_len_21 = vowels_len * 21\n  local vowels_len_22 = vowels_len * 22\n  local vowels_len_23 = vowels_len * 23\n  local vowels_len_24 = vowels_len * 24\n  local vowels_len_25 = vowels_len * 25\n  local vowels_len_26 = vowels_len * 26\n  local vowels_len_27 = vowels_len * 27\n  local vow\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp5_at2j10.lua:68: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local vowels_upper_index = 1\n    local vowels_lower_index = 1\n    local vowels_index = 1\n    local i = 1\n    while i <= #word do\n        if word[i] == vowels_upper[vowels_upper_index] or word[i] == vowels_lower[vowels_lower_index] then\n            vowels_index = i\n            if vowels_upper_index == vowels_upper_len then\n                vowels_upper_index = 1\n                vowels_lower_index = 1\n            else\n                vowels_upper_index = vowels_upper_index + 1\n            end\n            if vowels_lower_index == vowels_lower_len then\n                vowels_lower_index = 1\n                vowels_upper_index = 1\n            else\n                vowels_lower_index = vowels_lower_index + 1\n            end\n            i = i + 1\n        elseif word[i] == vowels_upper[vowels_upper_index] then\n            vowels_index = i\n            vowels_upper_index = vowels_upper_index + 1\n            i = i + 1\n        elseif word[i] == vowels_lower[vowels_lower_index] then\n            vowels_index = i\n            vowels_lower_index = vowels_lower_index + 1\n            i = i + 1\n        else\n            i = i + 1\n        end\n    end\n    return vowels[vowels_index]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqbf3fihw.lua:17: bad argument #1 to 'upper' (string expected, got no value)\nstack traceback:\n\t/tmp/tmpqbf3fihw.lua:17: in local 'candidate'\n\t/tmp/tmpqbf3fihw.lua:60: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_len = #vowels\n    local vowels_count = 0\n    local consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    local consonants_len = #consonants\n    local consonants_count = 0\n    local i = 1\n    local j = 1\n    local k = 1\n    local l = 1\n    local m = 1\n    local n = 1\n    local p = 1\n    local q = 1\n    local r = 1\n    local s = 1\n    local t = 1\n    local u = 1\n    local v = 1\n    local w = 1\n    local x = 1\n    local y = 1\n    local z = 1\n    local result = \"\"\n    while i <= #word do\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsiu5oy_d.lua:44: syntax error near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_len = #vowels\n    local vowels_count = 0\n    local i = 1\n    while i <= #word do\n        if word[i] == vowels[vowels_count] then\n            vowels_count = vowels_count + 1\n            if vowels_count == vowels_len then\n                return vowels[vowels_count]\n            end\n        end\n        i = i + 1\n    end\n    return \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsme_qea4.lua:35: expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpsme_qea4.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_len = #vowels\n    local vowels_count = 0\n    local i = 1\n    local j = 1\n    local found = false\n    while i <= #word and not found do\n        if word[i] == word[i+1] then\n            if i == 1 or vowels[j] == word[i-1] then\n                found = true\n                j = j + 1\n                if j == vowels_len then\n                    j = 0\n                end\n            end\n            i = i + 1\n        else\n            i = i + 1\n        end\n    end\n    return found and vowels[j] or \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp97nvqhvn.lua:42: expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp97nvqhvn.lua:42: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = #vowels\n    local word_len = #word\n    local i = 1\n    local j = 1\n    local k = 1\n    local closest_vowel = \"\"\n    while i <= word_len and j <= word_len and k <= word_len - 1 do\n        if word[i] == word[j] and word[j] == word[k] and word[k] == word[k + 1] and word[k + 1] == word[k + 2] and word[k + 2] == word[k + 3] and word[k + 3] == word[k + 4] and word[k + 4] == word[k + 5] and word[k + 5] == word[k + 6] and word[k + 6] == word[k + 7] and word[k + 7] == word[k + 8] and word[k + 8] == word[k + 9] and word[k + 9] == word[k + 10] and word[k + 10] == word[k + 11] and word[k + 11] == word[k + 12] and word[k + 12] == word[k + 13] and word[k + 13] == word[k + 14] and word[k + 14] == word[k + 15] and word[k + 15] == word[k + 16] and word[k + 16] == word[k + 17] and word[k + 17] == word[k + 18] and word[k + 18] == word[k + 19] and word[k + 19] == word[k + 20] and word[k + 20] == word[k + 21] and word[k + 21] == word[k + 22] and word[k + 22] == word[k + 23] and word[k + 23] == word[k + 24] and word[k + 24] == word[k + 25\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpj_7825_9.lua:29: ']' expected near 'lu'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_len = #vowels\n    local vowels_count = 0\n    local i = 1\n    while i <= #word do\n        if word[i] == vowels[vowels_count] then\n            vowels_count = vowels_count + 1\n            if vowels_count == vowels_len then\n                return word[i]\n            end\n        end\n        i = i + 1\n    end\n    return \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp27duc1kx.lua:35: expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp27duc1kx.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_len = #vowels\n    local vowels_count = 0\n    local vowels_index = 0\n    local word_len = #word\n    local word_index = 0\n    local closest_vowel_index = 0\n    local closest_vowel_len = 0\n    local closest_vowel_count = 0\n    local closest_vowel_index = 0\n    local closest_vowel_len = 0\n    local closest_vowel_count = 0\n    local closest_vowel_index = 0\n    local closest_vowel_len = 0\n    local closest_vowel_count = 0\n    local closest_vowel_index = 0\n    local closest_vowel_len = 0\n    local closest_vowel_count = 0\n    local closest_vowel_index = 0\n    local closest_vowel_len = 0\n    local closest_vowel_count = 0\n    local closest_vowel_index = 0\n    local closest_vowel_len = 0\n    local closest_vowel_count = 0\n    local closest_vowel_index = 0\n    local closest_vowel_len = 0\n    local closest_vowel_count = 0\n    local closest_vowel_index = 0\n    local closest_vowel_len = 0\n    local closest_vowel_count = 0\n    local closest_vowel_index = 0\n    local closest_vowel_len = 0\n    local closest_vowel_count = 0\n    local closest_vowel_index = 0\n    local closest_vowel_len = 0\n    local closest_vowel_count = 0\n    local closest_vowel_index = 0\n    local closest_vowel_len = 0\n    local closest_vowel_count = 0\n    local closest_vowel_index = 0\n    local closest_vowel_len = 0\n    local closest_vowel_count = 0\n    local closest_vowel_index = 0\n    local closest_vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpm3181mu0.lua:79: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n  local vowels = \"aeiouAEIOU\"\n  local vowels_len = #vowels\n  local word_len = #word\n  local i = word_len - 1\n  local j = word_len - 1\n  local closest_vowel = \"\"\n  while i >= 0 and j >= 0 do\n    if word[i] == word[j] then\n      if i == 0 or j == 0 then\n        closest_vowel = \"\"\n      else\n        closest_vowel = vowels[math.mod(i - 1, vowels_len)]\n      end\n      break\n    elseif vowels[math.mod(i - 1, vowels_len)] == word[i] then\n      closest_vowel = vowels[math.mod(i - 1, vowels_len)]\n      break\n    elseif vowels[math.mod(j - 1, vowels_len)] == word[j] then\n      closest_vowel = vowels[math.mod(j - 1, vowels_len)]\n      break\n    elseif word[i] == vowels[math.mod(j - 1, vowels_len)] then\n      closest_vowel = vowels[math.mod(j - 1, vowels_len)]\n      break\n    elseif word[j] == vowels[math.mod(i - 1, vowels_len)] then\n      closest_vowel = vowels[math.mod(i - 1, vowels_len)]\n      break\n    end\n    i = i - 1\n    j = j - 1\n  end\n  return closest_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkl7bm3cv.lua:27: attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmpkl7bm3cv.lua:27: in local 'candidate'\n\t/tmp/tmpkl7bm3cv.lua:52: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local vowels_upper_index = 1\n    local vowels_lower_index = 1\n    local i = 1\n    while i <= #word do\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7bydhmzj.lua:29: syntax error near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = \"AEIOU\"\n    local vowels_lower = \"aeiouAEIOU\"\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = #vowels\n    local word_len = #word\n    local i = 1\n    local j = 1\n    local closest_vowel = \"\"\n    while i <= word_len and j <= word_len:\n        if word[j] == word[i]:\n            i = i + 1\n            j = j + 1\n        else:\n            if word[j] in vowels_upper:\n                if i - j < vowels_upper_len:\n                    closest_vowel = vowels_upper[i - j]\n                else:\n                    closest_vowel = \"\"\n            else:\n                if i - j < vowels_lower_len:\n                    closest_vowel = vowels_lower[i - j]\n                else:\n                    closest_vowel = \"\"\n            break\n    return closest_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpygs23pyv.lua:27: <name> expected near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local i = 1\n    local j = 1\n    local k = 1\n    local word_len = #word\n    local closest_vowel = \"\"\n    while i <= word_len and j <= word_len and k <= word_len:\n        if word[i] == word[j] and word[j] == word[k]:\n            if word[i] == \"A\" or word[i] == \"E\" or word[i] == \"I\" or word[i] == \"O\" or word[i] == \"U\":\n                if j - i > 1 and k - j > 1:\n                    closest_vowel = word[i+1]\n                    break\n                else:\n                    i = i + 1\n            else:\n                if j - i > 1 and k - j > 1:\n                    closest_vowel = word[j+1]\n                    break\n                else:\n                    j = j + 1\n        else:\n            if word[i] == word[j] or word[i] == word[k]:\n                i = i + 1\n            else:\n                j = j + 1\n                k = k + 1\n    return closest_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpv1576j26.lua:28: <name> expected near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = #vowels\n    local vowels_upper_index = 1\n    local vowels_lower_index = 1\n    local vowels_index = 1\n    local word_len = #word\n    local word_index = 1\n    local closest_vowel = \"\"\n    while word_index <= word_len do\n        if word_index == word_len or word[word_index] == \" \" then\n            if word_index - 1 >= 1 and word[word_index - 1] == \" \" then\n                word_index = word_index - 1\n            elseif word_index + 1 <= word_len and word[word_index + 1] == \" \" then\n                word_index = word_index + 1\n            elseif word_index - 1 >= 1 and word[word_index - 1] not in vowels and word[word_index - 1] not in vowels_upper and word[word_index - 1] not in vowels_lower and word[word_index - 1] not in vowels_upper_len and word[word_index - 1] not in vowels_lower_len and word[word_index - 1] not in vowels_len then\n                word_index = word_index - 1\n            elseif word_index + 1 <= word_len and word[word_index + 1] not in vowels and word[word_index + 1] not in vowels_upper and word[word_index + 1] not in vowels_lower and word[word_index + 1] not in vowels_upper_len and word[word_index + 1] not in vowels_lower_len and word[word_index + 1] not in vowels_len then\n                word_index = word_index + 1\n            elseif word_index - 1 >= 1 and word[word_index - 1] in vowels and word[word_index - 1] in vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpvs8i3q8w.lua:34: 'then' expected near 'not'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_len = #vowels\n    local word_len = #word\n    local i = word_len - 1\n    while i >= 0 do\n        if word[i] == \" \" then\n            i = i - 1\n            continue\n        if word[i] == \" \" then\n            i = i - 1\n            continue\n        if word[i] == \" \" then\n            i = i - 1\n            continue\n        if word[i] == \" \" then\n            i = i - 1\n            continue\n        if word[i] == \" \" then\n            i = i - 1\n            continue\n        if word[i] == \" \" then\n            i = i - 1\n            continue\n        if word[i] == \" \" then\n            i = i - 1\n            continue\n        if word[i] == \" \" then\n            i = i - 1\n            continue\n        if word[i] == \" \" then\n            i = i - 1\n            continue\n        if word[i] == \" \" then\n            i = i - 1\n            continue\n        if word[i] == \" \" then\n            i = i - 1\n            continue\n        if word[i] == \" \" then\n            i = i - 1\n            continue\n        if word[i] == \" \" then\n            i = i - 1\n            continue\n        if word[i] == \" \" then\n            i = i - 1\n            continue\n        if word[i] == \" \" then\n            i = i - 1\n            continue\n        if word[i] == \" \" then\n            i = i - 1\n            continue\n        if word[i] == \" \" then\n            i = i - 1\n            continue\n        if word[i] == \" \" then\n            i = i - 1\n            continue\n        if word[i] == \" \" then\n            i = i - 1\n            continue\n        if word[i] == \" \" then\n            i = i - 1\n            continue\n        if word[i] == \" \" then\n            i = i - 1\n            continue\n        if word[i] == \" \" then\n            i = i - 1\n            \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpnek1fdh2.lua:24: syntax error near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_count = 0\n    local vowels_index = 0\n    local i = 0\n    local j = 0\n    local vowels_found = \"\"\n    for i = 1, #word, 1 do\n        if word[i] ~= \" \" then\n            if vowels.find(word[i]) ~= nil then\n                vowels_count = vowels_count + 1\n                vowels_index = i\n            end\n        end\n    end\n    for j = 1, #word, 1 do\n        if word[j] ~= \" \" then\n            if vowels.find(word[j]) ~= nil then\n                vowels_count = vowels_count + 1\n                vowels_index = j\n            end\n        end\n    end\n    if vowels_count == 0 then\n        return \"\"\n    else\n        vowels_found = word[vowels_index+1]\n        return vowels_found\n    end\nend\nprint(get_closest_vowel(\"yogurt\"))\nprint(get_closest_vowel(\"FULL\"))\nprint(get_closest_vowel(\"quick\"))\nprint(get_closest_vowel(\"ab\"))\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp69rtg_pg.lua:24: bad argument #1 to 'find' (string expected, got nil)\nstack traceback:\n\t[C]: in function 'string.find'\n\t/tmp/tmp69rtg_pg.lua:24: in local 'get_closest_vowel'\n\t/tmp/tmp69rtg_pg.lua:45: in main chunk\n\t[C]: in ?\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local word_len = #word\n    local i = 0\n    local j = 0\n    local closest_vowel = \"\"\n    while i < word_len and j < word_len:\n        if word[i] == word[j]:\n            i = i + 1\n            j = j + 1\n        else:\n            if word[i] in vowels_upper:\n                if j - i < vowels_upper_len:\n                    closest_vowel = vowels_upper[j - i]\n                else:\n                    closest_vowel = \"\"\n                break\n            elif word[i] in vowels_lower:\n                if j - i < vowels_lower_len:\n                    closest_vowel = vowels_lower[j - i]\n                else:\n                    closest_vowel = \"\"\n                break\n            else:\n                i = i + 1\n    return closest_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsvf5u7bd.lua:27: <name> expected near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local vowels_len_2 = vowels_len * 2\n    local vowels_len_3 = vowels_len * 3\n    local vowels_len_4 = vowels_len * 4\n    local vowels_len_5 = vowels_len * 5\n    local vowels_len_6 = vowels_len * 6\n    local vowels_len_7 = vowels_len * 7\n    local vowels_len_8 = vowels_len * 8\n    local vowels_len_9 = vowels_len * 9\n    local vowels_len_10 = vowels_len * 10\n    local vowels_len_11 = vowels_len * 11\n    local vowels_len_12 = vowels_len * 12\n    local vowels_len_13 = vowels_len * 13\n    local vowels_len_14 = vowels_len * 14\n    local vowels_len_15 = vowels_len * 15\n    local vowels_len_16 = vowels_len * 16\n    local vowels_len_17 = vowels_len * 17\n    local vowels_len_18 = vowels_len * 18\n    local vowels_len_19 = vowels_len * 19\n    local vowels_len_20 = vowels_len * 20\n    local vowels_len_21 = vowels_len * 21\n    local vowels_len_22 = vowels_len * 22\n    local vowels_len_23 = vowels_len * 23\n    local vowels_len_24 = vowels_len * 24\n    local vowels_len_25 = vowels_len * 25\n    local vowels_len_26 = vowels_len * 26\n    local vowels_len_27 = vowels_len * 27\n    local vow\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp_kret9yw.lua:68: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local word_len = #word\n    local i = 1\n    local j = 1\n    local closest_vowel = \"\"\n    while i <= word_len - 1 do\n        if word[i] == word[i+1] then\n            if j == 1 then\n                closest_vowel = vowels[vowels_upper_len + (j - 1)]\n            elseif j == vowels_len then\n                closest_vowel = vowels[vowels_lower_len + (j - 1)]\n            else\n                closest_vowel = vowels[j - 1]\n            end\n            break\n        elseif word[i] == \" \" then\n            i = i + 1\n        elseif word[i] == \".\" then\n            i = i + 1\n        elseif word[i] == \"-\" then\n            i = i + 1\n        elseif word[i] == \" \" then\n            i = i + 1\n        elseif word[i] == \" \" then\n            i = i + 1\n        elseif word[i] == \" \" then\n            i = i + 1\n        elseif word[i] == \" \" then\n            i = i + 1\n        elseif word[i] == \" \" then\n            i = i + 1\n        elseif word[i] == \" \" then\n            i = i + 1\n        elseif word[i] == \" \" then\n            i = i + 1\n        elseif word[i] == \" \" then\n            i = i + 1\n        elseif word[i] == \" \" then\n            i = i + 1\n        elseif word[i] == \" \" then\n            i = i + 1\n        elseif word[i] == \" \" then\n            i = i + 1\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp31bcqkhi.lua:84: 'end' expected (to close 'if' at line 27) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_lower = vowels.lower()\n    local vowels_upper = vowels.upper()\n    local vowels_lower_len = #vowels_lower\n    local vowels_upper_len = #vowels_upper\n    local vowels_len = #vowels\n    local word_len = #word\n    local i = 1\n    local j = 1\n    local k = 1\n    local closest_vowel = \"\"\n    local closest_vowel_len = 0\n    while i <= word_len and j <= word_len and k <= word_len - 1 do\n        if word[k] == word[k + 1] then\n            if word[k] == \"a\" or word[k] == \"e\" or word[k] == \"i\" or word[k] == \"o\" or word[k] == \"u\" then\n                if j - i > closest_vowel_len then\n                    closest_vowel = word[i]\n                    closest_vowel_len = j - i\n                end\n            end\n            k = k + 1\n        elseif word[k] == word[k - 1] then\n            if word[k] == \"a\" or word[k] == \"e\" or word[k] == \"i\" or word[k] == \"o\" or word[k] == \"u\" then\n                if j - i > closest_vowel_len then\n                    closest_vowel = word[i]\n                    closest_vowel_len = j - i\n                end\n            end\n            k = k - 1\n        elseif word[k] == vowels_lower[0] or word[k] == vowels_lower[1] or word[k] == vowels_lower[2] or word[k] == vowels_lower[3] or word[k] == vowels_lower[4] or word[k] == vowels_lower[5] or word[k] == vowels_lower[6] or word[k] == vowels_lower[7] or word[k] == vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp3x8hjolx.lua:46: 'then' expected near 'lu'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local word_len = #word\n    local i = 1\n    local j = 1\n    local closest_vowel = \"\"\n    while i <= word_len - 1 do\n        if word[i] == word[i+1] then\n            if j == 1 then\n                closest_vowel = vowels[vowels_len - 1]\n            elseif j == word_len - 2 then\n                closest_vowel = vowels[vowels_len - 1]\n            elseif j == word_len - 1 then\n                closest_vowel = vowels[vowels_len - 2]\n            else\n                closest_vowel = vowels[vowels_len - 2]\n            end\n            return closest_vowel\n        elseif word[i] == word[i+1] and word[i] == \"a\" then\n            if j == 1 then\n                closest_vowel = vowels[vowels_len - 1]\n            elseif j == word_len - 2 then\n                closest_vowel = vowels[vowels_len - 1]\n            elseif j == word_len - 1 then\n                closest_vowel = vowels[vowels_len - 2]\n            else\n                closest_vowel = vowels[vowels_len - 2]\n            end\n            return closest_vowel\n        elseif word[i] == word[i+1] and word[i] == \"e\" then\n            if j == 1 then\n                closest_vowel = vowels[vowels_len - 1]\n            elseif j == word_len - 2 then\n                closest_vowel = vowels[vow\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp3xn58wbd.lua:54: ']' expected near 'lu'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n  local vowels = \"aeiouAEIOU\"\n  local vowels_upper = vowels.upper()\n  local vowels_lower = vowels.lower()\n  local vowels_upper_len = #vowels_upper\n  local vowels_lower_len = #vowels_lower\n  local vowels_len = #vowels\n  local word_len = #word\n  local i = 0\n  local j = 0\n  local k = 0\n  local word_upper = word.upper()\n  local word_lower = word.lower()\n  local word_upper_len = #word_upper\n  local word_lower_len = #word_lower\n  local word_len = #word\n  local word_upper_vowels_len = 0\n  local word_lower_vowels_len = 0\n  local word_vowels_len = 0\n  local word_upper_vowels_len = 0\n  local word_lower_vowels_len = 0\n  local word_vowels_len = 0\n  local word_upper_vowels_len = 0\n  local word_lower_vowels_len = 0\n  local word_vowels_len = 0\n  local word_upper_vowels_len = 0\n  local word_lower_vowels_len = 0\n  local word_vowels_len = 0\n  local word_upper_vowels_len = 0\n  local word_lower_vowels_len = 0\n  local word_vowels_len = 0\n  local word_upper_vowels_len = 0\n  local word_lower_vowels_len = 0\n  local word_vowels_len = 0\n  local word_upper_vowels_len = 0\n  local word_lower_vowels_len = 0\n  local word_vowels_len = 0\n  local word_upper_vowels_len = 0\n  local word_lower_vowels_len = 0\n  local word_vowels_len = 0\n  local word_upper_vowels_len = 0\n  local word_lower_vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp_ni5pyrk.lua:76: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_lower = \"aeiouAEIOU\"\n    local vowels_upper = \"AEIOU\"\n    local vowels_lower_upper = \"AEIOUAEIOU\"\n    local vowels_upper_lower = \"AEIOUAEIOU\"\n    local vowels_lower_upper_lower = \"aeiouAEIOUAEIOU\"\n    local vowels_upper_lower_lower = \"AEIOUAEIOUAEIOU\"\n    local vowels_lower_upper_lower_lower = \"aeiouAEIOUAEIOUAEIOU\"\n    local vowels_upper_lower_lower_lower = \"AEIOUAEIOUAEIOUAEIOU\"\n    local vowels_lower_upper_lower_lower = \"aeiouAEIOUAEIOUAEIOU\"\n    local vowels_upper_lower_lower_lower = \"AEIOUAEIOUAEIOUAEIOU\"\n    local vowels_lower_upper_lower_lower_lower = \"aeiouAEIOUAEIOUAEIOUAEIOU\"\n    local vowels_upper_lower_lower_lower_lower = \"AEIOUAEIOUAEIOUAEIOUAEIOU\"\n    local vowels_lower_upper_lower_lower_lower_lower = \"aeiouAEIOUAEIOUAEIOUAEIOUAEIOU\"\n    local vowels_upper_lower_lower_lower_lower_lower = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\"\n    local vowels_lower_upper_lower_lower_lower_lower_lower = \"aeiouAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\"\n    local vowels_upper_lower_lower_lower_lower_lower_lower = \"AEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\"\n    local vowels_lower_upper_lower_lower_lower_lower_lower_lower = \"aeiouAEIOUAEIOUAEIOUAEIOUAEIOUAEIOUAEIOU\"\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpvmgbr6z7.lua:53: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local vowels_upper_index = 1\n    local vowels_lower_index = 1\n    local vowels_index = 1\n    local i = 1\n    local j = 1\n    local k = 1\n    local word_len = #word\n    local word_upper_index = 1\n    local word_lower_index = 1\n    local word_index = 1\n    local closest_vowel = \"\"\n    while i <= word_len and j <= word_len and k <= word_len and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \" and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \" and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \" and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \" and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \" and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \" and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \" and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \" and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \" and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \" and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \" and word[i] ~=\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmppkm0dc50.lua:34: 'do' expected near '='\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_len = #vowels\n    local vowels_count = 0\n    local vowels_index = 0\n    local i = 0\n    local j = 0\n    local k = 0\n    local word_len = #word\n    local word_index = 0\n    local word_count = 0\n    local word_count_index = 0\n    local word_count_count = 0\n    local word_count_count_index = 0\n    local word_count_count_count = 0\n    local word_count_count_count_index = 0\n    local word_count_count_count_count = 0\n    local word_count_count_count_count_index = 0\n    local word_count_count_count_count_count = 0\n    local word_count_count_count_count_count_index = 0\n    local word_count_count_count_count_count_count = 0\n    local word_count_count_count_count_count_count_index = 0\n    local word_count_count_count_count_count_count_count = 0\n    local word_count_count_count_count_count_count_count_index = 0\n    local word_count_count_count_count_count_count_count_count = 0\n    local word_count_count_count_count_count_count_count_count_index = 0\n    local word_count_count_count_count_count_count_count_count_count = 0\n    local word_count_count_count_count_count_count_count_count_count_index = 0\n    local word_count_count_count_count_count_count_count_count_count_count = 0\n    local word_count_count_count_count_count_count_count_count_count_count_index = 0\n    local word_count_count_count_count_count_count_count_count_count_count_count = 0\n    local word_count_count_count_count_count_count_count_count_count_count_count_index = 0\n    local word_count_count_count_count_count_count\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmplcjkiqp0.lua:67: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local vowels_upper_index = 1\n    local vowels_lower_index = 1\n    local vowels_index = 1\n    local i = 1\n    local j = 1\n    local word_len = #word\n    local closest_vowel = \"\"\n    while i <= word_len and j <= word_len:\n        if word[i] == word[j]:\n            i = i + 1\n            j = j + 1\n        else:\n            if vowels_index < vowels_len:\n                if word[i] == vowels_upper[vowels_upper_index]:\n                    vowels_upper_index = vowels_upper_index + 1\n                    if vowels_upper_index == vowels_upper_len:\n                        vowels_upper_index = 1\n                else:\n                    if word[i] == vowels_lower[vowels_lower_index]:\n                        vowels_lower_index = vowels_lower_index + 1\n                        if vowels_lower_index == vowels_lower_len:\n                            vowels_lower_index = 1\n                    else:\n                        vowels_index = vowels_index + 1\n            else:\n                vowels_index = 1\n            i = i + 1\n            j = j + 1\n    if i > word_len:\n        closest_vowel = \"\"\n    else:\n        if vowels_index < vowels_len:\n            if word[i] == vowels_upper[vowels_upper_index]:\n                vowels_upper_index = vowels_upper_index + 1\n                if vowels_upper_index == vowels_upper_len:\n                    vowels_upper_index = 1\n            else:\n                if word[i] == vow\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmplw3ac6us.lua:30: <name> expected near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local word_len = #word\n    local i = 1\n    local j = word_len\n    local closest_vowel = \"\"\n    while i <= word_len and j >= 1 do\n        if word[j] == word[i] then\n            if j - i < 2 then\n                closest_vowel = vowels[vowels_len - 1]\n            else\n                if vowels_upper_len > 0 and word[i] == vowels_upper[0] then\n                    closest_vowel = vowels_upper[vowels_len - 1]\n                elseif vowels_lower_len > 0 and word[i] == vowels_lower[0] then\n                    closest_vowel = vowels_lower[vowels_len - 1]\n                else\n                    closest_vowel = vowels[vowels_len - 1]\n            end\n            return closest_vowel\n        elseif word[j] == vowels[0] then\n            if j - i < 2 then\n                closest_vowel = vowels[0]\n            else\n                if vowels_upper_len > 0 and word[i] == vowels_upper[0] then\n                    closest_vowel = vowels_upper[0]\n                elseif vowels_lower_len > 0 and word[i] == vowels_lower[0] then\n                    closest_vowel = vowels_lower[0]\n                else\n                    closest_vowel = vowels[0]\n            end\n            return closest_vowel\n        elseif word[i] == vowels[vowels_len - 1] then\n            if j - i < 2 then\n                closest_vowel =\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmprlsqtz63.lua:39: 'end' expected (to close 'if' at line 28) near 'elseif'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local vowels_len_1 = vowels_len - 1\n    local vowels_len_2 = vowels_len - 2\n    local vowels_len_3 = vowels_len - 3\n    local vowels_len_4 = vowels_len - 4\n    local vowels_len_5 = vowels_len - 5\n    local vowels_len_6 = vowels_len - 6\n    local vowels_len_7 = vowels_len - 7\n    local vowels_len_8 = vowels_len - 8\n    local vowels_len_9 = vowels_len - 9\n    local vowels_len_10 = vowels_len - 10\n    local vowels_len_11 = vowels_len - 11\n    local vowels_len_12 = vowels_len - 12\n    local vowels_len_13 = vowels_len - 13\n    local vowels_len_14 = vowels_len - 14\n    local vowels_len_15 = vowels_len - 15\n    local vowels_len_16 = vowels_len - 16\n    local vowels_len_17 = vowels_len - 17\n    local vowels_len_18 = vowels_len - 18\n    local vowels_len_19 = vowels_len - 19\n    local vowels_len_20 = vowels_len - 20\n    local vowels_len_21 = vowels_len - 21\n    local vowels_len_22 = vowels_len - 22\n    local vowels_len_23 = vowels_len - 23\n    local vowels_len_24 = vowels_len - 24\n    local vowels_len_25 = vowels_len - 25\n    local vowels_len_26 = vowels_len - 26\n    local vow\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpuqgxczyv.lua:68: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local vowels_len_2 = vowels_len * 2\n    local vowels_len_3 = vowels_len * 3\n    local vowels_len_4 = vowels_len * 4\n    local vowels_len_5 = vowels_len * 5\n    local vowels_len_6 = vowels_len * 6\n    local vowels_len_7 = vowels_len * 7\n    local vowels_len_8 = vowels_len * 8\n    local vowels_len_9 = vowels_len * 9\n    local vowels_len_10 = vowels_len * 10\n    local vowels_len_11 = vowels_len * 11\n    local vowels_len_12 = vowels_len * 12\n    local vowels_len_13 = vowels_len * 13\n    local vowels_len_14 = vowels_len * 14\n    local vowels_len_15 = vowels_len * 15\n    local vowels_len_16 = vowels_len * 16\n    local vowels_len_17 = vowels_len * 17\n    local vowels_len_18 = vowels_len * 18\n    local vowels_len_19 = vowels_len * 19\n    local vowels_len_20 = vowels_len * 20\n    local vowels_len_21 = vowels_len * 21\n    local vowels_len_22 = vowels_len * 22\n    local vowels_len_23 = vowels_len * 23\n    local vowels_len_24 = vowels_len * 24\n    local vowels_len_25 = vowels_len * 25\n    local vowels_len_26 = vowels_len * 26\n    local vowels_len_27 = vowels_len * 27\n    local vow\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp_kret9yw.lua:68: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_len = #vowels\n    local vowels_count = 0\n    local vowels_index = 0\n    local i = 1\n    while i <= #word do\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpvsxs20je.lua:25: syntax error near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = #vowels\n    local vowels_upper_index = 1\n    local vowels_lower_index = 1\n    local vowels_index = 1\n    local vowels_upper_index_prev = 0\n    local vowels_lower_index_prev = 0\n    local vowels_index_prev = 0\n    local word_len = #word\n    local word_upper_len = #word.upper()\n    local word_lower_len = #word.lower()\n    local word_index = 1\n    local word_index_prev = 0\n    local word_upper_index = 1\n    local word_lower_index = 1\n    local word_upper_index_prev = 0\n    local word_lower_index_prev = 0\n    local word_index_prev = 0\n    local word_len_prev = 0\n    local word_upper_len_prev = 0\n    local word_lower_len_prev = 0\n    local word_index_prev = 0\n    local word_len_prev = 0\n    local word_upper_len_prev = 0\n    local word_lower_len_prev = 0\n    local word_index_prev = 0\n    local word_len_prev = 0\n    local word_upper_len_prev = 0\n    local word_lower_len_prev = 0\n    local word_index_prev = 0\n    local word_len_prev = 0\n    local word_upper_len_prev = 0\n    local word_lower_len_prev = 0\n    local word_index_prev = 0\n    local word_len_prev = 0\n    local word_upper_len_prev = 0\n    local word_lower_len_prev = 0\n    local word_index_prev = 0\n    local word_len_prev = 0\n    local word_upper_len_prev = 0\n    local word_lower_len_prev\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpwaqjlyvz.lua:80: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_len = #vowels\n    local vowels_pos = {}\n    for i = 1, vowels_len do\n        vowels_pos[vowels[i]] = i\n    end\n    local vowels_pos_len = #vowels_pos\n    local vowels_pos_pos = {}\n    for i = 1, vowels_pos_len do\n        vowels_pos_pos[vowels_pos[i]] = i\n    end\n    local vowels_pos_pos_len = #vowels_pos_pos\n    local vowels_pos_pos_pos = {}\n    for i = 1, vowels_pos_pos_len do\n        vowels_pos_pos_pos[vowels_pos_pos[i]] = i\n    end\n    local vowels_pos_pos_pos_len = #vowels_pos_pos_pos\n    local vowels_pos_pos_pos_pos = {}\n    for i = 1, vowels_pos_pos_pos_len do\n        vowels_pos_pos_pos_pos[vowels_pos_pos_pos[i]] = i\n    end\n    local vowels_pos_pos_pos_pos_len = #vowels_pos_pos_pos_pos\n    local vowels_pos_pos_pos_pos_pos = {}\n    for i = 1, vowels_pos_pos_pos_pos_len do\n        vowels_pos_pos_pos_pos_pos[vowels_pos_pos_pos_pos[i]] = i\n    end\n    local vowels_pos_pos_pos_pos_pos_len = #vowels_pos_pos_pos_pos_pos\n    local vowels_pos_pos_pos_pos_pos_pos = {}\n    for i = 1, vowels_pos_pos_pos_pos_pos_len do\n        vowels_pos_pos_pos_pos_pos_pos[vowels_pos_pos_pos_pos_pos[i]] = i\n    end\n    local vowels_pos\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmphrts2_hu.lua:67: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907508
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local vowels_upper_index = 1\n    local vowels_lower_index = 1\n    local vowels_index = 1\n    local i = 1\n    local j = 1\n    local found = false\n    while i <= #word and j <= #word and not found do\n        if word[i] == word[j] then\n            if i == 1 or j == 1 then\n                found = true\n            else\n                if vowels_upper[vowels_upper_index] == word[i-1] or vowels_lower[vowels_lower_index] == word[i-1] then\n                    found = true\n                else\n                    vowels_index = vowels_index + 1\n                    if vowels_index == vowels_len then\n                        vowels_index = 1\n                    end\n                end\n            end\n            i = i + 1\n            j = j + 1\n        elseif word[i] > word[j] then\n            j = j + 1\n        elseif word[i] < word[j] then\n            i = i + 1\n        end\n    end\n    if found then\n        return vowels[vowels_index]\n    else\n        return \"\"\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphule8fuf.lua:17: bad argument #1 to 'upper' (string expected, got no value)\nstack traceback:\n\t/tmp/tmphule8fuf.lua:17: in local 'candidate'\n\t/tmp/tmphule8fuf.lua:60: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_len = #vowels\n    local vowels_count = 0\n    local vowels_index = 1\n    local vowels_index_2 = 1\n    local word_len = #word\n    local word_index = 1\n    local word_index_2 = 1\n    local word_index_3 = 1\n    local word_index_4 = 1\n    local word_index_5 = 1\n    local word_index_6 = 1\n    local word_index_7 = 1\n    local word_index_8 = 1\n    local word_index_9 = 1\n    local word_index_10 = 1\n    local word_index_11 = 1\n    local word_index_12 = 1\n    local word_index_13 = 1\n    local word_index_14 = 1\n    local word_index_15 = 1\n    local word_index_16 = 1\n    local word_index_17 = 1\n    local word_index_18 = 1\n    local word_index_19 = 1\n    local word_index_20 = 1\n    local word_index_21 = 1\n    local word_index_22 = 1\n    local word_index_23 = 1\n    local word_index_24 = 1\n    local word_index_25 = 1\n    local word_index_26 = 1\n    local word_index_27 = 1\n    local word_index_28 = 1\n    local word_index_29 = 1\n    local word_index_30 = 1\n    local word_index_31 = 1\n    local word_index_32 = 1\n    local word_index_33 = 1\n    local word_index_34 = 1\n    local word_index_35 = 1\n    local word_index_36 = 1\n    local word_index_37 = 1\n    local word_index_38 = 1\n    local word_index_39 = 1\n    local word_index_40 = 1\n    local word_index_41 = 1\n    local word_index_42 = 1\n    local word_index_43 = 1\n    local word_index_44 = 1\n    local word_index_45 = 1\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp9m7ww_8d.lua:87: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local vowels_upper_index = 1\n    local vowels_lower_index = 1\n    local i = 1\n    local j = 1\n    local closest_vowel = \"\"\n    while i <= #word do\n        if word[i] == word[i+1] then\n            if word[i] == \"a\" or word[i] == \"e\" or word[i] == \"i\" or word[i] == \"o\" or word[i] == \"u\" then\n                if j == 1 then\n                    closest_vowel = word[i]\n                    j = j + 1\n                elseif j > 1 and word[i] == word[i-1] then\n                    closest_vowel = word[i]\n                    j = j + 1\n                elseif j > 1 and word[i] == word[i+1] then\n                    closest_vowel = word[i]\n                    j = j + 1\n                elseif j > 1 and word[i] == word[i-1] and word[i+1] == word[i+2] then\n                    closest_vowel = word[i]\n                    j = j + 1\n                elseif j > 1 and word[i] == word[i+1] and word[i-1] == word[i-2] then\n                    closest_vowel = word[i]\n                    j = j + 1\n                elseif j > 1 and word[i] == word[i-1] and word[i+1] == word[i+2] then\n                    closest_vowel = word[i]\n                    j = j + 1\n                elseif j > 1 and word[i] == word[i-1] and word[i+1] == word[i\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp9our6efm.lua:49: ']' expected near 'lu'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = #vowels\n    local word_len = #word\n    local i = 0\n    local j = 0\n    local k = 0\n    local closest_vowel = \"\"\n    local closest_vowel_index = 0\n    local closest_vowel_len = 0\n    local closest_vowel_index_len = 0\n    local closest_vowel_len_len = 0\n    local closest_vowel_index_len_len = 0\n    local closest_vowel_len_len_len = 0\n    local closest_vowel_index_len_len_len = 0\n    local closest_vowel_len_len_len_len = 0\n    local closest_vowel_index_len_len_len_len = 0\n    local closest_vowel_len_len_len_len_len = 0\n    local closest_vowel_index_len_len_len_len_len = 0\n    local closest_vowel_len_len_len_len_len_len = 0\n    local closest_vowel_index_len_len_len_len_len_len = 0\n    local closest_vowel_len_len_len_len_len_len_len = 0\n    local closest_vowel_index_len_len_len_len_len_len_len = 0\n    local closest_vowel_len_len_len_len_len_len_len_len = 0\n    local closest_vowel_index_len_len_len_len_len_len_len_len = 0\n    local closest_vowel_len_len_len_len_len_len_len_len_len = 0\n    local closest_vowel_index_len_len_len_len_len_len_len_len_len = 0\n    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpdo_5vje6.lua:66: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = #vowels\n    local vowels_upper_index = 1\n    local vowels_lower_index = 1\n    local vowels_index = 1\n    local word_len = #word\n    local word_upper_index = 1\n    local word_lower_index = 1\n    local word_index = 1\n    local closest_vowel = \"\"\n    while word_index <= word_len do\n        if word_index == word_len or word[word_index] == \" \" then\n            if word_index - word_lower_index > 1 and word_index - word_upper_index > 1 then\n                if word_index - word_lower_index > word_index - word_upper_index then\n                    closest_vowel = vowels_lower[word_lower_index]\n                    word_lower_index = word_lower_index + 1\n                else\n                    closest_vowel = vowels_upper[word_upper_index]\n                    word_upper_index = word_upper_index + 1\n                end\n            elseif word_index - word_lower_index > 1 then\n                closest_vowel = vowels_lower[word_lower_index]\n                word_lower_index = word_lower_index + 1\n            elseif word_index - word_upper_index > 1 then\n                closest_vowel = vowels_upper[word_upper_index]\n                word_upper_index = word_upper_index + 1\n            else\n                closest_vowel = vowels[vowels_index]\n                vowels_index = vowels_index + 1\n            end\n        elseif word[word_index] == \" \" then\n            word_index = word_index + 1\n        elseif word[word_index] == vowels_upper[1] then\n            clos\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp9ckvx21f.lua:54: syntax error near 'lu'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local vowels_len_2 = vowels_len / 2\n    local i = 1\n    local j = 1\n    local k = 1\n    local word_len = #word\n    local word_upper_len = #word.upper()\n    local word_lower_len = #word.lower()\n    local word_len_2 = word_len / 2\n    local word_len_3 = word_len / 3\n    local word_len_4 = word_len / 4\n    local word_len_5 = word_len / 5\n    local word_len_6 = word_len / 6\n    local word_len_7 = word_len / 7\n    local word_len_8 = word_len / 8\n    local word_len_9 = word_len / 9\n    local word_len_10 = word_len / 10\n    local word_len_11 = word_len / 11\n    local word_len_12 = word_len / 12\n    local word_len_13 = word_len / 13\n    local word_len_14 = word_len / 14\n    local word_len_15 = word_len / 15\n    local word_len_16 = word_len / 16\n    local word_len_17 = word_len / 17\n    local word_len_18 = word_len / 18\n    local word_len_19 = word_len / 19\n    local word_len_20 = word_len / 20\n    local word_len_21 = word_len / 21\n    local word_len_22 = word_len / 22\n    local word_len_23 = word_len / 23\n    local word_len_24 = word_len / 24\n    local word_len_25 = word_len / 25\n    local word_len_26 = word_len /\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp_0pb9794.lua:54: unexpected symbol near '='\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local vowels_len_1 = vowels_len - 1\n    local vowels_len_2 = vowels_len - 2\n    local vowels_len_3 = vowels_len - 3\n    local vowels_len_4 = vowels_len - 4\n    local vowels_len_5 = vowels_len - 5\n    local vowels_len_6 = vowels_len - 6\n    local vowels_len_7 = vowels_len - 7\n    local vowels_len_8 = vowels_len - 8\n    local vowels_len_9 = vowels_len - 9\n    local vowels_len_10 = vowels_len - 10\n    local vowels_len_11 = vowels_len - 11\n    local vowels_len_12 = vowels_len - 12\n    local vowels_len_13 = vowels_len - 13\n    local vowels_len_14 = vowels_len - 14\n    local vowels_len_15 = vowels_len - 15\n    local vowels_len_16 = vowels_len - 16\n    local vowels_len_17 = vowels_len - 17\n    local vowels_len_18 = vowels_len - 18\n    local vowels_len_19 = vowels_len - 19\n    local vowels_len_20 = vowels_len - 20\n    local vowels_len_21 = vowels_len - 21\n    local vowels_len_22 = vowels_len - 22\n    local vowels_len_23 = vowels_len - 23\n    local vowels_len_24 = vowels_len - 24\n    local vowels_len_25 = vowels_len - 25\n    local vowels_len_26 = vowels_len - 26\n    local vow\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpuqgxczyv.lua:68: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local vowels_upper_index = 1\n    local vowels_lower_index = 1\n    local i = 1\n    local j = 1\n    local result = \"\"\n    while i <= #word do\n        if word[i] == word[i+1] then\n            if j == 1 then\n                result = word[i]\n                break\n            elseif j == vowels_len then\n                result = word[i]\n                break\n            elseif word[i] == vowels_upper[vowels_upper_index] then\n                vowels_upper_index = vowels_upper_index + 1\n                if vowels_upper_index == vowels_upper_len then\n                    vowels_upper_index = 1\n                end\n            elseif word[i] == vowels_lower[vowels_lower_index] then\n                vowels_lower_index = vowels_lower_index + 1\n                if vowels_lower_index == vowels_lower_len then\n                    vowels_lower_index = 1\n                end\n            else\n                j = j + 1\n            end\n        else\n            i = i + 1\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmlm6ypgz.lua:17: bad argument #1 to 'upper' (string expected, got no value)\nstack traceback:\n\t/tmp/tmpmlm6ypgz.lua:17: in local 'candidate'\n\t/tmp/tmpmlm6ypgz.lua:58: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local vowels_upper_index = 1\n    local vowels_lower_index = 1\n    local i = 1\n    while i <= #word do\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7bydhmzj.lua:29: syntax error near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_lower = vowels.lower()\n    local vowels_upper = vowels.upper()\n    local vowels_lower_len = #vowels_lower\n    local vowels_upper_len = #vowels_upper\n    local vowels_len = #vowels\n    local word_len = #word\n    local i = word_len - 1\n    local j = word_len - 1\n    local closest_vowel = \"\"\n    while i > 0 and j > 0 do\n        if word[i] == word[j] then\n            if i - j > vowels_len then\n                closest_vowel = vowels_upper\n                break\n            elseif i - j > vowels_lower_len then\n                closest_vowel = vowels_lower\n                break\n            elseif i - j > vowels_upper_len then\n                closest_vowel = vowels_upper\n                break\n            else\n                closest_vowel = vowels_lower\n                break\n        elseif word[i] < word[j] then\n            j = j - 1\n        else\n            i = i - 1\n    end\n    return closest_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp44h5abgq.lua:40: 'end' expected (to close 'if' at line 28) near 'elseif'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = #vowels\n    local vowels_upper_index = 1\n    local vowels_lower_index = 1\n    local vowels_index = 1\n    local word_len = #word\n    local i = 1\n    local j = 1\n    local k = 1\n    local word_upper_index = 1\n    local word_lower_index = 1\n    local word_index = 1\n    local closest_vowel = \"\"\n    while i <= word_len and j <= word_len and k <= word_len and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \" and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \" and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \" and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \" and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \" and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \" and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \" and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \" and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \" and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \" and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \" and word[i] ~= \" \" and word[j] ~=\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpln6qj0s3.lua:34: 'do' expected near '='\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = #vowels\n    local word_len = #word\n    local i = 1\n    local j = 1\n    local k = 1\n    local closest_vowel = \"\"\n    while i <= word_len and j <= word_len and k <= word_len:\n        if word[i] == word[j] and word[j] == word[k]:\n            if k == word_len - 1:\n                closest_vowel = word[i]\n                break\n            else:\n                i = i + 1\n                j = j + 1\n                k = k + 1\n        elif word[i] == word[j] and word[j] == word[k]:\n            if k == word_len - 1:\n                closest_vowel = word[i]\n                break\n            else:\n                i = i + 1\n                j = j + 1\n                k = k + 1\n        elif word[i] == word[j] and word[j] == word[k]:\n            if k == word_len - 1:\n                closest_vowel = word[i]\n                break\n            else:\n                i = i + 1\n                j = j + 1\n                k = k + 1\n        elif word[i] == word[j] and word[j] == word[k]:\n            if k == word_len - 1:\n                closest_vowel = word[i]\n                break\n            else:\n                i = i + 1\n                j = j + 1\n                k = k + 1\n        elif word[i] == word[j] and word[j] == word[k]:\n            if k == word_len - 1:\n                closest_vowel = word[i]\n                break\n            else:\n                i = i + 1\n                j = j +\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmptbrwsfqt.lua:28: <name> expected near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_len = #vowels\n    local vowels_pos = {}\n    for i = 1, vowels_len do\n        vowels_pos[vowels[i]] = i\n    end\n    local consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    local consonants_len = #consonants\n    local consonants_pos = {}\n    for i = 1, consonants_len do\n        consonants_pos[consonants[i]] = i\n    end\n    local vowels_pos_len = #vowels_pos\n    local consonants_pos_len = #consonants_pos\n    local i = 1\n    while i <= consonants_len do\n        if consonants_pos[i] < consonants_pos[i+1] then\n            return vowels_pos[vowels[vowels_pos_len]]\n        end\n        i = i + 1\n    end\n    return \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr4amkyv9.lua:20: table index is nil\nstack traceback:\n\t/tmp/tmpr4amkyv9.lua:20: in local 'candidate'\n\t/tmp/tmpr4amkyv9.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = #vowels\n    local word_len = #word\n    local i = 0\n    local j = 0\n    local k = 0\n    local word_upper = word.upper()\n    local word_lower = word.lower()\n    local word_upper_len = #word_upper\n    local word_lower_len = #word_lower\n    local word_len = #word\n    local closest_vowel = \"\"\n    local closest_vowel_index = 0\n    local closest_vowel_index_upper = 0\n    local closest_vowel_index_lower = 0\n    local closest_vowel_index_upper_len = 0\n    local closest_vowel_index_lower_len = 0\n    local closest_vowel_index_len = 0\n    local closest_vowel_index_upper_len = 0\n    local closest_vowel_index_lower_len = 0\n    local closest_vowel_index_len = 0\n    local closest_vowel_index_upper_len = 0\n    local closest_vowel_index_lower_len = 0\n    local closest_vowel_index_len = 0\n    local closest_vowel_index_upper_len = 0\n    local closest_vowel_index_lower_len = 0\n    local closest_vowel_index_len = 0\n    local closest_vowel_index_upper_len = 0\n    local closest_vowel_index_lower_len = 0\n    local closest_vowel_index_len = 0\n    local closest_vowel_index_upper_len = 0\n    local closest_vowel_index_lower_len = 0\n    local closest_vowel_index_len = 0\n    local closest_vowel_index_upper_len = 0\n    local\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpuaykq_uw.lua:74: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_lower = vowels.lower()\n    local vowels_upper = vowels.upper()\n    local vowels_lower_len = #vowels_lower\n    local vowels_upper_len = #vowels_upper\n    local vowels_len = #vowels\n    local word_len = #word\n    local i = 1\n    local j = 1\n    local k = 1\n    local closest_vowel = \"\"\n    while i <= word_len - 1 and j <= word_len - 1 and k <= word_len - 1:\n        if word[i] == word[j] and word[j] == word[k]:\n            if word[i] == \"a\" or word[i] == \"e\" or word[i] == \"i\" or word[i] == \"o\" or word[i] == \"u\":\n                if word[k] == \"a\" or word[k] == \"e\" or word[k] == \"i\" or word[k] == \"o\" or word[k] == \"u\":\n                    if j - i > 1:\n                        if word[i] == word[k]:\n                            closest_vowel = word[i]\n                            break\n                        else:\n                            if word[i] == \"a\" or word[i] == \"e\" or word[i] == \"i\" or word[i] == \"o\" or word[i] == \"u\":\n                                if word[k] == \"a\" or word[k] == \"e\" or word[k] == \"i\" or word[k] == \"o\" or word[k] == \"u\":\n                                    if j - i > 1:\n                                        if word[i] == \"a\" or word[i] == \"e\" or word[i] == \"i\" or word[i] == \"o\" or word[i] == \"u\":\n                                            if word[k] == \"a\" or word[k] == \"e\" or word[k] == \"i\" or word[k] == \"o\" or word[k] == \"u\":\n                                \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpx1a1nriq.lua:27: 'do' expected near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_len = #vowels\n    local vowels_upper = vowels:upper()\n    local vowels_lower = vowels:lower()\n    local vowels_upper_len = vowels_upper:len()\n    local vowels_lower_len = vowels_lower:len()\n    local vowels_upper_pos = vowels_upper:pos(\"^\")\n    local vowels_lower_pos = vowels_lower:pos(\"^\")\n    local vowels_upper_pos_len = vowels_upper_pos:len()\n    local vowels_lower_pos_len = vowels_lower_pos:len()\n    local vowels_upper_pos_pos = vowels_upper_pos:pos(\"^\")\n    local vowels_lower_pos_pos = vowels_lower_pos:pos(\"^\")\n    local vowels_upper_pos_pos_len = vowels_upper_pos_pos:len()\n    local vowels_lower_pos_pos_len = vowels_lower_pos_pos:len()\n    local vowels_upper_pos_pos_pos = vowels_upper_pos_pos:pos(\"^\")\n    local vowels_lower_pos_pos_pos = vowels_lower_pos_pos:pos(\"^\")\n    local vowels_upper_pos_pos_pos_len = vowels_upper_pos_pos_pos:len()\n    local vowels_lower_pos_pos_pos_len = vowels_lower_pos_pos_pos:len()\n    local vowels_upper_pos_pos_pos_pos = vowels_upper_pos_pos_pos:pos(\"^\")\n    local vowels_lower_pos_pos_pos_pos = vowels_lower_pos_pos_pos:pos(\"^\")\n    local vowels_upper_pos_pos_pos_pos_len = vowels_upper_pos_pos_pos_pos:len()\n    local vowels_lower_pos_pos_pos_pos_len = vowels_lower_pos_pos_pos_pos:len()\n    local vowels_upper_pos_pos\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7ya1yif9.lua:58: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = #vowels\n    local vowels_upper_index = 1\n    local vowels_lower_index = 1\n    local vowels_index = 1\n    local word_len = #word\n    local word_upper_index = 1\n    local word_lower_index = 1\n    local word_index = 1\n    local closest_vowel = \"\"\n    while word_index < word_len do\n        if word_upper_index < word_len and word[word_index] == word[word_upper_index] then\n            word_upper_index = word_upper_index + 1\n            word_lower_index = word_lower_index + 1\n            word_index = word_index + 1\n        elseif word_lower_index < word_len and word[word_index] == word[word_lower_index] then\n            word_upper_index = word_upper_index + 1\n            word_lower_index = word_lower_index + 1\n            word_index = word_index + 1\n        elseif word_index < word_len and word[word_index] == vowels_upper[vowels_upper_index] then\n            vowels_upper_index = vowels_upper_index + 1\n            vowels_lower_index = vowels_lower_index + 1\n            vowels_index = vowels_index + 1\n            if vowels_upper_index == vowels_upper_len then\n                vowels_upper_index = 1\n            if vowels_lower_index == vowels_lower_len then\n                vowels_lower_index = 1\n            if vowels_index == vowels_len then\n                vowels_index = 1\n            word_upper_index = word_upper_index + 1\n            word_lower_index = word_lower_index + 1\n            word_index = word_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7nsec90d.lua:71: 'end' expected (to close 'if' at line 47) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n  local vowels = \"aeiouAEIOU\"\n  local vowels_lower = \"aeiouAEIOU\"\n  local vowels_upper = \"AEIOU\"\n  local vowels_lower_upper = \"AEIOU\"\n  local vowels_upper_lower = \"AEIOU\"\n  local vowels_lower_upper_lower = \"AEIOU\"\n  local vowels_lower_upper_upper = \"AEIOU\"\n  local vowels_upper_lower_lower = \"AEIOU\"\n  local vowels_upper_lower_upper = \"AEIOU\"\n  local vowels_lower_upper_lower_lower = \"AEIOU\"\n  local vowels_lower_upper_lower_upper = \"AEIOU\"\n  local vowels_lower_upper_lower_upper_lower = \"AEIOU\"\n  local vowels_lower_upper_lower_upper_lower = \"AEIOU\"\n  local vowels_lower_upper_lower_upper_lower_lower = \"AEIOU\"\n  local vowels_lower_upper_lower_upper_lower_upper = \"AEIOU\"\n  local vowels_lower_upper_lower_upper_lower_upper_lower = \"AEIOU\"\n  local vowels_lower_upper_lower_upper_lower_upper_lower_lower = \"AEIOU\"\n  local vowels_lower_upper_lower_upper_lower_upper_lower_upper = \"AEIOU\"\n  local vowels_lower_upper_lower_upper_lower_upper_lower_upper_lower = \"AEIOU\"\n  local vowels_lower_upper_lower_upper_lower_upper_lower_upper_lower_lower = \"AEIOU\"\n  local vowels_lower_upper_lower_upper_lower_upper_lower_upper_lower_upper = \"AEIOU\"\n  local vowels_lower_upper_lower_upper_lower_upper_lower_upper_lower_upper_lower = \"AEIOU\"\n  local vowels_lower_upper_lower_upper_lower_upper_lower_upper_lower_upper_lower_lower = \"AEIOU\"\n  local vowels_lower_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp4sqiyj4h.lua:59: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_len = #vowels\n    local vowels_count = 0\n    local i = 1\n    while i <= #word do\n        if word[i] == vowels[vowels_count] then\n            vowels_count = vowels_count + 1\n            if vowels_count == vowels_len then\n                return vowels[vowels_count]\n            end\n        end\n        i = i + 1\n    end\n    return \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsme_qea4.lua:35: expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpsme_qea4.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_lower = vowels.lower()\n    local vowels_upper = vowels.upper()\n    local vowels_lower_len = #vowels_lower\n    local vowels_upper_len = #vowels_upper\n    local vowels_len = #vowels\n    local word_len = #word\n    local i = 1\n    local j = 1\n    local k = 1\n    local word_lower = word.lower()\n    local word_upper = word.upper()\n    local word_lower_len = #word_lower\n    local word_upper_len = #word_upper\n    local word_len = #word\n    local closest_vowel = \"\"\n    while i <= word_len - 1 and j <= word_len - 1 and k <= word_len - 1:\n        if word_lower[i] == word_lower[j] and word_lower[j] == word_lower[k]:\n            if k == word_len - 1:\n                closest_vowel = word_upper[i]\n                break\n            else:\n                if word_upper[i] == vowels_upper[0] or word_upper[i] == vowels_upper[1]:\n                    closest_vowel = word_upper[i]\n                    break\n                else:\n                    i = i + 1\n        else:\n            if word_lower[i] == vowels_lower[0] or word_lower[i] == vowels_lower[1]:\n                closest_vowel = word_lower[i]\n                break\n            else:\n                j = j + 1\n        k = k + 1\n    return closest_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpguvxwaws.lua:32: 'do' expected near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n  local vowels = \"aeiouAEIOU\"\n  local vowels_upper = vowels.upper()\n  local vowels_lower = vowels.lower()\n  local vowels_upper_len = #vowels_upper\n  local vowels_lower_len = #vowels_lower\n  local vowels_len = #vowels\n  local word_len = #word\n  local i = 1\n  local j = 1\n  local k = 1\n  local result = \"\"\n  while i <= word_len and j <= word_len and k <= word_len - 1 do\n    if word[k] == word[k + 1] and word[k] in vowels_upper and word[k + 1] in vowels_upper then\n      result = vowels_upper[vowels_upper_len - 1]\n      break\n    elif word[k] == word[k + 1] and word[k] in vowels_lower and word[k + 1] in vowels_lower then\n      result = vowels_lower[vowels_lower_len - 1]\n      break\n    elif word[k] == word[k + 1] and word[k] in vowels_upper and word[k + 1] in vowels_lower then\n      result = vowels_upper[vowels_upper_len - 1]\n      break\n    elif word[k] == word[k + 1] and word[k] in vowels_lower and word[k + 1] in vowels_upper then\n      result = vowels_lower[vowels_lower_len - 1]\n      break\n    elseif word[k] == word[k + 1] and word[k] in vowels_upper and word[k + 1] in vowels_upper then\n      result = vowels_upper[vowels_upper_len - 1]\n      break\n    elseif word[k] == word[k + 1] and word[k] in vowels_lower and word[k + 1] in vowels_lower then\n      result = vowels_lower[vowels_lower_len - 1]\n      break\n    elseif word[k] == word[k + 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp3ecleh8i.lua:28: 'then' expected near 'in'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local vowels_len_2 = vowels_len * 2\n    local vowels_len_3 = vowels_len * 3\n    local vowels_len_4 = vowels_len * 4\n    local vowels_len_5 = vowels_len * 5\n    local vowels_len_6 = vowels_len * 6\n    local vowels_len_7 = vowels_len * 7\n    local vowels_len_8 = vowels_len * 8\n    local vowels_len_9 = vowels_len * 9\n    local vowels_len_10 = vowels_len * 10\n    local vowels_len_11 = vowels_len * 11\n    local vowels_len_12 = vowels_len * 12\n    local vowels_len_13 = vowels_len * 13\n    local vowels_len_14 = vowels_len * 14\n    local vowels_len_15 = vowels_len * 15\n    local vowels_len_16 = vowels_len * 16\n    local vowels_len_17 = vowels_len * 17\n    local vowels_len_18 = vowels_len * 18\n    local vowels_len_19 = vowels_len * 19\n    local vowels_len_20 = vowels_len * 20\n    local vowels_len_21 = vowels_len * 21\n    local vowels_len_22 = vowels_len * 22\n    local vowels_len_23 = vowels_len * 23\n    local vowels_len_24 = vowels_len * 24\n    local vowels_len_25 = vowels_len * 25\n    local vowels_len_26 = vowels_len * 26\n    local vowels_len_27 = vowels_len * 27\n    local vow\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp_kret9yw.lua:68: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local vowels_len_2 = vowels_len * 2\n    local vowels_len_3 = vowels_len * 3\n    local vowels_len_4 = vowels_len * 4\n    local vowels_len_5 = vowels_len * 5\n    local vowels_len_6 = vowels_len * 6\n    local vowels_len_7 = vowels_len * 7\n    local vowels_len_8 = vowels_len * 8\n    local vowels_len_9 = vowels_len * 9\n    local vowels_len_10 = vowels_len * 10\n    local vowels_len_11 = vowels_len * 11\n    local vowels_len_12 = vowels_len * 12\n    local vowels_len_13 = vowels_len * 13\n    local vowels_len_14 = vowels_len * 14\n    local vowels_len_15 = vowels_len * 15\n    local vowels_len_16 = vowels_len * 16\n    local vowels_len_17 = vowels_len * 17\n    local vowels_len_18 = vowels_len * 18\n    local vowels_len_19 = vowels_len * 19\n    local vowels_len_20 = vowels_len * 20\n    local vowels_len_21 = vowels_len * 21\n    local vowels_len_22 = vowels_len * 22\n    local vowels_len_23 = vowels_len * 23\n    local vowels_len_24 = vowels_len * 24\n    local vowels_len_25 = vowels_len * 25\n    local vowels_len_26 = vowels_len * 26\n    local vowels_len_27 = vowels_len * 27\n    local vow\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp_kret9yw.lua:68: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local vowels_len_upper = vowels_len - vowels_lower_len\n    local vowels_len_lower = vowels_len - vowels_upper_len\n    local vowels_len_upper_len = #vowels_len_upper\n    local vowels_len_lower_len = #vowels_len_lower\n    local vowels_len_upper_len_lower_len = #vowels_len_upper_len + #vowels_len_lower_len\n    local vowels_len_upper_len_lower_len_upper = #vowels_len_upper_len + #vowels_len_lower_len - #vowels_len_upper_len\n    local vowels_len_upper_len_lower_len_lower = #vowels_len_upper_len + #vowels_len_lower_len - #vowels_len_lower_len\n    local vowels_len_upper_len_lower_len_upper_lower = #vowels_len_upper_len + #vowels_len_lower_len - #vowels_len_upper_len - #vowels_len_lower_len\n    local vowels_len_upper_len_lower_len_lower_upper = #vowels_len_upper_len + #vowels_len_lower_len - #vowels_len_lower_len - #vowels_len_upper_len\n    local vowels_len_upper_len_lower_len_lower_upper_lower = #vowels_len_upper_len + #vowels_len_lower_len - #vowels_len_lower_len - #vowels_len_upper_len - #vowels_len_lower_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp3qc1u_cg.lua:51: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local word_len = #word\n    local i = 1\n    local j = 1\n    local closest_vowel = \"\"\n    while i <= word_len and j <= word_len - 1:\n        if word[j] == word[i]:\n            i = i + 1\n            j = j + 1\n        else:\n            if word[i] == \"A\" or word[i] == \"E\" or word[i] == \"I\" or word[i] == \"O\" or word[i] == \"U\":\n                if word[j] == \"B\" or word[j] == \"C\" or word[j] == \"D\" or word[j] == \"F\" or word[j] == \"G\" or word[j] == \"H\" or word[j] == \"J\" or word[j] == \"K\" or word[j] == \"L\" or word[j] == \"M\" or word[j] == \"N\" or word[j] == \"P\" or word[j] == \"Q\" or word[j] == \"R\" or word[j] == \"S\" or word[j] == \"T\" or word[j] == \"V\" or word[j] == \"W\" or word[j] == \"X\" or word[j] == \"Y\" or word[j] == \"Z\":\n                    closest_vowel = word[i]\n                    break\n                else:\n                    i = i + 1\n            else:\n                if word[j] == \"B\" or word[j] == \"C\" or word[j] == \"D\" or word[j] == \"F\" or word[j] == \"G\" or word[j] == \"H\" or word[j] == \"J\" or word[j] == \"\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp5sn4f0ut.lua:26: 'do' expected near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local vowels_len_2 = vowels_len * 2\n    local vowels_len_3 = vowels_len * 3\n    local vowels_len_4 = vowels_len * 4\n    local vowels_len_5 = vowels_len * 5\n    local vowels_len_6 = vowels_len * 6\n    local vowels_len_7 = vowels_len * 7\n    local vowels_len_8 = vowels_len * 8\n    local vowels_len_9 = vowels_len * 9\n    local vowels_len_10 = vowels_len * 10\n    local vowels_len_11 = vowels_len * 11\n    local vowels_len_12 = vowels_len * 12\n    local vowels_len_13 = vowels_len * 13\n    local vowels_len_14 = vowels_len * 14\n    local vowels_len_15 = vowels_len * 15\n    local vowels_len_16 = vowels_len * 16\n    local vowels_len_17 = vowels_len * 17\n    local vowels_len_18 = vowels_len * 18\n    local vowels_len_19 = vowels_len * 19\n    local vowels_len_20 = vowels_len * 20\n    local vowels_len_21 = vowels_len * 21\n    local vowels_len_22 = vowels_len * 22\n    local vowels_len_23 = vowels_len * 23\n    local vowels_len_24 = vowels_len * 24\n    local vowels_len_25 = vowels_len * 25\n    local vowels_len_26 = vowels_len * 26\n    local vowels_len_27 = vowels_len * 27\n    local vow\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp_kret9yw.lua:68: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local vowels_upper_index = 1\n    local vowels_lower_index = 1\n    local vowels_index = 1\n    local word_len = #word\n    local i = 1\n    local closest_vowel = \"\"\n    while i <= word_len - 1 do\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == word[i + 1] then\n            i = i + 1\n            continue\n        if word[i] == word[i + 1] then\n            i = i + 1\n            continue\n        if word[i] == word[i + 1] then\n            i = i + 1\n            continue\n        if word[i] == word[i + 1] then\n            i = i + 1\n            continue\n        if word[i] == word[i + 1] then\n            i = i + 1\n            continue\n        if word[i] == word[i + 1] then\n            i = i + 1\n            continue\n        if word[i] == word[i + 1] then\n            i = i + 1\n            continue\n        if word[i] == word[i + 1] then\n            i = i + 1\n            continue\n        if word[i] == word[i + 1] then\n            i = i + 1\n            continue\n        if word[i] == word[i + 1] then\n            i = i + 1\n            continue\n        if word[i] == word[i + 1] then\n            i = i + 1\n            continue\n        if word[i] == word[i + 1] then\n            i = i + 1\n            continue\n        if word[i] == word[i\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpd1i6t6rn.lua:32: syntax error near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local vowels_len_2 = vowels_len * 2\n    local i = 1\n    local j = 1\n    local k = 1\n    local word_len = #word\n    local word_upper_len = #word.upper()\n    local word_lower_len = #word.lower()\n    local word_upper_len_2 = word_upper_len * 2\n    local word_lower_len_2 = word_lower_len * 2\n    local word_len_2 = word_len * 2\n    local word_len_3 = word_len * 3\n    local word_len_4 = word_len * 4\n    local word_len_5 = word_len * 5\n    local word_len_6 = word_len * 6\n    local word_len_7 = word_len * 7\n    local word_len_8 = word_len * 8\n    local word_len_9 = word_len * 9\n    local word_len_10 = word_len * 10\n    local word_len_11 = word_len * 11\n    local word_len_12 = word_len * 12\n    local word_len_13 = word_len * 13\n    local word_len_14 = word_len * 14\n    local word_len_15 = word_len * 15\n    local word_len_16 = word_len * 16\n    local word_len_17 = word_len * 17\n    local word_len_18 = word_len * 18\n    local word_len_19 = word_len * 19\n    local word_len_20 = word_len * 20\n    local word_len_21 = word_len * 21\n    local word_len_22 = word_len * 22\n    local word_len_23 = word_len * 23\n    local word_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7uev42gm.lua:73: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = #vowels\n    local word_len = #word\n    local i = 1\n    local j = 1\n    local closest_vowel = \"\"\n    while i <= word_len - 2 and j <= word_len - 1:\n        if word[j] == word[j + 1] and word[j] in vowels_upper and word[j + 1] in vowels_lower:\n            closest_vowel = vowels[vowels_upper_len + vowels_lower_len - i]\n            break\n        elif word[j] == word[j + 1] and word[j] in vowels_lower and word[j + 1] in vowels_upper:\n            closest_vowel = vowels[vowels_upper_len - i]\n            break\n        elif word[j] == word[j + 1] and word[j] in vowels_lower and word[j + 1] in vowels_lower:\n            closest_vowel = vowels[vowels_lower_len - i]\n            break\n        elif word[j] == word[j + 1] and word[j] in vowels_upper and word[j + 1] in vowels_upper:\n            closest_vowel = vowels[vowels_upper_len - i]\n            break\n        i = i + 1\n        j = j + 1\n    return closest_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpbjzn3keb.lua:26: 'do' expected near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = #vowels\n    local vowels_len_upper = #vowels_upper_len\n    local vowels_len_lower = #vowels_lower_len\n    local vowels_len_len = #vowels_len\n    local vowels_len_len_upper = #vowels_len_upper\n    local vowels_len_len_lower = #vowels_len_lower\n    local vowels_len_len_len = #vowels_len_len\n    local vowels_len_len_len_upper = #vowels_len_len_upper\n    local vowels_len_len_len_lower = #vowels_len_len_lower\n    local vowels_len_len_len_len = #vowels_len_len_len\n    local vowels_len_len_len_len_upper = #vowels_len_len_len_upper\n    local vowels_len_len_len_len_lower = #vowels_len_len_len_lower\n    local vowels_len_len_len_len_len = #vowels_len_len_len_len\n    local vowels_len_len_len_len_len_upper = #vowels_len_len_len_len_upper\n    local vowels_len_len_len_len_len_lower = #vowels_len_len_len_len_lower\n    local vowels_len_len_len_len_len_len = #vowels_len_len_len_len_len\n    local vowels_len_len_len_len_len_len_upper = #vowels_len_len_len_len_len_upper\n    local vowels_len_len_len_len_len_len_lower = #vowels_len_len_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp0_u69wh0.lua:58: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_count = 0\n    local vowels_index = 0\n    for i=1,#word do\n        if vowels[word[i]] then\n            vowels_count = vowels_count + 1\n            vowels_index = i\n        end\n    end\n    if vowels_count == 0 then\n        return \"\"\n    else\n        return word[vowels_index+1]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgi0suzru.lua:35: expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpgi0suzru.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_len = #vowels\n    local vowels_upper = vowels:upper()\n    local vowels_lower = vowels:lower()\n    local vowels_upper_len = vowels_upper:len()\n    local vowels_lower_len = vowels_lower:len()\n    local vowels_upper_len = vowels_upper:len()\n    local vowels_lower_len = vowels_lower:len()\n    local vowels_upper_len = vowels_upper:len()\n    local vowels_lower_len = vowels_lower:len()\n    local vowels_upper_len = vowels_upper:len()\n    local vowels_lower_len = vowels_lower:len()\n    local vowels_upper_len = vowels_upper:len()\n    local vowels_lower_len = vowels_lower:len()\n    local vowels_upper_len = vowels_upper:len()\n    local vowels_lower_len = vowels_lower:len()\n    local vowels_upper_len = vowels_upper:len()\n    local vowels_lower_len = vowels_lower:len()\n    local vowels_upper_len = vowels_upper:len()\n    local vowels_lower_len = vowels_lower:len()\n    local vowels_upper_len = vowels_upper:len()\n    local vowels_lower_len = vowels_lower:len()\n    local vowels_upper_len = vowels_upper:len()\n    local vowels_lower_len = vowels_lower:len()\n    local vowels_upper_len = vowels_upper:len()\n    local vowels_lower_len = vowels_lower:len()\n    local vowels_upper_len = vowels_upper:len()\n    local vowels_lower_len = vowels_lower:len()\n    local vowels_upper_len = vowels_upper:len()\n    local vowels_lower_len = vowels_lower:len()\n    local vowels_upper_len = vowels_upper:len()\n    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpraba7i9j.lua:67: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907507
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local vowels_len_1 = vowels_len - 1\n    local vowels_len_2 = vowels_len - 2\n    local vowels_len_3 = vowels_len - 3\n    local vowels_len_4 = vowels_len - 4\n    local vowels_len_5 = vowels_len - 5\n    local vowels_len_6 = vowels_len - 6\n    local vowels_len_7 = vowels_len - 7\n    local vowels_len_8 = vowels_len - 8\n    local vowels_len_9 = vowels_len - 9\n    local vowels_len_10 = vowels_len - 10\n    local vowels_len_11 = vowels_len - 11\n    local vowels_len_12 = vowels_len - 12\n    local vowels_len_13 = vowels_len - 13\n    local vowels_len_14 = vowels_len - 14\n    local vowels_len_15 = vowels_len - 15\n    local vowels_len_16 = vowels_len - 16\n    local vowels_len_17 = vowels_len - 17\n    local vowels_len_18 = vowels_len - 18\n    local vowels_len_19 = vowels_len - 19\n    local vowels_len_20 = vowels_len - 20\n    local vowels_len_21 = vowels_len - 21\n    local vowels_len_22 = vowels_len - 22\n    local vowels_len_23 = vowels_len - 23\n    local vowels_len_24 = vowels_len - 24\n    local vowels_len_25 = vowels_len - 25\n    local vowels_len_26 = vowels_len - 26\n    local vow\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpuqgxczyv.lua:68: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_lower = vowels.lower()\n    local vowels_upper = vowels.upper()\n    local vowels_lower_len = #vowels_lower\n    local vowels_upper_len = #vowels_upper\n    local vowels_len = vowels_lower_len + vowels_upper_len\n    local word_len = #word\n    local i = 1\n    local j = 1\n    local closest_vowel\n    while i <= word_len - 1 do\n        if word[i] == word[i+1] then\n            if j == 1 then\n                closest_vowel = vowels[vowels_len - 1]\n            elseif j == word_len - 1 then\n                closest_vowel = vowels[vowels_len - 1]\n            elseif word[i-1] == vowels_lower[j-1] or word[i-1] == vowels_upper[j-1] then\n                closest_vowel = vowels[vowels_len - 1]\n            elseif word[i+1] == vowels_lower[j+1] or word[i+1] == vowels_upper[j+1] then\n                closest_vowel = vowels[vowels_len - 1]\n            else\n                closest_vowel = vowels[j]\n            end\n            return closest_vowel\n        else\n            j = j + 1\n        end\n        i = i + 1\n    end\n    return \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpty243j99.lua:17: bad argument #1 to 'lower' (string expected, got no value)\nstack traceback:\n\t/tmp/tmpty243j99.lua:17: in local 'candidate'\n\t/tmp/tmpty243j99.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = #vowels\n    local word_len = #word\n    local i = 0\n    local j = 0\n    local k = 0\n    local closest_vowel = \"\"\n    local closest_vowel_index = 0\n    local closest_vowel_len = 0\n    local closest_vowel_index_upper = 0\n    local closest_vowel_index_lower = 0\n    local closest_vowel_index_upper_len = 0\n    local closest_vowel_index_lower_len = 0\n    local closest_vowel_index_len = 0\n    local closest_vowel_index_upper_len = 0\n    local closest_vowel_index_lower_len = 0\n    local closest_vowel_index_len = 0\n    local closest_vowel_index_upper_len = 0\n    local closest_vowel_index_lower_len = 0\n    local closest_vowel_index_len = 0\n    local closest_vowel_index_upper_len = 0\n    local closest_vowel_index_lower_len = 0\n    local closest_vowel_index_len = 0\n    local closest_vowel_index_upper_len = 0\n    local closest_vowel_index_lower_len = 0\n    local closest_vowel_index_len = 0\n    local closest_vowel_index_upper_len = 0\n    local closest_vowel_index_lower_len = 0\n    local closest_vowel_index_len = 0\n    local closest_vowel_index_upper_len = 0\n    local closest_vowel_index_lower_len = 0\n    local closest_vowel_index_len = 0\n    local closest_vowel_index_upper_len = 0\n    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp298aw78t.lua:73: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local vowels_upper_index = 1\n    local vowels_lower_index = 1\n    local vowels_index = 1\n    local i = 1\n    while i <= #word do\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp1sxtokw9.lua:30: syntax error near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_len = #vowels\n    local vowels_pos = {}\n    for i = 1, vowels_len do\n        vowels_pos[vowels[i]] = i\n    end\n    local vowels_pos_len = #vowels_pos\n    local vowels_pos_pos = {}\n    for i = 1, vowels_pos_len do\n        vowels_pos_pos[vowels_pos[i]] = i\n    end\n    local vowels_pos_pos_len = #vowels_pos_pos\n    for i = 1, vowels_len do\n        for j = 1, vowels_pos_len do\n            if vowels_pos[i] == vowels_pos_pos[j] then\n                if i < j then\n                    return vowels[i]\n                end\n                return vowels[j]\n            end\n        end\n    end\n    return \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0zn6bvn7.lua:20: table index is nil\nstack traceback:\n\t/tmp/tmp0zn6bvn7.lua:20: in local 'candidate'\n\t/tmp/tmp0zn6bvn7.lua:44: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local word_len = #word\n    local i = 1\n    local j = 1\n    local closest_vowel = \"\"\n    while i <= word_len - 1 do\n        if word[i] == word[i + 1] then\n            if j == 1 then\n                closest_vowel = vowels[vowels_upper.index(word[i])]\n            elseif j == vowels_len then\n                closest_vowel = vowels[vowels_lower.index(word[i])]\n            else\n                closest_vowel = vowels[vowels_upper.index(word[i])]\n            end\n            j = j + 1\n        else\n            i = i + 1\n        end\n    end\n    return closest_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt3594_vz.lua:17: bad argument #1 to 'upper' (string expected, got no value)\nstack traceback:\n\t/tmp/tmpt3594_vz.lua:17: in local 'candidate'\n\t/tmp/tmpt3594_vz.lua:46: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_len = #vowels\n    local vowels_count = 0\n    local consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    local consonants_len = #consonants\n    local consonants_count = 0\n    local i = 1\n    local j = 1\n    local result = \"\"\n    while i <= #word do\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpprlor5th.lua:29: syntax error near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_len = #vowels\n    local vowels_count = 0\n    local vowels_index = 0\n    local i = 1\n    while i <= #word do\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpvsxs20je.lua:25: syntax error near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local word_len = #word\n    local i = 0\n    local j = 0\n    local closest_vowel = \"\"\n    while i < word_len and j < word_len:\n        if word[i] == word[j]:\n            i = i + 1\n            j = j + 1\n        else:\n            if word[i] in vowels_upper:\n                if j - i < vowels_upper_len:\n                    closest_vowel = vowels_upper[j - i]\n                else:\n                    closest_vowel = \"\"\n                break\n            elif word[i] in vowels_lower:\n                if j - i < vowels_lower_len:\n                    closest_vowel = vowels_lower[j - i]\n                else:\n                    closest_vowel = \"\"\n                break\n            else:\n                i = i + 1\n    return closest_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsvf5u7bd.lua:27: <name> expected near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = #vowels\n    local i = 1\n    local j = 1\n    local k = 1\n    local word_len = #word\n    local closest_vowel = \"\"\n    while i <= word_len - 1 and j <= word_len - 1 and k <= word_len - 1:\n        if word[i] == word[j] and word[i] == word[k]:\n            if i > 0 and word[i - 1] == \"a\" or word[i - 1] == \"e\" or word[i - 1] == \"i\" or word[i - 1] == \"o\" or word[i - 1] == \"u\":\n                closest_vowel = vowels[k - 1]\n            elif j > 0 and word[j - 1] == \"a\" or word[j - 1] == \"e\" or word[j - 1] == \"i\" or word[j - 1] == \"o\" or word[j - 1] == \"u\":\n                closest_vowel = vowels[k - 1]\n            elif k > 0 and word[k - 1] == \"a\" or word[k - 1] == \"e\" or word[k - 1] == \"i\" or word[k - 1] == \"o\" or word[k - 1] == \"u\":\n                closest_vowel = vowels[k - 1]\n            else:\n                closest_vowel = \"\"\n            break\n        elif word[i] == word[j] and word[i] != word[k]:\n            if i > 0 and word[i - 1] == \"a\" or word[i - 1] == \"e\" or word[i - 1] == \"i\" or word[i - 1] == \"o\" or word[i - 1] == \"u\":\n                closest\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp5yzbhjtr.lua:27: 'do' expected near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = #vowels\n    local word_len = #word\n    local i = 1\n    local j = 1\n    local k = 1\n    local closest_vowel = \"\"\n    while i <= word_len and j <= word_len and k <= word_len and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \" and word[i] ~= word[j] and word[i] ~= word[k] and word[j] ~= word[k] and word[i] ~= vowels and word[j] ~= vowels and word[k] ~= vowels:\n        if word[i] == word[j] and word[i] == word[k]:\n            if i > j and i > k:\n                closest_vowel = vowels_upper[k]\n            elif j > i and j > k:\n                closest_vowel = vowels_lower[k]\n            else:\n                closest_vowel = vowels[k]\n            break\n        elif word[i] == word[j] or word[i] == word[k]:\n            if i > j and i > k:\n                closest_vowel = vowels_upper[k]\n            elif j > i and j > k:\n                closest_vowel = vowels_lower[k]\n            else:\n                closest_vowel = vowels[k]\n            break\n        elif word[i] == vowels_upper[j] or word[i] == vowels_lower[j] or word[i] == vowels_upper[k] or word[i] == vowels_lower[k]:\n            if i > j and i > k:\n                closest_vowel = vowels_upper[\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpezf9wlh4.lua:28: <name> expected near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_len = #vowels\n    local vowels_pos = {}\n    for i = 1, vowels_len do\n        vowels_pos[vowels[i]] = i\n    end\n    local consonants = {}\n    for i = 1, #word do\n        if word[i] ~= \" \" then\n            if vowels_pos[word[i]] ~= nil then\n                if i > 1 and word[i-1] ~= \" \" then\n                    return \"\"\n                end\n                return word[i]\n            end\n            if word[i] ~= \" \" then\n                if i < #word - 1 and word[i+1] ~= \" \" then\n                    return \"\"\n                end\n                return word[i]\n            end\n        end\n    end\n    return \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdtzqq2sp.lua:20: table index is nil\nstack traceback:\n\t/tmp/tmpdtzqq2sp.lua:20: in local 'candidate'\n\t/tmp/tmpdtzqq2sp.lua:45: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = #vowels\n    local vowels_upper_index = 1\n    local vowels_lower_index = 1\n    local vowels_index = 1\n    local vowels_len_diff = vowels_len - vowels_upper_len\n    local vowels_len_diff_2 = vowels_len - vowels_lower_len\n    local vowels_len_diff_3 = vowels_len - vowels_upper_len - vowels_lower_len\n    local vowels_len_diff_4 = vowels_len - vowels_upper_len - vowels_lower_len - vowels_upper_len\n    local vowels_len_diff_5 = vowels_len - vowels_upper_len - vowels_lower_len - vowels_lower_len - vowels_upper_len\n    local vowels_len_diff_6 = vowels_len - vowels_upper_len - vowels_lower_len - vowels_lower_len - vowels_upper_len - vowels_lower_len\n    local vowels_len_diff_7 = vowels_len - vowels_upper_len - vowels_lower_len - vowels_lower_len - vowels_upper_len - vowels_lower_len - vowels_upper_len\n    local vowels_len_diff_8 = vowels_len - vowels_upper_len - vowels_lower_len - vowels_lower_len - vowels_upper_len - vowels_lower_len - vowels_upper_len - vowels_lower_len\n    local vowels_len_diff_9 = vowels_len - vowels_upper_len - vowels_lower_len - vowels_lower_len - vowels_upper_len - vowels_lower_len - vowels_upper_len - vowels_lower_len - vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp5ilbddme.lua:53: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n  local vowels = \"aeiouAEIOU\"\n  local vowels_upper = \"AEIOU\"\n  local vowels_lower = \"aeiou\"\n  local vowels_upper_len = #vowels_upper\n  local vowels_lower_len = #vowels_lower\n  local vowels_len = #vowels\n  local word_len = #word\n  local i = 0\n  local j = 0\n  local k = 0\n  local closest_vowel = \"\"\n  local closest_vowel_index = 0\n  local closest_vowel_len = 0\n  local closest_vowel_len_upper = 0\n  local closest_vowel_len_lower = 0\n  local closest_vowel_len_upper_index = 0\n  local closest_vowel_len_lower_index = 0\n  local word_upper = word\n  local word_lower = string.lower(word)\n  for i = 1, word_len - 1 do\n    if word[i] == word[i+1] then\n      if word[i] == \"A\" or word[i] == \"E\" or word[i] == \"I\" or word[i] == \"O\" or word[i] == \"U\" then\n        if word_upper[i] == \"A\" or word_upper[i] == \"E\" or word_upper[i] == \"I\" or word_upper[i] == \"O\" or word_upper[i] == \"U\" then\n          closest_vowel_len_upper = closest_vowel_len_upper + 1\n          closest_vowel_len_upper_index = i\n        end\n      elseif word_lower[i] == \"a\" or word_lower[i] == \"e\" or word_lower[i] == \"i\" or word_lower[i] == \"o\" or word_lower[i] == \"u\" then\n        if word_lower[i] == \"a\" or word_lower[i] == \"e\" or word_lower[i] == \"i\" or word_lower[i] == \"o\" or word_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpobdzxw65.lua:44: 'then' expected near 'lu'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = #vowels\n    local vowels_upper_index = 1\n    local vowels_lower_index = 1\n    local vowels_index = 1\n    local i = 1\n    local j = 1\n    local k = 1\n    local word_len = #word\n    local word_upper_len = #word.upper()\n    local word_lower_len = #word.lower()\n    local word_upper_index = 1\n    local word_lower_index = 1\n    local word_index = 1\n    local closest_vowel = \"\"\n    while i <= word_len - 1 do\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \".\" then\n            i = i + 1\n            continue\n        if word[i] == \",\" then\n            i = i + 1\n            continue\n        if word[i] == \"-\" then\n            i = i + 1\n            continue\n        if word[i] == \"\\\"\" then\n            i = i + 1\n            continue\n        if word[i] == \"'\" then\n            i = i + 1\n            continue\n        if word[i] == \"!\" then\n            i = i + 1\n            continue\n        if word[i] == \"?\" then\n            i = i + 1\n            continue\n        if word[i] == \"(\" then\n            i = i + 1\n            continue\n        if word[i] == \")\" then\n            i = i + 1\n            continue\n        if word[i] == \"{\" then\n            i = i + 1\n            continue\n        if word[i] == \"}\" then\n            i = i + 1\n            continue\n        if word[i] == \";\" then\n            i = i + 1\n            continue\n        if word[i] == \":\" then\n            i = i + 1\n            \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmphniw23v3.lua:39: syntax error near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_len = #vowels\n    local vowels_count = 0\n    local vowels_index = 1\n    local vowels_index_2 = 2\n    local word_len = #word\n    local word_index = 1\n    local word_index_2 = 2\n    local closest_vowel = \"\"\n    while word_index < word_len and vowels_index < vowels_len and vowels_index_2 < vowels_len:\n        if word[word_index] == vowels[vowels_index] and word[word_index_2] == vowels[vowels_index_2]:\n            vowels_count = vowels_count + 1\n            vowels_index = vowels_index + 1\n            vowels_index_2 = vowels_index_2 + 1\n        else:\n            vowels_index = 1\n            vowels_index_2 = 2\n        word_index = word_index + 1\n        word_index_2 = word_index_2 + 1\n    if vowels_count == 0:\n        return \"\"\n    else:\n        return vowels[vowels_count]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpr8gri3se.lua:26: <name> expected near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = #vowels\n    local word_len = #word\n    local i = 1\n    local j = 1\n    local k = 1\n    local closest_vowel = \"\"\n    while i <= word_len - 1 do\n        if word[i] == word[i + 1] then\n            if k == 1 then\n                closest_vowel = vowels[k]\n                k = k + 1\n            elseif k > 1 and k < vowels_len and word[i] == vowels[k] and word[i + 1] == vowels[k - 1] then\n                closest_vowel = vowels[k]\n                k = k + 1\n            elseif k > 1 and k < vowels_len and word[i] == vowels[k] and word[i + 1] == vowels_upper[k - 1] then\n                closest_vowel = vowels_upper[k]\n                k = k + 1\n            elseif k > 1 and k < vowels_len and word[i] == vowels_lower[k] and word[i + 1] == vowels_lower[k - 1] then\n                closest_vowel = vowels_lower[k]\n                k = k + 1\n            elseif k > 1 and k < vowels_len and word[i] == vowels_lower[k] and word[i + 1] == vowels_upper[k - 1] then\n                closest_vowel = vowels_lower[k]\n                k = k + 1\n            elseif k > 1 and k < vowels_len and word[i] == vowels_upper[k] and word[i + 1] == vowels_upper[k - 1] then\n                closest_vowel = vowels_upper[k]\n                k = k + 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpd0_wbwyl.lua:66: 'end' expected (to close 'if' at line 29) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_len = #vowels\n    local vowels_pos = {}\n    for i = 1, vowels_len do\n        vowels_pos[vowels[i]] = i\n    end\n    local vowels_pos_len = #vowels_pos\n    local vowels_pos_pos = {}\n    for i = 1, vowels_pos_len do\n        vowels_pos_pos[vowels_pos[i]] = i\n    end\n    local vowels_pos_pos_len = #vowels_pos_pos\n    local vowels_pos_pos_pos = {}\n    for i = 1, vowels_pos_pos_len do\n        vowels_pos_pos_pos[vowels_pos_pos[i]] = i\n    end\n    local vowels_pos_pos_pos_len = #vowels_pos_pos_pos\n    local vowels_pos_pos_pos_pos = {}\n    for i = 1, vowels_pos_pos_pos_len do\n        vowels_pos_pos_pos_pos[vowels_pos_pos_pos[i]] = i\n    end\n    local vowels_pos_pos_pos_pos_len = #vowels_pos_pos_pos_pos\n    local vowels_pos_pos_pos_pos_pos = {}\n    for i = 1, vowels_pos_pos_pos_pos_len do\n        vowels_pos_pos_pos_pos_pos[vowels_pos_pos_pos_pos[i]] = i\n    end\n    local vowels_pos_pos_pos_pos_pos_len = #vowels_pos_pos_pos_pos_pos\n    local vowels_pos_pos_pos_pos_pos_pos = {}\n    for i = 1, vowels_pos_pos_pos_pos_pos_len do\n        vowels_pos_pos_pos_pos_pos_pos[vowels_pos_pos_pos_pos_pos[i]] = i\n    end\n    local vowels_pos\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmphrts2_hu.lua:67: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907508
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = \"AEIOU\"\n    local vowels_lower = \"aeiouAEIOU\"\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = #vowels\n    local word_len = #word\n    local i = 1\n    local j = 1\n    local k = 1\n    local closest_vowel = \"\"\n    while i <= word_len - 1 do\n        if word[i] == word[i + 1] then\n            if k == 1 then\n                if word[i] == \"A\" or word[i] == \"a\" then\n                    closest_vowel = vowels_upper[k]\n                    k = k + 1\n                elseif word[i] == \"E\" or word[i] == \"e\" then\n                    closest_vowel = vowels_lower[k]\n                    k = k + 1\n                elseif word[i] == \"I\" or word[i] == \"i\" then\n                    closest_vowel = vowels[k]\n                    k = k + 1\n                elseif word[i] == \"O\" or word[i] == \"o\" then\n                    closest_vowel = vowels_upper[k]\n                    k = k + 1\n                elseif word[i] == \"U\" or word[i] == \"u\" then\n                    closest_vowel = vowels_lower[k]\n                    k = k + 1\n                elseif word[i] == \"Y\" or word[i] == \"y\" then\n                    closest_vowel = vowels[k]\n                    k = k + 1\n                else\n                    closest_vowel = \"\"\n                end\n            else\n                closest_vowel = \"\"\n            end\n        else\n            k = 1\n            if word[i] == \"A\" or word[i] == \"a\" then\n                closest_vowel = vowels_upper[k]\n                k = k\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpzg_m8jc8.lua:78: 'end' expected (to close 'if' at line 56) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local vowels_len_2 = vowels_len * 2\n    local vowels_len_3 = vowels_len * 3\n    local vowels_len_4 = vowels_len * 4\n    local vowels_len_5 = vowels_len * 5\n    local vowels_len_6 = vowels_len * 6\n    local vowels_len_7 = vowels_len * 7\n    local vowels_len_8 = vowels_len * 8\n    local vowels_len_9 = vowels_len * 9\n    local vowels_len_10 = vowels_len * 10\n    local vowels_len_11 = vowels_len * 11\n    local vowels_len_12 = vowels_len * 12\n    local vowels_len_13 = vowels_len * 13\n    local vowels_len_14 = vowels_len * 14\n    local vowels_len_15 = vowels_len * 15\n    local vowels_len_16 = vowels_len * 16\n    local vowels_len_17 = vowels_len * 17\n    local vowels_len_18 = vowels_len * 18\n    local vowels_len_19 = vowels_len * 19\n    local vowels_len_20 = vowels_len * 20\n    local vowels_len_21 = vowels_len * 21\n    local vowels_len_22 = vowels_len * 22\n    local vowels_len_23 = vowels_len * 23\n    local vowels_len_24 = vowels_len * 24\n    local vowels_len_25 = vowels_len * 25\n    local vowels_len_26 = vowels_len * 26\n    local vowels_len_27 = vowels_len * 27\n    local vow\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp_kret9yw.lua:68: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_len = #vowels\n    local vowels_upper = vowels:upper()\n    local vowels_lower = vowels:lower()\n    local vowels_upper_len = vowels_upper:len()\n    local vowels_lower_len = vowels_lower:len()\n    local vowels_upper_len_minus_1 = vowels_upper_len - 1\n    local vowels_lower_len_minus_1 = vowels_lower_len - 1\n    local i = 1\n    local j = 1\n    local found = false\n    while i <= vowels_len and not found do\n        if word:sub(i,1) == vowels_upper[j] or word:sub(i,1) == vowels_lower[j] then\n            found = true\n            return vowels[j]\n        else\n            j = j + 1\n            if j == vowels_upper_len_minus_1 or j == vowels_lower_len_minus_1 then\n                j = 1\n            end\n        end\n        i = i + 1\n    end\n    return \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpova3t_g0.lua:45: expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpova3t_g0.lua:45: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_len = #vowels\n    local vowels_count = 0\n    local consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    local consonants_len = #consonants\n    local consonants_count = 0\n    local i = 1\n    while i <= #word do\n        if word[i] == vowels[vowels_count] then\n            vowels_count = vowels_count + 1\n            if vowels_count == vowels_len then\n                return word[i]\n            end\n        elseif word[i] == consonants[consonants_count] then\n            consonants_count = consonants_count + 1\n            if consonants_count == consonants_len then\n                return \"\"\n            end\n        end\n        i = i + 1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_9afod7l.lua:42: expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmp_9afod7l.lua:42: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_count = 0\n    local vowels_index = 0\n    for i = 1, #word, 2 do\n        if word[i] == word[i+1] then\n            vowels_count = vowels_count + 1\n            vowels_index = i\n        end\n    end\n    if vowels_count == 0 then\n        return \"\"\n    else\n        return vowels[vowels_index]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp867yqzyl.lua:35: expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmp867yqzyl.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local vowels_len_2 = vowels_len * 2\n    local vowels_len_3 = vowels_len * 3\n    local vowels_len_4 = vowels_len * 4\n    local vowels_len_5 = vowels_len * 5\n    local vowels_len_6 = vowels_len * 6\n    local vowels_len_7 = vowels_len * 7\n    local vowels_len_8 = vowels_len * 8\n    local vowels_len_9 = vowels_len * 9\n    local vowels_len_10 = vowels_len * 10\n    local vowels_len_11 = vowels_len * 11\n    local vowels_len_12 = vowels_len * 12\n    local vowels_len_13 = vowels_len * 13\n    local vowels_len_14 = vowels_len * 14\n    local vowels_len_15 = vowels_len * 15\n    local vowels_len_16 = vowels_len * 16\n    local vowels_len_17 = vowels_len * 17\n    local vowels_len_18 = vowels_len * 18\n    local vowels_len_19 = vowels_len * 19\n    local vowels_len_20 = vowels_len * 20\n    local vowels_len_21 = vowels_len * 21\n    local vowels_len_22 = vowels_len * 22\n    local vowels_len_23 = vowels_len * 23\n    local vowels_len_24 = vowels_len * 24\n    local vowels_len_25 = vowels_len * 25\n    local vowels_len_26 = vowels_len * 26\n    local vowels_len_27 = vowels_len * 27\n    local vow\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp_kret9yw.lua:68: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local vowels_upper_index = 1\n    local vowels_lower_index = 1\n    local vowels_index = 1\n    local word_len = #word\n    local word_index = 1\n    local closest_vowel = \"\"\n    while word_index <= word_len do\n        if word_index == 1 then\n            if word[word_index] == word[word_index + 1] then\n                closest_vowel = word[word_index]\n                break\n            elseif word[word_index] == word[word_index - 1] then\n                closest_vowel = word[word_index]\n                break\n            elseif word[word_index] == vowels_upper[vowels_upper_index] then\n                vowels_upper_index = vowels_upper_index + 1\n                if vowels_upper_index == vowels_upper_len then\n                    vowels_upper_index = 1\n                closest_vowel = word[word_index]\n                break\n            elseif word[word_index] == vowels_lower[vowels_lower_index] then\n                vowels_lower_index = vowels_lower_index + 1\n                if vowels_lower_index == vowels_lower_len then\n                    vowels_lower_index = 1\n                closest_vowel = word[word_index]\n                break\n            elseif word[word_index] == vowels[vowels_index] then\n                vowels_index = vowels_index + 1\n                if vowels_index == vowels_len then\n                    vowels_index = 1\n                closest_vowel = word[word_index]\n                break\n            elseif word[word_index\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp9v1h4vkj.lua:55: ']' expected near 'lu'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n  local vowels = \"aeiouAEIOU\"\n  local vowels_upper = vowels.upper()\n  local vowels_lower = vowels.lower()\n  local vowels_upper_len = #vowels_upper\n  local vowels_lower_len = #vowels_lower\n  local vowels_len = #vowels\n  local word_len = #word\n  local i = 1\n  local j = 1\n  local k = 1\n  local closest_vowel = \"\"\n  while i <= word_len and j <= word_len and k <= word_len and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \" and word[i] ~= word[j] and word[i] ~= word[k] and word[j] ~= word[k] and word[i] ~= vowels_upper and word[j] ~= vowels_upper and word[k] ~= vowels_upper and word[i] ~= vowels_lower and word[j] ~= vowels_lower and word[k] ~= vowels_lower and word[i] ~= vowels_upper_len and word[j] ~= vowels_upper_len and word[k] ~= vowels_upper_len and word[i] ~= vowels_lower_len and word[j] ~= vowels_lower_len and word[k] ~= vowels_lower_len and word[i] ~= vowels_len and word[j] ~= vowels_len and word[k] ~= vowels_len:\n    i = i + 1\n    j = j + 1\n    k = k + 1\n  if i > word_len and j > word_len and k > word_len:\n    return closest_vowel\n  else:\n    return \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpbmejvczl.lua:28: function arguments expected near '='\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n  local vowels = \"aeiouAEIOU\"\n  local vowels_lower = vowels.lower()\n  local vowels_upper = vowels.upper()\n  local vowels_lower_len = #vowels_lower\n  local vowels_upper_len = #vowels_upper\n  local vowels_len = #vowels\n  local word_len = #word\n  local i = 1\n  local j = 1\n  local k = 1\n  local closest_vowel = \"\"\n  while i <= word_len and j <= word_len and k <= word_len and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \" and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \" and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \" and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \" and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \" and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \" and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \" and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \" and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \" and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \" and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \" and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \" and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \" and word[i] ~= \" \" and word[j] ~= \" \" and word[\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmprrzdeb_u.lua:28: ']' expected near '='\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_len = #vowels\n    local vowels_count = 0\n    local consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    local consonants_len = #consonants\n    local consonants_count = 0\n    local i = 1\n    local j = 1\n    local k = 1\n    local l = 1\n    local m = 1\n    local n = 1\n    local p = 1\n    local q = 1\n    local r = 1\n    local s = 1\n    local t = 1\n    local u = 1\n    local v = 1\n    local w = 1\n    local x = 1\n    local y = 1\n    local z = 1\n    while i <= #word do\n        if word[i] == vowels[k] then\n            k = k + 1\n            vowels_count = vowels_count + 1\n            if vowels_count == vowels_len then\n                return word[i+1]\n            end\n        elseif word[i] == consonants[l] then\n            l = l + 1\n            consonants_count = consonants_count + 1\n            if consonants_count == consonants_len then\n                return word[i+1]\n            end\n        elseif word[i] == vowels[m] then\n            m = m + 1\n            vowels_count = vowels_count + 1\n            if vowels_count == vowels_len then\n                return word[i+1]\n            end\n        elseif word[i] == vowels[n] then\n            n = n + 1\n            vowels_count = vowels_count + 1\n            if vowels_count == vowels_len then\n                return word[i+1]\n            end\n        elseif word[i] == vowels[p] then\n            p = p + 1\n            vowels_count = vowels_count + 1\n            if vowels_count == vowels_len then\n                return word[i+1]\n            end\n        elseif word[i]\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmplmtkzlu4.lua:71: 'then' expected near 'lu'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = #vowels\n    local word_len = #word\n    local i = 1\n    local j = 1\n    local closest_vowel = \"\"\n    while i <= word_len - 2 and j <= word_len - 1:\n        if word[j] == word[j + 1] and word[j] in vowels:\n            if word[j] == \"A\":\n                if word[j + 1] == \"E\":\n                    closest_vowel = \"E\"\n                    break\n                else:\n                    closest_vowel = \"A\"\n                    break\n            else:\n                if word[j + 1] == \"E\":\n                    closest_vowel = \"E\"\n                    break\n                else:\n                    closest_vowel = \"A\"\n                    break\n        elif word[j] in vowels_upper:\n            if word[j] == \"A\":\n                if word[j + 1] == \"E\":\n                    closest_vowel = \"E\"\n                    break\n                else:\n                    closest_vowel = \"A\"\n                    break\n            else:\n                if word[j + 1] == \"E\":\n                    closest_vowel = \"E\"\n                    break\n                else:\n                    closest_vowel = \"A\"\n                    break\n        elif word[j] in vowels_lower:\n            if word[j] == \"a\":\n                if word[j + 1] == \"e\":\n                    closest_vowel = \"e\"\n                    break\n                else:\n                    closest_vowel = \"a\"\n                    break\n            else:\n                if word[j + 1] == \"e\":\n                    closest_vowel = \"e\"\n                    break\n                else:\n                    closest\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpwa104kt0.lua:26: 'do' expected near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_lower = vowels.lower()\n    local vowels_upper = vowels.upper()\n    local vowels_lower_len = #vowels_lower\n    local vowels_upper_len = #vowels_upper\n    local word_len = #word\n    local i = 1\n    local j = 1\n    local closest_vowel = \"\"\n    while i <= word_len - 1 do\n        if word[i] == word[i + 1] then\n            if j == 1 then\n                closest_vowel = vowels[vowels_lower_len + j - 1]\n            elseif j == vowels_lower_len then\n                closest_vowel = vowels[vowels_upper_len + j - 1]\n            else\n                closest_vowel = vowels[j - 1]\n            end\n            return closest_vowel\n        end\n        i = i + 1\n        j = j + 1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz9tn5_w7.lua:17: bad argument #1 to 'lower' (string expected, got no value)\nstack traceback:\n\t/tmp/tmpz9tn5_w7.lua:17: in local 'candidate'\n\t/tmp/tmpz9tn5_w7.lua:44: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_lower = vowels.lower()\n    local vowels_upper = vowels.upper()\n    local vowels_lower_len = #vowels_lower\n    local vowels_upper_len = #vowels_upper\n    local vowels_len = #vowels\n    local vowels_len_lower = #vowels_lower\n    local vowels_len_upper = #vowels_upper\n    local vowels_len_lower_len = #vowels_lower_len\n    local vowels_len_upper_len = #vowels_upper_len\n    local vowels_len_len = #vowels_len\n    local vowels_len_lower_len_lower = #vowels_lower_len_lower\n    local vowels_len_lower_len_upper = #vowels_lower_len_upper\n    local vowels_len_lower_len_len = #vowels_lower_len_len\n    local vowels_len_upper_len_lower = #vowels_upper_len_lower\n    local vowels_len_upper_len_upper = #vowels_upper_len_upper\n    local vowels_len_upper_len_len = #vowels_upper_len_len\n    local vowels_len_len_lower = #vowels_len_lower\n    local vowels_len_len_upper = #vowels_len_upper\n    local vowels_len_len_len = #vowels_len_len\n    local vowels_len_lower_len_lower_len = #vowels_lower_len_lower_len\n    local vowels_len_lower_len_upper_len = #vowels_lower_len_upper_len\n    local vowels_len_lower_len_len_len = #vowels_lower_len_len_len\n    local vowels_len_upper_len_lower_len = #vowels_upper_len_lower_len\n    local vowels_len_upper_len_upper_len = #vowels_upper_len_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpy3_6gnee.lua:60: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local vowels_upper_index = 1\n    local vowels_lower_index = 1\n    local vowels_index = 1\n    local i = 1\n    while i <= #word do\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp1sxtokw9.lua:30: syntax error near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = #vowels\n    local word_len = #word\n    local i = 0\n    local j = 0\n    local k = 0\n    local closest_vowel = \"\"\n    local closest_vowel_index = 0\n    local closest_vowel_len = 0\n    local closest_vowel_index_len = 0\n    local closest_vowel_len_len = 0\n    local closest_vowel_index_len_len = 0\n    local closest_vowel_index_len_len_len = 0\n    local closest_vowel_index_len_len_len_len = 0\n    local closest_vowel_index_len_len_len_len_len = 0\n    local closest_vowel_index_len_len_len_len_len_len = 0\n    local closest_vowel_index_len_len_len_len_len_len_len = 0\n    local closest_vowel_index_len_len_len_len_len_len_len_len = 0\n    local closest_vowel_index_len_len_len_len_len_len_len_len_len = 0\n    local closest_vowel_index_len_len_len_len_len_len_len_len_len_len = 0\n    local closest_vowel_index_len_len_len_len_len_len_len_len_len_len_len = 0\n    local closest_vowel_index_len_len_len_len_len_len_len_len_len_len_len_len = 0\n    local closest_vowel_index_len_len_len_len_len_len_len_len_len_len_len_len_len = 0\n    local closest_vowel_index_len_len_len\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp8ksl1e0a.lua:63: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = #vowels\n    local word_len = #word\n    local i = 1\n    local j = 1\n    local k = 1\n    local closest_vowel = \"\"\n    while i <= word_len - 1 and j <= word_len - 1 and k <= word_len - 1:\n        if word[i] == word[j] and word[j] == word[k]:\n            if word[i] == \"A\" or word[i] == \"E\" or word[i] == \"I\" or word[i] == \"O\" or word[i] == \"U\":\n                if word[i] == word[k]:\n                    closest_vowel = word[i]\n                    break\n                else:\n                    i = i + 1\n            else:\n                if word[i] == word[k]:\n                    closest_vowel = word[i]\n                    break\n                else:\n                    j = j + 1\n        else:\n            if word[i] == word[j] or word[j] == word[k]:\n                if word[i] == \"A\" or word[i] == \"E\" or word[i] == \"I\" or word[i] == \"O\" or word[i] == \"U\":\n                    if word[i] == word[k]:\n                        closest_vowel = word[i]\n                        break\n                    else:\n                        i = i + 1\n                else:\n                    if word[i] == word[k]:\n                        closest_vowel = word[i]\n                        break\n                    else:\n                        j = j + 1\n            else:\n                if word[i] == word[j] or word[j] == word[k]:\n                    if word[i] == \"A\" or word[i] == \"E\" or word[i] == \"I\"\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpu4ye9gm8.lua:27: 'do' expected near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_len = #vowels\n    local vowels_upper = vowels:upper()\n    local vowels_lower = vowels:lower()\n    local vowels_upper_len = vowels_upper:len()\n    local vowels_lower_len = vowels_lower:len()\n    local i = 1\n    local j = 1\n    local result = \"\"\n    while i <= #word do\n        if word:sub(i,i,1) == \" \" then\n            i = i + 1\n            continue\n        if word:sub(i,i,1) == \" \" then\n            i = i + 1\n            continue\n        if word:sub(i,i,1) == \" \" then\n            i = i + 1\n            continue\n        if word:sub(i,i,1) == \" \" then\n            i = i + 1\n            continue\n        if word:sub(i,i,1) == \" \" then\n            i = i + 1\n            continue\n        if word:sub(i,i,1) == \" \" then\n            i = i + 1\n            continue\n        if word:sub(i,i,1) == \" \" then\n            i = i + 1\n            continue\n        if word:sub(i,i,1) == \" \" then\n            i = i + 1\n            continue\n        if word:sub(i,i,1) == \" \" then\n            i = i + 1\n            continue\n        if word:sub(i,i,1) == \" \" then\n            i = i + 1\n            continue\n        if word:sub(i,i,1) == \" \" then\n            i = i + 1\n            continue\n        if word:sub(i,i,1) == \" \" then\n            i = i + 1\n            continue\n        if word:sub(i,i,1) == \" \" then\n            i = i + 1\n            continue\n        if word:sub(i,i,1) == \" \" then\n            i = i + 1\n            continue\n        if word:sub(i,i,1) == \" \" then\n            i = i +\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpxvtxh6rm.lua:29: syntax error near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_len = #vowels\n    local vowels_pos = {}\n    for i = 1, vowels_len do\n        vowels_pos[vowels[i]] = i\n    end\n    local vowels_pos_len = #vowels_pos\n    local i = vowels_pos_len - 1\n    while i > 0 do\n        if vowels_pos[word[i]] ~= vowels_pos[word[i - 1]] then\n            return word[i]\n        end\n        i = i - 1\n    end\n    return \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0ihn7py4.lua:20: table index is nil\nstack traceback:\n\t/tmp/tmp0ihn7py4.lua:20: in local 'candidate'\n\t/tmp/tmp0ihn7py4.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local vowels_upper_index = 1\n    local vowels_lower_index = 1\n    local vowels_index = 1\n    local word_len = #word\n    local i = 1\n    local j = 1\n    local closest_vowel = \"\"\n    while i <= word_len and j <= word_len:\n        if word[i] == word[j]:\n            i = i + 1\n            j = j + 1\n        else:\n            if word[i] in vowels_upper:\n                if vowels_upper_index < vowels_upper_len:\n                    vowels_upper_index = vowels_upper_index + 1\n                else:\n                    vowels_upper_index = 1\n            else:\n                if vowels_lower_index < vowels_lower_len:\n                    vowels_lower_index = vowels_lower_index + 1\n                else:\n                    vowels_lower_index = 1\n            if vowels_index < vowels_len:\n                vowels_index = vowels_index + 1\n            else:\n                vowels_index = 1\n            if vowels_index == vowels_len:\n                closest_vowel = vowels[vowels_index]\n                break\n            if vowels_index > vowels_len:\n                closest_vowel = \"\"\n                break\n            if vowels_index < vowels_len:\n                if vowels_index < vowels_lower_index:\n                    if vowels_index < vowels_upper_index:\n                        closest_vowel = vowels[vowels_index]\n                    else:\n                        closest_vowel = vowels[vowels_index]\n                else:\n                    if vowels\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpfkq5wjae.lua:30: <name> expected near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local vowels_len_2 = vowels_len * 2\n    local vowels_len_3 = vowels_len * 3\n    local vowels_len_4 = vowels_len * 4\n    local vowels_len_5 = vowels_len * 5\n    local vowels_len_6 = vowels_len * 6\n    local vowels_len_7 = vowels_len * 7\n    local vowels_len_8 = vowels_len * 8\n    local vowels_len_9 = vowels_len * 9\n    local vowels_len_10 = vowels_len * 10\n    local vowels_len_11 = vowels_len * 11\n    local vowels_len_12 = vowels_len * 12\n    local vowels_len_13 = vowels_len * 13\n    local vowels_len_14 = vowels_len * 14\n    local vowels_len_15 = vowels_len * 15\n    local vowels_len_16 = vowels_len * 16\n    local vowels_len_17 = vowels_len * 17\n    local vowels_len_18 = vowels_len * 18\n    local vowels_len_19 = vowels_len * 19\n    local vowels_len_20 = vowels_len * 20\n    local vowels_len_21 = vowels_len * 21\n    local vowels_len_22 = vowels_len * 22\n    local vowels_len_23 = vowels_len * 23\n    local vowels_len_24 = vowels_len * 24\n    local vowels_len_25 = vowels_len * 25\n    local vowels_len_26 = vowels_len * 26\n    local vowels_len_27 = vowels_len * 27\n    local vow\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp_kret9yw.lua:68: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_len = #vowels\n    local vowels_pos = {}\n    for i = 1, vowels_len do\n        vowels_pos[vowels[i]] = i\n    end\n    local vowels_pos_len = #vowels_pos\n    local vowels_pos_pos = {}\n    for i = 1, vowels_pos_len do\n        vowels_pos_pos[vowels_pos[i]] = i\n    end\n    local vowels_pos_pos_len = #vowels_pos_pos\n    local vowels_pos_pos_pos = {}\n    for i = 1, vowels_pos_pos_len do\n        vowels_pos_pos_pos[vowels_pos_pos[i]] = i\n    end\n    local vowels_pos_pos_pos_len = #vowels_pos_pos_pos\n    local vowels_pos_pos_pos_pos = {}\n    for i = 1, vowels_pos_pos_pos_len do\n        vowels_pos_pos_pos_pos[vowels_pos_pos_pos[i]] = i\n    end\n    local vowels_pos_pos_pos_pos_len = #vowels_pos_pos_pos_pos\n    local vowels_pos_pos_pos_pos_pos = {}\n    for i = 1, vowels_pos_pos_pos_pos_len do\n        vowels_pos_pos_pos_pos_pos[vowels_pos_pos_pos_pos[i]] = i\n    end\n    local vowels_pos_pos_pos_pos_pos_len = #vowels_pos_pos_pos_pos_pos\n    local vowels_pos_pos_pos_pos_pos_pos = {}\n    for i = 1, vowels_pos_pos_pos_pos_pos_len do\n        vowels_pos_pos_pos_pos_pos_pos[vowels_pos_pos_pos_pos_pos[i]] = i\n    end\n    local vowels_pos\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmphrts2_hu.lua:67: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907508
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local word_len = #word\n    local i = 1\n    local j = 1\n    local closest_vowel = \"\"\n    while i <= word_len and j <= word_len:\n        if word[i] == word[j]:\n            i = i + 1\n            j = j + 1\n        else:\n            if word[i] in vowels_upper:\n                if j - i < vowels_upper_len:\n                    closest_vowel = vowels_upper[j - i]\n                else:\n                    closest_vowel = \"\"\n                break\n            elif word[i] in vowels_lower:\n                if j - i < vowels_lower_len:\n                    closest_vowel = vowels_lower[j - i]\n                else:\n                    closest_vowel = \"\"\n                break\n            else:\n                i = i + 1\n    return closest_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpknm9i60m.lua:27: <name> expected near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_len = #vowels\n    local vowels_upper = vowels:upper()\n    local vowels_lower = vowels:lower()\n    local vowels_upper_len = vowels_upper:len()\n    local vowels_lower_len = vowels_lower:len()\n    local vowels_upper_index = 1\n    local vowels_lower_index = 1\n    local vowels_upper_index_found = false\n    local vowels_lower_index_found = false\n    local word_len = word:len()\n    local word_upper = word:upper()\n    local word_lower = word:lower()\n    local word_upper_len = word_upper:len()\n    local word_lower_len = word_lower:len()\n    local word_upper_index = 1\n    local word_lower_index = 1\n    local word_upper_index_found = false\n    local word_lower_index_found = false\n    local result = \"\"\n    while word_upper_index < word_len and not word_upper_index_found and not word_lower_index_found:\n        if word_upper[word_upper_index] == \"A\" or word_upper[word_upper_index] == \"E\" or word_upper[word_upper_index] == \"I\" or word_upper[word_upper_index] == \"O\" or word_upper[word_upper_index] == \"U\":\n            word_upper_index_found = true\n        else:\n            word_upper_index = word_upper_index + 1\n    while word_lower_index < word_len and not word_upper_index_found and not word_lower_index_found:\n        if word_lower[word_lower_index] == \"a\" or word_lower[word_lower_index] == \"e\" or word_lower[word_lower_index] == \"i\" or word_lower[word_lower_index] == \"o\" or word_lower[word_lower_index] == \"u\":\n            word_lower_index_found = true\n        else:\n            word_lower\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp8zsnkeg2.lua:37: <name> expected near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = \"AEIOU\"\n    local vowels_lower = \"aeiouAEIOU\"\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = #vowels\n    local word_len = #word\n    local i = 1\n    local j = 1\n    local k = 1\n    local closest_vowel = \"\"\n    while i <= word_len and j <= word_len and k <= word_len:\n        if word[i] == word[j] and word[j] == word[k]:\n            if word[i] == \"A\" or word[i] == \"a\":\n                if word[i] == word[j] and word[j] == word[k]:\n                    if word[i] == \"A\":\n                        if i == 1 or i == word_len - 1:\n                            closest_vowel = word[i]\n                            break\n                    else:\n                        if i == 1 or i == word_len - 1:\n                            closest_vowel = word[i]\n                            break\n                else:\n                    if word[i] == \"A\":\n                        if i == 1 or i == word_len - 1:\n                            closest_vowel = word[i]\n                            break\n                    else:\n                        if i == 1 or i == word_len - 1:\n                            closest_vowel = word[i]\n                            break\n            else:\n                if word[i] == \"E\" or word[i] == \"e\":\n                    if word[i] == word[j] and word[j] == word[k]:\n                        if word[i] == \"E\":\n                            if i == 1 or i == word_len - 1:\n                                closest_vowel = word[i]\n                                break\n                        else:\n                            if i == 1 or i == word_len - 1:\n                                closest_vowel = word[i]\n                                break\n                    else:\n                        if word[i] == \"E\":\n                            if i == 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp_2tddzgi.lua:28: <name> expected near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local vowels_len_1 = vowels_len - 1\n    local vowels_len_2 = vowels_len - 2\n    local vowels_len_3 = vowels_len - 3\n    local vowels_len_4 = vowels_len - 4\n    local vowels_len_5 = vowels_len - 5\n    local vowels_len_6 = vowels_len - 6\n    local vowels_len_7 = vowels_len - 7\n    local vowels_len_8 = vowels_len - 8\n    local vowels_len_9 = vowels_len - 9\n    local vowels_len_10 = vowels_len - 10\n    local vowels_len_11 = vowels_len - 11\n    local vowels_len_12 = vowels_len - 12\n    local vowels_len_13 = vowels_len - 13\n    local vowels_len_14 = vowels_len - 14\n    local vowels_len_15 = vowels_len - 15\n    local vowels_len_16 = vowels_len - 16\n    local vowels_len_17 = vowels_len - 17\n    local vowels_len_18 = vowels_len - 18\n    local vowels_len_19 = vowels_len - 19\n    local vowels_len_20 = vowels_len - 20\n    local vowels_len_21 = vowels_len - 21\n    local vowels_len_22 = vowels_len - 22\n    local vowels_len_23 = vowels_len - 23\n    local vowels_len_24 = vowels_len - 24\n    local vowels_len_25 = vowels_len - 25\n    local vowels_len_26 = vowels_len - 26\n    local vow\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpuqgxczyv.lua:68: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = #vowels\n    local vowels_upper_index = 1\n    local vowels_lower_index = 1\n    local vowels_index = 1\n    local i = 1\n    while i <= #word do\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \".\" then\n            i = i + 1\n            continue\n        if word[i] == \",\" then\n            i = i + 1\n            continue\n        if word[i] == \"-\" then\n            i = i + 1\n            continue\n        if word[i] == \"\\\"\" then\n            i = i + 1\n            continue\n        if word[i] == \"'\" then\n            i = i + 1\n            continue\n        if word[i] == \"!\" then\n            i = i + 1\n            continue\n        if word[i] == \"?\" then\n            i = i + 1\n            continue\n        if word[i] == \"(\" then\n            i = i + 1\n            continue\n        if word[i] == \")\" then\n            i = i + 1\n            continue\n        if word[i] == \"{\" then\n            i = i + 1\n            continue\n        if word[i] == \"}\" then\n            i = i + 1\n            continue\n        if word[i] == \";\" then\n            i = i + 1\n            continue\n        if word[i] == \":\" then\n            i = i + 1\n            continue\n        if word[i] == \";\" then\n            i = i + 1\n            continue\n        if word[i] == \";\" then\n            i = i + 1\n            continue\n        if word[i] == \";\" then\n            i = i + 1\n            continue\n        if word[i] == \";\" then\n            i = i + 1\n            continue\n        if word[\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpz77o_rj2.lua:30: syntax error near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n  local vowels = \"aeiouAEIOU\"\n  local vowels_upper = vowels.upper()\n  local vowels_lower = vowels.lower()\n  local vowels_upper_len = #vowels_upper\n  local vowels_lower_len = #vowels_lower\n  local vowels_len = #vowels\n  local word_len = #word\n  local i = 1\n  local j = 1\n  local k = 1\n  local found = false\n  local closest_vowel = \"\"\n  while i <= word_len and not found do\n    if word[i] == \" \" then\n      i = i + 1\n      continue\n    if word[i] == \".\" then\n      i = i + 1\n      continue\n    if word[i] == \",\" then\n      i = i + 1\n      continue\n    if word[i] == \"-\" then\n      i = i + 1\n      continue\n    if word[i] == \"\\\"\" then\n      i = i + 1\n      continue\n    if word[i] == \"'\" then\n      i = i + 1\n      continue\n    if word[i] == \"!\" then\n      i = i + 1\n      continue\n    if word[i] == \"?\" then\n      i = i + 1\n      continue\n    if word[i] == \";\" then\n      i = i + 1\n      continue\n    if word[i] == \":\" then\n      i = i + 1\n      continue\n    if word[i] == \";\" then\n      i = i + 1\n      continue\n    if word[i] == \")\" then\n      i = i + 1\n      continue\n    if word[i] == \"(\" then\n      i = i + 1\n      continue\n    if word[i] == \"]\" then\n      i = i + 1\n      continue\n    if word[i] == \"[\" then\n      i = i + 1\n      continue\n    if word[i] == \"} then\n      i = i + 1\n      continue\n    if word[i] == \"{\" then\n      i = i + 1\n      continue\n    if word[i] == \"|\" then\n      i =\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmprutr8hpi.lua:32: syntax error near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local vowels_len_2 = vowels_len * 2\n    local i = 1\n    local j = 1\n    local k = 1\n    local word_len = #word\n    while i <= word_len - 1 do\n        if word[i] == word[i + 1] then\n            if k == 1 then\n                return vowels_upper[j]\n            elseif k == 2 then\n                return vowels_lower[j]\n            elseif k == 3 then\n                return vowels_upper[j]\n            elseif k == 4 then\n                return vowels_lower[j]\n            elseif k == 5 then\n                return vowels_upper[j]\n            elseif k == 6 then\n                return vowels_lower[j]\n            elseif k == 7 then\n                return vowels_upper[j]\n            elseif k == 8 then\n                return vowels_lower[j]\n            elseif k == 9 then\n                return vowels_upper[j]\n            elseif k == 10 then\n                return vowels_lower[j]\n            elseif k == 11 then\n                return vowels_upper[j]\n            elseif k == 12 then\n                return vowels_lower[j]\n            elseif k == 13 then\n                return vowels_upper[j]\n            elseif k == 14 then\n                return vowels_lower[j]\n            elseif k == 15 then\n                return vowels_upper[j]\n            elseif k == 16 then\n                return vowels_lower[j]\n            elseif k == 17 then\n                return vowels_upper[j]\n            elseif k == 18 then\n                return vowels_lower[j]\n            elseif k == 19 then\n                return vowels_upper[j]\n            elseif k == 20 then\n                \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpzw8boy2e.lua:88: 'end' expected (to close 'if' at line 29) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_len = #vowels\n    local vowels_count = 0\n    local i = 0\n    local j = 0\n    local k = 0\n    local word_len = #word\n    local word_count = 0\n    local word_vowels_count = 0\n    local word_vowels_len = 0\n    local word_vowels = \"\"\n    local word_vowels_index = 0\n    local word_vowels_index_count = 0\n    local word_vowels_index_len = 0\n    local word_vowels_index_index = 0\n    local word_vowels_index_index_count = 0\n    local word_vowels_index_index_len = 0\n    local word_vowels_index_index_index = 0\n    local word_vowels_index_index_index_count = 0\n    local word_vowels_index_index_index_len = 0\n    local word_vowels_index_index_index_index = 0\n    local word_vowels_index_index_index_index_count = 0\n    local word_vowels_index_index_index_index_len = 0\n    local word_vowels_index_index_index_index_index = 0\n    local word_vowels_index_index_index_index_index_count = 0\n    local word_vowels_index_index_index_index_index_len = 0\n    local word_vowels_index_index_index_index_index_index = 0\n    local word_vowels_index_index_index_index_index_index_count = 0\n    local word_vowels_index_index_index_index_index_index_len = 0\n    local word_vowels_index_index_index_index_index_index_index = 0\n    local word_vowels_index_index_index_index_index_index_index_count = 0\n    local word_vowels_index_index_index_index_index_index_index_len = 0\n    local\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpwzmb0le6.lua:68: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local vowels_upper_index = 1\n    local vowels_lower_index = 1\n    local vowels_index = 1\n    local word_len = #word\n    local word_index = 1\n    local closest_vowel = \"\"\n    while word_index <= word_len do\n        if word_index == 1 then\n            if word[word_index] == word[word_index + 1] then\n                closest_vowel = word[word_index]\n                break\n            end\n        else\n            if word[word_index] == word[word_index - 1] then\n                closest_vowel = word[word_index]\n                break\n            end\n        end\n        word_index = word_index + 1\n    end\n    while vowels_index <= vowels_len do\n        if vowels_index == 1 then\n            if vowels_upper[vowels_index] == word[word_index] then\n                closest_vowel = vowels_upper[vowels_index]\n                break\n            end\n        else\n            if vowels_lower[vowels_index] == word[word_index] then\n                closest_vowel = vowels_lower[vowels_index]\n                break\n            end\n        end\n        vowels_index = vowels_index + 1\n    end\n    return closest_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpll7ulh5s.lua:17: bad argument #1 to 'upper' (string expected, got no value)\nstack traceback:\n\t/tmp/tmpll7ulh5s.lua:17: in local 'candidate'\n\t/tmp/tmpll7ulh5s.lua:62: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_len = #vowels\n    local vowels_upper = vowels:upper()\n    local vowels_lower = vowels:lower()\n    local vowels_upper_len = vowels_upper:len()\n    local vowels_lower_len = vowels_lower:len()\n    local vowels_upper_len = vowels_upper:len()\n    local vowels_lower_len = vowels_lower:len()\n    local vowels_upper_len = vowels_upper:len()\n    local vowels_lower_len = vowels_lower:len()\n    local vowels_upper_len = vowels_upper:len()\n    local vowels_lower_len = vowels_lower:len()\n    local vowels_upper_len = vowels_upper:len()\n    local vowels_lower_len = vowels_lower:len()\n    local vowels_upper_len = vowels_upper:len()\n    local vowels_lower_len = vowels_lower:len()\n    local vowels_upper_len = vowels_upper:len()\n    local vowels_lower_len = vowels_lower:len()\n    local vowels_upper_len = vowels_upper:len()\n    local vowels_lower_len = vowels_lower:len()\n    local vowels_upper_len = vowels_upper:len()\n    local vowels_lower_len = vowels_lower:len()\n    local vowels_upper_len = vowels_upper:len()\n    local vowels_lower_len = vowels_lower:len()\n    local vowels_upper_len = vowels_upper:len()\n    local vowels_lower_len = vowels_lower:len()\n    local vowels_upper_len = vowels_upper:len()\n    local vowels_lower_len = vowels_lower:len()\n    local vowels_upper_len = vowels_upper:len()\n    local vowels_lower_len = vowels_lower:len()\n    local vowels_upper_len = vowels_upper:len()\n    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpraba7i9j.lua:67: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907507
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_len = #vowels\n    local vowels_count = 0\n    local i = 1\n    while i <= #word do\n        if word[i] == vowels[vowels_count] then\n            vowels_count = vowels_count + 1\n            if vowels_count == vowels_len then\n                return vowels[vowels_count]\n            end\n        end\n        i = i + 1\n    end\n    return \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsme_qea4.lua:35: expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpsme_qea4.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_len = #vowels\n    local vowels_count = 0\n    local consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    local consonants_len = #consonants\n    local consonants_count = 0\n    local i = 1\n    local j = 1\n    local k = 1\n    local l = 1\n    local m = 1\n    local n = 1\n    local p = 1\n    local q = 1\n    local r = 1\n    local s = 1\n    local t = 1\n    local u = 1\n    local v = 1\n    local w = 1\n    local x = 1\n    local y = 1\n    local z = 1\n    local word_len = #word\n    while i <= word_len - 1 do\n        if word[i] == vowels[k] then\n            k = k + 1\n            if k == vowels_len then\n                k = 0\n            end\n            vowels_count = vowels_count + 1\n        elseif word[i] == consonants[l] then\n            l = l + 1\n            if l == consonants_len then\n                l = 0\n            end\n            consonants_count = consonants_count + 1\n        elseif word[i] == vowels[m] then\n            m = m + 1\n            if m == vowels_len then\n                m = 0\n            end\n            vowels_count = vowels_count + 1\n        elseif word[i] == vowels[n] then\n            n = n + 1\n            if n == vowels_len then\n                n = 0\n            end\n            vowels_count = vowels_count + 1\n        elseif word[i] == vowels[p] then\n            p = p + 1\n            if p == vowels_len then\n                p = 0\n            end\n            vowels_count = vowels_count + 1\n        elseif word[i] == vowels[q] then\n            q = q + 1\n            if q == vowels_len\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmphwx31wx2.lua:74: 'then' expected near 'lu'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local i = 1\n    local j = 1\n    local result = \"\"\n    while i <= #word do\n        if word[i] == word[i+1] then\n            if j == 1 then\n                result = word[i]\n            elseif j == vowels_len then\n                result = word[i]\n            elseif j == vowels_upper_len then\n                result = vowels_upper[j]\n            elseif j == vowels_lower_len then\n                result = vowels_lower[j]\n            else\n                result = \"\"\n            end\n            return result\n        elseif word[i] == \" \" then\n            j = 1\n        elseif word[i] == \"-\" then\n            j = 1\n        elseif word[i] == \".\" then\n            j = 1\n        else\n            j = j + 1\n        end\n        i = i + 1\n    end\n    return \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2e5uqbfl.lua:17: bad argument #1 to 'upper' (string expected, got no value)\nstack traceback:\n\t/tmp/tmp2e5uqbfl.lua:17: in local 'candidate'\n\t/tmp/tmp2e5uqbfl.lua:56: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_lower = vowels.lower()\n    local vowels_upper = vowels.upper()\n    local vowels_lower_len = #vowels_lower\n    local vowels_upper_len = #vowels_upper\n    local vowels_len = vowels_lower_len + vowels_upper_len\n    local vowels_len_lower = vowels_lower_len\n    local vowels_len_upper = vowels_upper_len\n    local vowels_len_lower_upper = vowels_len_lower + vowels_len_upper\n    local vowels_len_lower_upper_len = vowels_len_lower_upper\n    local vowels_len_lower_upper_len_lower = vowels_len_lower_upper - vowels_len_lower\n    local vowels_len_lower_upper_len_upper = vowels_len_lower_upper - vowels_len_upper\n    local vowels_len_lower_upper_len_lower_upper = vowels_len_lower_upper - vowels_len_lower_upper\n    local vowels_len_lower_upper_len_lower_upper_len = vowels_len_lower_upper_len - vowels_len_lower_upper\n    local vowels_len_lower_upper_len_lower_upper_len_lower = vowels_len_lower_upper_len - vowels_len_lower_upper\n    local vowels_len_lower_upper_len_lower_upper_len_upper = vowels_len_lower_upper_len - vowels_len_lower_upper\n    local vowels_len_lower_upper_len_lower_upper_len_lower_upper = vowels_len_lower_upper_len - vowels_len_lower_upper\n    local vowels_len_lower_upper_len_lower_upper_len_lower_upper_len = vowels_len_lower_upper_len - vowels_len_lower_upper\n    local vowels_len_lower_upper_len_lower_upper_len_lower_upper_len_lower = vowels_len_lower_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp5azip9jh.lua:54: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local vowels_len_2 = vowels_len / 2\n    local vowels_len_3 = vowels_len / 3\n    local vowels_len_4 = vowels_len / 4\n    local vowels_len_5 = vowels_len / 5\n    local vowels_len_6 = vowels_len / 6\n    local vowels_len_7 = vowels_len / 7\n    local vowels_len_8 = vowels_len / 8\n    local vowels_len_9 = vowels_len / 9\n    local vowels_len_10 = vowels_len / 10\n    local vowels_len_11 = vowels_len / 11\n    local vowels_len_12 = vowels_len / 12\n    local vowels_len_13 = vowels_len / 13\n    local vowels_len_14 = vowels_len / 14\n    local vowels_len_15 = vowels_len / 15\n    local vowels_len_16 = vowels_len / 16\n    local vowels_len_17 = vowels_len / 17\n    local vowels_len_18 = vowels_len / 18\n    local vowels_len_19 = vowels_len / 19\n    local vowels_len_20 = vowels_len / 20\n    local vowels_len_21 = vowels_len / 21\n    local vowels_len_22 = vowels_len / 22\n    local vowels_len_23 = vowels_len / 23\n    local vowels_len_24 = vowels_len / 24\n    local vowels_len_25 = vowels_len / 25\n    local vowels_len_26 = vowels_len / 26\n    local vowels_len_27 = vowels_len / 27\n    local vow\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpjv8zw9dd.lua:68: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n  local vowels = \"aeiouAEIOU\"\n  local vowels_upper = vowels.upper()\n  local vowels_lower = vowels.lower()\n  local vowels_upper_len = #vowels_upper\n  local vowels_lower_len = #vowels_lower\n  local vowels_len = #vowels\n  local word_len = #word\n  local i = 1\n  local j = 1\n  local k = 1\n  local closest_vowel = \"\"\n  while i <= word_len - 1 do\n    if word[i] == word[i+1] then\n      if k <= vowels_len - 1 then\n        if word[i] == vowels_upper[k] then\n          k = k + 1\n          if k == vowels_upper_len then\n            closest_vowel = vowels_upper[k]\n            break\n          elseif k == vowels_lower_len then\n            closest_vowel = vowels_lower[k]\n            break\n          else\n            closest_vowel = vowels[k]\n            break\n        elseif word[i] == vowels_lower[k] then\n          k = k + 1\n          if k == vowels_lower_len then\n            closest_vowel = vowels_lower[k]\n            break\n          else\n            closest_vowel = vowels[k]\n            break\n        end\n      else\n        closest_vowel = vowels[k]\n        break\n      end\n    elseif word[i] == word[i+1] then\n      if word[i] == vowels_upper[k] then\n        k = k + 1\n        if k == vowels_upper_len then\n          closest_vowel = vowels_upper[k]\n          break\n        elseif k == vowels_lower_len then\n          closest_vowel = vowels_lower[k]\n          break\n        else\n          closest_vowel = vowels[k]\n          break\n        end\n      elseif word[i] == vowels_lower\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpk64o080x.lua:41: 'end' expected (to close 'if' at line 32) near 'elseif'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local vowels_len_2 = vowels_len * 2\n    local vowels_len_3 = vowels_len * 3\n    local vowels_len_4 = vowels_len * 4\n    local vowels_len_5 = vowels_len * 5\n    local vowels_len_6 = vowels_len * 6\n    local vowels_len_7 = vowels_len * 7\n    local vowels_len_8 = vowels_len * 8\n    local vowels_len_9 = vowels_len * 9\n    local vowels_len_10 = vowels_len * 10\n    local vowels_len_11 = vowels_len * 11\n    local vowels_len_12 = vowels_len * 12\n    local vowels_len_13 = vowels_len * 13\n    local vowels_len_14 = vowels_len * 14\n    local vowels_len_15 = vowels_len * 15\n    local vowels_len_16 = vowels_len * 16\n    local vowels_len_17 = vowels_len * 17\n    local vowels_len_18 = vowels_len * 18\n    local vowels_len_19 = vowels_len * 19\n    local vowels_len_20 = vowels_len * 20\n    local vowels_len_21 = vowels_len * 21\n    local vowels_len_22 = vowels_len * 22\n    local vowels_len_23 = vowels_len * 23\n    local vowels_len_24 = vowels_len * 24\n    local vowels_len_25 = vowels_len * 25\n    local vowels_len_26 = vowels_len * 26\n    local vowels_len_27 = vowels_len * 27\n    local vow\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp_kret9yw.lua:68: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local vowels_upper_index = 1\n    local vowels_lower_index = 1\n    local vowels_index = 1\n    local i = 1\n    while i <= #word do\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \" \" then\n            i = i + 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp1sxtokw9.lua:30: syntax error near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local vowels_len_2 = vowels_len / 2\n    local vowels_len_3 = vowels_len / 3\n    local vowels_len_4 = vowels_len / 4\n    local vowels_len_5 = vowels_len / 5\n    local vowels_len_6 = vowels_len / 6\n    local vowels_len_7 = vowels_len / 7\n    local vowels_len_8 = vowels_len / 8\n    local vowels_len_9 = vowels_len / 9\n    local vowels_len_10 = vowels_len / 10\n    local vowels_len_11 = vowels_len / 11\n    local vowels_len_12 = vowels_len / 12\n    local vowels_len_13 = vowels_len / 13\n    local vowels_len_14 = vowels_len / 14\n    local vowels_len_15 = vowels_len / 15\n    local vowels_len_16 = vowels_len / 16\n    local vowels_len_17 = vowels_len / 17\n    local vowels_len_18 = vowels_len / 18\n    local vowels_len_19 = vowels_len / 19\n    local vowels_len_20 = vowels_len / 20\n    local vowels_len_21 = vowels_len / 21\n    local vowels_len_22 = vowels_len / 22\n    local vowels_len_23 = vowels_len / 23\n    local vowels_len_24 = vowels_len / 24\n    local vowels_len_25 = vowels_len / 25\n    local vowels_len_26 = vowels_len / 26\n    local vowels_len_27 = vowels_len / 27\n    local vow\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpjv8zw9dd.lua:68: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local vowels_len_2 = vowels_len / 2\n    local vowels_len_3 = vowels_len / 3\n    local vowels_len_4 = vowels_len / 4\n    local vowels_len_5 = vowels_len / 5\n    local vowels_len_6 = vowels_len / 6\n    local vowels_len_7 = vowels_len / 7\n    local vowels_len_8 = vowels_len / 8\n    local vowels_len_9 = vowels_len / 9\n    local vowels_len_10 = vowels_len / 10\n    local vowels_len_11 = vowels_len / 11\n    local vowels_len_12 = vowels_len / 12\n    local vowels_len_13 = vowels_len / 13\n    local vowels_len_14 = vowels_len / 14\n    local vowels_len_15 = vowels_len / 15\n    local vowels_len_16 = vowels_len / 16\n    local vowels_len_17 = vowels_len / 17\n    local vowels_len_18 = vowels_len / 18\n    local vowels_len_19 = vowels_len / 19\n    local vowels_len_20 = vowels_len / 20\n    local vowels_len_21 = vowels_len / 21\n    local vowels_len_22 = vowels_len / 22\n    local vowels_len_23 = vowels_len / 23\n    local vowels_len_24 = vowels_len / 24\n    local vowels_len_25 = vowels_len / 25\n    local vowels_len_26 = vowels_len / 26\n    local vowels_len_27 = vowels_len / 27\n    local vow\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpjv8zw9dd.lua:68: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n  local vowels = \"aeiouAEIOU\"\n  local vowels_upper = vowels.upper()\n  local vowels_lower = vowels.lower()\n  local vowels_upper_len = #vowels_upper\n  local vowels_lower_len = #vowels_lower\n  local vowels_len = vowels_upper_len + vowels_lower_len\n  local word_len = #word\n  local i = 1\n  while i <= word_len - 1\n    if word[i] == word[i + 1] and (i + 1) < word_len and (word[i] == \"A\" or word[i] == \"E\" or word[i] == \"I\" or word[i] == \"O\" or word[i] == \"U\")\n      return vowels[word[i] == \"A\" and vowels_upper_len or vowels_lower_len]\n    i = i + 1\n  end\n  return \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp4n_e1581.lua:25: 'do' expected near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_len = #vowels\n    local vowels_count = 0\n    local i = 1\n    while i <= #word do\n        if word[i] == vowels[vowels_count] then\n            vowels_count = vowels_count + 1\n            if vowels_count == vowels_len then\n                return vowels[vowels_count]\n            end\n        elseif vowels_count > 0 then\n            vowels_count = vowels_count - 1\n        end\n        i = i + 1\n    end\n    return \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_9les9d8.lua:37: expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp_9les9d8.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = #vowels\n    local vowels_upper_index = 1\n    local vowels_lower_index = 1\n    local vowels_index = 1\n    local word_len = #word\n    local i = 1\n    local j = 1\n    local k = 1\n    local closest_vowel = \"\"\n    while i <= word_len - 1 do\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \"-\" then\n            i = i + 1\n            continue\n        if word[i] == \".\" then\n            i = i + 1\n            continue\n        if word[i] == \",\" then\n            i = i + 1\n            continue\n        if word[i] == \"!\" then\n            i = i + 1\n            continue\n        if word[i] == \"?\" then\n            i = i + 1\n            continue\n        if word[i] == \"\\\"\" then\n            i = i + 1\n            continue\n        if word[i] == \"'\" then\n            i = i + 1\n            continue\n        if word[i] == \"(\" then\n            i = i + 1\n            continue\n        if word[i] == \")\" then\n            i = i + 1\n            continue\n        if word[i] == \"{\" then\n            i = i + 1\n            continue\n        if word[i] == \"}\" then\n            i = i + 1\n            continue\n        if word[i] == \"&\" then\n            i = i + 1\n            continue\n        if word[i] == \"*\" then\n            i = i + 1\n            continue\n        if word[i] == \"+\" then\n            i = i + 1\n            continue\n        if word[i] == \";\" then\n            i = i + 1\n            continue\n        if word[i] == \":\" then\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp6p0q9fda.lua:34: syntax error near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_lower = vowels.lower()\n    local vowels_upper = vowels.upper()\n    local vowels_lower_len = #vowels_lower\n    local vowels_upper_len = #vowels_upper\n    local vowels_len = #vowels\n    local word_len = #word\n    local i = 1\n    local j = 1\n    local k = 1\n    local closest_vowel = \"\"\n    while i <= word_len - 1 and j <= word_len - 1 and k <= word_len - 1:\n        if word[k] == word[j] and word[k] != \" \":\n            j = j + 1\n            k = k + 1\n        elif word[k] == word[j] and word[k] == \" \":\n            j = j + 1\n            k = k + 1\n        elif word[k] == word[j] and word[k] == \" \" and word[j] == \" \":\n            j = j + 1\n            k = k + 1\n        elif word[k] == word[j] and word[k] == \" \" and word[j] != \" \":\n            j = j + 1\n            k = k + 1\n        elif word[k] == word[j] and word[k] != \" \":\n            j = j + 1\n            k = k + 1\n        elif word[k] == word[j] and word[k] != \" \" and word[j] == \" \":\n            j = j + 1\n            k = k + 1\n        elif word[k] == word[j] and word[k] != \" \" and word[j] != \" \":\n            j = j + 1\n            k = k + 1\n        elif word[k] == word[j] and word[k] == \" \" and word[j] != \" \":\n            j = j + 1\n            k = k + 1\n        elif word[k] == word[j] and word[k] != \" \" and word[j] == \" \":\n            j = j + 1\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpc7e2hoi1.lua:27: 'do' expected near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = #vowels\n    local word_len = #word\n    local i = 1\n    local j = 1\n    local k = 1\n    local closest_vowel = \"\"\n    while i <= word_len - 1 do\n        if word[i] == \" \" then\n            i = i + 1\n            continue\n        if word[i] == \"-\" then\n            i = i + 1\n            continue\n        if word[i] == \".\" then\n            i = i + 1\n            continue\n        if word[i] == \",\" then\n            i = i + 1\n            continue\n        if word[i] == \"!\" then\n            i = i + 1\n            continue\n        if word[i] == \"?\" then\n            i = i + 1\n            continue\n        if word[i] == \"\\\"\" then\n            i = i + 1\n            continue\n        if word[i] == \"'\" then\n            i = i + 1\n            continue\n        if word[i] == \"(\" then\n            i = i + 1\n            continue\n        if word[i] == \")\" then\n            i = i + 1\n            continue\n        if word[i] == \"{\" then\n            i = i + 1\n            continue\n        if word[i] == \"}\" then\n            i = i + 1\n            continue\n        if word[i] == \"&\" then\n            i = i + 1\n            continue\n        if word[i] == \"|\" then\n            i = i + 1\n            continue\n        if word[i] == \";\" then\n            i = i + 1\n            continue\n        if word[i] == \":\" then\n            i = i + 1\n            continue\n        if word[i] == \";\" then\n            i = i + 1\n            continue\n        if word[i] == \";\" then\n            i = i + 1\n            continue\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp22cylsnc.lua:31: syntax error near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = #vowels\n    local vowels_upper_index = 1\n    local vowels_lower_index = 1\n    local vowels_index = 1\n    local word_len = #word\n    local word_upper_index = 1\n    local word_lower_index = 1\n    local word_index = 1\n    local closest_vowel_index = 1\n    local closest_vowel_len = 0\n    local closest_vowel_upper_index = 1\n    local closest_vowel_lower_index = 1\n    local closest_vowel_upper_len = 0\n    local closest_vowel_lower_len = 0\n    local closest_vowel_len = 0\n    local closest_vowel_upper_index = 1\n    local closest_vowel_lower_index = 1\n    local closest_vowel_index = 1\n    local closest_vowel_upper_len = 0\n    local closest_vowel_lower_len = 0\n    local closest_vowel_len = 0\n    local closest_vowel_upper_index = 1\n    local closest_vowel_lower_index = 1\n    local closest_vowel_index = 1\n    local closest_vowel_upper_len = 0\n    local closest_vowel_lower_len = 0\n    local closest_vowel_len = 0\n    local closest_vowel_upper_index = 1\n    local closest_vowel_lower_index = 1\n    local closest_vowel_index = 1\n    local closest_vowel_upper_len = 0\n    local closest_vowel_lower_len = 0\n    local closest_vowel_len = 0\n    local closest_vowel_upper_index = 1\n    local closest_vowel_lower_index = 1\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpi6jqyy9n.lua:76: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = \"AEIOU\"\n    local vowels_lower = \"aeiouAEIOU\"\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = #vowels\n    local vowels_upper_index = 1\n    local vowels_lower_index = 1\n    local vowels_index = 1\n    local word_len = #word\n    local i\n    local j\n    local k\n    local word_upper_index\n    local word_lower_index\n    local word_index\n    local word_upper_len\n    local word_lower_len\n    local word_len\n    local word_upper_index\n    local word_lower_index\n    local word_index\n    local word_upper_len\n    local word_lower_len\n    local word_len\n    local word_upper_index\n    local word_lower_index\n    local word_index\n    local word_upper_len\n    local word_lower_len\n    local word_len\n    local word_upper_index\n    local word_lower_index\n    local word_index\n    local word_upper_len\n    local word_lower_len\n    local word_len\n    local word_upper_index\n    local word_lower_index\n    local word_index\n    local word_upper_len\n    local word_lower_len\n    local word_len\n    local word_upper_index\n    local word_lower_index\n    local word_index\n    local word_upper_len\n    local word_lower_len\n    local word_len\n    local word_upper_index\n    local word_lower_index\n    local word_index\n    local word_upper_len\n    local word_lower_len\n    local word_len\n    local word_upper_index\n    local word_lower_index\n    local word_index\n    local word_upper_len\n    local word_lower_len\n    local word_len\n    local word_upper_index\n    local word_lower_index\n    local word_index\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpcwu9asmj.lua:99: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n  local vowels = \"aeiouAEIOU\"\n  local vowels_upper = vowels.upper()\n  local vowels_lower = vowels.lower()\n  local vowels_upper_len = #vowels_upper\n  local vowels_lower_len = #vowels_lower\n  local vowels_len = vowels_upper_len + vowels_lower_len\n  local vowels_upper_index = 1\n  local vowels_lower_index = 1\n  local i = 1\n  while i <= #word do\n    if word[i] == vowels_upper[vowels_upper_index] then\n      vowels_upper_index = vowels_upper_index + 1\n      if vowels_upper_index == vowels_upper_len then\n        vowels_upper_index = 1\n      end\n    elseif word[i] == vowels_lower[vowels_lower_index] then\n      vowels_lower_index = vowels_lower_index + 1\n      if vowels_lower_index == vowels_lower_len then\n        vowels_lower_index = 1\n      end\n    elseif word[i] == vowels[vowels_index] then\n      vowels_index = vowels_index + 1\n      if vowels_index == vowels_len then\n        vowels_index = 1\n      end\n    elseif word[i] == vowels_upper[vowels_upper_index] then\n      vowels_upper_index = vowels_upper_index + 1\n      if vowels_upper_index == vowels_upper_len then\n        vowels_upper_index = 1\n      end\n    elseif word[i] == vowels_lower[vowels_lower_index] then\n      vowels_lower_index = vowels_lower_index + 1\n      if vowels_lower_index == vowels_lower_len then\n        vowels_lower_index = 1\n      end\n    elseif word[i] == vowels[vowels_index] then\n      vowels_index = vowels_index + 1\n      if vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpid7gtdm1.lua:54: 'then' expected near 'lu'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_len = #vowels\n    local vowels_pos = {}\n    for i=1,vowels_len do\n        vowels_pos[vowels[i]] = i\n    end\n    local consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    local consonants_len = #consonants\n    local consonants_pos = {}\n    for i=1,consonants_len do\n        consonants_pos[consonants[i]] = i\n    end\n    local right_side = \"\"\n    local right_side_len = 0\n    for i=1,#word do\n        if word[i] == \" \" then\n            right_side_len = right_side_len + 1\n        else\n            if right_side_len > 0 then\n                if right_side_len == 1 then\n                    if word[i] == \"a\" or word[i] == \"e\" or word[i] == \"i\" or word[i] == \"o\" or word[i] == \"u\" then\n                        return word[i]\n                    end\n                elseif right_side_len == 2 then\n                    if word[i] == \"a\" or word[i] == \"e\" or word[i] == \"i\" or word[i] == \"o\" or word[i] == \"u\" then\n                        return word[i]\n                    end\n                    if word[i] == \"A\" or word[i] == \"E\" or word[i] == \"I\" or word[i] == \"O\" or word[i] == \"U\" then\n                        return word[i]\n                    end\n                elseif right_side_len == 3 then\n                    if word[i] == \"a\" or word[i] == \"e\" or word[i] == \"i\" or word[i] == \"o\" or word[i] == \"u\" then\n                        return word[i]\n                    end\n                    if word[i] == \"A\" or word[i] == \"E\" or word[\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpc9ixxu3v.lua:51: ']' expected near '='\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = \"AEIOU\"\n    local vowels_lower = \"aeiou\"\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = #vowels\n    local word_len = #word\n    local i = 1\n    local j = 1\n    local k = 1\n    local result = \"\"\n    while i <= word_len - 1 do\n        if word[i] == word[i+1] then\n            if k == 1 then\n                result = vowels[k]\n                k = k + 1\n            elseif k > 1 and k <= vowels_len and vowels[k] == vowels[k-1] then\n                result = vowels[k]\n                k = k + 1\n            elseif k > 1 and k <= vowels_len and vowels[k] == vowels_upper[k-1] then\n                result = vowels_upper[k]\n                k = k + 1\n            elseif k > 1 and k <= vowels_len and vowels[k] == vowels_lower[k-1] then\n                result = vowels_lower[k]\n                k = k + 1\n            elseif k > 1 and k <= vowels_len and vowels[k] == vowels_upper_len[k-1] then\n                result = vowels_upper_len[k]\n                k = k + 1\n            elseif k > 1 and k <= vowels_len and vowels[k] == vowels_lower_len[k-1] then\n                result = vowels_lower_len[k]\n                k = k + 1\n            elseif k > 1 and k <= vowels_len and vowels[k] == vowels_len[k-1] then\n                result = vowels_len[k]\n                k = k + 1\n            elseif k > 1 and k <= vowels_len and vowels[k] == vowels_len[k-1] then\n                result = vowels_len[k]\n                k = k + 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpy3p29a5o.lua:72: 'end' expected (to close 'if' at line 29) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local word_len = #word\n    local i = 1\n    local j = 1\n    local k = 1\n    local closest_vowel = \"\"\n    while i <= word_len - 1 do\n        if word[i] == word[i + 1] then\n            if k == 1 then\n                closest_vowel = vowels[k]\n                k = k + 1\n            elseif k > vowels_len then\n                closest_vowel = vowels[k - 1]\n            elseif word[i] == vowels_upper[k - 1] then\n                closest_vowel = vowels_upper[k - 1]\n            elseif word[i] == vowels_lower[k - 1] then\n                closest_vowel = vowels_lower[k - 1]\n            else\n                closest_vowel = vowels[k - 1]\n            end\n            k = k + 1\n        elseif word[i] == word[i - 1] then\n            if k == 1 then\n                closest_vowel = vowels[k]\n                k = k + 1\n            elseif k > vowels_len then\n                closest_vowel = vowels[k - 1]\n            elseif word[i] == vowels_upper[k - 1] then\n                closest_vowel = vowels_upper[k - 1]\n            elseif word[i] == vowels_lower[k - 1] then\n                closest_vowel = vowels_lower[k - 1]\n            else\n                closest_vowel = vowels[k - 1]\n            end\n            k = k + 1\n        else\n            k = 1\n        end\n        i =\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpns959wmm.lua:60: unexpected symbol near '='\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_len = #vowels\n    local vowels_pos = {}\n    for i=1,vowels_len do\n        vowels_pos[vowels[i]] = i\n    end\n    local vowels_pos_len = #vowels_pos\n    local vowels_pos_pos = {}\n    for i=1,vowels_pos_len do\n        vowels_pos_pos[vowels_pos[i]] = i\n    end\n    local vowels_pos_pos_len = #vowels_pos_pos\n    local right_pos = {}\n    for i=1,vowels_pos_pos_len do\n        right_pos[vowels_pos_pos[i]] = i\n    end\n    local right_pos_len = #right_pos\n    local right_pos_pos = {}\n    for i=1,right_pos_len do\n        right_pos_pos[right_pos[i]] = i\n    end\n    local right_pos_pos_len = #right_pos_pos\n    local right_pos_pos_pos = {}\n    for i=1,right_pos_pos_len do\n        right_pos_pos_pos[right_pos_pos[i]] = i\n    end\n    local right_pos_pos_pos_len = #right_pos_pos_pos\n    local right_pos_pos_pos_pos = {}\n    for i=1,right_pos_pos_pos_len do\n        right_pos_pos_pos_pos[right_pos_pos_pos[i]] = i\n    end\n    local right_pos_pos_pos_pos_len = #right_pos_pos_pos_pos\n    local right_pos_pos_pos_pos_pos = {}\n    for i=1,right_pos_pos_pos_pos_len do\n        right_pos_pos_pos_pos_pos[right_pos_pos_pos_pos[i]] = i\n    end\n    local right_pos_pos_pos_pos_pos_len = #right_pos_pos\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpuqgkivva.lua:72: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local vowels_upper_index = 1\n    local vowels_lower_index = 1\n    local vowels_index = 1\n    local i = 1\n    local j = 1\n    local k = 1\n    local word_len = #word\n    local word_upper_len = #word.upper()\n    local word_lower_len = #word.lower()\n    local word_upper_index = 1\n    local word_lower_index = 1\n    local word_index = 1\n    local closest_vowel = \"\"\n    while i <= word_len and j <= word_len and k <= word_len:\n        if word_index == word_len:\n            break\n        if word_index == word_upper_len:\n            word_index = 1\n            word_upper_index = 1\n            word_upper_len = #word.upper()\n        if word_index == word_lower_len:\n            word_index = 1\n            word_lower_index = 1\n            word_lower_len = #word.lower()\n        if word[word_index] == \" \":\n            word_index = word_index + 1\n            continue\n        if word[word_index] == \".\":\n            word_index = word_index + 1\n            continue\n        if word[word_index] == \",\":\n            word_index = word_index + 1\n            continue\n        if word[word_index] == \"'\":\n            word_index = word_index + 1\n            continue\n        if word[word_index] == \":\":\n            word_index = word_index + 1\n            continue\n        if word[word_index] == \";\":\n            word_index = word_index + 1\n            continue\n        if word[word_index] == \"!\":\n            word\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpijn01bu7.lua:36: <name> expected near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = #vowels\n    local word_len = #word\n    local i = 1\n    local j = 1\n    local k = 1\n    local word_upper = word.upper()\n    local word_lower = word.lower()\n    local word_upper_len = #word_upper\n    local word_lower_len = #word_lower\n    local word_len = #word\n    local word_upper_vowels_len = 0\n    local word_lower_vowels_len = 0\n    local word_vowels_len = 0\n    local word_upper_vowels = \"\"\n    local word_lower_vowels = \"\"\n    local word_vowels = \"\"\n    local word_upper_vowels_len = 0\n    local word_lower_vowels_len = 0\n    local word_vowels_len = 0\n    local word_upper_vowels_len = 0\n    local word_lower_vowels_len = 0\n    local word_vowels_len = 0\n    local word_upper_vowels = \"\"\n    local word_lower_vowels = \"\"\n    local word_vowels = \"\"\n    local word_upper_vowels_len = 0\n    local word_lower_vowels_len = 0\n    local word_vowels_len = 0\n    local word_upper_vowels_len = 0\n    local word_lower_vowels_len = 0\n    local word_vowels_len = 0\n    local word_upper_vowels = \"\"\n    local word_lower_vowels = \"\"\n    local word_vowels = \"\"\n    local word_upper_vowels_len = 0\n    local word_lower_vowels_len = 0\n    local word_vowels_len = 0\n    local\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpffj56uja.lua:78: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = #vowels\n    local word_len = #word\n    local i = 1\n    local j = 1\n    local k = 1\n    local closest_vowel = \"\"\n    while i <= word_len - 1 and j <= word_len - 1 and k <= word_len - 1:\n        if word[k] == word[j] and word[k] != \" \" and word[k] != \".\" and word[k] != \",\" and word[k] != \"!\" and word[k] != \"?\" and word[k] != \"-\" and word[k] != \"_\":\n            if word[i] == \" \" or word[i] == \".\" or word[i] == \",\" or word[i] == \"!\" or word[i] == \"?\" or word[i] == \"-\" or word[i] == \"_\":\n                i = i + 1\n                continue\n            if word[i] == word[k]:\n                i = i + 1\n                k = k + 1\n                continue\n            if word[k] == vowels_upper[0]:\n                k = k + 1\n                continue\n            if word[k] == vowels_lower[0]:\n                k = k + 1\n                continue\n            if word[k] == vowels_upper[vowels_upper_len - 1]:\n                k = k + 1\n                continue\n            if word[k] == vowels_lower[vowels_lower_len - 1]:\n                k = k + 1\n                continue\n            if word[i] == vowels_upper[0]:\n                i = i + 1\n                continue\n            if word[i] == vowels_lower[0]:\n                i = i + 1\n                continue\n            if word[i] == vowels_upper[vowels_upper_len - 1]:\n                i = i + 1\n                continue\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp_gsr7wd9.lua:27: 'do' expected near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_len = #vowels\n    local vowels_count = 0\n    local vowels_index = 0\n    local word_len = #word\n    local word_index = 1\n    local closest_vowel_index = 0\n    local closest_vowel_index_prev = 0\n    local closest_vowel_index_next = 0\n    local closest_vowel_index_prev_prev = 0\n    local closest_vowel_index_next_next = 0\n    local closest_vowel_index_prev_prev_prev = 0\n    local closest_vowel_index_next_next_next = 0\n    local closest_vowel_index_prev_prev_prev_prev = 0\n    local closest_vowel_index_next_next_next_next = 0\n    local closest_vowel_index_prev_prev_prev_prev_prev = 0\n    local closest_vowel_index_next_next_next_next_next = 0\n    local closest_vowel_index_prev_prev_prev_prev_prev_prev = 0\n    local closest_vowel_index_next_next_next_next_next_next = 0\n    local closest_vowel_index_prev_prev_prev_prev_prev_prev_prev = 0\n    local closest_vowel_index_next_next_next_next_next_next_next = 0\n    local closest_vowel_index_prev_prev_prev_prev_prev_prev_prev_prev = 0\n    local closest_vowel_index_next_next_next_next_next_next_next_next = 0\n    local closest_vowel_index_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0\n    local closest_vowel_index_next_next_next_next_next_next_next_next_next = 0\n    local closest_vowel_index_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0\n    local closest_vowel_index_next\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp0_y2fixm.lua:62: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = #vowels\n    local word_len = #word\n    local i = 0\n    local j = 0\n    local k = 0\n    local word_upper = word.upper()\n    local word_lower = word.lower()\n    local word_upper_len = #word_upper\n    local word_lower_len = #word_lower\n    local word_len = #word\n    local closest_vowel = \"\"\n    local closest_vowel_index = 0\n    local closest_vowel_len = 0\n    local closest_vowel_index_upper = 0\n    local closest_vowel_index_lower = 0\n    local closest_vowel_len_upper = 0\n    local closest_vowel_len_lower = 0\n    local closest_vowel_index_upper_len = 0\n    local closest_vowel_index_lower_len = 0\n    local closest_vowel_len_upper_len = 0\n    local closest_vowel_len_lower_len = 0\n    local closest_vowel_index_upper_len_len = 0\n    local closest_vowel_index_lower_len_len = 0\n    local closest_vowel_len_upper_len_len = 0\n    local closest_vowel_len_lower_len_len = 0\n    local closest_vowel_index_upper_len_len_len = 0\n    local closest_vowel_index_lower_len_len_len = 0\n    local closest_vowel_len_upper_len_len_len = 0\n    local closest_vowel_len_lower_len_len_len = 0\n    local closest_vowel_index_upper_len_len_len_len = 0\n    local closest_vowel_index_lower_len_len_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp6sucuysi.lua:71: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_lower = vowels.lower()\n    local vowels_upper = vowels.upper()\n    local vowels_lower_len = #vowels_lower\n    local vowels_upper_len = #vowels_upper\n    local vowels_len = #vowels\n    local word_len = #word\n    local i = 1\n    local j = 1\n    local closest_vowel = \"\"\n    while i <= word_len - 1 and j <= word_len - 1:\n        if word[j] == word[i]:\n            j = j + 1\n            i = i + 1\n        else:\n            if word[j] == \" \":\n                j = j + 1\n            elif word[i] == \" \":\n                i = i + 1\n            else:\n                if word[j] == word[i]:\n                    if word[j] == \"a\" or word[j] == \"e\" or word[j] == \"i\" or word[j] == \"o\" or word[j] == \"u\":\n                        if j - i > vowels_len:\n                            closest_vowel = vowels_lower[vowels_lower_len - 1]\n                        else:\n                            closest_vowel = vowels_lower[j - i]\n                    else:\n                        if j - i > vowels_len:\n                            closest_vowel = vowels_upper[vowels_upper_len - 1]\n                        else:\n                            closest_vowel = vowels_upper[j - i]\n                    break\n    return closest_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpubw271dr.lua:26: 'do' expected near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n  local vowels = \"aeiouAEIOU\"\n  local vowels_upper = vowels.upper()\n  local vowels_lower = vowels.lower()\n  local vowels_upper_len = #vowels_upper\n  local vowels_lower_len = #vowels_lower\n  local vowels_len = #vowels\n  local word_len = #word\n  local i = 1\n  local j = 1\n  local k = 1\n  local result = \"\"\n  while i <= word_len - 2 and j <= word_len - 2 and k <= word_len - 2:\n    if word[i] == word[j] and word[j] == word[k] and word[i] != word[k]:\n      if word[i] == \"A\" or word[i] == \"E\" or word[i] == \"I\" or word[i] == \"O\" or word[i] == \"U\":\n        result = word[i]\n        break\n      else:\n        if word[i] == word[j]:\n          j = j + 1\n        if word[j] == word[k]:\n          k = k + 1\n        if word[i] == word[k]:\n          k = k + 1\n        if word[i] == \"A\" or word[i] == \"E\" or word[i] == \"I\" or word[i] == \"O\" or word[i] == \"U\":\n          result = word[i]\n          break\n        else:\n          i = i + 1\n          j = j + 1\n          k = k + 1\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpp40vgi2l.lua:27: 'do' expected near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n  local vowels = \"aeiouAEIOU\"\n  local vowels_len = #vowels\n  local vowels_upper = vowels:upper()\n  local vowels_lower = vowels:lower()\n  local vowels_upper_len = vowels_upper:len()\n  local vowels_lower_len = vowels_lower:len()\n  local vowels_upper_index = 1\n  local vowels_lower_index = 1\n  local i = 1\n  while i <= #word do\n    if word:sub(i,i,1) ~= \" \" then\n      if word:sub(i,i,1) ~= \"-\" then\n        if word:sub(i,i,1) ~= \".\" then\n          if word:sub(i,i,1) ~= \",\" then\n            if word:sub(i,i,1) ~= \":\" then\n              if word:sub(i,i,1) ~= \";\" then\n                if word:sub(i,i,1) ~= \"!\" then\n                  if word:sub(i,i,1) ~= \"?\" then\n                    if word:sub(i,i,1) ~= \"(\" then\n                      if word:sub(i,i,1) ~= \")\" then\n                        if word:sub(i,i,1) ~= \"{\" then\n                          if word:sub(i,i,1) ~= \"}\" then\n                            if word:sub(i,i,1) ~= \"\\\"\" then\n                              if word:sub(i,i,1) ~= \"'\" then\n                                if word:sub(i,i,1) ~= \"-\" then\n                                  if word:sub(i,i,1) ~= \"_\" then\n                                    if word:sub(i,i,1) ~= \"*\" then\n                                      if word:sub(i,i,1) ~= \"&\" then\n                                        if word:sub(i,i,1) ~= \"|\" then\n                                          if word:sub(i,i,1) ~= \"^\" then\n                                            if word:sub(i,i,\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpgiblx1x0.lua:47: ')' expected (to close '(' at line 46) near '='\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local vowels_upper_index = 1\n    local vowels_lower_index = 1\n    local i = 1\n    local j = 1\n    local closest_vowel = \"\"\n    while i <= #word do\n        if word[i] == word[i+1] then\n            if word[i] == \" \" then\n                i = i + 1\n                continue\n            else\n                if j == 1 then\n                    j = j + 1\n                    closest_vowel = word[i]\n                    i = i + 1\n                    continue\n                else\n                    if j == vowels_len then\n                        j = 1\n                        closest_vowel = word[i]\n                        i = i + 1\n                        continue\n                    else\n                        if j < vowels_len then\n                            if word[i] == vowels_upper[j] then\n                                j = j + 1\n                                closest_vowel = word[i]\n                                i = i + 1\n                                continue\n                            else\n                                if word[i] == vowels_lower[j] then\n                                    j = j + 1\n                                    closest_vowel = word[i]\n                                    i = i + 1\n                                    continue\n                                else\n                                    j = 1\n                                    closest_vowel = word[i]\n                                    i = i + 1\n                                    continue\n                        else\n                            if word[i] == vowels_upper[j] then\n                                j = j + 1\n                                closest_vowel = word[i]\n                                i = i + 1\n                                continue\n                            else\n                                if word[i] == vowels_lower[j] then\n                                    j = j + 1\n                                    closest_vowel = word[i]\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpcxdu7n1k.lua:32: syntax error near 'else'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_len = #vowels\n    local vowels_count = 0\n    local i = 1\n    while i <= #word do\n        if word[i] == vowels[vowels_count] then\n            vowels_count = vowels_count + 1\n            if vowels_count == vowels_len then\n                return vowels[vowels_count]\n            end\n        end\n        i = i + 1\n    end\n    return \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsme_qea4.lua:35: expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpsme_qea4.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_len = #vowels\n    local vowels_count = 0\n    local vowels_index = 0\n    local word_len = #word\n    local word_index = 0\n    local closest_vowel = \"\"\n    while word_index < word_len and vowels_count < 2\n        if word[word_index] == vowels[vowels_index]\n            vowels_count = vowels_count + 1\n            vowels_index = (vowels_index + 1) % vowels_len\n        else\n            word_index = word_index + 1\n    end\n    if vowels_count == 2\n        closest_vowel = vowels[vowels_index]\n    end\n    return closest_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpyxgqycby.lua:24: 'do' expected near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local vowels_upper_index = 1\n    local vowels_lower_index = 1\n    local vowels_index = 1\n    local i = 1\n    local j = 1\n    local word_len = #word\n    local closest_vowel = \"\"\n    while i <= word_len and j <= word_len:\n        if word[i] == word[j]:\n            i = i + 1\n            j = j + 1\n        else:\n            if vowels_index < vowels_len and word[i] == vowels_upper[vowels_index]:\n                vowels_index = vowels_index + 1\n            elif vowels_index < vowels_len and word[i] == vowels_lower[vowels_index]:\n                vowels_index = vowels_index + 1\n            else:\n                i = i + 1\n                j = j + 1\n    if vowels_index < vowels_len:\n        closest_vowel = vowels[vowels_index]\n    return closest_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpu6mzl8ux.lua:30: <name> expected near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n  local vowels = \"aeiouAEIOU\"\n  local vowels_upper = vowels.upper()\n  local vowels_lower = vowels.lower()\n  local vowels_upper_len = #vowels_upper\n  local vowels_lower_len = #vowels_lower\n  local vowels_len = vowels_upper_len + vowels_lower_len\n  local vowels_upper_index = 1\n  local vowels_lower_index = 1\n  local i = 1\n  while i <= #word do\n    if word[i] == \" \" then\n      i = i + 1\n      continue\n    if word[i] == \".\" then\n      i = i + 1\n      continue\n    if word[i] == \",\" then\n      i = i + 1\n      continue\n    if word[i] == \"!\" then\n      i = i + 1\n      continue\n    if word[i] == \"?\" then\n      i = i + 1\n      continue\n    if word[i] == \"-\" then\n      i = i + 1\n      continue\n    if word[i] == \"\\\"\" then\n      i = i + 1\n      continue\n    if word[i] == \"'\" then\n      i = i + 1\n      continue\n    if word[i] == \"(\" then\n      i = i + 1\n      continue\n    if word[i] == \")\" then\n      i = i + 1\n      continue\n    if word[i] == \"{\" then\n      i = i + 1\n      continue\n    if word[i] == \"}\" then\n      i = i + 1\n      continue\n    if word[i] == \":\" then\n      i = i + 1\n      continue\n    if word[i] == \";\" then\n      i = i + 1\n      continue\n    if word[i] == \";\" then\n      i = i + 1\n      continue\n    if word[i] == \";\" then\n      i = i + 1\n      continue\n    if word[i] == \";\" then\n      i = i + 1\n      continue\n    if word[i] == \";\" then\n      i = i + 1\n      continue\n    if word[\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmppplf1f77.lua:29: syntax error near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_len = #vowels\n    local vowels_count = 0\n    local i = 1\n    local j = 1\n    local result = \"\"\n    while i <= #word do\n        if word[i] == word[j] then\n            if vowels_count == 0 then\n                result = word[i]\n                break\n            else\n                vowels_count = vowels_count + 1\n            end\n            j = j + 1\n        elseif vowels_count > 0 then\n            vowels_count = vowels_count - 1\n        else\n            i = i + 1\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcvsfyq_s.lua:43: expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmpcvsfyq_s.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local vowels_len_1 = vowels_len - 1\n    local vowels_len_2 = vowels_len - 2\n    local vowels_len_3 = vowels_len - 3\n    local vowels_len_4 = vowels_len - 4\n    local vowels_len_5 = vowels_len - 5\n    local vowels_len_6 = vowels_len - 6\n    local vowels_len_7 = vowels_len - 7\n    local vowels_len_8 = vowels_len - 8\n    local vowels_len_9 = vowels_len - 9\n    local vowels_len_10 = vowels_len - 10\n    local vowels_len_11 = vowels_len - 11\n    local vowels_len_12 = vowels_len - 12\n    local vowels_len_13 = vowels_len - 13\n    local vowels_len_14 = vowels_len - 14\n    local vowels_len_15 = vowels_len - 15\n    local vowels_len_16 = vowels_len - 16\n    local vowels_len_17 = vowels_len - 17\n    local vowels_len_18 = vowels_len - 18\n    local vowels_len_19 = vowels_len - 19\n    local vowels_len_20 = vowels_len - 20\n    local vowels_len_21 = vowels_len - 21\n    local vowels_len_22 = vowels_len - 22\n    local vowels_len_23 = vowels_len - 23\n    local vowels_len_24 = vowels_len - 24\n    local vowels_len_25 = vowels_len - 25\n    local vowels_len_26 = vowels_len - 26\n    local vow\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpuqgxczyv.lua:68: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n  local vowels = \"aeiouAEIOU\"\n  local vowels_upper = vowels.upper()\n  local vowels_lower = vowels.lower()\n  local vowels_upper_len = #vowels_upper\n  local vowels_lower_len = #vowels_lower\n  local vowels_len = vowels_upper_len + vowels_lower_len\n  local word_len = #word\n  local i = 1\n  while i <= word_len - 2 do\n    if word[i] == word[i+1] and word[i] == word[i+2] then\n      return vowels[word[i+1] - \"a\" + 1]\n    end\n    i = i + 1\n  end\n  return \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnerwqt5t.lua:17: bad argument #1 to 'upper' (string expected, got no value)\nstack traceback:\n\t/tmp/tmpnerwqt5t.lua:17: in local 'candidate'\n\t/tmp/tmpnerwqt5t.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_lower = vowels.lower()\n    local vowels_upper = vowels.upper()\n    local vowels_lower_len = #vowels_lower\n    local vowels_upper_len = #vowels_upper\n    local vowels_len = #vowels\n    local vowels_len_lower = #vowels_lower\n    local vowels_len_upper = #vowels_upper\n    local vowels_len_lower_len = #vowels_lower_len\n    local vowels_len_upper_len = #vowels_upper_len\n    local vowels_len_len = #vowels_len\n    local vowels_len_lower_len_upper_len = #vowels_lower_len_upper_len\n    local vowels_len_lower_len_upper_len_len = #vowels_lower_len_upper_len_len\n    local vowels_len_lower_len_upper_len_len_len = #vowels_lower_len_upper_len_len_len\n    local vowels_len_lower_len_upper_len_len_len_len = #vowels_lower_len_upper_len_len_len_len\n    local vowels_len_lower_len_upper_len_len_len_len_len = #vowels_lower_len_upper_len_len_len_len_len\n    local vowels_len_lower_len_upper_len_len_len_len_len_len = #vowels_lower_len_upper_len_len_len_len_len_len\n    local vowels_len_lower_len_upper_len_len_len_len_len_len_len = #vowels_lower_len_upper_len_len_len_len_len_len_len\n    local vowels_len_lower_len_upper_len_len_len_len_len_len_len_len = #vowels_lower_len_upper_len_len_len_len_len_len_len_len\n    local vowels\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpkx4rmmiu.lua:55: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = #vowels\n    local word_len = #word\n    local i = 1\n    local j = 1\n    local result = \"\"\n    while i <= word_len - 1 and j <= word_len - 1:\n        if word[i] == word[j]:\n            i = i + 1\n            j = j + 1\n        else:\n            if word[i] in vowels_upper:\n                if j - i + 1 > vowels_upper_len:\n                    result = word[i + 1]\n                    break\n            elif word[i] in vowels_lower:\n                if j - i + 1 > vowels_lower_len:\n                    result = word[i + 1]\n                    break\n            else:\n                if j - i + 1 > vowels_len:\n                    result = word[i + 1]\n                    break\n        i = i + 1\n        j = j + 1\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpbm579cvy.lua:26: 'do' expected near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_len = #vowels\n    local vowels_count = 0\n    local vowels_index = 0\n    local i = 1\n    local j = 1\n    local result = \"\"\n    while i <= #word do\n        if word[i] == word[j] then\n            if vowels_count == 0 then\n                result = word[i]\n                break\n            elseif vowels_count == vowels_len then\n                result = word[i]\n                break\n            elseif vowels[vowels_index] == word[i] then\n                result = vowels[vowels_index]\n                vowels_count = vowels_count + 1\n                vowels_index = vowels_index + 1\n                if vowels_index == vowels_len then\n                    vowels_index = 0\n                end\n            elseif vowels[vowels_index] == word[j] then\n                result = vowels[vowels_index]\n                vowels_count = vowels_count + 1\n                vowels_index = vowels_index + 1\n                if vowels_index == vowels_len then\n                    vowels_index = 0\n                end\n            elseif vowels[vowels_index] == vowels[vowels_index + 1] then\n                result = vowels[vowels_index]\n                vowels_count = vowels_count + 1\n                vowels_index = vowels_index + 1\n                if vowels_index == vowels_len then\n                    vowels_index = 0\n                end\n            end\n            j = j + 1\n        elseif vowels_count == 0 then\n            result = word[i]\n        elseif vowels_count == vowels_len then\n            result = word[i]\n        elseif vowels[vowels_index] == word[i] then\n            result = vowels[vowels_index]\n            vowels_count = vowels_count + 1\n            vowels_index = vowels_index + 1\n            if vowels_index == vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpb47m7102.lua:63: 'then' expected near 'lu'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_lower = \"aeiouAEIOU\"\n    local vowels_upper = \"AEIOU\"\n    local vowels_lower_len = #vowels_lower\n    local vowels_upper_len = #vowels_upper\n    local vowels_len = #vowels\n    local word_len = #word\n    local i = 1\n    local j = 1\n    local k = 1\n    local closest_vowel = \"\"\n    while i <= word_len and j <= word_len and k <= word_len and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \" and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \" and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \" and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \" and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \" and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \" and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \" and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \" and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \" and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \" and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \" and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \" and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \" and word[i] ~= \" \" and word[j] ~= \" \"\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpebcyobdz.lua:28: 'do' expected near 'lu'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = \"AEIOU\"\n    local vowels_lower = \"aeiouAEIOU\"\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = #vowels\n    local word_len = #word\n    local i = 1\n    local j = 1\n    local k = 1\n    local closest_vowel = \"\"\n    while i <= word_len and j <= word_len and k <= word_len and word[i] ~= \" \" and word[j] ~= \" \" and word[k] ~= \" \":\n        if word[i] == word[j] and word[i] == word[k]:\n            if word[i] ~= \" \":\n                closest_vowel = word[i]\n                break\n            else:\n                i = i + 1\n                j = j + 1\n                k = k + 1\n        elif word[i] == word[j] or word[i] == word[k]:\n            if word[i] ~= \" \":\n                closest_vowel = word[i]\n                break\n            else:\n                i = i + 1\n                j = j + 1\n                k = k + 1\n        else:\n            if word[i] ~= \" \":\n                if word[i] ~= word[j]:\n                    if word[i] ~= word[k]:\n                        closest_vowel = word[i]\n                        break\n                    else:\n                        j = j + 1\n                else:\n                    j = j + 1\n            else:\n                if word[j] ~= word[k]:\n                    k = k + 1\n                else:\n                    k = k + 1\n                    j = j + 1\n    return closest_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpimod1jgf.lua:27: 'do' expected near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- You are given a word. Your task is to find the closest vowel that stands between \n-- two consonants from the right side of the word (case sensitive).\n-- Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n-- find any vowel met the above condition. \n-- You may assume that the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel(\"yogurt\")\n-- \"u\"\n-- >>> get_closest_vowel(\"FULL\")\n-- \"U\"\n-- >>> get_closest_vowel(\"quick\")\n-- \"\"\n-- >>> get_closest_vowel(\"ab\")\n-- \"\"\nlocal function get_closest_vowel(word)\n    local vowels = \"aeiouAEIOU\"\n    local vowels_upper = vowels.upper()\n    local vowels_lower = vowels.lower()\n    local vowels_upper_len = #vowels_upper\n    local vowels_lower_len = #vowels_lower\n    local vowels_len = vowels_upper_len + vowels_lower_len\n    local i = 1\n    local j = 1\n    local found = false\n    while i <= #word and not found do\n        if word[i] == word[i+1] then\n            if i > 1 and word[i-1] == word[i-2] then\n                found = true\n                break\n            elseif i < #word and word[i+1] == word[i+2] then\n                found = true\n                break\n            else\n                i = i + 1\n        elseif word[i] == vowels_upper[j] then\n            j = j + 1\n            if j == vowels_upper_len then\n                j = 1\n                i = i + 1\n            else\n                i = i + 1\n        elseif word[i] == vowels_lower[j] then\n            j = j + 1\n            if j == vowels_lower_len then\n                j = 1\n                i = i + 1\n            else\n                i = i + 1\n        else\n            i = i + 1\n    end\n    if found then\n        return vowels[j]\n    else\n        return \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmptoz2d32i.lua:35: 'end' expected (to close 'if' at line 27) near 'elseif'\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}