language: lua
name: HumanEval_72_will_it_fly
results:
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly([3,\
    \ 2, 3], 1)\n-- False\n-- # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n-- >>> will_it_fly([3, 2, 3], 9)\n-- True\n-- # 3+2+3 is less\
    \ than the maximum possible weight, and it's balanced.\n-- >>> will_it_fly([3],\
    \ 5)\n-- True\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n    local function is_balanced(q)\n        local\
    \ i, j, sum = 1, 1, 0\n        for i = 1, #q do\n            sum = sum + q[i]\n\
    \            if sum > w then\n                return false\n            elseif\
    \ sum < 0 then\n                return false\n            else\n             \
    \   sum = sum - q[j]\n                j = j + 1\n            end\n        end\n\
    \        return true\n    end\n    return is_balanced(q)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr_y31157.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpr_y31157.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907485
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly([3,\
    \ 2, 3], 1)\n-- False\n-- # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n-- >>> will_it_fly([3, 2, 3], 9)\n-- True\n-- # 3+2+3 is less\
    \ than the maximum possible weight, and it's balanced.\n-- >>> will_it_fly([3],\
    \ 5)\n-- True\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n    local max_weight = w\n    local sum = 0\n\
    \    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum > max_weight\
    \ then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp30wdohz9.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp30wdohz9.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907485
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly([3,\
    \ 2, 3], 1)\n-- False\n-- # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n-- >>> will_it_fly([3, 2, 3], 9)\n-- True\n-- # 3+2+3 is less\
    \ than the maximum possible weight, and it's balanced.\n-- >>> will_it_fly([3],\
    \ 5)\n-- True\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n    local max = math.pow(10, w)\n    local sum\
    \ = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    return sum\
    \ <= max and sum == sum[1, #q]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpp2she1j1.lua:22: '']'' expected near '',''

    '
  stdout: ''
  timestamp: 1661907485
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly([3,\
    \ 2, 3], 1)\n-- False\n-- # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n-- >>> will_it_fly([3, 2, 3], 9)\n-- True\n-- # 3+2+3 is less\
    \ than the maximum possible weight, and it's balanced.\n-- >>> will_it_fly([3],\
    \ 5)\n-- True\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n    local max = math.pow(10, w)\n    local sum\
    \ = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum <=\
    \ max then\n        return true\n    else\n        return false\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9ozchcy.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpf9ozchcy.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907485
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly([3,\
    \ 2, 3], 1)\n-- False\n-- # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n-- >>> will_it_fly([3, 2, 3], 9)\n-- True\n-- # 3+2+3 is less\
    \ than the maximum possible weight, and it's balanced.\n-- >>> will_it_fly([3],\
    \ 5)\n-- True\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n    local max = math.pow(10, w)\n    local sum\
    \ = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    return sum\
    \ <= max and sum % 2 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0cl1f0bi.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0cl1f0bi.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907485
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly([3,\
    \ 2, 3], 1)\n-- False\n-- # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n-- >>> will_it_fly([3, 2, 3], 9)\n-- True\n-- # 3+2+3 is less\
    \ than the maximum possible weight, and it's balanced.\n-- >>> will_it_fly([3],\
    \ 5)\n-- True\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n    local max = math.pow(10, w)\n    for i =\
    \ 1, #q do\n        if q[i] > max then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpna5vn75z.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpna5vn75z.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907485
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly([3,\
    \ 2, 3], 1)\n-- False\n-- # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n-- >>> will_it_fly([3, 2, 3], 9)\n-- True\n-- # 3+2+3 is less\
    \ than the maximum possible weight, and it's balanced.\n-- >>> will_it_fly([3],\
    \ 5)\n-- True\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n    local max = math.pow(10, w)\n    local sum\
    \ = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    return sum\
    \ <= max and sum == sum:sub(1, #q)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_a82svye.lua:22:\
    \ attempt to index a number value (local 'sum')\nstack traceback:\n\t/tmp/tmp_a82svye.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp_a82svye.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1661907485
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly([3,\
    \ 2, 3], 1)\n-- False\n-- # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n-- >>> will_it_fly([3, 2, 3], 9)\n-- True\n-- # 3+2+3 is less\
    \ than the maximum possible weight, and it's balanced.\n-- >>> will_it_fly([3],\
    \ 5)\n-- True\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n    local max = math.pow(10, w)\n    local sum\
    \ = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    return sum\
    \ <= max and sum == sum[1, #q]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpp2she1j1.lua:22: '']'' expected near '',''

    '
  stdout: ''
  timestamp: 1661907485
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly([3,\
    \ 2, 3], 1)\n-- False\n-- # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n-- >>> will_it_fly([3, 2, 3], 9)\n-- True\n-- # 3+2+3 is less\
    \ than the maximum possible weight, and it's balanced.\n-- >>> will_it_fly([3],\
    \ 5)\n-- True\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n    local max = math.pow(10, w)\n    local sum\
    \ = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    return sum\
    \ <= max and sum == sum[1, #q]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpp2she1j1.lua:22: '']'' expected near '',''

    '
  stdout: ''
  timestamp: 1661907485
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly([3,\
    \ 2, 3], 1)\n-- False\n-- # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n-- >>> will_it_fly([3, 2, 3], 9)\n-- True\n-- # 3+2+3 is less\
    \ than the maximum possible weight, and it's balanced.\n-- >>> will_it_fly([3],\
    \ 5)\n-- True\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n    local i, j, sum = 1, 1, 0\n    for i = 1,\
    \ #q do\n        sum = sum + q[i]\n        j = i\n        while j > 0 and q[j]\
    \ == q[j-1] and sum <= w do\n            sum = sum + q[j]\n            j = j -\
    \ 1\n        if sum > w then\n            return false\n        elseif sum < w\
    \ then\n            return true\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1vftm5y4.lua:44: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1661907485
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly([3,\
    \ 2, 3], 1)\n-- False\n-- # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n-- >>> will_it_fly([3, 2, 3], 9)\n-- True\n-- # 3+2+3 is less\
    \ than the maximum possible weight, and it's balanced.\n-- >>> will_it_fly([3],\
    \ 5)\n-- True\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n    local max = math.pow(10, w)\n    for i =\
    \ 1, #q do\n        if q[i] > max then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpna5vn75z.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpna5vn75z.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907485
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly([3,\
    \ 2, 3], 1)\n-- False\n-- # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n-- >>> will_it_fly([3, 2, 3], 9)\n-- True\n-- # 3+2+3 is less\
    \ than the maximum possible weight, and it's balanced.\n-- >>> will_it_fly([3],\
    \ 5)\n-- True\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n    local max_weight = math.pow(10, w)\n   \
    \ local sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n   \
    \ return sum <= max_weight and sum == sum:sub(1, #q)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsb_foqf2.lua:22:\
    \ attempt to index a number value (local 'sum')\nstack traceback:\n\t/tmp/tmpsb_foqf2.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpsb_foqf2.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1661907485
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly([3,\
    \ 2, 3], 1)\n-- False\n-- # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n-- >>> will_it_fly([3, 2, 3], 9)\n-- True\n-- # 3+2+3 is less\
    \ than the maximum possible weight, and it's balanced.\n-- >>> will_it_fly([3],\
    \ 5)\n-- True\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n    local max = math.pow(10, w)\n    local sum\
    \ = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    return sum\
    \ <= max and sum == sum:sub(1, #q)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_a82svye.lua:22:\
    \ attempt to index a number value (local 'sum')\nstack traceback:\n\t/tmp/tmp_a82svye.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp_a82svye.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1661907485
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly([3,\
    \ 2, 3], 1)\n-- False\n-- # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n-- >>> will_it_fly([3, 2, 3], 9)\n-- True\n-- # 3+2+3 is less\
    \ than the maximum possible weight, and it's balanced.\n-- >>> will_it_fly([3],\
    \ 5)\n-- True\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n    local max = math.pow(10, w)\n    local sum\
    \ = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum <=\
    \ max then\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8orlr_n_.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8orlr_n_.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907485
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly([3,\
    \ 2, 3], 1)\n-- False\n-- # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n-- >>> will_it_fly([3, 2, 3], 9)\n-- True\n-- # 3+2+3 is less\
    \ than the maximum possible weight, and it's balanced.\n-- >>> will_it_fly([3],\
    \ 5)\n-- True\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n    local max = math.pow(10, w)\n    local sum\
    \ = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    return sum\
    \ <= max and sum == sum:sub(1, #q)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_a82svye.lua:22:\
    \ attempt to index a number value (local 'sum')\nstack traceback:\n\t/tmp/tmp_a82svye.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp_a82svye.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1661907485
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly([3,\
    \ 2, 3], 1)\n-- False\n-- # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n-- >>> will_it_fly([3, 2, 3], 9)\n-- True\n-- # 3+2+3 is less\
    \ than the maximum possible weight, and it's balanced.\n-- >>> will_it_fly([3],\
    \ 5)\n-- True\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n    local max = math.pow(10, w)\n    local sum\
    \ = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    return sum\
    \ <= max and sum == sum:sub(1, #q)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_a82svye.lua:22:\
    \ attempt to index a number value (local 'sum')\nstack traceback:\n\t/tmp/tmp_a82svye.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp_a82svye.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1661907485
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly([3,\
    \ 2, 3], 1)\n-- False\n-- # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n-- >>> will_it_fly([3, 2, 3], 9)\n-- True\n-- # 3+2+3 is less\
    \ than the maximum possible weight, and it's balanced.\n-- >>> will_it_fly([3],\
    \ 5)\n-- True\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n    local max = math.pow(10, w)\n    local sum\
    \ = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    return sum\
    \ <= max and sum == sum:sub(1, #q)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_a82svye.lua:22:\
    \ attempt to index a number value (local 'sum')\nstack traceback:\n\t/tmp/tmp_a82svye.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp_a82svye.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1661907485
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly([3,\
    \ 2, 3], 1)\n-- False\n-- # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n-- >>> will_it_fly([3, 2, 3], 9)\n-- True\n-- # 3+2+3 is less\
    \ than the maximum possible weight, and it's balanced.\n-- >>> will_it_fly([3],\
    \ 5)\n-- True\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n    local max = math.pow(10, w)\n    local sum\
    \ = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    return sum\
    \ <= max and sum == sum[1, #q]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpp2she1j1.lua:22: '']'' expected near '',''

    '
  stdout: ''
  timestamp: 1661907485
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly([3,\
    \ 2, 3], 1)\n-- False\n-- # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n-- >>> will_it_fly([3, 2, 3], 9)\n-- True\n-- # 3+2+3 is less\
    \ than the maximum possible weight, and it's balanced.\n-- >>> will_it_fly([3],\
    \ 5)\n-- True\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n    local function is_balanced(q)\n        local\
    \ i, j, sum = 1, 1, 0\n        for i = 1, #q do\n            sum = sum + q[i]\n\
    \            if sum > w then\n                return false\n            elseif\
    \ sum < 0 then\n                return false\n            else\n             \
    \   sum = sum + q[j]\n                j = j + 1\n                if j > i then\n\
    \                    j = 1\n                end\n            end\n        end\n\
    \        return true\n    end\n    return is_balanced(q)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmcx8awvu.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmcx8awvu.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907485
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly([3,\
    \ 2, 3], 1)\n-- False\n-- # it's balanced, but 3+2+3 is more than the maximum\
    \ possible weight.\n-- >>> will_it_fly([3, 2, 3], 9)\n-- True\n-- # 3+2+3 is less\
    \ than the maximum possible weight, and it's balanced.\n-- >>> will_it_fly([3],\
    \ 5)\n-- True\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n    local max = math.pow(10, w)\n    for i=1,\
    \ #q do\n        if q[i] > max then\n            return false\n        end\n \
    \   end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqgv1gb_y.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqgv1gb_y.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907485
