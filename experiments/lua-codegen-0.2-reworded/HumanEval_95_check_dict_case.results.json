{
  "language": "lua",
  "name": "HumanEval_95_check_dict_case",
  "results": [
    {
      "exit_code": 1,
      "program": "-- Given a table, return true if all keys are strings in lower \n-- case or all keys are strings in upper case, else return false.\n-- The function should return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n-- True\n-- >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n-- False\n-- >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n-- False\n-- >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n-- False\n-- >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n-- True\nlocal function check_dict_case(dict)\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" or k ~= tostring(k) then\n            return false\n        end\n        if type(v) ~= \"string\" or v ~= tostring(v) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name'] = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE'] = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit'] = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3y2n_7sg.lua:31: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3y2n_7sg.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938070
    },
    {
      "exit_code": 1,
      "program": "-- Given a table, return true if all keys are strings in lower \n-- case or all keys are strings in upper case, else return false.\n-- The function should return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n-- True\n-- >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n-- False\n-- >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n-- False\n-- >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n-- False\n-- >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n-- True\nlocal function check_dict_case(dict)\n    for k,v in pairs(dict) do\n        if type(k) ~= \"string\" or (type(k) == \"string\" and string.lower(k) ~= k) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name'] = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE'] = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit'] = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpabd7ktgt.lua:29: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpabd7ktgt.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938071
    },
    {
      "exit_code": 1,
      "program": "-- Given a table, return true if all keys are strings in lower \n-- case or all keys are strings in upper case, else return false.\n-- The function should return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n-- True\n-- >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n-- False\n-- >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n-- False\n-- >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n-- False\n-- >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n-- True\nlocal function check_dict_case(dict)\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" or k ~= string.lower(k) or type(v) ~= \"string\" then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name'] = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE'] = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit'] = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwymfqq6i.lua:29: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwymfqq6i.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938071
    },
    {
      "exit_code": 1,
      "program": "-- Given a table, return true if all keys are strings in lower \n-- case or all keys are strings in upper case, else return false.\n-- The function should return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n-- True\n-- >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n-- False\n-- >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n-- False\n-- >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n-- False\n-- >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n-- True\nlocal function check_dict_case(dict)\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" or (type(k) == \"string\" and string.lower(k) ~= k) then\n            return false\n        end\n        if type(v) ~= \"string\" or (type(v) == \"string\" and string.lower(v) ~= v) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name'] = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE'] = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit'] = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0dnzye8g.lua:32: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0dnzye8g.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938071
    },
    {
      "exit_code": 1,
      "program": "-- Given a table, return true if all keys are strings in lower \n-- case or all keys are strings in upper case, else return false.\n-- The function should return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n-- True\n-- >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n-- False\n-- >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n-- False\n-- >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n-- False\n-- >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n-- True\nlocal function check_dict_case(dict)\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" or k ~= string.lower(k) or type(v) ~= \"string\" then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name'] = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE'] = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit'] = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwymfqq6i.lua:29: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwymfqq6i.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938071
    },
    {
      "exit_code": 1,
      "program": "-- Given a table, return true if all keys are strings in lower \n-- case or all keys are strings in upper case, else return false.\n-- The function should return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n-- True\n-- >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n-- False\n-- >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n-- False\n-- >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n-- False\n-- >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n-- True\nlocal function check_dict_case(dict)\n    for k,v in pairs(dict) do\n        if type(k) ~= \"string\" or type(v) ~= \"string\" then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name'] = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE'] = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit'] = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptd82vxt8.lua:28: expected: false, actual: true\nstack traceback:\n\t/tmp/tmptd82vxt8.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938071
    },
    {
      "exit_code": 1,
      "program": "-- Given a table, return true if all keys are strings in lower \n-- case or all keys are strings in upper case, else return false.\n-- The function should return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n-- True\n-- >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n-- False\n-- >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n-- False\n-- >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n-- False\n-- >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n-- True\nlocal function check_dict_case(dict)\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" or string.lower(k) ~= k or string.upper(k) ~= k then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name'] = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE'] = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit'] = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnmvq6wdk.lua:27: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnmvq6wdk.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938071
    },
    {
      "exit_code": 1,
      "program": "-- Given a table, return true if all keys are strings in lower \n-- case or all keys are strings in upper case, else return false.\n-- The function should return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n-- True\n-- >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n-- False\n-- >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n-- False\n-- >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n-- False\n-- >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n-- True\nlocal function check_dict_case(dict)\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" or (k ~= string.lower(k) and k ~= string.upper(k)) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name'] = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE'] = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit'] = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoatawkum.lua:28: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpoatawkum.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938071
    },
    {
      "exit_code": 1,
      "program": "-- Given a table, return true if all keys are strings in lower \n-- case or all keys are strings in upper case, else return false.\n-- The function should return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n-- True\n-- >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n-- False\n-- >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n-- False\n-- >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n-- False\n-- >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n-- True\nlocal function check_dict_case(dict)\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" or k ~= string.lower(k) or type(v) ~= \"string\" then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name'] = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE'] = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit'] = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwymfqq6i.lua:29: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwymfqq6i.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938071
    },
    {
      "exit_code": 1,
      "program": "-- Given a table, return true if all keys are strings in lower \n-- case or all keys are strings in upper case, else return false.\n-- The function should return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n-- True\n-- >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n-- False\n-- >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n-- False\n-- >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n-- False\n-- >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n-- True\nlocal function check_dict_case(dict)\n    for k,v in pairs(dict) do\n        if type(k) ~= \"string\" or (type(k) == \"string\" and string.lower(k) ~= k) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name'] = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE'] = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit'] = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpabd7ktgt.lua:29: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpabd7ktgt.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938071
    },
    {
      "exit_code": 1,
      "program": "-- Given a table, return true if all keys are strings in lower \n-- case or all keys are strings in upper case, else return false.\n-- The function should return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n-- True\n-- >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n-- False\n-- >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n-- False\n-- >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n-- False\n-- >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n-- True\nlocal function check_dict_case(dict)\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" or type(v) ~= \"string\" then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name'] = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE'] = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit'] = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_i6qs188.lua:28: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_i6qs188.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938071
    },
    {
      "exit_code": 1,
      "program": "-- Given a table, return true if all keys are strings in lower \n-- case or all keys are strings in upper case, else return false.\n-- The function should return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n-- True\n-- >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n-- False\n-- >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n-- False\n-- >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n-- False\n-- >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n-- True\nlocal function check_dict_case(dict)\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" or type(v) ~= \"string\" then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name'] = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE'] = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit'] = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_i6qs188.lua:28: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_i6qs188.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938071
    },
    {
      "exit_code": 1,
      "program": "-- Given a table, return true if all keys are strings in lower \n-- case or all keys are strings in upper case, else return false.\n-- The function should return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n-- True\n-- >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n-- False\n-- >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n-- False\n-- >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n-- False\n-- >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n-- True\nlocal function check_dict_case(dict)\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" or type(v) ~= \"string\" then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name'] = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE'] = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit'] = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_i6qs188.lua:28: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_i6qs188.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938071
    },
    {
      "exit_code": 1,
      "program": "-- Given a table, return true if all keys are strings in lower \n-- case or all keys are strings in upper case, else return false.\n-- The function should return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n-- True\n-- >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n-- False\n-- >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n-- False\n-- >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n-- False\n-- >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n-- True\nlocal function check_dict_case(dict)\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" or k ~= string.lower(k) or type(v) ~= \"string\" then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name'] = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE'] = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit'] = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwymfqq6i.lua:29: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwymfqq6i.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938071
    },
    {
      "exit_code": 1,
      "program": "-- Given a table, return true if all keys are strings in lower \n-- case or all keys are strings in upper case, else return false.\n-- The function should return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n-- True\n-- >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n-- False\n-- >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n-- False\n-- >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n-- False\n-- >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n-- True\nlocal function check_dict_case(dict)\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" or type(v) ~= \"string\" then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name'] = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE'] = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit'] = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_i6qs188.lua:28: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_i6qs188.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938071
    },
    {
      "exit_code": 1,
      "program": "-- Given a table, return true if all keys are strings in lower \n-- case or all keys are strings in upper case, else return false.\n-- The function should return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n-- True\n-- >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n-- False\n-- >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n-- False\n-- >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n-- False\n-- >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n-- True\nlocal function check_dict_case(dict)\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" or (type(k) == \"string\" and string.lower(k) ~= k) then\n            return false\n        end\n        if type(v) ~= \"string\" or (type(v) == \"string\" and string.lower(v) ~= v) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name'] = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE'] = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit'] = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0dnzye8g.lua:32: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0dnzye8g.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938071
    },
    {
      "exit_code": 1,
      "program": "-- Given a table, return true if all keys are strings in lower \n-- case or all keys are strings in upper case, else return false.\n-- The function should return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n-- True\n-- >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n-- False\n-- >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n-- False\n-- >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n-- False\n-- >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n-- True\nlocal function check_dict_case(dict)\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" or (type(k) == \"string\" and string.lower(k) ~= k) then\n            return false\n        end\n        if type(v) ~= \"string\" or (type(v) == \"string\" and string.lower(v) ~= v) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name'] = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE'] = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit'] = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0dnzye8g.lua:32: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0dnzye8g.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938071
    },
    {
      "exit_code": 1,
      "program": "-- Given a table, return true if all keys are strings in lower \n-- case or all keys are strings in upper case, else return false.\n-- The function should return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n-- True\n-- >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n-- False\n-- >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n-- False\n-- >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n-- False\n-- >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n-- True\nlocal function check_dict_case(dict)\n    if #dict == 0 then\n        return true\n    end\n    for key, value in pairs(dict) do\n        if type(key) ~= \"string\" or type(value) ~= \"string\" then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name'] = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE'] = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit'] = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpznqm4qka.lua:31: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpznqm4qka.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938071
    },
    {
      "exit_code": 1,
      "program": "-- Given a table, return true if all keys are strings in lower \n-- case or all keys are strings in upper case, else return false.\n-- The function should return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n-- True\n-- >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n-- False\n-- >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n-- False\n-- >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n-- False\n-- >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n-- True\nlocal function check_dict_case(dict)\n    local keys = {}\n    for k, v in pairs(dict) do\n        keys[tostring(k)] = true\n    end\n    for k, v in pairs(keys) do\n        if string.upper(k) ~= k then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name'] = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE'] = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit'] = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6k9037dg.lua:31: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6k9037dg.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938071
    },
    {
      "exit_code": 1,
      "program": "-- Given a table, return true if all keys are strings in lower \n-- case or all keys are strings in upper case, else return false.\n-- The function should return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({\"a\":\"apple\", \"b\":\"banana\"})\n-- True\n-- >>> check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"})\n-- False\n-- >>> check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"})\n-- False\n-- >>> check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n-- False\n-- >>> check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" })\n-- True\nlocal function check_dict_case(dict)\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" or (k ~= string.lower(k) and k ~= string.upper(k)) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name'] = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE'] = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit'] = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoatawkum.lua:28: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpoatawkum.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938071
    }
  ]
}