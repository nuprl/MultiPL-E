language: lua
name: HumanEval_157_right_angle_triangle
results:
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5) \n-- True\n-- >>> right_angle_triangle(1,\
    \ 2, 3) \n-- False\nlocal function right_angle_triangle(a, b, c)\n    if a < 0\
    \ or b < 0 or c < 0 then\n        return false\n    end\n    return a + b > c\
    \ and b + c > a and c + a > b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa52kp6vt.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa52kp6vt.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907410
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5) \n-- True\n-- >>> right_angle_triangle(1,\
    \ 2, 3) \n-- False\nlocal function right_angle_triangle(a, b, c)\n    return a\
    \ == b and b == c and a == c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_r7ps0bn.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_r7ps0bn.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907410
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5) \n-- True\n-- >>> right_angle_triangle(1,\
    \ 2, 3) \n-- False\nlocal function right_angle_triangle(a, b, c)\n    if a < 0\
    \ or b < 0 or c < 0 then\n        return false\n    end\n    return ((a + b >\
    \ c) and (a + c > b) and (b + c > a))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8x9rwyue.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8x9rwyue.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907410
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5) \n-- True\n-- >>> right_angle_triangle(1,\
    \ 2, 3) \n-- False\nlocal function right_angle_triangle(a, b, c)\n    return a\
    \ * a + b * b == c * c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpffhia9vh.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpffhia9vh.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907410
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5) \n-- True\n-- >>> right_angle_triangle(1,\
    \ 2, 3) \n-- False\nlocal function right_angle_triangle(a, b, c)\n    if a < 0\
    \ or b < 0 or c < 0 then\n        return false\n    end\n    return a + b > c\
    \ and a + c > b and b + c > a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuntszi_8.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpuntszi_8.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907410
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5) \n-- True\n-- >>> right_angle_triangle(1,\
    \ 2, 3) \n-- False\nlocal function right_angle_triangle(a, b, c)\n    return a\
    \ * a + b * b == c * c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpffhia9vh.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpffhia9vh.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907410
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5) \n-- True\n-- >>> right_angle_triangle(1,\
    \ 2, 3) \n-- False\nlocal function right_angle_triangle(a, b, c)\n    if a > 0\
    \ and b > 0 and c > 0 then\n        if a + b > c then\n            if a + c >\
    \ b then\n                if b + c > a then\n                    return true\n\
    \                else\n                    return false\n                else\n\
    \                    return false\n                else\n                    return\
    \ false\n                else\n                    return false\n            \
    \    else\n                    return false\n                else\n          \
    \          return false\n            else\n                return false\n    \
    \        else\n                return false\n        else\n            return\
    \ false\n        else\n            return false\n    else\n        return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp13y4mj45.lua:18: ''end'' expected (to close ''if'' at line
    14) near ''else''

    '
  stdout: ''
  timestamp: 1661907410
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5) \n-- True\n-- >>> right_angle_triangle(1,\
    \ 2, 3) \n-- False\nlocal function right_angle_triangle(a, b, c)\n    if a > 0\
    \ and b > 0 and c > 0 then\n        if a + b > c and a + c > b and b + c > a then\n\
    \            return true\n        else\n            return false\n        end\n\
    \    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2uye8ozq.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2uye8ozq.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907410
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5) \n-- True\n-- >>> right_angle_triangle(1,\
    \ 2, 3) \n-- False\nlocal function right_angle_triangle(a, b, c)\n    if a > 0\
    \ and b > 0 and c > 0 then\n        if a + b > c then\n            return true\n\
    \        else\n            return false\n        end\n    else\n        return\
    \ false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp77whfc8e.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp77whfc8e.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907410
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5) \n-- True\n-- >>> right_angle_triangle(1,\
    \ 2, 3) \n-- False\nlocal function right_angle_triangle(a, b, c)\n    return a\
    \ == b and b == c and a == c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_r7ps0bn.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_r7ps0bn.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907410
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5) \n-- True\n-- >>> right_angle_triangle(1,\
    \ 2, 3) \n-- False\nlocal function right_angle_triangle(a, b, c)\n    return a\
    \ * a + b * b == c * c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpffhia9vh.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpffhia9vh.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907410
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5) \n-- True\n-- >>> right_angle_triangle(1,\
    \ 2, 3) \n-- False\nlocal function right_angle_triangle(a, b, c)\n    return a\
    \ + b == c or a + c == b or b + c == a\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcxcpr3x6.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpcxcpr3x6.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907410
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5) \n-- True\n-- >>> right_angle_triangle(1,\
    \ 2, 3) \n-- False\nlocal function right_angle_triangle(a, b, c)\n    return a\
    \ + b == c or a + c == b or b + c == a\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcxcpr3x6.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpcxcpr3x6.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907410
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5) \n-- True\n-- >>> right_angle_triangle(1,\
    \ 2, 3) \n-- False\nlocal function right_angle_triangle(a, b, c)\n    if a < 0\
    \ or b < 0 or c < 0 then\n        return false\n    end\n    if a + b < c or b\
    \ + c < a or a + c < b then\n        return false\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy8dwu7rf.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpy8dwu7rf.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907410
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5) \n-- True\n-- >>> right_angle_triangle(1,\
    \ 2, 3) \n-- False\nlocal function right_angle_triangle(a, b, c)\n    if a < 0\
    \ or b < 0 or c < 0 then\n        return false\n    end\n    if a + b < c or b\
    \ + c < a or c + a < b then\n        return false\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpayqene8y.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpayqene8y.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907410
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5) \n-- True\n-- >>> right_angle_triangle(1,\
    \ 2, 3) \n-- False\nlocal function right_angle_triangle(a, b, c)\n    if a > 0\
    \ and b > 0 and c > 0 then\n        if a + b > c then\n            return true\n\
    \        else\n            return false\n        end\n    else\n        return\
    \ false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp77whfc8e.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp77whfc8e.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907410
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5) \n-- True\n-- >>> right_angle_triangle(1,\
    \ 2, 3) \n-- False\nlocal function right_angle_triangle(a, b, c)\n    if a < 0\
    \ or b < 0 or c < 0 then\n        return false\n    end\n    if a + b < c or b\
    \ + c < a or c + a < b then\n        return false\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpayqene8y.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpayqene8y.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907410
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5) \n-- True\n-- >>> right_angle_triangle(1,\
    \ 2, 3) \n-- False\nlocal function right_angle_triangle(a, b, c)\n    if a > 0\
    \ and b > 0 and c > 0 then\n        if a + b > c then\n            return true\n\
    \        else\n            return false\n        end\n    else\n        return\
    \ false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp77whfc8e.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp77whfc8e.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907410
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5) \n-- True\n-- >>> right_angle_triangle(1,\
    \ 2, 3) \n-- False\nlocal function right_angle_triangle(a, b, c)\n    if a < 0\
    \ or b < 0 or c < 0 then\n        return false\n    end\n    if a + b < c or b\
    \ + c < a or c + a < b then\n        return false\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpayqene8y.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpayqene8y.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661907410
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5) \n-- True\n-- >>> right_angle_triangle(1,\
    \ 2, 3) \n-- False\nlocal function right_angle_triangle(a, b, c)\n    if a > 0\
    \ and b > 0 and c > 0 then\n        if a + b > c then\n            if a + c >\
    \ b then\n                if b + c > a then\n                    return true\n\
    \                else\n                    return false\n                else\n\
    \                    return false\n                else\n                    return\
    \ false\n                else\n                    return false\n            else\n\
    \                return false\n            else\n                return false\n\
    \        else\n            return false\n        else\n            return false\n\
    \    else\n        return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp80iiu_ne.lua:18: ''end'' expected (to close ''if'' at line
    14) near ''else''

    '
  stdout: ''
  timestamp: 1661907410
