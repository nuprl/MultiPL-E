{
  "language": "lua",
  "name": "HumanEval_156_int_to_mini_roman",
  "results": [
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local roman_numeral = {'m':1000, 'd':500, 'c':100, 'l':50, 'x':10, 'v':5, 'i':1}\n    local roman_numeral_list = {'m':'m', 'd':'d', 'c':'c', 'l':'l', 'x':'x', 'v':'v', 'i':'i'}\n    local result = \"\"\n    for i = 1, #roman_numeral_list, 2 do\n        if number >= roman_numeral[roman_numeral_list[i]] then\n            result = result .. roman_numeral_list[i]\n            number = number - roman_numeral[roman_numeral_list[i]]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpejc_5_sq.lua:12: '}' expected near ':'\n",
      "stdout": "",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number >= 1000 do\n        result = string.gsub(result, \"m\", \"mm\")\n        number = number - 1000\n    end\n    while number >= 900 do\n        result = string.gsub(result, \"cm\", \"cmm\")\n        number = number - 900\n    end\n    while number >= 500 do\n        result = string.gsub(result, \"d\", \"dd\")\n        number = number - 500\n    end\n    while number >= 400 do\n        result = string.gsub(result, \"cd\", \"cd\")\n        number = number - 400\n    end\n    while number >= 100 do\n        result = string.gsub(result, \"c\", \"cc\")\n        number = number - 100\n    end\n    while number >= 90 do\n        result = string.gsub(result, \"xc\", \"xcc\")\n        number = number - 90\n    end\n    while number >= 50 do\n        result = string.gsub(result, \"l\", \"ll\")\n        number = number - 50\n    end\n    while number >= 40 do\n        result = string.gsub(result, \"xl\", \"xll\")\n        number = number - 40\n    end\n    while number >= 10 do\n        result = string.gsub(result, \"x\", \"xx\")\n        number = number - 10\n    end\n    while number >= 9 do\n        result = string.gsub(result, \"ix\", \"ix\")\n        number = number - 9\n    end\n    while number >= 5 do\n        result = string.gsub(result, \"v\", \"vv\")\n        number = number - 5\n    end\n    while number >= 4 do\n        result = string.gsub(result, \"iv\", \"iv\")\n        number = number - 4\n    end\n    while number >= 1 do\n        result = string.gsub(result, \"i\", \"ii\")\n        number = number - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphjfxz3tt.lua:72: expected: \"xix\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmphjfxz3tt.lua:72: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local roman_numerals = {\n        'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000\n    }\n    local result = ''\n    for i = 1, #roman_numerals, 2 do\n        if number >= roman_numerals[i] then\n            result = result .. string.lower(roman_numerals[i])\n            number = number - roman_numerals[i]\n        else\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpofwql_2d.lua:13: '}' expected (to close '{' at line 12) near ':'\n",
      "stdout": "",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local num = number\n    local i = 1\n    while num > 0 do\n        if num >= 1000 then\n            result = result .. \"m\"\n            num = num - 1000\n        end\n        if num >= 900 then\n            result = result .. \"cm\"\n            num = num - 900\n        end\n        if num >= 500 then\n            result = result .. \"d\"\n            num = num - 500\n        end\n        if num >= 400 then\n            result = result .. \"cd\"\n            num = num - 400\n        end\n        if num >= 100 then\n            result = result .. \"c\"\n            num = num - 100\n        end\n        if num >= 90 then\n            result = result .. \"xc\"\n            num = num - 90\n        end\n        if num >= 50 then\n            result = result .. \"l\"\n            num = num - 50\n        end\n        if num >= 40 then\n            result = result .. \"xl\"\n            num = num - 40\n        end\n        if num >= 10 then\n            result = result .. \"x\"\n            num = num - 10\n        end\n        if num >= 9 then\n            result = result .. \"ix\"\n            num = num - 9\n        end\n        if num >= 5 then\n            result = result .. \"v\"\n            num = num - 5\n        end\n        if num >= 4 then\n            result = result .. \"iv\"\n            num = num - 4\n        end\n        if num >= 1 then\n            result = result .. \"i\"\n            num = num - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpigin40s2.lua:78: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpigin40s2.lua:78: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 0,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        elseif number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        elseif number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        elseif number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        elseif number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        elseif number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        elseif number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        elseif number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        elseif number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        elseif number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        elseif number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        elseif number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        elseif number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 0,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        elseif number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        elseif number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        elseif number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        elseif number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        elseif number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        elseif number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        elseif number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        elseif number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        elseif number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        elseif number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        elseif number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        elseif number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local table = {\n        'I' = 1,\n        'V' = 5,\n        'X' = 10,\n        'L' = 50,\n        'C' = 100,\n        'D' = 500,\n        'M' = 1000\n    }\n    local result = \"\"\n    for i = 1, #table do\n        if number >= table[i] then\n            result = result .. table[i]\n            number = number - table[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpwafzjebl.lua:13: '}' expected (to close '{' at line 12) near '='\n",
      "stdout": "",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    for i = 1, number do\n        if i < 4 then\n            result = result .. string.char(string.byte(i + 10))\n        else\n            result = result .. string.char(string.byte(i + 90))\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwos5ww_x.lua:26: expected: \"xix\"\nactual: \"1119999991111111111\"\nstack traceback:\n\t/tmp/tmpwos5ww_x.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local table = {\n        1000 = 'm',\n        900 = 'cm',\n        500 = 'd',\n        400 = 'cd',\n        100 = 'c',\n        90 = 'xc',\n        50 = 'l',\n        40 = 'xl',\n        10 = 'x',\n        9 = 'ix',\n        5 = 'v',\n        4 = 'iv',\n        1 = 'i'\n    }\n    local result = \"\"\n    for i = 1, #table do\n        if number >= table[i] then\n            result = result .. table[i]\n            number = number - table[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp70_no6iu.lua:13: '}' expected (to close '{' at line 12) near '='\n",
      "stdout": "",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    for i = 1, 9 do\n        result = result .. string.char(number % 10)\n        number = number / 10\n    end\n    for i = 9, 1, -1 do\n        result = result .. string.char(number % 10)\n        number = number / 10\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvbmzrlau.lua:14: bad argument #1 to 'char' (number has no integer representation)\nstack traceback:\n\t/tmp/tmpvbmzrlau.lua:14: in local 'candidate'\n\t/tmp/tmpvbmzrlau.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local roman_numeral = {}\n    local num_map = {\n        1: 'i',\n        5: 'v',\n        10: 'x',\n        50: 'l',\n        100: 'c',\n        500: 'd',\n        1000: 'm'\n    }\n    for k, v in num_map.iteritems() do\n        if number >= k then\n            number = number - k\n            roman_numeral[k] = v\n        end\n    end\n    return roman_numeral[number]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpxdonmi_6.lua:14: '}' expected (to close '{' at line 13) near ':'\n",
      "stdout": "",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local roman_numeral = {}\n    for i = 1, 9 do\n        roman_numeral[i] = string.char(i)\n    end\n    for i = 10, 100 do\n        roman_numeral[i] = string.char(i)\n        roman_numeral[i+10] = string.char(i)\n    end\n    for i = 100, 1000 do\n        roman_numeral[i] = string.char(i)\n        roman_numeral[i+100] = string.char(i)\n        roman_numeral[i+100] = string.char(i)\n    end\n    return string.gsub(string.gsub(string.gsub(number, '%d', function(n) return roman_numeral[n] end), '%c', function(n) return roman_numeral[n] end), '%b', function(n) return roman_numeral[n] end), '%s', function(n) return roman_numeral[n] end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp_e8tzzn4.lua:25: 'end' expected (to close 'function' at line 11) near ')'\n",
      "stdout": "",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while i <= number do\n        if number % i == 0 then\n            result = string.format('%s%s', result, string.lower(string.format('%d', i)))\n        else\n            result = string.format('%s%s', result, string.lower(string.format('%d', i)))\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkfjozofm.lua:28: expected: \"xix\"\nactual: \"12345678910111213141516171819\"\nstack traceback:\n\t/tmp/tmpkfjozofm.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while i <= number do\n        if number % i == 0 then\n            result = result .. string.lower(roman_numerals[i])\n            number = number / i\n        else\n            result = result .. string.lower(roman_numerals[i])\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnf6q7wc_.lua:16: attempt to index a nil value (global 'roman_numerals')\nstack traceback:\n\t/tmp/tmpnf6q7wc_.lua:16: in local 'candidate'\n\t/tmp/tmpnf6q7wc_.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local roman_numeral = {}\n    local roman_numeral_list = {'m': 1000, 'd': 500, 'c': 100, 'l': 50, 'x': 10, 'v': 5, 'i': 1}\n    for k, v in pairs(roman_numeral_list) do\n        if number >= v then\n            number -= v\n            roman_numeral[k] = true\n        end\n    end\n    return string.gsub(string.pack(''), '%d', roman_numeral)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpx_x6o0i3.lua:13: '}' expected near ':'\n",
      "stdout": "",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    for i = 1, 3 do\n        if number >= 10 then\n            result = string.format('%s%s', result, number % 10)\n            number = number / 10\n        else\n            result = string.format('%s%s', result, number)\n            break\n        end\n    end\n    return string.lower(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa1532919.lua:28: expected: \"xix\"\nactual: \"91.9\"\nstack traceback:\n\t/tmp/tmpa1532919.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number >= 10 do\n        result = string.char(number % 10) .. result\n        number = number / 10\n        i = i + 1\n    end\n    while number > 0 do\n        result = string.char(number % 10) .. result\n        number = number / 10\n        i = i + 1\n    end\n    return string.lower(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbztq3zcs.lua:20: bad argument #1 to 'char' (number has no integer representation)\nstack traceback:\n\t/tmp/tmpbztq3zcs.lua:20: in local 'candidate'\n\t/tmp/tmpbztq3zcs.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamrx2jcf.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpamrx2jcf.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local table = {\n        'M': 1000,\n        'CM': 900,\n        'D': 500,\n        'CD': 400,\n        'C': 100,\n        'XC': 90,\n        'L': 50,\n        'XL': 40,\n        'X': 10,\n        'IX': 9,\n        'V': 5,\n        'IV': 4,\n        'I': 1\n    }\n    local result = \"\"\n    for i = 1, #table do\n        if number >= table[i] then\n            result = string.format('%s%s', result, table[i])\n            number = number - table[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpryai37sv.lua:13: '}' expected (to close '{' at line 12) near ':'\n",
      "stdout": "",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    for i = 1, number do\n        if i < 4 then\n            result = result .. \"i\"\n        elseif i < 9 then\n            result = result .. \"v\"\n        elseif i < 40 then\n            result = result .. \"x\"\n        elseif i < 90 then\n            result = result .. \"l\"\n        elseif i < 400 then\n            result = result .. \"c\"\n        else\n            result = result .. \"d\"\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpepvy175d.lua:34: expected: \"xix\"\nactual: \"iiivvvvvxxxxxxxxxxx\"\nstack traceback:\n\t/tmp/tmpepvy175d.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    for i = 1, 9 do\n        result = result .. string.char(number % 10)\n        number = number / 10\n    end\n    for i = 9, 1, -1 do\n        result = result .. string.char(number % 10)\n        number = number / 10\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvbmzrlau.lua:14: bad argument #1 to 'char' (number has no integer representation)\nstack traceback:\n\t/tmp/tmpvbmzrlau.lua:14: in local 'candidate'\n\t/tmp/tmpvbmzrlau.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907410
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local roman_numerals = {\n        'M' = 1000,\n        'CM' = 900,\n        'D' = 500,\n        'CD' = 400,\n        'C' = 100,\n        'XC' = 90,\n        'L' = 50,\n        'XL' = 40,\n        'X' = 10,\n        'IX' = 9,\n        'V' = 5,\n        'IV' = 4,\n        'I' = 1\n    }\n    local roman_numeral = ''\n    for i = 1, #roman_numerals, 2 do\n        if number >= roman_numerals[i] and number < roman_numerals[i+1] then\n            roman_numeral = roman_numeral .. string.lower(roman_numerals[i])\n            number = number - roman_numerals[i]\n        end\n    end\n    return roman_numeral\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmpim2ltugb.lua:13: '}' expected (to close '{' at line 12) near '='\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamrx2jcf.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpamrx2jcf.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    for i = 1, #number do\n        if number % 10 < 4 then\n            result = result .. \"x\"\n        elseif number % 10 < 9 then\n            result = result .. \"c\"\n        elseif number % 10 < 14 then\n            result = result .. \"l\"\n        elseif number % 10 < 19 then\n            result = result .. \"x\"\n        elseif number % 10 < 24 then\n            result = result .. \"c\"\n        elseif number % 10 < 29 then\n            result = result .. \"x\"\n        elseif number % 10 < 34 then\n            result = result .. \"l\"\n        elseif number % 10 < 39 then\n            result = result .. \"x\"\n        elseif number % 10 < 44 then\n            result = result .. \"c\"\n        elseif number % 10 < 49 then\n            result = result .. \"x\"\n        elseif number % 10 < 54 then\n            result = result .. \"l\"\n        elseif number % 10 < 59 then\n            result = result .. \"x\"\n        elseif number % 10 < 64 then\n            result = result .. \"c\"\n        elseif number % 10 < 69 then\n            result = result .. \"x\"\n        elseif number % 10 < 74 then\n            result = result .. \"l\"\n        elseif number % 10 < 79 then\n            result = result .. \"x\"\n        elseif number % 10 < 84 then\n            result = result .. \"c\"\n        elseif number % 10 < 89 then\n            result = result .. \"x\"\n        elseif number % 10 < 94 then\n            result = result .. \"l\"\n        elseif number % 10 < 99 then\n            result = result .. \"x\"\n        elseif number % 10 < 104 then\n            result = result .. \"c\"\n        elseif number % 10 < 109 then\n            result = result .. \"x\"\n        elseif number % 10 < 114 then\n            result = result .. \"l\"\n        elseif number % 10 < 119 then\n            result = result .. \"x\"\n        elseif number % 10 < 124 then\n            result = result .. \"c\"\n        elseif number % 10 < 129 then\n            result = result .. \"x\"\n        elseif\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmp96xdqxe_.lua:67: 'then' expected near '='\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    for i = 1, 3 do\n        if number >= 10 then\n            result = string.format('%s%s', result, number % 10)\n            number = number / 10\n        else\n            result = string.format('%s%s', result, number)\n            number = 0\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbhtvxs5n.lua:28: expected: \"xix\"\nactual: \"91.90\"\nstack traceback:\n\t/tmp/tmpbhtvxs5n.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local roman_numerals = {\n        'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000\n    }\n    local result = \"\"\n    for i = 1, #roman_numerals, 2 do\n        if number >= roman_numerals[i] then\n            result = string.format('%s%s', result, string.lower(roman_numerals[i]))\n            number -= roman_numerals[i]\n        else\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmp1vojbpl_.lua:13: '}' expected (to close '{' at line 12) near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 0,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        elseif number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        elseif number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        elseif number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        elseif number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        elseif number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        elseif number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        elseif number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        elseif number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        elseif number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        elseif number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        elseif number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        elseif number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 0,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        elseif number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        elseif number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        elseif number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        elseif number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        elseif number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        elseif number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        elseif number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        elseif number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        elseif number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        elseif number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        elseif number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        elseif number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907410
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    for i = 1, 9 do\n        if number >= i then\n            result = result .. string.char(string.byte(number - i + 1) - 1)\n        else\n            result = result .. string.char(string.byte(i) - 1)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdji_dx0m.lua:26: expected: \"xix\"\nactual: \"000000000\"\nstack traceback:\n\t/tmp/tmpdji_dx0m.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local roman_numeral = {}\n    local roman_numeral_map = {\n        1000: \"m\",\n        900: \"cm\",\n        500: \"d\",\n        400: \"cd\",\n        100: \"c\",\n        90: \"xc\",\n        50: \"l\",\n        40: \"xl\",\n        10: \"x\",\n        9: \"ix\",\n        5: \"v\",\n        4: \"iv\",\n        1: \"i\"\n    }\n    for k, v in pairs(roman_numeral_map) do\n        if number >= k then\n            number = number - k\n            roman_numeral[#roman_numeral + 1] = v\n        end\n    end\n    return roman_numeral[1] .. \" \" .. roman_numeral[#roman_numeral]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmp9dmjc9le.lua:14: '}' expected (to close '{' at line 13) near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number >= 1000 do\n        result = string.format('%04d', number)\n        number = number - 1000\n        i = i + 1\n    end\n    while number >= 900 do\n        result = string.format('%03d', number)\n        number = number - 900\n        i = i + 1\n    end\n    while number >= 500 do\n        result = string.format('%02d', number)\n        number = number - 500\n        i = i + 1\n    end\n    while number >= 400 do\n        result = string.format('%01d', number)\n        number = number - 400\n        i = i + 1\n    end\n    while number >= 100 do\n        result = string.format('%d', number)\n        number = number - 100\n        i = i + 1\n    end\n    while number >= 90 do\n        result = string.format('%d', number)\n        number = number - 90\n        i = i + 1\n    end\n    while number >= 50 do\n        result = string.format('%d', number)\n        number = number - 50\n        i = i + 1\n    end\n    while number >= 40 do\n        result = string.format('%d', number)\n        number = number - 40\n        i = i + 1\n    end\n    while number >= 10 do\n        result = string.format('%d', number)\n        number = number - 10\n        i = i + 1\n    end\n    while number >= 9 do\n        result = string.format('%d', number)\n        number = number - 9\n        i = i + 1\n    end\n    while number >= 5 do\n        result = string.format('%d', number)\n        number = number - 5\n        i = i + 1\n    end\n    while number >= 4 do\n        result = string.format('%d', number)\n        number = number - 4\n        i = i + 1\n    end\n    while number >= 1 do\n        result = string.format('%d', number)\n        number = number - 1\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk52z16fo.lua:85: expected: \"xix\"\nactual: \"9\"\nstack traceback:\n\t/tmp/tmpk52z16fo.lua:85: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamrx2jcf.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpamrx2jcf.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local roman_numerals = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000\n    }\n    local result = \"\"\n    for i = 1, #roman_numerals, 2 do\n        if number >= roman_numerals[i] then\n            result = string.format('%s%s', result, i)\n            number = number - roman_numerals[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmpjo53pcgp.lua:13: '}' expected (to close '{' at line 12) near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 0,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        elseif number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        elseif number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        elseif number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        elseif number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        elseif number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        elseif number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        elseif number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        elseif number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        elseif number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        elseif number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        elseif number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        elseif number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamrx2jcf.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpamrx2jcf.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamrx2jcf.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpamrx2jcf.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local roman_numerals = {\n        'M': 1000,\n        'CM': 900,\n        'D': 500,\n        'CD': 400,\n        'C': 100,\n        'XC': 90,\n        'L': 50,\n        'XL': 40,\n        'X': 10,\n        'IX': 9,\n        'V': 5,\n        'IV': 4,\n        'I': 1\n    }\n    local result = \"\"\n    for i = 1, #roman_numerals, 2 do\n        if number >= roman_numerals[i] then\n            result = string.format('%s%s', result, roman_numerals[i])\n            number -= roman_numerals[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmpwk77br15.lua:13: '}' expected (to close '{' at line 12) near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamrx2jcf.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpamrx2jcf.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamrx2jcf.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpamrx2jcf.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local num = number\n    local i = 1\n    while num > 0 do\n        if num >= 1000 then\n            result = result .. \"m\"\n            num = num - 1000\n        end\n        if num >= 900 then\n            result = result .. \"cm\"\n            num = num - 900\n        end\n        if num >= 500 then\n            result = result .. \"d\"\n            num = num - 500\n        end\n        if num >= 400 then\n            result = result .. \"cd\"\n            num = num - 400\n        end\n        if num >= 100 then\n            result = result .. \"c\"\n            num = num - 100\n        end\n        if num >= 90 then\n            result = result .. \"xc\"\n            num = num - 90\n        end\n        if num >= 50 then\n            result = result .. \"l\"\n            num = num - 50\n        end\n        if num >= 40 then\n            result = result .. \"xl\"\n            num = num - 40\n        end\n        if num >= 10 then\n            result = result .. \"x\"\n            num = num - 10\n        end\n        if num >= 9 then\n            result = result .. \"ix\"\n            num = num - 9\n        end\n        if num >= 5 then\n            result = result .. \"v\"\n            num = num - 5\n        end\n        if num >= 4 then\n            result = result .. \"iv\"\n            num = num - 4\n        end\n        if num >= 1 then\n            result = result .. \"i\"\n            num = num - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpigin40s2.lua:78: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpigin40s2.lua:78: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number >= 1000 do\n        result = string.format('%s%03d', result, number % 1000)\n        number = number / 1000\n        i = i + 1\n    end\n    while number >= 100 do\n        result = string.format('%s%02d', result, number % 100)\n        number = number / 100\n        i = i + 1\n    end\n    while number >= 10 do\n        result = string.format('%s%d', result, number % 10)\n        number = number / 10\n        i = i + 1\n    end\n    result = string.format('%s%d', result, number)\n    return string.lower(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1tx9jpqw.lua:29: bad argument #3 to 'format' (number has no integer representation)\nstack traceback:\n\t/tmp/tmp1tx9jpqw.lua:29: in local 'candidate'\n\t/tmp/tmp1tx9jpqw.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local table = {\n        'I' = 1,\n        'V' = 5,\n        'X' = 10,\n        'L' = 50,\n        'C' = 100,\n        'D' = 500,\n        'M' = 1000\n    }\n    local result = \"\"\n    for i = 1, #table do\n        if number >= table[i] then\n            result = result .. table[i]\n            number = number - table[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpwafzjebl.lua:13: '}' expected (to close '{' at line 12) near '='\n",
      "stdout": "",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local num = number\n    local i = 1\n    while num > 0 do\n        if num >= 1000 then\n            result = result .. \"m\"\n            num = num - 1000\n        end\n        if num >= 900 then\n            result = result .. \"cm\"\n            num = num - 900\n        end\n        if num >= 500 then\n            result = result .. \"d\"\n            num = num - 500\n        end\n        if num >= 400 then\n            result = result .. \"cd\"\n            num = num - 400\n        end\n        if num >= 100 then\n            result = result .. \"c\"\n            num = num - 100\n        end\n        if num >= 90 then\n            result = result .. \"xc\"\n            num = num - 90\n        end\n        if num >= 50 then\n            result = result .. \"l\"\n            num = num - 50\n        end\n        if num >= 40 then\n            result = result .. \"xl\"\n            num = num - 40\n        end\n        if num >= 10 then\n            result = result .. \"x\"\n            num = num - 10\n        end\n        if num >= 9 then\n            result = result .. \"ix\"\n            num = num - 9\n        end\n        if num >= 5 then\n            result = result .. \"v\"\n            num = num - 5\n        end\n        if num >= 4 then\n            result = result .. \"iv\"\n            num = num - 4\n        end\n        if num >= 1 then\n            result = result .. \"i\"\n            num = num - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpigin40s2.lua:78: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpigin40s2.lua:78: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while i <= number do\n        if number % 10 == 1 then\n            result = result .. \"x\"\n        elseif number % 10 == 2 then\n            result = result .. \"x\"\n            result = result .. \"c\"\n        elseif number % 10 == 3 then\n            result = result .. \"c\"\n        elseif number % 10 == 4 then\n            result = result .. \"c\"\n            result = result .. \"d\"\n        elseif number % 10 == 5 then\n            result = result .. \"d\"\n        elseif number % 10 == 6 then\n            result = result .. \"d\"\n            result = result .. \"x\"\n        elseif number % 10 == 7 then\n            result = result .. \"x\"\n        elseif number % 10 == 8 then\n            result = result .. \"x\"\n            result = result .. \"c\"\n        elseif number % 10 == 9 then\n            result = result .. \"c\"\n        else\n            result = result .. \"?\"\n        end\n        number = number / 10\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprtgb6vuh.lua:49: expected: \"xix\"\nactual: \"c\"\nstack traceback:\n\t/tmp/tmprtgb6vuh.lua:49: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number >= 1000 do\n        result = string.format('%s%03d', result, number % 1000)\n        number = number / 1000\n        i = i + 1\n    end\n    while number >= 100 do\n        result = string.format('%s%02d', result, number % 100)\n        number = number / 100\n        i = i + 1\n    end\n    while number >= 10 do\n        result = string.format('%s%d', result, number % 10)\n        number = number / 10\n        i = i + 1\n    end\n    result = string.format('%s%d', result, number)\n    return string.lower(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1tx9jpqw.lua:29: bad argument #3 to 'format' (number has no integer representation)\nstack traceback:\n\t/tmp/tmp1tx9jpqw.lua:29: in local 'candidate'\n\t/tmp/tmp1tx9jpqw.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    for i = 1, 9 do\n        if number >= i then\n            result = result .. string.char(string.byte(\"M\"..i))\n            number = number - i\n        elseif number >= 5 then\n            result = result .. string.char(string.byte(\"D\"..i))\n            number = number - 5\n        elseif number >= 10 then\n            result = result .. string.char(string.byte(\"C\"..i))\n            number = number - 10\n        end\n    end\n    if number >= 5 then\n        result = result .. string.char(string.byte(\"L\"..number))\n    elseif number >= 10 then\n        result = result .. string.char(string.byte(\"X\"..number))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2bz96_jh.lua:36: expected: \"xix\"\nactual: \"MMMMM\"\nstack traceback:\n\t/tmp/tmp2bz96_jh.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamrx2jcf.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpamrx2jcf.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result..\"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result..\"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result..\"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result..\"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result..\"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result..\"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result..\"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result..\"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result..\"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result..\"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result..\"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result..\"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result..\"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ptcug0y.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmp3ptcug0y.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number >= 10 do\n        result = string.byte(number % 10) + result\n        number = number / 10\n        i = i + 1\n    end\n    while number > 0 do\n        result = string.byte(number % 10) + result\n        number = number / 10\n        i = i + 1\n    end\n    return string.byte(i) .. result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp653w9b68.lua:15: attempt to add a 'number' with a 'string'\nstack traceback:\n\t/tmp/tmp653w9b68.lua:15: in local 'candidate'\n\t/tmp/tmp653w9b68.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local roman_numeral = {}\n    for i = 1, 9 do\n        roman_numeral[i] = string.char(i + 48)\n    end\n    for i = 10, 100 do\n        roman_numeral[i] = string.char(i/10 + 48)\n    end\n    for i = 100, 1000 do\n        roman_numeral[i] = string.char(i/100 + 48)\n    end\n    for i = 1, number do\n        local roman_numeral_part = \"\"\n        for j = 1, 9 do\n            if number >= j then\n                roman_numeral_part = roman_numeral_part .. roman_numeral[j]\n                number = number - j\n            end\n        end\n        if number > 0 then\n            roman_numeral_part = roman_numeral_part .. roman_numeral[number]\n        end\n        return roman_numeral_part\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcy8n6n__.lua:17: bad argument #1 to 'char' (number has no integer representation)\nstack traceback:\n\t/tmp/tmpcy8n6n__.lua:17: in local 'candidate'\n\t/tmp/tmpcy8n6n__.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local roman_numeral = {}\n    local roman_numeral_map = {\n        1000 = 'm',\n        900 = 'cm',\n        500 = 'd',\n        400 = 'cd',\n        100 = 'c',\n        90 = 'xc',\n        50 = 'l',\n        40 = 'xl',\n        10 = 'x',\n        9 = 'ix',\n        5 = 'v',\n        4 = 'iv',\n        1 = 'i'\n    }\n    for k, v in pairs(roman_numeral_map) do\n        if number >= k then\n            number -= k\n            roman_numeral[#roman_numeral + 1] = v\n        end\n    end\n    return roman_numeral[1] .. roman_numeral[#roman_numeral]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmpp7k94a_2.lua:14: '}' expected (to close '{' at line 13) near '='\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local num = number\n    local i = 1\n    while num > 0 do\n        if num >= 1000 then\n            result = result .. \"m\"\n            num = num - 1000\n        end\n        if num >= 900 then\n            result = result .. \"cm\"\n            num = num - 900\n        end\n        if num >= 500 then\n            result = result .. \"d\"\n            num = num - 500\n        end\n        if num >= 400 then\n            result = result .. \"cd\"\n            num = num - 400\n        end\n        if num >= 100 then\n            result = result .. \"c\"\n            num = num - 100\n        end\n        if num >= 90 then\n            result = result .. \"xc\"\n            num = num - 90\n        end\n        if num >= 50 then\n            result = result .. \"l\"\n            num = num - 50\n        end\n        if num >= 40 then\n            result = result .. \"xl\"\n            num = num - 40\n        end\n        if num >= 10 then\n            result = result .. \"x\"\n            num = num - 10\n        end\n        if num >= 9 then\n            result = result .. \"ix\"\n            num = num - 9\n        end\n        if num >= 5 then\n            result = result .. \"v\"\n            num = num - 5\n        end\n        if num >= 4 then\n            result = result .. \"iv\"\n            num = num - 4\n        end\n        if num >= 1 then\n            result = result .. \"i\"\n            num = num - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpigin40s2.lua:78: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpigin40s2.lua:78: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamrx2jcf.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpamrx2jcf.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number >= 1000 do\n        result = result .. \"m\"\n        number = number - 1000\n    end\n    while number >= 900 do\n        result = result .. \"cm\"\n        number = number - 900\n    end\n    while number >= 500 do\n        result = result .. \"d\"\n        number = number - 500\n    end\n    while number >= 400 do\n        result = result .. \"cd\"\n        number = number - 400\n    end\n    while number >= 100 do\n        result = result .. \"c\"\n        number = number - 100\n    end\n    while number >= 90 do\n        result = result .. \"xc\"\n        number = number - 90\n    end\n    while number >= 50 do\n        result = result .. \"l\"\n        number = number - 50\n    end\n    while number >= 40 do\n        result = result .. \"xl\"\n        number = number - 40\n    end\n    while number >= 10 do\n        result = result .. \"x\"\n        number = number - 10\n    end\n    while number >= 9 do\n        result = result .. \"ix\"\n        number = number - 9\n    end\n    while number >= 5 do\n        result = result .. \"v\"\n        number = number - 5\n    end\n    while number >= 4 do\n        result = result .. \"iv\"\n        number = number - 4\n    end\n    while number >= 1 do\n        result = result .. \"i\"\n        number = number - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local roman_numerals = {\n        'I' = 1,\n        'V' = 5,\n        'X' = 10,\n        'L' = 50,\n        'C' = 100,\n        'D' = 500,\n        'M' = 1000\n    }\n    local result = \"\"\n    for i = 1, #roman_numerals, 2 do\n        if number >= roman_numerals[i] then\n            result = result .. string.lower(roman_numerals[i])\n            number = number - roman_numerals[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmpmneohwvv.lua:13: '}' expected (to close '{' at line 12) near '='\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local roman_numeral = {}\n    local roman_numeral_map = {\n        1000: \"M\",\n        900: \"CM\",\n        500: \"D\",\n        400: \"CD\",\n        100: \"C\",\n        90: \"XC\",\n        50: \"L\",\n        40: \"XL\",\n        10: \"X\",\n        9: \"IX\",\n        5: \"V\",\n        4: \"IV\",\n        1: \"I\"\n    }\n    for k, v in pairs(roman_numeral_map) do\n        if number >= k then\n            number = number - k\n            roman_numeral[#roman_numeral + 1] = v\n        end\n    end\n    return roman_numeral[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmpxem6tbeb.lua:14: '}' expected (to close '{' at line 13) near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local roman_numeral = {\n        'M': 1000,\n        'CM': 900,\n        'D': 500,\n        'CD': 400,\n        'C': 100,\n        'XC': 90,\n        'L': 50,\n        'XL': 40,\n        'X': 10,\n        'IX': 9,\n        'V': 5,\n        'IV': 4,\n        'I': 1\n    }\n    local roman_numeral_string = ''\n    for k in roman_numeral do\n        if number >= roman_numeral[k] then\n            number -= roman_numeral[k]\n            roman_numeral_string = k .. roman_numeral_string\n        end\n    end\n    return roman_numeral_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmpdu2elhg8.lua:13: '}' expected (to close '{' at line 12) near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local num = number\n    local i = 1\n    while num > 0 do\n        if num >= 1000 then\n            result = result .. \"m\"\n            num = num - 1000\n        end\n        if num >= 900 then\n            result = result .. \"cm\"\n            num = num - 900\n        end\n        if num >= 500 then\n            result = result .. \"d\"\n            num = num - 500\n        end\n        if num >= 400 then\n            result = result .. \"cd\"\n            num = num - 400\n        end\n        if num >= 100 then\n            result = result .. \"c\"\n            num = num - 100\n        end\n        if num >= 90 then\n            result = result .. \"xc\"\n            num = num - 90\n        end\n        if num >= 50 then\n            result = result .. \"l\"\n            num = num - 50\n        end\n        if num >= 40 then\n            result = result .. \"xl\"\n            num = num - 40\n        end\n        if num >= 10 then\n            result = result .. \"x\"\n            num = num - 10\n        end\n        if num >= 9 then\n            result = result .. \"ix\"\n            num = num - 9\n        end\n        if num >= 5 then\n            result = result .. \"v\"\n            num = num - 5\n        end\n        if num >= 4 then\n            result = result .. \"iv\"\n            num = num - 4\n        end\n        if num >= 1 then\n            result = result .. \"i\"\n            num = num - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpigin40s2.lua:78: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpigin40s2.lua:78: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local roman_numeral = {\n        'M' = 1000,\n        'CM' = 900,\n        'D' = 500,\n        'CD' = 400,\n        'C' = 100,\n        'XC' = 90,\n        'L' = 50,\n        'XL' = 40,\n        'X' = 10,\n        'IX' = 9,\n        'V' = 5,\n        'IV' = 4,\n        'I' = 1\n    }\n    local roman_numeral_string = ''\n    for i = 1, #roman_numeral, 2 do\n        if number >= roman_numeral[i] then\n            number -= roman_numeral[i]\n            roman_numeral_string = roman_numeral_string .. string.lower(roman_numeral[i])\n        end\n    end\n    return roman_numeral_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmpckud8ibe.lua:13: '}' expected (to close '{' at line 12) near '='\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    for i = 1, 9 do\n        if number >= i then\n            result = result .. string.char(string.byte(number - i + 1) - 1)\n        else\n            result = result .. string.char(string.byte(i - 1) - 1)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeqpqkb66.lua:26: expected: \"xix\"\nactual: \"000000000\"\nstack traceback:\n\t/tmp/tmpeqpqkb66.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result..\"m\"\n            number = number - 1000\n        elseif number >= 900 then\n            result = result..\"cm\"\n            number = number - 900\n        elseif number >= 500 then\n            result = result..\"d\"\n            number = number - 500\n        elseif number >= 400 then\n            result = result..\"cd\"\n            number = number - 400\n        elseif number >= 100 then\n            result = result..\"c\"\n            number = number - 100\n        elseif number >= 90 then\n            result = result..\"xc\"\n            number = number - 90\n        elseif number >= 50 then\n            result = result..\"l\"\n            number = number - 50\n        elseif number >= 40 then\n            result = result..\"xl\"\n            number = number - 40\n        elseif number >= 10 then\n            result = result..\"x\"\n            number = number - 10\n        elseif number >= 9 then\n            result = result..\"ix\"\n            number = number - 9\n        elseif number >= 5 then\n            result = result..\"v\"\n            number = number - 5\n        elseif number >= 4 then\n            result = result..\"iv\"\n            number = number - 4\n        elseif number >= 1 then\n            result = result..\"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local roman_numerals = {\n        'I' = 1,\n        'V' = 5,\n        'X' = 10,\n        'L' = 50,\n        'C' = 100,\n        'D' = 500,\n        'M' = 1000\n    }\n    local result = \"\"\n    for i = 1, #roman_numerals, 2 do\n        if number >= roman_numerals[i] then\n            result = string.format('%s%s', result, roman_numerals[i])\n            number = number - roman_numerals[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmpvd3rkgz4.lua:13: '}' expected (to close '{' at line 12) near '='\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local roman_numeral = {\n        'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000\n    }\n    local result = \"\"\n    for i = 1, #roman_numeral, 2 do\n        if number >= roman_numeral[i] then\n            result = result .. string.lower(roman_numeral[i])\n            number = number - roman_numeral[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmpzwepqomj.lua:13: '}' expected (to close '{' at line 12) near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamrx2jcf.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpamrx2jcf.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamrx2jcf.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpamrx2jcf.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    for i = 1, 9 do\n        if number >= i then\n            result = result .. string.char(string.byte(number - i + 1) - 1)\n        else\n            result = result .. string.char(string.byte(9 - i) + 1)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpabx8y9b5.lua:26: expected: \"xix\"\nactual: \"000000000\"\nstack traceback:\n\t/tmp/tmpabx8y9b5.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local num = number\n    local i = 1\n    while num > 0 do\n        if num >= 1000 then\n            result = result .. \"m\"\n            num = num - 1000\n        end\n        if num >= 900 then\n            result = result .. \"cm\"\n            num = num - 900\n        end\n        if num >= 500 then\n            result = result .. \"d\"\n            num = num - 500\n        end\n        if num >= 400 then\n            result = result .. \"cd\"\n            num = num - 400\n        end\n        if num >= 100 then\n            result = result .. \"c\"\n            num = num - 100\n        end\n        if num >= 90 then\n            result = result .. \"xc\"\n            num = num - 90\n        end\n        if num >= 50 then\n            result = result .. \"l\"\n            num = num - 50\n        end\n        if num >= 40 then\n            result = result .. \"xl\"\n            num = num - 40\n        end\n        if num >= 10 then\n            result = result .. \"x\"\n            num = num - 10\n        end\n        if num >= 9 then\n            result = result .. \"ix\"\n            num = num - 9\n        end\n        if num >= 5 then\n            result = result .. \"v\"\n            num = num - 5\n        end\n        if num >= 4 then\n            result = result .. \"iv\"\n            num = num - 4\n        end\n        if num >= 1 then\n            result = result .. \"i\"\n            num = num - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpigin40s2.lua:78: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpigin40s2.lua:78: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result..\"m\"\n            number = number - 1000\n        elseif number >= 900 then\n            result = result..\"cm\"\n            number = number - 900\n        elseif number >= 500 then\n            result = result..\"d\"\n            number = number - 500\n        elseif number >= 400 then\n            result = result..\"cd\"\n            number = number - 400\n        elseif number >= 100 then\n            result = result..\"c\"\n            number = number - 100\n        elseif number >= 90 then\n            result = result..\"xc\"\n            number = number - 90\n        elseif number >= 50 then\n            result = result..\"l\"\n            number = number - 50\n        elseif number >= 40 then\n            result = result..\"xl\"\n            number = number - 40\n        elseif number >= 10 then\n            result = result..\"x\"\n            number = number - 10\n        elseif number >= 9 then\n            result = result..\"ix\"\n            number = number - 9\n        elseif number >= 5 then\n            result = result..\"v\"\n            number = number - 5\n        elseif number >= 4 then\n            result = result..\"iv\"\n            number = number - 4\n        elseif number >= 1 then\n            result = result..\"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local num = number\n    local i = 1\n    while num > 0 do\n        if num >= 1000 then\n            result = result .. \"m\"\n            num = num - 1000\n        elseif num >= 900 then\n            result = result .. \"cm\"\n            num = num - 900\n        elseif num >= 500 then\n            result = result .. \"d\"\n            num = num - 500\n        elseif num >= 400 then\n            result = result .. \"cd\"\n            num = num - 400\n        elseif num >= 100 then\n            result = result .. \"c\"\n            num = num - 100\n        elseif num >= 90 then\n            result = result .. \"xc\"\n            num = num - 90\n        elseif num >= 50 then\n            result = result .. \"l\"\n            num = num - 50\n        elseif num >= 40 then\n            result = result .. \"xl\"\n            num = num - 40\n        elseif num >= 10 then\n            result = result .. \"x\"\n            num = num - 10\n        elseif num >= 9 then\n            result = result .. \"ix\"\n            num = num - 9\n        elseif num >= 5 then\n            result = result .. \"v\"\n            num = num - 5\n        elseif num >= 4 then\n            result = result .. \"iv\"\n            num = num - 4\n        elseif num >= 1 then\n            result = result .. \"i\"\n            num = num - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": ".\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamrx2jcf.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpamrx2jcf.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local num = number\n    local i = 1\n    while num > 0 do\n        if num >= 1000 then\n            result = result .. \"m\"\n            num = num - 1000\n        end\n        if num >= 900 then\n            result = result .. \"cm\"\n            num = num - 900\n        end\n        if num >= 500 then\n            result = result .. \"d\"\n            num = num - 500\n        end\n        if num >= 400 then\n            result = result .. \"cd\"\n            num = num - 400\n        end\n        if num >= 100 then\n            result = result .. \"c\"\n            num = num - 100\n        end\n        if num >= 90 then\n            result = result .. \"xc\"\n            num = num - 90\n        end\n        if num >= 50 then\n            result = result .. \"l\"\n            num = num - 50\n        end\n        if num >= 40 then\n            result = result .. \"xl\"\n            num = num - 40\n        end\n        if num >= 10 then\n            result = result .. \"x\"\n            num = num - 10\n        end\n        if num >= 9 then\n            result = result .. \"ix\"\n            num = num - 9\n        end\n        if num >= 5 then\n            result = result .. \"v\"\n            num = num - 5\n        end\n        if num >= 4 then\n            result = result .. \"iv\"\n            num = num - 4\n        end\n        if num >= 1 then\n            result = result .. \"i\"\n            num = num - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpigin40s2.lua:78: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpigin40s2.lua:78: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 0,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        elseif number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        elseif number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        elseif number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        elseif number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        elseif number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        elseif number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        elseif number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        elseif number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        elseif number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        elseif number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        elseif number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        elseif number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local num = number\n    local i = 1\n    while num > 0 do\n        if num >= 1000 then\n            result = result .. \"m\"\n            num = num - 1000\n        end\n        if num >= 900 then\n            result = result .. \"cm\"\n            num = num - 900\n        end\n        if num >= 500 then\n            result = result .. \"d\"\n            num = num - 500\n        end\n        if num >= 400 then\n            result = result .. \"cd\"\n            num = num - 400\n        end\n        if num >= 100 then\n            result = result .. \"c\"\n            num = num - 100\n        end\n        if num >= 90 then\n            result = result .. \"xc\"\n            num = num - 90\n        end\n        if num >= 50 then\n            result = result .. \"l\"\n            num = num - 50\n        end\n        if num >= 40 then\n            result = result .. \"xl\"\n            num = num - 40\n        end\n        if num >= 10 then\n            result = result .. \"x\"\n            num = num - 10\n        end\n        if num >= 9 then\n            result = result .. \"ix\"\n            num = num - 9\n        end\n        if num >= 5 then\n            result = result .. \"v\"\n            num = num - 5\n        end\n        if num >= 4 then\n            result = result .. \"iv\"\n            num = num - 4\n        end\n        if num >= 1 then\n            result = result .. \"i\"\n            num = num - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpigin40s2.lua:78: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpigin40s2.lua:78: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local num = number\n    local i = 1\n    while num > 0 do\n        if num >= 1000 then\n            result = result..\"m\"\n            num = num - 1000\n        elseif num >= 900 then\n            result = result..\"cm\"\n            num = num - 900\n        elseif num >= 500 then\n            result = result..\"d\"\n            num = num - 500\n        elseif num >= 400 then\n            result = result..\"cd\"\n            num = num - 400\n        elseif num >= 100 then\n            result = result..\"c\"\n            num = num - 100\n        elseif num >= 90 then\n            result = result..\"xc\"\n            num = num - 90\n        elseif num >= 50 then\n            result = result..\"l\"\n            num = num - 50\n        elseif num >= 40 then\n            result = result..\"xl\"\n            num = num - 40\n        elseif num >= 10 then\n            result = result..\"x\"\n            num = num - 10\n        elseif num >= 9 then\n            result = result..\"ix\"\n            num = num - 9\n        elseif num >= 5 then\n            result = result..\"v\"\n            num = num - 5\n        elseif num >= 4 then\n            result = result..\"iv\"\n            num = num - 4\n        elseif num >= 1 then\n            result = result..\"i\"\n            num = num - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    for i = 1, 9 do\n        result = result .. string.char(number % 10)\n        number = number / 10\n    end\n    for i = 9, 5 do\n        result = result .. string.char(number % 10)\n        number = number / 10\n    end\n    for i = 4, 1 do\n        result = result .. string.char(number % 10)\n        number = number / 10\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp8vel8e4.lua:14: bad argument #1 to 'char' (number has no integer representation)\nstack traceback:\n\t/tmp/tmpp8vel8e4.lua:14: in local 'candidate'\n\t/tmp/tmpp8vel8e4.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    for i = 1,9 do\n        result = result .. string.char(number % 10)\n        number = number / 10\n    end\n    return string.lower(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdgpzskn7.lua:14: bad argument #1 to 'char' (number has no integer representation)\nstack traceback:\n\t/tmp/tmpdgpzskn7.lua:14: in local 'candidate'\n\t/tmp/tmpdgpzskn7.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamrx2jcf.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpamrx2jcf.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local num = number\n    local i = 1\n    while num > 0 do\n        if num >= 1000 then\n            result = result .. \"m\"\n            num = num - 1000\n        end\n        if num >= 900 then\n            result = result .. \"cm\"\n            num = num - 900\n        end\n        if num >= 500 then\n            result = result .. \"d\"\n            num = num - 500\n        end\n        if num >= 400 then\n            result = result .. \"cd\"\n            num = num - 400\n        end\n        if num >= 100 then\n            result = result .. \"c\"\n            num = num - 100\n        end\n        if num >= 90 then\n            result = result .. \"xc\"\n            num = num - 90\n        end\n        if num >= 50 then\n            result = result .. \"l\"\n            num = num - 50\n        end\n        if num >= 40 then\n            result = result .. \"xl\"\n            num = num - 40\n        end\n        if num >= 10 then\n            result = result .. \"x\"\n            num = num - 10\n        end\n        if num >= 9 then\n            result = result .. \"ix\"\n            num = num - 9\n        end\n        if num >= 5 then\n            result = result .. \"v\"\n            num = num - 5\n        end\n        if num >= 4 then\n            result = result .. \"iv\"\n            num = num - 4\n        end\n        if num >= 1 then\n            result = result .. \"i\"\n            num = num - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpigin40s2.lua:78: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpigin40s2.lua:78: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamrx2jcf.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpamrx2jcf.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local roman_numerals = {\n        'M': 1000,\n        'CM': 900,\n        'D': 500,\n        'CD': 400,\n        'C': 100,\n        'XC': 90,\n        'L': 50,\n        'XL': 40,\n        'X': 10,\n        'IX': 9,\n        'V': 5,\n        'IV': 4,\n        'I': 1\n    }\n    local roman_numeral = ''\n    for i = 1, #roman_numerals do\n        if number >= roman_numerals[i] then\n            number -= roman_numerals[i]\n            roman_numeral = roman_numeral .. roman_numerals[i]\n        end\n    end\n    return roman_numeral\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmp_9s6nel4.lua:13: '}' expected (to close '{' at line 12) near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamrx2jcf.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpamrx2jcf.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local table = {\n        'M': 1000,\n        'CM': 900,\n        'D': 500,\n        'CD': 400,\n        'C': 100,\n        'XC': 90,\n        'L': 50,\n        'XL': 40,\n        'X': 10,\n        'IX': 9,\n        'V': 5,\n        'IV': 4,\n        'I': 1\n    }\n    local result = \"\"\n    for i = 1, #table do\n        if number >= table[i] then\n            result = result .. table[i]\n            number = number - table[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmpvtxvt5c8.lua:13: '}' expected (to close '{' at line 12) near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local roman_numeral = {}\n    for i = 1, #ARGV do\n        if number >= ARGV[i] then\n            number = number - ARGV[i]\n            roman_numeral[i] = true\n        else\n            roman_numeral[i] = false\n        end\n    end\n    for i = #roman_numeral, 1, -1 do\n        if roman_numeral[i] then\n            return string.gsub(ARGV[i], 'I', 'V')\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplsyfve9e.lua:13: attempt to get length of a nil value (global 'ARGV')\nstack traceback:\n\t/tmp/tmplsyfve9e.lua:13: in local 'candidate'\n\t/tmp/tmplsyfve9e.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamrx2jcf.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpamrx2jcf.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamrx2jcf.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpamrx2jcf.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamrx2jcf.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpamrx2jcf.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local num = number\n    local i = 1\n    while num > 0 do\n        if num >= 1000 then\n            result = result .. \"m\"\n            num = num - 1000\n        end\n        if num >= 900 then\n            result = result .. \"cm\"\n            num = num - 900\n        end\n        if num >= 500 then\n            result = result .. \"d\"\n            num = num - 500\n        end\n        if num >= 400 then\n            result = result .. \"cd\"\n            num = num - 400\n        end\n        if num >= 100 then\n            result = result .. \"c\"\n            num = num - 100\n        end\n        if num >= 90 then\n            result = result .. \"xc\"\n            num = num - 90\n        end\n        if num >= 50 then\n            result = result .. \"l\"\n            num = num - 50\n        end\n        if num >= 40 then\n            result = result .. \"xl\"\n            num = num - 40\n        end\n        if num >= 10 then\n            result = result .. \"x\"\n            num = num - 10\n        end\n        if num >= 9 then\n            result = result .. \"ix\"\n            num = num - 9\n        end\n        if num >= 5 then\n            result = result .. \"v\"\n            num = num - 5\n        end\n        if num >= 4 then\n            result = result .. \"iv\"\n            num = num - 4\n        end\n        if num >= 1 then\n            result = result .. \"i\"\n            num = num - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpigin40s2.lua:78: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpigin40s2.lua:78: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local roman_numerals = {\n        'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000\n    }\n    local result = \"\"\n    for i = 1, #roman_numerals, 2 do\n        if number >= roman_numerals[i] then\n            result = result .. string.lower(roman_numerals[i])\n            number = number - roman_numerals[i]\n        else\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmphrkqf2ag.lua:13: '}' expected (to close '{' at line 12) near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local roman_numerals = {\n        'M': 1000,\n        'CM': 900,\n        'D': 500,\n        'CD': 400,\n        'C': 100,\n        'XC': 90,\n        'L': 50,\n        'XL': 40,\n        'X': 10,\n        'IX': 9,\n        'V': 5,\n        'IV': 4,\n        'I': 1\n    }\n    local roman_numeral = ''\n    for k in roman_numerals do\n        if number >= roman_numerals[k] then\n            number -= roman_numerals[k]\n            roman_numeral = k\n        end\n    end\n    return roman_numeral\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmp_4tvwood.lua:13: '}' expected (to close '{' at line 12) near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    for i = 1, 9 do\n        if number >= i then\n            result = result .. string.char(string.byte(number - i + 48) - 48)\n        else\n            result = result .. string.char(string.byte(i) - 48)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqox5oi_v.lua:26: expected: \"xix\"\nactual: \"\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0005\u0005\"\nstack traceback:\n\t/tmp/tmpqox5oi_v.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamrx2jcf.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpamrx2jcf.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    for i = 1, 9 do\n        if number >= i then\n            result = result .. string.char(string.byte(\"M\"..i))\n            number = number - i\n        elseif number >= 5 then\n            result = result .. string.char(string.byte(\"D\"..i))\n            number = number - 5\n        elseif number >= 10 then\n            result = result .. string.char(string.byte(\"C\"..i))\n            number = number - 10\n        elseif number >= 50 then\n            result = result .. string.char(string.byte(\"L\"..i))\n            number = number - 50\n        elseif number >= 100 then\n            result = result .. string.char(string.byte(\"X\"..i))\n            number = number - 100\n        elseif number >= 500 then\n            result = result .. string.char(string.byte(\"V\"..i))\n            number = number - 500\n        elseif number >= 1000 then\n            result = result .. string.char(string.byte(\"I\"..i))\n            number = number - 1000\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo78__gnf.lua:43: expected: \"xix\"\nactual: \"MMMMM\"\nstack traceback:\n\t/tmp/tmpo78__gnf.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local roman_numeral = {}\n    local num_table = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n    for key, value in num_table.iteritems() do\n        if number >= key then\n            number -= key\n            roman_numeral[#roman_numeral + 1] = value\n        end\n    end\n    return roman_numeral[1] .. roman_numeral[#roman_numeral]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmpngls5pib.lua:14: '}' expected (to close '{' at line 13) near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamrx2jcf.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpamrx2jcf.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamrx2jcf.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpamrx2jcf.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local num = number\n    local i = 1\n    while num > 0 do\n        if num >= 1000 then\n            result = result .. \"m\"\n            num = num - 1000\n        end\n        if num >= 900 then\n            result = result .. \"cm\"\n            num = num - 900\n        end\n        if num >= 500 then\n            result = result .. \"d\"\n            num = num - 500\n        end\n        if num >= 400 then\n            result = result .. \"cd\"\n            num = num - 400\n        end\n        if num >= 100 then\n            result = result .. \"c\"\n            num = num - 100\n        end\n        if num >= 90 then\n            result = result .. \"xc\"\n            num = num - 90\n        end\n        if num >= 50 then\n            result = result .. \"l\"\n            num = num - 50\n        end\n        if num >= 40 then\n            result = result .. \"xl\"\n            num = num - 40\n        end\n        if num >= 10 then\n            result = result .. \"x\"\n            num = num - 10\n        end\n        if num >= 9 then\n            result = result .. \"ix\"\n            num = num - 9\n        end\n        if num >= 5 then\n            result = result .. \"v\"\n            num = num - 5\n        end\n        if num >= 4 then\n            result = result .. \"iv\"\n            num = num - 4\n        end\n        if num >= 1 then\n            result = result .. \"i\"\n            num = num - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpigin40s2.lua:78: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpigin40s2.lua:78: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    for i = 1, 9 do\n        if number >= i then\n            result = result .. string.char(string.byte(number - i + 48) - 48)\n        else\n            result = result .. string.char(string.byte(i - number + 48) - 48)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1toh4177.lua:26: expected: \"xix\"\nactual: \"\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0005\u0005\"\nstack traceback:\n\t/tmp/tmp1toh4177.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local num = number\n    local i = 1\n    while num > 0 do\n        if num >= 1000 then\n            result = result .. \"m\"\n            num -= 1000\n        end\n        if num >= 900 then\n            result = result .. \"cm\"\n            num -= 900\n        end\n        if num >= 500 then\n            result = result .. \"d\"\n            num -= 500\n        end\n        if num >= 400 then\n            result = result .. \"cd\"\n            num -= 400\n        end\n        if num >= 100 then\n            result = result .. \"c\"\n            num -= 100\n        end\n        if num >= 90 then\n            result = result .. \"xc\"\n            num -= 90\n        end\n        if num >= 50 then\n            result = result .. \"l\"\n            num -= 50\n        end\n        if num >= 40 then\n            result = result .. \"xl\"\n            num -= 40\n        end\n        if num >= 10 then\n            result = result .. \"x\"\n            num -= 10\n        end\n        if num >= 9 then\n            result = result .. \"ix\"\n            num -= 9\n        end\n        if num >= 5 then\n            result = result .. \"v\"\n            num -= 5\n        end\n        if num >= 4 then\n            result = result .. \"iv\"\n            num -= 4\n        end\n        if num >= 1 then\n            result = result .. \"i\"\n            num -= 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmp28v6ltcx.lua:18: syntax error near '-'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local num = number\n    local i = 1\n    while num > 0 do\n        if num >= 1000 then\n            result = result .. \"m\"\n            num = num - 1000\n        end\n        if num >= 900 then\n            result = result .. \"cm\"\n            num = num - 900\n        end\n        if num >= 500 then\n            result = result .. \"d\"\n            num = num - 500\n        end\n        if num >= 400 then\n            result = result .. \"cd\"\n            num = num - 400\n        end\n        if num >= 100 then\n            result = result .. \"c\"\n            num = num - 100\n        end\n        if num >= 90 then\n            result = result .. \"xc\"\n            num = num - 90\n        end\n        if num >= 50 then\n            result = result .. \"l\"\n            num = num - 50\n        end\n        if num >= 40 then\n            result = result .. \"xl\"\n            num = num - 40\n        end\n        if num >= 10 then\n            result = result .. \"x\"\n            num = num - 10\n        end\n        if num >= 9 then\n            result = result .. \"ix\"\n            num = num - 9\n        end\n        if num >= 5 then\n            result = result .. \"v\"\n            num = num - 5\n        end\n        if num >= 4 then\n            result = result .. \"iv\"\n            num = num - 4\n        end\n        if num >= 1 then\n            result = result .. \"i\"\n            num = num - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpigin40s2.lua:78: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpigin40s2.lua:78: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local roman_numeral = {}\n    for i=1,9 do\n        roman_numeral[i] = \"m\"\n    end\n    for i=10,100 do\n        roman_numeral[i] = \"cm\"\n    end\n    for i=100,1000 do\n        roman_numeral[i] = \"cm\"\n    end\n    for i=1000,number do\n        local roman_numeral_part = \"\"\n        for j=1,9 do\n            if i-j >= 0 then\n                roman_numeral_part = roman_numeral[j]\n            end\n        end\n        if roman_numeral_part == \"\" then\n            roman_numeral_part = \"x\"\n        end\n        local roman_numeral_part_lower = string.lower(roman_numeral_part)\n        if roman_numeral_part_lower == \"m\" then\n            if i % 1000 == 0 then\n                roman_numeral_part_lower = \"mm\"\n            end\n        end\n        if roman_numeral_part_lower == \"cm\" then\n            if i % 100 == 0 then\n                roman_numeral_part_lower = \"cm\"\n            end\n        end\n        if roman_numeral_part_lower == \"x\" then\n            if i % 10 == 0 then\n                roman_numeral_part_lower = \"x\"\n            end\n        end\n        if roman_numeral_part_lower == \"ix\" then\n            if i % 9 == 0 then\n                roman_numeral_part_lower = \"ix\"\n            end\n        end\n        if roman_numeral_part_lower == \"v\" then\n            if i % 5 == 0 then\n                roman_numeral_part_lower = \"v\"\n            end\n        end\n        if roman_numeral_part_lower == \"iv\" then\n            if i % 4 == 0 then\n                roman_numeral_part_lower = \"iv\"\n            end\n        end\n        if roman_numeral_part_lower == \"i\" then\n            if i % 1 == 0 then\n                roman_numeral_part_lower = \"\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmp5bvroaod.lua:65: unfinished string near '\"'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamrx2jcf.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpamrx2jcf.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local num = number\n    local i = 1\n    while num > 0 do\n        if num >= 1000 then\n            result = result .. \"m\"\n            num -= 1000\n        end\n        if num >= 900 then\n            result = result .. \"cm\"\n            num -= 900\n        end\n        if num >= 500 then\n            result = result .. \"d\"\n            num -= 500\n        end\n        if num >= 400 then\n            result = result .. \"cd\"\n            num -= 400\n        end\n        if num >= 100 then\n            result = result .. \"c\"\n            num -= 100\n        end\n        if num >= 90 then\n            result = result .. \"xc\"\n            num -= 90\n        end\n        if num >= 50 then\n            result = result .. \"l\"\n            num -= 50\n        end\n        if num >= 40 then\n            result = result .. \"xl\"\n            num -= 40\n        end\n        if num >= 10 then\n            result = result .. \"x\"\n            num -= 10\n        end\n        if num >= 9 then\n            result = result .. \"ix\"\n            num -= 9\n        end\n        if num >= 5 then\n            result = result .. \"v\"\n            num -= 5\n        end\n        if num >= 4 then\n            result = result .. \"iv\"\n            num -= 4\n        end\n        if num >= 1 then\n            result = result .. \"i\"\n            num -= 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmp28v6ltcx.lua:18: syntax error near '-'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while i <= number do\n        if number % 10 == 1 then\n            result = result .. \"x\"\n        elseif number % 10 == 2 then\n            result = result .. \"x\"\n            result = result .. \"c\"\n        elseif number % 10 == 3 then\n            result = result .. \"c\"\n        elseif number % 10 == 4 then\n            result = result .. \"d\"\n        elseif number % 10 == 5 then\n            result = result .. \"d\"\n            result = result .. \"x\"\n        elseif number % 10 == 6 then\n            result = result .. \"x\"\n            result = result .. \"v\"\n        elseif number % 10 == 7 then\n            result = result .. \"v\"\n        elseif number % 10 == 8 then\n            result = result .. \"v\"\n            result = result .. \"i\"\n        elseif number % 10 == 9 then\n            result = result .. \"i\"\n        else\n            result = result .. \"?\"\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmpw40ublj7.lua:63: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local table = {\n        'I' = 1,\n        'V' = 5,\n        'X' = 10,\n        'L' = 50,\n        'C' = 100,\n        'D' = 500,\n        'M' = 1000\n    }\n    local result = ''\n    for i = 1, #table do\n        if number >= table[i] then\n            result = result .. table[i]\n            number = number - table[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmpo2621ynt.lua:13: '}' expected (to close '{' at line 12) near '='\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result..\"m\"\n            number = number - 1000\n        elseif number >= 900 then\n            result = result..\"cm\"\n            number = number - 900\n        elseif number >= 500 then\n            result = result..\"d\"\n            number = number - 500\n        elseif number >= 400 then\n            result = result..\"cd\"\n            number = number - 400\n        elseif number >= 100 then\n            result = result..\"c\"\n            number = number - 100\n        elseif number >= 90 then\n            result = result..\"xc\"\n            number = number - 90\n        elseif number >= 50 then\n            result = result..\"l\"\n            number = number - 50\n        elseif number >= 40 then\n            result = result..\"xl\"\n            number = number - 40\n        elseif number >= 10 then\n            result = result..\"x\"\n            number = number - 10\n        elseif number >= 9 then\n            result = result..\"ix\"\n            number = number - 9\n        elseif number >= 5 then\n            result = result..\"v\"\n            number = number - 5\n        elseif number >= 4 then\n            result = result..\"iv\"\n            number = number - 4\n        elseif number >= 1 then\n            result = result..\"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number >= 1000 do\n        result = string.format(\"%s%03d\", result, number % 1000)\n        number = number / 1000\n        i = i + 1\n    end\n    while number >= 100 do\n        result = string.format(\"%s%02d\", result, number % 100)\n        number = number / 100\n        i = i + 1\n    end\n    while number >= 10 do\n        result = string.format(\"%s%d\", result, number % 10)\n        number = number / 10\n        i = i + 1\n    end\n    result = string.format(\"%s%d\", result, number)\n    return string.lower(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwyqidof5.lua:29: bad argument #3 to 'format' (number has no integer representation)\nstack traceback:\n\t/tmp/tmpwyqidof5.lua:29: in local 'candidate'\n\t/tmp/tmpwyqidof5.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local roman_numeral = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000\n    }\n    local result = \"\"\n    for i = 1, #roman_numeral, 2 do\n        if number >= roman_numeral[i] then\n            result = string.format('%s%s', result, roman_numeral[i])\n            number = number - roman_numeral[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmp541es9q5.lua:13: '}' expected (to close '{' at line 12) near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    for i = 1, 9 do\n        if number >= i then\n            result = result .. string.char(string.byte(number - i + 48) - 48)\n        else\n            result = result .. string.char(string.byte(i) - 48)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqox5oi_v.lua:26: expected: \"xix\"\nactual: \"\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0005\u0005\"\nstack traceback:\n\t/tmp/tmpqox5oi_v.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local num = number\n    local i = 1\n    while num > 0 do\n        if num >= 1000 then\n            result = result .. \"m\"\n            num = num - 1000\n        elseif num >= 900 then\n            result = result .. \"cm\"\n            num = num - 900\n        elseif num >= 500 then\n            result = result .. \"d\"\n            num = num - 500\n        elseif num >= 400 then\n            result = result .. \"cd\"\n            num = num - 400\n        elseif num >= 100 then\n            result = result .. \"c\"\n            num = num - 100\n        elseif num >= 90 then\n            result = result .. \"xc\"\n            num = num - 90\n        elseif num >= 50 then\n            result = result .. \"l\"\n            num = num - 50\n        elseif num >= 40 then\n            result = result .. \"xl\"\n            num = num - 40\n        elseif num >= 10 then\n            result = result .. \"x\"\n            num = num - 10\n        elseif num >= 9 then\n            result = result .. \"ix\"\n            num = num - 9\n        elseif num >= 5 then\n            result = result .. \"v\"\n            num = num - 5\n        elseif num >= 4 then\n            result = result .. \"iv\"\n            num = num - 4\n        elseif num >= 1 then\n            result = result .. \"i\"\n            num = num - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": ".\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamrx2jcf.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpamrx2jcf.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local num = number\n    local i = 1\n    while num > 0 do\n        if num >= 1000 then\n            result = result .. \"m\"\n            num = num - 1000\n        end\n        if num >= 900 then\n            result = result .. \"cm\"\n            num = num - 900\n        end\n        if num >= 500 then\n            result = result .. \"d\"\n            num = num - 500\n        end\n        if num >= 400 then\n            result = result .. \"cd\"\n            num = num - 400\n        end\n        if num >= 100 then\n            result = result .. \"c\"\n            num = num - 100\n        end\n        if num >= 90 then\n            result = result .. \"xc\"\n            num = num - 90\n        end\n        if num >= 50 then\n            result = result .. \"l\"\n            num = num - 50\n        end\n        if num >= 40 then\n            result = result .. \"xl\"\n            num = num - 40\n        end\n        if num >= 10 then\n            result = result .. \"x\"\n            num = num - 10\n        end\n        if num >= 9 then\n            result = result .. \"ix\"\n            num = num - 9\n        end\n        if num >= 5 then\n            result = result .. \"v\"\n            num = num - 5\n        end\n        if num >= 4 then\n            result = result .. \"iv\"\n            num = num - 4\n        end\n        if num >= 1 then\n            result = result .. \"i\"\n            num = num - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpigin40s2.lua:78: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpigin40s2.lua:78: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local roman_numeral = {}\n    local roman_numeral_map = {\n        1000 = \"M\",\n        900 = \"CM\",\n        500 = \"D\",\n        400 = \"CD\",\n        100 = \"C\",\n        90 = \"XC\",\n        50 = \"L\",\n        40 = \"XL\",\n        10 = \"X\",\n        9 = \"IX\",\n        5 = \"V\",\n        4 = \"IV\",\n        1 = \"I\"\n    }\n    for k, v in pairs(roman_numeral_map) do\n        if number >= k then\n            number = number - k\n            roman_numeral[#roman_numeral + 1] = v\n        end\n    end\n    return roman_numeral[1] .. roman_numeral[#roman_numeral]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    for i = 1, 9 do\n        if number >= i then\n            result = result .. string.char(string.byte(number - i + 1) - 1)\n        else\n            result = result .. string.char(string.byte(9 - i) + 1)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpabx8y9b5.lua:26: expected: \"xix\"\nactual: \"000000000\"\nstack traceback:\n\t/tmp/tmpabx8y9b5.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamrx2jcf.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpamrx2jcf.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamrx2jcf.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpamrx2jcf.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local num = number\n    local i = 1\n    while num > 0 do\n        if num >= 1000 then\n            result = result .. \"m\"\n            num = num - 1000\n        elseif num >= 900 then\n            result = result .. \"cm\"\n            num = num - 900\n        elseif num >= 500 then\n            result = result .. \"d\"\n            num = num - 500\n        elseif num >= 400 then\n            result = result .. \"cd\"\n            num = num - 400\n        elseif num >= 100 then\n            result = result .. \"c\"\n            num = num - 100\n        elseif num >= 90 then\n            result = result .. \"xc\"\n            num = num - 90\n        elseif num >= 50 then\n            result = result .. \"l\"\n            num = num - 50\n        elseif num >= 40 then\n            result = result .. \"xl\"\n            num = num - 40\n        elseif num >= 10 then\n            result = result .. \"x\"\n            num = num - 10\n        elseif num >= 9 then\n            result = result .. \"ix\"\n            num = num - 9\n        elseif num >= 5 then\n            result = result .. \"v\"\n            num = num - 5\n        elseif num >= 4 then\n            result = result .. \"iv\"\n            num = num - 4\n        elseif num >= 1 then\n            result = result .. \"i\"\n            num = num - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": ".\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamrx2jcf.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpamrx2jcf.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamrx2jcf.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpamrx2jcf.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamrx2jcf.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpamrx2jcf.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result..\"m\"\n            number = number - 1000\n        elseif number >= 900 then\n            result = result..\"cm\"\n            number = number - 900\n        elseif number >= 500 then\n            result = result..\"d\"\n            number = number - 500\n        elseif number >= 400 then\n            result = result..\"cd\"\n            number = number - 400\n        elseif number >= 100 then\n            result = result..\"c\"\n            number = number - 100\n        elseif number >= 90 then\n            result = result..\"xc\"\n            number = number - 90\n        elseif number >= 50 then\n            result = result..\"l\"\n            number = number - 50\n        elseif number >= 40 then\n            result = result..\"xl\"\n            number = number - 40\n        elseif number >= 10 then\n            result = result..\"x\"\n            number = number - 10\n        elseif number >= 9 then\n            result = result..\"ix\"\n            number = number - 9\n        elseif number >= 5 then\n            result = result..\"v\"\n            number = number - 5\n        elseif number >= 4 then\n            result = result..\"iv\"\n            number = number - 4\n        elseif number >= 1 then\n            result = result..\"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local num = number\n    local i = 1\n    local j = 1\n    while i <= num do\n        if num >= j then\n            result = result .. string.char(j)\n            num = num - j\n        else\n            result = result .. string.char(num)\n            num = num - num\n        j = j + 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqn8er5af.lua:33: expected: \"xix\"\nactual: \"\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\"\nstack traceback:\n\t/tmp/tmpqn8er5af.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    for i = 1, 9 do\n        result = result .. string.char(number % 10)\n        number = number / 10\n    end\n    for i = 9, 5 do\n        result = result .. string.char(number % 10)\n        number = number / 10\n    end\n    for i = 4, 1 do\n        result = result .. string.char(number % 10)\n        number = number / 10\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp8vel8e4.lua:14: bad argument #1 to 'char' (number has no integer representation)\nstack traceback:\n\t/tmp/tmpp8vel8e4.lua:14: in local 'candidate'\n\t/tmp/tmpp8vel8e4.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local roman_numeral = {\n        'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000\n    }\n    local result = \"\"\n    for i = 1, #roman_numeral, 2 do\n        if number >= roman_numeral[i] then\n            result = string.format('%s%s', result, roman_numeral[i])\n            number -= roman_numeral[i]\n        else\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmpxqneprj9.lua:13: '}' expected (to close '{' at line 12) near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number >= 1000 do\n        result = string.gsub(result, \"m{0}\", \"\")\n        result = string.gsub(result, \"mm{0}\", \"\")\n        number = number - 1000\n        i = i + 1\n    end\n    while number >= 900 do\n        result = string.gsub(result, \"cm{0}\", \"\")\n        number = number - 900\n        i = i + 1\n    end\n    while number >= 500 do\n        result = string.gsub(result, \"d{0}\", \"\")\n        number = number - 500\n        i = i + 1\n    end\n    while number >= 400 do\n        result = string.gsub(result, \"cd{0}\", \"\")\n        number = number - 400\n        i = i + 1\n    end\n    while number >= 100 do\n        result = string.gsub(result, \"c{0}\", \"\")\n        number = number - 100\n        i = i + 1\n    end\n    while number >= 90 do\n        result = string.gsub(result, \"xc{0}\", \"\")\n        number = number - 90\n        i = i + 1\n    end\n    while number >= 50 do\n        result = string.gsub(result, \"l{0}\", \"\")\n        number = number - 50\n        i = i + 1\n    end\n    while number >= 40 do\n        result = string.gsub(result, \"xl{0}\", \"\")\n        number = number - 40\n        i = i + 1\n    end\n    while number >= 10 do\n        result = string.gsub(result, \"x{0}\", \"\")\n        number = number - 10\n        i = i + 1\n    end\n    while number >= 9 do\n        result = string.gsub(result, \"ix{0}\", \"\")\n        number = number - 9\n        i = i + 1\n    end\n    while number >= 5 do\n        result = string.gsub(result, \"v{0}\", \"\")\n        number = number - 5\n        i = i + 1\n    end\n    while number >= 4 do\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsica3iyk.lua:92: 'end' expected (to close 'while' at line 70) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamrx2jcf.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpamrx2jcf.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local num = number\n    local i = 1\n    while num > 0 do\n        if num >= 1000 then\n            result = result .. \"m\"\n            num = num - 1000\n        end\n        if num >= 900 then\n            result = result .. \"cm\"\n            num = num - 900\n        end\n        if num >= 500 then\n            result = result .. \"d\"\n            num = num - 500\n        end\n        if num >= 400 then\n            result = result .. \"cd\"\n            num = num - 400\n        end\n        if num >= 100 then\n            result = result .. \"c\"\n            num = num - 100\n        end\n        if num >= 90 then\n            result = result .. \"xc\"\n            num = num - 90\n        end\n        if num >= 50 then\n            result = result .. \"l\"\n            num = num - 50\n        end\n        if num >= 40 then\n            result = result .. \"xl\"\n            num = num - 40\n        end\n        if num >= 10 then\n            result = result .. \"x\"\n            num = num - 10\n        end\n        if num >= 9 then\n            result = result .. \"ix\"\n            num = num - 9\n        end\n        if num >= 5 then\n            result = result .. \"v\"\n            num = num - 5\n        end\n        if num >= 4 then\n            result = result .. \"iv\"\n            num = num - 4\n        end\n        if num >= 1 then\n            result = result .. \"i\"\n            num = num - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpigin40s2.lua:78: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpigin40s2.lua:78: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local roman_numeral = {\n        'M': 1000,\n        'CM': 900,\n        'D': 500,\n        'CD': 400,\n        'C': 100,\n        'XC': 90,\n        'L': 50,\n        'XL': 40,\n        'X': 10,\n        'IX': 9,\n        'V': 5,\n        'IV': 4,\n        'I': 1\n    }\n    local result = \"\"\n    for i = 1, #roman_numeral, 2 do\n        if number >= roman_numeral[i] then\n            result = result .. roman_numeral[i]\n            number = number - roman_numeral[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmphb9rfnql.lua:13: '}' expected (to close '{' at line 12) near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    for i = 1, 3 do\n        if number >= 10 then\n            result = result .. string.char(number - 10 + i)\n        else\n            result = result .. string.char(number + i)\n        end\n        number = number / 10\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6xibl315.lua:17: bad argument #1 to 'char' (number has no integer representation)\nstack traceback:\n\t/tmp/tmp6xibl315.lua:17: in local 'candidate'\n\t/tmp/tmp6xibl315.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamrx2jcf.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpamrx2jcf.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamrx2jcf.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpamrx2jcf.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local num = number\n    local i = 1\n    while num > 0 do\n        if num >= 1000 then\n            result = result .. \"m\"\n            num = num - 1000\n        end\n        if num >= 900 then\n            result = result .. \"cm\"\n            num = num - 900\n        end\n        if num >= 500 then\n            result = result .. \"d\"\n            num = num - 500\n        end\n        if num >= 400 then\n            result = result .. \"cd\"\n            num = num - 400\n        end\n        if num >= 100 then\n            result = result .. \"c\"\n            num = num - 100\n        end\n        if num >= 90 then\n            result = result .. \"xc\"\n            num = num - 90\n        end\n        if num >= 50 then\n            result = result .. \"l\"\n            num = num - 50\n        end\n        if num >= 40 then\n            result = result .. \"xl\"\n            num = num - 40\n        end\n        if num >= 10 then\n            result = result .. \"x\"\n            num = num - 10\n        end\n        if num >= 9 then\n            result = result .. \"ix\"\n            num = num - 9\n        end\n        if num >= 5 then\n            result = result .. \"v\"\n            num = num - 5\n        end\n        if num >= 4 then\n            result = result .. \"iv\"\n            num = num - 4\n        end\n        if num >= 1 then\n            result = result .. \"i\"\n            num = num - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpigin40s2.lua:78: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpigin40s2.lua:78: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamrx2jcf.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpamrx2jcf.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamrx2jcf.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpamrx2jcf.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    for i = 1, 9 do\n        result = result .. string.char(number % 10)\n        number = number / 10\n    end\n    for i = 9, 1, -1 do\n        result = result .. string.char(number % 10)\n        number = number / 10\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvbmzrlau.lua:14: bad argument #1 to 'char' (number has no integer representation)\nstack traceback:\n\t/tmp/tmpvbmzrlau.lua:14: in local 'candidate'\n\t/tmp/tmpvbmzrlau.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamrx2jcf.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpamrx2jcf.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamrx2jcf.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpamrx2jcf.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local roman_numeral = {}\n    local roman_numeral_map = {\n        1000: \"m\",\n        900: \"cm\",\n        500: \"d\",\n        400: \"cd\",\n        100: \"c\",\n        90: \"xc\",\n        50: \"l\",\n        40: \"xl\",\n        10: \"x\",\n        9: \"ix\",\n        5: \"v\",\n        4: \"iv\",\n        1: \"i\"\n    }\n    for k, v in pairs(roman_numeral_map) do\n        if number >= k then\n            number = number - k\n            roman_numeral[#roman_numeral + 1] = v\n        end\n    end\n    return roman_numeral[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmp1r7ghk8p.lua:14: '}' expected (to close '{' at line 13) near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    for i = 1, 9 do\n        result = result .. string.char(number % 10)\n        number = number / 10\n    end\n    for i = 9, 1, -1 do\n        result = result .. string.char(number % 10)\n        number = number / 10\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvbmzrlau.lua:14: bad argument #1 to 'char' (number has no integer representation)\nstack traceback:\n\t/tmp/tmpvbmzrlau.lua:14: in local 'candidate'\n\t/tmp/tmpvbmzrlau.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local num = number\n    local i = 1\n    while num > 0 do\n        if num >= 1000 then\n            result = result .. \"m\"\n            num = num - 1000\n        end\n        if num >= 900 then\n            result = result .. \"cm\"\n            num = num - 900\n        end\n        if num >= 500 then\n            result = result .. \"d\"\n            num = num - 500\n        end\n        if num >= 400 then\n            result = result .. \"cd\"\n            num = num - 400\n        end\n        if num >= 100 then\n            result = result .. \"c\"\n            num = num - 100\n        end\n        if num >= 90 then\n            result = result .. \"xc\"\n            num = num - 90\n        end\n        if num >= 50 then\n            result = result .. \"l\"\n            num = num - 50\n        end\n        if num >= 40 then\n            result = result .. \"xl\"\n            num = num - 40\n        end\n        if num >= 10 then\n            result = result .. \"x\"\n            num = num - 10\n        end\n        if num >= 9 then\n            result = result .. \"ix\"\n            num = num - 9\n        end\n        if num >= 5 then\n            result = result .. \"v\"\n            num = num - 5\n        end\n        if num >= 4 then\n            result = result .. \"iv\"\n            num = num - 4\n        end\n        if num >= 1 then\n            result = result .. \"i\"\n            num = num - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpigin40s2.lua:78: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpigin40s2.lua:78: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    for i = 1, 9 do\n        result = result .. string.char(number % 10)\n        number = number / 10\n    end\n    for i = 9, 1, -1 do\n        result = result .. string.char(number % 10)\n        number = number / 10\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvbmzrlau.lua:14: bad argument #1 to 'char' (number has no integer representation)\nstack traceback:\n\t/tmp/tmpvbmzrlau.lua:14: in local 'candidate'\n\t/tmp/tmpvbmzrlau.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907410
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    for i = 1, 9 do\n        if number >= i then\n            result = string.char(string.byte(result) + string.byte(number - i + 1))\n        else\n            result = string.char(string.byte(result) + string.byte(i - number))\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkc1u3p8a.lua:15: attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpkc1u3p8a.lua:15: in local 'candidate'\n\t/tmp/tmpkc1u3p8a.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local roman_numerals = {\n        'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000\n    }\n    local result = \"\"\n    for i = 1, #roman_numerals, 2 do\n        if number >= roman_numerals[i] then\n            result = result .. string.lower(roman_numerals[i])\n            number = number - roman_numerals[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmpc3f_z985.lua:13: '}' expected (to close '{' at line 12) near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result..\"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result..\"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result..\"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result..\"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result..\"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result..\"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result..\"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result..\"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result..\"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result..\"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result..\"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result..\"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result..\"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ptcug0y.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmp3ptcug0y.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local table = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000\n    }\n    local result = \"\"\n    for i = 1, #table do\n        if number >= table[i] then\n            result = result .. table[i]\n            number = number - table[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmp6pmqqw20.lua:13: '}' expected (to close '{' at line 12) near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local roman_map = {\n        1: 'i',\n        5: 'v',\n        10: 'x',\n        50: 'l',\n        100: 'c',\n        500: 'd',\n        1000: 'm'\n    }\n    local result = \"\"\n    for i = 1, #roman_map, 2 do\n        if number >= i then\n            result = roman_map[i] .. result\n            number = number - i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmpvfomxo5r.lua:13: '}' expected (to close '{' at line 12) near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local table = {\n        'I' = 1,\n        'V' = 5,\n        'X' = 10,\n        'L' = 50,\n        'C' = 100,\n        'D' = 500,\n        'M' = 1000\n    }\n    local result = \"\"\n    for i = 1, #table do\n        if number >= table[i] then\n            result = result .. table[i]\n            number = number - table[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpwafzjebl.lua:13: '}' expected (to close '{' at line 12) near '='\n",
      "stdout": "",
      "timestamp": 1661907410
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local table = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000\n    }\n    local result = \"\"\n    for i = 1, #table do\n        if number >= table[i] then\n            result = result .. table[i]\n            number = number - table[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmp6pmqqw20.lua:13: '}' expected (to close '{' at line 12) near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local roman_numeral = {}\n    local roman_numeral_map = {\n        1: 'i',\n        5: 'v',\n        10: 'x',\n        50: 'l',\n        100: 'c',\n        500: 'd',\n        1000: 'm'\n    }\n    for k, v in pairs(roman_numeral_map) do\n        if number >= k then\n            number = number - k\n            roman_numeral[k] = v\n        end\n    end\n    return roman_numeral[number]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmpl5s5htwh.lua:14: '}' expected (to close '{' at line 13) near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local table = {\n        'M': 1000,\n        'CM': 900,\n        'D': 500,\n        'CD': 400,\n        'C': 100,\n        'XC': 90,\n        'L': 50,\n        'XL': 40,\n        'X': 10,\n        'IX': 9,\n        'V': 5,\n        'IV': 4,\n        'I': 1\n    }\n    local result = \"\"\n    for i = 1, #table do\n        if number >= table[i] then\n            result = result .. table[i]\n            number = number - table[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmpvtxvt5c8.lua:13: '}' expected (to close '{' at line 12) near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local num = number\n    local i = 1\n    while num > 0 do\n        if num >= 1000 then\n            result = result .. \"m\"\n            num = num - 1000\n        end\n        if num >= 900 then\n            result = result .. \"cm\"\n            num = num - 900\n        end\n        if num >= 500 then\n            result = result .. \"d\"\n            num = num - 500\n        end\n        if num >= 400 then\n            result = result .. \"cd\"\n            num = num - 400\n        end\n        if num >= 100 then\n            result = result .. \"c\"\n            num = num - 100\n        end\n        if num >= 90 then\n            result = result .. \"xc\"\n            num = num - 90\n        end\n        if num >= 50 then\n            result = result .. \"l\"\n            num = num - 50\n        end\n        if num >= 40 then\n            result = result .. \"xl\"\n            num = num - 40\n        end\n        if num >= 10 then\n            result = result .. \"x\"\n            num = num - 10\n        end\n        if num >= 9 then\n            result = result .. \"ix\"\n            num = num - 9\n        end\n        if num >= 5 then\n            result = result .. \"v\"\n            num = num - 5\n        end\n        if num >= 4 then\n            result = result .. \"iv\"\n            num = num - 4\n        end\n        if num >= 1 then\n            result = result .. \"i\"\n            num = num - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpigin40s2.lua:78: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpigin40s2.lua:78: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result..\"m\"\n            number = number - 1000\n        elseif number >= 900 then\n            result = result..\"cm\"\n            number = number - 900\n        elseif number >= 500 then\n            result = result..\"d\"\n            number = number - 500\n        elseif number >= 400 then\n            result = result..\"cd\"\n            number = number - 400\n        elseif number >= 100 then\n            result = result..\"c\"\n            number = number - 100\n        elseif number >= 90 then\n            result = result..\"xc\"\n            number = number - 90\n        elseif number >= 50 then\n            result = result..\"l\"\n            number = number - 50\n        elseif number >= 40 then\n            result = result..\"xl\"\n            number = number - 40\n        elseif number >= 10 then\n            result = result..\"x\"\n            number = number - 10\n        elseif number >= 9 then\n            result = result..\"ix\"\n            number = number - 9\n        elseif number >= 5 then\n            result = result..\"v\"\n            number = number - 5\n        elseif number >= 4 then\n            result = result..\"iv\"\n            number = number - 4\n        elseif number >= 1 then\n            result = result..\"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamrx2jcf.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpamrx2jcf.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamrx2jcf.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpamrx2jcf.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamrx2jcf.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpamrx2jcf.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamrx2jcf.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpamrx2jcf.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamrx2jcf.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpamrx2jcf.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number >= 1000 do\n        result = string.format('%s%03d', result, number % 1000)\n        number = number / 1000\n        i = i + 1\n    end\n    while number >= 100 do\n        result = string.format('%s%02d', result, number % 100)\n        number = number / 100\n        i = i + 1\n    end\n    while number >= 10 do\n        result = string.format('%s%d', result, number % 10)\n        number = number / 10\n        i = i + 1\n    end\n    if number >= 1 then\n        result = string.format('%s%d', result, number)\n        i = i + 1\n    end\n    return string.lower(result:sub(1, i))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcmg4ogym.lua:30: bad argument #3 to 'format' (number has no integer representation)\nstack traceback:\n\t/tmp/tmpcmg4ogym.lua:30: in local 'candidate'\n\t/tmp/tmpcmg4ogym.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local num = number\n    local i = 1\n    while num > 0 do\n        if num >= 1000 then\n            result = result .. \"m\"\n            num = num - 1000\n        elseif num >= 900 then\n            result = result .. \"cm\"\n            num = num - 900\n        elseif num >= 500 then\n            result = result .. \"d\"\n            num = num - 500\n        elseif num >= 400 then\n            result = result .. \"cd\"\n            num = num - 400\n        elseif num >= 100 then\n            result = result .. \"c\"\n            num = num - 100\n        elseif num >= 90 then\n            result = result .. \"xc\"\n            num = num - 90\n        elseif num >= 50 then\n            result = result .. \"l\"\n            num = num - 50\n        elseif num >= 40 then\n            result = result .. \"xl\"\n            num = num - 40\n        elseif num >= 10 then\n            result = result .. \"x\"\n            num = num - 10\n        elseif num >= 9 then\n            result = result .. \"ix\"\n            num = num - 9\n        elseif num >= 5 then\n            result = result .. \"v\"\n            num = num - 5\n        elseif num >= 4 then\n            result = result .. \"iv\"\n            num = num - 4\n        elseif num >= 1 then\n            result = result .. \"i\"\n            num = num - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": ".\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local roman_numerals = {\n        'M': 1000,\n        'CM': 900,\n        'D': 500,\n        'CD': 400,\n        'C': 100,\n        'XC': 90,\n        'L': 50,\n        'XL': 40,\n        'X': 10,\n        'IX': 9,\n        'V': 5,\n        'IV': 4,\n        'I': 1\n    }\n    local result = \"\"\n    for i = 1, #roman_numerals, 2 do\n        if number >= roman_numerals[i] then\n            result = string.format('%s%s', result, roman_numerals[i])\n            number = number - roman_numerals[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmpq1jjckfh.lua:13: '}' expected (to close '{' at line 12) near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local table = {\n        'M': 1000,\n        'CM': 900,\n        'D': 500,\n        'CD': 400,\n        'C': 100,\n        'XC': 90,\n        'L': 50,\n        'XL': 40,\n        'X': 10,\n        'IX': 9,\n        'V': 5,\n        'IV': 4,\n        'I': 1\n    }\n    local result = \"\"\n    for i = 1, #table do\n        if number >= table[i] then\n            result = result .. table[i]\n            number = number - table[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmpvtxvt5c8.lua:13: '}' expected (to close '{' at line 12) near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 0,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        elseif number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        elseif number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        elseif number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        elseif number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        elseif number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        elseif number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        elseif number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        elseif number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        elseif number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        elseif number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        elseif number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        elseif number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local num = number\n    local i = 1\n    while num > 0 do\n        if num >= 1000 then\n            result = result .. \"m\"\n            num = num - 1000\n        end\n        if num >= 900 then\n            result = result .. \"cm\"\n            num = num - 900\n        end\n        if num >= 500 then\n            result = result .. \"d\"\n            num = num - 500\n        end\n        if num >= 400 then\n            result = result .. \"cd\"\n            num = num - 400\n        end\n        if num >= 100 then\n            result = result .. \"c\"\n            num = num - 100\n        end\n        if num >= 90 then\n            result = result .. \"xc\"\n            num = num - 90\n        end\n        if num >= 50 then\n            result = result .. \"l\"\n            num = num - 50\n        end\n        if num >= 40 then\n            result = result .. \"xl\"\n            num = num - 40\n        end\n        if num >= 10 then\n            result = result .. \"x\"\n            num = num - 10\n        end\n        if num >= 9 then\n            result = result .. \"ix\"\n            num = num - 9\n        end\n        if num >= 5 then\n            result = result .. \"v\"\n            num = num - 5\n        end\n        if num >= 4 then\n            result = result .. \"iv\"\n            num = num - 4\n        end\n        if num >= 1 then\n            result = result .. \"i\"\n            num = num - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpigin40s2.lua:78: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpigin40s2.lua:78: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamrx2jcf.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpamrx2jcf.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number >= 1000 do\n        result = string.format('%s%03d', result, number % 1000)\n        number = number / 1000\n        i = i + 1\n    end\n    while number >= 100 do\n        result = string.format('%s%02d', result, number % 100)\n        number = number / 100\n        i = i + 1\n    end\n    while number >= 10 do\n        result = string.format('%s%d', result, number % 10)\n        number = number / 10\n        i = i + 1\n    end\n    while number >= 1 do\n        result = string.format('%s%d', result, number)\n        number = number / 1\n        i = i + 1\n    end\n    return string.lower(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppjhzdss8.lua:30: bad argument #3 to 'format' (number has no integer representation)\nstack traceback:\n\t/tmp/tmppjhzdss8.lua:30: in local 'candidate'\n\t/tmp/tmppjhzdss8.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local num = number\n    local i = 1\n    while num > 0 do\n        if num >= 1000 then\n            result = result .. \"m\"\n            num = num - 1000\n        end\n        if num >= 900 then\n            result = result .. \"cm\"\n            num = num - 900\n        end\n        if num >= 500 then\n            result = result .. \"d\"\n            num = num - 500\n        end\n        if num >= 400 then\n            result = result .. \"cd\"\n            num = num - 400\n        end\n        if num >= 100 then\n            result = result .. \"c\"\n            num = num - 100\n        end\n        if num >= 90 then\n            result = result .. \"xc\"\n            num = num - 90\n        end\n        if num >= 50 then\n            result = result .. \"l\"\n            num = num - 50\n        end\n        if num >= 40 then\n            result = result .. \"xl\"\n            num = num - 40\n        end\n        if num >= 10 then\n            result = result .. \"x\"\n            num = num - 10\n        end\n        if num >= 9 then\n            result = result .. \"ix\"\n            num = num - 9\n        end\n        if num >= 5 then\n            result = result .. \"v\"\n            num = num - 5\n        end\n        if num >= 4 then\n            result = result .. \"iv\"\n            num = num - 4\n        end\n        if num >= 1 then\n            result = result .. \"i\"\n            num = num - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpigin40s2.lua:78: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpigin40s2.lua:78: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result..\"m\"\n            number = number - 1000\n        elseif number >= 900 then\n            result = result..\"cm\"\n            number = number - 900\n        elseif number >= 500 then\n            result = result..\"d\"\n            number = number - 500\n        elseif number >= 400 then\n            result = result..\"cd\"\n            number = number - 400\n        elseif number >= 100 then\n            result = result..\"c\"\n            number = number - 100\n        elseif number >= 90 then\n            result = result..\"xc\"\n            number = number - 90\n        elseif number >= 50 then\n            result = result..\"l\"\n            number = number - 50\n        elseif number >= 40 then\n            result = result..\"xl\"\n            number = number - 40\n        elseif number >= 10 then\n            result = result..\"x\"\n            number = number - 10\n        elseif number >= 9 then\n            result = result..\"ix\"\n            number = number - 9\n        elseif number >= 5 then\n            result = result..\"v\"\n            number = number - 5\n        elseif number >= 4 then\n            result = result..\"iv\"\n            number = number - 4\n        elseif number >= 1 then\n            result = result..\"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result..\"m\"\n            number = number - 1000\n        elseif number >= 900 then\n            result = result..\"cm\"\n            number = number - 900\n        elseif number >= 500 then\n            result = result..\"d\"\n            number = number - 500\n        elseif number >= 400 then\n            result = result..\"cd\"\n            number = number - 400\n        elseif number >= 100 then\n            result = result..\"c\"\n            number = number - 100\n        elseif number >= 90 then\n            result = result..\"xc\"\n            number = number - 90\n        elseif number >= 50 then\n            result = result..\"l\"\n            number = number - 50\n        elseif number >= 40 then\n            result = result..\"xl\"\n            number = number - 40\n        elseif number >= 10 then\n            result = result..\"x\"\n            number = number - 10\n        elseif number >= 9 then\n            result = result..\"ix\"\n            number = number - 9\n        elseif number >= 5 then\n            result = result..\"v\"\n            number = number - 5\n        elseif number >= 4 then\n            result = result..\"iv\"\n            number = number - 4\n        elseif number >= 1 then\n            result = result..\"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local roman_numeral = {}\n    for i = 1, 9 do\n        roman_numeral[i] = string.char(i + 48)\n    end\n    for i = 10, 100 do\n        roman_numeral[i] = string.char(i + 49)\n    end\n    for i = 100, 900 do\n        roman_numeral[i] = string.char(i + 50)\n    end\n    for i = 900, 1000 do\n        roman_numeral[i] = string.char(i + 51)\n    end\n    return string.gsub(\n        string.gsub(\n            string.gsub(\n                string.gsub(\n                    string.gsub(\n                        string.gsub(\n                            string.gsub(\n                                string.gsub(\n                                    string.gsub(\n                                        string.gsub(\n                                            number,\n                                            \"^(?=\\\\d)(?=\\\\d{3})(?=\\\\d{2})(?=\\\\d{1})\",\n                                            \"\"),\n                                        \"\"),\n                                    \"\"),\n                                \"\"),\n                            \"\"),\n                        \"\"),\n                    \"\"),\n                \"\"),\n            \"\"),\n        \"\"),\n    \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmps7yelo8y.lua:47: 'end' expected (to close 'function' at line 11) near ')'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 0,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        elseif number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        elseif number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        elseif number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        elseif number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        elseif number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        elseif number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        elseif number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        elseif number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        elseif number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        elseif number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        elseif number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        elseif number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907410
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result..\"m\"\n            number = number - 1000\n        elseif number >= 900 then\n            result = result..\"cm\"\n            number = number - 900\n        elseif number >= 500 then\n            result = result..\"d\"\n            number = number - 500\n        elseif number >= 400 then\n            result = result..\"cd\"\n            number = number - 400\n        elseif number >= 100 then\n            result = result..\"c\"\n            number = number - 100\n        elseif number >= 90 then\n            result = result..\"xc\"\n            number = number - 90\n        elseif number >= 50 then\n            result = result..\"l\"\n            number = number - 50\n        elseif number >= 40 then\n            result = result..\"xl\"\n            number = number - 40\n        elseif number >= 10 then\n            result = result..\"x\"\n            number = number - 10\n        elseif number >= 9 then\n            result = result..\"ix\"\n            number = number - 9\n        elseif number >= 5 then\n            result = result..\"v\"\n            number = number - 5\n        elseif number >= 4 then\n            result = result..\"iv\"\n            number = number - 4\n        elseif number >= 1 then\n            result = result..\"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamrx2jcf.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpamrx2jcf.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result..\"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result..\"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result..\"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result..\"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result..\"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result..\"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result..\"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result..\"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result..\"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result..\"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result..\"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result..\"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result..\"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ptcug0y.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmp3ptcug0y.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local num = number\n    local i = 1\n    while num > 0 do\n        if num >= 1000 then\n            result = result .. \"m\"\n            num = num - 1000\n        end\n        if num >= 900 then\n            result = result .. \"cm\"\n            num = num - 900\n        end\n        if num >= 500 then\n            result = result .. \"d\"\n            num = num - 500\n        end\n        if num >= 400 then\n            result = result .. \"cd\"\n            num = num - 400\n        end\n        if num >= 100 then\n            result = result .. \"c\"\n            num = num - 100\n        end\n        if num >= 90 then\n            result = result .. \"xc\"\n            num = num - 90\n        end\n        if num >= 50 then\n            result = result .. \"l\"\n            num = num - 50\n        end\n        if num >= 40 then\n            result = result .. \"xl\"\n            num = num - 40\n        end\n        if num >= 10 then\n            result = result .. \"x\"\n            num = num - 10\n        end\n        if num >= 9 then\n            result = result .. \"ix\"\n            num = num - 9\n        end\n        if num >= 5 then\n            result = result .. \"v\"\n            num = num - 5\n        end\n        if num >= 4 then\n            result = result .. \"iv\"\n            num = num - 4\n        end\n        if num >= 1 then\n            result = result .. \"i\"\n            num = num - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpigin40s2.lua:78: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpigin40s2.lua:78: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local roman_numeral = {}\n    local roman_numeral_table = {\n        'M': 1000,\n        'CM': 900,\n        'D': 500,\n        'CD': 400,\n        'C': 100,\n        'XC': 90,\n        'L': 50,\n        'XL': 40,\n        'X': 10,\n        'IX': 9,\n        'V': 5,\n        'IV': 4,\n        'I': 1\n    }\n    for k, v in pairs(roman_numeral_table) do\n        if v >= number then\n            table.insert(roman_numeral, k)\n            number = number - v\n        end\n    end\n    return table.concat(roman_numeral, \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmp46skhrp3.lua:14: '}' expected (to close '{' at line 13) near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamrx2jcf.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpamrx2jcf.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local roman_map = {\n        1: \"I\",\n        5: \"V\",\n        10: \"X\",\n        50: \"L\",\n        100: \"C\",\n        500: \"D\",\n        1000: \"M\"\n    }\n    local result = \"\"\n    for i = 1, #roman_map, 2 do\n        if number >= i then\n            result = result .. roman_map[i]\n            number = number - i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmp0xugzsvw.lua:13: '}' expected (to close '{' at line 12) near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local roman_numeral = {}\n    for i=1,9 do\n        roman_numeral[i] = string.char(i)\n    end\n    for i=10,100 do\n        roman_numeral[i] = string.char(i)\n        roman_numeral[i+10] = string.char(i+10)\n    end\n    for i=100,1000 do\n        roman_numeral[i] = string.char(i)\n        roman_numeral[i+100] = string.char(i+100)\n    end\n    return string.gsub(string.gsub(string.gsub(number, \"\", \"\"), \"\", \"\"), \"\", roman_numeral)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx6e96y51.lua:22: bad argument #1 to 'char' (value out of range)\nstack traceback:\n\t/tmp/tmpx6e96y51.lua:22: in local 'candidate'\n\t/tmp/tmpx6e96y51.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamrx2jcf.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpamrx2jcf.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local table = {\n        'I' = 1,\n        'V' = 5,\n        'X' = 10,\n        'L' = 50,\n        'C' = 100,\n        'D' = 500,\n        'M' = 1000\n    }\n    local result = \"\"\n    for i = 1, #table do\n        if number >= table[i] then\n            result = result .. table[i]\n            number = number - table[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpwafzjebl.lua:13: '}' expected (to close '{' at line 12) near '='\n",
      "stdout": "",
      "timestamp": 1661907410
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result..\"m\"\n            number = number - 1000\n        elseif number >= 900 then\n            result = result..\"cm\"\n            number = number - 900\n        elseif number >= 500 then\n            result = result..\"d\"\n            number = number - 500\n        elseif number >= 400 then\n            result = result..\"cd\"\n            number = number - 400\n        elseif number >= 100 then\n            result = result..\"c\"\n            number = number - 100\n        elseif number >= 90 then\n            result = result..\"xc\"\n            number = number - 90\n        elseif number >= 50 then\n            result = result..\"l\"\n            number = number - 50\n        elseif number >= 40 then\n            result = result..\"xl\"\n            number = number - 40\n        elseif number >= 10 then\n            result = result..\"x\"\n            number = number - 10\n        elseif number >= 9 then\n            result = result..\"ix\"\n            number = number - 9\n        elseif number >= 5 then\n            result = result..\"v\"\n            number = number - 5\n        elseif number >= 4 then\n            result = result..\"iv\"\n            number = number - 4\n        elseif number >= 1 then\n            result = result..\"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local num = number\n    local i = 1\n    while num > 0 do\n        if num >= 1000 then\n            result = result .. \"m\"\n            num = num - 1000\n        end\n        if num >= 900 then\n            result = result .. \"cm\"\n            num = num - 900\n        end\n        if num >= 500 then\n            result = result .. \"d\"\n            num = num - 500\n        end\n        if num >= 400 then\n            result = result .. \"cd\"\n            num = num - 400\n        end\n        if num >= 100 then\n            result = result .. \"c\"\n            num = num - 100\n        end\n        if num >= 90 then\n            result = result .. \"xc\"\n            num = num - 90\n        end\n        if num >= 50 then\n            result = result .. \"l\"\n            num = num - 50\n        end\n        if num >= 40 then\n            result = result .. \"xl\"\n            num = num - 40\n        end\n        if num >= 10 then\n            result = result .. \"x\"\n            num = num - 10\n        end\n        if num >= 9 then\n            result = result .. \"ix\"\n            num = num - 9\n        end\n        if num >= 5 then\n            result = result .. \"v\"\n            num = num - 5\n        end\n        if num >= 4 then\n            result = result .. \"iv\"\n            num = num - 4\n        end\n        if num >= 1 then\n            result = result .. \"i\"\n            num = num - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpigin40s2.lua:78: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpigin40s2.lua:78: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    for i = 1, 9 do\n        if number >= i then\n            result = result .. string.char(string.byte(number - i + 48) - 48)\n        else\n            result = result .. string.char(string.byte(i - number + 48) - 48)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1toh4177.lua:26: expected: \"xix\"\nactual: \"\u0006\u0006\u0006\u0006\u0006\u0006\u0006\u0005\u0005\"\nstack traceback:\n\t/tmp/tmp1toh4177.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result..\"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result..\"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result..\"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result..\"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result..\"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result..\"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result..\"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result..\"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result..\"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result..\"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result..\"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result..\"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result..\"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ptcug0y.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmp3ptcug0y.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamrx2jcf.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpamrx2jcf.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local num = number\n    local i = 1\n    while num > 0 do\n        if num >= 1000 then\n            result = result .. \"m\"\n            num = num - 1000\n        end\n        if num >= 900 then\n            result = result .. \"cm\"\n            num = num - 900\n        end\n        if num >= 500 then\n            result = result .. \"d\"\n            num = num - 500\n        end\n        if num >= 400 then\n            result = result .. \"cd\"\n            num = num - 400\n        end\n        if num >= 100 then\n            result = result .. \"c\"\n            num = num - 100\n        end\n        if num >= 90 then\n            result = result .. \"xc\"\n            num = num - 90\n        end\n        if num >= 50 then\n            result = result .. \"l\"\n            num = num - 50\n        end\n        if num >= 40 then\n            result = result .. \"xl\"\n            num = num - 40\n        end\n        if num >= 10 then\n            result = result .. \"x\"\n            num = num - 10\n        end\n        if num >= 9 then\n            result = result .. \"ix\"\n            num = num - 9\n        end\n        if num >= 5 then\n            result = result .. \"v\"\n            num = num - 5\n        end\n        if num >= 4 then\n            result = result .. \"iv\"\n            num = num - 4\n        end\n        if num >= 1 then\n            result = result .. \"i\"\n            num = num - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpigin40s2.lua:78: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpigin40s2.lua:78: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local roman_numeral = {\n        'M': 1000,\n        'CM': 900,\n        'D': 500,\n        'CD': 400,\n        'C': 100,\n        'XC': 90,\n        'L': 50,\n        'XL': 40,\n        'X': 10,\n        'IX': 9,\n        'V': 5,\n        'IV': 4,\n        'I': 1\n    }\n    local result = \"\"\n    for i = 1, #roman_numeral do\n        if number >= roman_numeral[i] then\n            result = result .. roman_numeral[i]\n            number = number - roman_numeral[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmp14lsnw8h.lua:13: '}' expected (to close '{' at line 12) near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 0,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        elseif number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        elseif number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        elseif number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        elseif number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        elseif number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        elseif number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        elseif number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        elseif number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        elseif number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        elseif number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        elseif number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        elseif number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907410
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number >= 1000 do\n        result = string.gsub(result, \"m\", \"mm\")\n        number = number - 1000\n    end\n    while number >= 900 do\n        result = string.gsub(result, \"cm\", \"cmm\")\n        number = number - 900\n    end\n    while number >= 500 do\n        result = string.gsub(result, \"d\", \"dd\")\n        number = number - 500\n    end\n    while number >= 400 do\n        result = string.gsub(result, \"cd\", \"ccd\")\n        number = number - 400\n    end\n    while number >= 100 do\n        result = string.gsub(result, \"c\", \"cc\")\n        number = number - 100\n    end\n    while number >= 90 do\n        result = string.gsub(result, \"xc\", \"xcc\")\n        number = number - 90\n    end\n    while number >= 50 do\n        result = string.gsub(result, \"l\", \"ll\")\n        number = number - 50\n    end\n    while number >= 40 do\n        result = string.gsub(result, \"xl\", \"xll\")\n        number = number - 40\n    end\n    while number >= 10 do\n        result = string.gsub(result, \"x\", \"xx\")\n        number = number - 10\n    end\n    while number >= 9 do\n        result = string.gsub(result, \"ix\", \"ixx\")\n        number = number - 9\n    end\n    while number >= 5 do\n        result = string.gsub(result, \"v\", \"vv\")\n        number = number - 5\n    end\n    while number >= 4 do\n        result = string.gsub(result, \"iv\", \"ivx\")\n        number = number - 4\n    end\n    while number >= 1 do\n        result = string.gsub(result, \"i\", \"ii\")\n        number = number - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpivazvrt0.lua:72: expected: \"xix\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpivazvrt0.lua:72: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamrx2jcf.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpamrx2jcf.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local roman_numeral = {}\n    local roman_numeral_map = {\n        1000: \"M\",\n        900: \"CM\",\n        500: \"D\",\n        400: \"CD\",\n        100: \"C\",\n        90: \"XC\",\n        50: \"L\",\n        40: \"XL\",\n        10: \"X\",\n        9: \"IX\",\n        5: \"V\",\n        4: \"IV\",\n        1: \"I\"\n    }\n    for i = 1, #roman_numeral_map, 2 do\n        if number >= i then\n            number = number - i\n            roman_numeral[#roman_numeral + 1] = roman_numeral_map[i]\n        end\n    end\n    return string.lower(roman_numeral[#roman_numeral])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmpcm3amxwg.lua:14: '}' expected (to close '{' at line 13) near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamrx2jcf.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpamrx2jcf.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamrx2jcf.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpamrx2jcf.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local roman_numerals = {\n        'M' = 1000,\n        'CM' = 900,\n        'D' = 500,\n        'CD' = 400,\n        'C' = 100,\n        'XC' = 90,\n        'L' = 50,\n        'XL' = 40,\n        'X' = 10,\n        'IX' = 9,\n        'V' = 5,\n        'IV' = 4,\n        'I' = 1\n    }\n    local result = \"\"\n    for i = 1, #roman_numerals, 2 do\n        if number >= roman_numerals[i] then\n            result = result .. roman_numerals[i]\n            number = number - roman_numerals[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmpar4g9py8.lua:13: '}' expected (to close '{' at line 12) near '='\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local table = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000\n    }\n    local result = ''\n    for i = 1, #table do\n        if number >= table[i] then\n            result = result .. table[i]\n            number = number - table[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmp72zfhev8.lua:13: '}' expected (to close '{' at line 12) near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 0,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        elseif number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        elseif number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        elseif number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        elseif number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        elseif number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        elseif number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        elseif number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        elseif number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        elseif number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        elseif number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        elseif number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        elseif number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907410
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result..\"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result..\"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result..\"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result..\"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result..\"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result..\"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result..\"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result..\"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result..\"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result..\"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result..\"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result..\"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result..\"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ptcug0y.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmp3ptcug0y.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local table = {\n        'I' = 1,\n        'V' = 5,\n        'X' = 10,\n        'L' = 50,\n        'C' = 100,\n        'D' = 500,\n        'M' = 1000\n    }\n    local result = \"\"\n    for i = 1, #table do\n        if number >= table[i] then\n            result = result .. table[i]\n            number = number - table[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpwafzjebl.lua:13: '}' expected (to close '{' at line 12) near '='\n",
      "stdout": "",
      "timestamp": 1661907410
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local num = number\n    for i = 1,4 do\n        if num >= 10 then\n            result = result..\"x\"\n            num = num - 10\n        else\n            result = result..\"i\"\n            num = num + 1\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpipni5_wr.lua:29: expected: \"xix\"\nactual: \"xixi\"\nstack traceback:\n\t/tmp/tmpipni5_wr.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local table = {\n        'M': 1000,\n        'CM': 900,\n        'D': 500,\n        'CD': 400,\n        'C': 100,\n        'XC': 90,\n        'L': 50,\n        'XL': 40,\n        'X': 10,\n        'IX': 9,\n        'V': 5,\n        'IV': 4,\n        'I': 1\n    }\n    local result = \"\"\n    for i = 1, #table do\n        if number >= table[i] then\n            result = result .. table[i]\n            number = number - table[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmpvtxvt5c8.lua:13: '}' expected (to close '{' at line 12) near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local roman_numeral = {}\n    local roman_numeral_table = {\n        'M' = 1000,\n        'CM' = 900,\n        'D' = 500,\n        'CD' = 400,\n        'C' = 100,\n        'XC' = 90,\n        'L' = 50,\n        'XL' = 40,\n        'X' = 10,\n        'IX' = 9,\n        'V' = 5,\n        'IV' = 4,\n        'I' = 1\n    }\n    for i = 1, #roman_numeral_table, 2 do\n        for j = 1, #roman_numeral_table[i], 2 do\n            if roman_numeral_table[i] > number then\n                break\n            elseif roman_numeral_table[i] < number then\n                number = number - roman_numeral_table[i]\n            else\n                roman_numeral[#roman_numeral + 1] = roman_numeral_table[i]\n                number = number - roman_numeral_table[i]\n                break\n        end\n    end\n    return string.gsub(roman_numeral, '%d', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmp0q6qmcah.lua:14: '}' expected (to close '{' at line 13) near '='\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}