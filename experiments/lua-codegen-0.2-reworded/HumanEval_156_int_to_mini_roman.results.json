{
  "language": "lua",
  "name": "HumanEval_156_int_to_mini_roman",
  "results": [
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local roman_numeral = {'m':1000, 'd':500, 'c':100, 'l':50, 'x':10, 'v':5, 'i':1}\n    local roman_numeral_list = {'m':'m', 'd':'d', 'c':'c', 'l':'l', 'x':'x', 'v':'v', 'i':'i'}\n    local result = \"\"\n    for i = 1, #roman_numeral_list, 2 do\n        if number >= roman_numeral[roman_numeral_list[i]] then\n            result = result .. roman_numeral_list[i]\n            number = number - roman_numeral[roman_numeral_list[i]]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpejc_5_sq.lua:12: '}' expected near ':'\n",
      "stdout": "",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number >= 1000 do\n        result = string.gsub(result, \"m\", \"mm\")\n        number = number - 1000\n    end\n    while number >= 900 do\n        result = string.gsub(result, \"cm\", \"cmm\")\n        number = number - 900\n    end\n    while number >= 500 do\n        result = string.gsub(result, \"d\", \"dd\")\n        number = number - 500\n    end\n    while number >= 400 do\n        result = string.gsub(result, \"cd\", \"cd\")\n        number = number - 400\n    end\n    while number >= 100 do\n        result = string.gsub(result, \"c\", \"cc\")\n        number = number - 100\n    end\n    while number >= 90 do\n        result = string.gsub(result, \"xc\", \"xcc\")\n        number = number - 90\n    end\n    while number >= 50 do\n        result = string.gsub(result, \"l\", \"ll\")\n        number = number - 50\n    end\n    while number >= 40 do\n        result = string.gsub(result, \"xl\", \"xll\")\n        number = number - 40\n    end\n    while number >= 10 do\n        result = string.gsub(result, \"x\", \"xx\")\n        number = number - 10\n    end\n    while number >= 9 do\n        result = string.gsub(result, \"ix\", \"ix\")\n        number = number - 9\n    end\n    while number >= 5 do\n        result = string.gsub(result, \"v\", \"vv\")\n        number = number - 5\n    end\n    while number >= 4 do\n        result = string.gsub(result, \"iv\", \"iv\")\n        number = number - 4\n    end\n    while number >= 1 do\n        result = string.gsub(result, \"i\", \"ii\")\n        number = number - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphjfxz3tt.lua:72: expected: \"xix\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmphjfxz3tt.lua:72: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local roman_numerals = {\n        'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000\n    }\n    local result = ''\n    for i = 1, #roman_numerals, 2 do\n        if number >= roman_numerals[i] then\n            result = result .. string.lower(roman_numerals[i])\n            number = number - roman_numerals[i]\n        else\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpofwql_2d.lua:13: '}' expected (to close '{' at line 12) near ':'\n",
      "stdout": "",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local num = number\n    local i = 1\n    while num > 0 do\n        if num >= 1000 then\n            result = result .. \"m\"\n            num = num - 1000\n        end\n        if num >= 900 then\n            result = result .. \"cm\"\n            num = num - 900\n        end\n        if num >= 500 then\n            result = result .. \"d\"\n            num = num - 500\n        end\n        if num >= 400 then\n            result = result .. \"cd\"\n            num = num - 400\n        end\n        if num >= 100 then\n            result = result .. \"c\"\n            num = num - 100\n        end\n        if num >= 90 then\n            result = result .. \"xc\"\n            num = num - 90\n        end\n        if num >= 50 then\n            result = result .. \"l\"\n            num = num - 50\n        end\n        if num >= 40 then\n            result = result .. \"xl\"\n            num = num - 40\n        end\n        if num >= 10 then\n            result = result .. \"x\"\n            num = num - 10\n        end\n        if num >= 9 then\n            result = result .. \"ix\"\n            num = num - 9\n        end\n        if num >= 5 then\n            result = result .. \"v\"\n            num = num - 5\n        end\n        if num >= 4 then\n            result = result .. \"iv\"\n            num = num - 4\n        end\n        if num >= 1 then\n            result = result .. \"i\"\n            num = num - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpigin40s2.lua:78: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpigin40s2.lua:78: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 0,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        elseif number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        elseif number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        elseif number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        elseif number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        elseif number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        elseif number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        elseif number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        elseif number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        elseif number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        elseif number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        elseif number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        elseif number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 0,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        elseif number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        elseif number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        elseif number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        elseif number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        elseif number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        elseif number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        elseif number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        elseif number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        elseif number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        elseif number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        elseif number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        elseif number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "OK",
      "stderr": "",
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local table = {\n        'I' = 1,\n        'V' = 5,\n        'X' = 10,\n        'L' = 50,\n        'C' = 100,\n        'D' = 500,\n        'M' = 1000\n    }\n    local result = \"\"\n    for i = 1, #table do\n        if number >= table[i] then\n            result = result .. table[i]\n            number = number - table[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpwafzjebl.lua:13: '}' expected (to close '{' at line 12) near '='\n",
      "stdout": "",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    for i = 1, number do\n        if i < 4 then\n            result = result .. string.char(string.byte(i + 10))\n        else\n            result = result .. string.char(string.byte(i + 90))\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwos5ww_x.lua:26: expected: \"xix\"\nactual: \"1119999991111111111\"\nstack traceback:\n\t/tmp/tmpwos5ww_x.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local table = {\n        1000 = 'm',\n        900 = 'cm',\n        500 = 'd',\n        400 = 'cd',\n        100 = 'c',\n        90 = 'xc',\n        50 = 'l',\n        40 = 'xl',\n        10 = 'x',\n        9 = 'ix',\n        5 = 'v',\n        4 = 'iv',\n        1 = 'i'\n    }\n    local result = \"\"\n    for i = 1, #table do\n        if number >= table[i] then\n            result = result .. table[i]\n            number = number - table[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp70_no6iu.lua:13: '}' expected (to close '{' at line 12) near '='\n",
      "stdout": "",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    for i = 1, 9 do\n        result = result .. string.char(number % 10)\n        number = number / 10\n    end\n    for i = 9, 1, -1 do\n        result = result .. string.char(number % 10)\n        number = number / 10\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvbmzrlau.lua:14: bad argument #1 to 'char' (number has no integer representation)\nstack traceback:\n\t/tmp/tmpvbmzrlau.lua:14: in local 'candidate'\n\t/tmp/tmpvbmzrlau.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local roman_numeral = {}\n    local num_map = {\n        1: 'i',\n        5: 'v',\n        10: 'x',\n        50: 'l',\n        100: 'c',\n        500: 'd',\n        1000: 'm'\n    }\n    for k, v in num_map.iteritems() do\n        if number >= k then\n            number = number - k\n            roman_numeral[k] = v\n        end\n    end\n    return roman_numeral[number]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpxdonmi_6.lua:14: '}' expected (to close '{' at line 13) near ':'\n",
      "stdout": "",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local roman_numeral = {}\n    for i = 1, 9 do\n        roman_numeral[i] = string.char(i)\n    end\n    for i = 10, 100 do\n        roman_numeral[i] = string.char(i)\n        roman_numeral[i+10] = string.char(i)\n    end\n    for i = 100, 1000 do\n        roman_numeral[i] = string.char(i)\n        roman_numeral[i+100] = string.char(i)\n        roman_numeral[i+100] = string.char(i)\n    end\n    return string.gsub(string.gsub(string.gsub(number, '%d', function(n) return roman_numeral[n] end), '%c', function(n) return roman_numeral[n] end), '%b', function(n) return roman_numeral[n] end), '%s', function(n) return roman_numeral[n] end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp_e8tzzn4.lua:25: 'end' expected (to close 'function' at line 11) near ')'\n",
      "stdout": "",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while i <= number do\n        if number % i == 0 then\n            result = string.format('%s%s', result, string.lower(string.format('%d', i)))\n        else\n            result = string.format('%s%s', result, string.lower(string.format('%d', i)))\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkfjozofm.lua:28: expected: \"xix\"\nactual: \"12345678910111213141516171819\"\nstack traceback:\n\t/tmp/tmpkfjozofm.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while i <= number do\n        if number % i == 0 then\n            result = result .. string.lower(roman_numerals[i])\n            number = number / i\n        else\n            result = result .. string.lower(roman_numerals[i])\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnf6q7wc_.lua:16: attempt to index a nil value (global 'roman_numerals')\nstack traceback:\n\t/tmp/tmpnf6q7wc_.lua:16: in local 'candidate'\n\t/tmp/tmpnf6q7wc_.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local roman_numeral = {}\n    local roman_numeral_list = {'m': 1000, 'd': 500, 'c': 100, 'l': 50, 'x': 10, 'v': 5, 'i': 1}\n    for k, v in pairs(roman_numeral_list) do\n        if number >= v then\n            number -= v\n            roman_numeral[k] = true\n        end\n    end\n    return string.gsub(string.pack(''), '%d', roman_numeral)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpx_x6o0i3.lua:13: '}' expected near ':'\n",
      "stdout": "",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    for i = 1, 3 do\n        if number >= 10 then\n            result = string.format('%s%s', result, number % 10)\n            number = number / 10\n        else\n            result = string.format('%s%s', result, number)\n            break\n        end\n    end\n    return string.lower(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa1532919.lua:28: expected: \"xix\"\nactual: \"91.9\"\nstack traceback:\n\t/tmp/tmpa1532919.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number >= 10 do\n        result = string.char(number % 10) .. result\n        number = number / 10\n        i = i + 1\n    end\n    while number > 0 do\n        result = string.char(number % 10) .. result\n        number = number / 10\n        i = i + 1\n    end\n    return string.lower(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbztq3zcs.lua:20: bad argument #1 to 'char' (number has no integer representation)\nstack traceback:\n\t/tmp/tmpbztq3zcs.lua:20: in local 'candidate'\n\t/tmp/tmpbztq3zcs.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    local i = 1\n    while number > 0 do\n        if number >= 1000 then\n            result = result .. \"m\"\n            number = number - 1000\n        end\n        if number >= 900 then\n            result = result .. \"cm\"\n            number = number - 900\n        end\n        if number >= 500 then\n            result = result .. \"d\"\n            number = number - 500\n        end\n        if number >= 400 then\n            result = result .. \"cd\"\n            number = number - 400\n        end\n        if number >= 100 then\n            result = result .. \"c\"\n            number = number - 100\n        end\n        if number >= 90 then\n            result = result .. \"xc\"\n            number = number - 90\n        end\n        if number >= 50 then\n            result = result .. \"l\"\n            number = number - 50\n        end\n        if number >= 40 then\n            result = result .. \"xl\"\n            number = number - 40\n        end\n        if number >= 10 then\n            result = result .. \"x\"\n            number = number - 10\n        end\n        if number >= 9 then\n            result = result .. \"ix\"\n            number = number - 9\n        end\n        if number >= 5 then\n            result = result .. \"v\"\n            number = number - 5\n        end\n        if number >= 4 then\n            result = result .. \"iv\"\n            number = number - 4\n        end\n        if number >= 1 then\n            result = result .. \"i\"\n            number = number - 1\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamrx2jcf.lua:77: expected: \"ccli\"\nactual: \"cxclxi\"\nstack traceback:\n\t/tmp/tmpamrx2jcf.lua:77: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local table = {\n        'M': 1000,\n        'CM': 900,\n        'D': 500,\n        'CD': 400,\n        'C': 100,\n        'XC': 90,\n        'L': 50,\n        'XL': 40,\n        'X': 10,\n        'IX': 9,\n        'V': 5,\n        'IV': 4,\n        'I': 1\n    }\n    local result = \"\"\n    for i = 1, #table do\n        if number >= table[i] then\n            result = string.format('%s%s', result, table[i])\n            number = number - table[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpryai37sv.lua:13: '}' expected (to close '{' at line 12) near ':'\n",
      "stdout": "",
      "timestamp": 1661907410
    },
    {
      "exit_code": 1,
      "program": "-- Given a positive integer, obtain its roman numeral equivalent as a string,\n-- and return it in lowercase.\n-- Restrictions: 1 <= num <= 1000\n-- Examples:\n-- >>> int_to_mini_roman(19)\n-- 'xix'\n-- >>> int_to_mini_roman(152)\n-- 'clii'\n-- >>> int_to_mini_roman(426)\n-- 'cdxxvi'\nlocal function int_to_mini_roman(number)\n    local result = \"\"\n    for i = 1, number do\n        if i < 4 then\n            result = result .. \"i\"\n        elseif i < 9 then\n            result = result .. \"v\"\n        elseif i < 40 then\n            result = result .. \"x\"\n        elseif i < 90 then\n            result = result .. \"l\"\n        elseif i < 400 then\n            result = result .. \"c\"\n        else\n            result = result .. \"d\"\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = int_to_mini_roman\n    lu.assertEquals(candidate(19), 'xix')\n    lu.assertEquals(candidate(152), 'clii')\n    lu.assertEquals(candidate(251), 'ccli')\n    lu.assertEquals(candidate(426), 'cdxxvi')\n    lu.assertEquals(candidate(500), 'd')\n    lu.assertEquals(candidate(1), 'i')\n    lu.assertEquals(candidate(4), 'iv')\n    lu.assertEquals(candidate(43), 'xliii')\n    lu.assertEquals(candidate(90), 'xc')\n    lu.assertEquals(candidate(94), 'xciv')\n    lu.assertEquals(candidate(532), 'dxxxii')\n    lu.assertEquals(candidate(900), 'cm')\n    lu.assertEquals(candidate(994), 'cmxciv')\n    lu.assertEquals(candidate(1000), 'm')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpepvy175d.lua:34: expected: \"xix\"\nactual: \"iiivvvvvxxxxxxxxxxx\"\nstack traceback:\n\t/tmp/tmpepvy175d.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907411
    }
  ]
}