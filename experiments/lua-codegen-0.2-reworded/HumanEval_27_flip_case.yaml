name: HumanEval_27_flip_case
language: lua
prompt: "-- For a given string, flip lowercase characters to uppercase and uppercase\
  \ to lowercase.\n-- >>> flip_case('Hello')\n-- 'hELLO'\nlocal function flip_case(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = flip_case\n\
  \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hello!'),\
  \ 'hELLO!')\n    lu.assertEquals(candidate('These violent delights have violent\
  \ ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    return string:gsub(/[a-z]/, function(match) return string.charCodeAt(1)\
    \ - 32 end)\nend", "    local lower = string:lower()\n    local upper = string:upper()\n\
    \    return lower .. upper\nend", "    local lower = string:lower()\n    local\
    \ upper = string:upper()\n    return lower .. upper\nend", "    local lower =\
    \ string:lower()\n    local upper = string:upper()\n    return lower .. upper\n\
    end", "    return string..gsub(/[a-z]/, function(match) return string.charCodeAt(1)\
    \ - 32 .. string.charCodeAt(1) end)\nend", "    return string.gsub(/[a-z]/i, function(char)\n\
    \        return char.toUpper()\n    end)\nend", "    return string.gsub(/[a-z]/,\
    \ function(match) return string.char(match.toUpperCase()) end)\nend", "    return\
    \ string:gsub(/[a-z]/i, function(s) return string.charAt(s) .. string.charAt(s).toUpperCase()\
    \ end)\nend", "    return string .. string.gsub(string, 'a-z', 'A-Z') .. string.gsub(string,\
    \ 'A-Z', 'a-z')\nend", "    local lower_case_map = {'a': 'A', 'b': 'B', 'c': 'C',\
    \ 'd': 'D', 'e': 'E', 'f': 'F', 'g': 'G', 'h': 'H', 'i': 'I', 'j': 'J', 'k': 'K',\
    \ 'l': 'L', 'm': 'M', 'n': 'N', 'o': 'O', 'p': 'P', 'q': 'Q', 'r': 'R', 's': 'S',\
    \ 't': 'T', 'u': 'U', 'v': 'V', 'w': 'W', 'x': 'X', 'y': 'Y', 'z': 'Z'}\n    local\
    \ upper_case_map = {'A': 'a', 'B': 'b', 'C': 'c', 'D': 'd', 'E': 'e', 'F': 'f',\
    \ 'G': 'g', 'H': 'h', 'I': 'i', 'J': 'j', 'K': 'k', 'L': 'l', 'M': 'm', 'N': 'n',\
    \ 'O': 'o', 'P': 'p', 'Q': 'q', 'R': 'r', 'S': 's', 'T': 't', 'U': 'u', 'V': 'v',\
    \ 'W': 'w', 'X': 'x', 'Y': 'y', 'Z': 'z'}\n    local result = string\n    for\
    \ i = 1, #result, 2 do\n        result[i] = upper_case_map[result[i]]\n    end\n\
    \    return result\nend", "    local lower = string:lower()\n    local upper =\
    \ string:upper()\n    return lower .. upper\nend", "    local lower = string:lower()\n\
    \    local upper = string:upper()\n    return lower .. upper\nend", "    return\
    \ string..gsub(/[a-z]/i, function(match) return string.charCodeAt(1) - 32 end)..gsub(/[A-Z]/i,\
    \ function(match) return string.charCodeAt(1) - 32 end)\nend", "    local lower\
    \ = string:lower()\n    local upper = string:upper()\n    return lower .. upper\n\
    end", "    local lower = string:lower()\n    local upper = string:upper()\n  \
    \  return lower .. upper\nend", "    return string..gsub(/[a-z]/, function(match)\
    \ return string.char(match.toUpper) end)\nend", "    local upper = string:gsub('[a-z]',\
    \ 'A')\n    local lower = string:gsub('[A-Z]', 'a')\n    return upper .. lower\n\
    end", "    return string.gsub(/[a-z]/i, function(match) return string.charAt(1).toUpper()\
    \ end) .. string.gsub(/[A-Z]/i, function(match) return string.charAt(1).toLower()\
    \ end)\nend", "    return string..gsub(/[a-z]/, function(match) return string.char(toupper(string.char(match)))\
    \ end)\nend", "    local lower_case = string:lower()\n    local upper_case = string:upper()\n\
    \    return lower_case .. upper_case\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
