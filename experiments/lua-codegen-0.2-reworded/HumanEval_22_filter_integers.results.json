{
  "language": "lua",
  "name": "HumanEval_22_filter_integers",
  "results": [
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpqbti_ttq.lua:19: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907473
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number' then\n            table.insert(result, value)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36ticgd_.lua:20: expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp36ticgd_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value % 1 == 0\n    end\n    return filter(is_integer, values)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplrzj47jc.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmplrzj47jc.lua:10: in local 'candidate'\n\t/tmp/tmplrzj47jc.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value % 1 == 0\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmplqo_m0ki.lua:19: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpqbti_ttq.lua:19: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907473
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value % 1 == 0\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmplqo_m0ki.lua:19: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(is_integer, values)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpep3e97gh.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpep3e97gh.lua:10: in local 'candidate'\n\t/tmp/tmpep3e97gh.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local filtered = {}\n    for k, v in pairs(values) do\n        if type(v) == 'number' then\n            table.insert(filtered, v)\n        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp48bcz3xy.lua:20: expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp48bcz3xy.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for i, value in ipairs(values) do\n        if type(value) == 'number' then\n            table.insert(result, value)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp27cwi7at.lua:20: expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp27cwi7at.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for _, value in pairs(values) do\n        if type(value) == 'number' then\n            table.insert(result, value)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhv_fsbx.lua:20: expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpkhv_fsbx.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for _, value in pairs(values) do\n        if type(value) == 'number' then\n            table.insert(result, value)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhv_fsbx.lua:20: expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpkhv_fsbx.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for i, v in pairs(values) do\n        if type(v) == 'number' then\n            table.insert(result, v)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppdw0197h.lua:20: expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmppdw0197h.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number' then\n            table.insert(result, value)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36ticgd_.lua:20: expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp36ticgd_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number' then\n            table.insert(result, value)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36ticgd_.lua:20: expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp36ticgd_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value % 1 == 0\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmplqo_m0ki.lua:19: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value % 1 == 0\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp__mtphlf.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmp__mtphlf.lua:10: in local 'candidate'\n\t/tmp/tmp__mtphlf.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpqbti_ttq.lua:19: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907473
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, function(value) return is_integer(value) end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9hkoh30x.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmp9hkoh30x.lua:10: in local 'candidate'\n\t/tmp/tmp9hkoh30x.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number' then\n            table.insert(result, value)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36ticgd_.lua:20: expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp36ticgd_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value % 1 == 0\n    end\n    return filter(is_integer, values)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplrzj47jc.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmplrzj47jc.lua:10: in local 'candidate'\n\t/tmp/tmplrzj47jc.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for _, value in pairs(values) do\n        if type(value) == 'number' then\n            table.insert(result, value)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhv_fsbx.lua:20: expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpkhv_fsbx.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value % 1 == 0\n    end\n    return filter(is_integer, values)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplrzj47jc.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmplrzj47jc.lua:10: in local 'candidate'\n\t/tmp/tmplrzj47jc.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value % 1 == 0\n    end\n    return filter(is_integer, values)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplrzj47jc.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmplrzj47jc.lua:10: in local 'candidate'\n\t/tmp/tmplrzj47jc.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for _, value in pairs(values) do\n        if type(value) == 'number' then\n            table.insert(result, value)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhv_fsbx.lua:20: expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpkhv_fsbx.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value % 1 == 0\n    end\n    return filter(is_integer, values)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplrzj47jc.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmplrzj47jc.lua:10: in local 'candidate'\n\t/tmp/tmplrzj47jc.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for _, value in pairs(values) do\n        if type(value) == 'number' then\n            table.insert(result, value)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhv_fsbx.lua:20: expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpkhv_fsbx.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907474
    },
    {
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local filtered = {}\n    for i, v in ipairs(values) do\n        if type(v) == 'number' then\n            filtered[i] = v\n        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpexlgv1ll.lua:20: expected: {4, 9}\nactual: {4, 4=23.2, 5=9}\nstack traceback:\n\t/tmp/tmpexlgv1ll.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for _, value in pairs(values) do\n        if type(value) == 'number' then\n            table.insert(result, value)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhv_fsbx.lua:20: expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpkhv_fsbx.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number' then\n            table.insert(result, value)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36ticgd_.lua:20: expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp36ticgd_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpqbti_ttq.lua:19: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907473
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for _, value in pairs(values) do\n        if type(value) == 'number' then\n            table.insert(result, value)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhv_fsbx.lua:20: expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpkhv_fsbx.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907474
    },
    {
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value % 1 == 0\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp__mtphlf.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmp__mtphlf.lua:10: in local 'candidate'\n\t/tmp/tmp__mtphlf.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for _, value in pairs(values) do\n        if type(value) == 'number' then\n            table.insert(result, value)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhv_fsbx.lua:20: expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpkhv_fsbx.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907474
    },
    {
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local filtered = {}\n    for _, value in pairs(values) do\n        if type(value) == 'number' then\n            table.insert(filtered, value)\n        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbg35mwqz.lua:20: expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpbg35mwqz.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for _, value in pairs(values) do\n        if type(value) == 'number' then\n            table.insert(result, value)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhv_fsbx.lua:20: expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpkhv_fsbx.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, function(value) return is_integer(value) end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9hkoh30x.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmp9hkoh30x.lua:10: in local 'candidate'\n\t/tmp/tmp9hkoh30x.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpqbti_ttq.lua:19: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907473
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for _, value in pairs(values) do\n        if type(value) == 'number' then\n            table.insert(result, value)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhv_fsbx.lua:20: expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpkhv_fsbx.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value % 1 == 0\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp__mtphlf.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmp__mtphlf.lua:10: in local 'candidate'\n\t/tmp/tmp__mtphlf.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for _, value in pairs(values) do\n        if type(value) == 'number' then\n            table.insert(result, value)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhv_fsbx.lua:20: expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpkhv_fsbx.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907474
    },
    {
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value % 1 == 0\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp__mtphlf.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmp__mtphlf.lua:10: in local 'candidate'\n\t/tmp/tmp__mtphlf.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpqbti_ttq.lua:19: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907473
    },
    {
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value % 1 == 0\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp__mtphlf.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmp__mtphlf.lua:10: in local 'candidate'\n\t/tmp/tmp__mtphlf.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\n\"\"\"\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmptmey71d9.lua:12: unexpected symbol near '\"\"'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for i, v in pairs(values) do\n        if type(v) == 'number' then\n            table.insert(result, v)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppdw0197h.lua:20: expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmppdw0197h.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number' then\n            table.insert(result, value)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36ticgd_.lua:20: expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp36ticgd_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number' then\n            table.insert(result, value)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36ticgd_.lua:20: expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp36ticgd_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpqbti_ttq.lua:19: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907473
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value % 1 == 0\n    end\n    return filter(is_integer, values)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplrzj47jc.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmplrzj47jc.lua:10: in local 'candidate'\n\t/tmp/tmplrzj47jc.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for _, v in ipairs(values) do\n        if type(v) == 'number' then\n            table.insert(result, v)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpck70k62i.lua:20: expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpck70k62i.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for _, v in pairs(values) do\n        if type(v) == 'number' then\n            table.insert(result, v)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsvzvzpj7.lua:20: expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpsvzvzpj7.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number' then\n            table.insert(result, value)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36ticgd_.lua:20: expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp36ticgd_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for _, value in pairs(values) do\n        if type(value) == 'number' then\n            table.insert(result, value)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhv_fsbx.lua:20: expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpkhv_fsbx.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for _, value in pairs(values) do\n        if type(value) == 'number' then\n            table.insert(result, value)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhv_fsbx.lua:20: expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpkhv_fsbx.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value % 1 == 0\n    end\n    return filter(is_integer, values)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplrzj47jc.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmplrzj47jc.lua:10: in local 'candidate'\n\t/tmp/tmplrzj47jc.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for _, value in pairs(values) do\n        if type(value) == 'number' then\n            table.insert(result, value)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhv_fsbx.lua:20: expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpkhv_fsbx.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value % 1 == 0\n    end\n    return filter(is_integer, values)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplrzj47jc.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmplrzj47jc.lua:10: in local 'candidate'\n\t/tmp/tmplrzj47jc.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number' then\n            table.insert(result, value)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36ticgd_.lua:20: expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp36ticgd_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for i, v in ipairs(values) do\n        if type(v) == 'number' then\n            table.insert(result, v)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyde8euql.lua:20: expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpyde8euql.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, function(value) return is_integer(value) end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9hkoh30x.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmp9hkoh30x.lua:10: in local 'candidate'\n\t/tmp/tmp9hkoh30x.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number' then\n            table.insert(result, value)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36ticgd_.lua:20: expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp36ticgd_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value % 1 == 0\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmplqo_m0ki.lua:19: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, function(value) return is_integer(value) end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9hkoh30x.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmp9hkoh30x.lua:10: in local 'candidate'\n\t/tmp/tmp9hkoh30x.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for _, v in pairs(values) do\n        if type(v) == 'number' then\n            table.insert(result, v)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsvzvzpj7.lua:20: expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpsvzvzpj7.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for _, value in pairs(values) do\n        if type(value) == 'number' then\n            table.insert(result, value)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhv_fsbx.lua:20: expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpkhv_fsbx.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpqbti_ttq.lua:19: 'end' expected (to close 'function' at line 6) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907473
    },
    {
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value % 1 == 0\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp__mtphlf.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmp__mtphlf.lua:10: in local 'candidate'\n\t/tmp/tmp__mtphlf.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for _, value in pairs(values) do\n        if type(value) == 'number' then\n            table.insert(result, value)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhv_fsbx.lua:20: expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpkhv_fsbx.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for _, value in pairs(values) do\n        if type(value) == 'number' then\n            table.insert(result, value)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhv_fsbx.lua:20: expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpkhv_fsbx.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number' then\n            table.insert(result, value)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36ticgd_.lua:20: expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmp36ticgd_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for _, value in pairs(values) do\n        if type(value) == 'number' then\n            table.insert(result, value)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhv_fsbx.lua:20: expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpkhv_fsbx.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\n\"\"\"\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmptmey71d9.lua:12: unexpected symbol near '\"\"'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for _, value in pairs(values) do\n        if type(value) == 'number' then\n            table.insert(result, value)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhv_fsbx.lua:20: expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpkhv_fsbx.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for _, value in pairs(values) do\n        if type(value) == 'number' then\n            table.insert(result, value)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhv_fsbx.lua:20: expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpkhv_fsbx.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for _, value in pairs(values) do\n        if type(value) == 'number' then\n            table.insert(result, value)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhv_fsbx.lua:20: expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpkhv_fsbx.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for _, value in pairs(values) do\n        if type(value) == 'number' then\n            table.insert(result, value)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhv_fsbx.lua:20: expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpkhv_fsbx.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value % 1 == 0\n    end\n    return filter(is_integer, values)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplrzj47jc.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmplrzj47jc.lua:10: in local 'candidate'\n\t/tmp/tmplrzj47jc.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local filtered = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number' then\n            table.insert(filtered, value)\n        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkg300j89.lua:20: expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpkg300j89.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for _, value in pairs(values) do\n        if type(value) == 'number' then\n            table.insert(result, value)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhv_fsbx.lua:20: expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpkhv_fsbx.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for _, value in pairs(values) do\n        if type(value) == 'number' then\n            table.insert(result, value)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhv_fsbx.lua:20: expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpkhv_fsbx.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907474
    },
    {
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for i, v in ipairs(values) do\n        if type(v) == 'number' then\n            table.insert(result, v)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyde8euql.lua:20: expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpyde8euql.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\n\"\"\"\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmptmey71d9.lua:12: unexpected symbol near '\"\"'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for _, value in pairs(values) do\n        if type(value) == 'number' then\n            table.insert(result, value)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhv_fsbx.lua:20: expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpkhv_fsbx.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local result = {}\n    for _, v in pairs(values) do\n        if type(v) == 'number' then\n            table.insert(result, v)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsvzvzpj7.lua:20: expected: {4, 9}\nactual: {4, 23.2, 9}\nstack traceback:\n\t/tmp/tmpsvzvzpj7.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value % 1 == 0\n    end\n    return filter(is_integer, values)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplrzj47jc.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmplrzj47jc.lua:10: in local 'candidate'\n\t/tmp/tmplrzj47jc.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value % 1 == 0\n    end\n    return filter(is_integer, values)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplrzj47jc.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmplrzj47jc.lua:10: in local 'candidate'\n\t/tmp/tmplrzj47jc.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    },
    {
      "exit_code": 1,
      "program": "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers(['a', 3.14, 5])\n-- [5]\n-- >>> filter_integers([1, 2, 3, 'abc', {}, []])\n-- [1, 2, 3]\nlocal function filter_integers(values)\n    local function is_integer(value)\n        return type(value) == 'number' and value == math.floor(value)\n    end\n    return filter(values, is_integer)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {}, 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a', 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped5fbvns.lua:10: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmped5fbvns.lua:10: in local 'candidate'\n\t/tmp/tmped5fbvns.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907474
    }
  ]
}