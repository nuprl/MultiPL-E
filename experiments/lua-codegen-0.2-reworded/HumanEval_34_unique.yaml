name: HumanEval_34_unique
language: lua
prompt: "-- Return sorted unique elements in a table\n-- >>> unique([5, 3, 5, 2, 3,\
  \ 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
  \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local t = {}\n    for i, v in ipairs(l) do\n        if t[v] ==\
    \ nil then\n            t[v] = true\n        end\n    end\n    return unpack(t)\n\
    end", "    local t = {}\n    for i, v in ipairs(l) do\n        if t[v] == nil\
    \ then\n            t[v] = true\n        end\n    end\n    return unpack(t)\n\
    end", "    local t = {}\n    for i, v in ipairs(l) do\n        if not t[v] then\n\
    \            t[v] = true\n        end\n    end\n    return unpack(t)\nend", " \
    \   local t = {}\n    for i, v in ipairs(l) do\n        if t[v] == nil then\n\
    \            t[v] = true\n        end\n    end\n    return unpack(t)\nend", " \
    \   local t = {}\n    for i, v in ipairs(l) do\n        if not t[v] then\n   \
    \         t[v] = true\n        end\n    end\n    return unpack(t)\nend", "   \
    \ local t = {}\n    for i, v in ipairs(l) do\n        if not t[v] then\n     \
    \       t[v] = true\n        end\n    end\n    return unpack(t)\nend", "    local\
    \ t = {}\n    for i, v in ipairs(l) do\n        if not t[v] then\n           \
    \ t[v] = true\n        end\n    end\n    return unpack(t)\nend", "    local t\
    \ = {}\n    for i, v in ipairs(l) do\n        if not t[v] then\n            t[v]\
    \ = true\n        end\n    end\n    return unpack(t)\nend", "    local t = {}\n\
    \    for i, v in ipairs(l) do\n        if not t[v] then\n            t[v] = true\n\
    \        end\n    end\n    return unpack(t)\nend", "    local t = {}\n    for\
    \ i, v in ipairs(l) do\n        if not t[v] then\n            t[v] = true\n  \
    \      end\n    end\n    return unpack(t)\nend", "    local t = {}\n    for i,\
    \ v in ipairs(l) do\n        if not t[v] then\n            t[v] = true\n     \
    \   end\n    end\n    return unpack(t)\nend", "    local t = {}\n    for i, v\
    \ in ipairs(l) do\n        if not t[v] then t[v] = true end\n    end\n    return\
    \ unpack(t)\nend", "    local t = {}\n    for i, v in ipairs(l) do\n        if\
    \ not t[v] then\n            t[v] = true\n        end\n    end\n    return unpack(t)\n\
    end", "    local t = {}\n    for i, v in ipairs(l) do\n        if not t[v] then\n\
    \            t[v] = true\n        end\n    end\n    return t.keys()\nend", " \
    \   local t = {}\n    for i, v in ipairs(l) do\n        if not t[v] then\n   \
    \         t[v] = true\n        end\n    end\n    return unpack(t)\nend", "   \
    \ local t = {}\n    for i, v in ipairs(l) do\n        if not t[v] then\n     \
    \       t[v] = true\n        end\n    end\n    return unpack(t)\nend", "    local\
    \ t = {}\n    for i, v in ipairs(l) do\n        if not t[v] then\n           \
    \ t[v] = true\n        end\n    end\n    return unpack(t)\nend", "    local t\
    \ = {}\n    for i, v in ipairs(l) do\n        if not t[v] then t[v] = true end\n\
    \    end\n    return unpack(t)\nend", "    local t = {}\n    for i, v in ipairs(l)\
    \ do\n        if not t[v] then t[v] = true end\n    end\n    return unpack(t)\n\
    end", "    local t = {}\n    for i, v in ipairs(l) do\n        if not t[v] then\
    \ t[v] = true end\n    end\n    return unpack(t)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
