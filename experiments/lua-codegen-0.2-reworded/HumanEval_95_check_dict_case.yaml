name: HumanEval_95_check_dict_case
language: lua
prompt: "-- Given a table, return true if all keys are strings in lower \n-- case\
  \ or all keys are strings in upper case, else return false.\n-- The function should\
  \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({\"\
  a\":\"apple\", \"b\":\"banana\"})\n-- True\n-- >>> check_dict_case({\"a\":\"apple\"\
  , \"A\":\"banana\", \"B\":\"banana\"})\n-- False\n-- >>> check_dict_case({\"a\"\
  :\"apple\", 8:\"banana\", \"a\":\"apple\"})\n-- False\n-- >>> check_dict_case({\"\
  Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"})\n-- False\n-- >>> check_dict_case({\"\
  STATE\":\"NC\", \"ZIP\":\"12345\" })\n-- True\nlocal function check_dict_case(dict)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
  \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
  \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}),\
  \ false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5'] = 'banana',\
  \ ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name'] = 'John', ['Age']\
  \ = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
  \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit'] =\
  \ 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}), false)\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" or\
    \ k ~= tostring(k) then\n            return false\n        end\n        if type(v)\
    \ ~= \"string\" or v ~= tostring(v) then\n            return false\n        end\n\
    \    end\n    return true\nend", "    for k,v in pairs(dict) do\n        if type(k)\
    \ ~= \"string\" or (type(k) == \"string\" and string.lower(k) ~= k) then\n   \
    \         return false\n        end\n    end\n    return true\nend", "    for\
    \ k, v in pairs(dict) do\n        if type(k) ~= \"string\" or k ~= string.lower(k)\
    \ or type(v) ~= \"string\" then\n            return false\n        end\n    end\n\
    \    return true\nend", "    for k, v in pairs(dict) do\n        if type(k) ~=\
    \ \"string\" or (type(k) == \"string\" and string.lower(k) ~= k) then\n      \
    \      return false\n        end\n        if type(v) ~= \"string\" or (type(v)\
    \ == \"string\" and string.lower(v) ~= v) then\n            return false\n   \
    \     end\n    end\n    return true\nend", "    for k, v in pairs(dict) do\n \
    \       if type(k) ~= \"string\" or k ~= string.lower(k) or type(v) ~= \"string\"\
    \ then\n            return false\n        end\n    end\n    return true\nend",
  "    for k,v in pairs(dict) do\n        if type(k) ~= \"string\" or type(v) ~= \"\
    string\" then\n            return false\n        end\n    end\n    return true\n\
    end", "    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" or string.lower(k)\
    \ ~= k or string.upper(k) ~= k then\n            return false\n        end\n \
    \   end\n    return true\nend", "    for k, v in pairs(dict) do\n        if type(k)\
    \ ~= \"string\" or (k ~= string.lower(k) and k ~= string.upper(k)) then\n    \
    \        return false\n        end\n    end\n    return true\nend", "    for k,\
    \ v in pairs(dict) do\n        if type(k) ~= \"string\" or k ~= string.lower(k)\
    \ or type(v) ~= \"string\" then\n            return false\n        end\n    end\n\
    \    return true\nend", "    for k,v in pairs(dict) do\n        if type(k) ~=\
    \ \"string\" or (type(k) == \"string\" and string.lower(k) ~= k) then\n      \
    \      return false\n        end\n    end\n    return true\nend", "    for k,\
    \ v in pairs(dict) do\n        if type(k) ~= \"string\" or type(v) ~= \"string\"\
    \ then\n            return false\n        end\n    end\n    return true\nend",
  "    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" or type(v) ~=\
    \ \"string\" then\n            return false\n        end\n    end\n    return\
    \ true\nend", "    for k, v in pairs(dict) do\n        if type(k) ~= \"string\"\
    \ or type(v) ~= \"string\" then\n            return false\n        end\n    end\n\
    \    return true\nend", "    for k, v in pairs(dict) do\n        if type(k) ~=\
    \ \"string\" or k ~= string.lower(k) or type(v) ~= \"string\" then\n         \
    \   return false\n        end\n    end\n    return true\nend", "    for k, v in\
    \ pairs(dict) do\n        if type(k) ~= \"string\" or type(v) ~= \"string\" then\n\
    \            return false\n        end\n    end\n    return true\nend", "    for\
    \ k, v in pairs(dict) do\n        if type(k) ~= \"string\" or (type(k) == \"string\"\
    \ and string.lower(k) ~= k) then\n            return false\n        end\n    \
    \    if type(v) ~= \"string\" or (type(v) == \"string\" and string.lower(v) ~=\
    \ v) then\n            return false\n        end\n    end\n    return true\nend",
  "    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" or (type(k) ==\
    \ \"string\" and string.lower(k) ~= k) then\n            return false\n      \
    \  end\n        if type(v) ~= \"string\" or (type(v) == \"string\" and string.lower(v)\
    \ ~= v) then\n            return false\n        end\n    end\n    return true\n\
    end", "    if #dict == 0 then\n        return true\n    end\n    for key, value\
    \ in pairs(dict) do\n        if type(key) ~= \"string\" or type(value) ~= \"string\"\
    \ then\n            return false\n        end\n    end\n    return true\nend",
  "    local keys = {}\n    for k, v in pairs(dict) do\n        keys[tostring(k)]\
    \ = true\n    end\n    for k, v in pairs(keys) do\n        if string.upper(k)\
    \ ~= k then\n            return false\n        end\n    end\n    return true\n\
    end", "    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" or (k\
    \ ~= string.lower(k) and k ~= string.upper(k)) then\n            return false\n\
    \        end\n    end\n    return true\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
