{
  "language": "lua",
  "name": "HumanEval_66_digitSum",
  "results": [
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1,#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpprynycjw.lua:20: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1,#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpprynycjw.lua:20: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(filter(function(c)\n        return c >= 'A' and c <= 'Z', s))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpw72gm_r0.lua:19: 'end' expected (to close 'function' at line 18) near ')'\n",
      "stdout": "",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(s:match(\"[A-Z]\"))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsa005jjc.lua:18: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpsa005jjc.lua:18: in local 'candidate'\n\t/tmp/tmpsa005jjc.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(s:match(\"[A-Z]\"):gsub(\"[^A-Z]\", \"\"));\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4lxgjx6h.lua:18: attempt to index a nil value\nstack traceback:\n\t/tmp/tmp4lxgjx6h.lua:18: in local 'candidate'\n\t/tmp/tmp4lxgjx6h.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(s:match(\"[A-Z]\"))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsa005jjc.lua:18: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpsa005jjc.lua:18: in local 'candidate'\n\t/tmp/tmpsa005jjc.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(filter(function(c) c.match(/[A-Z]/), s))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmphfiwbr3f.lua:18: unexpected symbol near '/'\n",
      "stdout": "",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(s:match('[A-Z]') or 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_ci5kz_j.lua:18: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmp_ci5kz_j.lua:18: in local 'candidate'\n\t/tmp/tmp_ci5kz_j.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(s:match(\"[A-Z]\") or \"0\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8kbqtay1.lua:18: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmp8kbqtay1.lua:18: in local 'candidate'\n\t/tmp/tmp8kbqtay1.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(filter(function(c) c.match(\"[A-Z]\") end, s))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmadprj8s.lua:18: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpmadprj8s.lua:18: in local 'candidate'\n\t/tmp/tmpmadprj8s.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(filter(function(c)\n        return c >= 'A' and c <= 'Z',\n        s))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmp11rrgnlz.lua:20: 'end' expected (to close 'function' at line 18) near ')'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(filter(function(c)\n        return c >= 'A' and c <= 'Z'\n    end, s))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp69068zlw.lua:18: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmp69068zlw.lua:18: in local 'candidate'\n\t/tmp/tmp69068zlw.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(s:match(\"[A-Z]\"))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsa005jjc.lua:18: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpsa005jjc.lua:18: in local 'candidate'\n\t/tmp/tmpsa005jjc.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(filter(function(c)\n        return c >= 'A' and c <= 'Z',\n        s:char()\n    ))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmps02kitqh.lua:21: 'end' expected (to close 'function' at line 18) near ')'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(filter(function(c)\n        return c >= \"A\" and c <= \"Z\",\n        s))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmpv_6x05_t.lua:20: 'end' expected (to close 'function' at line 18) near ')'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(filter(function(c)\n        return c >= 'A' and c <= 'Z',\n        string.char(s)))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmp408rt7_h.lua:20: 'end' expected (to close 'function' at line 18) near ')'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(s:match(\"[A-Z]\"))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsa005jjc.lua:18: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpsa005jjc.lua:18: in local 'candidate'\n\t/tmp/tmpsa005jjc.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(filter(function(c)\n        return c >= 'A' and c <= 'Z',\n        s))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmp11rrgnlz.lua:20: 'end' expected (to close 'function' at line 18) near ')'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i,i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdjk2nwk4.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpdjk2nwk4.lua:20: in local 'candidate'\n\t/tmp/tmpdjk2nwk4.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(filter(function(c)\n        return c >= 'A' and c <= 'Z',\n        s:char()\n    ))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmps02kitqh.lua:21: 'end' expected (to close 'function' at line 18) near ')'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(s:match(\"[A-Z]\"):gsub(\"[^0-9]\", \"\"), 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5hftdipp.lua:18: attempt to index a nil value\nstack traceback:\n\t/tmp/tmp5hftdipp.lua:18: in local 'candidate'\n\t/tmp/tmp5hftdipp.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(filter(function(c)\n        return c >= 'A' and c <= 'Z',\n        s:char()\n    ))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmps02kitqh.lua:21: 'end' expected (to close 'function' at line 18) near ')'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(filter(function(c)\n        return c >= 'A' and c <= 'Z',\n        string.char(s)))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmp408rt7_h.lua:20: 'end' expected (to close 'function' at line 18) near ')'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(s:match(\"[A-Z]\"))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsa005jjc.lua:18: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpsa005jjc.lua:18: in local 'candidate'\n\t/tmp/tmpsa005jjc.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(s:match(\"[A-Z]\"))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsa005jjc.lua:18: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpsa005jjc.lua:18: in local 'candidate'\n\t/tmp/tmpsa005jjc.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i,i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdjk2nwk4.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpdjk2nwk4.lua:20: in local 'candidate'\n\t/tmp/tmpdjk2nwk4.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(s:match(\"[A-Z]\"))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsa005jjc.lua:18: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpsa005jjc.lua:18: in local 'candidate'\n\t/tmp/tmpsa005jjc.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(filter(function(c) c.match(\"[A-Z]\")), 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmp6xili5mk.lua:18: unexpected symbol near ')'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(filter(function(c) c.match(/[A-Z]/), s))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmphfiwbr3f.lua:18: unexpected symbol near '/'\n",
      "stdout": "",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(filter(function(c)\n        return c >= 'A' and c <= 'Z',\n        s))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmp11rrgnlz.lua:20: 'end' expected (to close 'function' at line 18) near ')'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(filter(function(c) return c >= \"A\" and c <= \"Z\", s))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmpz662csc2.lua:18: 'end' expected near ')'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(filter(function(c)\n        return c >= \"A\" and c <= \"Z\",\n        s:char()))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmpe2uh7mhz.lua:20: 'end' expected (to close 'function' at line 18) near ')'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i,i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdjk2nwk4.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpdjk2nwk4.lua:20: in local 'candidate'\n\t/tmp/tmpdjk2nwk4.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(s:match(\"[A-Z]\"))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsa005jjc.lua:18: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpsa005jjc.lua:18: in local 'candidate'\n\t/tmp/tmpsa005jjc.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(s:match(\"[A-Z]\"))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsa005jjc.lua:18: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpsa005jjc.lua:18: in local 'candidate'\n\t/tmp/tmpsa005jjc.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1,#s,1 do\n        sum = sum + string.char(s:sub(i,i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(filter(function(c)\n        return c >= 'A' and c <= 'Z',\n        s))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmp11rrgnlz.lua:20: 'end' expected (to close 'function' at line 18) near ')'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(s:match('[A-Z]') or 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_ci5kz_j.lua:18: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmp_ci5kz_j.lua:18: in local 'candidate'\n\t/tmp/tmp_ci5kz_j.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i,i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdjk2nwk4.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpdjk2nwk4.lua:20: in local 'candidate'\n\t/tmp/tmpdjk2nwk4.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i,i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdjk2nwk4.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpdjk2nwk4.lua:20: in local 'candidate'\n\t/tmp/tmpdjk2nwk4.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(filter(function(c)\n        return c >= \"A\" and c <= \"Z\",\n        s:char()\n    ))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1,#s,1 do\n        sum = sum + string.char(s:sub(i,i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(filter(function(c)\n        return c >= 'A' and c <= 'Z',\n        s:char()\n    ))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmps02kitqh.lua:21: 'end' expected (to close 'function' at line 18) near ')'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(s:match(\"[A-Z]\"))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsa005jjc.lua:18: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpsa005jjc.lua:18: in local 'candidate'\n\t/tmp/tmpsa005jjc.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(s:match(\"[A-Z]\"))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsa005jjc.lua:18: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpsa005jjc.lua:18: in local 'candidate'\n\t/tmp/tmpsa005jjc.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(filter(function(c)\n        return c >= 'A' and c <= 'Z',\n        s))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmp11rrgnlz.lua:20: 'end' expected (to close 'function' at line 18) near ')'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(filter(function(c)\n        return c >= \"A\" and c <= \"Z\", s))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmphl07rzkh.lua:19: 'end' expected (to close 'function' at line 18) near ')'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(filter(function(c)\n        return c >= \"A\" and c <= \"Z\",\n        s:char()\n    ))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(s:match('[A-Z]') or 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_ci5kz_j.lua:18: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmp_ci5kz_j.lua:18: in local 'candidate'\n\t/tmp/tmp_ci5kz_j.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(filter(function(c)\n        return c >= \"A\" and c <= \"Z\",\n        s))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmpv_6x05_t.lua:20: 'end' expected (to close 'function' at line 18) near ')'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1,#s,1 do\n        sum = sum + string.char(s:sub(i,i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(filter(function(c)\n        return c >= 'A' and c <= 'Z',\n        s:char()\n    ))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmps02kitqh.lua:21: 'end' expected (to close 'function' at line 18) near ')'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(s:match(\"[A-Z]\") or \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi2aqtcb6.lua:18: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpi2aqtcb6.lua:18: in local 'candidate'\n\t/tmp/tmpi2aqtcb6.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(s:match(\"[A-Z]\") or \"0\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8kbqtay1.lua:18: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmp8kbqtay1.lua:18: in local 'candidate'\n\t/tmp/tmp8kbqtay1.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(filter(function(c)\n        return c >= 'A' and c <= 'Z',\n        s:char()\n    ))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmps02kitqh.lua:21: 'end' expected (to close 'function' at line 18) near ')'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(filter(function(c)\n        return c >= \"A\" and c <= \"Z\",\n        s:char()))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmpe2uh7mhz.lua:20: 'end' expected (to close 'function' at line 18) near ')'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(s:match(\"[A-Z]\"));\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6wehntak.lua:18: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmp6wehntak.lua:18: in local 'candidate'\n\t/tmp/tmp6wehntak.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i,i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdjk2nwk4.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpdjk2nwk4.lua:20: in local 'candidate'\n\t/tmp/tmpdjk2nwk4.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(s:match(\"[A-Z]\"))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsa005jjc.lua:18: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpsa005jjc.lua:18: in local 'candidate'\n\t/tmp/tmpsa005jjc.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(s:match(\"[A-Z]\"):gsub(\"[^0-9]\", \"\"));\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbtrfv0lu.lua:18: attempt to index a nil value\nstack traceback:\n\t/tmp/tmpbtrfv0lu.lua:18: in local 'candidate'\n\t/tmp/tmpbtrfv0lu.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(filter(function(c)\n        return c >= 'A' and c <= 'Z',\n        s:char()\n    ))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmps02kitqh.lua:21: 'end' expected (to close 'function' at line 18) near ')'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(s:match('[A-Z]') or '0')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd5il2iky.lua:18: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpd5il2iky.lua:18: in local 'candidate'\n\t/tmp/tmpd5il2iky.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(filter(function(c) c.match(/[A-Z]/), s))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmphfiwbr3f.lua:18: unexpected symbol near '/'\n",
      "stdout": "",
      "timestamp": 1661907411
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(filter(function(c)\n        return c >= \"A\" and c <= \"Z\",\n        s))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmpv_6x05_t.lua:20: 'end' expected (to close 'function' at line 18) near ')'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(filter(function(c) c.match(/[A-Z]/), s))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmphfiwbr3f.lua:18: unexpected symbol near '/'\n",
      "stdout": "",
      "timestamp": 1661907411
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(filter(function(c) c.isupper(), s))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmp1o0tzfua.lua:18: syntax error near ','\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(filter(function(c)\n        return c >= \"A\" and c <= \"Z\",\n        s:char()\n    ))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(filter(function(c)\n        return c >= \"A\" and c <= \"Z\",\n        s))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmpv_6x05_t.lua:20: 'end' expected (to close 'function' at line 18) near ')'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(filter(function(c) c.match(/[A-Z]/), s))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmphfiwbr3f.lua:18: unexpected symbol near '/'\n",
      "stdout": "",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(s:match(\"[A-Z]\"))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsa005jjc.lua:18: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpsa005jjc.lua:18: in local 'candidate'\n\t/tmp/tmpsa005jjc.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(s:match(\"[A-Z]\"))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsa005jjc.lua:18: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpsa005jjc.lua:18: in local 'candidate'\n\t/tmp/tmpsa005jjc.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(filter(function(c) c.match(/[A-Z]/), s))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmphfiwbr3f.lua:18: unexpected symbol near '/'\n",
      "stdout": "",
      "timestamp": 1661907411
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(filter(function(c)\n        return c >= 'A' and c <= 'Z'\n    end, s))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp69068zlw.lua:18: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmp69068zlw.lua:18: in local 'candidate'\n\t/tmp/tmp69068zlw.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(filter(function(c) c.match(/[A-Z]/), s))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmphfiwbr3f.lua:18: unexpected symbol near '/'\n",
      "stdout": "",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(filter(function(c)\n        return c >= \"A\" and c <= \"Z\",\n        s:char()\n    ))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1,#s,1 do\n        sum = sum + string.char(s:sub(i,i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(filter(function(c)\n        return c >= 'A' and c <= 'Z'\n    end, s))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp69068zlw.lua:18: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmp69068zlw.lua:18: in local 'candidate'\n\t/tmp/tmp69068zlw.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(s:match('[A-Z]') or 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_ci5kz_j.lua:18: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmp_ci5kz_j.lua:18: in local 'candidate'\n\t/tmp/tmp_ci5kz_j.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(filter(function(c)\n        return c >= 'A' and c <= 'Z',\n        s))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmp11rrgnlz.lua:20: 'end' expected (to close 'function' at line 18) near ')'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(s:match(\"[A-Z]\"))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsa005jjc.lua:18: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpsa005jjc.lua:18: in local 'candidate'\n\t/tmp/tmpsa005jjc.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(filter(function(c) c.match(/[A-Z]/), s))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmphfiwbr3f.lua:18: unexpected symbol near '/'\n",
      "stdout": "",
      "timestamp": 1661907411
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(filter(function(c)\n        return c >= 'A' and c <= 'Z',\n        s))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmp11rrgnlz.lua:20: 'end' expected (to close 'function' at line 18) near ')'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1,#s,1 do\n        sum = sum + string.char(s:sub(i,i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(s:match(\"[A-Z]\") or \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi2aqtcb6.lua:18: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpi2aqtcb6.lua:18: in local 'candidate'\n\t/tmp/tmpi2aqtcb6.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(s:match(\"[A-Z]\"))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsa005jjc.lua:18: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpsa005jjc.lua:18: in local 'candidate'\n\t/tmp/tmpsa005jjc.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1,#s,1 do\n        sum = sum + string.char(s:sub(i,i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i,i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdjk2nwk4.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpdjk2nwk4.lua:20: in local 'candidate'\n\t/tmp/tmpdjk2nwk4.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(s:match(\"[A-Z]\") or \"0\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8kbqtay1.lua:18: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmp8kbqtay1.lua:18: in local 'candidate'\n\t/tmp/tmp8kbqtay1.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(s:match(\"[A-Z]\"):gsub(\"[^0-9]\", \"\"));\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbtrfv0lu.lua:18: attempt to index a nil value\nstack traceback:\n\t/tmp/tmpbtrfv0lu.lua:18: in local 'candidate'\n\t/tmp/tmpbtrfv0lu.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1,#s,1 do\n        sum = sum + string.char(s:sub(i,i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(filter(function(c) c.isupper(), s))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmp1o0tzfua.lua:18: syntax error near ','\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(filter(function(c)\n        return c >= 'A' and c <= 'Z'\n    end, s))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp69068zlw.lua:18: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmp69068zlw.lua:18: in local 'candidate'\n\t/tmp/tmp69068zlw.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(filter(function(c) return c >= \"A\" and c <= \"Z\", s))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmpz662csc2.lua:18: 'end' expected near ')'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(s:match(\"[A-Z]\"))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsa005jjc.lua:18: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpsa005jjc.lua:18: in local 'candidate'\n\t/tmp/tmpsa005jjc.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(filter(function(c)\n        return c >= \"A\" and c <= \"Z\"\n    end, s))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpux1fpj5i.lua:18: attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpux1fpj5i.lua:18: in local 'candidate'\n\t/tmp/tmpux1fpj5i.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(s:match(\"[A-Z]\"))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsa005jjc.lua:18: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpsa005jjc.lua:18: in local 'candidate'\n\t/tmp/tmpsa005jjc.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(filter(function(c)\n        return c >= 'A' and c <= 'Z',\n        s))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmp11rrgnlz.lua:20: 'end' expected (to close 'function' at line 18) near ')'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(s:match(\"[A-Z]\"))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsa005jjc.lua:18: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpsa005jjc.lua:18: in local 'candidate'\n\t/tmp/tmpsa005jjc.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    },
    {
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    return sum(filter(function(c) c.match(\"[A-Z]\")), 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmp6xili5mk.lua:18: unexpected symbol near ')'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Task\n-- Write a function that takes a string as input and returns the sum of the upper characters only'\n-- ASCII codes.\n-- Examples:\n-- >>> digitSum(\"\")\n-- 0\n-- >>> digitSum(\"abAB\")\n-- 131\n-- >>> digitSum(\"abcCd\")\n-- 67\n-- >>> digitSum(\"helloE\")\n-- 69\n-- >>> digitSum(\"woArBld\")\n-- 131\n-- >>> digitSum(\"aAaaaXa\")\n-- 153\nlocal function digitSum(s)\n    local sum = 0\n    for i = 1, #s, 1 do\n        sum = sum + string.char(s:sub(i, i))\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digitSum\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abAB'), 131)\n    lu.assertEquals(candidate('abcCd'), 67)\n    lu.assertEquals(candidate('helloE'), 69)\n    lu.assertEquals(candidate('woArBld'), 131)\n    lu.assertEquals(candidate('aAaaaXa'), 153)\n    lu.assertEquals(candidate(' How are yOu?'), 151)\n    lu.assertEquals(candidate('You arE Very Smart'), 327)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk3jfse5.lua:20: bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t/tmp/tmpwk3jfse5.lua:20: in local 'candidate'\n\t/tmp/tmpwk3jfse5.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907411
    }
  ]
}