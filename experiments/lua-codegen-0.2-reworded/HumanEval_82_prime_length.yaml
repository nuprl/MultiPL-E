name: HumanEval_82_prime_length
language: lua
prompt: "-- Write a function that takes a string and returns true if the string\n\
  -- length is a prime number or false otherwise\n-- Examples\n-- >>> prime_length('Hello')\n\
  -- True\n-- >>> prime_length('abcdcba')\n-- True\n-- >>> prime_length('kittens')\n\
  -- True\n-- >>> prime_length('orange')\n-- False\nlocal function prime_length(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_length\n\
  \    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
  \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
  \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
  \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
  \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
  \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
  \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
  \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
  \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local prime = true\n    for i = 1, string:len() do\n        if\
    \ string:sub(i, i) ~= string:sub(i, i):len() then\n            prime = false\n\
    \            break\n        end\n    end\n    return prime\nend", "    local prime_table\
    \ = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157,\
    \ 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241,\
    \ 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347,\
    \ 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439,\
    \ 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547,\
    \ 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643,\
    \ 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751,\
    \ 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859,\
    \ 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977,\
    \ 983, 991, 997}\n    local i = 1\n    while i <= string:string:len() do\n   \
    \     if string:sub(i, i):len() ~= prime_table[i] then\n            return false\n\
    \        end\n        i = i + 1\n    end\n    return true\nend", "    local length\
    \ = string:len()\n    for i = 1, length, 2 do\n        if string:sub(i, i) ==\
    \ string:sub(i, i) then\n            return true\n        end\n    end\n    return\
    \ false\nend", "    local i, prime = 1, true\n    for i = 1, #string, 2 do\n \
    \       if string:sub(string, i, i) ~= string:sub(string, i, i) then\n       \
    \     prime = false\n            break\n        end\n    end\n    return prime\n\
    end", "    local prime_table = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    for i = 1, #string, 2 do\n\
    \        if string:sub(1, i) ~= string:sub(1, i):gsub('0', '') then\n        \
    \    return false\n        end\n    end\n    return true\nend", "    local prime\
    \ = true\n    for i = 1, string:len() do\n        if string:sub(i, i) ~= string:sub(i,\
    \ i):len() then\n            prime = false\n            break\n        end\n \
    \   end\n    return prime\nend", "    local prime = true\n    for i = 1, #string,\
    \ 2 do\n        if string:sub(string, i, i) ~= string:sub(string, i, i) then\n\
    \            prime = false\n            break\n        end\n    end\n    return\
    \ prime\nend", "    local prime = true\n    for i = 1, #string, 2 do\n       \
    \ if string:sub(1,i) == string:sub(1,i):len() % 2 == 0 then\n            prime\
    \ = false\n            break\n        end\n    end\n    return prime\nend", " \
    \   local prime = true\n    for i = 1, #string, 2 do\n        if string:sub(string,\
    \ i, i) ~= string:sub(string, i, i) then\n            prime = false\n        \
    \    break\n        end\n    end\n    return prime\nend", "    local i, n = 1,\
    \ #string\n    for i = 1, n, 2 do\n        if string:sub(string, i, i) ~= string:sub(string,\
    \ i, i) then\n            return true\n        end\n    end\n    return false\n\
    end", "    local prime = true\n    for i = 1, #string, 2 do\n        if string:sub(string,\
    \ i, i) ~= string:sub(string, i, i) then\n            prime = false\n        \
    \    break\n        end\n    end\n    return prime\nend", "    local prime = true\n\
    \    for i = 1, string:len() do\n        if string:sub(i, i) ~= string:sub(i,\
    \ i):len() then\n            prime = false\n            break\n        end\n \
    \   end\n    return prime\nend", "    local prime = true\n    for i = 1, string:len()\
    \ do\n        if string:sub(i, i) == string:sub(i, i) then\n            prime\
    \ = false\n            break\n        end\n    end\n    return prime\nend", " \
    \   local prime = true\n    for i = 1, string:len() do\n        if string:sub(i,\
    \ i) ~= string:sub(i, i):len() then\n            prime = false\n            break\n\
    \        end\n    end\n    return prime\nend", "    local prime = true\n    for\
    \ i = 1, string:len() do\n        if string:sub(i, i) ~= string:sub(i, i):len()\
    \ then\n            prime = false\n            break\n        end\n    end\n \
    \   return prime\nend", "    local i = 1\n    while i <= string:\n        if string\
    \ % i == 0:\n            return false\n        i = i + 1\n    return true\nend",
  "    local prime_numbers = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    for i = 1, #string, 2 do\n\
    \        if string:sub(1,i) ~= string:sub(1,i):gsub('0', '') then\n          \
    \  return false\n        end\n    end\n    return true\nend", "    local prime\
    \ = true\n    for i = 1, string:len() do\n        if string:sub(i, i) ~= string:sub(i,\
    \ i):len() then\n            prime = false\n            break\n        end\n \
    \   end\n    return prime\nend", "    local prime = true\n    for i = 1, string:len()\
    \ do\n        if string:sub(i, i) ~= string:sub(i, i):len() then\n           \
    \ prime = false\n            break\n        end\n    end\n    return prime\nend",
  "    local prime = true\n    for i = 1, string:len() do\n        if string:sub(i,\
    \ i) ~= string:sub(i, i):len() then\n            prime = false\n            break\n\
    \        end\n    end\n    return prime\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
