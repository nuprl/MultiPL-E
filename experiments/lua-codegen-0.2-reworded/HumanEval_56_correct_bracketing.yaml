name: HumanEval_56_correct_bracketing
language: lua
prompt: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
  \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
  )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
  <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
  \ correct_bracketing(brackets)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
  \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
  \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
  \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
  \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
  \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
  \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
  \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local open_brackets = {'<', '>'}\n    local close_brackets = {'<',\
    \ '>'}\n    local i = 1\n    while i <= #brackets do\n        if brackets[i] ==\
    \ '<' then\n            if not (i+1) in open_brackets then\n                return\
    \ false\n            end\n            open_brackets[i+1] = true\n        elseif\
    \ brackets[i] == '>' then\n            if not (i-1) in close_brackets then\n \
    \               return false\n            end\n            close_brackets[i-1]\
    \ = true\n        end\n        i = i + 1\n    end\n    return true\nend", "  \
    \  local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i]\
    \ ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n       \
    \     break\n        end\n    end\n    return result\nend", "    local result\
    \ = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and\
    \ brackets[i] ~= \">\" then\n            result = false\n            break\n \
    \   end\n    return result\nend", "    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"<\" or brackets[i+1] ~= \">\" then\n     \
    \       result = false\n            break\n        end\n    end\n    return result\n\
    end", "    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i]\
    \ ~= \"<\" or brackets[i+1] ~= \">\" then\n            result = false\n      \
    \      break\n        end\n    end\n    return result\nend", "    local result\
    \ = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and\
    \ brackets[i] ~= \">\" then\n            result = false\n            break\n \
    \       end\n    end\n    return result\nend", "    local function is_open_bracket(char)\n\
    \        return char == \"(\" or char == \"[\" or char == \"{\"\n    end\n   \
    \ local function is_close_bracket(char)\n        return char == \")\" or char\
    \ == \"]\" or char == \"}\"\n    end\n    local function is_balanced(brackets)\n\
    \        local i = 1\n        while i <= #brackets do\n            if not is_open_bracket(brackets[i])\
    \ and not is_close_bracket(brackets[i]) then\n                return false\n \
    \           end\n            i = i + 1\n        end\n        return true\n   \
    \ end\n    return is_balanced(brackets)\nend", "    local open_brackets = {'<',\
    \ '>'}\n    local close_brackets = {'<', '>'}\n    local i = 1\n    while i <=\
    \ #brackets do\n        if brackets[i] == '<' then\n            if not (i + 1)\
    \ in open_brackets then\n                return false\n            else\n    \
    \            open_brackets[i + 1] = true\n            end\n        else\n    \
    \        if not (i - 1) in close_brackets then\n                return false\n\
    \            else\n                close_brackets[i - 1] = true\n            end\n\
    \        end\n        i = i + 1\n    end\n    return true\nend", "    local function\
    \ is_opening_bracket(char)\n        return char == \"<\"\n    end\n    local function\
    \ is_closing_bracket(char)\n        return char == \">\"\n    end\n    local function\
    \ is_opening_bracket_or_closing_bracket(char)\n        return is_opening_bracket(char)\
    \ or is_closing_bracket(char)\n    end\n    local function is_closing_bracket_or_opening_bracket(char)\n\
    \        return is_closing_bracket(char) or is_opening_bracket(char)\n    end\n\
    \    local function is_balanced(brackets)\n        local i = 1\n        while\
    \ i <= #brackets do\n            if not is_opening_bracket_or_closing_bracket(brackets[i])\
    \ then\n                return false\n            end\n            i = i + 1\n\
    \        end\n        return true\n    end\n    return is_balanced(brackets)\n\
    end", "    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i]\
    \ ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n       \
    \     break\n        end\n    end\n    return result\nend", "    local result\
    \ = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and\
    \ brackets[i] ~= \">\" then\n            result = false\n            break\n \
    \   end\n    return result\nend", "    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n      \
    \      result = false\n            break\n    end\n    return result\nend", " \
    \   local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i]\
    \ ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n       \
    \     break\n        end\n    end\n    return result\nend", "    local open_brackets\
    \ = {'<', '<>'}\n    local close_brackets = {'>', '<>'}\n    local bracket_stack\
    \ = {}\n    for _, char in pairs(brackets) do\n        if char == '<' then\n \
    \           if bracket_stack.count('<') == 0 then\n                bracket_stack['<']\
    \ = true\n            else\n                bracket_stack['<'] = false\n     \
    \       end\n        elseif char == '>' then\n            if bracket_stack.count('>')\
    \ == 0 then\n                bracket_stack['>'] = true\n            else\n   \
    \             bracket_stack['>'] = false\n            end\n        end\n    end\n\
    \    for _, open_bracket in pairs(open_brackets) do\n        if not bracket_stack[open_bracket]\
    \ then\n            return false\n        end\n    end\n    for _, close_bracket\
    \ in pairs(close_brackets) do\n        if not bracket_stack[close_bracket] then\n\
    \            return false\n        end\n    end\n    return true\nend", "    local\
    \ result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"\
    <\" and brackets[i] ~= \">\" then\n            result = false\n            break\n\
    \    end\n    return result\nend", "    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n      \
    \      result = false\n            break\n        end\n    end\n    return result\n\
    end", "    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i]\
    \ ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n       \
    \     break\n        end\n    end\n    return result\nend", "    local result\
    \ = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and\
    \ brackets[i] ~= \">\" then\n            result = false\n            break\n \
    \       end\n    end\n    return result\nend", "    local open_brackets = {'<',\
    \ '>'}\n    local close_brackets = {'<', '>'}\n    local i = 1\n    while i <=\
    \ #brackets do\n        if brackets[i] == '<' then\n            if not (i + 1)\
    \ <= #brackets and brackets[i + 1] == '>' then\n                return false\n\
    \            else\n                open_brackets = {brackets[i], brackets[i +\
    \ 1]}\n            end\n        else\n            if not (i - 1) >= 1 and open_brackets[1]\
    \ == brackets[i - 1] then\n                close_brackets = {brackets[i - 1],\
    \ brackets[i]}\n            end\n        end\n        i = i + 1\n    end\n   \
    \ return #open_brackets == #close_brackets\nend", "    local result = true\n \
    \   for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i]\
    \ ~= \">\" then\n            result = false\n            break\n        end\n\
    \    end\n    return result\nend", "    local open_brackets = {'<', '<>'}\n  \
    \  local close_brackets = {'>', '<>'}\n    local open_bracket_count = 0\n    local\
    \ close_bracket_count = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i]\
    \ == '<' then\n            open_bracket_count = open_bracket_count + 1\n     \
    \   elseif brackets[i] == '>' then\n            close_bracket_count = close_bracket_count\
    \ + 1\n        end\n    end\n    if open_bracket_count == close_bracket_count\
    \ then\n        return true\n    else\n        return false\n    end\nend", " \
    \   local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i]\
    \ ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n       \
    \     break\n        end\n    end\n    return result\nend", "    local result\
    \ = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and\
    \ brackets[i] ~= \">\" then\n            result = false\n            break\n \
    \   end\n    return result\nend", "    local open_brackets = {'<', '<>'}\n   \
    \ local close_brackets = {'>', '<>'}\n    local result = true\n    for _, open_bracket\
    \ in pairs(open_brackets) do\n        for _, close_bracket in pairs(close_brackets)\
    \ do\n            if not (open_bracket == close_bracket) then\n              \
    \  result = false\n                break\n            end\n        end\n     \
    \   if not result then\n            break\n        end\n    end\n    return result\n\
    end", "    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i]\
    \ ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n       \
    \     break\n    end\n    return result\nend", "    local result = true\n    for\
    \ i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \"\
    >\" then\n            result = false\n            break\n        end\n    end\n\
    \    return result\nend", "    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n      \
    \      result = false\n            break\n    end\n    return result\nend", " \
    \   local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i]\
    \ ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n       \
    \     break\n    end\n    return result\nend", "    local open_brackets = {}\n\
    \    local close_brackets = {}\n    for i = 1, #brackets, 2 do\n        open_brackets[brackets[i]]\
    \ = brackets[i+1]\n        close_brackets[brackets[i+1]] = brackets[i]\n    end\n\
    \    for i = 1, #open_brackets, 2 do\n        if open_brackets[i] ~= close_brackets[i]\
    \ then\n            return false\n        end\n    end\n    return true\nend",
  "    local open_brackets = {'<', '<>'}\n    local close_brackets = {'>', '<>'}\n\
    \    local result = true\n    for _, open_bracket in ipairs(open_brackets) do\n\
    \        for _, close_bracket in ipairs(close_brackets) do\n            if not\
    \ (open_bracket == close_bracket) then\n                result = false\n     \
    \           break\n            end\n        end\n        if not result then\n\
    \            break\n        end\n    end\n    return result\nend", "    local\
    \ result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"\
    <\" and brackets[i] ~= \">\" then\n            result = false\n            break\n\
    \    end\n    return result\nend", "    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n      \
    \      result = false\n            break\n    end\n    return result\nend", " \
    \   local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i]\
    \ ~= \"<\" or brackets[i+1] ~= \">\" then\n            result = false\n      \
    \      break\n        end\n    end\n    return result\nend", "    local result\
    \ = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and\
    \ brackets[i] ~= \">\" then\n            result = false\n            break\n \
    \       end\n    end\n    return result\nend", "    local open_brackets = {}\n\
    \    local close_brackets = {}\n    for i = 1, #brackets, 2 do\n        open_brackets[brackets[i]]\
    \ = brackets[i+1]\n        close_brackets[brackets[i+1]] = brackets[i]\n    end\n\
    \    for k, v in pairs(open_brackets) do\n        if v ~= close_brackets[k] then\n\
    \            return false\n        end\n    end\n    return true\nend", "    local\
    \ result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"\
    <\" and brackets[i] ~= \">\" then\n            result = false\n            break\n\
    \    end\n    return result\nend", "    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n      \
    \      result = false\n            break\n        end\n    end\n    return result\n\
    end", "    local i = 1\n    while i <= #brackets do\n        if brackets[i] ~=\
    \ \">\" and brackets[i] ~= \"<\" then\n            return false\n        end\n\
    \        i = i + 1\n    end\n    return true\nend", "    local result = true\n\
    \    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i]\
    \ ~= \">\" then\n            result = false\n            break\n        end\n\
    \    end\n    return result\nend", "    local function is_opening_bracket(char)\n\
    \        return char == \"<\"\n    end\n    local function is_closing_bracket(char)\n\
    \        return char == \">\"\n    end\n    local function is_bracket(char)\n\
    \        return is_opening_bracket(char) or is_closing_bracket(char)\n    end\n\
    \    local function is_balanced(string)\n        local i = 1\n        while i\
    \ <= #string do\n            if not is_bracket(string[i]) then\n             \
    \   return false\n            end\n            i = i + 1\n        end\n      \
    \  return true\n    end\n    return is_balanced(brackets)\nend", "    local result\
    \ = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and\
    \ brackets[i] ~= \">\" then\n            result = false\n            break\n \
    \   end\n    return result\nend", "    local open_brackets = {}\n    local close_brackets\
    \ = {}\n    for i = 1, #brackets, 2 do\n        open_brackets[brackets[i]] = brackets[i+1]\n\
    \        close_brackets[brackets[i+1]] = brackets[i]\n    end\n    for i = 1,\
    \ #brackets, 2 do\n        if not (open_brackets[brackets[i]] == \">\" and close_brackets[brackets[i+1]]\
    \ == \"<\") then\n            return false\n        end\n    end\n    return true\n\
    end", "    local open_brackets = {'<', '>'}\n    local close_brackets = {'<',\
    \ '>'}\n    local bracket_stack = {'<', '>'}\n    for i = 1, #brackets, 2 do\n\
    \        if brackets[i] == '<' then\n            open_brackets = {brackets[i],\
    \ open_brackets}\n        elseif brackets[i] == '>' then\n            close_brackets\
    \ = {brackets[i], close_brackets}\n        end\n    end\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] == '<' then\n            bracket_stack = {brackets[i],\
    \ bracket_stack}\n        elseif brackets[i] == '>' then\n            if bracket_stack[1]\
    \ == '<' then\n                return false\n            end\n            bracket_stack\
    \ = {brackets[i], bracket_stack}\n        end\n    end\n    return true\nend",
  "    local open_brackets = {'<', '{', '(', '['}\n    local close_brackets = {'>',\
    \ '}', ')', ']'}\n    local open_bracket_count = 0\n    local close_bracket_count\
    \ = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == '<' then\n  \
    \          open_bracket_count = open_bracket_count + 1\n        elseif brackets[i]\
    \ == '>' then\n            close_bracket_count = close_bracket_count + 1\n   \
    \     end\n    end\n    return open_bracket_count == close_bracket_count\nend",
  "    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i]\
    \ ~= \"<\" or brackets[i+1] ~= \">\" then\n            result = false\n      \
    \      break\n        end\n    end\n    return result\nend", "    local result\
    \ = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and\
    \ brackets[i] ~= \">\" then\n            result = false\n            break\n \
    \       end\n    end\n    return result\nend", "    local result = true\n    for\
    \ i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \"\
    >\" then\n            result = false\n            break\n        end\n    end\n\
    \    return result\nend", "    local open_brackets = {}\n    local close_brackets\
    \ = {}\n    for i = 1, #brackets, 2 do\n        open_brackets[brackets[i]] = brackets[i+1]\n\
    \        close_brackets[brackets[i+1]] = brackets[i]\n    end\n    for k, v in\
    \ pairs(open_brackets) do\n        if v ~= close_brackets[k] then\n          \
    \  return false\n        end\n    end\n    return true\nend", "    local result\
    \ = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and\
    \ brackets[i] ~= \">\" then\n            result = false\n            break\n \
    \       end\n    end\n    return result\nend", "    local function is_open(index)\n\
    \        return brackets[index] == \"<\"\n    end\n    local function is_close(index)\n\
    \        return brackets[index] == \">\"\n    end\n    local function is_balanced(index)\n\
    \        return is_open(index) == is_close(index - 1)\n    end\n    local function\
    \ is_balanced_recursive(index)\n        if index < 0 then return true end\n  \
    \      return is_balanced(index) and is_balanced_recursive(index - 1)\n    end\n\
    \    return is_balanced_recursive(len(brackets) - 1)\nend", "    local result\
    \ = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and\
    \ brackets[i] ~= \">\" then\n            result = false\n            break\n \
    \   end\n    return result\nend", "    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n      \
    \      result = false\n            break\n    end\n    return result\nend", " \
    \   local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i]\
    \ ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n       \
    \     break\n    end\n    return result\nend", "    local result = true\n    for\
    \ i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \"\
    >\" then\n            result = false\n            break\n        end\n    end\n\
    \    return result\nend", "    local open_brackets = {'<', '<>', '<<><>>', '><<>'}\n\
    \    local close_brackets = {'<>', '<<><>>', '><<>'}\n    for _, open_bracket\
    \ in ipairs(open_brackets) do\n        for _, close_bracket in ipairs(close_brackets)\
    \ do\n            if open_bracket == close_bracket then\n                return\
    \ true\n            end\n        end\n    end\n    return false\nend", "    local\
    \ result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"\
    <\" and brackets[i] ~= \">\" then\n            result = false\n            break\n\
    \        end\n    end\n    return result\nend", "    local result = true\n   \
    \ for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i]\
    \ ~= \">\" then\n            result = false\n            break\n    end\n    return\
    \ result\nend", "    local open_brackets = {'<', '<>', '<<>', '<><>'}\n    local\
    \ close_brackets = {'<>', '<><>', '<<><>', '<><><>'}\n    local result = true\n\
    \    for _, open_bracket in ipairs(open_brackets) do\n        if not (open_bracket\
    \ in brackets) or not (brackets[open_bracket] in close_brackets) then\n      \
    \      result = false\n            break\n        end\n    end\n    return result\n\
    end", "    local open_brackets = {'<', '<>', '<<><>>', '><<>'}\n    local close_brackets\
    \ = {'<>', '<<><>>', '><<>'}\n    local open_count = 0\n    local close_count\
    \ = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == '<' then\n  \
    \          open_count = open_count + 1\n        elseif brackets[i] == '>' then\n\
    \            close_count = close_count + 1\n        end\n    end\n    if open_count\
    \ == close_count then\n        return true\n    else\n        return false\n \
    \   end\nend", "    local result = true\n    for i = 1, #brackets, 2 do\n    \
    \    if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result\
    \ = false\n            break\n        end\n    end\n    return result\nend", " \
    \   local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i]\
    \ ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n       \
    \     break\n        end\n    end\n    return result\nend", "    local result\
    \ = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and\
    \ brackets[i] ~= \">\" then\n            result = false\n            break\n \
    \       end\n    end\n    return result\nend", "    local result = true\n    for\
    \ i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \"\
    >\" then\n            result = false\n            break\n        end\n    end\n\
    \    return result\nend", "    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n      \
    \      result = false\n            break\n    end\n    return result\nend", " \
    \   local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i]\
    \ ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n       \
    \     break\n    end\n    return result\nend", "    local result = true\n    for\
    \ i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \"\
    >\" then\n            result = false\n            break\n    end\n    return result\n\
    end", "    local function is_open(i)\n        return brackets[i] == \"<\"\n  \
    \  end\n    local function is_close(i)\n        return brackets[i] == \">\"\n\
    \    end\n    local function is_balanced(i)\n        return is_open(i) == is_close(i+1)\n\
    \    end\n    for i = 1, #brackets, 2 do\n        if not is_balanced(i) then\n\
    \            return false\n        end\n    end\n    return true\nend", "    local\
    \ function is_open_bracket(char)\n        return char == \"(\" or char == \"[\"\
    \ or char == \"{\"\n    end\n    local function is_close_bracket(char)\n     \
    \   return char == \")\" or char == \"]\" or char == \"}\"\n    end\n    local\
    \ function is_balanced(brackets)\n        local function is_open_bracket(char)\n\
    \            return char == \"(\" or char == \"[\" or char == \"{\"\n        end\n\
    \        local function is_close_bracket(char)\n            return char == \"\
    )\" or char == \"]\" or char == \"}\"\n        end\n        local function is_balanced(brackets)\n\
    \            local function is_open_bracket(char)\n                return char\
    \ == \"(\" or char == \"[\" or char == \"{\"\n            end\n            local\
    \ function is_close_bracket(char)\n                return char == \")\" or char\
    \ == \"]\" or char == \"}\"\n            end\n            return is_balanced(brackets)\
    \ and\n                all(is_balanced(brackets)) and\n                all(is_balanced(brackets))\n\
    \    end\n    return is_balanced(brackets)\nend", "    local open_brackets = {}\n\
    \    local close_brackets = {}\n    for i = 1, #brackets, 2 do\n        if brackets[i]\
    \ == \"<\" then\n            open_brackets[#open_brackets + 1] = i\n        else\n\
    \            close_brackets[#close_brackets + 1] = i\n    end\n    for i = 1,\
    \ #open_brackets, 2 do\n        if open_brackets[i] ~= close_brackets[i] then\n\
    \            return false\n        end\n    end\n    return true\nend", "    local\
    \ result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"\
    <\" and brackets[i] ~= \">\" then\n            result = false\n            break\n\
    \    end\n    return result\nend", "    local open_brackets = {'<', '>'}\n   \
    \ local close_brackets = {'<', '>'}\n    for _, c in ipairs(brackets) do\n   \
    \     if c in open_brackets then\n            close_brackets[open_brackets.index(c)]\
    \ = c\n        end\n    end\n    for _, c in ipairs(close_brackets) do\n     \
    \   if c not in open_brackets then\n            return false\n        end\n  \
    \  end\n    return true\nend", "    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n      \
    \      result = false\n            break\n        end\n    end\n    return result\n\
    end", "    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i]\
    \ ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n       \
    \     break\n        end\n    end\n    return result\nend", "    local result\
    \ = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and\
    \ brackets[i] ~= \">\" then\n            result = false\n            break\n \
    \       end\n    end\n    return result\nend", "    local result = true\n    for\
    \ i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \"\
    >\" then\n            result = false\n            break\n        end\n    end\n\
    \    return result\nend", "    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n      \
    \      result = false\n            break\n    end\n    return result\nend", " \
    \   local function is_open_bracket(c)\n        return c == \"<\" or c == \"{\"\
    \ or c == \"[\" or c == \"(\"\n    end\n    local function is_close_bracket(c)\n\
    \        return c == \">\" or c == \"}\" or c == \"]\" or c == \")\"\n    end\n\
    \    local function is_balanced(brackets)\n        local i = 1\n        while\
    \ i <= #brackets do\n            if not is_open_bracket(brackets[i]) and not is_close_bracket(brackets[i])\
    \ then\n                return false\n            end\n            i = i + 1\n\
    \        end\n        return true\n    end\n    return is_balanced(brackets)\n\
    end", "    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i]\
    \ ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n       \
    \     break\n        end\n    end\n    return result\nend", "    local result\
    \ = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and\
    \ brackets[i] ~= \">\" then\n            result = false\n            break\n \
    \       end\n    end\n    return result\nend", "    local result = true\n    for\
    \ i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \"\
    >\" then\n            result = false\n            break\n        end\n    end\n\
    \    return result\nend", "    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"<\" or brackets[i+1] ~= \">\" then\n     \
    \       result = false\n            break\n        end\n    end\n    return result\n\
    end", "    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i]\
    \ ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n       \
    \     break\n        end\n    end\n    return result\nend", "    local result\
    \ = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" or brackets[i+1]\
    \ ~= \">\" then\n            result = false\n            break\n        end\n\
    \    end\n    return result\nend", "    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n      \
    \      result = false\n            break\n        end\n    end\n    return result\n\
    end", "    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i]\
    \ ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n       \
    \     break\n        end\n    end\n    return result\nend", "    local i = 1\n\
    \    while i <= #brackets do\n        if brackets[i] ~= \"<\" and brackets[i]\
    \ ~= \">\" then\n            return false\n        end\n        i = i + 1\n  \
    \  end\n    return true\nend", "    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n      \
    \      result = false\n            break\n        end\n    end\n    return result\n\
    end", "    if brackets == \"\" then return true end\n    local bracket_count =\
    \ 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == \"<\" and brackets[i+1]\
    \ == \">\" then\n            bracket_count = bracket_count + 1\n        end\n\
    \    end\n    if bracket_count == 0 then return true end\n    return bracket_count\
    \ == #brackets\nend", "    local open_brackets = {'<', '{', '(', '['}\n    local\
    \ close_brackets = {'>', '}', ')', ']'}\n    local result = true\n    for _, char\
    \ in ipairs(brackets) do\n        if char in open_brackets then\n            if\
    \ not (char in close_brackets and\n                open_brackets[char] == close_brackets[char])\
    \ then\n                result = false\n                break\n            end\n\
    \        end\n    end\n    return result\nend", "    local result = true\n   \
    \ for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i]\
    \ ~= \">\" then\n            result = false\n            break\n    end\n    return\
    \ result\nend", "    local open_brackets = {}\n    local close_brackets = {}\n\
    \    for i = 1, #brackets, 2 do\n        open_brackets[brackets[i]] = brackets[i+1]\n\
    \        close_brackets[brackets[i+1]] = brackets[i]\n    end\n    for i = 1,\
    \ #brackets, 2 do\n        if not (open_brackets[brackets[i]] == \">\" and close_brackets[brackets[i+1]]\
    \ == \"<\") then\n            return false\n        end\n    end\n    return true\n\
    end", "    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i]\
    \ ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n       \
    \     break\n    end\n    return result\nend", "    local result = true\n    for\
    \ i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \"\
    >\" then\n            result = false\n            break\n    end\n    return result\n\
    end", "    local open_brackets = {'<', '>'}\n    local close_brackets = {'<',\
    \ '>'}\n    local i = 1\n    while i <= #brackets do\n        if brackets[i] ==\
    \ '<' then\n            if not (i+1) < #brackets and brackets[i+1] == '>' then\n\
    \                return false\n            end\n            open_brackets[#open_brackets+1]\
    \ = brackets[i]\n        elseif brackets[i] == '>' then\n            if not (i-1)\
    \ >= 1 and open_brackets[#open_brackets] == brackets[i-1] then\n             \
    \   return false\n            end\n            close_brackets[#close_brackets+1]\
    \ = brackets[i]\n        end\n        i = i + 1\n    end\n    return #open_brackets\
    \ == #close_brackets\nend", "    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n      \
    \      result = false\n            break\n    end\n    return result\nend", " \
    \   local open_brackets = {'<', '{', '(', '['}\n    local close_brackets = {'>',\
    \ '}', ')', ']'}\n    local result = true\n    for _, char in pairs(brackets)\
    \ do\n        if char in open_brackets then\n            result = result and (char\
    \ not in close_brackets)\n        elseif char in close_brackets then\n       \
    \     result = result and (char not in open_brackets)\n        end\n    end\n\
    \    return result\nend", "    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n      \
    \      result = false\n            break\n        end\n    end\n    return result\n\
    end", "    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i]\
    \ ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n       \
    \     break\n    end\n    return result\nend", "    local open_brackets = {}\n\
    \    local close_brackets = {}\n    for i = 1, #brackets, 2 do\n        open_brackets[brackets[i]]\
    \ = brackets[i+1]\n        close_brackets[brackets[i+1]] = brackets[i]\n    end\n\
    \    for k, v in pairs(open_brackets) do\n        if not v in close_brackets then\n\
    \            return false\n        end\n    end\n    return true\nend", "    local\
    \ function is_open_bracket(char)\n        return char == \"<\"\n    end\n    local\
    \ function is_close_bracket(char)\n        return char == \">\"\n    end\n   \
    \ local function is_bracket(char)\n        return is_open_bracket(char) or is_close_bracket(char)\n\
    \    end\n    local function is_balanced(string)\n        local i = 1\n      \
    \  while i <= #string do\n            if not is_bracket(string[i]) then\n    \
    \            return false\n            end\n            i = i + 1\n        end\n\
    \        return true\n    end\n    return is_balanced(brackets)\nend", "    local\
    \ result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"\
    <\" and brackets[i] ~= \">\" then\n            result = false\n            break\n\
    \        end\n    end\n    return result\nend", "    local result = true\n   \
    \ for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i]\
    \ ~= \">\" then\n            result = false\n            break\n    end\n    return\
    \ result\nend", "    local result = true\n    for i = 1, #brackets, 2 do\n   \
    \     if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result\
    \ = false\n            break\n    end\n    return result\nend", "    if brackets\
    \ == \"\" then return true end\n    local bracket_count = 0\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] == \"<\" and brackets[i+1] == \">\" then\n    \
    \        bracket_count = bracket_count + 1\n        end\n    end\n    if bracket_count\
    \ == 0 then return true end\n    return bracket_count == #brackets\nend", "  \
    \  local open_brackets = {'<', '{', '(', '['}\n    local close_brackets = {'>',\
    \ '}', ')', ']'}\n    local result = true\n    for _, c in ipairs(brackets) do\n\
    \        if not (c in open_brackets) or not (open_brackets[c] == close_brackets[c])\
    \ then\n            result = false\n            break\n        end\n    end\n\
    \    return result\nend", "    local function is_open_bracket(c)\n        return\
    \ c == \"<\" or c == \"{\" or c == \"[\" or c == \"(\"\n    end\n    local function\
    \ is_close_bracket(c)\n        return c == \">\" or c == \"}\" or c == \"]\" or\
    \ c == \")\"\n    end\n    local function is_balanced(brackets)\n        local\
    \ i = 1\n        while i <= #brackets do\n            if not is_open_bracket(brackets[i])\
    \ and not is_close_bracket(brackets[i]) then\n                return false\n \
    \           end\n            i = i + 1\n        end\n        return true\n   \
    \ end\n    return is_balanced(brackets)\nend", "    local result = true\n    for\
    \ i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \"\
    >\" then\n            result = false\n            break\n        end\n    end\n\
    \    return result\nend", "    if brackets == \"\" then return true end\n    local\
    \ opening_bracket = brackets[1]\n    local closing_bracket = brackets[2]\n   \
    \ if opening_bracket == \">\" and closing_bracket == \"<\" then return true end\n\
    \    if opening_bracket == \"<\" and closing_bracket == \">\" then return true\
    \ end\n    return false\nend", "    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n      \
    \      result = false\n            break\n    end\n    return result\nend", " \
    \   local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i]\
    \ ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n       \
    \     break\n    end\n    return result\nend", "    local result = true\n    for\
    \ i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \"\
    >\" then\n            result = false\n            break\n    end\n    return result\n\
    end", "    local open_brackets = {'<', '{', '(', '['}\n    local close_brackets\
    \ = {'>', '}', ')', ']'}\n    local result = true\n    for _, v in ipairs(open_brackets)\
    \ do\n        if not (v in brackets) then\n            result = false\n      \
    \      break\n        end\n    end\n    for _, v in ipairs(close_brackets) do\n\
    \        if not (v in brackets) then\n            result = false\n           \
    \ break\n        end\n    end\n    return result\nend", "    local result = true\n\
    \    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i]\
    \ ~= \">\" then\n            result = false\n            break\n        end\n\
    \    end\n    return result\nend", "    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n      \
    \      result = false\n            break\n    end\n    return result\nend", " \
    \   local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i]\
    \ ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n       \
    \     break\n    end\n    return result\nend", "    local result = true\n    for\
    \ i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \"\
    >\" then\n            result = false\n            break\n        end\n    end\n\
    \    return result\nend", "    local function is_open_bracket(char)\n        return\
    \ char == \"<\"\n    end\n    local function is_close_bracket(char)\n        return\
    \ char == \">\"\n    end\n    local function is_bracket(char)\n        return\
    \ is_open_bracket(char) or is_close_bracket(char)\n    end\n    local function\
    \ is_balanced(brackets)\n        local i = 1\n        while i <= #brackets do\n\
    \            if not is_bracket(brackets[i]) then\n                return false\n\
    \            end\n            i = i + 1\n        end\n        return true\n  \
    \  end\n    return is_balanced(brackets)\nend", "    local result = true\n   \
    \ for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i]\
    \ ~= \">\" then\n            result = false\n            break\n    end\n    return\
    \ result\nend", "    local result = true\n    for i = 1, #brackets, 2 do\n   \
    \     if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result\
    \ = false\n            break\n    end\n    return result\nend", "    local result\
    \ = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" or brackets[i+1]\
    \ ~= \">\" then\n            result = false\n            break\n        end\n\
    \    end\n    return result\nend", "    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n      \
    \      result = false\n            break\n    end\n    return result\nend", " \
    \   local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i]\
    \ ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n       \
    \     break\n        end\n    end\n    return result\nend", "    local result\
    \ = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and\
    \ brackets[i] ~= \">\" then\n            result = false\n            break\n \
    \   end\n    return result\nend", "    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n      \
    \      result = false\n            break\n    end\n    return result\nend", " \
    \   local open_brackets = {'<', '{', '(', '['}\n    local close_brackets = {'>',\
    \ '}', ')', ']'}\n    local result = true\n    for _, b in ipairs(brackets) do\n\
    \        if not (b in open_brackets) or not (open_brackets[b] == b) then\n   \
    \         result = false\n            break\n        end\n    end\n    return\
    \ result\nend", "    local result = true\n    for i = 1, #brackets, 2 do\n   \
    \     if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result\
    \ = false\n            break\n        end\n    end\n    return result\nend", " \
    \   local i, j\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\"\
    \ or brackets[i+1] ~= \">\" then\n            j = i - 1\n            while j >=\
    \ 1 and brackets[j] ~= \"<\" do\n                j = j - 1\n            if j ==\
    \ 0 then\n                return false\n            else\n                j =\
    \ j + 1\n            end\n        end\n    end\n    return true\nend", "    local\
    \ result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"\
    <\" and brackets[i] ~= \">\" then\n            result = false\n            break\n\
    \    end\n    return result\nend", "    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n      \
    \      result = false\n            break\n    end\n    return result\nend", " \
    \   local open_brackets = {'<', '<>', '<<>', '<><>'}\n    local close_brackets\
    \ = {'>', '><', '>>', '<<'}\n    for _, open_bracket in ipairs(open_brackets)\
    \ do\n        for _, close_bracket in ipairs(close_brackets) do\n            if\
    \ not (open_bracket == close_bracket) then\n                if not (brackets.sub(1,\
    \ 1) == open_bracket) or not (brackets.sub(-2, 1) == close_bracket) then\n   \
    \                 return false\n                end\n            end\n       \
    \ end\n    end\n    return true\nend", "    local result = true\n    for i = 1,\
    \ #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n\
    \            result = false\n            break\n    end\n    return result\nend",
  "    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i]\
    \ ~= \"<\" or brackets[i+1] ~= \">\" then\n            result = false\n      \
    \      break\n        end\n    end\n    return result\nend", "    local result\
    \ = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" or brackets[i+1]\
    \ ~= \">\" then\n            result = false\n            break\n        end\n\
    \    end\n    return result\nend", "    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n      \
    \      result = false\n            break\n        end\n    end\n    return result\n\
    end", "    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i]\
    \ ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n       \
    \     break\n    end\n    return result\nend", "    local open_brackets = {}\n\
    \    local close_brackets = {}\n    for i = 1, #brackets, 2 do\n        open_brackets[brackets[i]]\
    \ = brackets[i+1]\n        close_brackets[brackets[i+1]] = brackets[i]\n    end\n\
    \    for i = 1, #open_brackets, 2 do\n        if open_brackets[i] ~= close_brackets[i]\
    \ then\n            return false\n        end\n    end\n    return true\nend",
  "    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i]\
    \ ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n       \
    \     break\n    end\n    return result\nend", "    local result = true\n    for\
    \ i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \"\
    >\" then\n            result = false\n            break\n    end\n    return result\n\
    end", "    local open_brackets = {'<', '{', '(', '['}\n    local close_brackets\
    \ = {'>', '}', ')', ']'}\n    local result = true\n    for _, char in pairs(brackets)\
    \ do\n        if char in open_brackets then\n            if not (char in close_brackets)\
    \ then\n                result = false\n            end\n        elseif char in\
    \ close_brackets then\n            result = false\n        end\n    end\n    return\
    \ result\nend", "    local result = true\n    for i = 1, #brackets, 2 do\n   \
    \     if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result\
    \ = false\n            break\n    end\n    return result\nend", "    local result\
    \ = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and\
    \ brackets[i] ~= \">\" then\n            result = false\n            break\n \
    \   end\n    return result\nend", "    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n      \
    \      result = false\n            break\n        end\n    end\n    return result\n\
    end", "    local open_brackets = {'<', '('}\n    local close_brackets = {'>',\
    \ ')'}\n    local result = true\n    for _, c in ipairs(brackets) do\n       \
    \ if not (open_brackets[c] or close_brackets[c]) then\n            result = false\n\
    \            break\n        end\n    end\n    return result\nend", "    local\
    \ function is_open(index)\n        return brackets[index] == \"<\"\n    end\n\
    \    local function is_close(index)\n        return brackets[index] == \">\"\n\
    \    end\n    local function is_balanced(index)\n        return is_open(index)\
    \ == is_close(index + 1)\n    end\n    for i = 1, #brackets, 2 do\n        if\
    \ not is_balanced(i) then\n            return false\n        end\n    end\n  \
    \  return true\nend", "    local result = true\n    for i = 1, #brackets, 2 do\n\
    \        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result\
    \ = false\n            break\n        end\n    end\n    return result\nend", " \
    \   local open_brackets = {'<', '{', '(', '['}\n    local close_brackets = {'>',\
    \ '}', ')', ']'}\n    local result = true\n    for _, b in ipairs(brackets) do\n\
    \        if not (b in open_brackets) or not (open_brackets[b] == b) then\n   \
    \         result = false\n            break\n        end\n    end\n    return\
    \ result\nend", "    local result = true\n    for i = 1, #brackets, 2 do\n   \
    \     if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result\
    \ = false\n            break\n    end\n    return result\nend", "    local result\
    \ = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and\
    \ brackets[i] ~= \">\" then\n            result = false\n            break\n \
    \   end\n    return result\nend", "    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"<\" or brackets[i+1] ~= \">\" then\n     \
    \       result = false\n            break\n        end\n    end\n    return result\n\
    end", "    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i]\
    \ ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n       \
    \     break\n    end\n    return result\nend", "    local function is_open(index)\n\
    \        return brackets[index] == \"<\"\n    end\n    local function is_close(index)\n\
    \        return brackets[index] == \">\"\n    end\n    local function is_open_or_close(index)\n\
    \        return is_open(index) or is_close(index)\n    end\n    local function\
    \ is_open_or_close_pair(index)\n        return is_open(index) and is_close(index\
    \ + 1)\n    end\n    local function is_open_pair(index)\n        return is_open(index)\
    \ and is_open(index + 1)\n    end\n    local function is_close_pair(index)\n \
    \       return is_close(index) and is_close(index + 1)\n    end\n    local function\
    \ is_open_or_close_pair_or_empty(index)\n        return is_open_or_close(index)\
    \ or is_open_or_close(index + 1) or brackets[index] == \"\"\n    end\n    local\
    \ function is_open_or_close_pair_or_empty_pair(index)\n        return is_open_or_close_pair(index)\
    \ or is_open_or_close_pair(index + 1) or brackets[index] == \"\"\n    end\n  \
    \  local function is_open_or_close_pair_or_empty_pair_or_empty(index)\n      \
    \  return is_open_or_close_pair_or_empty(index) or is_open_or_close_pair_or_empty(index\
    \ + 1) or brackets[index] == \"\"\n    end\n    local function is_open_or_close_pair_or_empty_pair_or_empty_pair(index)\n\
    \        return is_open_or_close_pair_or_empty_pair(index) or is_open_or_close_pair_or_empty_pair(index\
    \ + 1) or brackets[index] == \"\"\n    end\n    local function is_open_or_close_pair_or_empty_pair_or_empty_pair_or_empty(index)\n\
    \        return is_open_or_close_pair_or_empty_pair_or_empty(index) or is", " \
    \   local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i]\
    \ ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n       \
    \     break\n        end\n    end\n    return result\nend", "    local result\
    \ = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and\
    \ brackets[i] ~= \">\" then\n            result = false\n            break\n \
    \   end\n    return result\nend", "    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n      \
    \      result = false\n            break\n    end\n    return result\nend", " \
    \   local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i]\
    \ ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n       \
    \     break\n    end\n    return result\nend", "    local i, j, bracket_count\
    \ = 1, 1, 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == \"<\" then\n\
    \            bracket_count = bracket_count + 1\n        elseif brackets[i] ==\
    \ \">\" then\n            bracket_count = bracket_count - 1\n        end\n   \
    \     if bracket_count < 0 then\n            return false\n        end\n    end\n\
    \    for i = 2, #brackets, 2 do\n        if brackets[i] == \"<\" then\n      \
    \      bracket_count = bracket_count + 1\n        elseif brackets[i] == \">\"\
    \ then\n            bracket_count = bracket_count - 1\n        end\n        if\
    \ bracket_count > 0 then\n            return false\n        end\n    end\n   \
    \ return true\nend", "    local open_brackets = {}\n    local close_brackets =\
    \ {}\n    for i = 1, #brackets, 2 do\n        open_brackets[brackets[i]] = brackets[i+1]\n\
    \        close_brackets[brackets[i+1]] = brackets[i]\n    end\n    for i = 1,\
    \ #brackets, 2 do\n        if not (open_brackets[brackets[i]] == \">\" and close_brackets[brackets[i+1]]\
    \ == \"<\") then\n            return false\n        end\n    end\n    return true\n\
    end", "    local function is_open_bracket(char)\n        return char == \"<\"\n\
    \    end\n    local function is_close_bracket(char)\n        return char == \"\
    >\"\n    end\n    local function is_opening_bracket(char)\n        return char\
    \ == \"<\" or char == \"(\"\n    end\n    local function is_closing_bracket(char)\n\
    \        return char == \">\" or char == \")\"\n    end\n    local function is_bracket(char)\n\
    \        return is_opening_bracket(char) or is_closing_bracket(char)\n    end\n\
    \    local function is_balanced(string)\n        local i = 1\n        while i\
    \ <= #string do\n            if not is_bracket(string[i]) then\n             \
    \   return false\n            end\n            i = i + 1\n        end\n      \
    \  return true\n    end\n    local function is_balanced_brackets(string)\n   \
    \     local i = 1\n        while i <= #string do\n            if not is_balanced(string[i])\
    \ then\n                return false\n            end\n            i = i + 1\n\
    \        end\n        return true\n    end\n    return is_balanced_brackets(brackets)\n\
    end", "    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i]\
    \ ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n       \
    \     break\n    end\n    return result\nend", "    if brackets == \"\" then return\
    \ true end\n    local bracket_count = 0\n    for i = 1, #brackets, 2 do\n    \
    \    if brackets[i] == \"<\" and brackets[i+1] == \">\" then\n            bracket_count\
    \ = bracket_count + 1\n        end\n    end\n    if bracket_count == 0 then return\
    \ true end\n    return bracket_count == #brackets\nend", "    local open_brackets\
    \ = {'<', '{', '(', '['}\n    local close_brackets = {'>', '}', ')', ']'}\n  \
    \  for _, char in ipairs(brackets) do\n        if char in open_brackets then\n\
    \            if not (char in close_brackets and open_brackets[char] == close_brackets[char])\
    \ then\n                return false\n            end\n        end\n    end\n\
    \    return true\nend", "    local open_brackets = {'<', '<>', '<<>', '<><>'}\n\
    \    local close_brackets = {'>', '>><', '><>', '<><><>'}\n    local open_count\
    \ = 0\n    for _, c in ipairs(brackets) do\n        if c == '<' then\n       \
    \     open_count = open_count + 1\n        elseif c == '>' then\n            open_count\
    \ = open_count - 1\n        end\n    end\n    return open_count == 0\nend", " \
    \   local open_brackets = {}\n    for i = 1, #brackets, 2 do\n        if brackets[i]\
    \ == \"<\" then\n            open_brackets[#open_brackets + 1] = i\n        end\n\
    \    end\n    for i = 1, #open_brackets, 2 do\n        if open_brackets[i] ==\
    \ open_brackets[i + 1] then\n            return false\n        end\n    end\n\
    \    return true\nend", "    local open_brackets = {'<', '{', '(', '['}\n    local\
    \ close_brackets = {'>', '}', ')', ']'}\n    for _, c in ipairs(brackets) do\n\
    \        if c in open_brackets then\n            if not (c in close_brackets)\
    \ then\n                return false\n            end\n        end\n    end\n\
    \    return true\nend", "    local function is_open(index)\n        return brackets[index]\
    \ == \"<\"\n    end\n    local function is_close(index)\n        return brackets[index]\
    \ == \">\"\n    end\n    local function is_balanced(index)\n        return is_open(index)\
    \ == is_close(index + 1)\n    end\n    local function is_balanced_recursive(index)\n\
    \        if index == 0 then\n            return true\n        elseif is_open(index)\
    \ then\n            return is_balanced_recursive(index - 1) and is_balanced_recursive(index\
    \ + 1)\n        else\n            return is_balanced_recursive(index - 1)\n  \
    \      end\n    end\n    return is_balanced_recursive(#brackets)\nend", "    local\
    \ result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"\
    <\" and brackets[i] ~= \">\" then\n            result = false\n            break\n\
    \        end\n    end\n    return result\nend", "    local result = true\n   \
    \ for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" or brackets[i+1]\
    \ ~= \">\" then\n            result = false\n            break\n        end\n\
    \    end\n    return result\nend", "    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n      \
    \      result = false\n            break\n    end\n    return result\nend", " \
    \   local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i]\
    \ ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n       \
    \     break\n        end\n    end\n    return result\nend", "    local result\
    \ = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and\
    \ brackets[i] ~= \">\" then\n            result = false\n            break\n \
    \       end\n    end\n    return result\nend", "    local result = true\n    for\
    \ i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \"\
    >\" then\n            result = false\n            break\n    end\n    return result\n\
    end", "    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i]\
    \ ~= \"<\" or brackets[i+1] ~= \">\" then\n            result = false\n      \
    \      break\n        end\n    end\n    return result\nend", "    local result\
    \ = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and\
    \ brackets[i] ~= \">\" then\n            result = false\n            break\n \
    \   end\n    return result\nend", "    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n      \
    \      result = false\n            break\n    end\n    return result\nend", " \
    \   local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i]\
    \ ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n       \
    \     break\n    end\n    return result\nend", "    local open_brackets = {'<',\
    \ '{', '(', '['}\n    local close_brackets = {'>', '}', ')', ']'}\n    for i =\
    \ 1, #open_brackets do\n        if not (open_brackets[i] == brackets[1] and close_brackets[i]\
    \ == brackets[2]) then\n            return false\n        end\n    end\n    return\
    \ true\nend", "    local function is_open(index)\n        return brackets[index]\
    \ == \"<\"\n    end\n    local function is_close(index)\n        return brackets[index]\
    \ == \">\"\n    end\n    local function is_balanced(index)\n        return is_open(index)\
    \ == is_close(index - 1)\n    end\n    local function is_balanced_recursive(index)\n\
    \        if index < 0 then return true end\n        return is_balanced(index)\
    \ and is_balanced_recursive(index - 1)\n    end\n    return is_balanced_recursive(len(brackets)\
    \ - 1)\nend", "    local result = true\n    for i = 1, #brackets, 2 do\n     \
    \   if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result\
    \ = false\n            break\n        end\n    end\n    return result\nend", " \
    \   local open_brackets = {'<', '{', '(', '['}\n    local close_brackets = {'>',\
    \ '}', ')', ']'}\n    local result = true\n    for _, char in pairs(brackets)\
    \ do\n        if char in open_brackets then\n            if not (char in close_brackets\
    \ and\n                open_brackets[char] == close_brackets[char]) then\n   \
    \             result = false\n                break\n            end\n       \
    \ end\n    end\n    return result\nend", "    local result = true\n    for i =\
    \ 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\"\
    \ then\n            result = false\n            break\n        end\n    end\n\
    \    return result\nend", "    local open_brackets = {}\n    local close_brackets\
    \ = {}\n    for i=1,#brackets do\n        if brackets[i] == \"<\" then\n     \
    \       open_brackets[i] = true\n        else\n            open_brackets[i] =\
    \ false\n        end\n        if brackets[i] == \">\" then\n            close_brackets[i]\
    \ = true\n        else\n            close_brackets[i] = false\n        end\n \
    \   end\n    for i=1,#brackets do\n        if open_brackets[i] and not close_brackets[i]\
    \ then\n            return false\n        end\n    end\n    return true\nend",
  "    local open_brackets = {'<', '{', '(', '['}\n    local close_brackets = {'>',\
    \ '}', ')', ']'}\n    local bracket_count = 0\n    for _, char in pairs(brackets)\
    \ do\n        if char in open_brackets then\n            bracket_count = bracket_count\
    \ + 1\n        end\n    end\n    return bracket_count == len(close_brackets)\n\
    end", "    local open_brackets = {'<', '<>'}\n    local close_brackets = {'>',\
    \ '<>'}\n    local result = true\n    for _, open_bracket in pairs(open_brackets)\
    \ do\n        for _, close_bracket in pairs(close_brackets) do\n            if\
    \ not (open_bracket == close_bracket) then\n                result = false\n \
    \               break\n            end\n        end\n        if not result then\n\
    \            break\n        end\n    end\n    return result\nend", "    local\
    \ result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"\
    <\" and brackets[i] ~= \">\" then\n            result = false\n            break\n\
    \    end\n    return result\nend", "    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n      \
    \      result = false\n            break\n        end\n    end\n    return result\n\
    end", "    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i]\
    \ ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n       \
    \     break\n    end\n    return result\nend", "    local open_brackets = {'<',\
    \ '<>', '<<><>>', '><<>'}\n    local close_brackets = {'<>', '<<><>>', '><<>'}\n\
    \    local open_count = 0\n    local close_count = 0\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] == '<' then\n            open_count = open_count\
    \ + 1\n        elseif brackets[i] == '>' then\n            close_count = close_count\
    \ + 1\n        end\n    end\n    if open_count == close_count then\n        return\
    \ true\n    else\n        return false\n    end\nend", "    local result = true\n\
    \    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i]\
    \ ~= \">\" then\n            result = false\n            break\n        end\n\
    \    end\n    return result\nend", "    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n      \
    \      result = false\n            break\n    end\n    return result\nend", " \
    \   local open_brackets = {'<', '>'}\n    local close_brackets = {'<', '>'}\n\
    \    local result = true\n    for _, char in pairs(brackets) do\n        if char\
    \ == '<' then\n            open_brackets = set.union(open_brackets, {'<'})\n \
    \       elseif char == '>' then\n            close_brackets = set.union(close_brackets,\
    \ {'>'})\n        end\n        if open_brackets ~= close_brackets then\n     \
    \       result = false\n            break\n        end\n    end\n    return result\n\
    end", "    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i]\
    \ ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n       \
    \     break\n    end\n    return result\nend", "    local result = true\n    for\
    \ i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \"\
    >\" then\n            result = false\n            break\n    end\n    return result\n\
    end", "    local open_brackets = {'<', '('}\n    local close_brackets = {'>',\
    \ ')'}\n    local i = 1\n    while i <= #brackets do\n        if brackets[i] ~=\
    \ open_brackets[#open_brackets] then\n            return false\n        end\n\
    \        if brackets[i] ~= close_brackets[#close_brackets] then\n            return\
    \ false\n        end\n        i = i + 1\n    end\n    return true\nend", "   \
    \ local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i]\
    \ ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n       \
    \     break\n    end\n    return result\nend", "    local result = true\n    for\
    \ i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \"\
    >\" then\n            result = false\n            break\n    end\n    return result\n\
    end", "    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i]\
    \ ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n       \
    \     break\n    end\n    return result\nend", "    local result = true\n    for\
    \ i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \"\
    >\" then\n            result = false\n            break\n        end\n    end\n\
    \    return result\nend", "    local open_brackets = {}\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] == \"<\" then\n            open_brackets[#open_brackets\
    \ + 1] = i\n        end\n    end\n    for i = 1, #open_brackets, 2 do\n      \
    \  if open_brackets[i] == open_brackets[i + 1] then\n            return false\n\
    \        end\n    end\n    return true\nend", "    local open_brackets = {'<',\
    \ '{', '(', '['}\n    local close_brackets = {'>', '}', ')', ']'}\n    local result\
    \ = true\n    for _, c in ipairs(brackets) do\n        if not (c in open_brackets)\
    \ or not (open_brackets[c] == close_brackets[c]) then\n            result = false\n\
    \            break\n        end\n    end\n    return result\nend", "    local\
    \ result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"\
    <\" and brackets[i] ~= \">\" then\n            result = false\n            break\n\
    \        end\n    end\n    return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
