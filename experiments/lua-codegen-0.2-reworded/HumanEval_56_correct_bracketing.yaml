name: HumanEval_56_correct_bracketing
language: lua
prompt: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
  \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\"\
  )\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"\
  <<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function\
  \ correct_bracketing(brackets)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
  \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
  \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
  \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
  \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
  \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
  \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
  \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local open_brackets = {'<', '>'}\n    local close_brackets = {'<',\
    \ '>'}\n    local i = 1\n    while i <= #brackets do\n        if brackets[i] ==\
    \ '<' then\n            if not (i+1) in open_brackets then\n                return\
    \ false\n            end\n            open_brackets[i+1] = true\n        elseif\
    \ brackets[i] == '>' then\n            if not (i-1) in close_brackets then\n \
    \               return false\n            end\n            close_brackets[i-1]\
    \ = true\n        end\n        i = i + 1\n    end\n    return true\nend", "  \
    \  local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i]\
    \ ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n       \
    \     break\n        end\n    end\n    return result\nend", "    local result\
    \ = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and\
    \ brackets[i] ~= \">\" then\n            result = false\n            break\n \
    \   end\n    return result\nend", "    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"<\" or brackets[i+1] ~= \">\" then\n     \
    \       result = false\n            break\n        end\n    end\n    return result\n\
    end", "    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i]\
    \ ~= \"<\" or brackets[i+1] ~= \">\" then\n            result = false\n      \
    \      break\n        end\n    end\n    return result\nend", "    local result\
    \ = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and\
    \ brackets[i] ~= \">\" then\n            result = false\n            break\n \
    \       end\n    end\n    return result\nend", "    local function is_open_bracket(char)\n\
    \        return char == \"(\" or char == \"[\" or char == \"{\"\n    end\n   \
    \ local function is_close_bracket(char)\n        return char == \")\" or char\
    \ == \"]\" or char == \"}\"\n    end\n    local function is_balanced(brackets)\n\
    \        local i = 1\n        while i <= #brackets do\n            if not is_open_bracket(brackets[i])\
    \ and not is_close_bracket(brackets[i]) then\n                return false\n \
    \           end\n            i = i + 1\n        end\n        return true\n   \
    \ end\n    return is_balanced(brackets)\nend", "    local open_brackets = {'<',\
    \ '>'}\n    local close_brackets = {'<', '>'}\n    local i = 1\n    while i <=\
    \ #brackets do\n        if brackets[i] == '<' then\n            if not (i + 1)\
    \ in open_brackets then\n                return false\n            else\n    \
    \            open_brackets[i + 1] = true\n            end\n        else\n    \
    \        if not (i - 1) in close_brackets then\n                return false\n\
    \            else\n                close_brackets[i - 1] = true\n            end\n\
    \        end\n        i = i + 1\n    end\n    return true\nend", "    local function\
    \ is_opening_bracket(char)\n        return char == \"<\"\n    end\n    local function\
    \ is_closing_bracket(char)\n        return char == \">\"\n    end\n    local function\
    \ is_opening_bracket_or_closing_bracket(char)\n        return is_opening_bracket(char)\
    \ or is_closing_bracket(char)\n    end\n    local function is_closing_bracket_or_opening_bracket(char)\n\
    \        return is_closing_bracket(char) or is_opening_bracket(char)\n    end\n\
    \    local function is_balanced(brackets)\n        local i = 1\n        while\
    \ i <= #brackets do\n            if not is_opening_bracket_or_closing_bracket(brackets[i])\
    \ then\n                return false\n            end\n            i = i + 1\n\
    \        end\n        return true\n    end\n    return is_balanced(brackets)\n\
    end", "    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i]\
    \ ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n       \
    \     break\n        end\n    end\n    return result\nend", "    local result\
    \ = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and\
    \ brackets[i] ~= \">\" then\n            result = false\n            break\n \
    \   end\n    return result\nend", "    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n      \
    \      result = false\n            break\n    end\n    return result\nend", " \
    \   local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i]\
    \ ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n       \
    \     break\n        end\n    end\n    return result\nend", "    local open_brackets\
    \ = {'<', '<>'}\n    local close_brackets = {'>', '<>'}\n    local bracket_stack\
    \ = {}\n    for _, char in pairs(brackets) do\n        if char == '<' then\n \
    \           if bracket_stack.count('<') == 0 then\n                bracket_stack['<']\
    \ = true\n            else\n                bracket_stack['<'] = false\n     \
    \       end\n        elseif char == '>' then\n            if bracket_stack.count('>')\
    \ == 0 then\n                bracket_stack['>'] = true\n            else\n   \
    \             bracket_stack['>'] = false\n            end\n        end\n    end\n\
    \    for _, open_bracket in pairs(open_brackets) do\n        if not bracket_stack[open_bracket]\
    \ then\n            return false\n        end\n    end\n    for _, close_bracket\
    \ in pairs(close_brackets) do\n        if not bracket_stack[close_bracket] then\n\
    \            return false\n        end\n    end\n    return true\nend", "    local\
    \ result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"\
    <\" and brackets[i] ~= \">\" then\n            result = false\n            break\n\
    \    end\n    return result\nend", "    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n      \
    \      result = false\n            break\n        end\n    end\n    return result\n\
    end", "    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i]\
    \ ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n       \
    \     break\n        end\n    end\n    return result\nend", "    local result\
    \ = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and\
    \ brackets[i] ~= \">\" then\n            result = false\n            break\n \
    \       end\n    end\n    return result\nend", "    local open_brackets = {'<',\
    \ '>'}\n    local close_brackets = {'<', '>'}\n    local i = 1\n    while i <=\
    \ #brackets do\n        if brackets[i] == '<' then\n            if not (i + 1)\
    \ <= #brackets and brackets[i + 1] == '>' then\n                return false\n\
    \            else\n                open_brackets = {brackets[i], brackets[i +\
    \ 1]}\n            end\n        else\n            if not (i - 1) >= 1 and open_brackets[1]\
    \ == brackets[i - 1] then\n                close_brackets = {brackets[i - 1],\
    \ brackets[i]}\n            end\n        end\n        i = i + 1\n    end\n   \
    \ return #open_brackets == #close_brackets\nend", "    local result = true\n \
    \   for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i]\
    \ ~= \">\" then\n            result = false\n            break\n        end\n\
    \    end\n    return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
