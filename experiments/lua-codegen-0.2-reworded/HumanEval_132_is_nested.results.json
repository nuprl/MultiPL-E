{
  "language": "lua",
  "name": "HumanEval_132_is_nested",
  "results": [
    {
      "exit_code": 1,
      "program": "-- Create a function that takes a string as input which contains only square brackets.\n-- The function should return true if and only if there is a valid subsequence of brackets \n-- where at least one bracket in the subsequence is nested.\n-- >>> is_nested('[[]]') \n-- True\n-- >>> is_nested('[]]]]]]][[[[[]') \n-- False\n-- >>> is_nested('[][]') \n-- False\n-- >>> is_nested('[]') \n-- False\n-- >>> is_nested('[[][]]') \n-- True\n-- >>> is_nested('[[]][[') \n-- True\nlocal function is_nested(string)\n    local i, j, count = 1, 1, 0\n    for i = 1, #string, 2 do\n        if string[i] == string[i+1] then\n            count = count + 1\n            if count > 1 then\n                return true\n            end\n        end\n        count = count - 1\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp30k3r758.lua:33: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp30k3r758.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907433
    },
    {
      "exit_code": 1,
      "program": "-- Create a function that takes a string as input which contains only square brackets.\n-- The function should return true if and only if there is a valid subsequence of brackets \n-- where at least one bracket in the subsequence is nested.\n-- >>> is_nested('[[]]') \n-- True\n-- >>> is_nested('[]]]]]]][[[[[]') \n-- False\n-- >>> is_nested('[][]') \n-- False\n-- >>> is_nested('[]') \n-- False\n-- >>> is_nested('[[][]]') \n-- True\n-- >>> is_nested('[[]][[') \n-- True\nlocal function is_nested(string)\n    local i = 1\n    local j = 1\n    local result = true\n    while i <= #string do\n        if string[i] == '[' then\n            j = i + 1\n            while j <= #string do\n                if string[j] == '[' then\n                    j = j + 1\n                elseif string[j] == ']' then\n                    j = j + 1\n                    if j > i + 2 then\n                        result = false\n                    elseif j > i + 1 then\n                        result = true\n                    else\n                        result = false\n                    end\n                else\n                    j = j + 1\n                end\n            end\n            i = i + 1\n        else\n            i = i + 1\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa1iq6b7v.lua:51: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa1iq6b7v.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907433
    },
    {
      "exit_code": 1,
      "program": "-- Create a function that takes a string as input which contains only square brackets.\n-- The function should return true if and only if there is a valid subsequence of brackets \n-- where at least one bracket in the subsequence is nested.\n-- >>> is_nested('[[]]') \n-- True\n-- >>> is_nested('[]]]]]]][[[[[]') \n-- False\n-- >>> is_nested('[][]') \n-- False\n-- >>> is_nested('[]') \n-- False\n-- >>> is_nested('[[][]]') \n-- True\n-- >>> is_nested('[[]][[') \n-- True\nlocal function is_nested(string)\n    local result = true\n    for i = 1, #string, 2 do\n        if string:sub(string, i, i) ~= '[[' then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpenbjnzz4.lua:19: bad argument #1 to 'sub' (number expected, got string)\nstack traceback:\n\t/tmp/tmpenbjnzz4.lua:19: in local 'candidate'\n\t/tmp/tmpenbjnzz4.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907433
    },
    {
      "exit_code": 1,
      "program": "-- Create a function that takes a string as input which contains only square brackets.\n-- The function should return true if and only if there is a valid subsequence of brackets \n-- where at least one bracket in the subsequence is nested.\n-- >>> is_nested('[[]]') \n-- True\n-- >>> is_nested('[]]]]]]][[[[[]') \n-- False\n-- >>> is_nested('[][]') \n-- False\n-- >>> is_nested('[]') \n-- False\n-- >>> is_nested('[[][]]') \n-- True\n-- >>> is_nested('[[]][[') \n-- True\nlocal function is_nested(string)\n    local i = 1\n    local j = 1\n    while i <= #string do\n        if string[i] == '[' then\n            j = i\n            while j <= #string do\n                if string[j] == '[' then\n                    j = j + 1\n                elseif string[j] == ']' then\n                    j = j + 1\n                    if j > i + 1 then\n                        return true\n                    else\n                        j = i\n                else\n                    j = j + 1\n            end\n            i = i + 1\n        else\n            i = i + 1\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp3cxja_aq.lua:31: 'end' expected (to close 'if' at line 27) near 'else'\n",
      "stdout": "",
      "timestamp": 1661907433
    },
    {
      "exit_code": 1,
      "program": "-- Create a function that takes a string as input which contains only square brackets.\n-- The function should return true if and only if there is a valid subsequence of brackets \n-- where at least one bracket in the subsequence is nested.\n-- >>> is_nested('[[]]') \n-- True\n-- >>> is_nested('[]]]]]]][[[[[]') \n-- False\n-- >>> is_nested('[][]') \n-- False\n-- >>> is_nested('[]') \n-- False\n-- >>> is_nested('[[][]]') \n-- True\n-- >>> is_nested('[[]][[') \n-- True\nlocal function is_nested(string)\n    local i = 1\n    local j = 1\n    while i <= #string do\n        if string[i] == '[' then\n            j = j + 1\n        elseif string[i] == ']' then\n            j = j - 1\n        end\n        i = i + 1\n    end\n    return j > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0kya7nvj.lua:34: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0kya7nvj.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907433
    },
    {
      "exit_code": 1,
      "program": "-- Create a function that takes a string as input which contains only square brackets.\n-- The function should return true if and only if there is a valid subsequence of brackets \n-- where at least one bracket in the subsequence is nested.\n-- >>> is_nested('[[]]') \n-- True\n-- >>> is_nested('[]]]]]]][[[[[]') \n-- False\n-- >>> is_nested('[][]') \n-- False\n-- >>> is_nested('[]') \n-- False\n-- >>> is_nested('[[][]]') \n-- True\n-- >>> is_nested('[[]][[') \n-- True\nlocal function is_nested(string)\n    local result = true\n    local i = 1\n    while i <= #string do\n        if string[i] == '[' then\n            local j = i + 1\n            while j <= #string do\n                if string[j] == '[' then\n                    j = j + 1\n                elseif string[j] == ']' then\n                    j = j + 1\n                    if j > i + 1 then\n                        result = false\n                    end\n                elseif string[j] == ']' then\n                    result = false\n                end\n                j = j + 1\n            end\n            i = i + 1\n        elseif string[i] == ']' then\n            result = false\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpft2df7g1.lua:48: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpft2df7g1.lua:48: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907433
    },
    {
      "exit_code": 1,
      "program": "-- Create a function that takes a string as input which contains only square brackets.\n-- The function should return true if and only if there is a valid subsequence of brackets \n-- where at least one bracket in the subsequence is nested.\n-- >>> is_nested('[[]]') \n-- True\n-- >>> is_nested('[]]]]]]][[[[[]') \n-- False\n-- >>> is_nested('[][]') \n-- False\n-- >>> is_nested('[]') \n-- False\n-- >>> is_nested('[[][]]') \n-- True\n-- >>> is_nested('[[]][[') \n-- True\nlocal function is_nested(string)\n    local i, j, count = 1, 1, 0\n    for i = 1, #string, 2 do\n        if string[i] == string[i+1] then\n            count = count + 1\n            if count > 1 then\n                count = 0\n            end\n        else\n            count = 0\n        end\n        if count > 0 then\n            count = 0\n        end\n    end\n    return count > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn52ybta7.lua:37: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpn52ybta7.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907433
    },
    {
      "exit_code": 1,
      "program": "-- Create a function that takes a string as input which contains only square brackets.\n-- The function should return true if and only if there is a valid subsequence of brackets \n-- where at least one bracket in the subsequence is nested.\n-- >>> is_nested('[[]]') \n-- True\n-- >>> is_nested('[]]]]]]][[[[[]') \n-- False\n-- >>> is_nested('[][]') \n-- False\n-- >>> is_nested('[]') \n-- False\n-- >>> is_nested('[[][]]') \n-- True\n-- >>> is_nested('[[]][[') \n-- True\nlocal function is_nested(string)\n    local i = 1\n    while i <= #string do\n        if string:sub(i, i) == '[' then\n            if string:sub(i + 1, i + 1) == '[' then\n                i = i + 1\n            else\n                return false\n            end\n        else\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvc295xel.lua:36: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvc295xel.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907433
    },
    {
      "exit_code": 1,
      "program": "-- Create a function that takes a string as input which contains only square brackets.\n-- The function should return true if and only if there is a valid subsequence of brackets \n-- where at least one bracket in the subsequence is nested.\n-- >>> is_nested('[[]]') \n-- True\n-- >>> is_nested('[]]]]]]][[[[[]') \n-- False\n-- >>> is_nested('[][]') \n-- False\n-- >>> is_nested('[]') \n-- False\n-- >>> is_nested('[[][]]') \n-- True\n-- >>> is_nested('[[]][[') \n-- True\nlocal function is_nested(string)\n    local i = 1\n    local j = 1\n    while i <= #string do\n        if string[i] == '[':\n            j = i + 1\n            while j <= #string do\n                if string[j] == '[' and string[j-1] != ']':\n                    j = j + 1\n                elseif string[j] == ']' and string[j-1] != ']':\n                    return true\n                else\n                    j = j + 1\n            i = i + 1\n        else\n            i = i + 1\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpyv28z2ih.lua:20: 'then' expected near ':'\n",
      "stdout": "",
      "timestamp": 1661907433
    },
    {
      "exit_code": 1,
      "program": "-- Create a function that takes a string as input which contains only square brackets.\n-- The function should return true if and only if there is a valid subsequence of brackets \n-- where at least one bracket in the subsequence is nested.\n-- >>> is_nested('[[]]') \n-- True\n-- >>> is_nested('[]]]]]]][[[[[]') \n-- False\n-- >>> is_nested('[][]') \n-- False\n-- >>> is_nested('[]') \n-- False\n-- >>> is_nested('[[][]]') \n-- True\n-- >>> is_nested('[[]][[') \n-- True\nlocal function is_nested(string)\n    local result = true\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmsjbxlvp.lua:19: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907433
    },
    {
      "exit_code": 1,
      "program": "-- Create a function that takes a string as input which contains only square brackets.\n-- The function should return true if and only if there is a valid subsequence of brackets \n-- where at least one bracket in the subsequence is nested.\n-- >>> is_nested('[[]]') \n-- True\n-- >>> is_nested('[]]]]]]][[[[[]') \n-- False\n-- >>> is_nested('[][]') \n-- False\n-- >>> is_nested('[]') \n-- False\n-- >>> is_nested('[[][]]') \n-- True\n-- >>> is_nested('[[]][[') \n-- True\nlocal function is_nested(string)\n    local result = true\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpmsjbxlvp.lua:19: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907433
    },
    {
      "exit_code": 1,
      "program": "-- Create a function that takes a string as input which contains only square brackets.\n-- The function should return true if and only if there is a valid subsequence of brackets \n-- where at least one bracket in the subsequence is nested.\n-- >>> is_nested('[[]]') \n-- True\n-- >>> is_nested('[]]]]]]][[[[[]') \n-- False\n-- >>> is_nested('[][]') \n-- False\n-- >>> is_nested('[]') \n-- False\n-- >>> is_nested('[[][]]') \n-- True\n-- >>> is_nested('[[]][[') \n-- True\nlocal function is_nested(string)\n    local i = 1\n    local j = 1\n    local is_nested = true\n    while i <= #string do\n        if string[i] == '[' then\n            j = i + 1\n            while j <= #string do\n                if string[j] == '[' then\n                    j = j + 1\n                elseif string[j] == ']' then\n                    if j == i then\n                        is_nested = false\n                    else\n                        j = j - 1\n                else\n                    j = j + 1\n                end\n            end\n            i = i + 1\n        else\n            i = i + 1\n        end\n    end\n    return is_nested\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpibxw94u2.lua:31: 'end' expected (to close 'if' at line 27) near 'else'\n",
      "stdout": "",
      "timestamp": 1661907433
    },
    {
      "exit_code": 1,
      "program": "-- Create a function that takes a string as input which contains only square brackets.\n-- The function should return true if and only if there is a valid subsequence of brackets \n-- where at least one bracket in the subsequence is nested.\n-- >>> is_nested('[[]]') \n-- True\n-- >>> is_nested('[]]]]]]][[[[[]') \n-- False\n-- >>> is_nested('[][]') \n-- False\n-- >>> is_nested('[]') \n-- False\n-- >>> is_nested('[[][]]') \n-- True\n-- >>> is_nested('[[]][[') \n-- True\nlocal function is_nested(string)\n    local result = true\n    for i = 1, #string, 2 do\n        if string:sub(string, i, i) ~= '[' then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjyn5t5fw.lua:19: bad argument #1 to 'sub' (number expected, got string)\nstack traceback:\n\t/tmp/tmpjyn5t5fw.lua:19: in local 'candidate'\n\t/tmp/tmpjyn5t5fw.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907433
    },
    {
      "exit_code": 1,
      "program": "-- Create a function that takes a string as input which contains only square brackets.\n-- The function should return true if and only if there is a valid subsequence of brackets \n-- where at least one bracket in the subsequence is nested.\n-- >>> is_nested('[[]]') \n-- True\n-- >>> is_nested('[]]]]]]][[[[[]') \n-- False\n-- >>> is_nested('[][]') \n-- False\n-- >>> is_nested('[]') \n-- False\n-- >>> is_nested('[[][]]') \n-- True\n-- >>> is_nested('[[]][[') \n-- True\nlocal function is_nested(string)\n    local result = true\n    local i = 1\n    while i <= #string do\n        if string[i] == '[' then\n            if string[i+1] == '[' then\n                i = i + 2\n            else\n                i = i + 1\n            end\n        else\n            if string[i] == ']' then\n                i = i + 1\n            end\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp3zs86eb.lua:40: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpp3zs86eb.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907433
    },
    {
      "exit_code": 1,
      "program": "-- Create a function that takes a string as input which contains only square brackets.\n-- The function should return true if and only if there is a valid subsequence of brackets \n-- where at least one bracket in the subsequence is nested.\n-- >>> is_nested('[[]]') \n-- True\n-- >>> is_nested('[]]]]]]][[[[[]') \n-- False\n-- >>> is_nested('[][]') \n-- False\n-- >>> is_nested('[]') \n-- False\n-- >>> is_nested('[[][]]') \n-- True\n-- >>> is_nested('[[]][[') \n-- True\nlocal function is_nested(string)\n    local i = 1\n    while i <= #string do\n        if string[i] == '[' then\n            if string[i+1] == '[' then\n                i = i + 2\n            else\n                return false\n        else\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmprgh4moxx.lua:24: 'end' expected (to close 'if' at line 20) near 'else'\n",
      "stdout": "",
      "timestamp": 1661907433
    },
    {
      "exit_code": 1,
      "program": "-- Create a function that takes a string as input which contains only square brackets.\n-- The function should return true if and only if there is a valid subsequence of brackets \n-- where at least one bracket in the subsequence is nested.\n-- >>> is_nested('[[]]') \n-- True\n-- >>> is_nested('[]]]]]]][[[[[]') \n-- False\n-- >>> is_nested('[][]') \n-- False\n-- >>> is_nested('[]') \n-- False\n-- >>> is_nested('[[][]]') \n-- True\n-- >>> is_nested('[[]][[') \n-- True\nlocal function is_nested(string)\n    local i = 1\n    local j = 1\n    while i <= #string do\n        if string[i] == '[' then\n            j = i\n            while j <= #string do\n                if string[j] == '[' then\n                    j = j + 1\n                elseif string[j] == ']' then\n                    j = j + 1\n                    if j > i + 1 then\n                        return true\n                    end\n                else\n                    j = j + 1\n                end\n            end\n            i = i + 1\n        else\n            i = i + 1\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphjebg7sc.lua:45: expected: true, actual: false\nstack traceback:\n\t/tmp/tmphjebg7sc.lua:45: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907433
    },
    {
      "exit_code": 1,
      "program": "-- Create a function that takes a string as input which contains only square brackets.\n-- The function should return true if and only if there is a valid subsequence of brackets \n-- where at least one bracket in the subsequence is nested.\n-- >>> is_nested('[[]]') \n-- True\n-- >>> is_nested('[]]]]]]][[[[[]') \n-- False\n-- >>> is_nested('[][]') \n-- False\n-- >>> is_nested('[]') \n-- False\n-- >>> is_nested('[[][]]') \n-- True\n-- >>> is_nested('[[]][[') \n-- True\nlocal function is_nested(string)\n    local result = true\n    for i = 1, #string, 2 do\n        if string:sub(string, i, 2) == '[['] then\n            result = result and is_nested(string:sub(string, 1, i))\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp8uh3g_c2.lua:19: 'then' expected near ']'\n",
      "stdout": "",
      "timestamp": 1661907433
    },
    {
      "exit_code": 1,
      "program": "-- Create a function that takes a string as input which contains only square brackets.\n-- The function should return true if and only if there is a valid subsequence of brackets \n-- where at least one bracket in the subsequence is nested.\n-- >>> is_nested('[[]]') \n-- True\n-- >>> is_nested('[]]]]]]][[[[[]') \n-- False\n-- >>> is_nested('[][]') \n-- False\n-- >>> is_nested('[]') \n-- False\n-- >>> is_nested('[[][]]') \n-- True\n-- >>> is_nested('[[]][[') \n-- True\nlocal function is_nested(string)\n    local i = 1\n    local j = 1\n    while i <= #string do\n        if string[i] == '[' then\n            j = j + 1\n            if j == 1 then\n                i = i + 1\n            elseif j == 2 then\n                i = i + 1\n            elseif j > 2 then\n                return false\n            end\n        elseif string[i] == ']' then\n            j = j - 1\n            if j == 0 then\n                i = i + 1\n            elseif j < 0 then\n                return false\n            end\n        else\n            i = i + 1\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_f03n8j3.lua:47: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_f03n8j3.lua:47: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907433
    },
    {
      "exit_code": 1,
      "program": "-- Create a function that takes a string as input which contains only square brackets.\n-- The function should return true if and only if there is a valid subsequence of brackets \n-- where at least one bracket in the subsequence is nested.\n-- >>> is_nested('[[]]') \n-- True\n-- >>> is_nested('[]]]]]]][[[[[]') \n-- False\n-- >>> is_nested('[][]') \n-- False\n-- >>> is_nested('[]') \n-- False\n-- >>> is_nested('[[][]]') \n-- True\n-- >>> is_nested('[[]][[') \n-- True\nlocal function is_nested(string)\n    local result = true\n    for i = 1, #string, 2 do\n        if string:sub(string, i, i) ~= '[' then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjyn5t5fw.lua:19: bad argument #1 to 'sub' (number expected, got string)\nstack traceback:\n\t/tmp/tmpjyn5t5fw.lua:19: in local 'candidate'\n\t/tmp/tmpjyn5t5fw.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907433
    },
    {
      "exit_code": 1,
      "program": "-- Create a function that takes a string as input which contains only square brackets.\n-- The function should return true if and only if there is a valid subsequence of brackets \n-- where at least one bracket in the subsequence is nested.\n-- >>> is_nested('[[]]') \n-- True\n-- >>> is_nested('[]]]]]]][[[[[]') \n-- False\n-- >>> is_nested('[][]') \n-- False\n-- >>> is_nested('[]') \n-- False\n-- >>> is_nested('[[][]]') \n-- True\n-- >>> is_nested('[[]][[') \n-- True\nlocal function is_nested(string)\n    local i = 1\n    local j = 1\n    local result = true\n    while i <= #string do\n        if string[i] == '[' then\n            j = j + 1\n            if j > 1 then\n                result = result and (j - 1) < j\n            end\n        elseif string[i] == ']' then\n            j = j - 1\n            if j < 1 then\n                result = result and (j + 1) > j\n            end\n        end\n        i = i + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_nested\n    lu.assertEquals(candidate('[[]]'), true)\n    lu.assertEquals(candidate('[]]]]]]][[[[[]'), false)\n    lu.assertEquals(candidate('[][]'), false)\n    lu.assertEquals(candidate('[]'), false)\n    lu.assertEquals(candidate('[[[[]]]]'), true)\n    lu.assertEquals(candidate('[]]]]]]]]]]'), false)\n    lu.assertEquals(candidate('[][][[]]'), true)\n    lu.assertEquals(candidate('[[]'), false)\n    lu.assertEquals(candidate('[]]'), false)\n    lu.assertEquals(candidate('[[]][['), true)\n    lu.assertEquals(candidate('[[][]]'), true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('[[[[[[[['), false)\n    lu.assertEquals(candidate(']]]]]]]]'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_a3ms5ob.lua:41: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_a3ms5ob.lua:41: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907433
    }
  ]
}