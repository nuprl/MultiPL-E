name: HumanEval_62_derivative
language: lua
prompt: "-- xs represent coefficients of a polynomial.\n-- xs[0] + xs[1] * x + xs[2]\
  \ * x^2 + ....\n-- Return derivative of this polynomial in the same form.\n-- >>>\
  \ derivative([3, 1, 2, 4, 5])\n-- [1, 4, 12, 20]\n-- >>> derivative([1, 2, 3])\n\
  -- [2, 6]\nlocal function derivative(xs)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = derivative\n\
  \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), {1, 4, 12, 20})\n    lu.assertEquals(candidate({1,\
  \ 2, 3}), {2, 6})\n    lu.assertEquals(candidate({3, 2, 1}), {2, 2})\n    lu.assertEquals(candidate({3,\
  \ 2, 1, 0, 4}), {2, 2, 0, 16})\n    lu.assertEquals(candidate({1}), {})\nend\n\n\
  os.exit(lu.LuaUnit.run())"
completions: ["    local n = #xs\n    if n == 0 then return nil end\n    local result\
    \ = {}\n    for i = 1, n do\n        result[i] = xs[i]\n        if i > 1 then\
    \ result[i] = result[i] * (i - 1)\n    end\n    return result\nend", "    local\
    \ n = #xs\n    if n == 0 then return nil end\n    local d = xs[n]\n    for i =\
    \ n - 1, 1, -1 do\n        d = d * xs[i] + xs[i - 1]\n    end\n    return d\n\
    end", "    local n = #xs\n    if n == 0 then return [] end\n    local d = math.pow(xs[n],\
    \ n - 1)\n    for i = n - 1, 1, -1 do\n        d = d * xs[i]\n    end\n    return\
    \ d\nend", "    local n = #xs\n    if n == 0 then return [] end\n    local d =\
    \ math.pow(xs[n], n - 1)\n    return d * math.diff(xs, 1, n - 1)\nend", "    local\
    \ n = #xs\n    if n == 0 then return nil end\n    local d = xs[n]\n    for i =\
    \ n - 1, 1, -1 do\n        d = d * xs[i] + xs[i - 1]\n    end\n    return d\n\
    end", "    local i, d = 1, 0\n    for i = 1, #xs, 2 do\n        d = d + xs[i]\
    \ * i\n    end\n    return d\nend", "    local n = #xs\n    if n == 0 then return\
    \ {} end\n    local d = {}\n    for i = 1, n do\n        d[i] = (n - i + 1) *\
    \ xs[i]\n    end\n    return d\nend", "    local n = #xs\n    if n == 0 then return\
    \ {} end\n    local result = {}\n    for i = 1, n do\n        result[i] = n *\
    \ xs[i]\n    end\n    return result\nend", "    local n = #xs\n    if n == 0 then\
    \ return [] end\n    local d = math.zeros(n - 1)\n    for i = 1, n - 1 do\n  \
    \      d[i - 1] = (n - i) * xs[i]\n    end\n    return d\nend", "    local result\
    \ = {}\n    for i = 1, #xs, 2 do\n        result[i] = xs[i]\n        result[i\
    \ + 1] = xs[i + 1] * i\n    end\n    return result\nend", "    local n = #xs\n\
    \    if n == 0 then return [] end\n    local d = xs[n]\n    for i = n - 1, 1,\
    \ -1 do\n        d = d * xs[i] + xs[i - 1]\n    end\n    return d\nend", "   \
    \ local n = #xs\n    if n == 0 then return {} end\n    local d = math.pow(xs[n],\
    \ n - 1)\n    for i = n - 1, 1, -1 do\n        d = d * xs[i] + math.pow(xs[i],\
    \ i)\n    end\n    return d\nend", "    local n = #xs\n    if n == 0 then return\
    \ nil end\n    local d = math.pow(xs[n], n - 1)\n    for i = n - 2, 1, -1 do\n\
    \        d = d * xs[i] + math.pow(xs[i], i)\n    end\n    return d\nend", "  \
    \  local result = {}\n    for i = 1, #xs, 2 do\n        result[i] = xs[i]\n  \
    \      result[i + 1] = xs[i + 1] * i\n    end\n    return result\nend", "    local\
    \ n = #xs\n    if n == 0 then return {} end\n    local d = {}\n    for i = 1,\
    \ n do\n        d[i] = xs[i]\n        if i > 1 then d[i] = d[i] + d[i - 1] * xs[i\
    \ - 1]\n    end\n    return d\nend", "    local n = #xs\n    if n == 0 then return\
    \ [] end\n    local d = xs[n]\n    for i = n - 1, 1, -1 do\n        d = d * xs[i]\
    \ + xs[i - 1]\n    end\n    return d\nend", "    local n = #xs\n    if n == 0\
    \ then return [] end\n    local d = xs[n]\n    for i = n - 1, 1, -1 do\n     \
    \   d = d * xs[i] + xs[i - 1]\n    end\n    return d\nend", "    local result\
    \ = {}\n    for i = 1, #xs, 2 do\n        result[i] = xs[i+1] - xs[i-1]\n    end\n\
    \    return result\nend", "    local n = #xs\n    if n == 0 then return [] end\n\
    \    local d = math.pow(xs[n], n - 1)\n    for i = n - 1, 1, -1 do\n        d\
    \ = d * xs[i] + math.pow(xs[i], i)\n    end\n    return d\nend", "    local n\
    \ = #xs\n    if n == 0 then return nil end\n    local d = math.pow(xs[n], n -\
    \ 1)\n    for i = n - 1, 1, -1 do\n        d = d * xs[i] + math.pow(xs[i], n -\
    \ 2)\n    end\n    return d\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
