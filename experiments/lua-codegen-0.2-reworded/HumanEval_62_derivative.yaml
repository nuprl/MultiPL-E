name: HumanEval_62_derivative
language: lua
prompt: "-- xs represent coefficients of a polynomial.\n-- xs[0] + xs[1] * x + xs[2]\
  \ * x^2 + ....\n-- Return derivative of this polynomial in the same form.\n-- >>>\
  \ derivative([3, 1, 2, 4, 5])\n-- [1, 4, 12, 20]\n-- >>> derivative([1, 2, 3])\n\
  -- [2, 6]\nlocal function derivative(xs)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = derivative\n\
  \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), {1, 4, 12, 20})\n    lu.assertEquals(candidate({1,\
  \ 2, 3}), {2, 6})\n    lu.assertEquals(candidate({3, 2, 1}), {2, 2})\n    lu.assertEquals(candidate({3,\
  \ 2, 1, 0, 4}), {2, 2, 0, 16})\n    lu.assertEquals(candidate({1}), {})\nend\n\n\
  os.exit(lu.LuaUnit.run())"
completions: ["    local n = #xs\n    if n == 0 then return nil end\n    local result\
    \ = {}\n    for i = 1, n do\n        result[i] = xs[i]\n        if i > 1 then\
    \ result[i] = result[i] * (i - 1)\n    end\n    return result\nend", "    local\
    \ n = #xs\n    if n == 0 then return nil end\n    local d = xs[n]\n    for i =\
    \ n - 1, 1, -1 do\n        d = d * xs[i] + xs[i - 1]\n    end\n    return d\n\
    end", "    local n = #xs\n    if n == 0 then return [] end\n    local d = math.pow(xs[n],\
    \ n - 1)\n    for i = n - 1, 1, -1 do\n        d = d * xs[i]\n    end\n    return\
    \ d\nend", "    local n = #xs\n    if n == 0 then return [] end\n    local d =\
    \ math.pow(xs[n], n - 1)\n    return d * math.diff(xs, 1, n - 1)\nend", "    local\
    \ n = #xs\n    if n == 0 then return nil end\n    local d = xs[n]\n    for i =\
    \ n - 1, 1, -1 do\n        d = d * xs[i] + xs[i - 1]\n    end\n    return d\n\
    end", "    local i, d = 1, 0\n    for i = 1, #xs, 2 do\n        d = d + xs[i]\
    \ * i\n    end\n    return d\nend", "    local n = #xs\n    if n == 0 then return\
    \ {} end\n    local d = {}\n    for i = 1, n do\n        d[i] = (n - i + 1) *\
    \ xs[i]\n    end\n    return d\nend", "    local n = #xs\n    if n == 0 then return\
    \ {} end\n    local result = {}\n    for i = 1, n do\n        result[i] = n *\
    \ xs[i]\n    end\n    return result\nend", "    local n = #xs\n    if n == 0 then\
    \ return [] end\n    local d = math.zeros(n - 1)\n    for i = 1, n - 1 do\n  \
    \      d[i - 1] = (n - i) * xs[i]\n    end\n    return d\nend", "    local result\
    \ = {}\n    for i = 1, #xs, 2 do\n        result[i] = xs[i]\n        result[i\
    \ + 1] = xs[i + 1] * i\n    end\n    return result\nend", "    local n = #xs\n\
    \    if n == 0 then return [] end\n    local d = xs[n]\n    for i = n - 1, 1,\
    \ -1 do\n        d = d * xs[i] + xs[i - 1]\n    end\n    return d\nend", "   \
    \ local n = #xs\n    if n == 0 then return {} end\n    local d = math.pow(xs[n],\
    \ n - 1)\n    for i = n - 1, 1, -1 do\n        d = d * xs[i] + math.pow(xs[i],\
    \ i)\n    end\n    return d\nend", "    local n = #xs\n    if n == 0 then return\
    \ nil end\n    local d = math.pow(xs[n], n - 1)\n    for i = n - 2, 1, -1 do\n\
    \        d = d * xs[i] + math.pow(xs[i], i)\n    end\n    return d\nend", "  \
    \  local result = {}\n    for i = 1, #xs, 2 do\n        result[i] = xs[i]\n  \
    \      result[i + 1] = xs[i + 1] * i\n    end\n    return result\nend", "    local\
    \ n = #xs\n    if n == 0 then return {} end\n    local d = {}\n    for i = 1,\
    \ n do\n        d[i] = xs[i]\n        if i > 1 then d[i] = d[i] + d[i - 1] * xs[i\
    \ - 1]\n    end\n    return d\nend", "    local n = #xs\n    if n == 0 then return\
    \ [] end\n    local d = xs[n]\n    for i = n - 1, 1, -1 do\n        d = d * xs[i]\
    \ + xs[i - 1]\n    end\n    return d\nend", "    local n = #xs\n    if n == 0\
    \ then return [] end\n    local d = xs[n]\n    for i = n - 1, 1, -1 do\n     \
    \   d = d * xs[i] + xs[i - 1]\n    end\n    return d\nend", "    local result\
    \ = {}\n    for i = 1, #xs, 2 do\n        result[i] = xs[i+1] - xs[i-1]\n    end\n\
    \    return result\nend", "    local n = #xs\n    if n == 0 then return [] end\n\
    \    local d = math.pow(xs[n], n - 1)\n    for i = n - 1, 1, -1 do\n        d\
    \ = d * xs[i] + math.pow(xs[i], i)\n    end\n    return d\nend", "    local n\
    \ = #xs\n    if n == 0 then return nil end\n    local d = math.pow(xs[n], n -\
    \ 1)\n    for i = n - 1, 1, -1 do\n        d = d * xs[i] + math.pow(xs[i], n -\
    \ 2)\n    end\n    return d\nend", "    local n = #xs\n    if n == 0 then return\
    \ [] end\n    local result = [0]\n    for i = 1, n-1 do\n        result[i] = result[i-1]\
    \ + xs[i]\n    end\n    return result\nend", "    local n = #xs\n    local result\
    \ = {}\n    for i = 1, n do\n        result[i] = 0\n        for j = 1, i - 1 do\n\
    \            result[i] = result[i] + xs[j] * xs[i - j]\n        end\n        result[i]\
    \ = result[i] + xs[i]\n    end\n    return result\nend", "    local i, n = math.min(math.len(xs),\
    \ 2)\n    if n == 0 then return [] end\n    local d = math.zeros(n)\n    for i\
    \ = 1, n do\n        d[i] = (i - 1) * xs[i]\n    end\n    return d\nend", "  \
    \  local n = #xs\n    if n == 0 then return [] end\n    local result = {}\n  \
    \  for i = 1, n do\n        result[i] = xs[i]\n        if i > 1 then\n       \
    \     result[i] = result[i] + result[i - 1] * xs[i - 1]\n        end\n    end\n\
    \    return result\nend", "    local n = #xs\n    if n == 0 then return [] end\n\
    \    local result = [0]\n    for i = 1, n - 1 do\n        result[i] = xs[i + 1]\
    \ - xs[i]\n    end\n    return result\nend", "    local n = #xs\n    local result\
    \ = {}\n    for i = 1, n do\n        result[i] = 0\n        for j = 1, i - 1 do\n\
    \            result[i] = result[i] + xs[j] * math.pow(xs[i], j)\n        end\n\
    \    end\n    return result\nend", "    local n = #xs\n    if n < 2 then return\
    \ xs\n    return [0] * (n - 1) + [1] * (n - 1)\nend", "    local i, d = 1, 0\n\
    \    for i = 1, #xs, 2 do\n        d = d + xs[i] * i\n    end\n    return d\n\
    end", "    local n = #xs\n    if n == 0 then return nil end\n    local d = xs[n]\n\
    \    for i = n - 1, 1, -1 do\n        d = d * xs[i] + xs[i - 1]\n    end\n   \
    \ return d\nend", "    local i, n = 1, #xs\n    local d = {}\n    for i = 1, n\
    \ do\n        d[i] = 0\n        for j = 1, i - 1 do\n            d[i] = d[i] +\
    \ xs[j] * xs[i - j]\n        end\n        d[i] = d[i] + xs[i]\n    end\n    return\
    \ d\nend", "    local n = #xs\n    if n == 0 then return [] end\n    local d =\
    \ xs[n]\n    for i = n - 1, 1, -1 do\n        d = d * xs[i] + xs[i - 1]\n    end\n\
    \    return d\nend", "    local n = #xs\n    if n == 0 then return [] end\n  \
    \  local d = math.pow(xs[n-1], n-1)\n    return d * math.diff(xs, n-1)\nend",
  "    local n = #xs\n    if n == 0 then return [] end\n    local result = [0]\n \
    \   for i = 1, n - 1 do\n        result[i] = (xs[i + 1] - xs[i]) / (xs[i] * (n\
    \ - i))\n    end\n    return result\nend", "    local i, d = 1, 0\n    for i =\
    \ 1, #xs, 2 do\n        d = d + xs[i] * i\n    end\n    return d\nend", "    local\
    \ n = #xs\n    if n == 0 then return nil end\n    local d = xs[n]\n    for i =\
    \ n - 1, 1, -1 do\n        d = d * xs[i] + xs[i - 1]\n    end\n    return d\n\
    end", "    local n = #xs\n    if n == 0 then return [] end\n    local d = math.pow(xs[n],\
    \ n - 1)\n    for i = n - 1, 1, -1 do\n        d = d * xs[i] + math.pow(xs[i],\
    \ i)\n    end\n    return d\nend", "    local n = #xs\n    local result = {}\n\
    \    for i = 1, n do\n        result[i] = n - i + 1\n        result[-i] = -i\n\
    \    end\n    for i = 1, n - 1 do\n        result[i] = result[i + 1] * xs[i +\
    \ 1]\n    end\n    return result\nend", "    local n = #xs\n    if n == 0 then\
    \ return [] end\n    local d = xs[n]\n    for i = n - 1, 1, -1 do\n        d =\
    \ d * xs[i] + xs[i - 1]\n    end\n    return d\nend", "    local n = #xs\n   \
    \ if n == 0 then return [] end\n    local d = xs[n]\n    for i = n - 1, 1, -1\
    \ do\n        d = d * xs[i] + xs[i - 1]\n    end\n    return d\nend", "    local\
    \ n = #xs\n    if n == 0 then return [] end\n    local d = math.pow(xs[n], n-1)\n\
    \    return d:mul(n-1):sub(xs[n])\nend", "    local i, d = 1, 0\n    for i = 1,\
    \ #xs, 2 do\n        d = d + xs[i] * i\n    end\n    return d\nend", "    local\
    \ result = {}\n    for i = 1, #xs, 2 do\n        result[i] = xs[i + 1] - xs[i]\n\
    \    end\n    return result\nend", "    local n = #xs\n    if n == 0 then return\
    \ [] end\n    local d = math.pow(xs[n], n - 1)\n    return d * xs[n - 1]\nend",
  "    local n = #xs\n    if n == 0 then return nil end\n    local result = {}\n \
    \   for i = 1, n do\n        result[i] = xs[i]\n        if i > 1 then result[i]\
    \ = result[i] + result[i - 1] * xs[i - 1] end\n    end\n    return result\nend",
  "    local result = {}\n    for i = 1, #xs, 2 do\n        result[i] = xs[i+1] -\
    \ xs[i-1]\n    end\n    return result\nend", "    local n = #xs\n    if n == 0\
    \ then return [] end\n    local result = [0]\n    for i = 1, n - 1 do\n      \
    \  result = result .. (xs[i + 1] - xs[i])\n    end\n    return result\nend", " \
    \   local n = #xs\n    if n == 0 then return [] end\n    return [0] + xs[n] *\
    \ math.pow(xs[n-1], n-1)\nend", "    local n = #xs\n    local d = vector.new(n)\n\
    \    for i = 1, n - 1 do\n        d[i] = (xs[i + 1] - xs[i]) / (xs[i] * xs[i])\n\
    \    end\n    return d\nend", "    local n = #xs\n    if n == 0 then return []\
    \ end\n    local d = math.pow(xs[n], n-1)\n    return d:mul(n-1):sub(xs[n])\n\
    end", "    local n = #xs\n    if n == 0 then return [] end\n    local d = xs[n]\n\
    \    for i = n - 1, 1, -1 do\n        d = d * xs[i] + xs[i - 1]\n    end\n   \
    \ return d\nend", "    local n = #xs\n    if n == 0 then return nil end\n    local\
    \ d = xs[n]\n    for i = n - 1, 1, -1 do\n        d = d * xs[i] + xs[i - 1]\n\
    \    end\n    return d\nend", "    local n = #xs\n    if n == 0 then return {}\
    \ end\n    local result = {}\n    for i = 1, n do\n        result[i] = xs[i]\n\
    \        if i > 1 then\n            result[i] = result[i] + result[i - 1] * xs[i\
    \ - 1]\n        end\n    end\n    return result\nend", "    local n = #xs\n  \
    \  if n == 0 then return [] end\n    local d = math.pow(xs[n], n - 1)\n    for\
    \ i = n - 1, 1, -1 do\n        d = d * xs[i] + math.pow(xs[i], i)\n    end\n \
    \   return d\nend", "    local n = #xs\n    if n == 0 then return [] end\n   \
    \ local d = math.pow(xs[n], n - 1)\n    return d * math.array(n - 1, '1')\nend",
  "    local n = #xs\n    if n == 0 then return [] end\n    local result = {}\n  \
    \  for i = 1, n do\n        result[i] = xs[i]\n        if i > 1 then result[i]\
    \ = result[i] + result[i - 1] * xs[i - 1]\n    end\n    return result\nend", " \
    \   local n = #xs\n    if n == 0 then return [] end\n    local d = math.pow(xs[n],\
    \ n - 1)\n    for i = n - 2, 1, -1 do\n        d = d * xs[i] + math.pow(xs[i],\
    \ i)\n    end\n    return d\nend", "    local n = #xs\n    if n == 0 then return\
    \ nil end\n    local d = math.pow(xs[n], n - 1)\n    for i = n - 1, 1, -1 do\n\
    \        d = d * xs[i] + math.pow(xs[i], i)\n    end\n    return d\nend", "  \
    \  local n = #xs\n    if n == 0 then return {} end\n    local result = {}\n  \
    \  for i = 1, n do\n        result[i] = xs[i]\n        if i > 1 then result[i]\
    \ = result[i] + result[i-1] * xs[i-1]\n    end\n    return result\nend", "   \
    \ local i, d = 1, 0\n    for i = 1, #xs, 2 do\n        d = d + xs[i] * i\n   \
    \ end\n    return d\nend", "    local result = {}\n    for i = 1, #xs, 2 do\n\
    \        result[i] = xs[i]\n        result[i + 1] = xs[i + 1] * i\n    end\n \
    \   return result\nend", "    local n = #xs\n    if n == 0 then return [] end\n\
    \    local result = {}\n    for i = 1, n do\n        result[i] = (i - 1) * xs[i]\n\
    \    end\n    return result\nend", "    local result = {}\n    for i = 1, #xs,\
    \ 2 do\n        result[i] = xs[i+1] - xs[i-1]\n    end\n    return result\nend",
  "    local n = #xs\n    if n == 0 then return [] end\n    return map(lambda x, y=1:\
    \ x*y, xs[n-1:0:-1])\nend", "    local n = #xs\n    if n == 0 then return {} end\n\
    \    local result = {}\n    for i = 1, n do\n        result[i] = xs[i]\n     \
    \   if i > 1 then\n            result[i] = result[i] + result[i - 1] * xs[i -\
    \ 1]\n        end\n    end\n    return result\nend", "    local i, d = 1, 0\n\
    \    for i = 1, #xs, 2 do\n        d = d + xs[i] * i\n    end\n    return d\n\
    end", "    local n = #xs\n    local result = {}\n    for i = 1, n do\n       \
    \ result[i] = 0\n        for j = 1, i - 1 do\n            result[i] = result[i]\
    \ + xs[j] * math.pow(xs[i], j)\n        end\n        result[i] = result[i] + xs[i]\n\
    \    end\n    return result\nend", "    local n = #xs\n    if n == 0 then return\
    \ {} end\n    local d = math.pow(xs[n], n - 1)\n    for i = n - 1, 1, -1 do\n\
    \        d = d * xs[i] + math.pow(xs[i], i)\n    end\n    return d\nend", "  \
    \  local n = #xs\n    if n == 0 then return [] end\n    local d = math.pow(xs[n],\
    \ n - 1)\n    for i = n - 1, 1, -1 do\n        d = d * xs[i]\n    end\n    return\
    \ d\nend", "    local n = #xs\n    if n == 0 then return [] end\n    local d =\
    \ xs[n]\n    for i = n - 1, 1, -1 do\n        d = d * xs[i] + xs[i - 1]\n    end\n\
    \    return d\nend", "    local result = {}\n    for i = 1, #xs, 2 do\n      \
    \  result[i] = xs[i]\n        result[i + 1] = xs[i + 1] * i\n    end\n    return\
    \ result\nend", "    local n = #xs\n    if n == 0 then return [] end\n    local\
    \ d = xs[n]\n    for i = n - 1, 1, -1 do\n        d = d * xs[i] + xs[i - 1]\n\
    \    end\n    return d\nend", "    local i, n = 1, #xs\n    local result = {}\n\
    \    for i = 1, n do\n        result[i] = xs[i]\n        if i > 1 then result[i]\
    \ = result[i] + result[i-1] * xs[i-1]\n    end\n    return result\nend", "   \
    \ local n = #xs\n    local result = {}\n    for i = 1, n do\n        result[i]\
    \ = 0\n        for j = 1, i - 1 do\n            result[i] = result[i] + xs[j]\
    \ * math.pow(xs[i], j)\n        end\n        result[i] = result[i] + xs[i]\n \
    \   end\n    return result\nend", "    local n = #xs\n    if n == 0 then return\
    \ {} end\n    local d = {}\n    for i = 1, n do\n        d[i] = (n - i + 1) *\
    \ xs[i]\n    end\n    return d\nend", "    local n = #xs\n    if n == 0 then return\
    \ [] end\n    local d = math.pow(xs[n-1], n-1)\n    return [d]\nend", "    local\
    \ n = #xs\n    local d = vector(n)\n    for i = 1, n - 1 do\n        d[i] = (xs[i\
    \ + 1] - xs[i]) / (xs[i] * xs[i])\n    end\n    return d\nend", "    local n =\
    \ #xs\n    local d = math.zeros(n, 1)\n    for i = 1, n - 1 do\n        d[i] =\
    \ (xs[i + 1] - xs[i]) / math.pow(xs[i], 2)\n    end\n    return d\nend", "   \
    \ local n = #xs\n    local result = {}\n    for i = 1, n do\n        result[i]\
    \ = (n - i + 1) * xs[i]\n    end\n    return result\nend", "    local n = #xs\n\
    \    if n < 2 then return xs\n    return [0] + xs[1] * n - xs[n] * n + derivative(xs[2:n])\n\
    end", "    local n = #xs\n    if n == 0 then return {} end\n    local d = math.pow(xs[n],\
    \ n - 1)\n    for i = n - 1, 1, -1 do\n        d = d * xs[i] + math.pow(xs[i],\
    \ i)\n    end\n    return d\nend", "    local i, d = 1, 0\n    for i = 1, #xs,\
    \ 1 do\n        d = d + xs[i] * i\n    end\n    return d\nend", "    local n =\
    \ #xs\n    if n == 0 then return [] end\n    return map(function(x) return x *\
    \ n - 1 end, xs)\nend", "    local i, d = 1, 0\n    for i = 1, #xs, 2 do\n   \
    \     d = d + xs[i] * i\n    end\n    return d\nend", "    local n = #xs\n   \
    \ if n == 0 then return [] end\n    local d = math.pow(xs[n], n - 1)\n    for\
    \ i = n - 1, 1, -1 do\n        d = d * xs[i] + math.pow(xs[i], n - 1)\n    end\n\
    \    return d\nend", "    local n = #xs\n    if n == 0 then return [] end\n  \
    \  local d = math.pow(xs[n], n-1)\n    for i = n-1, 1, -1 do\n        d = d *\
    \ xs[i]\n    end\n    return d\nend", "    local result = {}\n    for i = 1, #xs,\
    \ 2 do\n        result[i] = xs[i+1] - xs[i-1]\n    end\n    return result\nend",
  "    local n = #xs\n    if n == 0 then return [] end\n    local d = xs[n]\n    for\
    \ i = n - 1, 1, -1 do\n        d = d * xs[i] + xs[i - 1]\n    end\n    return\
    \ d\nend", "    local n = #xs\n    if n == 0 then return nil end\n    local d\
    \ = xs[n]\n    for i = n - 1, 1, -1 do\n        d = d * xs[i] + xs[i - 1]\n  \
    \  end\n    return d\nend", "    local n = #xs\n    if n == 0 then return [] end\n\
    \    local d = xs[n]\n    for i = n - 1, 1, -1 do\n        d = d * xs[i] + xs[i\
    \ - 1]\n    end\n    return d\nend", "    local n = #xs\n    if n == 0 then return\
    \ [] end\n    return [0] + [n * xs[n]] .. (n - 1)\nend", "    local n = #xs\n\
    \    if n == 0 then return nil end\n    local d = xs[n]\n    for i = n - 1, 1,\
    \ -1 do\n        d = d * xs[i] + xs[i - 1]\n    end\n    return d\nend", "   \
    \ local n = #xs\n    if n == 0 then return [] end\n    local result = {}\n   \
    \ for i = 1, n do\n        result[i] = xs[i]\n        if i > 1 then\n        \
    \    result[i] = result[i] * (i - 1)\n        end\n    end\n    return result\n\
    end", "    local n = #xs\n    local result = {}\n    for i = 1, n do\n       \
    \ result[i] = 0\n        for j = 1, i - 1 do\n            result[i] = result[i]\
    \ + xs[j] * math.pow(xs[i], j)\n        end\n    end\n    return result\nend",
  "    local n = #xs\n    if n == 0 then return nil end\n    local d = xs[n]\n   \
    \ for i = n - 1, 1, -1 do\n        d = d * xs[i] + xs[i - 1]\n    end\n    return\
    \ d\nend", "    local n = #xs\n    local result = {}\n    for i = 1, n do\n  \
    \      result[i] = (n - i) * xs[i]\n    end\n    return result\nend", "    local\
    \ result = {}\n    for i = 1, #xs, 2 do\n        result[i] = xs[i+1] - xs[i-1]\n\
    \    end\n    return result\nend", "    local i, d = 1, 0\n    for i = 1, #xs,\
    \ 2 do\n        d = d + xs[i] * i\n    end\n    return d\nend", "    local n =\
    \ #xs\n    if n == 0 then return nil end\n    local d = xs[n]\n    for i = n -\
    \ 1, 1, -1 do\n        d = d * xs[i] + xs[i - 1]\n    end\n    return d\nend",
  "    local n = #xs\n    if n == 0 then return [] end\n    local d = xs[n]\n    for\
    \ i = n - 1, 1, -1 do\n        d = d * xs[i] + xs[i - 1]\n    end\n    return\
    \ d\nend", "    local n = #xs\n    local result = {}\n    for i = 1, n do\n  \
    \      result[i] = 0\n        for j = 1, i - 1 do\n            result[i] = result[i]\
    \ + xs[j] * math.pow(xs[i], j)\n        end\n        result[i] = result[i] + xs[i]\n\
    \    end\n    return result\nend", "    local n = #xs\n    if n == 0 then return\
    \ [] end\n    local d = xs[n]\n    for i = n - 1, 1, -1 do\n        d = d * xs[i]\
    \ + xs[i - 1]\n    end\n    return d\nend", "    local n = #xs\n    if n == 0\
    \ then return nil end\n    if n == 1 then return xs[1] end\n    return xs[n] *\
    \ math.pow(xs[n-1], n-1)\nend", "    local n = #xs\n    local d = vector.new(n)\n\
    \    for i = 1, n - 1 do\n        d[i] = (xs[i + 1] - xs[i]) / (xs[i] * (i + 1))\n\
    \    end\n    return d\nend", "    local n = #xs\n    if n == 0 then return {}\
    \ end\n    local d = {}\n    for i = 1, n do\n        d[i] = (n - i) * xs[i]\n\
    \    end\n    return d\nend", "    local n = #xs\n    if n == 0 then return []\
    \ end\n    local d = math.pow(xs[n-1], n-1)\n    return d * math.sub(xs, n-1)\n\
    end", "    local n = #xs\n    if n == 0 then return [] end\n    local d = math.pow(xs[n],\
    \ n - 1)\n    for i = n - 2, 1, -1 do\n        d = d * xs[i] + math.pow(xs[i],\
    \ i)\n    end\n    return d\nend", "    local i, n = 1, #xs\n    local d = [0]\n\
    \    for i = 1, n do\n        d[i] = d[i - 1] + xs[i]\n    end\n    return d\n\
    end", "    local n = #xs\n    if n == 0 then return [] end\n    return map(function(x)\
    \ return x * n - 1 end, xs)\nend", "    local n = #xs\n    local d = zeros(n,\
    \ 1)\n    for i = 1, n - 1 do\n        d[i] = (xs[i + 1] - xs[i]) / (xs[i] * (i\
    \ + 1))\n    end\n    return d\nend", "    local n = #xs\n    if n == 0 then return\
    \ [] end\n    local result = {}\n    for i = 1, n do\n        result[i] = xs[i]\n\
    \        result[i] = result[i] * (i + 1)\n    end\n    return result\nend", " \
    \   local n = #xs\n    if n == 0 then return [] end\n    local result = [0]\n\
    \    for i = 1, n - 1 do\n        result = result .. (xs[i + 1] - xs[i]) * (i\
    \ + 1)\n    end\n    return result\nend", "    local n = #xs\n    if n == 0 then\
    \ return {} end\n    local result = {}\n    for i = 1, n do\n        result[i]\
    \ = xs[i]\n        if i > 1 then result[i] = result[i] + result[i - 1] * xs[i\
    \ - 1]\n    end\n    return result\nend", "    local i, d = 1, 0\n    for i =\
    \ 1, #xs, 2 do\n        d = d + xs[i] * i\n    end\n    return d\nend", "    local\
    \ result = {}\n    for i = 1, #xs, 1 do\n        result[i] = xs[i]\n        result[i\
    \ + 1] = result[i] * xs[i + 1]\n    end\n    return result\nend", "    local result\
    \ = {}\n    for i = 1, #xs, 2 do\n        result[i] = xs[i]\n        result[i\
    \ + 1] = xs[i + 1] * i\n    end\n    return result\nend", "    local n = #xs\n\
    \    if n == 0 then return [] end\n    local d = math.pow(xs[n-1], n-1)\n    return\
    \ n > 1 and d * xs[n-2] + d * math.pow(xs[n-1], n-2) or d\nend", "    local n\
    \ = #xs\n    if n == 0 then return [] end\n    return map(lambda x, y: x + y,\
    \ xs[n - 1], map(lambda x, y: x * y, xs[0:n - 1]))\nend", "    local n = #xs\n\
    \    if n == 0 then return {} end\n    local d = {}\n    for i = 1, n do\n   \
    \     d[i] = xs[i]\n        if i > 1 then d[i] = d[i] + d[i - 1] * xs[i - 1] end\n\
    \    end\n    return d\nend", "    local i, j, n = #xs, 1, 1\n    while n > 1\
    \ do\n        i = i + 1\n        j = j + 1\n        n = n - 1\n    end\n    return\
    \ if j > 1 then xs[i] * j else 0 end\nend", "    local n = #xs\n    if n == 0\
    \ then return {} end\n    local d = {}\n    for i = 1, n do\n        d[i] = (n\
    \ - i + 1) * xs[i]\n    end\n    return d\nend", "    local n = #xs\n    if n\
    \ == 0 then return [] end\n    local d = math.pow(xs[n], n - 1)\n    return n\
    \ > 1 and [d] or [d]\nend", "    local n = #xs\n    local result = {}\n    for\
    \ i = 1, n do\n        result[i] = (n - i + 1) * xs[i]\n    end\n    return result\n\
    end", "    local n = #xs\n    if n == 0 then return {} end\n    local result =\
    \ {}\n    for i = 1, n do\n        result[i] = (n - i + 1) * xs[i]\n    end\n\
    \    return result\nend", "    local n = #xs\n    local result = {}\n    for i\
    \ = 1, n do\n        result[i] = 0\n        for j = 1, i - 1 do\n            result[i]\
    \ = result[i] + xs[j] * xs[i - j]\n        end\n        result[i] = result[i]\
    \ + xs[i]\n    end\n    return result\nend", "    local result = {}\n    for i\
    \ = 1, #xs, 2 do\n        result[i] = xs[i]\n        result[i + 1] = xs[i + 1]\
    \ * i\n    end\n    return result\nend", "    local n = #xs\n    local d = math.zeros(n,\
    \ 1)\n    for i = 1, n do\n        d[i] = (n - i) * xs[i]\n    end\n    return\
    \ d\nend", "    local n = #xs\n    if n == 0 then return [] end\n    return map(function(x)\
    \ return x * n - 1 end, xs)\nend", "    local n = #xs\n    if n < 2 then return\
    \ xs\n    return [0] + xs[1:n]\nend", "    local result = {}\n    for i = 1, #xs,\
    \ 2 do\n        result[i] = xs[i+1] - xs[i-1]\n    end\n    return result\nend",
  "    local n = #xs\n    if n == 0 then return {} end\n    local result = {}\n  \
    \  for i = 1, n do\n        result[i] = xs[i]\n        result[i + 1] = xs[i +\
    \ 1] * i\n    end\n    return result\nend", "    local result = {}\n    for i\
    \ = 1, #xs, 2 do\n        result[i] = xs[i+1] - xs[i-1]\n    end\n    return result\n\
    end", "    local n = #xs\n    local result = {}\n    for i = 1, n do\n       \
    \ result[i] = 0\n    end\n    for i = 1, n do\n        result[i] = result[i] +\
    \ xs[i]\n        result[i + 1] = result[i + 1] + xs[i] * i\n    end\n    return\
    \ result\nend", "    local i, n = 1, #xs\n    local result = {}\n    for i=1,n\
    \ do\n        result[i] = n * xs[i]\n        n = n - 1\n    end\n    return result\n\
    end", "    local n = #xs\n    if n == 0 then return [] end\n    local result =\
    \ {}\n    for i = 1, n do\n        result[i] = (n - i + 1) * xs[i]\n    end\n\
    \    return result\nend", "    local n = #xs\n    if n == 0 then return [] end\n\
    \    local d = math.pow(xs[n], n - 1)\n    for i = n - 2, 1, -1 do\n        d\
    \ = d * xs[i] + math.pow(xs[i], i)\n    end\n    return d\nend", "    local i,\
    \ d = 1, 0\n    for i = 1, #xs, 2 do\n        d = d + xs[i] * i\n    end\n   \
    \ return d\nend", "    local n = #xs\n    if n < 2 then return xs end\n    return\
    \ xs[n - 1] .. (n - 1) .. xs[1]\nend", "    local i, d = 1, 0\n    for i = 1,\
    \ #xs, 2 do\n        d = d + xs[i] * i\n    end\n    return d\nend", "    local\
    \ n = #xs\n    if n == 0 then return nil end\n    local result = {}\n    for i\
    \ = 1, n do\n        result[i] = xs[i]\n        result[i] = result[i] * (i + 1)\n\
    \    end\n    return result\nend", "    local n = #xs\n    if n == 0 then return\
    \ [] end\n    local d = xs[n]\n    for i = n - 1, 1, -1 do\n        d = d * xs[i]\
    \ + xs[i - 1]\n    end\n    return d\nend", "    local n = #xs\n    local result\
    \ = {}\n    for i = 1, n do\n        result[i] = 0\n        for j = 1, i - 1 do\n\
    \            result[i] = result[i] + xs[j] * xs[i - j]\n        end\n        result[i]\
    \ = result[i] + xs[i]\n    end\n    return result\nend", "    local n = #xs\n\
    \    local d = vector.new(n)\n    for i = 1, n - 1 do\n        d[i] = (xs[i +\
    \ 1] - xs[i]) / (xs[i] * xs[i])\n    end\n    return d\nend", "    local n = #xs\n\
    \    local d = zeros(n, 1)\n    for i = 1, n - 1 do\n        d[i] = (xs[i + 1]\
    \ - xs[i]) / (xs[i] - xs[i - 1])\n    end\n    return d\nend", "    local n =\
    \ #xs\n    if n == 0 then return [] end\n    local d = math.pow(xs[n], n-1)\n\
    \    for i = n-1, 1, -1 do\n        d = d * xs[i]\n    end\n    return d\nend",
  "    local n = #xs\n    if n == 0 then return nil end\n    local d = xs[n]\n   \
    \ for i = n - 1, 1, -1 do\n        d = d * xs[i] + xs[i - 1]\n    end\n    return\
    \ d\nend", "    local n = #xs\n    if n == 0 then return nil end\n    local d\
    \ = math.pow(xs[n], n - 1)\n    for i = n - 1, 1, -1 do\n        d = d * xs[i]\
    \ + math.pow(xs[i], i)\n    end\n    return d\nend", "    local n = #xs\n    if\
    \ n == 0 then return [] end\n    local result = {}\n    for i = 1, n do\n    \
    \    result[i] = xs[i]\n        if i > 1 then result[i] = result[i] + result[i\
    \ - 1] * xs[i - 1] end\n    end\n    return result\nend", "    local n = #xs\n\
    \    local d = vector(n)\n    for i = 1, n do\n        d[i] = (i - 1) * xs[i]\n\
    \    end\n    return d\nend", "    local n = #xs\n    if n < 2 then return xs\n\
    \    return xs[n-1] + n * xs[n-2]\nend", "    local n = #xs\n    if n == 0 then\
    \ return [] end\n    return map(lambda x, y=1: x * y, xs[n-1:1:-1])\nend", " \
    \   local n = #xs\n    if n == 0 then return {} end\n    local d = {}\n    for\
    \ i = 1, n do\n        d[i] = (n - i + 1) * xs[i]\n    end\n    return d\nend",
  "    local n = #xs\n    if n == 0 then return {} end\n    local result = {}\n  \
    \  for i = 1, n do\n        result[i] = xs[i]\n        if i > 1 then\n       \
    \     result[i] = result[i] + result[i - 1] * xs[i - 1]\n        end\n    end\n\
    \    return result\nend", "    local n = #xs\n    if n == 0 then return [] end\n\
    \    local d = xs[n]\n    for i = n - 1, 1, -1 do\n        d = d * xs[i] + xs[i\
    \ - 1]\n    end\n    return d\nend", "    local result = {}\n    for i = 1, #xs,\
    \ 1 do\n        result[i] = xs[i]\n        result[i + 1] = xs[i + 1] * i\n   \
    \ end\n    return result\nend", "    local result = {}\n    for i = 1, #xs, 2\
    \ do\n        result[i] = xs[i+1] - xs[i-1]\n    end\n    return result\nend",
  "    local n = #xs\n    if n == 0 then return [] end\n    local result = [0]\n \
    \   for i = 1, n - 1 do\n        result = result .. (xs[i + 1] - xs[i])\n    end\n\
    \    return result\nend", "    local n = #xs\n    local d = zeros(n - 1, 1)\n\
    \    for i = 1, n - 1 do\n        d[i] = (xs[i + 1] - xs[i]) / (xs[i] * (i + 1))\n\
    \    end\n    return d\nend", "    local result = {}\n    for i = 1, #xs, 2 do\n\
    \        result[i] = xs[i + 1] - xs[i - 1]\n    end\n    return result\nend",
  "    local n = #xs\n    if n == 0 then return nil end\n    local result = {}\n \
    \   for i = 1, n do\n        result[i] = xs[i]\n        result[i + 1] = xs[i +\
    \ 1] * i\n    end\n    return result\nend", "    local n = #xs\n    if n < 2 then\
    \ return xs end\n    return xs[n - 1] .. (n - 1) .. xs[1]\nend", "    local n\
    \ = #xs\n    if n == 0 then return [] end\n    local d = xs[n]\n    for i = n\
    \ - 1, 1, -1 do\n        d = d * xs[i] + xs[i - 1]\n    end\n    return d\nend",
  "    local n = #xs\n    if n == 0 then return nil end\n    local d = xs[n]\n   \
    \ for i = n - 1, 1, -1 do\n        d = d * xs[i] + xs[i - 1]\n    end\n    return\
    \ d\nend", "    local n = #xs\n    if n < 2 then return xs end\n    return xs[n\
    \ - 1] .. (n - 1) .. xs[1]\nend", "    local n = #xs\n    if n == 0 then return\
    \ [] end\n    local d = math.pow(xs[n], n - 1)\n    for i = n - 1, 1, -1 do\n\
    \        d = d * xs[i]\n    end\n    return d\nend", "    local n = #xs\n    if\
    \ n == 0 then return {} end\n    local d = math.pow(xs[n], n - 1)\n    for i =\
    \ n - 1, 1, -1 do\n        d = d * xs[i] + math.pow(xs[i], n - i)\n    end\n \
    \   return d\nend", "    local n = #xs\n    if n == 0 then return nil end\n  \
    \  local d = xs[n]\n    for i = n - 1, 1, -1 do\n        d = d * xs[i] + xs[i\
    \ - 1]\n    end\n    return d\nend", "    local n = #xs\n    if n == 0 then return\
    \ [] end\n    local d = math.pow(xs[n], n - 1)\n    for i = n - 1, 1, -1 do\n\
    \        d = d * xs[i]\n    end\n    return d\nend", "    local n = #xs\n    if\
    \ n == 0 then return [] end\n    local result = {}\n    for i = 1, n do\n    \
    \    result[i] = (n - i + 1) * xs[i]\n    end\n    return result\nend", "    local\
    \ n = #xs\n    if n == 0 then return [] end\n    local result = [0]\n    for i\
    \ = 1, n - 1 do\n        result = result .. (xs[i + 1] - xs[i]) * math.pow(xs[i],\
    \ i)\n    end\n    return result\nend", "    local n = #xs\n    if n == 0 then\
    \ return [] end\n    local result = [0]\n    for i = 1, n-1 do\n        result\
    \ = result .. (xs[i+1] - xs[i]) * (i+1)\n    end\n    return result\nend", " \
    \   local n = #xs\n    local d = zeros(n - 1, 1)\n    for i = 1, n - 1 do\n  \
    \      d[i] = (xs[i + 1] - xs[i]) / (xs[i] * xs[i + 1] - xs[i + 2] * xs[i + 1]\
    \ + xs[i + 2] * xs[i])\n    end\n    return d\nend", "    local n = #xs\n    if\
    \ n < 2 then return xs\n    return xs[n - 1] + n * xs[n - 2]\nend", "    local\
    \ n = #xs\n    if n == 0 then return [] end\n    local d = xs[n]\n    for i =\
    \ n - 1, 1, -1 do\n        d = d * xs[i] + xs[i - 1]\n    end\n    return d\n\
    end", "    local n = #xs\n    if n == 0 then return [] end\n    local result =\
    \ {}\n    for i = 1, n do\n        result[i] = (n - i + 1) * xs[i]\n    end\n\
    \    return result\nend", "    local n = #xs\n    if n == 0 then return [] end\n\
    \    local d = xs[n]\n    for i = n - 1, 1, -1 do\n        d = d * xs[i] + xs[i\
    \ - 1]\n    end\n    return d\nend", "    local result = {}\n    for i = 1, #xs,\
    \ 2 do\n        result[i] = xs[i+1] - xs[i-1]\n    end\n    return result\nend",
  "    local i, n = 1, #xs\n    local d = vector.new(n)\n    for i = 1, n do\n   \
    \     d[i] = (i - 1) * xs[i]\n    end\n    return d\nend", "    local n = #xs\n\
    \    if n == 0 then return {} end\n    local result = {}\n    for i = 1, n do\n\
    \        result[i] = xs[i]\n        if i > 1 then\n            result[i] = result[i]\
    \ * (i - 1)\n        end\n    end\n    return result\nend", "    local n = #xs\n\
    \    if n < 2 then return xs\n    return [0] + map(lambda i, xs = xs: xs[i+1]\
    \ * i, n-1)\nend", "    local n = #xs\n    local d = vector(n - 1)\n    for i\
    \ = 1, n - 1 do\n        d[i] = (n - i) * xs[i + 1] - (i - 1) * xs[i]\n    end\n\
    \    return d\nend", "    local n = #xs\n    local d = zeros(n - 1, 1)\n    for\
    \ i = 1, n - 1 do\n        d[i] = (xs[i + 1] - xs[i]) / (xs[i] * (i + 1))\n  \
    \  end\n    return d\nend", "    local n = #xs\n    if n == 0 then return nil\
    \ end\n    local result = {}\n    for i = 1, n do\n        result[i] = xs[i]\n\
    \        if i > 1 then result[i] = result[i] + result[i - 1] * xs[i - 1] end\n\
    \    end\n    return result\nend", "    local n = #xs\n    if n == 0 then return\
    \ [] end\n    local d = xs[n]\n    for i = n - 1, 1, -1 do\n        d = d * xs[i]\
    \ + xs[i - 1]\n    end\n    return d\nend", "    local n = #xs\n    local d =\
    \ vector.new(n)\n    for i = 1, n do\n        d[i] = (i-1) * xs[i]\n    end\n\
    \    return d\nend", "    local result = {}\n    for i = 1, #xs, 2 do\n      \
    \  result[i] = xs[i+1] - xs[i-1]\n    end\n    return result\nend", "    local\
    \ n = #xs\n    if n == 0 then return [] end\n    local d = math.zeros(n, 1)\n\
    \    for i = 1, n do\n        d[i] = (i - 1) * xs[i]\n    end\n    return d\n\
    end", "    local n = #xs\n    local result = {}\n    for i = 1, n do\n       \
    \ result[i] = 0\n    end\n    for i = 1, n do\n        result[i] = result[i] +\
    \ xs[i]\n    end\n    for i = 2, n do\n        result[i] = result[i] + xs[i] *\
    \ xs[i - 1]\n    end\n    return result\nend", "    local n = #xs\n    if n ==\
    \ 0 then return [] end\n    local d = xs[n]\n    for i = n - 1, 1, -1 do\n   \
    \     d = d * xs[i] + xs[i - 1]\n    end\n    return d\nend", "    local n = #xs\n\
    \    if n == 0 then return nil end\n    local result = {}\n    for i = 1, n do\n\
    \        result[i] = xs[i]\n        if i > 1 then result[i] = result[i] + result[i\
    \ - 1] * xs[i - 1] end\n    end\n    return result\nend", "    local n = #xs\n\
    \    local result = {}\n    for i = 1, n do\n        result[i] = 0\n        for\
    \ j = 1, i - 1 do\n            result[i] = result[i] + xs[j] * xs[i - j]\n   \
    \     end\n        result[i] = result[i] + xs[i]\n    end\n    return result\n\
    end", "    local n = #xs\n    if n == 0 then return nil end\n    local d = xs[n]\n\
    \    for i = n - 1, 1, -1 do\n        d = d * xs[i] + xs[i - 1]\n    end\n   \
    \ return d\nend", "    local i, j, k, n = #xs, 1, 1, #xs\n    local d = vector.new()\n\
    \    for i = 1, n do\n        d[i] = 0\n        for j = i - 1, 1, -1 do\n    \
    \        d[i] = d[i] + xs[j] * k\n            k = k * i - j\n        end\n   \
    \ end\n    return d\nend", "    local n = #xs\n    local result = {}\n    for\
    \ i = 1, n do\n        result[i] = 0\n        for j = 1, i - 1 do\n          \
    \  result[i] = result[i] + xs[j] * math.pow(xs[i], j)\n        end\n    end\n\
    \    return result\nend", "    local n = #xs\n    if n == 0 then return [] end\n\
    \    local d = xs[n]\n    for i = n - 1, 1, -1 do\n        d = d * xs[i] + xs[i\
    \ - 1]\n    end\n    return d\nend", "    local n = #xs\n    if n == 0 then return\
    \ [] end\n    local d = xs[n]\n    for i = n - 1, 1, -1 do\n        d = d * xs[i]\
    \ + xs[i - 1]\n    end\n    return d\nend", "    local n = #xs\n    if n == 0\
    \ then return [] end\n    local d = xs[n]\n    for i = n - 1, 1, -1 do\n     \
    \   d = d * xs[i] + xs[i - 1]\n    end\n    return d\nend", "    local n = #xs\n\
    \    if n == 0 then return [] end\n    return map(function(x) return x * n - 1\
    \ end, xs)\nend", "    local n = #xs\n    if n < 2 then return nil end\n    local\
    \ result = {}\n    for i = 1, n - 1 do\n        result[i] = (n - i) * xs[i + 1]\
    \ - (i - 1) * xs[i]\n    end\n    return result\nend", "    local n = #xs\n  \
    \  if n < 2 then return xs end\n    local d = xs[n]\n    for i = n - 1, 1, -1\
    \ do\n        d = d * xs[i] + xs[i - 1]\n    end\n    return d\nend", "    local\
    \ n = #xs\n    local result = {}\n    for i = 1, n do\n        result[i] = 0\n\
    \        for j = 1, i - 1 do\n            result[i] = result[i] + xs[j] * xs[i\
    \ - j]\n        end\n        result[i] = result[i] + xs[i]\n    end\n    return\
    \ result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
