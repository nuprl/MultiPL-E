{
  "language": "lua",
  "name": "HumanEval_61_correct_bracketing",
  "results": [
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local function is_open_bracket(c)\n        return c == \"(\" or c == \"[\" or c == \"{\"\n    end\n    local function is_close_bracket(c)\n        return c == \")\" or c == \"]\" or c == \"}\"\n    end\n    local function is_balanced(brackets)\n        local i = 1\n        while i <= #brackets do\n            if not is_open_bracket(brackets[i]) and not is_close_bracket(brackets[i]) then\n                return false\n            end\n            i = i + 1\n        end\n        return true\n    end\n    return is_balanced(brackets)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd2dmma21.lua:34: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpd2dmma21.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n    local bracket_count = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == '(' and brackets[i+1] == ')' then\n            bracket_count = bracket_count + 1\n        end\n    end\n    if bracket_count == 0 then return true end\n    return bracket_count == #brackets - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1jj20jdm.lua:30: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1jj20jdm.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = {'(', '{', '['}\n    local close_brackets = {')', '}', ']'}\n    local result = true\n    for _, v in ipairs(brackets) do\n        if v not in open_brackets then\n            result = false\n            break\n    end\n    for _, v in ipairs(brackets) do\n        if v not in close_brackets then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpqhnpcg83.lua:16: 'then' expected near 'not'\n",
      "stdout": "",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = 0\n    local close_brackets = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == '(' then\n            open_brackets = open_brackets + 1\n        elseif brackets[i] == ')' then\n            close_brackets = close_brackets + 1\n        end\n    end\n    return open_brackets == close_brackets\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd1api7v5.lua:31: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpd1api7v5.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" and brackets[i] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp658rd3gl.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp658rd3gl.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local function is_open_bracket(c)\n        return c == \"(\" or c == \"[\" or c == \"{\"\n    end\n    local function is_close_bracket(c)\n        return c == \")\" or c == \"]\" or c == \"}\"\n    end\n    local function is_balanced(brackets)\n        local i = 1\n        while i <= #brackets do\n            if not is_open_bracket(brackets[i]) and not is_close_bracket(brackets[i]) then\n                return false\n            end\n            i = i + 1\n        end\n        return true\n    end\n    return is_balanced(brackets)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd2dmma21.lua:34: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpd2dmma21.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" and brackets[i] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp658rd3gl.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp658rd3gl.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n    local open_brackets = 0\n    local close_brackets = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == \"(\" then open_brackets = open_brackets + 1 end\n        if brackets[i] == \")\" then close_brackets = close_brackets + 1 end\n    end\n    if open_brackets == close_brackets then return true end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt__9vu15.lua:30: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpt__9vu15.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local function is_open_bracket(c)\n        return c == \"(\" or c == \"{\" or c == \"[\"\n    end\n    local function is_close_bracket(c)\n        return c == \")\" or c == \"}\" or c == \"]\"\n    end\n    local function is_balanced(brackets)\n        local function is_balanced_bracket(c)\n            return is_open_bracket(c) and is_close_bracket(bracketsnlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpfoai_nrj.lua:21: ']' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n    local bracket_count = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == \"(\" and brackets[i+1] == \")\" then\n            bracket_count = bracket_count + 1\n        end\n    end\n    if bracket_count == 0 then return true end\n    return bracket_count == #brackets\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_p2l2zy.lua:30: expected: false, actual: true\nstack traceback:\n\t/tmp/tmph_p2l2zy.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local i = 1\n    while i <= #brackets do\n        if brackets[i] ~= \"(\" then\n            return true\n        end\n        i = i + 1\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyk_2fxgh.lua:29: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpyk_2fxgh.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n    local bracket_count = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == \"(\" and brackets[i+1] == \")\" then\n            bracket_count = bracket_count + 1\n        end\n    end\n    if bracket_count == 0 then return true end\n    return bracket_count == #brackets - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpu9938l.lua:30: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfpu9938l.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" and brackets[i] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp658rd3gl.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp658rd3gl.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n    local bracket_count = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == \"(\" and brackets[i+1] == \")\" then\n            bracket_count = bracket_count + 1\n        end\n    end\n    if bracket_count == 0 then return true end\n    return bracket_count == #brackets - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpu9938l.lua:30: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfpu9938l.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local function is_open_bracket(char)\n        return char == \"(\" or char == \"{\" or char == \"[\" or char == \"(\"\n    end\n    local function is_close_bracket(char)\n        return char == \")\" or char == \"}\" or char == \"]\" or char == \")\"\n    end\n    local function is_balanced(brackets)\n        local i = 1\n        while i <= #brackets do\n            if not is_open_bracket(brackets[i]) and not is_close_bracket(brackets[i]) then\n                return false\n            end\n            i = i + 1\n        end\n        return true\n    end\n    return is_balanced(brackets)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0tfbgdt.lua:34: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpl0tfbgdt.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n    local bracket_count = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == \"(\" and brackets[i+1] == \")\" then\n            bracket_count = bracket_count + 1\n        end\n    end\n    if bracket_count == 0 then return true end\n    return bracket_count == #brackets - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpu9938l.lua:30: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfpu9938l.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n    local open = 1\n    local close = 1\n    for i = 1, #brackets, 2 do\n        if brackets[i] == \"(\" then open = open + 1 end\n        if brackets[i] == \")\" then close = close + 1 end\n        if open < close then return false end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnidifchi.lua:30: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpnidifchi.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local function is_open_bracket(c)\n        return c == \"(\" or c == \"[\" or c == \"{\"\n    end\n    local function is_close_bracket(c)\n        return c == \")\" or c == \"]\" or c == \"}\"\n    end\n    local function is_balanced(brackets)\n        local function is_balanced_bracket(c)\n            return is_open_bracket(c) and is_close_bracket(brackets[index+1])\n        end\n        for i=1,#brackets,2 do\n            if not is_balanced_bracket(brackets[i]) or not is_balanced_bracket(brackets[i+1]) then\n                return false\n            end\n        end\n        return true\n    end\n    return is_balanced(brackets)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz4ufy21g.lua:35: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpz4ufy21g.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n    local open_brackets = 0\n    local close_brackets = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == \"(\" then open_brackets = open_brackets + 1 end\n        if brackets[i] == \")\" then close_brackets = close_brackets + 1 end\n    end\n    if open_brackets == close_brackets then return true end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt__9vu15.lua:30: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpt__9vu15.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local function is_open(index)\n        return brackets[index] == \"(\"\n    end\n    local function is_close(index)\n        return brackets[index] == \")\"\n    end\n    local function is_balanced(index)\n        return is_open(index) == is_close(index - 1)\n    end\n    for i = 1, #brackets, 2 do\n        if not is_balanced(i) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ytku9im.lua:36: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1ytku9im.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local function is_open_bracket(c)\n        return c == \"(\" or c == \"{\" or c == \"[\"\n    end\n    local function is_close_bracket(c)\n        return c == \")\" or c == \"}\" or c == \"]\"\n    end\n    local function is_balanced(brackets)\n        local function is_balanced_bracket(bracket)\n            return bracket == \"(\" and is_close_bracket(brackets[1])\n        end\n        local function is_balanced_brackets(brackets)\n            return is_balanced_bracket(brackets[1]) and is_balanced_bracket(brackets[2])\n        end\n        return is_balanced_brackets(brackets)\n    end\n    local function is_balanced_brackets(brackets)\n        local function is_balanced_bracket(bracket)\n            return bracket == \")\" and is_open_bracket(brackets[1])\n        end\n        local function is_balanced_brackets(brackets)\n            return is_balanced_bracket(brackets[1]) and is_balanced_bracket(brackets[2])\n        end\n        return is_balanced_brackets(brackets)\n    end\n    return is_balanced(brackets)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpid6yseoi.lua:42: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpid6yseoi.lua:42: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = {'(', '{', '['}\n    local close_brackets = {')', '}', ']'}\n    local result = true\n    for _, c in ipairs(brackets) do\n        if not (c in open_brackets) or not (open_brackets[c] == close_brackets[c]) then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmp6gx7z55u.lua:16: ')' expected near 'in'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" and brackets[i] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp658rd3gl.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp658rd3gl.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n    local bracket_count = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == \"(\" and brackets[i+1] == \")\" then\n            bracket_count = bracket_count + 1\n        end\n    end\n    if bracket_count == 0 then return true end\n    return bracket_count == #brackets - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpu9938l.lua:30: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfpu9938l.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n    local bracket_count = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == \"(\" and brackets[i+1] == \")\" then\n            bracket_count = bracket_count + 1\n        end\n    end\n    if bracket_count == 0 then return true end\n    return bracket_count == #brackets - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpu9938l.lua:30: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfpu9938l.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n    local open_brackets = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == \"(\" then\n            open_brackets = open_brackets + 1\n        elseif brackets[i] == \")\" then\n            open_brackets = open_brackets - 1\n        end\n    end\n    return open_brackets == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7zllmfqc.lua:31: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7zllmfqc.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n    local bracket_count = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == \"(\" and brackets[i+1] == \")\" then\n            bracket_count = bracket_count + 1\n        end\n    end\n    if bracket_count == 0 then return true end\n    return bracket_count == #brackets - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpu9938l.lua:30: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfpu9938l.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n    local bracket_count = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == \"(\" and brackets[i+1] == \")\" then\n            bracket_count = bracket_count + 1\n        end\n    end\n    if bracket_count == 0 then return true end\n    return bracket_count == #brackets - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpu9938l.lua:30: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfpu9938l.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" and brackets[i] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp658rd3gl.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp658rd3gl.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" and brackets[i] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp658rd3gl.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp658rd3gl.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local function is_open_bracket(c)\n        return c == \"(\" or c == \"[\" or c == \"{\"\n    end\n    local function is_close_bracket(c)\n        return c == \")\" or c == \"]\" or c == \"}\"\n    end\n    local function is_balanced(brackets)\n        local i = 1\n        while i <= #brackets do\n            if not is_open_bracket(brackets[i]) and not is_close_bracket(brackets[i]) then\n                return false\n            end\n            i = i + 1\n        end\n        return true\n    end\n    return is_balanced(brackets)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd2dmma21.lua:34: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpd2dmma21.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n    local bracket_count = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == \"(\" and brackets[i+1] == \")\" then\n            bracket_count = bracket_count + 1\n        end\n    end\n    if bracket_count == 0 then return true end\n    return bracket_count == #brackets\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_p2l2zy.lua:30: expected: false, actual: true\nstack traceback:\n\t/tmp/tmph_p2l2zy.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n    local bracket_count = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == \"(\" and brackets[i+1] == \")\" then\n            bracket_count = bracket_count + 1\n        end\n    end\n    if bracket_count == 0 then return true end\n    return bracket_count == #brackets - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpu9938l.lua:30: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfpu9938l.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n    local bracket_count = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == \"(\" and brackets[i+1] == \")\" then\n            bracket_count = bracket_count + 1\n        end\n    end\n    if bracket_count == 0 then return true end\n    return bracket_count == #brackets - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpu9938l.lua:30: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfpu9938l.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n    local bracket_count = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == \"(\" and brackets[i+1] == \")\" then\n            bracket_count = bracket_count + 1\n        end\n    end\n    return bracket_count == #brackets - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx0hbg6l0.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpx0hbg6l0.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n    local open_brackets = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == \"(\" then open_brackets = open_brackets + 1 end\n        if brackets[i] == \")\" then open_brackets = open_brackets - 1 end\n    end\n    return open_brackets == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo34x107a.lua:28: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpo34x107a.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local function is_open(index)\n        return brackets[index] == \"(\"\n    end\n    local function is_close(index)\n        return brackets[index] == \")\"\n    end\n    local function is_balanced(index)\n        return is_open(index) == is_close(index - 1)\n    end\n    local function is_balanced_recursive(index)\n        if index < 0 then return true end\n        return is_balanced(index) and is_balanced_recursive(index - 1)\n    end\n    return is_balanced_recursive(#brackets)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp636cny7n.lua:35: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp636cny7n.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" and brackets[i] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp658rd3gl.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp658rd3gl.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n    local bracket_count = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == \"(\" and brackets[i+1] == \")\" then\n            bracket_count = bracket_count + 1\n        end\n    end\n    if bracket_count == 0 then return true end\n    return bracket_count == #brackets\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_p2l2zy.lua:30: expected: false, actual: true\nstack traceback:\n\t/tmp/tmph_p2l2zy.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n    local bracket_count = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == \"(\" and brackets[i+1] == \")\" then\n            bracket_count = bracket_count + 1\n        end\n    end\n    if bracket_count == 0 then return true end\n    return bracket_count == #brackets - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpu9938l.lua:30: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfpu9938l.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n    local bracket_count = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == \"(\" and brackets[i+1] == \")\" then\n            bracket_count = bracket_count + 1\n        end\n    end\n    if bracket_count == 0 then return true end\n    return bracket_count == #brackets - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpu9938l.lua:30: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfpu9938l.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n    local open_brackets = 0\n    local close_brackets = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == \"(\" then open_brackets = open_brackets + 1 end\n        if brackets[i] == \")\" then close_brackets = close_brackets + 1 end\n    end\n    if open_brackets == close_brackets then return true end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt__9vu15.lua:30: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpt__9vu15.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n    local bracket_count = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == \"(\" and brackets[i+1] == \")\" then\n            bracket_count = bracket_count + 1\n        end\n    end\n    if bracket_count == 0 then return true end\n    return bracket_count == #brackets - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpu9938l.lua:30: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfpu9938l.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local i, j, bracket\n    for i=1,#brackets,2 do\n        bracket = brackets:sub(i, i)\n        if bracket == \"(\" then\n            if brackets:sub(i+1, i+1) == \")\" then\n                return true\n            else\n                for j=i+1,#brackets,2 do\n                    if brackets:sub(j, j) == \"(\" then\n                        return false\n                    end\n                end\n            end\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm0fjp43t.lua:34: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm0fjp43t.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" and brackets[i] ~= \")\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmp5l19e_kk.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n    local bracket_count = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == \"(\" and brackets[i+1] == \")\" then\n            bracket_count = bracket_count + 1\n        end\n    end\n    return bracket_count == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0a3nhpls.lua:29: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0a3nhpls.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n    local open = 0\n    local close = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == \"(\" then open = open + 1 end\n        if brackets[i] == \")\" then close = close + 1 end\n    end\n    return open == close\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4gzi14up.lua:29: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4gzi14up.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n    local bracket_count = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == \"(\" and brackets[i+1] == \")\" then\n            bracket_count = bracket_count + 1\n        end\n    end\n    if bracket_count == 0 then return true end\n    return bracket_count == #brackets - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpu9938l.lua:30: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfpu9938l.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local function is_open(index)\n        return brackets[index] == \"(\"\n    end\n    local function is_close(index)\n        return brackets[index] == \")\"\n    end\n    local function is_balanced(index)\n        return is_open(index) == is_close(index + 1)\n    end\n    for i = 1, #brackets, 2 do\n        if not is_balanced(i) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkq9pyt42.lua:36: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpkq9pyt42.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local function is_open(index)\n        return brackets[index] == \"(\"\n    end\n    local function is_close(index)\n        return brackets[index] == \")\"\n    end\n    local function is_balanced(index)\n        return is_open(index) == is_close(index + 1)\n    end\n    for i = 1, #brackets, 2 do\n        if not is_balanced(i) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkq9pyt42.lua:36: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpkq9pyt42.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local function is_open_bracket(c)\n        return c == \"(\" or c == \"[\" or c == \"{\"\n    end\n    local function is_close_bracket(c)\n        return c == \")\" or c == \"]\" or c == \"}\"\n    end\n    local function is_balanced(brackets)\n        local function is_open_bracket(c)\n            return c == \"(\" or c == \"[\" or c == \"{\"\n        end\n        local function is_close_bracket(c)\n            return c == \")\" or c == \"]\" or c == \"}\"\n        end\n        local function is_balanced(brackets)\n            local function is_open_bracket(c)\n                return c == \"(\" or c == \"[\" or c == \"{\"\n            end\n            local function is_close_bracket(c)\n                return c == \")\" or c == \"]\" or c == \"}\"\n            end\n            return not is_open_bracket(brackets[1]) and is_balanced(brackets[2:])\n        end\n    end\n    return is_balanced(brackets)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmpoh6gdaj3.lua:32: ']' expected near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" and brackets[i] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp658rd3gl.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp658rd3gl.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local function is_open(index)\n        return brackets[index] == \"(\"\n    end\n    local function is_close(index)\n        return brackets[index] == \")\"\n    end\n    local function is_balanced(index)\n        return is_open(index) == is_close(index + 1)\n    end\n    local function is_balanced_rec(index)\n        if index == 0 then return true end\n        return is_balanced(index) and is_balanced_rec(index - 1)\n    end\n    return is_balanced_rec(#brackets)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7qfp41s.lua:35: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc7qfp41s.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" and brackets[i] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp658rd3gl.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp658rd3gl.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local function is_open(index)\n        return brackets[index] == \"(\"\n    end\n    local function is_close(index)\n        return brackets[index] == \")\"\n    end\n    local function is_balanced(index)\n        return is_open(index) == is_close(index + 1)\n    end\n    local function is_balanced_recursive(index)\n        if index == 0 then\n            return true\n        end\n        return is_balanced(index) and is_balanced_recursive(index - 1)\n    end\n    return is_balanced_recursive(#brackets)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpum9jd1q3.lua:37: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpum9jd1q3.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" and brackets[i] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp658rd3gl.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp658rd3gl.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local function is_open_bracket(char)\n        return char == \"(\" or char == \"{\" or char == \"[\"\n    end\n    local function is_close_bracket(char)\n        return char == \")\" or char == \"}\" or char == \"]\"\n    end\n    local function is_balanced(brackets)\n        local i = 1\n        while i <= #brackets do\n            if not is_open_bracket(brackets[i]) and not is_close_bracket(brackets[i]) then\n                return false\n            end\n            i = i + 1\n        end\n        return true\n    end\n    return is_balanced(brackets)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw9ux9hur.lua:34: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw9ux9hur.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" and brackets[i] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp658rd3gl.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp658rd3gl.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local i, j, bracket\n    for i = 1, #brackets, 2 do\n        bracket = brackets[i]\n        if bracket == \"(\" then\n            if not (i+1) < #brackets and brackets[i+1] == \")\" then\n                return false\n            end\n        elseif bracket == \")\" then\n            if not (i-1) >= 1 and brackets[i-1] == \"(\" then\n                return false\n            end\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp3tohqv6.lua:35: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpp3tohqv6.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local function is_open(index)\n        return brackets[index] == \"(\"\n    end\n    local function is_close(index)\n        return brackets[index] == \")\"\n    end\n    local function is_balanced(index)\n        return is_open(index) == is_close(index - 1)\n    end\n    local function is_balanced_recursive(index)\n        if index == 0 then\n            return true\n        elseif is_open(index) == is_close(index - 1) then\n            return is_balanced_recursive(index - 1)\n        else\n            return false\n        end\n    end\n    return is_balanced_recursive(#brackets)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36s8rwrg.lua:40: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp36s8rwrg.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local function is_open_bracket(c)\n        return c == \"(\" or c == \"{\" or c == \"[\"\n    end\n    local function is_close_bracket(c)\n        return c == \")\" or c == \"}\" or c == \"]\"\n    end\n    local function is_balanced(brackets)\n        local i = 1\n        while i <= #brackets do\n            if not is_open_bracket(brackets[i]) and not is_close_bracket(brackets[i]) then\n                return false\n            end\n            i = i + 1\n        end\n        return true\n    end\n    return is_balanced(brackets)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5g18jwo1.lua:34: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5g18jwo1.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n    local bracket_count = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == \"(\" then\n            bracket_count = bracket_count + 1\n        end\n        if brackets[i] == \")\" then\n            bracket_count = bracket_count - 1\n        end\n        if bracket_count < 0 then return false end\n    end\n    return bracket_count == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnss0wynx.lua:33: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpnss0wynx.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" and brackets[i] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp658rd3gl.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp658rd3gl.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n    local bracket_count = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == \"(\" and brackets[i+1] == \")\" then\n            bracket_count = bracket_count + 1\n        end\n    end\n    if bracket_count == 0 then return true end\n    return bracket_count == #brackets - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpu9938l.lua:30: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfpu9938l.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" and brackets[i] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp658rd3gl.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp658rd3gl.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n    local i = 1\n    while i <= #brackets do\n        if brackets[i] == \"(\" and brackets[#brackets - i + 1] == \")\" then\n            return true\n        end\n        i = i + 1\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2a0qbd08.lua:26: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2a0qbd08.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = 0\n    local close_brackets = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == '(' then\n            open_brackets = open_brackets + 1\n        elseif brackets[i] == ')' then\n            close_brackets = close_brackets + 1\n        end\n    end\n    return open_brackets == close_brackets\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd1api7v5.lua:31: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpd1api7v5.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n    local bracket_count = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == \"(\" and brackets[i+1] == \")\" then\n            bracket_count = bracket_count + 1\n        end\n    end\n    if bracket_count == 0 then return true end\n    return bracket_count == #brackets - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpu9938l.lua:30: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfpu9938l.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local function is_open(index)\n        return brackets[index] == \"(\"\n    end\n    local function is_close(index)\n        return brackets[index] == \")\"\n    end\n    local function is_balanced(index)\n        return is_open(index) == is_close(index - 1)\n    end\n    for i = 1, #brackets, 2 do\n        if not is_balanced(i) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ytku9im.lua:36: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1ytku9im.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n    local bracket_count = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == \"(\" and brackets[i+1] == \")\" then\n            bracket_count = bracket_count + 1\n        end\n    end\n    if bracket_count == 0 then return true end\n    return bracket_count == #brackets - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpu9938l.lua:30: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfpu9938l.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n    local bracket_count = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == \"(\" and brackets[i+1] == \")\" then\n            bracket_count = bracket_count + 1\n        end\n    end\n    if bracket_count == 0 then return true end\n    return bracket_count == #brackets\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_p2l2zy.lua:30: expected: false, actual: true\nstack traceback:\n\t/tmp/tmph_p2l2zy.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local function is_open_bracket(c)\n        return c == \"(\" or c == \"[\" or c == \"{\"\n    end\n    local function is_close_bracket(c)\n        return c == \")\" or c == \"]\" or c == \"}\"\n    end\n    local function is_balanced(brackets)\n        local function is_balanced_bracket(c)\n            return is_open_bracket(c) and is_close_bracket(brackets[index+1])\n        end\n        for i=1,#brackets,2 do\n            if not is_balanced_bracket(brackets[i]) or not is_balanced_bracket(brackets[i+1]) then\n                return false\n            end\n        end\n        return true\n    end\n    return is_balanced(brackets)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz4ufy21g.lua:35: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpz4ufy21g.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" and brackets[i] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp658rd3gl.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp658rd3gl.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n    local bracket_count = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == \"(\" and brackets[i+1] == \")\" then\n            bracket_count = bracket_count + 1\n        end\n    end\n    if bracket_count == 0 then return true end\n    return bracket_count == #brackets - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpu9938l.lua:30: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfpu9938l.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" and brackets[i] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp658rd3gl.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp658rd3gl.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n    local open_brackets = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == \"(\" then open_brackets = open_brackets + 1 end\n        if brackets[i] == \")\" then open_brackets = open_brackets - 1 end\n    end\n    return open_brackets == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo34x107a.lua:28: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpo34x107a.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" and brackets[i] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp658rd3gl.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp658rd3gl.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" and brackets[i] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp658rd3gl.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp658rd3gl.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n    local bracket_count = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == \"(\" and brackets[i+1] == \")\" then\n            bracket_count = bracket_count + 1\n        end\n    end\n    if bracket_count == 0 then return true end\n    return bracket_count == #brackets - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpu9938l.lua:30: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfpu9938l.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" and brackets[i] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp658rd3gl.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp658rd3gl.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n    local bracket_count = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == \"(\" and brackets[i+1] == \")\" then\n            bracket_count = bracket_count + 1\n        end\n    end\n    return bracket_count == #brackets - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx0hbg6l0.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpx0hbg6l0.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n    local open_brackets = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == \"(\" then\n            open_brackets = open_brackets + 1\n        elseif brackets[i] == \")\" then\n            open_brackets = open_brackets - 1\n        end\n    end\n    if open_brackets == 0 then return true end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ano9ffg.lua:32: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0ano9ffg.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local function is_open(index)\n        return brackets[index] == \"(\"\n    end\n    local function is_close(index)\n        return brackets[index] == \")\"\n    end\n    local function is_balanced(index)\n        return is_open(index) == is_close(index - 1)\n    end\n    for i = 1, #brackets, 2 do\n        if not is_balanced(i) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ytku9im.lua:36: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1ytku9im.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local function is_open_bracket(c)\n        return c == \"(\" or c == \"{\" or c == \"[\"\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7hrxec40.lua:33: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n    local bracket_count = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == \"(\" and brackets[i+1] == \")\" then\n            bracket_count = bracket_count + 1\n        end\n    end\n    if bracket_count == 0 then return true end\n    return bracket_count == #brackets - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpu9938l.lua:30: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfpu9938l.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n    local bracket_count = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == '(' and brackets[i+1] == ')' then\n            bracket_count = bracket_count + 1\n        end\n    end\n    if bracket_count == 0 then return true end\n    return bracket_count == #brackets - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1jj20jdm.lua:30: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1jj20jdm.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n    local bracket_count = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == \"(\" and brackets[i+1] == \")\" then\n            bracket_count = bracket_count + 1\n        end\n    end\n    if bracket_count == 0 then return true end\n    return bracket_count == #brackets\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_p2l2zy.lua:30: expected: false, actual: true\nstack traceback:\n\t/tmp/tmph_p2l2zy.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" and brackets[i] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp658rd3gl.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp658rd3gl.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = {'(', '{', '['}\n    local close_brackets = {')', '}', ']'}\n    local result = true\n    for _, b in ipairs(brackets) do\n        if not b in open_brackets then\n            result = false\n            break\n    end\n    for _, b in ipairs(brackets) do\n        if not b in close_brackets then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmp9eua4ff3.lua:16: 'then' expected near 'in'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n    local bracket_count = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == \"(\" and brackets[i+1] == \")\" then\n            bracket_count = bracket_count + 1\n        end\n    end\n    if bracket_count == 0 then return true end\n    return bracket_count == #brackets - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpu9938l.lua:30: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfpu9938l.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" and brackets[i] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp658rd3gl.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp658rd3gl.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n    local i = 1\n    while i <= #brackets do\n        if brackets[i] == \"(\" then\n            if i == #brackets or brackets[i+1] == \")\" then\n                return true\n            end\n            i = i + 1\n        elseif brackets[i] == \")\" then\n            return false\n        end\n        i = i + 1\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsu0yal3n.lua:31: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsu0yal3n.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n    local bracket_count = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == \"(\" and brackets[i+1] == \")\" then\n            bracket_count = bracket_count + 1\n        end\n    end\n    if bracket_count == 0 then return true end\n    return bracket_count == #brackets - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpu9938l.lua:30: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfpu9938l.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" and brackets[i] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp658rd3gl.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp658rd3gl.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n    local bracket_count = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == \"(\" and brackets[i+1] == \")\" then\n            bracket_count = bracket_count + 1\n        end\n    end\n    if bracket_count == 0 then return true end\n    return bracket_count == #brackets - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpu9938l.lua:30: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfpu9938l.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = {'(', '{', '['}\n    local close_brackets = {')', '}', ']'}\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= open_brackets[brackets[i-1]] then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi8s5d_sk.lua:31: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpi8s5d_sk.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\")\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"(()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'), false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('), false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'), false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91655_aq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp91655_aq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907516
    }
  ]
}