{
  "language": "lua",
  "name": "HumanEval_21_rescale_to_unit",
  "results": [
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local result = {}\n    for i = 1, #numbers, 1 do\n        result[i] = numbers[i] - min(numbers)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpip2uvoyz.lua:8: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpip2uvoyz.lua:8: in local 'candidate'\n\t/tmp/tmpip2uvoyz.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907426
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _,n in ipairs(numbers) do\n        min = math.min(min, n)\n        max = math.max(max, n)\n    end\n    if max == -math.inf then\n        return numbers\n    end\n    return map(function(n) return (n - min) / (max - min) end, numbers)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp39wxj4_e.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmp39wxj4_e.lua:7: in local 'candidate'\n\t/tmp/tmp39wxj4_e.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907426
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _,n in ipairs(numbers) do\n        min = math.min(min, n)\n        max = math.max(max, n)\n    end\n    return math.floor(min) .. \",\" .. math.ceil(max)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjp38ppmq.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpjp38ppmq.lua:7: in local 'candidate'\n\t/tmp/tmpjp38ppmq.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907426
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp30oxbjpi.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmp30oxbjpi.lua:7: in local 'candidate'\n\t/tmp/tmp30oxbjpi.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907426
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp2affsg6b.lua:9: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907426
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp30oxbjpi.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmp30oxbjpi.lua:7: in local 'candidate'\n\t/tmp/tmp30oxbjpi.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907426
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local n = #numbers\n    local min = numbers[1]\n    local max = numbers[n]\n    for i = 2, n do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, n do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfm_y083s.lua:23: expected: {1, 0}\nactual: {#Inf, #NaN}\nstack traceback:\n\t/tmp/tmpfm_y083s.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907426
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local max = math.max(...numbers)\n    local min = math.min(...numbers)\n    return math.floor((max - min) / (max + min)) * (max + min) + min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpu999dzff.lua:6: cannot use '...' outside a vararg function near '...'\n",
      "stdout": "",
      "timestamp": 1661907426
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        if numbers[i] < min then min = numbers[i] end\n        if numbers[i] > max then max = numbers[i] end\n    end\n    if max == min then\n        return numbers\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdy4ph7dk.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpdy4ph7dk.lua:7: in local 'candidate'\n\t/tmp/tmpdy4ph7dk.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907426
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local max = math.max(...numbers)\n    local min = math.min(...numbers)\n    local scale = 1.0 / (max - min)\n    return map(function(x) return x * scale - min }, numbers)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpm2j4rbzj.lua:6: cannot use '...' outside a vararg function near '...'\n",
      "stdout": "",
      "timestamp": 1661907426
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local result = {}\n    for i = 1, #numbers, 1 do\n        result[i] = numbers[i] / math.max(numbers[1], numbers[#                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp1vk03f72.lua:9: ']' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907426
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpul3fg90g.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpul3fg90g.lua:7: in local 'candidate'\n\t/tmp/tmpul3fg90g.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907427
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp30oxbjpi.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmp30oxbjpi.lua:7: in local 'candidate'\n\t/tmp/tmp30oxbjpi.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907426
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local n = #numbers\n    local min = numbers[1]\n    local max = numbers[n]\n    local scale = 1.0 / (max - min)\n    return for i=1,n do numbers[i] *= scale end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpk0nqpi2x.lua:10: unexpected symbol near 'for'\n",
      "stdout": "",
      "timestamp": 1661907426
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpul3fg90g.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpul3fg90g.lua:7: in local 'candidate'\n\t/tmp/tmpul3fg90g.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907427
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 2 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 2 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw3wer6kd.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpw3wer6kd.lua:7: in local 'candidate'\n\t/tmp/tmpw3wer6kd.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907427
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local n = #numbers\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, n, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    if max == -math.inf then\n        return numbers\n    end\n    local scale = 1.0 / (max - min)\n    return for i = 1, n, 1 do\n        numbers[i] = (numbers[i] - min) * scale\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpftbjkavh.lua:17: unexpected symbol near 'for'\n",
      "stdout": "",
      "timestamp": 1661907426
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpul3fg90g.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpul3fg90g.lua:7: in local 'candidate'\n\t/tmp/tmpul3fg90g.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907427
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpul3fg90g.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpul3fg90g.lua:7: in local 'candidate'\n\t/tmp/tmpul3fg90g.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907427
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local result = {}\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpqahcwrif.lua:8: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907427
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local max = math.max(numbers)\n    local min = math.min(numbers)\n    local scale = 1.0 / (max - min)\n    return map(function(x) return x * scale - min }, numbers)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmp4dnaijgc.lua:9: 'end' expected near '}'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 2 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 2 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw3wer6kd.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpw3wer6kd.lua:7: in local 'candidate'\n\t/tmp/tmpw3wer6kd.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907427
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpul3fg90g.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpul3fg90g.lua:7: in local 'candidate'\n\t/tmp/tmpul3fg90g.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907427
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local n = #numbers\n    local min = numbers[1]\n    local max = numbers[1]\n    for i = 2, n, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, n, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _, number in ipairs(numbers) do\n        min = math.min(min, number)\n        max = math.max(max, number)\n    end\n    for _, number in ipairs(numbers) do\n        numbers[_] = number - min\n        numbers[_] = number / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _, v in ipairs(numbers) do\n        min = math.min(min, v)\n        max = math.max(max, v)\n    end\n    if max == min then\n        return numbers\n    end\n    return map(function(v) return (v - min) / (max - min) end, numbers)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local n = #numbers\n    local min = math.min(numbers)\n    local max = math.max(numbers)\n    local scale = 1.0 / (max - min)\n    return map(function(x) return x * scale - min }, numbers)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmpy_cdv5je.lua:10: 'end' expected near '}'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local result = {}\n    for i = 1, #numbers, 1 do\n        result[i] = numbers[i] / math.max(numbers[1], numbers[#numbers])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2nr0wle8.lua:16: expected: {0.0, 1.0}\nactual: {0.040080160320641, 1.0}\nstack traceback:\n\t/tmp/tmp2nr0wle8.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpul3fg90g.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpul3fg90g.lua:7: in local 'candidate'\n\t/tmp/tmpul3fg90g.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907427
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _, number in ipairs(numbers) do\n        min = math.min(min, number)\n        max = math.max(max, number)\n    end\n    if max == -math.inf then\n        return numbers\n    end\n    return map(function(number)\n        return (number - min) / (max - min)\n    end, numbers)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpul3fg90g.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpul3fg90g.lua:7: in local 'candidate'\n\t/tmp/tmpul3fg90g.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907427
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp30oxbjpi.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmp30oxbjpi.lua:7: in local 'candidate'\n\t/tmp/tmp30oxbjpi.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907426
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _, v in ipairs(numbers) do\n        min = math.min(min, v)\n        max = math.max(max, v)\n    end\n    for _, v in ipairs(numbers) do\n        numbers[#numbers + 1] = (v - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe0gwtd5u.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpe0gwtd5u.lua:7: in local 'candidate'\n\t/tmp/tmpe0gwtd5u.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local n = #numbers\n    if n < 2 then return numbers\n    local min = numbers[1]\n    local max = numbers[1]\n    for i = 2, n, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, n, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmp44db8x8o.lua:8: 'end' expected (to close 'if' at line 7) near 'local'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _, v in ipairs(numbers) do\n        min = math.min(min, v)\n        max = math.max(max, v)\n    end\n    if max == min then\n        return numbers\n    end\n    return map(function(v) return (v - min) / (max - min) end, numbers)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _, n in ipairs(numbers) do\n        min = math.min(min, n)\n        max = math.max(max, n)\n    end\n    for _, n in ipairs(numbers) do\n        numbers[_] = (n - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd82aa6wo.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpd82aa6wo.lua:7: in local 'candidate'\n\t/tmp/tmpd82aa6wo.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local result = {}\n    for i = 1, #numbers, 1 do\n        result[i] = numbers[i] / math.max(numbers[1], numbers[#numbers])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2nr0wle8.lua:16: expected: {0.0, 1.0}\nactual: {0.040080160320641, 1.0}\nstack traceback:\n\t/tmp/tmp2nr0wle8.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local result = {}\n    for i = 1, #numbers, 1 do\n        result[i] = numbers[i] - min(numbers)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpip2uvoyz.lua:8: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpip2uvoyz.lua:8: in local 'candidate'\n\t/tmp/tmpip2uvoyz.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907426
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local n = #numbers\n    local min = math.inf\n    local max = -math.inf\n    for i=1,n do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    if max == -math.inf then\n        return numbers\n    end\n    for i=1,n do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _, number in ipairs(numbers) do\n        min = math.min(min, number)\n        max = math.max(max, number)\n    end\n    if min == max then\n        return numbers\n    end\n    return map(function(number)\n        return (number - min) / (max - min)\n    end, numbers)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuddn_aay.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpuddn_aay.lua:7: in local 'candidate'\n\t/tmp/tmpuddn_aay.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _, v in ipairs(numbers) do\n        if v < min then min = v end\n        if v > max then max = v end\n    end\n    return math.floor(min) .. \",\" .. math.ceil(max)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp_owuonq.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpp_owuonq.lua:7: in local 'candidate'\n\t/tmp/tmpp_owuonq.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpul3fg90g.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpul3fg90g.lua:7: in local 'candidate'\n\t/tmp/tmpul3fg90g.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907427
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local n = #numbers\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, n, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    if max == min then\n        return numbers\n    end\n    for i = 1, n, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpomxl0qfp.lua:8: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpomxl0qfp.lua:8: in local 'candidate'\n\t/tmp/tmpomxl0qfp.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local n = #numbers\n    local min = numbers[1]\n    local max = numbers[1]\n    for i = 2, n, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, n, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpul3fg90g.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpul3fg90g.lua:7: in local 'candidate'\n\t/tmp/tmpul3fg90g.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907427
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 2 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 2 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw3wer6kd.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpw3wer6kd.lua:7: in local 'candidate'\n\t/tmp/tmpw3wer6kd.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907427
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local max = math.max(numbers)\n    local min = math.min(numbers)\n    for i=1,#numbers,2 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphp7g9cz7.lua:9: attempt to perform arithmetic on a table value (local 'min')\nstack traceback:\n\t/tmp/tmphp7g9cz7.lua:9: in local 'candidate'\n\t/tmp/tmphp7g9cz7.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i=1,#numbers,1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i=1,#numbers,1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq4l5w24w.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpq4l5w24w.lua:7: in local 'candidate'\n\t/tmp/tmpq4l5w24w.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local n = #numbers\n    if n < 2 then\n        return numbers\n    end\n    local min = math.min(numbers)\n    local max = math.max(numbers)\n    local scale = 1.0 / (max - min)\n    return for i=1,n do numbers[i] *= scale end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmpk8squb_2.lua:13: unexpected symbol near 'for'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local n = #numbers\n    local min = numbers[1]\n    local max = numbers[1]\n    for i = 2, n, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, n, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _,number in ipairs(numbers) do\n        if number < min then min = number end\n        if number > max then max = number end\n    end\n    return math.floor(min) .. \",\" .. math.floor(max)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz8hcozqg.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpz8hcozqg.lua:7: in local 'candidate'\n\t/tmp/tmpz8hcozqg.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 2 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 2 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw3wer6kd.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpw3wer6kd.lua:7: in local 'candidate'\n\t/tmp/tmpw3wer6kd.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907427
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _, v in ipairs(numbers) do\n        if v < min then min = v end\n        if v > max then max = v end\n    end\n    return math.floor(min), math.ceil(max)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbowyn0az.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpbowyn0az.lua:7: in local 'candidate'\n\t/tmp/tmpbowyn0az.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local result = {}\n    for i = 1, #numbers, 1 do\n        result[i] = numbers[i] / math.max(numbers[1], numbers[#numbers])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2nr0wle8.lua:16: expected: {0.0, 1.0}\nactual: {0.040080160320641, 1.0}\nstack traceback:\n\t/tmp/tmp2nr0wle8.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 2 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 2 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw3wer6kd.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpw3wer6kd.lua:7: in local 'candidate'\n\t/tmp/tmpw3wer6kd.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907427
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _, number in ipairs(numbers) do\n        min = math.min(min, number)\n        max = math.max(max, number)\n    end\n    for _, number in ipairs(numbers) do\n        numbers[_] = (number - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpryiyag0h.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpryiyag0h.lua:7: in local 'candidate'\n\t/tmp/tmpryiyag0h.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _, number in ipairs(numbers) do\n        min = math.min(min, number)\n        max = math.max(max, number)\n    end\n    if max == min then\n        return numbers\n    end\n    for _, number in ipairs(numbers) do\n        number = (number - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxfu14kod.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpxfu14kod.lua:7: in local 'candidate'\n\t/tmp/tmpxfu14kod.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        if numbers[i] < min then min = numbers[i] end\n        if numbers[i] > max then max = numbers[i] end\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdlpggjmr.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpdlpggjmr.lua:7: in local 'candidate'\n\t/tmp/tmpdlpggjmr.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local max = math.max(...numbers)\n    local min = math.min(...numbers)\n    local scale = 1.0 / (max - min)\n    return map(function(x) return x * scale - min }, numbers)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpm2j4rbzj.lua:6: cannot use '...' outside a vararg function near '...'\n",
      "stdout": "",
      "timestamp": 1661907426
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local n = #numbers\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, n, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, n, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1_mqk8be.lua:8: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmp1_mqk8be.lua:8: in local 'candidate'\n\t/tmp/tmp1_mqk8be.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local n = #numbers\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, n, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, n, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1_mqk8be.lua:8: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmp1_mqk8be.lua:8: in local 'candidate'\n\t/tmp/tmp1_mqk8be.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpul3fg90g.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpul3fg90g.lua:7: in local 'candidate'\n\t/tmp/tmpul3fg90g.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907427
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpul3fg90g.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpul3fg90g.lua:7: in local 'candidate'\n\t/tmp/tmpul3fg90g.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907427
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _, number in ipairs(numbers) do\n        min = math.min(min, number)\n        max = math.max(max, number)\n    end\n    if min == max then\n        return numbers\n    end\n    return [min - min * (min - max) / (min - max) for _ in numbers]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpul3fg90g.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpul3fg90g.lua:7: in local 'candidate'\n\t/tmp/tmpul3fg90g.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907427
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _, n in ipairs(numbers) do\n        min = math.min(min, n)\n        max = math.max(max, n)\n    end\n    for _, n in ipairs(numbers) do\n        numbers[#numbers + 1] = (n - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfe7t2ir_.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpfe7t2ir_.lua:7: in local 'candidate'\n\t/tmp/tmpfe7t2ir_.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _,n in ipairs(numbers) do\n        min = math.min(min, n)\n        max = math.max(max, n)\n    end\n    if max == -math.inf then return numbers end\n    for _,n in ipairs(numbers) do\n        n = (n - min) / (max - min)\n        n = math.min(1.0, math.max(0.0, n))\n        numbers[#numbers + 1] = n\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local n = #numbers\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, n, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, n, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1_mqk8be.lua:8: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmp1_mqk8be.lua:8: in local 'candidate'\n\t/tmp/tmp1_mqk8be.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _, number in ipairs(numbers) do\n        min = math.min(min, number)\n        max = math.max(max, number)\n    end\n    if min == max then\n        return numbers\n    end\n    return [min - min * numbers[1] / (max - min)]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmpkfl9vusl.lua:15: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        if numbers[i] < min then min = numbers[i] end\n        if numbers[i] > max then max = numbers[i] end\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdlpggjmr.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpdlpggjmr.lua:7: in local 'candidate'\n\t/tmp/tmpdlpggjmr.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _, number in ipairs(numbers) do\n        min = math.min(min, number)\n        max = math.max(max, number)\n    end\n    for _, number in ipairs(numbers) do\n        numbers[_] = (number - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpryiyag0h.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpryiyag0h.lua:7: in local 'candidate'\n\t/tmp/tmpryiyag0h.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local n = #numbers\n    local min = math.inf\n    local max = -math.inf\n    for i=1,n do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    if max == min then\n        return numbers\n    end\n    for i=1,n do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpotvbe45a.lua:8: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpotvbe45a.lua:8: in local 'candidate'\n\t/tmp/tmpotvbe45a.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _, v in ipairs(numbers) do\n        min = math.min(min, v)\n        max = math.max(max, v)\n    end\n    if max == min then\n        return numbers\n    end\n    return map(function(v) return (v - min) / (max - min) end, numbers)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local result = {}\n    for i=1,#numbers,2 do\n        result[i] = numbers[i] - numbers[1]\n        result[i+1] = numbers[i+1] - numbers[1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvw6l3v0b.lua:17: expected: {0.0, 1.0}\nactual: {0.0, 47.9}\nstack traceback:\n\t/tmp/tmpvw6l3v0b.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local result = {}\n    for i = 1, #numbers, 1 do\n        result[i] = numbers[i] / math.max(numbers[1], numbers[#numbers])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2nr0wle8.lua:16: expected: {0.0, 1.0}\nactual: {0.040080160320641, 1.0}\nstack traceback:\n\t/tmp/tmp2nr0wle8.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpul3fg90g.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpul3fg90g.lua:7: in local 'candidate'\n\t/tmp/tmpul3fg90g.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907427
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _, number in ipairs(numbers) do\n        min = math.min(min, number)\n        max = math.max(max, number)\n    end\n    if max == -math.inf then\n        return numbers\n    end\n    return map(function(number)\n        return (number - min) / (max - min)\n    end, numbers)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local result = {}\n    for i=1,#numbers,1 do\n        result[i] = numbers[i] / math.max(numbers[1], numbers[#numbers])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08jpbn38.lua:16: expected: {0.0, 1.0}\nactual: {0.040080160320641, 1.0}\nstack traceback:\n\t/tmp/tmp08jpbn38.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local max = math.max(numbers)\n    local min = math.min(numbers)\n    for i=1,#numbers,2 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphp7g9cz7.lua:9: attempt to perform arithmetic on a table value (local 'min')\nstack traceback:\n\t/tmp/tmphp7g9cz7.lua:9: in local 'candidate'\n\t/tmp/tmphp7g9cz7.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local n = #numbers\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, n, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, n, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1_mqk8be.lua:8: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmp1_mqk8be.lua:8: in local 'candidate'\n\t/tmp/tmp1_mqk8be.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _, number in ipairs(numbers) do\n        min = math.min(min, number)\n        max = math.max(max, number)\n    end\n    for _, number in ipairs(numbers) do\n        numbers[_] = (number - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpryiyag0h.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpryiyag0h.lua:7: in local 'candidate'\n\t/tmp/tmpryiyag0h.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local n = #numbers\n    local min = math.min(numbers)\n    local max = math.max(numbers)\n    local scale = 1.0 / (max - min)\n    return math.mul(numbers, scale)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpar8zhlvr.lua:9: attempt to perform arithmetic on a table value (local 'max')\nstack traceback:\n\t/tmp/tmpar8zhlvr.lua:9: in local 'candidate'\n\t/tmp/tmpar8zhlvr.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local n = #numbers\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, n, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, n, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1_mqk8be.lua:8: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmp1_mqk8be.lua:8: in local 'candidate'\n\t/tmp/tmp1_mqk8be.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _, number in ipairs(numbers) do\n        min = math.min(min, number)\n        max = math.max(max, number)\n    end\n    for _, number in ipairs(numbers) do\n        numbers[_] = (number - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpryiyag0h.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpryiyag0h.lua:7: in local 'candidate'\n\t/tmp/tmpryiyag0h.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _, number in ipairs(numbers) do\n        min = math.min(min, number)\n        max = math.max(max, number)\n    end\n    if max == min then\n        return numbers\n    end\n    return map(function(number)\n        return (number - min) / (max - min)\n    end, numbers)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeexv7b1w.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpeexv7b1w.lua:7: in local 'candidate'\n\t/tmp/tmpeexv7b1w.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _, v in ipairs(numbers) do\n        if v < min then min = v end\n        if v > max then max = v end\n    end\n    for _, v in ipairs(numbers) do\n        numbers[_] = v - min\n        numbers[_] = v / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk2dl1s4a.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpk2dl1s4a.lua:7: in local 'candidate'\n\t/tmp/tmpk2dl1s4a.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _, v in ipairs(numbers) do\n        min = math.min(min, v)\n        max = math.max(max, v)\n    end\n    return math.floor(min) - 1, math.ceil(max) - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3bugbpu_.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmp3bugbpu_.lua:7: in local 'candidate'\n\t/tmp/tmp3bugbpu_.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local n = math.sqrt(reduce(function (a, b) a + b, numbers, 0))\n    return map(function (x) return x / n), numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmp94u6hcnu.lua:6: syntax error near '+'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _, v in ipairs(numbers) do\n        if v < min then min = v end\n        if v > max then max = v end\n    end\n    return math.floor(min) .. \",\" .. math.floor(max)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5lcjy_1m.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmp5lcjy_1m.lua:7: in local 'candidate'\n\t/tmp/tmp5lcjy_1m.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpul3fg90g.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpul3fg90g.lua:7: in local 'candidate'\n\t/tmp/tmpul3fg90g.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907427
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    if max == min then\n        return numbers\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn4b4kqhb.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpn4b4kqhb.lua:7: in local 'candidate'\n\t/tmp/tmpn4b4kqhb.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local n = #numbers\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, n, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    if max == -math.inf then\n        return numbers\n    end\n    for i = 1, n, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2y35igb7.lua:8: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmp2y35igb7.lua:8: in local 'candidate'\n\t/tmp/tmp2y35igb7.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local n = #numbers\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, n, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    if max == -math.inf then\n        return numbers\n    end\n    for i = 1, n, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2y35igb7.lua:8: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmp2y35igb7.lua:8: in local 'candidate'\n\t/tmp/tmp2y35igb7.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _, number in ipairs(numbers) do\n        min = math.min(min, number)\n        max = math.max(max, number)\n    end\n    for _, number in ipairs(numbers) do\n        numbers[_] = number - min\n        numbers[_] = number / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _,n in ipairs(numbers) do\n        min = math.min(min, n)\n        max = math.max(max, n)\n    end\n    if max == min then\n        return numbers\n    end\n    return map(function(n) return (n - min) / (max - min) end, numbers)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvjs2no1s.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpvjs2no1s.lua:7: in local 'candidate'\n\t/tmp/tmpvjs2no1s.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local result = {}\n    for i = 1, #numbers, 1 do\n        result[i] = numbers[i] / math.max(numbers[1], numbers[#numbers])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2nr0wle8.lua:16: expected: {0.0, 1.0}\nactual: {0.040080160320641, 1.0}\nstack traceback:\n\t/tmp/tmp2nr0wle8.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _, v in ipairs(numbers) do\n        if v < min then min = v end\n        if v > max then max = v end\n    end\n    for _, v in ipairs(numbers) do\n        numbers[_] = (v - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1b1bmpl_.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmp1b1bmpl_.lua:7: in local 'candidate'\n\t/tmp/tmp1b1bmpl_.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    if max == min then\n        return numbers\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn4b4kqhb.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpn4b4kqhb.lua:7: in local 'candidate'\n\t/tmp/tmpn4b4kqhb.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpul3fg90g.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpul3fg90g.lua:7: in local 'candidate'\n\t/tmp/tmpul3fg90g.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907427
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _, v in ipairs(numbers) do\n        min = math.min(min, v)\n        max = math.max(max, v)\n    end\n    for _, v in ipairs(numbers) do\n        numbers[#numbers + 1] = (v - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe0gwtd5u.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpe0gwtd5u.lua:7: in local 'candidate'\n\t/tmp/tmpe0gwtd5u.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpul3fg90g.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpul3fg90g.lua:7: in local 'candidate'\n\t/tmp/tmpul3fg90g.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907427
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local max = math.max(...numbers)\n    local min = math.min(...numbers)\n    local scale = 1.0 / (max - min)\n    return map(function(x) return x * scale - min }, numbers)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpm2j4rbzj.lua:6: cannot use '...' outside a vararg function near '...'\n",
      "stdout": "",
      "timestamp": 1661907426
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local n = math.max(numbers)\n    local m = math.min(numbers)\n    return (n - m) / (n - m + 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmfroenwf.lua:8: attempt to perform arithmetic on a table value (local 'n')\nstack traceback:\n\t/tmp/tmpmfroenwf.lua:8: in local 'candidate'\n\t/tmp/tmpmfroenwf.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp30oxbjpi.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmp30oxbjpi.lua:7: in local 'candidate'\n\t/tmp/tmp30oxbjpi.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907426
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _, number in ipairs(numbers) do\n        min = math.min(min, number)\n        max = math.max(max, number)\n    end\n    for _, number in ipairs(numbers) do\n        numbers[_] = (number - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpryiyag0h.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpryiyag0h.lua:7: in local 'candidate'\n\t/tmp/tmpryiyag0h.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local n = #numbers\n    local min = math.min(numbers)\n    local max = math.max(numbers)\n    local scale = 1.0 / (max - min)\n    return map(function(x) return x * scale - min }, numbers)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmpy_cdv5je.lua:10: 'end' expected near '}'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        if numbers[i] < min then min = numbers[i] end\n        if numbers[i] > max then max = numbers[i] end\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdlpggjmr.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpdlpggjmr.lua:7: in local 'candidate'\n\t/tmp/tmpdlpggjmr.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _, v in ipairs(numbers) do\n        min = math.min(min, v)\n        max = math.max(max, v)\n    end\n    if max == min then\n        return numbers\n    end\n    return map(function(v) return (v - min) / (max - min) end, numbers)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpul3fg90g.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpul3fg90g.lua:7: in local 'candidate'\n\t/tmp/tmpul3fg90g.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907427
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local n = #numbers\n    local min = numbers[1]\n    local max = numbers[n]\n    local scale = max - min\n    for i = 2, n do\n        numbers[i] = (numbers[i] - min) / scale\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyurbf8jc.lua:19: expected: {0.0, 1.0}\nactual: {2.0, 1.0}\nstack traceback:\n\t/tmp/tmpyurbf8jc.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpul3fg90g.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpul3fg90g.lua:7: in local 'candidate'\n\t/tmp/tmpul3fg90g.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907427
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpul3fg90g.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpul3fg90g.lua:7: in local 'candidate'\n\t/tmp/tmpul3fg90g.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907427
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _, v in ipairs(numbers) do\n        min = math.min(min, v)\n        max = math.max(max, v)\n    end\n    for _, v in ipairs(numbers) do\n        numbers[#numbers + 1] = (v - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe0gwtd5u.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpe0gwtd5u.lua:7: in local 'candidate'\n\t/tmp/tmpe0gwtd5u.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local result = {}\n    for i = 1, #numbers, 1 do\n        result[i] = numbers[i] / math.max(numbers[1], numbers[#numbers])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2nr0wle8.lua:16: expected: {0.0, 1.0}\nactual: {0.040080160320641, 1.0}\nstack traceback:\n\t/tmp/tmp2nr0wle8.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local n = #numbers\n    local min = math.inf\n    local max = -math.inf\n    for i=1,n do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    if max == min then\n        return numbers\n    end\n    for i=1,n do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpotvbe45a.lua:8: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpotvbe45a.lua:8: in local 'candidate'\n\t/tmp/tmpotvbe45a.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local n = #numbers\n    local min = numbers[1]\n    local max = numbers[n]\n    for i = 2, n do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, n do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfm_y083s.lua:23: expected: {1, 0}\nactual: {#Inf, #NaN}\nstack traceback:\n\t/tmp/tmpfm_y083s.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907426
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _,number in ipairs(numbers) do\n        min = math.min(min, number)\n        max = math.max(max, number)\n    end\n    if min == max then\n        return numbers\n    end\n    return map(function(number) return (number - min) / (max - min) end, numbers)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsv17tf36.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpsv17tf36.lua:7: in local 'candidate'\n\t/tmp/tmpsv17tf36.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpul3fg90g.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpul3fg90g.lua:7: in local 'candidate'\n\t/tmp/tmpul3fg90g.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907427
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local max = math.max(...numbers)\n    local min = math.min(...numbers)\n    return math.floor((max - min) / (max + min)) * (max + min) + min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpu999dzff.lua:6: cannot use '...' outside a vararg function near '...'\n",
      "stdout": "",
      "timestamp": 1661907426
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _, number in ipairs(numbers) do\n        min = math.min(min, number)\n        max = math.max(max, number)\n    end\n    if max == min then\n        return numbers\n    end\n    return [0.0] + numbers:map(function(number)\n        return (number - min) / (max - min)\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmpx4ch8ylz.lua:15: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _, number in ipairs(numbers) do\n        min = math.min(min, number)\n        max = math.max(max, number)\n    end\n    if max == -math.inf then\n        return numbers\n    end\n    for _, number in ipairs(numbers) do\n        number = (number - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp4tnz719.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpp4tnz719.lua:7: in local 'candidate'\n\t/tmp/tmpp4tnz719.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local n = #numbers\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, n do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, n do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2jsmyx9q.lua:8: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmp2jsmyx9q.lua:8: in local 'candidate'\n\t/tmp/tmp2jsmyx9q.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i=1,#numbers,2 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i=1,#numbers,2 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppldngk0g.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmppldngk0g.lua:7: in local 'candidate'\n\t/tmp/tmppldngk0g.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    if max == min then\n        return numbers\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn4b4kqhb.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpn4b4kqhb.lua:7: in local 'candidate'\n\t/tmp/tmpn4b4kqhb.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _, v in ipairs(numbers) do\n        min = math.min(min, v)\n        max = math.max(max, v)\n    end\n    if max == min then\n        return numbers\n    end\n    return map(function(v) return (v - min) / (max - min) end, numbers)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local max = math.max(...numbers)\n    local min = math.min(...numbers)\n    local scale = 1.0 / (max - min)\n    return map(function(x) return x * scale - min }, numbers)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpm2j4rbzj.lua:6: cannot use '...' outside a vararg function near '...'\n",
      "stdout": "",
      "timestamp": 1661907426
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local n = #numbers\n    local min = math.min(numbers)\n    local max = math.max(numbers)\n    local scale = 1.0 / (max - min)\n    return map(function(x) return x * scale - min }, numbers)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmpy_cdv5je.lua:10: 'end' expected near '}'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local result = {}\n    for i = 1, #numbers, 1 do\n        result[i] = numbers[i] - min(numbers)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpip2uvoyz.lua:8: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpip2uvoyz.lua:8: in local 'candidate'\n\t/tmp/tmpip2uvoyz.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907426
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 2 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 2 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw3wer6kd.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpw3wer6kd.lua:7: in local 'candidate'\n\t/tmp/tmpw3wer6kd.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907427
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local n = #numbers\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, n, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    if max == min then\n        return numbers\n    end\n    for i = 1, n, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpomxl0qfp.lua:8: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpomxl0qfp.lua:8: in local 'candidate'\n\t/tmp/tmpomxl0qfp.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local n = #numbers\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, n, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, n, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1_mqk8be.lua:8: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmp1_mqk8be.lua:8: in local 'candidate'\n\t/tmp/tmp1_mqk8be.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _,n in ipairs(numbers) do\n        min = math.min(min, n)\n        max = math.max(max, n)\n    end\n    for _,n in ipairs(numbers) do\n        numbers[_] = (n - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxpzfx7_f.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpxpzfx7_f.lua:7: in local 'candidate'\n\t/tmp/tmpxpzfx7_f.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i=1,#numbers,1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i=1,#numbers,1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq4l5w24w.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpq4l5w24w.lua:7: in local 'candidate'\n\t/tmp/tmpq4l5w24w.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpul3fg90g.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpul3fg90g.lua:7: in local 'candidate'\n\t/tmp/tmpul3fg90g.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907427
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpul3fg90g.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpul3fg90g.lua:7: in local 'candidate'\n\t/tmp/tmpul3fg90g.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907427
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpul3fg90g.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpul3fg90g.lua:7: in local 'candidate'\n\t/tmp/tmpul3fg90g.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907427
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpul3fg90g.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpul3fg90g.lua:7: in local 'candidate'\n\t/tmp/tmpul3fg90g.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907427
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _, number in ipairs(numbers) do\n        min = math.min(min, number)\n        max = math.max(max, number)\n    end\n    return math.floor(min) .. \",\" .. math.ceil(max)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0dmxmrjw.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmp0dmxmrjw.lua:7: in local 'candidate'\n\t/tmp/tmp0dmxmrjw.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        if numbers[i] < min then min = numbers[i] end\n        if numbers[i] > max then max = numbers[i] end\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdlpggjmr.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpdlpggjmr.lua:7: in local 'candidate'\n\t/tmp/tmpdlpggjmr.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpul3fg90g.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpul3fg90g.lua:7: in local 'candidate'\n\t/tmp/tmpul3fg90g.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907427
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _,n in ipairs(numbers) do\n        min = math.min(min, n)\n        max = math.max(max, n)\n    end\n    if max == min then\n        return numbers\n    end\n    return map(function(n) return (n - min) / (max - min) end, numbers)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvjs2no1s.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpvjs2no1s.lua:7: in local 'candidate'\n\t/tmp/tmpvjs2no1s.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local n = math.max(numbers)\n    local m = math.min(numbers)\n    return (n - m) / (n - m + 1) * numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf0o6lx0y.lua:8: attempt to perform arithmetic on a table value (local 'n')\nstack traceback:\n\t/tmp/tmpf0o6lx0y.lua:8: in local 'candidate'\n\t/tmp/tmpf0o6lx0y.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _, v in ipairs(numbers) do\n        min = math.min(min, v)\n        max = math.max(max, v)\n    end\n    if min == max then\n        return numbers\n    end\n    return map(function(v) return (v - min) / (max - min) end, numbers)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb8ob0g4x.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpb8ob0g4x.lua:7: in local 'candidate'\n\t/tmp/tmpb8ob0g4x.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local max = math.max(...numbers)\n    local min = math.min(...numbers)\n    local scale = 1.0 / (max - min)\n    return map(function(x) return x * scale - min }, numbers)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpm2j4rbzj.lua:6: cannot use '...' outside a vararg function near '...'\n",
      "stdout": "",
      "timestamp": 1661907426
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 2 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 2 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw3wer6kd.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpw3wer6kd.lua:7: in local 'candidate'\n\t/tmp/tmpw3wer6kd.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907427
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpul3fg90g.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpul3fg90g.lua:7: in local 'candidate'\n\t/tmp/tmpul3fg90g.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907427
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local n = math.sqrt(reduce(function(a, b) a + b, numbers))\n    return map(function(x) return x / n), numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmpg5eg2c8m.lua:6: syntax error near '+'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local n = #numbers\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, n, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    if max == min then\n        return numbers\n    end\n    local scale = 1.0 / (max - min)\n    return for i = 1, n, 1 do\n        numbers[i] = (numbers[i] - min) * scale\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmp84s4sqhm.lua:17: unexpected symbol near 'for'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local result = {}\n    for i=1,#numbers,2 do\n        result[i] = numbers[i] - numbers[1]\n        result[i+1] = numbers[i+1] - numbers[1]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvw6l3v0b.lua:17: expected: {0.0, 1.0}\nactual: {0.0, 47.9}\nstack traceback:\n\t/tmp/tmpvw6l3v0b.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local result = {}\n    for i=1,#numbers,1 do\n        result[i] = numbers[i] - min(numbers)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgjia77vx.lua:8: attempt to call a nil value (global 'min')\nstack traceback:\n\t/tmp/tmpgjia77vx.lua:8: in local 'candidate'\n\t/tmp/tmpgjia77vx.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpul3fg90g.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpul3fg90g.lua:7: in local 'candidate'\n\t/tmp/tmpul3fg90g.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907427
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpul3fg90g.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpul3fg90g.lua:7: in local 'candidate'\n\t/tmp/tmpul3fg90g.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907427
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpul3fg90g.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpul3fg90g.lua:7: in local 'candidate'\n\t/tmp/tmpul3fg90g.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907427
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _, number in ipairs(numbers) do\n        min = math.min(min, number)\n        max = math.max(max, number)\n    end\n    for _, number in ipairs(numbers) do\n        numbers[_] = (number - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpryiyag0h.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpryiyag0h.lua:7: in local 'candidate'\n\t/tmp/tmpryiyag0h.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local max = math.max(...numbers)\n    local min = math.min(...numbers)\n    local scale = 1.0 / (max - min)\n    return map(function(x) return x * scale - min }, numbers)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpm2j4rbzj.lua:6: cannot use '...' outside a vararg function near '...'\n",
      "stdout": "",
      "timestamp": 1661907426
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpul3fg90g.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpul3fg90g.lua:7: in local 'candidate'\n\t/tmp/tmpul3fg90g.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907427
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local result = {}\n    for i = 1, #numbers, 1 do\n        result[i] = numbers[i] / math.max(numbers[1], numbers[#numbers])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2nr0wle8.lua:16: expected: {0.0, 1.0}\nactual: {0.040080160320641, 1.0}\nstack traceback:\n\t/tmp/tmp2nr0wle8.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i=1,#numbers,1 do\n        if numbers[i] < min then min = numbers[i] end\n        if numbers[i] > max then max = numbers[i] end\n    end\n    for i=1,#numbers,1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdk6zr9q9.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpdk6zr9q9.lua:7: in local 'candidate'\n\t/tmp/tmpdk6zr9q9.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _, n in ipairs(numbers) do\n        min = math.min(min, n)\n        max = math.max(max, n)\n    end\n    return math.floor(min) .. \",\" .. math.ceil(max)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbofi15b_.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpbofi15b_.lua:7: in local 'candidate'\n\t/tmp/tmpbofi15b_.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _, v in ipairs(numbers) do\n        if v < min then min = v end\n        if v > max then max = v end\n    end\n    return math.floor(min) .. \",\" .. math.ceil(max)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp_owuonq.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpp_owuonq.lua:7: in local 'candidate'\n\t/tmp/tmpp_owuonq.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpul3fg90g.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpul3fg90g.lua:7: in local 'candidate'\n\t/tmp/tmpul3fg90g.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907427
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _, number in ipairs(numbers) do\n        min = math.min(min, number)\n        max = math.max(max, number)\n    end\n    if min == max then\n        return numbers\n    end\n    return map(function(number)\n        return (number - min) / (max - min)\n    end, numbers)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuddn_aay.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpuddn_aay.lua:7: in local 'candidate'\n\t/tmp/tmpuddn_aay.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local n = #numbers\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, n, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    if min == max then\n        return numbers\n    end\n    for i = 1, n, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe5c_x5hg.lua:8: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpe5c_x5hg.lua:8: in local 'candidate'\n\t/tmp/tmpe5c_x5hg.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local n = #numbers\n    local min = math.min(numbers)\n    local max = math.max(numbers)\n    local scale = 1.0 / (max - min)\n    return math.mul(numbers, scale)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpar8zhlvr.lua:9: attempt to perform arithmetic on a table value (local 'max')\nstack traceback:\n\t/tmp/tmpar8zhlvr.lua:9: in local 'candidate'\n\t/tmp/tmpar8zhlvr.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local n = #numbers\n    local min = numbers[1]\n    local max = numbers[n]\n    for i = 2, n-1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, n do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8lise6s3.lua:23: expected: {1.0, 0.0}\nactual: {-0.0, 1.0}\nstack traceback:\n\t/tmp/tmp8lise6s3.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpul3fg90g.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpul3fg90g.lua:7: in local 'candidate'\n\t/tmp/tmpul3fg90g.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907427
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _, v in ipairs(numbers) do\n        min = math.min(min, v)\n        max = math.max(max, v)\n    end\n    for _, v in ipairs(numbers) do\n        numbers[#numbers + 1] = (v - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe0gwtd5u.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpe0gwtd5u.lua:7: in local 'candidate'\n\t/tmp/tmpe0gwtd5u.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _, v in ipairs(numbers) do\n        min = math.min(min, v)\n        max = math.max(max, v)\n    end\n    for _, v in ipairs(numbers) do\n        numbers[#numbers + 1] = (v - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe0gwtd5u.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpe0gwtd5u.lua:7: in local 'candidate'\n\t/tmp/tmpe0gwtd5u.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _,number in ipairs(numbers) do\n        min = math.min(min, number)\n        max = math.max(max, number)\n    end\n    if max == min then\n        return numbers\n    end\n    return map(function(number)\n        return (number - min) / (max - min)\n    end, numbers)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbadjmf54.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpbadjmf54.lua:7: in local 'candidate'\n\t/tmp/tmpbadjmf54.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local n = #numbers\n    local min = math.min(numbers)\n    local max = math.max(numbers)\n    local scale = 1.0 / (max - min)\n    return for i=1,n do numbers[i] *= scale end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmpr6j0_j6a.lua:10: unexpected symbol near 'for'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local n = #numbers\n    local min = numbers[1]\n    local max = numbers[1]\n    for i = 2, n, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, n, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i=1,#numbers,2 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    if max == min then\n        return numbers\n    end\n    for i=1,#numbers,2 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3ahnrknq.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmp3ahnrknq.lua:7: in local 'candidate'\n\t/tmp/tmp3ahnrknq.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpul3fg90g.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpul3fg90g.lua:7: in local 'candidate'\n\t/tmp/tmpul3fg90g.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907427
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _, number in ipairs(numbers) do\n        min = math.min(min, number)\n        max = math.max(max, number)\n    end\n    if max == min then\n        return numbers\n    end\n    return map(function(number) return (number - min) / (max - min) end, numbers)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqd_rcopa.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpqd_rcopa.lua:7: in local 'candidate'\n\t/tmp/tmpqd_rcopa.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpul3fg90g.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpul3fg90g.lua:7: in local 'candidate'\n\t/tmp/tmpul3fg90g.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907427
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpul3fg90g.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpul3fg90g.lua:7: in local 'candidate'\n\t/tmp/tmpul3fg90g.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907427
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpul3fg90g.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpul3fg90g.lua:7: in local 'candidate'\n\t/tmp/tmpul3fg90g.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907427
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local max = math.max(...numbers)\n    local min = math.min(...numbers)\n    local scale = 1.0 / (max - min)\n    return map(function(x) return x * scale - min }, numbers)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpm2j4rbzj.lua:6: cannot use '...' outside a vararg function near '...'\n",
      "stdout": "",
      "timestamp": 1661907426
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 2 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 2 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw3wer6kd.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpw3wer6kd.lua:7: in local 'candidate'\n\t/tmp/tmpw3wer6kd.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907427
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpul3fg90g.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpul3fg90g.lua:7: in local 'candidate'\n\t/tmp/tmpul3fg90g.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907427
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _,n in ipairs(numbers) do\n        if n < min then min = n end\n        if n > max then max = n end\n    end\n    for _,n in ipairs(numbers) do\n        numbers[_] = (n - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7eu76dw7.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmp7eu76dw7.lua:7: in local 'candidate'\n\t/tmp/tmp7eu76dw7.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpul3fg90g.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpul3fg90g.lua:7: in local 'candidate'\n\t/tmp/tmpul3fg90g.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907427
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local result = {}\n    for i=1,#numbers,1 do\n        result[i] = numbers[i] / math.max(numbers[1], numbers[#numbers])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08jpbn38.lua:16: expected: {0.0, 1.0}\nactual: {0.040080160320641, 1.0}\nstack traceback:\n\t/tmp/tmp08jpbn38.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local n = #numbers\n    local min = numbers[1]\n    local max = numbers[1]\n    for i = 2, n, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, n, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpul3fg90g.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpul3fg90g.lua:7: in local 'candidate'\n\t/tmp/tmpul3fg90g.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907427
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i=1,#numbers,1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i=1,#numbers,1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq4l5w24w.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpq4l5w24w.lua:7: in local 'candidate'\n\t/tmp/tmpq4l5w24w.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 2 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 2 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw3wer6kd.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpw3wer6kd.lua:7: in local 'candidate'\n\t/tmp/tmpw3wer6kd.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907427
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _, number in ipairs(numbers) do\n        min = math.min(min, number)\n        max = math.max(max, number)\n    end\n    for _, number in ipairs(numbers) do\n        numbers[_] = (number - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpryiyag0h.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpryiyag0h.lua:7: in local 'candidate'\n\t/tmp/tmpryiyag0h.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _, number in ipairs(numbers) do\n        min = math.min(min, number)\n        max = math.max(max, number)\n    end\n    for _, number in ipairs(numbers) do\n        numbers[_] = (number - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpryiyag0h.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpryiyag0h.lua:7: in local 'candidate'\n\t/tmp/tmpryiyag0h.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _, number in ipairs(numbers) do\n        min = math.min(min, number)\n        max = math.max(max, number)\n    end\n    if max == min then\n        return numbers\n    end\n    return map(function(number)\n        return (number - min) / (max - min)\n    end, numbers)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeexv7b1w.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpeexv7b1w.lua:7: in local 'candidate'\n\t/tmp/tmpeexv7b1w.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local n = math.sqrt(reduce(function(a, b) a + b, numbers))\n    return map(function(x) return x / n), numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmpg5eg2c8m.lua:6: syntax error near '+'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _, number in ipairs(numbers) do\n        min = math.min(min, number)\n        max = math.max(max, number)\n    end\n    for _, number in ipairs(numbers) do\n        numbers[_] = number - min\n        numbers[_] /= max - min\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmpghyb5pd2.lua:14: syntax error near '/'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _, number in ipairs(numbers) do\n        min = math.min(min, number)\n        max = math.max(max, number)\n    end\n    for _, number in ipairs(numbers) do\n        numbers[_] = (number - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpryiyag0h.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpryiyag0h.lua:7: in local 'candidate'\n\t/tmp/tmpryiyag0h.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _, v in ipairs(numbers) do\n        min = math.min(min, v)\n        max = math.max(max, v)\n    end\n    if max == min then\n        return numbers\n    end\n    return map(function(v) return (v - min) / (max - min) end, numbers)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    if max == min then\n        return numbers\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn4b4kqhb.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpn4b4kqhb.lua:7: in local 'candidate'\n\t/tmp/tmpn4b4kqhb.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    if max == min then\n        return numbers\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn4b4kqhb.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpn4b4kqhb.lua:7: in local 'candidate'\n\t/tmp/tmpn4b4kqhb.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _, number in ipairs(numbers) do\n        min = math.min(min, number)\n        max = math.max(max, number)\n    end\n    return math.floor(min) .. \",\" .. math.ceil(max)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0dmxmrjw.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmp0dmxmrjw.lua:7: in local 'candidate'\n\t/tmp/tmp0dmxmrjw.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpul3fg90g.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpul3fg90g.lua:7: in local 'candidate'\n\t/tmp/tmpul3fg90g.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907427
    },
    {
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for _, number in ipairs(numbers) do\n        min = math.min(min, number)\n        max = math.max(max, number)\n    end\n    if max == min then\n        return numbers\n    end\n    return map(function(number) return number - min / (max - min) * (max - min) end, numbers)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpld0exki0.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpld0exki0.lua:7: in local 'candidate'\n\t/tmp/tmpld0exki0.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given table of numbers (of at least two elements), apply a linear transform to that table,\n-- such that the smallest number will become 0 and the largest will become 1\n-- >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n-- [0.0, 0.25, 0.5, 0.75, 1.0]\nlocal function rescale_to_unit(numbers)\n    local min = math.inf\n    local max = -math.inf\n    for i = 1, #numbers, 1 do\n        min = math.min(min, numbers[i])\n        max = math.max(max, numbers[i])\n    end\n    for i = 1, #numbers, 1 do\n        numbers[i] = (numbers[i] - min) / (max - min)\n    end\n    return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0, 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0, 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0, 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpul3fg90g.lua:7: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpul3fg90g.lua:7: in local 'candidate'\n\t/tmp/tmpul3fg90g.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907427
    }
  ]
}