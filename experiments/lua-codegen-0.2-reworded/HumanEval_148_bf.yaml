name: HumanEval_148_bf
language: lua
prompt: "-- There are eight planets in our solar system: the closerst to the Sun \n\
  -- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n-- Uranus,\
  \ Neptune.\n-- Write a function that takes two planet names as strings planet1 and\
  \ planet2. \n-- The function should return a table containing all planets whose\
  \ orbits are \n-- located between the orbit of planet1 and the orbit of planet2,\
  \ sorted by \n-- the proximity to the sun. \n-- The function should return an empty\
  \ table if planet1 or planet2\n-- are not correct planet names. \n-- Examples\n\
  -- >>> bf(\"Jupiter\", \"Neptune\")\n-- (\"Saturn\", \"Uranus\")\n-- >>> bf(\"Earth\"\
  , \"Mercury\")\n-- (\"Venus\")\n-- >>> bf(\"Mercury\", \"Uranus\")\n-- (\"Venus\"\
  , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nlocal function bf(planet1, planet2)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
  \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n  \
  \  lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
  \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
  \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
  \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
  \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local planets = {}\n    for i = 1, 8 do\n        if string.sub(planet1,\
    \ 1, string.len(planet1)) == string.sub(planet2, 1, string.len(planet2)) then\n\
    \            planets[i] = string.sub(planet1, 1, string.len(planet1))\n      \
    \  end\n        planet1 = string.sub(planet1, 1, string.len(planet1) - 1)\n  \
    \      planet2 = string.sub(planet2, 1, string.len(planet2) - 1)\n    end\n  \
    \  return planets\nend", "    local table = {}\n    local i = 0\n    while true\
    \ do\n        local planet = \"planet\" .. i\n        if planet == planet1 then\n\
    \            table[i] = planet\n            i = i + 1\n            break\n   \
    \     end\n        i = i + 1\n    end\n    i = 0\n    while true do\n        local\
    \ planet = \"planet\" .. i\n        if planet == planet2 then\n            table[i]\
    \ = planet\n            i = i + 1\n            break\n        end\n        i =\
    \ i + 1\n    end\n    return table\nend", "    local planets = {}\n    local i\
    \ = 1\n    while i <= 8 do\n        if string.sub(planet1, 1, string.len(planet1))\
    \ == string.sub(planet2, 1, string.len(planet2)) then\n            table.insert(planets,\
    \ string.sub(planet1, 1, string.len(planet1)))\n            table.insert(planets,\
    \ string.sub(planet2, 1, string.len(planet2)))\n            return planets\n \
    \       end\n        i = i + 1\n    end\nend", "    local table = {}\n    for\
    \ i = 1, 8 do\n        for j = 1, 8 do\n            if i < j then\n          \
    \      table[j] = table[j] or {planet1, planet2}\n            end\n        end\n\
    \    end\n    return table\nend", "    local planets = {}\n    local i = 0\n \
    \   while i < 8 do\n        if planets[planet1] == nil then\n            planets[planet1]\
    \ = i\n        elseif planets[planet2] == nil then\n            planets[planet2]\
    \ = i\n        else\n            table.insert(planets, i)\n            table.insert(planets,\
    \ i)\n        end\n        i = i + 1\n    end\n    return table.concat(planets,\
    \ \",\")\nend", "    local table = {}\n    local planet1 = string.lower(planet1)\n\
    \    local planet2 = string.lower(planet2)\n    if planet1 == \"earth\" and planet2\
    \ == \"mercury\" then\n        table[\"venus\"] = true\n    elseif planet1 ==\
    \ \"earth\" and planet2 == \"venus\" then\n        table[\"mercury\"] = true\n\
    \    elseif planet1 == \"mercury\" and planet2 == \"earth\" then\n        table[\"\
    venus\"] = true\n    elseif planet1 == \"mercury\" and planet2 == \"venus\" then\n\
    \        table[\"earth\"] = true\n    elseif planet1 == \"mercury\" and planet2\
    \ == \"mars\" then\n        table[\"venus\"] = true\n    elseif planet1 == \"\
    mercury\" and planet2 == \"jupiter\" then\n        table[\"earth\"] = true\n \
    \   elseif planet1 == \"mercury\" and planet2 == \"saturn\" then\n        table[\"\
    earth\"] = true\n    elseif planet1 == \"mercury\" and planet2 == \"uranus\" then\n\
    \        table[\"earth\"] = true\n    elseif planet1 == \"mercury\" and planet2\
    \ == \"neptune\" then\n        table[\"earth\"] = true\n    elseif planet1 ==\
    \ \"mars\" and planet2 == \"earth\" then\n        table[\"jupiter\"] = true\n\
    \    elseif planet1 == \"mars\" and planet2 == \"mercury\" then\n        table[\"\
    jupiter\"] = true\n    elseif planet1 == \"mars\" and planet2 == \"venus\" then\n\
    \        table[\"jupiter\"] = true\n    elseif planet1 == \"mars\" and planet2\
    \ == \"jupiter\" then\n        table[\"earth\"] = true\n    elseif planet1 ==\
    \ \"mars\" and planet2 == \"saturn\" then\n        table[\"jupiter\"] = true\n\
    \    elseif planet1 == \"mars\" and planet2 == \"uranus\" then\n        table[\"\
    earth\"] = true\n    elseif planet1 == \"mars\" and planet2 == \"neptune\" then\n\
    \        table[\"earth\"] = true\n    elseif planet1 == \"jupiter\" and planet2\
    \ == \"earth\"", "    local table = {}\n    for i = 1, 8 do\n        for j = 1,\
    \ 8 do\n            if i != j and math.abs(math.degrees(math.pi/2 - math.radians(planets[i].orbital_period)))\
    \ < math.degrees(math.pi/2 - math.radians(planets[j].orbital_period)) then\n \
    \               table[j] = table[j] or {planet1, planet2}\n            end\n \
    \       end\n    end\n    return table\nend", "    local planets = {}\n    for\
    \ i = 1, 8 do\n        if string.sub(planet1, 1, 3) == string.sub(planet2, 1,\
    \ 3) then\n            table.insert(planets, string.sub(planet1, 4, 5))\n    \
    \        table.insert(planets, string.sub(planet2, 4, 5))\n            return\
    \ planets\n        end\n        planet1 = string.sub(planet1, 1, 3)\n        planet2\
    \ = string.sub(planet2, 1, 3)\n    end\nend", "    local table = {}\n    local\
    \ i = 0\n    local j = 0\n    local k = 0\n    local l = 0\n    local m = 0\n\
    \    local n = 0\n    local o = 0\n    local p = 0\n    local q = 0\n    local\
    \ r = 0\n    local s = 0\n    local t = 0\n    local u = 0\n    local v = 0\n\
    \    local w = 0\n    local x = 0\n    local y = 0\n    local z = 0\n    local\
    \ a = 0\n    local b = 0\n    local c = 0\n    local d = 0\n    local e = 0\n\
    \    local f = 0\n    local g = 0\n    local h = 0\n    local i = 0\n    local\
    \ j = 0\n    local k = 0\n    local l = 0\n    local m = 0\n    local n = 0\n\
    \    local o = 0\n    local p = 0\n    local q = 0\n    local r = 0\n    local\
    \ s = 0\n    local t = 0\n    local u = 0\n    local v = 0\n    local w = 0\n\
    \    local x = 0\n    local y = 0\n    local z = 0\n    local a = 0\n    local\
    \ b = 0\n    local c = 0\n    local d = 0\n    local e = 0\n    local f = 0\n\
    \    local g = 0\n    local h = 0\n    local i = 0\n    local j = 0\n    local\
    \ k = 0\n    local l = 0\n    local m = 0\n    local n = 0\n    local o = 0\n\
    \    local p = 0\n    local q = 0\n    local r = 0\n    local s = 0\n    local\
    \ t = 0\n    local u = 0\n    local v = 0\n    local w = 0\n    local x = 0\n\
    \    local y = 0\n    local z = 0\n    local a = 0\n    local b = 0\n    local\
    \ c = 0\n    local d = 0\n    local e = 0\n    local f = 0\n    local g = 0\n\
    \    local h = 0\n    local i = 0\n    local j = 0\n    local k = 0\n    local\
    \ l = 0\n    local m = 0\n    local n = 0\n    local", "    local planets = {}\n\
    \    for i = 1, 8 do\n        if string.sub(planet1, 1, i) == string.sub(planet2,\
    \ 1, i) then\n            table.insert(planets, string.sub(planet1, 1, i))\n \
    \       end\n    end\n    return planets\nend", "    local table = {}\n    local\
    \ planet1 = tolower(planet1)\n    local planet2 = tolower(planet2)\n    if planet1\
    \ == \"mercury\" and planet2 == \"venus\" then\n        table = { \"venus\" }\n\
    \    elseif planet1 == \"venus\" and planet2 == \"earth\" then\n        table\
    \ = { \"earth\" }\n    elseif planet1 == \"earth\" and planet2 == \"mars\" then\n\
    \        table = { \"mars\" }\n    elseif planet1 == \"mars\" and planet2 == \"\
    jupiter\" then\n        table = { \"jupiter\" }\n    elseif planet1 == \"jupiter\"\
    \ and planet2 == \"saturn\" then\n        table = { \"saturn\" }\n    elseif planet1\
    \ == \"saturn\" and planet2 == \"uranus\" then\n        table = { \"uranus\" }\n\
    \    elseif planet1 == \"uranus\" and planet2 == \"neptune\" then\n        table\
    \ = { \"neptune\" }\n    elseif planet1 == \"neptune\" and planet2 == \"pluto\"\
    \ then\n        table = { \"pluto\" }\n    else\n        table = {}\n    return\
    \ table\nend\n<|endoftext|><|python|>#                                       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                 ", "    local planets = {}\n    for i = 1, 8\
    \ do\n        if string.sub(planet1, 1, string.len(planet1)) == string.sub(planet2,\
    \ 1, string.len(planet2)) then\n            planets[i] = string.sub(planet1, 1,\
    \ string.len(planet1))\n        end\n        if string.sub(planet1, 1, string.len(planet1))\
    \ > string.sub(planet2, 1, string.len(planet2)) then\n            planets[i] =\
    \ string.sub(planet2, 1, string.len(planet2))\n        end\n        if string.sub(planet1,\
    \ 1, string.len(planet1)) < string.sub(planet2, 1, string.len(planet2)) then\n\
    \            planets[i] = string.sub(planet1, 1, string.len(planet1))\n      \
    \  end\n        if string.sub(planet1, 1, string.len(planet1)) < string.sub(planet2,\
    \ 1, string.len(planet2)) then\n            planets[i] = string.sub(planet2, 1,\
    \ string.len(planet2))\n        end\n        if string.sub(planet1, 1, string.len(planet1))\
    \ > string.sub(planet2, 1, string.len(planet2)) then\n            planets[i] =\
    \ string.sub(planet1, 1, string.len(planet1))\n        end\n        if string.sub(planet1,\
    \ 1, string.len(planet1)) == string.sub(planet2, 1, string.len(planet2)) then\n\
    \            planets[i] = string.sub(planet1, 1, string.len(planet1))\n      \
    \  end\n    end\n    return planets\nend\n<|endoftext|><|python|>#", "    local\
    \ table = {}\n    for i = 1, 8 do\n        if string.sub(planet1, 1, i) == string.sub(planet2,\
    \ 1, i) then\n            table[i] = string.sub(planet1, i+1)\n            table[i+1]\
    \ = string.sub(planet2, i+1)\n            break\n        end\n    end\n    return\
    \ table\nend", "    local planets = {}\n    for i = 1, 8 do\n        if string.sub(planet1,\
    \ 1, 3) == string.sub(planet2, 1, 3) then\n            table.insert(planets, string.sub(planet1,\
    \ 4, 5))\n            table.insert(planets, string.sub(planet2, 4, 5))\n     \
    \   end\n        planet1 = string.sub(planet1, 1)\n        planet2 = string.sub(planet2,\
    \ 1)\n    end\n    return planets\nend", "    local planets = {}\n    for i =\
    \ 1, 8 do\n        if string.sub(planet1, 1, string.len(planet1)) == string.sub(planet2,\
    \ 1, string.len(planet2)) then\n            table.insert(planets, string.sub(planet1,\
    \ 1, string.len(planet1)))\n        end\n        planet1 = string.sub(planet1,\
    \ 1, string.len(planet1))\n        planet2 = string.sub(planet2, 1, string.len(planet2))\n\
    \    end\n    return table.sort(planets)\nend", "    local planets = {}\n    for\
    \ i = 1, 8 do\n        if string.sub(planet1, 1, string.len(planet1)) == string.sub(planet2,\
    \ 1, string.len(planet2)) then\n            table.insert(planets, string.sub(planet1,\
    \ 1, string.len(planet1)))\n        end\n        if string.sub(planet1, 1, string.len(planet1))\
    \ < string.sub(planet2, 1, string.len(planet2)) then\n            table.insert(planets,\
    \ string.sub(planet1, 1, string.len(planet1)))\n        end\n        if string.sub(planet1,\
    \ 1, string.len(planet1)) > string.sub(planet2, 1, string.len(planet2)) then\n\
    \            table.insert(planets, string.sub(planet1, 1, string.len(planet1)))\n\
    \        end\n        if string.sub(planet1, 1, string.len(planet1)) == string.sub(planet2,\
    \ 1, string.len(planet2)) then\n            table.insert(planets, string.sub(planet1,\
    \ 1, string.len(planet1)))\n        end\n    end\n    return planets\nend", " \
    \   local planets = {}\n    for i=1,8 do\n        if string.sub(planet1, 1, string.len(planet1))\
    \ == string.sub(planet2, 1, string.len(planet2)) then\n            planets[i]\
    \ = string.sub(planet1, 1, string.len(planet1))\n            break\n        end\n\
    \    end\n    return planets\nend", "    local planets = {}\n    local i = 0\n\
    \    while true do\n        local p = getPlanet(i)\n        if p ~= nil then\n\
    \            if p.name == planet1 then\n                if p.orbital_period ~=\
    \ nil then\n                    if p.orbital_period > 0 then\n               \
    \         if p.orbital_period > 0 then\n                            if p.orbital_period\
    \ > 0 then\n                                if p.orbital_period > 0 then\n   \
    \                                 if p.orbital_period > 0 then\n             \
    \                           if p.orbital_period > 0 then\n                   \
    \                         if p.orbital_period > 0 then\n                     \
    \                           if p.orbital_period > 0 then\n                   \
    \                                 if p.orbital_period > 0 then\n             \
    \                                           if p.orbital_period > 0 then\n   \
    \                                                         if p.orbital_period\
    \ > 0 then\n                                                                if\
    \ p.orbital_period > 0 then\n                                                \
    \                    if p.orbital_period > 0 then\n                          \
    \                                              if p.orbital_period > 0 then\n\
    \                                                                            if\
    \ p.orbital_period > 0 then\n                                                \
    \                                if p.orbital_period > 0 then\n              \
    \                                                                      if p.orbital_period\
    \ > 0 then\n                                                                 \
    \                       if p.orbital_period > 0 then\n                       \
    \                                                                     if p.orbital_period\
    \ > 0 then\n                                                                 \
    \                               if p.orbital_period > 0 then\n               \
    \                                                                            \
    \         if p.orbital_period > 0 then\n                                     \
    \                                                                   if p.orbital_period\
    \ > 0 then\n                                                                 \
    \                                           if p.orbital_period > 0 then\n   \
    \                                                                            \
    \                                 if p.orbital_period > 0 then\n             \
    \                                                                            \
    \                              if p.orbital_period > 0 then\n                \
    \                                                                            \
    \                               if p.orbital_period > 0 then\n               \
    \                                                                            \
    \                                     if p.orbital_period > 0 then\n         \
    \                                                                            \
    \                                                  if p.orbital_period > 0 then\n\
    \                                                                            \
    \                                                                ", "    local\
    \ planets = {}\n    local i = 1\n    while i <= 8 do\n        if string.sub(planet1,\
    \ 1, 5) == string.sub(planets[i], 1, 5) or string.sub(planet2, 1, 5) == string.sub(planets[i],\
    \ 1, 5) then\n            table.insert(planets, planets[i])\n            i = i\
    \ + 1\n        end\n        i = i + 1\n    end\n    return table.sort(planets)\n\
    end", "    local table = {}\n    local i = 0\n    while i < 8 do\n        if table[planet1]\
    \ == nil and table[planet2] == nil then\n            table[planet1] = i\n    \
    \        table[planet2] = i\n            i = i + 1\n        else\n           \
    \ if table[planet1] > table[planet2] then\n                table[planet1] = i\n\
    \                table[planet2] = i\n            else\n                table[planet2]\
    \ = i\n                table[planet1] = i\n            end\n        end\n    end\n\
    \    return table\nend", "    local planets = {}\n    local i = 0\n    while true\
    \ do\n        local planet = getPlanet(i)\n        if planet ~= nil then\n   \
    \         if planet.name == planet1 then\n                if planet2 ~= nil then\n\
    \                    local orbit1 = planet.orbit\n                    local orbit2\
    \ = planet.orbit\n                    local distance = math.sqrt(orbit1.x * orbit1.x\
    \ + orbit1.y * orbit1.y)\n                    local distance2 = math.sqrt(orbit2.x\
    \ * orbit2.x + orbit2.y * orbit2.y)\n                    if distance2 > distance\
    \ then\n                        table.insert(planets, planet)\n              \
    \      end\n                end\n            end\n        end\n        i = i +\
    \ 1\n        if i > 9 then break end\n    end\n    return planets\nend", "   \
    \ local planets = {}\n    for i = 1, 8 do\n        if string.sub(planet1, 1, i)\
    \ == string.sub(planet2, 1, i) then\n            table.insert(planets, string.sub(planet1,\
    \ 1, i))\n        end\n    end\n    return planets\nend", "    local planets =\
    \ {}\n    for i = 1, 8 do\n        if string.sub(planet1, 1, string.len(planet1))\
    \ == string.sub(planet2, 1, string.len(planet2)) then\n            table.insert(planets,\
    \ string.sub(planet1, 1, string.len(planet1)))\n        end\n        planet1 =\
    \ string.sub(planet1, 1, string.len(planet1))\n        planet2 = string.sub(planet2,\
    \ 1, string.len(planet2))\n    end\n    return table.sort(planets)\nend", "  \
    \  local planets = {}\n    for i = 1, 8 do\n        if string.sub(planet1, 1,\
    \ string.len(planet1)) == string.sub(planet2, 1, string.len(planet2)) then\n \
    \           table.insert(planets, string.sub(planet1, 1, string.len(planet1)))\n\
    \        end\n        planet1 = string.sub(planet1, 1, string.len(planet1))\n\
    \        planet2 = string.sub(planet2, 1, string.len(planet2))\n    end\n    return\
    \ planets\nend", "    local planets = {}\n    local i = 1\n    while i <= 8 do\n\
    \        if string.sub(planet1, 1, string.len(planet1)) == string.sub(planet2,\
    \ 1, string.len(planet2)) then\n            table.insert(planets, string.sub(planet1,\
    \ 1, string.len(planet1)))\n            table.insert(planets, string.sub(planet2,\
    \ 1, string.len(planet2)))\n            return planets\n        end\n        i\
    \ = i + 1\n    end\n    return nil\nend", "    local table = {}\n    local p1\
    \ = string.lower(planet1)\n    local p2 = string.lower(planet2)\n    if p1 ==\
    \ \"earth\" and p2 == \"mercury\" then\n        table[\"venus\"] = true\n    elseif\
    \ p1 == \"mercury\" and p2 == \"earth\" then\n        table[\"venus\"] = true\n\
    \    elseif p1 == \"earth\" and p2 == \"mars\" then\n        table[\"venus\"]\
    \ = true\n    elseif p1 == \"mars\" and p2 == \"earth\" then\n        table[\"\
    venus\"] = true\n    elseif p1 == \"earth\" and p2 == \"jupiter\" then\n     \
    \   table[\"venus\"] = true\n    elseif p1 == \"jupiter\" and p2 == \"earth\"\
    \ then\n        table[\"venus\"] = true\n    elseif p1 == \"earth\" and p2 ==\
    \ \"saturn\" then\n        table[\"venus\"] = true\n    elseif p1 == \"saturn\"\
    \ and p2 == \"earth\" then\n        table[\"venus\"] = true\n    elseif p1 ==\
    \ \"earth\" and p2 == \"uranus\" then\n        table[\"venus\"] = true\n    elseif\
    \ p1 == \"uranus\" and p2 == \"earth\" then\n        table[\"venus\"] = true\n\
    \    elseif p1 == \"earth\" and p2 == \"neptune\" then\n        table[\"venus\"\
    ] = true\n    elseif p1 == \"neptune\" and p2 == \"earth\" then\n        table[\"\
    venus\"] = true\n    elseif p1 == \"mars\" and p2 == \"jupiter\" then\n      \
    \  table[\"venus\"] = true\n    elseif p1 == \"jupiter\" and p2 == \"mars\" then\n\
    \        table[\"venus\"] = true\n    elseif p1 == \"mars\" and p2 == \"saturn\"\
    \ then\n        table[\"venus\"] = true\n    elseif p1 == \"saturn\" and p2 ==\
    \ \"mars\" then\n        table[\"venus\"] = true\n    elseif p1 == \"mars\" and\
    \ p2 == \"uranus\" then\n        table[\"venus", "    local planets = {}\n   \
    \ local p1 = planets[planet1]\n    local p2 = planets[planet2]\n    if p1 and\
    \ p2 then\n        local result = {}\n        for i = 1, p1.count, 2 do\n    \
    \        for j = 1, p2.count, 2 do\n                if p1.x[i] > p2.x[j] and p1.x[i]\
    \ < p2.x[j+1] and p1.y[i] > p2.y[j] and p1.y[i] < p2.y[j+1] then\n           \
    \         table.insert(result, p1.name)\n                    table.insert(result,\
    \ p2.name)\n                    break\n            end\n        end\n        return\
    \ result\n    end\n    return {}\nend", "    local planets = {}\n    for i = 1,\
    \ 8 do\n        if string.sub(planet1, 1, i) == string.sub(planet2, 1, i) then\n\
    \            table.insert(planets, string.sub(planet1, 1, i))\n        end\n \
    \   end\n    return planets\nend", "    local table = {}\n    local planets =\
    \ {\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"\n    }\n    local i = 1\n    while i <= planets.count\
    \ do\n        if planets[i] == planet1 then\n            table[i] = {\n      \
    \          \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"\n            }\n            table[i] = table[i]\n  \
    \          table[i] = table[i]\n            table[i] = table[i]\n            table[i]\
    \ = table[i]\n            table[i] = table[i]\n            table[i] = table[i]\n\
    \            table[i] = table[i]\n            table[i] = table[i]\n          \
    \  table[i] = table[i]\n            table[i] = table[i]\n            table[i]\
    \ = table[i]\n            table[i] = table[i]\n            table[i] = table[i]\n\
    \            table[i] = table[i]\n            table[i] = table[i]\n          \
    \  table[i] = table[i]\n            table[i] = table[i]\n            table[i]\
    \ = table[i]\n            table[i] = table[i]\n            table[i] = table[i]\n\
    \            table[i] = table[i]\n            table[i] = table[i]\n          \
    \  table[i] = table[i]\n            table[i] = table[i]\n            table[i]\
    \ = table[i]\n            table[i] = table[i]\n            table[i] = table[i]\n\
    \            table[i] = table[i]\n            table[i] = table[i]\n          \
    \  table[i] = table[i]\n            table[i] = table[i]\n            table[i]\
    \ = table[i]\n            table[i] = table[i]\n            table[i] = table[i]\n\
    \            table[i] = table[i]\n            table[i] = table", "    local table\
    \ = {}\n    local i = 0\n    local j = 0\n    local k = 0\n    local l = 0\n \
    \   local m = 0\n    local n = 0\n    local o = 0\n    local p = 0\n    local\
    \ q = 0\n    local r = 0\n    local s = 0\n    local t = 0\n    local u = 0\n\
    \    local v = 0\n    local w = 0\n    local x = 0\n    local y = 0\n    local\
    \ z = 0\n    local a = 0\n    local b = 0\n    local c = 0\n    local d = 0\n\
    \    local e = 0\n    local f = 0\n    local g = 0\n    local h = 0\n    local\
    \ i = 0\n    local j = 0\n    local k = 0\n    local l = 0\n    local m = 0\n\
    \    local n = 0\n    local o = 0\n    local p = 0\n    local q = 0\n    local\
    \ r = 0\n    local s = 0\n    local t = 0\n    local u = 0\n    local v = 0\n\
    \    local w = 0\n    local x = 0\n    local y = 0\n    local z = 0\n    local\
    \ a = 0\n    local b = 0\n    local c = 0\n    local d = 0\n    local e = 0\n\
    \    local f = 0\n    local g = 0\n    local h = 0\n    local i = 0\n    local\
    \ j = 0\n    local k = 0\n    local l = 0\n    local m = 0\n    local n = 0\n\
    \    local o = 0\n    local p = 0\n    local q = 0\n    local r = 0\n    local\
    \ s = 0\n    local t = 0\n    local u = 0\n    local v = 0\n    local w = 0\n\
    \    local x = 0\n    local y = 0\n    local z = 0\n    local a = 0\n    local\
    \ b = 0\n    local c = 0\n    local d = 0\n    local e = 0\n    local f = 0\n\
    \    local g = 0\n    local h = 0\n    local i = 0\n    local j = 0\n    local\
    \ k = 0\n    local l = 0\n    local m = 0\n    local n = 0\n    local", "    local\
    \ planets = {}\n    local p1 = planets:new()\n    local p2 = planets:new()\n \
    \   local p1_orb = p1:orbit(planet1)\n    local p2_orb = p2:orbit(planet2)\n \
    \   local result = {}\n    for i = 1, p1_orb:size() do\n        for j = 1, p2_orb:size()\
    \ do\n            if p1_orb[i] < p2_orb[j] then\n                result[p1_orb[i]]\
    \ = true\n            end\n        end\n    end\n    return result\nend", "  \
    \  local table = {}\n    local planet1 = string.lower(planet1)\n    local planet2\
    \ = string.lower(planet2)\n    if planet1 == \"earth\" and planet2 == \"mercury\"\
    \ then\n        table = { \"venus\" }\n    elseif planet1 == \"earth\" and planet2\
    \ == \"venus\" then\n        table = { \"mercury\" }\n    elseif planet1 == \"\
    earth\" and planet2 == \"mars\" then\n        table = { \"mercury\", \"venus\"\
    \ }\n    elseif planet1 == \"earth\" and planet2 == \"jupiter\" then\n       \
    \ table = { \"mercury\", \"venus\", \"mars\" }\n    elseif planet1 == \"earth\"\
    \ and planet2 == \"saturn\" then\n        table = { \"mercury\", \"venus\", \"\
    mars\", \"jupiter\" }\n    elseif planet1 == \"mars\" and planet2 == \"jupiter\"\
    \ then\n        table = { \"mercury\", \"venus\", \"earth\", \"saturn\" }\n  \
    \  elseif planet1 == \"mars\" and planet2 == \"saturn\" then\n        table =\
    \ { \"mercury\", \"venus\", \"earth\", \"jupiter\" }\n    elseif planet1 == \"\
    mercury\" and planet2 == \"jupiter\" then\n        table = { \"earth\", \"venus\"\
    , \"mars\" }\n    elseif planet1 == \"mercury\" and planet2 == \"saturn\" then\n\
    \        table = { \"earth\", \"venus\", \"mars\", \"jupiter\" }\n    elseif planet1\
    \ == \"venus\" and planet2 == \"jupiter\" then\n        table = { \"earth\", \"\
    mercury\" }\n    elseif planet1 == \"venus\" and planet2 == \"saturn\" then\n\
    \        table = { \"earth\", \"mercury\", \"mars\", \"jupiter\" }\n    elseif\
    \ planet1 == \"mars\" and planet2 == \"saturn\" then\n        table = { \"earth\"\
    , \"mercury\", \"venus\", \"jupiter\" }\n    elseif planet1 == \"jupiter\" and\
    \ planet2 == \"saturn\" then\n        table = { \"", "    local planets = {}\n\
    \    local i = 1\n    while i <= 8 do\n        if string.sub(planet1, 1, string.len(planet1))\
    \ == string.sub(planet2, 1, string.len(planet2)) then\n            table.insert(planets,\
    \ string.sub(planet1, 1, string.len(planet1)))\n            table.insert(planets,\
    \ string.sub(planet2, 1, string.len(planet2)))\n            return planets\n \
    \       end\n        i = i + 1\n    end\n    return nil\nend", "    local table\
    \ = {}\n    for i = 1, 8 do\n        if string.sub(planet1, 1, i) == string.sub(planet2,\
    \ 1, i) then\n            table[i] = string.sub(planet1, i+1)\n            table[i+1]\
    \ = string.sub(planet2, i+1)\n            break\n        end\n    end\n    return\
    \ table\nend", "    local planets = {}\n    local i = 1\n    while i <= 8 do\n\
    \        if string.sub(planet1, 1, 5) == string.sub(planet2, 1, 5) then\n    \
    \        table.insert(planets, string.sub(planet1, 6, 9))\n            table.insert(planets,\
    \ string.sub(planet2, 6, 9))\n            return planets\n        end\n      \
    \  i = i + 1\n    end\nend", "    local table = {}\n    local planet1 = string.lower(planet1)\n\
    \    local planet2 = string.lower(planet2)\n    if planet1 == \"mercury\" and\
    \ planet2 == \"venus\" then\n        table[1] = \"Mercury\"\n        table[2]\
    \ = \"Venus\"\n        table[3] = \"Earth\"\n        table[4] = \"Mars\"\n   \
    \     table[5] = \"Jupiter\"\n        table[6] = \"Saturn\"\n        table[7]\
    \ = \"Uranus\"\n        table[8] = \"Neptune\"\n    elseif planet1 == \"venus\"\
    \ and planet2 == \"earth\" then\n        table[1] = \"Venus\"\n        table[2]\
    \ = \"Earth\"\n        table[3] = \"Mars\"\n        table[4] = \"Jupiter\"\n \
    \       table[5] = \"Saturn\"\n        table[6] = \"Uranus\"\n        table[7]\
    \ = \"Neptune\"\n        table[8] = \"Mercury\"\n    elseif planet1 == \"earth\"\
    \ and planet2 == \"mars\" then\n        table[1] = \"Earth\"\n        table[2]\
    \ = \"Mars\"\n        table[3] = \"Jupiter\"\n        table[4] = \"Saturn\"\n\
    \        table[5] = \"Uranus\"\n        table[6] = \"Neptune\"\n        table[7]\
    \ = \"Mercury\"\n        table[8] = \"Venus\"\n    elseif planet1 == \"mars\"\
    \ and planet2 == \"jupiter\" then\n        table[1] = \"Mars\"\n        table[2]\
    \ = \"Jupiter\"\n        table[3] = \"Saturn\"\n        table[4] = \"Uranus\"\n\
    \        table[5] = \"Neptune\"\n        table[6] = \"Mercury\"\n        table[7]\
    \ = \"Venus\"\n        table[8] = \"Earth\"\n    elseif planet1 == \"jupiter\"\
    \ and planet2 == \"saturn\" then\n        table[1] = \"Jupiter\"\n        table[2]\
    \ = \"Saturn\"\n        table[3] = \"U", "    local table = {}\n    local planet1\
    \ = string.lower(planet1)\n    local planet2 = string.lower(planet2)\n    if planet1\
    \ ~= \"mercury\" and planet1 ~= \"venus\" and planet1 ~= \"earth\" and planet1\
    \ ~= \"mars\" and planet1 ~= \"jupiter\" and planet1 ~= \"saturn\" and planet1\
    \ ~= \"uranus\" and planet1 ~= \"neptune\" then\n        table[1] = \"planet1\
    \ is not correct\"\n    elseif planet2 ~= \"mercury\" and planet2 ~= \"venus\"\
    \ and planet2 ~= \"earth\" and planet2 ~= \"mars\" and planet2 ~= \"jupiter\"\
    \ and planet2 ~= \"saturn\" and planet2 ~= \"uranus\" and planet2 ~= \"neptune\"\
    \ then\n        table[1] = \"planet2 is not correct\"\n    else\n        for i\
    \ = 1, 9 do\n            if i ~= 1 then\n                table[i] = string.format(\"\
    %s\", planet1)\n            end\n            if i ~= 2 then\n                table[i]\
    \ = string.format(\"%s\", planet2)\n            end\n            if i ~= 3 then\n\
    \                table[i] = string.format(\"%s\", \"earth\")\n            end\n\
    \            if i ~= 4 then\n                table[i] = string.format(\"%s\",\
    \ \"mars\")\n            end\n            if i ~= 5 then\n                table[i]\
    \ = string.format(\"%s\", \"jupiter\")\n            end\n            if i ~= 6\
    \ then\n                table[i] = string.format(\"%s\", \"saturn\")\n       \
    \     end\n            if i ~= 7 then\n                table[i] = string.format(\"\
    %s\", \"uranus\")\n            end\n            if i ~= 8 then\n             \
    \   table[i] = string.format(\"%s\", \"neptune\")\n            end\n        end\n\
    \    end\n    return table\nend", "    local table = {}\n    local i = 1\n   \
    \ while i <= 8 do\n        if string.sub(planet1, 1, string.len(planet1)) == string.sub(planet2,\
    \ 1, string.len(planet2)) then\n            table[i] = string.sub(planet1, 1,\
    \ string.len(planet1))\n            i = i + 1\n        end\n        i = i + 1\n\
    \    end\n    return table\nend", "    local table = {}\n    local planet1 = string.lower(planet1)\n\
    \    local planet2 = string.lower(planet2)\n    if planet1 == \"earth\" and planet2\
    \ == \"mercury\" then\n        table[1] = \"Mercury\"\n    elseif planet1 == \"\
    earth\" and planet2 == \"venus\" then\n        table[1] = \"Venus\"\n    elseif\
    \ planet1 == \"earth\" and planet2 == \"mars\" then\n        table[1] = \"Mars\"\
    \n    elseif planet1 == \"earth\" and planet2 == \"jupiter\" then\n        table[1]\
    \ = \"Jupiter\"\n    elseif planet1 == \"earth\" and planet2 == \"saturn\" then\n\
    \        table[1] = \"Saturn\"\n    elseif planet1 == \"mars\" and planet2 ==\
    \ \"jupiter\" then\n        table[2] = \"Jupiter\"\n    elseif planet1 == \"mars\"\
    \ and planet2 == \"saturn\" then\n        table[2] = \"Saturn\"\n    elseif planet1\
    \ == \"mercury\" and planet2 == \"jupiter\" then\n        table[3] = \"Jupiter\"\
    \n    elseif planet1 == \"mercury\" and planet2 == \"saturn\" then\n        table[3]\
    \ = \"Saturn\"\n    elseif planet1 == \"mercury\" and planet2 == \"uranus\" then\n\
    \        table[3] = \"Uranus\"\n    elseif planet1 == \"mercury\" and planet2\
    \ == \"neptune\" then\n        table[3] = \"Neptune\"\n    elseif planet1 == \"\
    mars\" and planet2 == \"uranus\" then\n        table[4] = \"Uranus\"\n    elseif\
    \ planet1 == \"mars\" and planet2 == \"neptune\" then\n        table[4] = \"Neptune\"\
    \n    elseif planet1 == \"jupiter\" and planet2 == \"saturn\" then\n        table[5]\
    \ = \"Saturn\"\n    elseif planet1 == \"jupiter\" and planet2 == \"uranus\" then\n\
    \        table[5] = \"Uranus\"\n    elseif planet1 == \"jupiter\"", "    local\
    \ table = {}\n    local planet1 = string.lower(planet1)\n    local planet2 = string.lower(planet2)\n\
    \    if planet1 == \"earth\" and planet2 == \"mercury\" then\n        table =\
    \ { \"mercury\" }\n    elseif planet1 == \"earth\" and planet2 == \"venus\" then\n\
    \        table = { \"venus\" }\n    elseif planet1 == \"earth\" and planet2 ==\
    \ \"mars\" then\n        table = { \"mars\" }\n    elseif planet1 == \"earth\"\
    \ and planet2 == \"jupiter\" then\n        table = { \"jupiter\" }\n    elseif\
    \ planet1 == \"earth\" and planet2 == \"saturn\" then\n        table = { \"saturn\"\
    \ }\n    elseif planet1 == \"earth\" and planet2 == \"uranus\" then\n        table\
    \ = { \"uranus\" }\n    elseif planet1 == \"earth\" and planet2 == \"neptune\"\
    \ then\n        table = { \"neptune\" }\n    elseif planet1 == \"mercury\" and\
    \ planet2 == \"earth\" then\n        table = { \"earth\" }\n    elseif planet1\
    \ == \"mercury\" and planet2 == \"venus\" then\n        table = { \"venus\" }\n\
    \    elseif planet1 == \"mercury\" and planet2 == \"mars\" then\n        table\
    \ = { \"mars\" }\n    elseif planet1 == \"mercury\" and planet2 == \"jupiter\"\
    \ then\n        table = { \"jupiter\" }\n    elseif planet1 == \"mercury\" and\
    \ planet2 == \"saturn\" then\n        table = { \"saturn\" }\n    elseif planet1\
    \ == \"mercury\" and planet2 == \"uranus\" then\n        table = { \"uranus\"\
    \ }\n    elseif planet1 == \"mercury\" and planet2 == \"neptune\" then\n     \
    \   table = { \"neptune\" }\n    elseif planet1 == \"venus\" and planet2 == \"\
    earth\" then\n        table = { \"earth\" }\n    elseif planet1 == \"venus\" and\
    \ planet2 == \"mars\" then\n        table = { \"mars\" }", "    local table =\
    \ {}\n    for i = 1, 8 do\n        if i < 7 then\n            table[i] = \" \"\
    \n        else\n            table[i] = \"|\"\n        end\n    end\n    table[1]\
    \ = \" \"\n    table[2] = \" \"\n    table[3] = \" \"\n    table[4] = \" \"\n\
    \    table[5] = \" \"\n    table[6] = \" \"\n    table[7] = \" \"\n    table[8]\
    \ = \" \"\n    table[9] = \" \"\n    table[10] = \" \"\n    table[11] = \" \"\n\
    \    table[12] = \" \"\n    table[13] = \" \"\n    table[14] = \" \"\n    table[15]\
    \ = \" \"\n    table[16] = \" \"\n    table[17] = \" \"\n    table[18] = \" \"\
    \n    table[19] = \" \"\n    table[20] = \" \"\n    table[21] = \" \"\n    table[22]\
    \ = \" \"\n    table[23] = \" \"\n    table[24] = \" \"\n    table[25] = \" \"\
    \n    table[26] = \" \"\n    table[27] = \" \"\n    table[28] = \" \"\n    table[29]\
    \ = \" \"\n    table[30] = \" \"\n    table[31] = \" \"\n    table[32] = \" \"\
    \n    table[33] = \" \"\n    table[34] = \" \"\n    table[35] = \" \"\n    table[36]\
    \ = \" \"\n    table[37] = \" \"\n    table[38] = \" \"\n    table[39] = \" \"\
    \n    table[40] = \" \"\n    table[41] = \" \"\n    table[42] = \" \"\n    table[43]\
    \ = \" \"\n    table[44] = \" \"\n    table[45] = \" \"\n    table[46] = \" \"\
    \n    table[47] = \" \"\n    table[48] = \" \"\n    table[49] = \" \"\n    table[50]\
    \ = \" \"\n    table[51] = \" \"\n    table[", "    local table = {}\n    local\
    \ i = 0\n    local j = 0\n    local k = 0\n    local l = 0\n    local m = 0\n\
    \    local n = 0\n    local o = 0\n    local p = 0\n    local q = 0\n    local\
    \ r = 0\n    local s = 0\n    local t = 0\n    local u = 0\n    local v = 0\n\
    \    local w = 0\n    local x = 0\n    local y = 0\n    local z = 0\n    local\
    \ a = 0\n    local b = 0\n    local c = 0\n    local d = 0\n    local e = 0\n\
    \    local f = 0\n    local g = 0\n    local h = 0\n    local i = 0\n    local\
    \ j = 0\n    local k = 0\n    local l = 0\n    local m = 0\n    local n = 0\n\
    \    local o = 0\n    local p = 0\n    local q = 0\n    local r = 0\n    local\
    \ s = 0\n    local t = 0\n    local u = 0\n    local v = 0\n    local w = 0\n\
    \    local x = 0\n    local y = 0\n    local z = 0\n    local a = 0\n    local\
    \ b = 0\n    local c = 0\n    local d = 0\n    local e = 0\n    local f = 0\n\
    \    local g = 0\n    local h = 0\n    local i = 0\n    local j = 0\n    local\
    \ k = 0\n    local l = 0\n    local m = 0\n    local n = 0\n    local o = 0\n\
    \    local p = 0\n    local q = 0\n    local r = 0\n    local s = 0\n    local\
    \ t = 0\n    local u = 0\n    local v = 0\n    local w = 0\n    local x = 0\n\
    \    local y = 0\n    local z = 0\n    local a = 0\n    local b = 0\n    local\
    \ c = 0\n    local d = 0\n    local e = 0\n    local f = 0\n    local g = 0\n\
    \    local h = 0\n    local i = 0\n    local j = 0\n    local k = 0\n    local\
    \ l = 0\n    local m = 0\n    local n = 0\n    local", "    local table = {}\n\
    \    local planet1 = tostring(planet1)\n    local planet2 = tostring(planet2)\n\
    \    local planets = {\n        \"Mercury\": 1, \"Venus\": 2, \"Earth\": 3, \"\
    Mars\": 4, \"Jupiter\": 5,\n        \"Saturn\": 6, \"Uranus\": 7, \"Neptune\"\
    : 8\n    }\n    for k, v in pairs(planets) do\n        table[v] = {}\n    end\n\
    \    for k, v in pairs(planets) do\n        table[v][k] = 0\n    end\n    for\
    \ k, v in pairs(planets) do\n        table[v][k] = 0\n    end\n    for k, v in\
    \ pairs(planets) do\n        table[v][k] = 0\n    end\n    for k, v in pairs(planets)\
    \ do\n        table[v][k] = 0\n    end\n    for k, v in pairs(planets) do\n  \
    \      table[v][k] = 0\n    end\n    for k, v in pairs(planets) do\n        table[v][k]\
    \ = 0\n    end\n    for k, v in pairs(planets) do\n        table[v][k] = 0\n \
    \   end\n    for k, v in pairs(planets) do\n        table[v][k] = 0\n    end\n\
    \    for k, v in pairs(planets) do\n        table[v][k] = 0\n    end\n    for\
    \ k, v in pairs(planets) do\n        table[v][k] = 0\n    end\n    for k, v in\
    \ pairs(planets) do\n        table[v][k] = 0\n    end\n    for k, v in pairs(planets)\
    \ do\n        table[v][k] = 0\n    end\n    for k, v in pairs(planets) do\n  \
    \      table[v][k] = 0\n    end\n    for k, v in pairs(planets) do\n        table[v][k]\
    \ = 0\n    end\n    for k, v in pairs(planets) do\n        table[v][k] = 0\n \
    \   end\n    for k, v in pairs(", "    local table = {}\n    for i=1,8 do\n  \
    \      if string.sub(planet1, 1, 3) == string.sub(planet2, 1, 3) then\n      \
    \      table[i] = string.sub(planet1, 4, 6)\n        end\n        if string.sub(planet1,\
    \ 1, 3) == string.sub(planet2, 1, 3) then\n            table[i] = string.sub(planet1,\
    \ 4, 6)\n        end\n        if string.sub(planet1, 1, 3) == string.sub(planet2,\
    \ 1, 3) then\n            table[i] = string.sub(planet1, 4, 6)\n        end\n\
    \        if string.sub(planet1, 1, 3) == string.sub(planet2, 1, 3) then\n    \
    \        table[i] = string.sub(planet1, 4, 6)\n        end\n        if string.sub(planet1,\
    \ 1, 3) == string.sub(planet2, 1, 3) then\n            table[i] = string.sub(planet1,\
    \ 4, 6)\n        end\n        if string.sub(planet1, 1, 3) == string.sub(planet2,\
    \ 1, 3) then\n            table[i] = string.sub(planet1, 4, 6)\n        end\n\
    \        if string.sub(planet1, 1, 3) == string.sub(planet2, 1, 3) then\n    \
    \        table[i] = string.sub(planet1, 4, 6)\n        end\n        if string.sub(planet1,\
    \ 1, 3) == string.sub(planet2, 1, 3) then\n            table[i] = string.sub(planet1,\
    \ 4, 6)\n        end\n        if string.sub(planet1, 1, 3) == string.sub(planet2,\
    \ 1, 3) then\n            table[i] = string.sub(planet1, 4, 6)\n        end\n\
    \        if string.sub(planet1, 1, 3) == string.sub(planet2, 1, 3) then\n    \
    \        table[i] = string.sub(planet1, 4, 6)\n        end\n        if string.sub(planet1,\
    \ 1, 3) == string.sub", "    local planets = {}\n    for i = 1, 8 do\n       \
    \ if string.sub(planet1, 1, 3) == string.sub(planet2, 1, 3) then\n           \
    \ table.insert(planets, string.sub(planet1, 4, 5))\n        end\n        planet1\
    \ = string.sub(planet1, 1, 3)\n        planet2 = string.sub(planet2, 1, 3)\n \
    \   end\n    return planets\nend", "    local table = {}\n    local p1 = string.lower(planet1)\n\
    \    local p2 = string.lower(planet2)\n    if p1 == \"mercury\" and p2 == \"venus\"\
    \ then\n        table[1] = \"Mercury\"\n    elseif p1 == \"venus\" and p2 == \"\
    earth\" then\n        table[1] = \"Venus\"\n    elseif p1 == \"earth\" and p2\
    \ == \"mars\" then\n        table[1] = \"Earth\"\n    elseif p1 == \"mars\" and\
    \ p2 == \"jupiter\" then\n        table[1] = \"Mars\"\n    elseif p1 == \"jupiter\"\
    \ and p2 == \"saturn\" then\n        table[1] = \"Jupiter\"\n    elseif p1 ==\
    \ \"saturn\" and p2 == \"uranus\" then\n        table[1] = \"Saturn\"\n    elseif\
    \ p1 == \"uranus\" and p2 == \"neptune\" then\n        table[1] = \"Uranus\"\n\
    \    else\n        table[1] = nil\n    if p1 == \"mercury\" and p2 == \"mars\"\
    \ then\n        table[2] = \"Mercury\"\n    elseif p1 == \"mars\" and p2 == \"\
    jupiter\" then\n        table[2] = \"Mars\"\n    elseif p1 == \"jupiter\" and\
    \ p2 == \"saturn\" then\n        table[2] = \"Jupiter\"\n    elseif p1 == \"saturn\"\
    \ and p2 == \"uranus\" then\n        table[2] = \"Saturn\"\n    elseif p1 == \"\
    uranus\" and p2 == \"neptune\" then\n        table[2] = \"Uranus\"\n    else\n\
    \        table[2] = nil\n    if p1 == \"mercury\" and p2 == \"jupiter\" then\n\
    \        table[3] = \"Mercury\"\n    elseif p1 == \"jupiter\" and p2 == \"saturn\"\
    \ then\n        table[3] = \"Jupiter\"\n    elseif p1 == \"saturn\" and p2 ==\
    \ \"uranus\" then\n        table[3]", "    local table = {}\n    local i = 1\n\
    \    while i <= 8 do\n        if i == 1 or i == 2 or i == 3 or i == 4 or i ==\
    \ 5 or i == 6 or i == 7 or i == 8 then\n            table[i] = i\n           \
    \ table[i] = i\n        end\n        i = i + 1\n    end\n    table[1] = planet1\n\
    \    table[2] = planet2\n    return table\nend", "    local planets = {}\n   \
    \ local i = 0\n    while i < 8 do\n        if string.sub(planet1, 1, 1) == string.sub(planet2,\
    \ 1, 1) then\n            table.insert(planets, string.sub(planet1, 2))\n    \
    \        table.insert(planets, string.sub(planet2, 2))\n            return planets\n\
    \        end\n        i = i + 1\n    end\n    return nil\nend", "    local table\
    \ = {}\n    local planets = {\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    }\n    for _, p in pairs(planets)\
    \ do\n        table[p] = {}\n        table[p][\"orbital_period\"] = math.sqrt(4\
    \ * math.pi * math.pow(math.pow(p, 3), 2) / math.pow(math.pow(math.pow(planet2,\
    \ 3), 2) - math.pow(math.pow(planet1, 3), 2), 2))\n        table[p][\"orbital_distance\"\
    ] = math.pow(math.pow(planet2, 3) - math.pow(planet1, 3), 2) / (4 * math.pi *\
    \ math.pow(math.pow(planet2, 3), 2))\n    end\n    return table\nend", "    local\
    \ planets = {}\n    for i=1,8 do\n        if string.sub(planet1, 1, string.len(planet1))\
    \ == planet1 then\n            planets[i] = string.sub(planet2, 1, string.len(planet2))\n\
    \            break\n        end\n        if string.sub(planet2, 1, string.len(planet2))\
    \ == planet2 then\n            planets[i] = string.sub(planet1, 1, string.len(planet1))\n\
    \            break\n        end\n    end\n    return planets\nend", "    local\
    \ table = {}\n    local p1 = string.lower(planet1)\n    local p2 = string.lower(planet2)\n\
    \    for i = 1, 8 do\n        local p = string.lower(string.sub(p1, 1, i))\n \
    \       local q = string.lower(string.sub(p2, 1, i))\n        if p == q then\n\
    \            table[i] = p\n        end\n    end\n    return table\nend", "   \
    \ local planets = {}\n    local i = 1\n    while i <= 8 do\n        if string.sub(planet1,\
    \ 1, 5) == string.sub(planet2, 1, 5) then\n            table.insert(planets, string.sub(planet1,\
    \ 6, 9))\n            table.insert(planets, string.sub(planet2, 6, 9))\n     \
    \       return planets\n        end\n        i = i + 1\n    end\n    return nil\n\
    end", "    local table = {}\n    for i = 1, 8 do\n        for j = 1, 8 do\n  \
    \          if i < j then\n                if table[i] == nil then\n          \
    \          table[i] = {}\n                table[i][j] = \"\"\n            end\n\
    \        end\n    end\n    for i = 1, 8 do\n        for j = 1, 8 do\n        \
    \    if i < j then\n                if planet1 == planets[i] then\n          \
    \          table[i][j] = planets[j]\n                end\n                if planet2\
    \ == planets[j] then\n                    table[i][j] = planets[i]\n         \
    \       end\n            end\n        end\n    end\n    return table\nend\n",
  "    local planets = {}\n    for i = 1, 8 do\n        if string.sub(planet1, 1,\
    \ string.len(planet1)) == string.sub(planet2, 1, string.len(planet2)) then\n \
    \           planets[i] = string.sub(planet1, 1, string.len(planet1))\n       \
    \     break\n        end\n        if string.sub(planet1, 1, string.len(planet1))\
    \ < string.sub(planet2, 1, string.len(planet2)) then\n            planets[i] =\
    \ string.sub(planet1, 1, string.len(planet1))\n            break\n        end\n\
    \        if string.sub(planet1, 1, string.len(planet1)) > string.sub(planet2,\
    \ 1, string.len(planet2)) then\n            planets[i] = string.sub(planet1, 1,\
    \ string.len(planet1))\n            break\n        end\n    end\n    return planets\n\
    end\n", "    local planets = {}\n    local i = 1\n    while i <= 9 do\n      \
    \  if string.sub(planet1, 1, 3) == string.sub(planet2, 1, 3) then\n          \
    \  table.insert(planets, string.sub(planet1, 4, 9))\n            table.insert(planets,\
    \ string.sub(planet2, 4, 9))\n            return planets\n        end\n      \
    \  i = i + 1\n    end\nend", "    local planets = {}\n    for i = 1, 8 do\n  \
    \      if string.sub(planet1, 1, string.len(planet1)) == string.sub(planet2, 1,\
    \ string.len(planet2)) then\n            planets[i] = string.sub(planet1, 1, string.len(planet1))\n\
    \            break\n        end\n    end\n    return planets\nend", "    local\
    \ planets = {}\n    local i = 1\n    while i <= 8 do\n        if string.sub(planet1,\
    \ 1, string.len(planet1)) == string.sub(planet2, 1, string.len(planet2)) then\n\
    \            planets[i] = string.sub(planet1, 1, string.len(planet1))\n      \
    \      i = i + 1\n        end\n        i = i + 1\n    end\n    return planets\n\
    end", "    local planets = {}\n    local planet1 = string.lower(planet1)\n   \
    \ local planet2 = string.lower(planet2)\n    local i = 1\n    while i <= 8 do\n\
    \        if string.lower(planets[i]) == planet1 then\n            local j = 1\n\
    \            while j <= 8 do\n                if string.lower(planets[j]) == planet2\
    \ then\n                    table.insert(planets, planets[i])\n              \
    \      table.insert(planets, planets[j])\n                    table.insert(planets,\
    \ planets[i] .. \" \" .. planets[j])\n                    table.insert(planets,\
    \ planets[j] .. \" \" .. planets[i])\n                    table.insert(planets,\
    \ planets[i] .. \" \" .. planets[j] .. \" \" .. planets[i])\n                \
    \    table.insert(planets, planets[j] .. \" \" .. planets[i] .. \" \" .. planets[j])\n\
    \                    table.insert(planets, planets[i] .. \" \" .. planets[j] ..\
    \ \" \" .. planets[i] .. \" \" .. planets[j])\n                    table.insert(planets,\
    \ planets[j] .. \" \" .. planets[i] .. \" \" .. planets[j] .. \" \" .. planets[i])\n\
    \                    table.insert(planets, planets[j] .. \" \" .. planets[i] ..\
    \ \" \" .. planets[j] .. \" \" .. planets[i] .. \" \" .. planets[j])\n       \
    \             table.insert(planets, planets[j] .. \" \" .. planets[i] .. \" \"\
    \ .. planets[j] .. \" \" .. planets[i] .. \" \" .. planets[j] .. \" \" .. planets[i])\n\
    \                    table.insert(planets, planets[j] .. \" \" .. planets[i] ..\
    \ \" \" .. planets[j] .. \" \" .. planets[i] .. \" \" .. planets[j] .. \" \" ..\
    \ planets[i] .. \" \" .. planets[j])\n                    table.insert(planets,\
    \ planets[j] .. \" \" .. planets[i] .. \" \" .. planets[j] .. \" \" .. planets[i]\
    \ .. \" \" .. planets[j] .. \" \" .. planets[i] .. \" \" .. planets[j] .. \" \"",
  "    local table = {}\n    local planet1 = string.lower(planet1)\n    local planet2\
    \ = string.lower(planet2)\n    if planet1 == \"earth\" and planet2 == \"mercury\"\
    \ then\n        table[\"mercury\"] = \"Venus\"\n    elseif planet1 == \"earth\"\
    \ and planet2 == \"venus\" then\n        table[\"venus\"] = \"Mercury\"\n    elseif\
    \ planet1 == \"earth\" and planet2 == \"mars\" then\n        table[\"mars\"] =\
    \ \"Mercury\"\n    elseif planet1 == \"earth\" and planet2 == \"jupiter\" then\n\
    \        table[\"jupiter\"] = \"Mercury\"\n    elseif planet1 == \"earth\" and\
    \ planet2 == \"saturn\" then\n        table[\"saturn\"] = \"Mercury\"\n    elseif\
    \ planet1 == \"earth\" and planet2 == \"uranus\" then\n        table[\"uranus\"\
    ] = \"Mercury\"\n    elseif planet1 == \"earth\" and planet2 == \"neptune\" then\n\
    \        table[\"neptune\"] = \"Mercury\"\n    elseif planet1 == \"mars\" and\
    \ planet2 == \"jupiter\" then\n        table[\"jupiter\"] = \"Mars\"\n    elseif\
    \ planet1 == \"mars\" and planet2 == \"saturn\" then\n        table[\"saturn\"\
    ] = \"Mars\"\n    elseif planet1 == \"mars\" and planet2 == \"uranus\" then\n\
    \        table[\"uranus\"] = \"Mars\"\n    elseif planet1 == \"mars\" and planet2\
    \ == \"neptune\" then\n        table[\"neptune\"] = \"Mars\"\n    elseif planet1\
    \ == \"jupiter\" and planet2 == \"saturn\" then\n        table[\"saturn\"] = \"\
    Jupiter\"\n    elseif planet1 == \"jupiter\" and planet2 == \"uranus\" then\n\
    \        table[\"uranus\"] = \"Jupiter\"\n    elseif planet1 == \"jupiter\" and\
    \ planet2 == \"neptune\" then\n        table[\"neptune\"] = \"Jupiter\"\n    elseif\
    \ planet1 == \"saturn\" and planet2 == \"uranus\" then\n        table[\"uranus\"\
    ] = \"Saturn\"\n    elseif planet", "    local table = {}\n    local planet1 =\
    \ tolower(planet1)\n    local planet2 = tolower(planet2)\n    if planet1 == \"\
    mercury\" and planet2 == \"venus\" then\n        table = { \"venus\" }\n    elseif\
    \ planet1 == \"venus\" and planet2 == \"earth\" then\n        table = { \"earth\"\
    \ }\n    elseif planet1 == \"earth\" and planet2 == \"mars\" then\n        table\
    \ = { \"mars\" }\n    elseif planet1 == \"mars\" and planet2 == \"jupiter\" then\n\
    \        table = { \"jupiter\", \"saturn\" }\n    elseif planet1 == \"jupiter\"\
    \ and planet2 == \"saturn\" then\n        table = { \"saturn\" }\n    elseif planet1\
    \ == \"saturn\" and planet2 == \"uranus\" then\n        table = { \"uranus\",\
    \ \"neptune\" }\n    elseif planet1 == \"uranus\" and planet2 == \"neptune\" then\n\
    \        table = { \"neptune\" }\n    elseif planet1 == \"neptune\" and planet2\
    \ == \"mercury\" then\n        table = { \"mercury\" }\n    else\n        table\
    \ = {}\n    return table\nend", "    local planets = {}\n    for i = 1, 8 do\n\
    \        if string.sub(planet1, 1, string.len(planet1)) == string.sub(planet2,\
    \ 1, string.len(planet2)) then\n            table.insert(planets, string.sub(planet1,\
    \ 1, string.len(planet1)))\n        end\n        if string.sub(planet2, 1, string.len(planet2))\
    \ == string.sub(planet1, 1, string.len(planet1)) then\n            table.insert(planets,\
    \ string.sub(planet2, 1, string.len(planet2)))\n        end\n        if string.sub(planet1,\
    \ 1, string.len(planet1)) == string.sub(planet2, 1, string.len(planet2)) then\n\
    \            table.insert(planets, string.sub(planet1, 1, string.len(planet1)))\n\
    \            table.insert(planets, string.sub(planet2, 1, string.len(planet2)))\n\
    \        end\n        if string.sub(planet1, 1, string.len(planet1)) == string.sub(planet2,\
    \ 1, string.len(planet2)) then\n            table.insert(planets, string.sub(planet1,\
    \ 1, string.len(planet1)))\n            table.insert(planets, string.sub(planet2,\
    \ 1, string.len(planet2)))\n        end\n        if string.sub(planet1, 1, string.len(planet1))\
    \ == string.sub(planet2, 1, string.len(planet2)) then\n            table.insert(planets,\
    \ string.sub(planet1, 1, string.len(planet1)))\n            table.insert(planets,\
    \ string.sub(planet2, 1, string.len(planet2)))\n        end\n        if string.sub(planet1,\
    \ 1, string.len(planet1)) == string.sub(planet2, 1, string.len(planet2)) then\n\
    \            table.insert(planets, string.sub(planet1, 1, string.len(planet1)))\n\
    \            table.insert(planets, string.sub(planet2, 1, string.len(planet2)))\n\
    \        end\n        if string.sub(planet", "    local p1 = string.lower(planet1)\n\
    \    local p2 = string.lower(planet2)\n    local planets = {}\n    if p1 == \"\
    earth\" and p2 == \"mercury\" then\n        planets = { \"mercury\" }\n    elseif\
    \ p1 == \"earth\" and p2 == \"venus\" then\n        planets = { \"venus\" }\n\
    \    elseif p1 == \"earth\" and p2 == \"mars\" then\n        planets = { \"mars\"\
    \ }\n    elseif p1 == \"earth\" and p2 == \"jupiter\" then\n        planets =\
    \ { \"jupiter\" }\n    elseif p1 == \"earth\" and p2 == \"saturn\" then\n    \
    \    planets = { \"saturn\" }\n    elseif p1 == \"earth\" and p2 == \"uranus\"\
    \ then\n        planets = { \"uranus\" }\n    elseif p1 == \"earth\" and p2 ==\
    \ \"neptune\" then\n        planets = { \"neptune\" }\n    elseif p1 == \"mercury\"\
    \ and p2 == \"earth\" then\n        planets = { \"mercury\" }\n    elseif p1 ==\
    \ \"mercury\" and p2 == \"venus\" then\n        planets = { \"mercury\", \"venus\"\
    \ }\n    elseif p1 == \"mercury\" and p2 == \"mars\" then\n        planets = {\
    \ \"mercury\", \"mars\" }\n    elseif p1 == \"mercury\" and p2 == \"jupiter\"\
    \ then\n        planets = { \"mercury\", \"jupiter\" }\n    elseif p1 == \"mercury\"\
    \ and p2 == \"saturn\" then\n        planets = { \"mercury\", \"saturn\" }\n \
    \   elseif p1 == \"mercury\" and p2 == \"uranus\" then\n        planets = { \"\
    mercury\", \"uranus\" }\n    elseif p1 == \"mercury\" and p2 == \"neptune\" then\n\
    \        planets = { \"mercury\", \"neptune\" }\n    elseif p1 == \"venus\" and",
  "    local planets = {}\n    for i = 1, 8 do\n        if string.sub(planet1, 1,\
    \ string.len(planet1)) == string.sub(planet2, 1, string.len(planet2)) then\n \
    \           table.insert(planets, string.sub(planet1, 1, string.len(planet1)))\n\
    \        end\n        planet1 = string.sub(planet1, 1, string.len(planet1))\n\
    \        planet2 = string.sub(planet2, 1, string.len(planet2))\n    end\n    return\
    \ planets\nend", "    local table = {}\n    local i = 0\n    local j = 0\n   \
    \ local k = 0\n    local l = 0\n    local m = 0\n    local n = 0\n    local o\
    \ = 0\n    local p = 0\n    local q = 0\n    local r = 0\n    local s = 0\n  \
    \  local t = 0\n    local u = 0\n    local v = 0\n    local w = 0\n    local x\
    \ = 0\n    local y = 0\n    local z = 0\n    local a = 0\n    local b = 0\n  \
    \  local c = 0\n    local d = 0\n    local e = 0\n    local f = 0\n    local g\
    \ = 0\n    local h = 0\n    local i = 0\n    local j = 0\n    local k = 0\n  \
    \  local l = 0\n    local m = 0\n    local n = 0\n    local o = 0\n    local p\
    \ = 0\n    local q = 0\n    local r = 0\n    local s = 0\n    local t = 0\n  \
    \  local u = 0\n    local v = 0\n    local w = 0\n    local x = 0\n    local y\
    \ = 0\n    local z = 0\n    local a = 0\n    local b = 0\n    local c = 0\n  \
    \  local d = 0\n    local e = 0\n    local f = 0\n    local g = 0\n    local h\
    \ = 0\n    local i = 0\n    local j = 0\n    local k = 0\n    local l = 0\n  \
    \  local m = 0\n    local n = 0\n    local o = 0\n    local p = 0\n    local q\
    \ = 0\n    local r = 0\n    local s = 0\n    local t = 0\n    local u = 0\n  \
    \  local v = 0\n    local w = 0\n    local x = 0\n    local y = 0\n    local z\
    \ = 0\n    local a = 0\n    local b = 0\n    local c = 0\n    local d = 0\n  \
    \  local e = 0\n    local f = 0\n    local g = 0\n    local h = 0\n    local i\
    \ = 0\n    local j = 0\n    local k = 0\n    local l = 0\n    local m = 0\n  \
    \  local n = 0\n    local", "    local planets = {}\n    for i=1,8 do\n      \
    \  if string.sub(planet1, 1, string.len(planet1)) == string.sub(planet2, 1, string.len(planet2))\
    \ then\n            planets[i] = string.sub(planet1, 1, string.len(planet1))\n\
    \            break\n        end\n    end\n    return planets\nend", "    local\
    \ planets = {}\n    local i = 1\n    while i <= 8 do\n        if i == 1 or i ==\
    \ 2 or i == 3 or i == 4 or i == 5 or i == 6 or i == 7 or i == 8 then\n       \
    \     if string.sub(planet1, 1, 1) == string.sub(planet2, 1, 1) then\n       \
    \         table.insert(planets, string.sub(planet1, 2, string.len(planet1)))\n\
    \            end\n            if string.sub(planet1, 1, 1) == string.sub(planet2,\
    \ 2, string.len(planet2)) then\n                table.insert(planets, string.sub(planet1,\
    \ 2, string.len(planet1)))\n            end\n            if string.sub(planet1,\
    \ 1, 1) == string.sub(planet2, 3, string.len(planet2)) then\n                table.insert(planets,\
    \ string.sub(planet1, 2, string.len(planet1)))\n            end\n            if\
    \ string.sub(planet1, 1, 1) == string.sub(planet2, 4, string.len(planet2)) then\n\
    \                table.insert(planets, string.sub(planet1, 2, string.len(planet1)))\n\
    \            end\n            if string.sub(planet1, 1, 1) == string.sub(planet2,\
    \ 5, string.len(planet2)) then\n                table.insert(planets, string.sub(planet1,\
    \ 2, string.len(planet1)))\n            end\n            if string.sub(planet1,\
    \ 1, 1) == string.sub(planet2, 6, string.len(planet2)) then\n                table.insert(planets,\
    \ string.sub(planet1, 2, string.len(planet1)))\n            end\n            if\
    \ string.sub(planet1, 1, 1) == string.sub(planet2, 7, string.len(planet2)) then\n\
    \                table.insert(planets, string.sub(planet1, 2, string.len(planet1)))\n\
    \            end\n            if string.sub(planet1, 1, 1) == string.sub(planet2,\
    \ 8, string.len(planet2)) then\n                table.insert(planets, string.sub",
  "    local table = {}\n    local planet1 = string.lower(planet1)\n    local planet2\
    \ = string.lower(planet2)\n    if planet1 ~= \"earth\" and planet1 ~= \"mercury\"\
    \ and planet1 ~= \"venus\" and planet1 ~= \"mars\" and planet1 ~= \"jupiter\"\
    \ and planet1 ~= \"saturn\" and planet1 ~= \"uranus\" and planet1 ~= \"neptune\"\
    \ then\n        table[1] = \"Planet \" .. planet1 .. \" is not correct name.\"\
    \n        table[2] = \"Planet \" .. planet2 .. \" is not correct name.\"\n   \
    \     return table\n    end\n    if planet2 ~= \"earth\" and planet2 ~= \"mercury\"\
    \ and planet2 ~= \"venus\" and planet2 ~= \"mars\" and planet2 ~= \"jupiter\"\
    \ and planet2 ~= \"saturn\" and planet2 ~= \"uranus\" and planet2 ~= \"neptune\"\
    \ then\n        table[1] = \"Planet \" .. planet2 .. \" is not correct name.\"\
    \n        table[2] = \"Planet \" .. planet1 .. \" is not correct name.\"\n   \
    \     return table\n    end\n    local planet1_orbital_period = math.pi * math.sqrt(math.pow(math.sin(math.rad(planet1_orbital_period_in_degrees)),\
    \ 2) + math.pow(math.cos(math.rad(planet1_orbital_period_in_degrees)), 2))\n \
    \   local planet2_orbital_period = math.pi * math.sqrt(math.pow(math.sin(math.rad(planet2_orbital_period_in_degrees)),\
    \ 2) + math.pow(math.cos(math.rad(planet2_orbital_period_in_degrees)), 2))\n \
    \   local planet1_orbital_period_in_seconds = planet1_orbital_period * 24 * 60\
    \ * 60\n    local planet2_orbital_period_in_seconds = planet2_orbital_period *\
    \ 24 * 60 * 60\n    local planet1_orbital_period_in_minutes = planet1_orbital_period_in",
  "    local table = {}\n    local planet1 = string.lower(planet1)\n    local planet2\
    \ = string.lower(planet2)\n    if planet1 == \"earth\" and planet2 == \"mercury\"\
    \ then\n        table[\"earth\"] = \"Mercury\"\n    elseif planet1 == \"earth\"\
    \ and planet2 == \"venus\" then\n        table[\"earth\"] = \"Venus\"\n    elseif\
    \ planet1 == \"mars\" and planet2 == \"mercury\" then\n        table[\"mars\"\
    ] = \"Mercury\"\n    elseif planet1 == \"mars\" and planet2 == \"venus\" then\n\
    \        table[\"mars\"] = \"Venus\"\n    elseif planet1 == \"jupiter\" and planet2\
    \ == \"mercury\" then\n        table[\"jupiter\"] = \"Mercury\"\n    elseif planet1\
    \ == \"jupiter\" and planet2 == \"venus\" then\n        table[\"jupiter\"] = \"\
    Venus\"\n    elseif planet1 == \"saturn\" and planet2 == \"mercury\" then\n  \
    \      table[\"saturn\"] = \"Mercury\"\n    elseif planet1 == \"saturn\" and planet2\
    \ == \"venus\" then\n        table[\"saturn\"] = \"Venus\"\n    elseif planet1\
    \ == \"uranus\" and planet2 == \"mercury\" then\n        table[\"uranus\"] = \"\
    Mercury\"\n    elseif planet1 == \"uranus\" and planet2 == \"venus\" then\n  \
    \      table[\"uranus\"] = \"Venus\"\n    elseif planet1 == \"neptune\" and planet2\
    \ == \"mercury\" then\n        table[\"neptune\"] = \"Mercury\"\n    elseif planet1\
    \ == \"neptune\" and planet2 == \"venus\" then\n        table[\"neptune\"] = \"\
    Venus\"\n    else\n        table = {}\n    return table\nend\n", "    local table\
    \ = {}\n    local i = 1\n    while i <= 8 do\n        if i == 1 or i == 2 or i\
    \ == 3 or i == 4 or i == 5 or i == 6 or i == 7 or i == 8 then\n            table[i]\
    \ = i\n            i = i + 1\n        end\n        i = i + 1\n    end\n    table[1]\
    \ = planet1\n    table[2] = planet2\n    return table\nend", "    local table\
    \ = {}\n    local planet1 = string.lower(planet1)\n    local planet2 = string.lower(planet2)\n\
    \    if planet1 == \"earth\" and planet2 == \"mercury\" then\n        table[1]\
    \ = \"Mercury\"\n    elseif planet1 == \"earth\" and planet2 == \"venus\" then\n\
    \        table[1] = \"Venus\"\n    elseif planet1 == \"earth\" and planet2 ==\
    \ \"mars\" then\n        table[1] = \"Mars\"\n    elseif planet1 == \"earth\"\
    \ and planet2 == \"jupiter\" then\n        table[1] = \"Jupiter\"\n    elseif\
    \ planet1 == \"earth\" and planet2 == \"saturn\" then\n        table[1] = \"Saturn\"\
    \n    elseif planet1 == \"mercury\" and planet2 == \"earth\" then\n        table[2]\
    \ = \"Mercury\"\n    elseif planet1 == \"mercury\" and planet2 == \"venus\" then\n\
    \        table[2] = \"Venus\"\n    elseif planet1 == \"mercury\" and planet2 ==\
    \ \"mars\" then\n        table[2] = \"Mars\"\n    elseif planet1 == \"mercury\"\
    \ and planet2 == \"jupiter\" then\n        table[2] = \"Jupiter\"\n    elseif\
    \ planet1 == \"mercury\" and planet2 == \"saturn\" then\n        table[2] = \"\
    Saturn\"\n    elseif planet1 == \"venus\" and planet2 == \"earth\" then\n    \
    \    table[3] = \"Venus\"\n    elseif planet1 == \"venus\" and planet2 == \"mars\"\
    \ then\n        table[3] = \"Mars\"\n    elseif planet1 == \"venus\" and planet2\
    \ == \"jupiter\" then\n        table[3] = \"Jupiter\"\n    elseif planet1 == \"\
    venus\" and planet2 == \"saturn\" then\n        table[3] = \"Saturn\"\n    elseif\
    \ planet1 == \"mars\" and planet2 == \"earth\" then\n        table[4] = \"Mars\"\
    \n    elseif planet1 == \"mars\" and planet2 == \"mercury\" then\n        ", " \
    \   local planets = {}\n    for i = 1, 8 do\n        if string.sub(planet1, 1,\
    \ i) == string.sub(planet2, 1, i) then\n            table.insert(planets, string.sub(planet1,\
    \ 1, i))\n        end\n    end\n    return planets\nend", "    local planets =\
    \ {}\n    local i = 1\n    while i <= 8 do\n        if i == 1 or i == 2 or i ==\
    \ 3 or i == 4 or i == 5 or i == 6 or i == 7 or i == 8 then\n            if string.sub(planet1,\
    \ 1, 1) == string.sub(planet2, 1, 1) then\n                table.insert(planets,\
    \ string.sub(planet1, 2, 2))\n            end\n            if string.sub(planet1,\
    \ 1, 1) == string.sub(planet2, 2, 2) then\n                table.insert(planets,\
    \ string.sub(planet1, 2, 2))\n            end\n            if string.sub(planet1,\
    \ 1, 1) == string.sub(planet2, 3, 3) then\n                table.insert(planets,\
    \ string.sub(planet1, 2, 2))\n            end\n            if string.sub(planet1,\
    \ 1, 1) == string.sub(planet2, 4, 4) then\n                table.insert(planets,\
    \ string.sub(planet1, 2, 2))\n            end\n            if string.sub(planet1,\
    \ 1, 1) == string.sub(planet2, 5, 5) then\n                table.insert(planets,\
    \ string.sub(planet1, 2, 2))\n            end\n            if string.sub(planet1,\
    \ 1, 1) == string.sub(planet2, 6, 6) then\n                table.insert(planets,\
    \ string.sub(planet1, 2, 2))\n            end\n            if string.sub(planet1,\
    \ 1, 1) == string.sub(planet2, 7, 7) then\n                table.insert(planets,\
    \ string.sub(planet1, 2, 2))\n            end\n            if string.sub(planet1,\
    \ 1, 1) == string.sub(planet2, 8, 8) then\n                table.insert(planets,\
    \ string.sub(planet1, 2, 2))\n            end\n        end\n        i = i + 1\n\
    \    end\n    return planets\nend\n", "    local planets = {}\n    local i = 0\n\
    \    while i < 8 do\n        if tonumber(bf.planets[i]) == tonumber(planet1) or\
    \ tonumber(bf.planets[i]) == tonumber(planet2) then\n            table.insert(planets,\
    \ bf.planets[i])\n        end\n        i = i + 1\n    end\n    return planets\n\
    end\nbf.planets = {\n    \"Mercury\": 0.38709927,\n    \"Venus\": 0.72333566,\n\
    \    \"Earth\": 1.00000261,\n    \"Mars\": 1.52371034,\n    \"Jupiter\": 5.20288750,\n\
    \    \"Saturn\": 9.53667594,\n    \"Uranus\": 19.189164,\n    \"Neptune\": 30.069922\n\
    }\nbf(\"Jupiter\", \"Neptune\")\nbf(\"Earth\", \"Mercury\")\nbf(\"Mercury\", \"\
    Uranus\")\nprint(bf(\"Mercury\", \"Uranus\"))\nprint(bf(\"Earth\", \"Mercury\"\
    ))\nprint(bf(\"Mercury\", \"Uranus\"))\nprint(bf(\"Earth\", \"Mercury\"))\nprint(bf(\"\
    Mercury\", \"Uranus\"))\nprint(bf(\"Earth\", \"Mercury\"))\nprint(bf(\"Mercury\"\
    , \"Uranus\"))\nprint(bf(\"Earth\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Uranus\"\
    ))\nprint(bf(\"Earth\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Uranus\"))\nprint(bf(\"\
    Earth\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Uranus\"))\nprint(bf(\"Earth\"\
    , \"Mercury\"))\nprint(bf(\"Mercury\", \"Uranus\"))\nprint(bf(\"Earth\", \"Mercury\"\
    ))\nprint(bf(\"Mercury\", \"Uranus\"))\nprint(bf(\"Earth\", \"Mercury\"))\nprint(bf(\"\
    Mercury\", \"Uranus\"))\nprint(bf(\"Earth\", \"Mercury\"))\nprint(bf(\"Mercury\"\
    , \"Uranus\"))\nprint(bf(\"Earth\", \"Mercury\"))\nprint(bf(\"Mercury\", \"Uranus\"\
    ))\nprint(bf", "    local planets = {}\n    for i=1,8 do\n        if string.sub(planet1,\
    \ 1, string.len(planet1)) == string.sub(planet2, 1, string.len(planet2)) then\n\
    \            table.insert(planets, string.sub(planet1, 1, string.len(planet1)))\n\
    \        end\n        if string.sub(planet1, 1, string.len(planet1)) == string.sub(planet2,\
    \ 1, string.len(planet2)) then\n            table.insert(planets, string.sub(planet2,\
    \ 1, string.len(planet2)))\n        end\n        if string.sub(planet1, 1, string.len(planet1))\
    \ == string.sub(planet2, 1, string.len(planet2)) then\n            table.insert(planets,\
    \ string.sub(planet1, 1, string.len(planet1)))\n            table.insert(planets,\
    \ string.sub(planet2, 1, string.len(planet2)))\n        end\n        if string.sub(planet1,\
    \ 1, string.len(planet1)) == string.sub(planet2, 1, string.len(planet2)) then\n\
    \            table.insert(planets, string.sub(planet1, 1, string.len(planet1)))\n\
    \            table.insert(planets, string.sub(planet2, 1, string.len(planet2)))\n\
    \        end\n        if string.sub(planet1, 1, string.len(planet1)) == string.sub(planet2,\
    \ 1, string.len(planet2)) then\n            table.insert(planets, string.sub(planet1,\
    \ 1, string.len(planet1)))\n            table.insert(planets, string.sub(planet2,\
    \ 1, string.len(planet2)))\n        end\n        if string.sub(planet1, 1, string.len(planet1))\
    \ == string.sub(planet2, 1, string.len(planet2)) then\n            table.insert(planets,\
    \ string.sub(planet1, 1, string.len(planet1)))\n            table.insert(planets,\
    \ string.sub(planet2, 1, string.len(planet2)))\n        end\n        if string.sub(planet",
  "    local planets = {}\n    for i=1,8 do\n        if string.sub(planet1, 1, string.len(planet1))\
    \ == string.sub(planet2, 1, string.len(planet2)) then\n            planets[i]\
    \ = string.sub(planet1, 1, string.len(planet1))\n        end\n        if string.sub(planet2,\
    \ 1, string.len(planet2)) == string.sub(planet1, 1, string.len(planet1)) then\n\
    \            planets[i] = string.sub(planet2, 1, string.len(planet2))\n      \
    \  end\n    end\n    return planets\nend", "    local planets = {}\n    local\
    \ i = 1\n    while true do\n        local p = string.sub(planet1, i, i)\n    \
    \    if p == \"\" then\n            return planets\n        end\n        local\
    \ j = 1\n        while true do\n            local q = string.sub(planet2, j, j)\n\
    \            if q == \"\" then\n                return planets\n            end\n\
    \            local orbit1 = math.sqrt(math.pow(math.abs(math.cos(math.rad(p))),\
    \ 2) + math.pow(math.sin(math.rad(p)), 2))\n            local orbit2 = math.sqrt(math.pow(math.abs(math.cos(math.rad(q))),\
    \ 2) + math.pow(math.sin(math.rad(q)), 2))\n            if orbit1 > orbit2 then\n\
    \                local t = p\n                p = q\n                q = t\n \
    \           end\n            j = j + 1\n        end\n        i = i + 1\n    end\n\
    end", "    local table = {}\n    local planet1 = string.lower(planet1)\n    local\
    \ planet2 = string.lower(planet2)\n    if planet1 == \"earth\" and planet2 ==\
    \ \"mercury\" then\n        table[1] = \"Mercury\"\n    elseif planet1 == \"earth\"\
    \ and planet2 == \"venus\" then\n        table[1] = \"Venus\"\n    elseif planet1\
    \ == \"earth\" and planet2 == \"mars\" then\n        table[1] = \"Mars\"\n   \
    \ elseif planet1 == \"earth\" and planet2 == \"jupiter\" then\n        table[1]\
    \ = \"Jupiter\"\n    elseif planet1 == \"earth\" and planet2 == \"saturn\" then\n\
    \        table[1] = \"Saturn\"\n    elseif planet1 == \"mercury\" and planet2\
    \ == \"earth\" then\n        table[1] = \"Earth\"\n    elseif planet1 == \"mercury\"\
    \ and planet2 == \"venus\" then\n        table[1] = \"Venus\"\n    elseif planet1\
    \ == \"mercury\" and planet2 == \"mars\" then\n        table[1] = \"Mars\"\n \
    \   elseif planet1 == \"mercury\" and planet2 == \"jupiter\" then\n        table[1]\
    \ = \"Jupiter\"\n    elseif planet1 == \"mercury\" and planet2 == \"saturn\" then\n\
    \        table[1] = \"Saturn\"\n    elseif planet1 == \"mercury\" and planet2\
    \ == \"uranus\" then\n        table[1] = \"Uranus\"\n    elseif planet1 == \"\
    mercury\" and planet2 == \"neptune\" then\n        table[1] = \"Neptune\"\n  \
    \  elseif planet1 == \"mars\" and planet2 == \"earth\" then\n        table[1]\
    \ = \"Earth\"\n    elseif planet1 == \"mars\" and planet2 == \"venus\" then\n\
    \        table[1] = \"Venus\"\n    elseif planet1 == \"mars\" and planet2 == \"\
    jupiter\" then\n        table[1] = \"Jupiter\"\n    elseif planet1 == \"mars\"\
    \ and planet2 == \"sat", "    local table = {}\n    for i = 1, 8 do\n        if\
    \ string.sub(planet1, 1, i) == string.sub(planet2, 1, i) then\n            table[i]\
    \ = string.sub(planet1, i, i + 1)\n        end\n    end\n    return table\nend",
  "    local planets = {}\n    for i=1,8 do\n        if string.sub(planet1, 1, string.len(planet1))\
    \ == string.sub(planet2, 1, string.len(planet2)) then\n            table.insert(planets,\
    \ string.sub(planet1, 1, string.len(planet1)))\n        end\n        if string.sub(planet1,\
    \ 1, string.len(planet1)) < string.sub(planet2, 1, string.len(planet2)) then\n\
    \            table.insert(planets, string.sub(planet1, 1, string.len(planet1)))\n\
    \        end\n        if string.sub(planet1, 1, string.len(planet1)) > string.sub(planet2,\
    \ 1, string.len(planet2)) then\n            table.insert(planets, string.sub(planet1,\
    \ 1, string.len(planet1)))\n        end\n    end\n    return table.sort(planets)\n\
    end\n", "    local planets = {}\n    local i = 1\n    while i <= 8 do\n      \
    \  if string.sub(planet1, 1, string.len(planet1)) == string.sub(planet2, 1, string.len(planet2))\
    \ then\n            table.insert(planets, string.sub(planet1, 1, string.len(planet1)))\n\
    \            table.insert(planets, string.sub(planet2, 1, string.len(planet2)))\n\
    \            return planets\n        end\n        i = i + 1\n    end\n    return\
    \ nil\nend", "    local table = {}\n    for i = 1, 8 do\n        for j = 1, 8\
    \ do\n            if (planet1 == planets[i] and planet2 == planets[j]) or (planet2\
    \ == planets[i] and planet1 == planets[j]) then\n                table[j] = planets[i]\n\
    \            end\n        end\n    end\n    return table\nend", "    local planets\
    \ = {}\n    local i = 0\n    while i < 8 do\n        if string.sub(planet1, 1,\
    \ 1) == string.sub(planets[i], 1, 1) then\n            if string.sub(planet2,\
    \ 1, 1) == string.sub(planets[i], 1, 1) then\n                table.insert(planets,\
    \ planets[i])\n                break\n            elseif string.sub(planet2, 1,\
    \ 1) == string.sub(planets[i], 1, 1) then\n                table.insert(planets,\
    \ planets[i])\n                break\n            else\n                table.insert(planets,\
    \ planets[i])\n                break\n            end\n        elseif string.sub(planet1,\
    \ 1, 1) == string.sub(planets[i], 1, 1) then\n            table.insert(planets,\
    \ planets[i])\n            break\n        else\n            table.insert(planets,\
    \ planets[i])\n            break\n        end\n        i = i + 1\n    end\n  \
    \  return table.sort(planets)\nend", "    local table = {}\n    local i = 1\n\
    \    while i <= 8 do\n        if string.sub(planet1, 1, 1) == string.sub(planet2,\
    \ 1, 1) then\n            table[i] = string.sub(planet1, 2)\n            table[i\
    \ + 1] = string.sub(planet2, 2)\n            i = i + 2\n        else\n       \
    \     table[i] = string.sub(planet1, 2)\n            i = i + 1\n        end\n\
    \    end\n    return table\nend", "    local table = {}\n    local i = 0\n   \
    \ local j = 0\n    local k = 0\n    local l = 0\n    local m = 0\n    local n\
    \ = 0\n    local o = 0\n    local p = 0\n    local q = 0\n    local r = 0\n  \
    \  local s = 0\n    local t = 0\n    local u = 0\n    local v = 0\n    local w\
    \ = 0\n    local x = 0\n    local y = 0\n    local z = 0\n    local a = 0\n  \
    \  local b = 0\n    local c = 0\n    local d = 0\n    local e = 0\n    local f\
    \ = 0\n    local g = 0\n    local h = 0\n    local i = 0\n    local j = 0\n  \
    \  local k = 0\n    local l = 0\n    local m = 0\n    local n = 0\n    local o\
    \ = 0\n    local p = 0\n    local q = 0\n    local r = 0\n    local s = 0\n  \
    \  local t = 0\n    local u = 0\n    local v = 0\n    local w = 0\n    local x\
    \ = 0\n    local y = 0\n    local z = 0\n    local a = 0\n    local b = 0\n  \
    \  local c = 0\n    local d = 0\n    local e = 0\n    local f = 0\n    local g\
    \ = 0\n    local h = 0\n    local i = 0\n    local j = 0\n    local k = 0\n  \
    \  local l = 0\n    local m = 0\n    local n = 0\n    local o = 0\n    local p\
    \ = 0\n    local q = 0\n    local r = 0\n    local s = 0\n    local t = 0\n  \
    \  local u = 0\n    local v = 0\n    local w = 0\n    local x = 0\n    local y\
    \ = 0\n    local z = 0\n    local a = 0\n    local b = 0\n    local c = 0\n  \
    \  local d = 0\n    local e = 0\n    local f = 0\n    local g = 0\n    local h\
    \ = 0\n    local i = 0\n    local j = 0\n    local k = 0\n    local l = 0\n  \
    \  local m = 0\n    local n = 0\n    local", "    local table = {}\n    local\
    \ i = 0\n    local j = 0\n    local k = 0\n    local l = 0\n    local m = 0\n\
    \    local n = 0\n    local o = 0\n    local p = 0\n    local q = 0\n    local\
    \ r = 0\n    local s = 0\n    local t = 0\n    local u = 0\n    local v = 0\n\
    \    local w = 0\n    local x = 0\n    local y = 0\n    local z = 0\n    local\
    \ a = 0\n    local b = 0\n    local c = 0\n    local d = 0\n    local e = 0\n\
    \    local f = 0\n    local g = 0\n    local h = 0\n    local i = 0\n    local\
    \ j = 0\n    local k = 0\n    local l = 0\n    local m = 0\n    local n = 0\n\
    \    local o = 0\n    local p = 0\n    local q = 0\n    local r = 0\n    local\
    \ s = 0\n    local t = 0\n    local u = 0\n    local v = 0\n    local w = 0\n\
    \    local x = 0\n    local y = 0\n    local z = 0\n    local a = 0\n    local\
    \ b = 0\n    local c = 0\n    local d = 0\n    local e = 0\n    local f = 0\n\
    \    local g = 0\n    local h = 0\n    local i = 0\n    local j = 0\n    local\
    \ k = 0\n    local l = 0\n    local m = 0\n    local n = 0\n    local o = 0\n\
    \    local p = 0\n    local q = 0\n    local r = 0\n    local s = 0\n    local\
    \ t = 0\n    local u = 0\n    local v = 0\n    local w = 0\n    local x = 0\n\
    \    local y = 0\n    local z = 0\n    local a = 0\n    local b = 0\n    local\
    \ c = 0\n    local d = 0\n    local e = 0\n    local f = 0\n    local g = 0\n\
    \    local h = 0\n    local i = 0\n    local j = 0\n    local k = 0\n    local\
    \ l = 0\n    local m = 0\n    local n = 0\n    local", "    local planets = {}\n\
    \    local p1 = planets[planet1]\n    local p2 = planets[planet2]\n    local result\
    \ = {}\n    for i = 1, p1, 1 do\n        for j = 1, p2, 1 do\n            if p1[i]\
    \ < p2[j] then\n                result[p1[i]] = true\n            end\n      \
    \  end\n    end\n    return result\nend", "    local table = {}\n    local p1\
    \ = string.lower(planet1)\n    local p2 = string.lower(planet2)\n    if p1 ==\
    \ \"earth\" and p2 == \"mercury\" then\n        table[\"mercury\"] = \"Venus\"\
    \n    elseif p1 == \"earth\" and p2 == \"venus\" then\n        table[\"venus\"\
    ] = \"Mercury\"\n    elseif p1 == \"earth\" and p2 == \"mars\" then\n        table[\"\
    mars\"] = \"Mercury\"\n    elseif p1 == \"earth\" and p2 == \"jupiter\" then\n\
    \        table[\"jupiter\"] = \"Mercury\"\n    elseif p1 == \"earth\" and p2 ==\
    \ \"saturn\" then\n        table[\"saturn\"] = \"Mercury\"\n    elseif p1 == \"\
    earth\" and p2 == \"uranus\" then\n        table[\"uranus\"] = \"Mercury\"\n \
    \   elseif p1 == \"earth\" and p2 == \"neptune\" then\n        table[\"neptune\"\
    ] = \"Mercury\"\n    elseif p1 == \"mars\" and p2 == \"earth\" then\n        table[\"\
    earth\"] = \"Mercury\"\n    elseif p1 == \"mars\" and p2 == \"venus\" then\n \
    \       table[\"venus\"] = \"Mercury\"\n    elseif p1 == \"mars\" and p2 == \"\
    jupiter\" then\n        table[\"jupiter\"] = \"Mercury\"\n    elseif p1 == \"\
    mars\" and p2 == \"saturn\" then\n        table[\"saturn\"] = \"Mercury\"\n  \
    \  elseif p1 == \"mars\" and p2 == \"uranus\" then\n        table[\"uranus\"]\
    \ = \"Mercury\"\n    elseif p1 == \"mars\" and p2 == \"neptune\" then\n      \
    \  table[\"neptune\"] = \"Mercury\"\n    elseif p1 == \"jupiter\" and p2 == \"\
    earth\" then\n        table[\"earth\"] = \"Mercury\"\n    elseif p1 == \"jupiter\"\
    \ and p2 == \"venus\" then\n        table[\"venus\"] = \"Mercury\"\n    elseif\
    \ p1 ==", "    local table = {}\n    local planet1 = string.lower(planet1)\n \
    \   local planet2 = string.lower(planet2)\n    if planet1 == \"mercury\" and planet2\
    \ == \"venus\" then\n        table[1] = \"Mercury\"\n    elseif planet1 == \"\
    venus\" and planet2 == \"earth\" then\n        table[1] = \"Venus\"\n    elseif\
    \ planet1 == \"earth\" and planet2 == \"mars\" then\n        table[1] = \"Earth\"\
    \n    elseif planet1 == \"mars\" and planet2 == \"jupiter\" then\n        table[1]\
    \ = \"Mars\"\n    elseif planet1 == \"jupiter\" and planet2 == \"saturn\" then\n\
    \        table[1] = \"Jupiter\"\n    elseif planet1 == \"saturn\" and planet2\
    \ == \"uranus\" then\n        table[1] = \"Saturn\"\n    elseif planet1 == \"\
    uranus\" and planet2 == \"neptune\" then\n        table[1] = \"Uranus\"\n    elseif\
    \ planet1 == \"neptune\" and planet2 == \"mercury\" then\n        table[1] = \"\
    Neptune\"\n    else\n        table = {}\n    return table\nend", "    local planets\
    \ = {}\n    for i = 1, 8 do\n        if string.sub(planet1, 1, 3) == string.sub(planet2,\
    \ 1, 3) then\n            planets[i] = string.sub(planet1, 4, 5)\n        end\n\
    \        if string.sub(planet1, 1, 3) == string.sub(planet2, 1, 3) then\n    \
    \        planets[i] = string.sub(planet2, 4, 5)\n        end\n        if string.sub(planet1,\
    \ 1, 3) == string.sub(planet2, 1, 3) then\n            planets[i] = string.sub(planet1,\
    \ 4, 5)\n        end\n        if string.sub(planet1, 1, 3) == string.sub(planet2,\
    \ 1, 3) then\n            planets[i] = string.sub(planet2, 4, 5)\n        end\n\
    \        if string.sub(planet1, 1, 3) == string.sub(planet2, 1, 3) then\n    \
    \        planets[i] = string.sub(planet1, 4, 5)\n        end\n        if string.sub(planet1,\
    \ 1, 3) == string.sub(planet2, 1, 3) then\n            planets[i] = string.sub(planet2,\
    \ 4, 5)\n        end\n        if string.sub(planet1, 1, 3) == string.sub(planet2,\
    \ 1, 3) then\n            planets[i] = string.sub(planet1, 4, 5)\n        end\n\
    \        if string.sub(planet1, 1, 3) == string.sub(planet2, 1, 3) then\n    \
    \        planets[i] = string.sub(planet2, 4, 5)\n        end\n        if string.sub(planet1,\
    \ 1, 3) == string.sub(planet2, 1, 3) then\n            planets[i] = string.sub(planet1,\
    \ 4, 5)\n        end\n        if string.sub(planet1, 1, 3) == string.sub(planet2,\
    \ 1, 3) then\n            planets[i] = string.sub(planet2, 4, 5)\n        end\n\
    \        if string.sub(planet", "    local planets = {}\n    for i = 1, 8 do\n\
    \        if string.sub(planet1, 1, 3) == string.sub(planet2, 1, 3) then\n    \
    \        table.insert(planets, string.sub(planet1, 4, string.len(planet1)))\n\
    \        end\n        if string.sub(planet1, 1, 3) == string.sub(planet2, 1, 3)\
    \ then\n            table.insert(planets, string.sub(planet2, 4, string.len(planet2)))\n\
    \        end\n        if string.sub(planet1, 1, 3) == string.sub(planet2, 1, 3)\
    \ then\n            table.insert(planets, string.sub(planet1, 4, string.len(planet1)))\n\
    \        end\n        if string.sub(planet1, 1, 3) == string.sub(planet2, 1, 3)\
    \ then\n            table.insert(planets, string.sub(planet2, 4, string.len(planet2)))\n\
    \        end\n        if string.sub(planet1, 1, 3) == string.sub(planet2, 1, 3)\
    \ then\n            table.insert(planets, string.sub(planet1, 4, string.len(planet1)))\n\
    \        end\n        if string.sub(planet1, 1, 3) == string.sub(planet2, 1, 3)\
    \ then\n            table.insert(planets, string.sub(planet2, 4, string.len(planet2)))\n\
    \        end\n        if string.sub(planet1, 1, 3) == string.sub(planet2, 1, 3)\
    \ then\n            table.insert(planets, string.sub(planet1, 4, string.len(planet1)))\n\
    \        end\n        if string.sub(planet1, 1, 3) == string.sub(planet2, 1, 3)\
    \ then\n            table.insert(planets, string.sub(planet2, 4, string.len(planet2)))\n\
    \        end\n        if string.sub(planet1, 1, 3) == string.sub(planet2, 1, 3)\
    \ then\n            table.insert(planets, string.sub(planet1, 4, string.len(planet1)))\n\
    \        end\n        if", "    local planets = {}\n    local p1 = planets[planet1]\n\
    \    local p2 = planets[planet2]\n    local result = {}\n    for i = 1, p1, 1\
    \ do\n        for j = 1, p2, 1 do\n            if p1[i] < p2[j] then\n       \
    \         result[p1[i]] = true\n            end\n        end\n    end\n    return\
    \ result\nend", "    local table = {}\n    local planets = {\n        \"Mercury\"\
    : {\n            \"name\": \"Mercury\",\n            \"orbital_period\": 0.2408467,\n\
    \            \"orbital_distance\": 0.387098,\n            \"mass\": 0.055,\n \
    \           \"radius\": 0.4,\n            \"color\": \"red\"\n        },\n   \
    \     \"Venus\": {\n            \"name\": \"Venus\",\n            \"orbital_period\"\
    : 0.615198,\n            \"orbital_distance\": 0.723335,\n            \"mass\"\
    : 0.814,\n            \"radius\": 0.949,\n            \"color\": \"red\"\n   \
    \     },\n        \"Earth\": {\n            \"name\": \"Earth\",\n           \
    \ \"orbital_period\": 1.0,\n            \"orbital_distance\": 1.0,\n         \
    \   \"mass\": 5.97,\n            \"radius\": 1.0,\n            \"color\": \"green\"\
    \n        },\n        \"Mars\": {\n            \"name\": \"Mars\",\n         \
    \   \"orbital_period\": 1.88,\n            \"orbital_distance\": 1.52,\n     \
    \       \"mass\": 0.64,\n            \"radius\": 0.5,\n            \"color\":\
    \ \"red\"\n        },\n        \"Jupiter\": {\n            \"name\": \"Jupiter\"\
    ,\n            \"orbital_period\": 11.86,\n            \"orbital_distance\": 5.20,\n\
    \            \"mass\": 1.898,\n            \"radius\": 0.5,\n            \"color\"\
    : \"red\"\n        },\n        \"Saturn\": {\n            \"name\": \"Saturn\"\
    ,\n            \"orbital_period\": 29.44,\n            \"orbital_distance\": 10.44,\n\
    \            \"mass\": 5.68,\n            \"radius\": 0.5,\n            \"color\"\
    : \"red\"\n        },\n        \"Uranus\": {\n            \"name\": \"Uranus\"\
    ,\n            \"orbital_period\": 84.02,\n            \"orbital_distance\": 23.44,\n\
    \            \"mass\": 0.898,\n            \"radius\": 0.5,\n            \"color\"\
    : \"red\"\n        },\n        \"Neptune\": {\n            ", "    local table\
    \ = {}\n    local i = 1\n    while i <= 8 do\n        if string.sub(planet1, 1,\
    \ 1) == string.sub(planet2, 1, 1) then\n            table[i] = string.sub(planet1,\
    \ 2, 1)\n            table[i + 1] = string.sub(planet2, 2, 1)\n            return\
    \ table\n        end\n        i = i + 1\n    end\n    return table\nend", "  \
    \  local table = {}\n    local planets = {\n        \"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    }\n \
    \   for _, p in ipairs(planets) do\n        if p ~= planet1 and p ~= planet2 then\n\
    \            table[p] = true\n        end\n    end\n    return table\nend", " \
    \   local planets = {}\n    for i = 1, 8 do\n        if string.sub(planet1, 1,\
    \ string.len(planet1)) == string.sub(planet2, 1, string.len(planet2)) then\n \
    \           table.insert(planets, string.sub(planet1, 1, string.len(planet1)))\n\
    \        end\n        if string.sub(planet1, 1, string.len(planet1)) < string.sub(planet2,\
    \ 1, string.len(planet2)) then\n            table.insert(planets, string.sub(planet1,\
    \ 1, string.len(planet1)))\n        end\n        if string.sub(planet1, 1, string.len(planet1))\
    \ > string.sub(planet2, 1, string.len(planet2)) then\n            table.insert(planets,\
    \ string.sub(planet1, 1, string.len(planet1)))\n        end\n    end\n    return\
    \ planets\nend", "    local planets = {}\n    for i = 1, 8 do\n        if string.sub(planet1,\
    \ 1, string.len(planet1)) == string.sub(planet2, 1, string.len(planet2)) then\n\
    \            table.insert(planets, string.sub(planet1, 1, string.len(planet1)))\n\
    \        end\n        planet1 = string.sub(planet1, 1, string.len(planet1))\n\
    \        planet2 = string.sub(planet2, 1, string.len(planet2))\n    end\n    return\
    \ table.sort(planets)\nend", "    local planets = {}\n    for i = 1, 8 do\n  \
    \      if string.sub(planet1, 1, string.len(planet1)) == string.sub(planet2, 1,\
    \ string.len(planet2)) then\n            planets[i] = string.sub(planet1, 1, string.len(planet1))\n\
    \            break\n        end\n    end\n    return planets\nend", "    local\
    \ table = {}\n    local planet1 = string.lower(planet1)\n    local planet2 = string.lower(planet2)\n\
    \    if not planet1 or not planet2 then\n        return table\n    end\n    local\
    \ orbit1 = math.floor(math.sqrt(math.pow(math.pi, 2) / math.pow(math.sin(math.rad(planet1)),\
    \ 2)))\n    local orbit2 = math.floor(math.sqrt(math.pow(math.pi, 2) / math.pow(math.sin(math.rad(planet2)),\
    \ 2)))\n    local i = 1\n    while orbit1 < orbit2 do\n        table[i] = planet1\
    \ .. \" \" .. planet2\n        i = i + 1\n        orbit1 = orbit1 + 1\n    end\n\
    \    return table\nend\n", "    local table = {}\n    local p1 = string.lower(planet1)\n\
    \    local p2 = string.lower(planet2)\n    if p1 == \"earth\" and p2 == \"mercury\"\
    \ then\n        table[1] = \"Mercury\"\n    elseif p1 == \"earth\" and p2 == \"\
    venus\" then\n        table[1] = \"Venus\"\n    elseif p1 == \"earth\" and p2\
    \ == \"mars\" then\n        table[1] = \"Mars\"\n    elseif p1 == \"earth\" and\
    \ p2 == \"jupiter\" then\n        table[1] = \"Jupiter\"\n    elseif p1 == \"\
    earth\" and p2 == \"saturn\" then\n        table[1] = \"Saturn\"\n    elseif p1\
    \ == \"mercury\" and p2 == \"earth\" then\n        table[2] = \"Mercury\"\n  \
    \  elseif p1 == \"mercury\" and p2 == \"venus\" then\n        table[2] = \"Venus\"\
    \n    elseif p1 == \"mercury\" and p2 == \"mars\" then\n        table[2] = \"\
    Mars\"\n    elseif p1 == \"mercury\" and p2 == \"jupiter\" then\n        table[2]\
    \ = \"Jupiter\"\n    elseif p1 == \"mercury\" and p2 == \"saturn\" then\n    \
    \    table[2] = \"Saturn\"\n    elseif p1 == \"venus\" and p2 == \"earth\" then\n\
    \        table[3] = \"Venus\"\n    elseif p1 == \"venus\" and p2 == \"mars\" then\n\
    \        table[3] = \"Mars\"\n    elseif p1 == \"venus\" and p2 == \"jupiter\"\
    \ then\n        table[3] = \"Jupiter\"\n    elseif p1 == \"venus\" and p2 == \"\
    saturn\" then\n        table[3] = \"Saturn\"\n    elseif p1 == \"mars\" and p2\
    \ == \"earth\" then\n        table[4] = \"Mars\"\n    elseif p1 == \"mars\" and\
    \ p2 == \"mercury\" then\n        ", "    local planets = {}\n    local i = 1\n\
    \    while i <= 8 do\n        if string.sub(planet1, 1, string.len(planet1)) ==\
    \ string.sub(planet2, 1, string.len(planet2)) then\n            table.insert(planets,\
    \ string.sub(planet1, 1, string.len(planet1)))\n            table.insert(planets,\
    \ string.sub(planet2, 1, string.len(planet2)))\n            return planets\n \
    \       end\n        i = i + 1\n    end\nend", "    local table = {}\n    local\
    \ planet1 = tolower(planet1)\n    local planet2 = tolower(planet2)\n    if planet1\
    \ == \"mercury\" and planet2 == \"venus\" then\n        table = { \"mercury\"\
    , \"venus\" }\n    elseif planet1 == \"venus\" and planet2 == \"earth\" then\n\
    \        table = { \"venus\" }\n    elseif planet1 == \"earth\" and planet2 ==\
    \ \"mars\" then\n        table = { \"earth\", \"mars\" }\n    elseif planet1 ==\
    \ \"mars\" and planet2 == \"jupiter\" then\n        table = { \"mars\", \"jupiter\"\
    \ }\n    elseif planet1 == \"jupiter\" and planet2 == \"saturn\" then\n      \
    \  table = { \"jupiter\", \"saturn\" }\n    elseif planet1 == \"saturn\" and planet2\
    \ == \"uranus\" then\n        table = { \"saturn\", \"uranus\" }\n    elseif planet1\
    \ == \"uranus\" and planet2 == \"neptune\" then\n        table = { \"uranus\"\
    , \"neptune\" }\n    elseif planet1 == \"neptune\" and planet2 == \"pluto\" then\n\
    \        table = { \"neptune\" }\n    else\n        table = {}\n    return table\n\
    end", "    local table = {}\n    local planet1 = string.lower(planet1)\n    local\
    \ planet2 = string.lower(planet2)\n    if planet1 == \"earth\" and planet2 ==\
    \ \"mercury\" then\n        table[1] = \"Mercury\"\n    elseif planet1 == \"earth\"\
    \ and planet2 == \"venus\" then\n        table[1] = \"Venus\"\n    elseif planet1\
    \ == \"earth\" and planet2 == \"mars\" then\n        table[1] = \"Mars\"\n   \
    \ elseif planet1 == \"earth\" and planet2 == \"jupiter\" then\n        table[1]\
    \ = \"Jupiter\"\n    elseif planet1 == \"earth\" and planet2 == \"saturn\" then\n\
    \        table[1] = \"Saturn\"\n    elseif planet1 == \"mercury\" and planet2\
    \ == \"earth\" then\n        table[1] = \"Earth\"\n    elseif planet1 == \"mercury\"\
    \ and planet2 == \"venus\" then\n        table[1] = \"Venus\"\n    elseif planet1\
    \ == \"mercury\" and planet2 == \"mars\" then\n        table[1] = \"Mars\"\n \
    \   elseif planet1 == \"mercury\" and planet2 == \"jupiter\" then\n        table[1]\
    \ = \"Jupiter\"\n    elseif planet1 == \"mercury\" and planet2 == \"saturn\" then\n\
    \        table[1] = \"Saturn\"\n    elseif planet1 == \"mercury\" and planet2\
    \ == \"uranus\" then\n        table[1] = \"Uranus\"\n    elseif planet1 == \"\
    mercury\" and planet2 == \"neptune\" then\n        table[1] = \"Neptune\"\n  \
    \  elseif planet1 == \"venus\" and planet2 == \"earth\" then\n        table[1]\
    \ = \"Earth\"\n    elseif planet1 == \"venus\" and planet2 == \"mars\" then\n\
    \        table[1] = \"Mars\"\n    elseif planet1 == \"venus\" and planet2 == \"\
    jupiter\" then\n        table[1] = \"Jupiter\"\n    elseif planet1 == \"venus\"\
    \ and planet2 == \"saturn", "    local table = {}\n    local planet1 = string.lower(planet1)\n\
    \    local planet2 = string.lower(planet2)\n    if planet1 ~= \"mercury\" and\
    \ planet1 ~= \"venus\" and planet1 ~= \"earth\" and planet1 ~= \"mars\" and planet1\
    \ ~= \"jupiter\" and planet1 ~= \"saturn\" and planet1 ~= \"uranus\" and planet1\
    \ ~= \"neptune\" then\n        table[1] = planet1\n    else\n        table[1]\
    \ = \"\"\n    end\n    if planet2 ~= \"mercury\" and planet2 ~= \"venus\" and\
    \ planet2 ~= \"earth\" and planet2 ~= \"mars\" and planet2 ~= \"jupiter\" and\
    \ planet2 ~= \"saturn\" and planet2 ~= \"uranus\" and planet2 ~= \"neptune\" then\n\
    \        table[2] = planet2\n    else\n        table[2] = \"\"\n    end\n    if\
    \ table[1] ~= \"\" and table[2] ~= \"\" then\n        for i = 3, 8 do\n      \
    \      if table[1] ~= \"\" and table[2] ~= \"\" then\n                table[i]\
    \ = string.gsub(table[1], \"%\", \"\") .. \" \" .. string.gsub(table[2], \"%\"\
    , \"\")\n            end\n            table[i] = string.gsub(table[i], \"%\",\
    \ \"\")\n            table[i] = string.gsub(table[i], \" \", \"\")\n         \
    \   table[i] = string.gsub(table[i], \" \", \"\")\n            table[i] = string.gsub(table[i],\
    \ \" \", \"\")\n            table[i] = string.gsub(table[i], \" \", \"\")\n  \
    \          table[i] = string.gsub(table[i], \" \", \"\")\n            table[i]\
    \ = string.gsub(table[i], \" \", \"\")\n            table[i] = string.gsub(table[i],\
    \ \" \", \"\")\n            table[i] = string.gsub(table[i], \" \", \"\")\n  \
    \          table[i] = string.gsub(table[i],", "    local planets = {}\n    local\
    \ i = 0\n    while i < 8 do\n        if planets[planet1] == nil then\n       \
    \     planets[planet1] = i\n        elseif planets[planet2] == nil then\n    \
    \        planets[planet2] = i\n        else\n            table.insert(planets,\
    \ i)\n        end\n        i = i + 1\n    end\n    return table.sort(planets)\n\
    end", "    local planets = {}\n    for i = 1, 8 do\n        if string.sub(planet1,\
    \ 1, 1) == string.sub(planets[i], 1, 1) then\n            planets[i] = string.sub(planet2,\
    \ 1, 1)\n            return planets\n        end\n    end\nend", "    local table\
    \ = {}\n    local planet1 = string.lower(planet1)\n    local planet2 = string.lower(planet2)\n\
    \    if not planet1 or not planet2 then\n        table = {}\n    elseif planet1\
    \ == planet2 then\n        table = {planet1}\n    elseif planet1 < planet2 then\n\
    \        table = {planet1, planet2}\n    elseif planet2 < planet1 then\n     \
    \   table = {planet2, planet1}\n    end\n    return table\nend", "    local planets\
    \ = {}\n    for i = 1, 8 do\n        if string.sub(planet1, 1, string.len(planet1))\
    \ == string.sub(planet2, 1, string.len(planet2)) then\n            table.insert(planets,\
    \ string.sub(planet1, 1, string.len(planet1)))\n        end\n        planet1 =\
    \ string.sub(planet1, 1, string.len(planet1))\n        planet2 = string.sub(planet2,\
    \ 1, string.len(planet2))\n    end\n    return table.sort(planets)\nend", "  \
    \  local table = {}\n    local i = 1\n    while i <= 8 do\n        if string.sub(planet1,\
    \ 1, string.len(planet1)) == string.sub(planet2, 1, string.len(planet2)) then\n\
    \            table[i] = string.sub(planet1, 1, string.len(planet1))\n        \
    \    table[i + 1] = string.sub(planet2, 1, string.len(planet2))\n            i\
    \ = i + 2\n        end\n        i = i + 1\n    end\n    return table\nend", " \
    \   local table = {}\n    local planet1 = string.lower(planet1)\n    local planet2\
    \ = string.lower(planet2)\n    if planet1 == \"earth\" and planet2 == \"mercury\"\
    \ then\n        table = { \"mercury\" }\n    elseif planet1 == \"earth\" and planet2\
    \ == \"venus\" then\n        table = { \"venus\" }\n    elseif planet1 == \"earth\"\
    \ and planet2 == \"mars\" then\n        table = { \"mars\" }\n    elseif planet1\
    \ == \"earth\" and planet2 == \"jupiter\" then\n        table = { \"jupiter\"\
    \ }\n    elseif planet1 == \"earth\" and planet2 == \"saturn\" then\n        table\
    \ = { \"saturn\" }\n    elseif planet1 == \"mars\" and planet2 == \"jupiter\"\
    \ then\n        table = { \"jupiter\" }\n    elseif planet1 == \"mars\" and planet2\
    \ == \"saturn\" then\n        table = { \"saturn\" }\n    elseif planet1 == \"\
    mercury\" and planet2 == \"jupiter\" then\n        table = { \"jupiter\" }\n \
    \   elseif planet1 == \"mercury\" and planet2 == \"saturn\" then\n        table\
    \ = { \"saturn\" }\n    elseif planet1 == \"mercury\" and planet2 == \"uranus\"\
    \ then\n        table = { \"uranus\" }\n    elseif planet1 == \"mercury\" and\
    \ planet2 == \"neptune\" then\n        table = { \"neptune\" }\n    elseif planet1\
    \ == \"mars\" and planet2 == \"uranus\" then\n        table = { \"uranus\" }\n\
    \    elseif planet1 == \"mars\" and planet2 == \"neptune\" then\n        table\
    \ = { \"neptune\" }\n    elseif planet1 == \"venus\" and planet2 == \"jupiter\"\
    \ then\n        table = { \"jupiter\" }\n    elseif planet1 == \"venus\" and planet2\
    \ == \"saturn\" then\n        table = { \"saturn\" }\n    elseif planet1 == \"\
    venus\" and planet2 == \"uranus\" then\n        table = { \"ur", "    local table\
    \ = {}\n    for i = 1, 8 do\n        if string.sub(planet1, 1, i) == string.sub(planet2,\
    \ 1, i) then\n            table[i] = string.sub(planet1, i+1)\n            table[i+1]\
    \ = string.sub(planet2, i+1)\n        end\n    end\n    return table\nend", " \
    \   local table = {}\n    local i = 1\n    while i <= 8 do\n        if i == 1\
    \ or i == 2 or i == 3 or i == 4 or i == 5 or i == 6 or i == 7 or i == 8 then\n\
    \            table[i] = i\n            i = i + 1\n        end\n        i = i +\
    \ 1\n    end\n    table[1] = planet1\n    table[2] = planet2\n    return table\n\
    end", "    local planets = {}\n    for i = 1, 8 do\n        if string.sub(planet1,\
    \ 1, 3) == string.sub(planet2, 1, 3) then\n            table.insert(planets, string.sub(planet1,\
    \ 4, 5))\n        end\n        planet1 = string.sub(planet1, 1, 3)\n        planet2\
    \ = string.sub(planet2, 1, 3)\n    end\n    return planets\nend", "    local table\
    \ = {}\n    local planets = {\n        Mercury = {\n            name = \"Mercury\"\
    ,\n            orbital_period = 87.969,\n            orbital_radius = 0.38709927,\n\
    \            mass = 0.055,\n            diameter = 0.082,\n            orbital_distance\
    \ = 0.38709927,\n            rotational_period = 0.2408467,\n            rotational_speed\
    \ = 0.000001,\n            orbital_period = 87.969,\n            orbital_radius\
    \ = 0.38709927,\n            mass = 0.055,\n            diameter = 0.082,\n  \
    \          orbital_distance = 0.38709927,\n            rotational_period = 0.2408467,\n\
    \            rotational_speed = 0.000001,\n            orbital_period = 87.969,\n\
    \            orbital_radius = 0.38709927,\n            mass = 0.055,\n       \
    \     diameter = 0.082,\n            orbital_distance = 0.38709927,\n        \
    \    rotational_period = 0.2408467,\n            rotational_speed = 0.000001,\n\
    \            orbital_period = 87.969,\n            orbital_radius = 0.38709927,\n\
    \            mass = 0.055,\n            diameter = 0.082,\n            orbital_distance\
    \ = 0.38709927,\n            rotational_period = 0.2408467,\n            rotational_speed\
    \ = 0.000001,\n            orbital_period = 87.969,\n            orbital_radius\
    \ = 0.38709927,\n            mass = 0.055,\n            diameter = 0.082,\n  \
    \          orbital_distance = 0.38709927,\n            rotational_period = 0.2408467,\n\
    \            rotational_speed = 0.000001,\n            orbital_period = 87.969,\n\
    \            orbital_radius = 0.38709927,\n            mass = 0.055,\n       \
    \     diameter = 0.082,\n            orbital_distance = 0.38709927,\n        \
    \    rotational_period = 0.2408467,\n            rotational_speed =", "    local\
    \ planets = {}\n    local i = 1\n    while true do\n        local planet = \"\
    planet\" .. i\n        if planet == planet1 then\n            if planet == planet2\
    \ then\n                return planets\n            else\n                planets[planet]\
    \ = true\n            end\n        elseif planet == planet2 then\n           \
    \ planets[planet] = true\n        end\n        i = i + 1\n    end\nend", "   \
    \ local planets = {}\n    for i = 1, 9 do\n        if tonumber(bf.planets[i])\
    \ > 0 then\n            planets[bf.planets[i]] = true\n        end\n    end\n\
    \    for i = 1, 9 do\n        if tonumber(bf.planets[i]) > 0 then\n          \
    \  if bf.planets[i] ~= planet1 or bf.planets[i] ~= planet2 then\n            \
    \    planets[bf.planets[i]] = true\n            end\n        end\n    end\n  \
    \  return pairs(planets)\nend\nbf.planets = {1, 2, 3, 4, 5, 6, 7, 8, 9}\nbf.planets\
    \ = {1, 2, 3, 4, 5, 6, 7, 8, 9}\nbf.planets = {1, 2, 3, 4, 5, 6, 7, 8, 9}\nbf.planets\
    \ = {1, 2, 3, 4, 5, 6, 7, 8, 9}\nbf.planets = {1, 2, 3, 4, 5, 6, 7, 8, 9}\nbf.planets\
    \ = {1, 2, 3, 4, 5, 6, 7, 8, 9}\nbf.planets = {1, 2, 3, 4, 5, 6, 7, 8, 9}\nbf.planets\
    \ = {1, 2, 3, 4, 5, 6, 7, 8, 9}\nbf.planets = {1, 2, 3, 4, 5, 6, 7, 8, 9}\nbf.planets\
    \ = {1, 2, 3, 4, 5, 6, 7, 8, 9}\nbf.planets = {1, 2, 3, 4, 5, 6, 7, 8, 9}\nbf.planets\
    \ = {1, 2, 3, 4, 5, 6, 7, 8, 9}\nbf.planets = {1, 2, 3, 4, 5, 6, 7, 8, 9}\nbf.planets\
    \ = {1, 2, 3, 4, 5, 6, 7, 8, 9}\nbf.planets = {1, 2, 3, 4, 5, 6, 7, 8, 9}", " \
    \   local planets = {}\n    local i = 1\n    while i <= 8 do\n        if string.sub(planet1,\
    \ 1, string.len(planet1)) == string.sub(planet2, 1, string.len(planet2)) then\n\
    \            table.insert(planets, string.sub(planet1, 1, string.len(planet1)))\n\
    \            table.insert(planets, string.sub(planet2, 1, string.len(planet2)))\n\
    \            return planets\n        end\n        i = i + 1\n    end\nend", " \
    \   local planets = {}\n    local i = 1\n    while i <= 9 do\n        if i ==\
    \ 1 or i == 2 then\n            if planet1 == \"Mercury\" or planet1 == \"Venus\"\
    \ then\n                planets[i] = planet1\n            else\n             \
    \   planets[i] = \"\"\n            end\n        elseif i == 3 or i == 4 then\n\
    \            if planet2 == \"Mercury\" or planet2 == \"Venus\" then\n        \
    \        planets[i] = planet2\n            else\n                planets[i] =\
    \ \"\"\n            end\n        elseif i == 5 or i == 6 then\n            if\
    \ planet1 == \"Jupiter\" then\n                planets[i] = planet1\n        \
    \    else\n                planets[i] = \"\"\n            end\n        elseif\
    \ i == 7 or i == 8 then\n            if planet2 == \"Jupiter\" then\n        \
    \        planets[i] = planet2\n            else\n                planets[i] =\
    \ \"\"\n            end\n        else\n            if planet1 == \"Saturn\" then\n\
    \                planets[i] = planet1\n            else\n                planets[i]\
    \ = \"\"\n            end\n        i = i + 1\n    end\n    return planets\nend",
  "    local table = {}\n    local planet1 = string.lower(planet1)\n    local planet2\
    \ = string.lower(planet2)\n    if planet1 ~= \"mercury\" and planet1 ~= \"venus\"\
    \ and planet1 ~= \"earth\" and planet1 ~= \"mars\" and planet1 ~= \"jupiter\"\
    \ and planet1 ~= \"saturn\" and planet1 ~= \"uranus\" and planet1 ~= \"neptune\"\
    \ then\n        table[1] = planet1\n    else\n        table[1] = \"\"\n    end\n\
    \    if planet2 ~= \"mercury\" and planet2 ~= \"venus\" and planet2 ~= \"earth\"\
    \ and planet2 ~= \"mars\" and planet2 ~= \"jupiter\" and planet2 ~= \"saturn\"\
    \ and planet2 ~= \"uranus\" and planet2 ~= \"neptune\" then\n        table[2]\
    \ = planet2\n    else\n        table[2] = \"\"\n    end\n    if table[1] ~= \"\
    \" and table[2] ~= \"\" then\n        for i = 3, 8 do\n            if table[1]\
    \ ~= \"\" and table[2] ~= \"\" then\n                table[i] = string.gsub(table[1],\
    \ \" \", \"\") .. \" \" .. string.gsub(table[2], \" \", \"\")\n            end\n\
    \            table[i] = string.gsub(table[i], \" \", \"\")\n            table[i]\
    \ = string.gsub(table[i], \" \", \"\")\n            table[i] = string.gsub(table[i],\
    \ \" \", \"\")\n            table[i] = string.gsub(table[i], \" \", \"\")\n  \
    \          table[i] = string.gsub(table[i], \" \", \"\")\n            table[i]\
    \ = string.gsub(table[i], \" \", \"\")\n            table[i] = string.gsub(table[i],\
    \ \" \", \"\")\n            table[i] = string.gsub(table[i], \" \", \"\")\n  \
    \          table[i] = string.gsub(table[i], \" \", \"\")\n            table[i]\
    \ = string.gsub(table[i],", "    local planets = {}\n    local i = 0\n    while\
    \ i < 8 do\n        if planets[planet1] == nil then\n            planets[planet1]\
    \ = i\n        elseif planets[planet2] == nil then\n            planets[planet2]\
    \ = i\n        else\n            table.insert(planets, i)\n            table.insert(planets,\
    \ i)\n            table.insert(planets, i)\n            table.insert(planets,\
    \ i)\n            table.insert(planets, i)\n            table.insert(planets,\
    \ i)\n            table.insert(planets, i)\n            table.insert(planets,\
    \ i)\n            table.insert(planets, i)\n            table.insert(planets,\
    \ i)\n            table.insert(planets, i)\n            table.insert(planets,\
    \ i)\n            table.insert(planets, i)\n            table.insert(planets,\
    \ i)\n            table.insert(planets, i)\n            table.insert(planets,\
    \ i)\n            table.insert(planets, i)\n            table.insert(planets,\
    \ i)\n            table.insert(planets, i)\n            table.insert(planets,\
    \ i)\n            table.insert(planets, i)\n            table.insert(planets,\
    \ i)\n            table.insert(planets, i)\n            table.insert(planets,\
    \ i)\n            table.insert(planets, i)\n            table.insert(planets,\
    \ i)\n            table.insert(planets, i)\n            table.insert(planets,\
    \ i)\n            table.insert(planets, i)\n            table.insert(planets,\
    \ i)\n            table.insert(planets, i)\n            table.insert(planets,\
    \ i)\n            table.insert(planets, i)\n            table.insert(planets,\
    \ i)\n            table.insert(planets, i)\n            table.insert(planets,\
    \ i)\n            table.insert(planets, i)\n            table.insert(planets,\
    \ i)\n            table.insert(planets, i)\n            table.insert(planets,\
    \ i)\n            table.insert(planets", "    local table = {}\n    local planets\
    \ = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"}\n    for i, p in ipairs(planets) do\n        table[p] =\
    \ {}\n        table[p][\"orbital_period\"] = math.sqrt(4 * math.pi * math.pow(p,\
    \ 3) / math.pow(math.G, 2))\n        table[p][\"orbital_distance\"] = math.sqrt(math.pow(p,\
    \ 3) / math.pow(math.G, 2))\n        table[p][\"orbital_speed\"] = math.sqrt(math.pow(p,\
    \ 3) / math.pow(math.G, 2))\n        table[p][\"orbital_period\"] = math.sqrt(4\
    \ * math.pi * math.pow(p, 3) / math.pow(math.G, 2))\n        table[p][\"orbital_distance\"\
    ] = math.sqrt(math.pow(p, 3) / math.pow(math.G, 2))\n        table[p][\"orbital_speed\"\
    ] = math.sqrt(math.pow(p, 3) / math.pow(math.G, 2))\n    end\n    for i, p in\
    \ ipairs(planets) do\n        if p ~= planet1 and p ~= planet2 then\n        \
    \    table[p] = {}\n            table[p][\"orbital_period\"] = math.sqrt(4 * math.pi\
    \ * math.pow(p, 3) / math.pow(math.G, 2))\n            table[p][\"orbital_distance\"\
    ] = math.sqrt(math.pow(p, 3) / math.pow(math.G, 2))\n            table[p][\"orbital_speed\"\
    ] = math.sqrt(math.pow(p, 3) / math.pow(math.G, 2))\n            table[p][\"orbital_period\"\
    ] = math.sqrt(4 * math.pi * math.pow(p, 3) / math.pow(", "    local table = {}\n\
    \    local planet1 = tolower(planet1)\n    local planet2 = tolower(planet2)\n\
    \    if planet1 == \"mercury\" then\n        table[1] = \"Mercury\"\n    elseif\
    \ planet1 == \"venus\" then\n        table[2] = \"Venus\"\n    elseif planet1\
    \ == \"earth\" then\n        table[3] = \"Earth\"\n    elseif planet1 == \"mars\"\
    \ then\n        table[4] = \"Mars\"\n    elseif planet1 == \"jupiter\" then\n\
    \        table[5] = \"Jupiter\"\n    elseif planet1 == \"saturn\" then\n     \
    \   table[6] = \"Saturn\"\n    elseif planet1 == \"uranus\" then\n        table[7]\
    \ = \"Uranus\"\n    elseif planet1 == \"neptune\" then\n        table[8] = \"\
    Neptune\"\n    else\n        table = {}\n    end\n    if planet2 == \"mercury\"\
    \ then\n        table[1] = \"Mercury\"\n    elseif planet2 == \"venus\" then\n\
    \        table[2] = \"Venus\"\n    elseif planet2 == \"earth\" then\n        table[3]\
    \ = \"Earth\"\n    elseif planet2 == \"mars\" then\n        table[4] = \"Mars\"\
    \n    elseif planet2 == \"jupiter\" then\n        table[5] = \"Jupiter\"\n   \
    \ elseif planet2 == \"saturn\" then\n        table[6] = \"Saturn\"\n    elseif\
    \ planet2 == \"uranus\" then\n        table[7] = \"Uranus\"\n    elseif planet2\
    \ == \"neptune\" then\n        table[8] = \"Neptune\"\n    else\n        table\
    \ = {}\n    end\n    return table\nend\n", "    local table = {}\n    for i =\
    \ 1, 8 do\n        if string.sub(planet1, 1, i) == string.sub(planet2, 1, i) then\n\
    \            table[i] = string.sub(planet1, i, i + 1)\n        end\n    end\n\
    \    return table\nend", "    local table = {}\n    local planet1 = string.lower(planet1)\n\
    \    local planet2 = string.lower(planet2)\n    if planet1 == \"earth\" and planet2\
    \ == \"mercury\" then\n        table[\"mercury\"] = \"Venus\"\n    elseif planet1\
    \ == \"earth\" and planet2 == \"venus\" then\n        table[\"venus\"] = \"Mercury\"\
    \n    elseif planet1 == \"earth\" and planet2 == \"mars\" then\n        table[\"\
    mars\"] = \"Mercury\"\n    elseif planet1 == \"earth\" and planet2 == \"jupiter\"\
    \ then\n        table[\"jupiter\"] = \"Mercury\"\n    elseif planet1 == \"earth\"\
    \ and planet2 == \"saturn\" then\n        table[\"saturn\"] = \"Mercury\"\n  \
    \  elseif planet1 == \"earth\" and planet2 == \"uranus\" then\n        table[\"\
    uranus\"] = \"Mercury\"\n    elseif planet1 == \"earth\" and planet2 == \"neptune\"\
    \ then\n        table[\"neptune\"] = \"Mercury\"\n    elseif planet1 == \"mars\"\
    \ and planet2 == \"earth\" then\n        table[\"earth\"] = \"Mercury\"\n    elseif\
    \ planet1 == \"mars\" and planet2 == \"venus\" then\n        table[\"venus\"]\
    \ = \"Mercury\"\n    elseif planet1 == \"mars\" and planet2 == \"jupiter\" then\n\
    \        table[\"jupiter\"] = \"Mercury\"\n    elseif planet1 == \"mars\" and\
    \ planet2 == \"saturn\" then\n        table[\"saturn\"] = \"Mercury\"\n    elseif\
    \ planet1 == \"mars\" and planet2 == \"uranus\" then\n        table[\"uranus\"\
    ] = \"Mercury\"\n    elseif planet1 == \"mars\" and planet2 == \"neptune\" then\n\
    \        table[\"neptune\"] = \"Mercury\"\n    elseif planet1 == \"jupiter\" and\
    \ planet2 == \"earth\" then\n        table[\"earth\"] = \"Mercury\"\n    elseif\
    \ planet1 == \"jupiter\" and planet2 == \"venus\" then\n        table[\"venus\"\
    ] = \"Mercury\"\n    elseif planet1 ==", "    local planets = {}\n    for i=1,8\
    \ do\n        if string.sub(planet1, 1, string.len(planet1)) == string.sub(planet2,\
    \ 1, string.len(planet2)) then\n            planets[i] = string.sub(planet1, 1,\
    \ string.len(planet1))\n            break\n        end\n    end\n    return planets\n\
    end", "    local planets = {}\n    for i=1,8 do\n        if string.sub(planet1,\
    \ 1, string.len(planet1)) == string.sub(planet2, 1, string.len(planet2)) then\n\
    \            planets[i] = string.sub(planet1, 1, string.len(planet1))\n      \
    \  end\n        if string.sub(planet2, 1, string.len(planet2)) == string.sub(planet1,\
    \ 1, string.len(planet1)) then\n            planets[i] = string.sub(planet2, 1,\
    \ string.len(planet2))\n        end\n    end\n    return planets\nend", "    local\
    \ planets = {}\n    for i=1,8 do\n        if string.sub(planet1, 1, string.len(planet1))\
    \ == string.sub(planet2, 1, string.len(planet2)) then\n            table.insert(planets,\
    \ string.sub(planet1, 1, string.len(planet1)))\n        end\n        if string.sub(planet2,\
    \ 1, string.len(planet2)) == string.sub(planet1, 1, string.len(planet1)) then\n\
    \            table.insert(planets, string.sub(planet2, 1, string.len(planet2)))\n\
    \        end\n        if string.sub(planet1, 1, string.len(planet1)) == string.sub(planet2,\
    \ 1, string.len(planet2)) then\n            table.insert(planets, string.sub(planet1,\
    \ 1, string.len(planet1)))\n            table.insert(planets, string.sub(planet2,\
    \ 1, string.len(planet2)))\n        end\n        if string.sub(planet1, 1, string.len(planet1))\
    \ == string.sub(planet2, 1, string.len(planet2)) then\n            table.insert(planets,\
    \ string.sub(planet1, 1, string.len(planet1)))\n            table.insert(planets,\
    \ string.sub(planet2, 1, string.len(planet2)))\n        end\n        if string.sub(planet1,\
    \ 1, string.len(planet1)) == string.sub(planet2, 1, string.len(planet2)) then\n\
    \            table.insert(planets, string.sub(planet1, 1, string.len(planet1)))\n\
    \            table.insert(planets, string.sub(planet2, 1, string.len(planet2)))\n\
    \        end\n        if string.sub(planet1, 1, string.len(planet1)) == string.sub(planet2,\
    \ 1, string.len(planet2)) then\n            table.insert(planets, string.sub(planet1,\
    \ 1, string.len(planet1)))\n            table.insert(planets, string.sub(planet2,\
    \ 1, string.len(planet2)))\n        end\n        if string.sub(planet", "    local\
    \ table = {}\n    for i = 1, 8 do\n        for j = 1, 8 do\n            if i <\
    \ j then\n                table[i] = table[i] or {planet1, planet2}\n        \
    \    end\n        end\n    end\n    return table\nend", "    local planets = {}\n\
    \    local i = 1\n    while i <= 8 do\n        if string.sub(planet1, 1, string.len(planet1))\
    \ == string.sub(planet2, 1, string.len(planet2)) then\n            table.insert(planets,\
    \ string.sub(planet1, 1, string.len(planet1)))\n            table.insert(planets,\
    \ string.sub(planet2, 1, string.len(planet2)))\n            table.insert(planets,\
    \ string.sub(planet1, 1, string.len(planet1)))\n            table.insert(planets,\
    \ string.sub(planet2, 1, string.len(planet2)))\n            table.insert(planets,\
    \ string.sub(planet1, 1, string.len(planet1)))\n            table.insert(planets,\
    \ string.sub(planet2, 1, string.len(planet2)))\n            table.insert(planets,\
    \ string.sub(planet1, 1, string.len(planet1)))\n            table.insert(planets,\
    \ string.sub(planet2, 1, string.len(planet2)))\n            table.insert(planets,\
    \ string.sub(planet1, 1, string.len(planet1)))\n            table.insert(planets,\
    \ string.sub(planet2, 1, string.len(planet2)))\n            table.insert(planets,\
    \ string.sub(planet1, 1, string.len(planet1)))\n            table.insert(planets,\
    \ string.sub(planet2, 1, string.len(planet2)))\n            table.insert(planets,\
    \ string.sub(planet1, 1, string.len(planet1)))\n            table.insert(planets,\
    \ string.sub(planet2, 1, string.len(planet2)))\n            table.insert(planets,\
    \ string.sub(planet1, 1, string.len(planet1)))\n            table.insert(planets,\
    \ string.sub(planet2, 1, string.len(planet2)))\n            table.insert(planets,\
    \ string.sub(planet1, 1, string.len(planet1)))\n            table.insert(planets,\
    \ string.sub(planet2, 1, string.len(planet2)))\n            table.insert(plan",
  "    local table = {}\n    local i = 1\n    while i <= 9 do\n        if string.sub(planet1,\
    \ 1, string.len(planet1)) == string.sub(planet2, 1, string.len(planet2)) then\n\
    \            table[i] = string.sub(planet1, 1, string.len(planet1))\n        \
    \    table[i + 1] = string.sub(planet2, 1, string.len(planet2))\n            i\
    \ = i + 2\n        end\n        i = i + 1\n    end\n    return table\nend", " \
    \   local planets = {}\n    for i = 1, 8 do\n        if string.sub(planet1, 1,\
    \ string.len(planet1)) == string.sub(planet2, 1, string.len(planet2)) then\n \
    \           planets[i] = string.sub(planet1, 1, string.len(planet1))\n       \
    \     break\n        end\n        if i == 8 then\n            planets[i] = \"\
    none\"\n        end\n    end\n    return planets\nend", "    local table = {}\n\
    \    local p1 = string.lower(planet1)\n    local p2 = string.lower(planet2)\n\
    \    if p1 == \"earth\" and p2 == \"mercury\" then\n        table[1] = \"Mercury\"\
    \n    elseif p1 == \"earth\" and p2 == \"venus\" then\n        table[1] = \"Venus\"\
    \n    elseif p1 == \"earth\" and p2 == \"mars\" then\n        table[1] = \"Mars\"\
    \n    elseif p1 == \"earth\" and p2 == \"jupiter\" then\n        table[1] = \"\
    Jupiter\"\n    elseif p1 == \"earth\" and p2 == \"saturn\" then\n        table[1]\
    \ = \"Saturn\"\n    elseif p1 == \"mars\" and p2 == \"jupiter\" then\n       \
    \ table[2] = \"Jupiter\"\n    elseif p1 == \"mars\" and p2 == \"saturn\" then\n\
    \        table[2] = \"Saturn\"\n    elseif p1 == \"mercury\" and p2 == \"jupiter\"\
    \ then\n        table[3] = \"Jupiter\"\n    elseif p1 == \"mercury\" and p2 ==\
    \ \"saturn\" then\n        table[3] = \"Saturn\"\n    elseif p1 == \"mercury\"\
    \ and p2 == \"uranus\" then\n        table[3] = \"Uranus\"\n    elseif p1 == \"\
    mercury\" and p2 == \"neptune\" then\n        table[3] = \"Neptune\"\n    elseif\
    \ p1 == \"mars\" and p2 == \"uranus\" then\n        table[4] = \"Uranus\"\n  \
    \  elseif p1 == \"mars\" and p2 == \"neptune\" then\n        table[4] = \"Neptune\"\
    \n    elseif p1 == \"jupiter\" and p2 == \"uranus\" then\n        table[5] = \"\
    Uranus\"\n    elseif p1 == \"jupiter\" and p2 == \"neptune\" then\n        table[5]\
    \ = \"Neptune\"\n    elseif p1 == \"sat", "    local table = {}\n    local planet1\
    \ = string.lower(planet1)\n    local planet2 = string.lower(planet2)\n    if planet1\
    \ == \"earth\" and planet2 == \"mercury\" then\n        table[\"mercury\"] = \"\
    earth\"\n    elseif planet1 == \"earth\" and planet2 == \"venus\" then\n     \
    \   table[\"venus\"] = \"earth\"\n    elseif planet1 == \"earth\" and planet2\
    \ == \"mars\" then\n        table[\"mars\"] = \"earth\"\n    elseif planet1 ==\
    \ \"earth\" and planet2 == \"jupiter\" then\n        table[\"jupiter\"] = \"earth\"\
    \n    elseif planet1 == \"earth\" and planet2 == \"saturn\" then\n        table[\"\
    saturn\"] = \"earth\"\n    elseif planet1 == \"earth\" and planet2 == \"uranus\"\
    \ then\n        table[\"uranus\"] = \"earth\"\n    elseif planet1 == \"earth\"\
    \ and planet2 == \"neptune\" then\n        table[\"neptune\"] = \"earth\"\n  \
    \  elseif planet1 == \"mercury\" and planet2 == \"earth\" then\n        table[\"\
    earth\"] = \"mercury\"\n    elseif planet1 == \"mercury\" and planet2 == \"venus\"\
    \ then\n        table[\"venus\"] = \"mercury\"\n    elseif planet1 == \"mercury\"\
    \ and planet2 == \"mars\" then\n        table[\"mars\"] = \"mercury\"\n    elseif\
    \ planet1 == \"mercury\" and planet2 == \"jupiter\" then\n        table[\"jupiter\"\
    ] = \"mercury\"\n    elseif planet1 == \"mercury\" and planet2 == \"saturn\" then\n\
    \        table[\"saturn\"] = \"mercury\"\n    elseif planet1 == \"mercury\" and\
    \ planet2 == \"uranus\" then\n        table[\"uranus\"] = \"mercury\"\n    elseif\
    \ planet1 == \"mercury\" and planet2 == \"neptune\" then\n        table[\"neptune\"\
    ] = \"mercury\"\n    elseif planet1 == \"venus\" and planet2 == \"earth\" then\n\
    \        table[\"earth\"] = \"venus\"", "    local table = {}\n    local p1 =\
    \ string.lower(planet1)\n    local p2 = string.lower(planet2)\n    local p1_idx\
    \ = p1:find(\"mercury\")\n    local p2_idx = p2:find(\"neptune\")\n    if p1_idx\
    \ ~= nil and p2_idx ~= nil then\n        table[1] = p1\n        table[2] = p2\n\
    \        table[3] = p1:sub(p1_idx + 1, p1_idx + 5)\n        table[4] = p2:sub(p2_idx\
    \ + 1, p2_idx + 5)\n        table[5] = p1:sub(p1_idx + 1, p1_idx + 5)\n      \
    \  table[6] = p2:sub(p2_idx + 1, p2_idx + 5)\n        table[7] = p1:sub(p1_idx\
    \ + 1, p1_idx + 5)\n        table[8] = p2:sub(p2_idx + 1, p2_idx + 5)\n    end\n\
    \    return table\nend", "    local planets = {}\n    local i = 1\n    while i\
    \ <= 8 do\n        if string.sub(planet1, 1, string.len(planet1)) == string.sub(planet2,\
    \ 1, string.len(planet2)) then\n            table.insert(planets, string.sub(planet1,\
    \ 1, string.len(planet1)))\n            table.insert(planets, string.sub(planet2,\
    \ 1, string.len(planet2)))\n            table.insert(planets, string.sub(planet1,\
    \ 1, string.len(planet1)))\n            table.insert(planets, string.sub(planet2,\
    \ 1, string.len(planet2)))\n            table.insert(planets, string.sub(planet1,\
    \ 1, string.len(planet1)))\n            table.insert(planets, string.sub(planet2,\
    \ 1, string.len(planet2)))\n            table.insert(planets, string.sub(planet1,\
    \ 1, string.len(planet1)))\n            table.insert(planets, string.sub(planet2,\
    \ 1, string.len(planet2)))\n            table.insert(planets, string.sub(planet1,\
    \ 1, string.len(planet1)))\n            table.insert(planets, string.sub(planet2,\
    \ 1, string.len(planet2)))\n            table.insert(planets, string.sub(planet1,\
    \ 1, string.len(planet1)))\n            table.insert(planets, string.sub(planet2,\
    \ 1, string.len(planet2)))\n            table.insert(planets, string.sub(planet1,\
    \ 1, string.len(planet1)))\n            table.insert(planets, string.sub(planet2,\
    \ 1, string.len(planet2)))\n            table.insert(planets, string.sub(planet1,\
    \ 1, string.len(planet1)))\n            table.insert(planets, string.sub(planet2,\
    \ 1, string.len(planet2)))\n            table.insert(planets, string.sub(planet1,\
    \ 1, string.len(planet1)))\n            table.insert(planets, string.sub(planet2,\
    \ 1, string.len(planet2)))\n            table.insert(plan", "    local planets\
    \ = {}\n    local planet1 = string.lower(planet1)\n    local planet2 = string.lower(planet2)\n\
    \    if planet1 == \"earth\" and planet2 == \"mercury\" then\n        table.insert(planets,\
    \ \"Mercury\")\n    elseif planet1 == \"earth\" and planet2 == \"venus\" then\n\
    \        table.insert(planets, \"Venus\")\n    elseif planet1 == \"earth\" and\
    \ planet2 == \"mars\" then\n        table.insert(planets, \"Mars\")\n    elseif\
    \ planet1 == \"earth\" and planet2 == \"jupiter\" then\n        table.insert(planets,\
    \ \"Jupiter\")\n    elseif planet1 == \"earth\" and planet2 == \"saturn\" then\n\
    \        table.insert(planets, \"Saturn\")\n    elseif planet1 == \"earth\" and\
    \ planet2 == \"uranus\" then\n        table.insert(planets, \"Uranus\")\n    elseif\
    \ planet1 == \"earth\" and planet2 == \"neptune\" then\n        table.insert(planets,\
    \ \"Neptune\")\n    elseif planet1 == \"mars\" and planet2 == \"jupiter\" then\n\
    \        table.insert(planets, \"Jupiter\")\n    elseif planet1 == \"mars\" and\
    \ planet2 == \"saturn\" then\n        table.insert(planets, \"Saturn\")\n    elseif\
    \ planet1 == \"mars\" and planet2 == \"uranus\" then\n        table.insert(planets,\
    \ \"Uranus\")\n    elseif planet1 == \"mars\" and planet2 == \"neptune\" then\n\
    \        table.insert(planets, \"Neptune\")\n    elseif planet1 == \"mercury\"\
    \ and planet2 == \"jupiter\" then\n        table.insert(planets, \"Jupiter\")\n\
    \    elseif planet1 == \"mercury\" and planet2 == \"saturn\" then\n        table.insert(planets,\
    \ \"Saturn\")\n    elseif planet1 == \"mercury\" and planet2 == \"uranus\" then\n\
    \        table.insert(planets, \"Uranus\")\n    elseif planet1 == \"mercury\"\
    \ and planet2 == \"", "    local table = {}\n    local planet1 = string.lower(planet1)\n\
    \    local planet2 = string.lower(planet2)\n    if planet1 ~= \"mercury\" and\
    \ planet1 ~= \"venus\" and planet1 ~= \"earth\" and planet1 ~= \"mars\" and planet1\
    \ ~= \"jupiter\" and planet1 ~= \"saturn\" and planet1 ~= \"uranus\" and planet1\
    \ ~= \"neptune\" then\n        table[1] = \"Not a planet\"\n    elseif planet2\
    \ ~= \"mercury\" and planet2 ~= \"venus\" and planet2 ~= \"earth\" and planet2\
    \ ~= \"mars\" and planet2 ~= \"jupiter\" and planet2 ~= \"saturn\" and planet2\
    \ ~= \"uranus\" and planet2 ~= \"neptune\" then\n        table[1] = \"Not a planet\"\
    \n    else\n        for i = 1, 8 do\n            if string.lower(planet1) == \"\
    mercury\" then\n                table[i] = \"Mercury\"\n            elseif string.lower(planet1)\
    \ == \"venus\" then\n                table[i] = \"Venus\"\n            elseif\
    \ string.lower(planet1) == \"earth\" then\n                table[i] = \"Earth\"\
    \n            elseif string.lower(planet1) == \"mars\" then\n                table[i]\
    \ = \"Mars\"\n            elseif string.lower(planet1) == \"jupiter\" then\n \
    \               table[i] = \"Jupiter\"\n            elseif string.lower(planet1)\
    \ == \"saturn\" then\n                table[i] = \"Saturn\"\n            elseif\
    \ string.lower(planet1) == \"uranus\" then\n                table[i] = \"Uranus\"\
    \n            elseif string.lower(planet1) == \"neptune\" then\n             \
    \   table[i] = \"Neptune\"\n            end\n        end\n    end\n    return\
    \ table\nend", "    local planets = {}\n    local i = 1\n    while i <= 8 do\n\
    \        if string.sub(planet1, 1, 1) == string.sub(planets[i], 1, 1) or string.sub(planet2,\
    \ 1, 1) == string.sub(planets[i], 1, 1) then\n            table.insert(planets,\
    \ i)\n        end\n        i = i + 1\n    end\n    return table.sort(planets)\n\
    end", "    local p1, p2, table = {}, {}, {}\n    for i = 1, 8 do\n        p1 =\
    \ string.sub(planet1, i, i)\n        p2 = string.sub(planet2, i, i)\n        if\
    \ p1 == p2 then\n            table[p1] = true\n        else\n            table[p1]\
    \ = table[p2]\n    end\n    for i = 1, 8 do\n        p1 = string.sub(planet1,\
    \ i, i)\n        p2 = string.sub(planet2, i, i)\n        if table[p1] and table[p2]\
    \ then\n            table[p1] = table[p2]\n        else\n            table[p1]\
    \ = table[p2]\n    end\n    return table\nend", "    local planets = {}\n    for\
    \ i = 1, 8 do\n        if string.sub(planet1, 1, i) == string.sub(planet2, 1,\
    \ i) then\n            table.insert(planets, string.sub(planet1, 1, i))\n    \
    \    end\n    end\n    return planets\nend", "    local table = {}\n    for i\
    \ = 1, 8 do\n        if string.sub(planet1, 1, i) == string.sub(planet2, 1, i)\
    \ then\n            table[i] = string.sub(planet1, i+1)\n            table[i+1]\
    \ = string.sub(planet2, i+1)\n            break\n        end\n    end\n    return\
    \ table\nend", "    local table = {}\n    local planet1 = tostring(planet1)\n\
    \    local planet2 = tostring(planet2)\n    local planet1_index = table.index(planet1)\n\
    \    local planet2_index = table.index(planet2)\n    local planet1_orbit = table[planet1_index]\n\
    \    local planet2_orbit = table[planet2_index]\n    local planet1_orbit_index\
    \ = table.index(planet1_orbit)\n    local planet2_orbit_index = table.index(planet2_orbit)\n\
    \    local planet1_orbit_index_min = math.min(planet1_orbit_index, planet2_orbit_index)\n\
    \    local planet1_orbit_index_max = math.max(planet1_orbit_index, planet2_orbit_index)\n\
    \    local planet2_orbit_index_min = math.min(planet1_orbit_index, planet2_orbit_index)\n\
    \    local planet2_orbit_index_max = math.max(planet1_orbit_index, planet2_orbit_index)\n\
    \    for i = planet1_orbit_index_min + 1, planet1_orbit_index_max do\n       \
    \ table[table.index(table[i])] = table[i]\n    table[planet1_index] = table[planet1_index]\n\
    \    table[planet2_index] = table[planet2_index]\n    table[planet1_orbit_index]\
    \ = table[planet1_orbit_index]\n    table[planet2_orbit_index] = table[planet2_orbit_index]\n\
    \    table[planet1_orbit_index_min] = table[planet1_orbit_index_min]\n    table[planet2_orbit_index_min]\
    \ = table[planet2_orbit_index_min]\n    table[planet1_orbit_index_max] = table[planet1_orbit_index_max]\n\
    \    table[planet2_orbit_index_max] = table[planet2_orbit_index_max]\n    return\
    \ table\nend", "    local planets = {}\n    local planet1 = string.lower(planet1)\n\
    \    local planet2 = string.lower(planet2)\n    if planet1 == \"earth\" and planet2\
    \ == \"mercury\" then\n        table.insert(planets, \"Mercury\")\n    elseif\
    \ planet1 == \"earth\" and planet2 == \"venus\" then\n        table.insert(planets,\
    \ \"Venus\")\n    elseif planet1 == \"earth\" and planet2 == \"mars\" then\n \
    \       table.insert(planets, \"Mars\")\n    elseif planet1 == \"earth\" and planet2\
    \ == \"jupiter\" then\n        table.insert(planets, \"Jupiter\")\n    elseif\
    \ planet1 == \"earth\" and planet2 == \"saturn\" then\n        table.insert(planets,\
    \ \"Saturn\")\n    elseif planet1 == \"earth\" and planet2 == \"uranus\" then\n\
    \        table.insert(planets, \"Uranus\")\n    elseif planet1 == \"earth\" and\
    \ planet2 == \"neptune\" then\n        table.insert(planets, \"Neptune\")\n  \
    \  elseif planet1 == \"mars\" and planet2 == \"jupiter\" then\n        table.insert(planets,\
    \ \"Jupiter\")\n    elseif planet1 == \"mars\" and planet2 == \"saturn\" then\n\
    \        table.insert(planets, \"Saturn\")\n    elseif planet1 == \"mars\" and\
    \ planet2 == \"uranus\" then\n        table.insert(planets, \"Uranus\")\n    elseif\
    \ planet1 == \"mars\" and planet2 == \"neptune\" then\n        table.insert(planets,\
    \ \"Neptune\")\n    elseif planet1 == \"mercury\" and planet2 == \"jupiter\" then\n\
    \        table.insert(planets, \"Jupiter\")\n    elseif planet1 == \"mercury\"\
    \ and planet2 == \"saturn\" then\n        table.insert(planets, \"Saturn\")\n\
    \    elseif planet1 == \"mercury\" and planet2 == \"uranus\" then\n        table.insert(planets,\
    \ \"Uranus\")\n    elseif planet1 == \"mercury\" and planet2 == \"", "    local\
    \ planets = {}\n    for i = 1, 8 do\n        if string.sub(planet1, 1, 3) == string.sub(planet2,\
    \ 1, 3) then\n            planets[i] = string.sub(planet1, 4, 6)\n           \
    \ break\n        end\n        if string.sub(planet1, 1, 3) == string.sub(planet2,\
    \ 1, 3) then\n            planets[i] = string.sub(planet1, 4, 6)\n           \
    \ break\n        end\n        if string.sub(planet1, 1, 3) == string.sub(planet2,\
    \ 1, 3) then\n            planets[i] = string.sub(planet1, 4, 6)\n           \
    \ break\n        end\n        if string.sub(planet1, 1, 3) == string.sub(planet2,\
    \ 1, 3) then\n            planets[i] = string.sub(planet1, 4, 6)\n           \
    \ break\n        end\n        if string.sub(planet1, 1, 3) == string.sub(planet2,\
    \ 1, 3) then\n            planets[i] = string.sub(planet1, 4, 6)\n           \
    \ break\n        end\n        if string.sub(planet1, 1, 3) == string.sub(planet2,\
    \ 1, 3) then\n            planets[i] = string.sub(planet1, 4, 6)\n           \
    \ break\n        end\n        if string.sub(planet1, 1, 3) == string.sub(planet2,\
    \ 1, 3) then\n            planets[i] = string.sub(planet1, 4, 6)\n           \
    \ break\n        end\n        if string.sub(planet1, 1, 3) == string.sub(planet2,\
    \ 1, 3) then\n            planets[i] = string.sub(planet1, 4, 6)\n           \
    \ break\n        end\n        if string.sub(planet1, 1, 3) == string.sub(planet2,\
    \ 1, 3) then\n            planets[i] = string.sub(planet1, 4, 6)\n           \
    \ break\n        end\n        if string.sub(planet1, 1, 3) == string.sub(planet2,\
    \ 1, 3) then\n            plan", "    local table = {}\n    for i = 1, 8 do\n\
    \        if i < 7 then\n            table[i] = \" \"\n        else\n         \
    \   table[i] = \"\"\n        end\n    end\n    for i = 1, 8 do\n        if table[i]\
    \ == \" \" then\n            table[i] = planet1\n        elseif table[i] == \"\
    \ \" then\n            table[i] = planet2\n        end\n    end\n    return table\n\
    end", "    local planets = {}\n    local i = 1\n    while i <= 8 do\n        if\
    \ string.sub(planet1, 1, string.len(planet1)) == string.sub(planet2, 1, string.len(planet2))\
    \ then\n            table.insert(planets, string.sub(planet1, 1, string.len(planet1)))\n\
    \            table.insert(planets, string.sub(planet2, 1, string.len(planet2)))\n\
    \            table.insert(planets, string.sub(planet1, 1, string.len(planet1)))\n\
    \            table.insert(planets, string.sub(planet2, 1, string.len(planet2)))\n\
    \            table.insert(planets, string.sub(planet1, 1, string.len(planet1)))\n\
    \            table.insert(planets, string.sub(planet2, 1, string.len(planet2)))\n\
    \            table.insert(planets, string.sub(planet1, 1, string.len(planet1)))\n\
    \            table.insert(planets, string.sub(planet2, 1, string.len(planet2)))\n\
    \            table.insert(planets, string.sub(planet1, 1, string.len(planet1)))\n\
    \            table.insert(planets, string.sub(planet2, 1, string.len(planet2)))\n\
    \            table.insert(planets, string.sub(planet1, 1, string.len(planet1)))\n\
    \            table.insert(planets, string.sub(planet2, 1, string.len(planet2)))\n\
    \            table.insert(planets, string.sub(planet1, 1, string.len(planet1)))\n\
    \            table.insert(planets, string.sub(planet2, 1, string.len(planet2)))\n\
    \            table.insert(planets, string.sub(planet1, 1, string.len(planet1)))\n\
    \            table.insert(planets, string.sub(planet2, 1, string.len(planet2)))\n\
    \            table.insert(planets, string.sub(planet1, 1, string.len(planet1)))\n\
    \            table.insert(planets, string.sub(planet2, 1, string.len(planet2)))\n\
    \            table.insert(plan", "    local planets = {}\n    local p1 = planets:new()\n\
    \    local p2 = planets:new()\n    local p1_name = string.lower(planet1)\n   \
    \ local p2_name = string.lower(planet2)\n    if p1_name == \"mercury\" then\n\
    \        p1:name = \"Mercury\"\n        p1:orbital_period = 0.2408467\n      \
    \  p1:orbital_radius = 0.38709927\n        p1:mass = 0.055\n        p1:density\
    \ = 5.2\n        p1:surface_gravity = 0.38\n        p1:escape_velocity = 11.2\n\
    \        p1:rotational_period = 0.77\n        p1:rotational_speed = 0.0099\n \
    \       p1:semi_major_axis = 0.38709927\n        p1:semi_minor_axis = 0.38709927\n\
    \        p1:perihelion_distance = 0.38709927\n        p1:aphelion_distance = 0.38709927\n\
    \        p1:perihelion_velocity = 0.0099\n        p1:aphelion_velocity = 0.0099\n\
    \        p1:inclination = 0.0\n        p1:longitude_ascending = 0.0\n        p1:longitude_perihelion\
    \ = 0.0\n        p1:longitude_aphelion = 0.0\n        p1:angle_from_solar_system_center\
    \ = 0.0\n        p1:angle_from_solar_system_center_perihelion = 0.0\n        p1:angle_from_solar_system_center_aphelion\
    \ = 0.0\n        p1:angle_from_solar_system_center_perihelion_aphelion = 0.0\n\
    \        p1:angle_from_solar_system_center_perihelion_aphelion_perihelion = 0.0\n\
    \        p1:angle_from_solar_system_center_perihelion_aphelion_perihelion_aphelion\
    \ = 0.0\n        p", "    local table = {}\n    local planets = {\"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    }\n    for i, p in ipairs(planets) do\n        if p ~= planet1 and p ~= planet2\
    \ then\n            table[p] = true\n        end\n    end\n    return table\n\
    end", "    local table = {}\n    local p1 = string.lower(planet1)\n    local p2\
    \ = string.lower(planet2)\n    if p1 == \"earth\" and p2 == \"mercury\" then\n\
    \        table[1] = \"Mercury\"\n    elseif p1 == \"earth\" and p2 == \"venus\"\
    \ then\n        table[1] = \"Venus\"\n    elseif p1 == \"earth\" and p2 == \"\
    mars\" then\n        table[1] = \"Mars\"\n    elseif p1 == \"earth\" and p2 ==\
    \ \"jupiter\" then\n        table[1] = \"Jupiter\"\n    elseif p1 == \"earth\"\
    \ and p2 == \"saturn\" then\n        table[1] = \"Saturn\"\n    elseif p1 == \"\
    mercury\" and p2 == \"earth\" then\n        table[1] = \"Mercury\"\n    elseif\
    \ p1 == \"mercury\" and p2 == \"venus\" then\n        table[1] = \"Mercury\"\n\
    \    elseif p1 == \"mercury\" and p2 == \"mars\" then\n        table[1] = \"Mercury\"\
    \n    elseif p1 == \"mercury\" and p2 == \"jupiter\" then\n        table[1] =\
    \ \"Mercury\"\n    elseif p1 == \"mercury\" and p2 == \"saturn\" then\n      \
    \  table[1] = \"Mercury\"\n    elseif p1 == \"venus\" and p2 == \"earth\" then\n\
    \        table[1] = \"Venus\"\n    elseif p1 == \"venus\" and p2 == \"mars\" then\n\
    \        table[1] = \"Venus\"\n    elseif p1 == \"venus\" and p2 == \"jupiter\"\
    \ then\n        table[1] = \"Venus\"\n    elseif p1 == \"venus\" and p2 == \"\
    saturn\" then\n        table[1] = \"Venus\"\n    elseif p1 == \"mars\" and p2\
    \ == \"earth\" then\n        table[1] = \"Mars\"\n    elseif p1 == \"mars\" and\
    \ p2 == \"mercury\" then", "    local table = {}\n    for i = 1, 8 do\n      \
    \  if string.sub(planet1, 1, string.len(planet1)) == string.sub(planet2, 1, string.len(planet2))\
    \ then\n            table[i] = string.sub(planet1, 1, string.len(planet1))\n \
    \           table[i + 1] = string.sub(planet2, 1, string.len(planet2))\n     \
    \       break\n        end\n    end\n    return table\nend", "    local table\
    \ = {}\n    local planet1 = string.lower(planet1)\n    local planet2 = string.lower(planet2)\n\
    \    if planet1 == \"earth\" and planet2 == \"mercury\" then\n        table[\"\
    earth\"] = \"Mercury\"\n    elseif planet1 == \"earth\" and planet2 == \"venus\"\
    \ then\n        table[\"earth\"] = \"Venus\"\n    elseif planet1 == \"mars\" and\
    \ planet2 == \"mercury\" then\n        table[\"mars\"] = \"Mercury\"\n    elseif\
    \ planet1 == \"mars\" and planet2 == \"venus\" then\n        table[\"mars\"] =\
    \ \"Venus\"\n    elseif planet1 == \"jupiter\" and planet2 == \"mercury\" then\n\
    \        table[\"jupiter\"] = \"Mercury\"\n    elseif planet1 == \"jupiter\" and\
    \ planet2 == \"venus\" then\n        table[\"jupiter\"] = \"Venus\"\n    elseif\
    \ planet1 == \"saturn\" and planet2 == \"mercury\" then\n        table[\"saturn\"\
    ] = \"Mercury\"\n    elseif planet1 == \"saturn\" and planet2 == \"venus\" then\n\
    \        table[\"saturn\"] = \"Venus\"\n    elseif planet1 == \"uranus\" and planet2\
    \ == \"mercury\" then\n        table[\"uranus\"] = \"Mercury\"\n    elseif planet1\
    \ == \"uranus\" and planet2 == \"venus\" then\n        table[\"uranus\"] = \"\
    Venus\"\n    elseif planet1 == \"neptune\" and planet2 == \"mercury\" then\n \
    \       table[\"neptune\"] = \"Mercury\"\n    elseif planet1 == \"neptune\" and\
    \ planet2 == \"venus\" then\n        table[\"neptune\"] = \"Venus\"\n    else\n\
    \        table = {}\n    return table\nend", "    local p1 = string.lower(planet1)\n\
    \    local p2 = string.lower(planet2)\n    local planets = {}\n    if p1 == \"\
    mercury\" and p2 == \"venus\" then\n        planets = { \"Mercury\", \"Venus\"\
    \ }\n    elseif p1 == \"venus\" and p2 == \"earth\" then\n        planets = {\
    \ \"Venus\" }\n    elseif p1 == \"earth\" and p2 == \"mars\" then\n        planets\
    \ = { \"Earth\", \"Mars\" }\n    elseif p1 == \"mars\" and p2 == \"jupiter\" then\n\
    \        planets = { \"Mars\", \"Jupiter\" }\n    elseif p1 == \"jupiter\" and\
    \ p2 == \"saturn\" then\n        planets = { \"Jupiter\", \"Saturn\" }\n    elseif\
    \ p1 == \"saturn\" and p2 == \"uranus\" then\n        planets = { \"Saturn\",\
    \ \"Uranus\" }\n    elseif p1 == \"uranus\" and p2 == \"neptune\" then\n     \
    \   planets = { \"Uranus\", \"Neptune\" }\n    else\n        planets = {}\n  \
    \  return planets\nend", "    local table = {}\n    local planets = {\n      \
    \  \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"\n    }\n    for i, p in ipairs(planets) do\n        local orbit\
    \ = math.sqrt(math.pow(p, 2) + math.pow(planet1, 2))\n        local orbit2 = math.sqrt(math.pow(p,\
    \ 2) + math.pow(planet2, 2))\n        if orbit > orbit2 then table[p] = true end\n\
    \    return table\nend", "    local planets = {}\n    local i = 1\n    while i\
    \ <= 8 do\n        if i == 1 or i == 2 or i == 3 or i == 4 or i == 5 or i == 6\
    \ or i == 7 or i == 8 then\n            if string.sub(planet1, 1, 1) == string.sub(planet2,\
    \ 1, 1) then\n                table.insert(planets, string.sub(planet1, 2, string.len(planet1)))\n\
    \            end\n            if string.sub(planet1, 1, 1) == string.sub(planet2,\
    \ 2, string.len(planet2)) then\n                table.insert(planets, string.sub(planet1,\
    \ 2, string.len(planet1)))\n            end\n            if string.sub(planet1,\
    \ 1, 1) == string.sub(planet2, 3, string.len(planet2)) then\n                table.insert(planets,\
    \ string.sub(planet1, 2, string.len(planet1)))\n            end\n            if\
    \ string.sub(planet1, 1, 1) == string.sub(planet2, 4, string.len(planet2)) then\n\
    \                table.insert(planets, string.sub(planet1, 2, string.len(planet1)))\n\
    \            end\n            if string.sub(planet1, 1, 1) == string.sub(planet2,\
    \ 5, string.len(planet2)) then\n                table.insert(planets, string.sub(planet1,\
    \ 2, string.len(planet1)))\n            end\n            if string.sub(planet1,\
    \ 1, 1) == string.sub(planet2, 6, string.len(planet2)) then\n                table.insert(planets,\
    \ string.sub(planet1, 2, string.len(planet1)))\n            end\n            if\
    \ string.sub(planet1, 1, 1) == string.sub(planet2, 7, string.len(planet2)) then\n\
    \                table.insert(planets, string.sub(planet1, 2, string.len(planet1)))\n\
    \            end\n            if string.sub(planet1, 1, 1) == string.sub(planet2,\
    \ 8, string.len(planet2)) then\n                table.insert(planets, string.sub",
  "    local planets = {}\n    local i = 0\n    while i < 8 do\n        if string.sub(planet1,\
    \ 1, 1) == string.sub(planet2, 1, 1) then\n            table.insert(planets, string.sub(planet1,\
    \ 2, 2))\n            table.insert(planets, string.sub(planet2, 2, 2))\n     \
    \       table.insert(planets, string.sub(planet1, 3, 3))\n            table.insert(planets,\
    \ string.sub(planet2, 3, 3))\n            table.insert(planets, string.sub(planet1,\
    \ 4, 4))\n            table.insert(planets, string.sub(planet2, 4, 4))\n     \
    \       table.insert(planets, string.sub(planet1, 5, 5))\n            table.insert(planets,\
    \ string.sub(planet2, 5, 5))\n            table.insert(planets, string.sub(planet1,\
    \ 6, 6))\n            table.insert(planets, string.sub(planet2, 6, 6))\n     \
    \       table.insert(planets, string.sub(planet1, 7, 7))\n            table.insert(planets,\
    \ string.sub(planet2, 7, 7))\n            return planets\n        end\n      \
    \  i = i + 1\n    end\n    return nil\nend", "    local table = {}\n    local\
    \ planet1 = string.lower(planet1)\n    local planet2 = string.lower(planet2)\n\
    \    if planet1 ~= \"earth\" and planet1 ~= \"mercury\" and planet1 ~= \"venus\"\
    \ and planet1 ~= \"mars\" and planet1 ~= \"jupiter\" and planet1 ~= \"saturn\"\
    \ and planet1 ~= \"uranus\" and planet1 ~= \"neptune\" then\n        table[1]\
    \ = planet1\n    else\n        table[1] = nil\n    end\n    if planet2 ~= \"earth\"\
    \ and planet2 ~= \"mercury\" and planet2 ~= \"venus\" and planet2 ~= \"mars\"\
    \ and planet2 ~= \"jupiter\" and planet2 ~= \"saturn\" and planet2 ~= \"uranus\"\
    \ and planet2 ~= \"neptune\" then\n        table[2] = planet2\n    else\n    \
    \    table[2] = nil\n    end\n    if table[1] ~= nil and table[2] ~= nil then\n\
    \        local planet1 = string.lower(planet1)\n        local planet2 = string.lower(planet2)\n\
    \        local planet1orbit = math.pi * math.sqrt(math.pow(math.sin(math.rad(planet1)),\
    \ 2) + math.pow(math.cos(math.rad(planet1)), 2))\n        local planet2orbit =\
    \ math.pi * math.sqrt(math.pow(math.sin(math.rad(planet2)), 2) + math.pow(math.cos(math.rad(planet2)),\
    \ 2))\n        local table = {}\n        local i = 1\n        while i <= 8 do\n\
    \            local planet = string.lower(planet1)\n            local planetorbit\
    \ = math.pi * math.sqrt(math.pow(math.sin(math.rad(planet)), 2) + math.pow(math.cos(math.rad(planet)),\
    \ 2))\n            local distance = math.fabs(planetorbit - planet2orbit)\n  \
    \          if distance > 0 and distance < planet1orbit and distance < planet2orbit\
    \ then\n                table[i] = planet\n            end\n            i =",
  '    local p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16,
    p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32,
    p33, p34, p35, p36, p37, p38, p39, p40, p41, p42, p43, p44, p45, p46, p47, p48,
    p49, p50, p51, p52, p53, p54, p55, p56, p57, p58, p59, p60, p61, p62, p63, p64,
    p65, p66, p67, p68, p69, p70, p71, p72, p73, p74, p75, p76, p77, p78, p79, p80,
    p81, p82, p83, p84, p85, p86, p87, p88, p89, p90, p91, p92, p93, p94, p95, p96,
    p97, p98, p99, p100, p101, p102, p103, p104, p105, p106, p107, p108, p109, p110,
    p111, p112, p113, p114, p115, p116, p117, p118, p119, p120, p121, p122, p123,
    p124, p125, p126, p127, p128, p129, p130, p131, p132, p133, p134, p135, p136,
    p137, p138, p139, p140, p141, p142, p143, p144, p145, p146, p147, p148, p149,
    p150, p151, p152, p153, p154, p155, p156, p157, p158, p159, p160, p161, p162,
    p163, p164, p165, p166, p167, p168, p169, p170,', "    local table = {}\n    local\
    \ planet1 = string.lower(planet1)\n    local planet2 = string.lower(planet2)\n\
    \    if planet1 ~= \"earth\" and planet1 ~= \"mercury\" and planet1 ~= \"venus\"\
    \ and planet1 ~= \"mars\" and planet1 ~= \"jupiter\" and planet1 ~= \"saturn\"\
    \ and planet1 ~= \"uranus\" and planet1 ~= \"neptune\" then\n        table[1]\
    \ = \"Not a planet\"\n    elseif planet2 ~= \"earth\" and planet2 ~= \"mercury\"\
    \ and planet2 ~= \"venus\" and planet2 ~= \"mars\" and planet2 ~= \"jupiter\"\
    \ and planet2 ~= \"saturn\" and planet2 ~= \"uranus\" and planet2 ~= \"neptune\"\
    \ then\n        table[1] = \"Not a planet\"\n    else\n        table[1] = planet1\n\
    \        table[2] = planet2\n        table[3] = math.fabs(math.pi - math.pi *\
    \ math.cos(math.rad(math.deg2rad(math.pi / 2 - math.deg2rad(math.asin(math.deg2rad(math.degrees(math.atan2(math.degrees(math.atan2(math.degrees(math.atan2(math.degrees(math.atan2(math.degrees(math.degrees(math.degrees(math.degrees(math.degrees(math.degrees(math.degrees(math.degrees(math.degrees(math.degrees(math.degrees(math.degrees(math.degrees(math.degrees(math.degrees(math.degrees(math.degrees(math.degrees(math.degrees(math.degrees(math.degrees(math.degrees(math.degrees(math.degrees(math.degrees(math.degrees(math.degrees(math.degrees(math.degrees(math.degrees(math.degrees(math.degrees(math.degrees(math.degrees(math.degrees(math.degrees(math.degrees(math.",
  "    local planets = {}\n    local i = 1\n    while i <= 8 do\n        if string.sub(planet1,\
    \ 1, 1) == string.sub(planet2, 1, 1) then\n            table.insert(planets, string.sub(planet1,\
    \ 2, 2))\n            table.insert(planets, string.sub(planet2, 2, 2))\n     \
    \       return planets\n        end\n        i = i + 1\n    end\nend", "    local\
    \ table = {}\n    local p1 = string.lower(planet1)\n    local p2 = string.lower(planet2)\n\
    \    if p1 == \"earth\" and p2 == \"mercury\" then\n        table[1] = \"Venus\"\
    \n    elseif p1 == \"earth\" and p2 == \"venus\" then\n        table[1] = \"Mercury\"\
    \n    elseif p1 == \"mars\" and p2 == \"mercury\" then\n        table[2] = \"\
    Mercury\"\n    elseif p1 == \"mars\" and p2 == \"venus\" then\n        table[2]\
    \ = \"Mercury\"\n    elseif p1 == \"jupiter\" and p2 == \"mercury\" then\n   \
    \     table[3] = \"Mercury\"\n    elseif p1 == \"jupiter\" and p2 == \"venus\"\
    \ then\n        table[3] = \"Mercury\"\n    elseif p1 == \"saturn\" and p2 ==\
    \ \"mercury\" then\n        table[4] = \"Mercury\"\n    elseif p1 == \"saturn\"\
    \ and p2 == \"venus\" then\n        table[4] = \"Mercury\"\n    elseif p1 == \"\
    uranus\" and p2 == \"mercury\" then\n        table[5] = \"Mercury\"\n    elseif\
    \ p1 == \"uranus\" and p2 == \"venus\" then\n        table[5] = \"Mercury\"\n\
    \    elseif p1 == \"neptune\" and p2 == \"mercury\" then\n        table[6] = \"\
    Mercury\"\n    elseif p1 == \"neptune\" and p2 == \"venus\" then\n        table[6]\
    \ = \"Mercury\"\n    elseif p1 == \"jupiter\" and p2 == \"earth\" then\n     \
    \   table[7] = \"Mercury\"\n    elseif p1 == \"jupiter\" and p2 == \"mars\" then\n\
    \        table[7] = \"Mercury\"\n    elseif p1 == \"jupiter\" and p2 == \"saturn\"\
    \ then\n        table[7] = \"Mercury\"\n    elseif p1 == \"jupiter\" and", " \
    \   local table = {}\n    for i = 1, 8 do\n        if string.sub(planet1, 1, 3)\
    \ == string.sub(planet2, 1, 3) then\n            table[i] = string.sub(planet1,\
    \ 4, 6)\n            table[i + 1] = string.sub(planet2, 4, 6)\n            table[i\
    \ + 2] = string.sub(planet1, 7, 9)\n            table[i + 3] = string.sub(planet2,\
    \ 7, 9)\n            table[i + 4] = string.sub(planet1, 10, 12)\n            table[i\
    \ + 5] = string.sub(planet2, 10, 12)\n            table[i + 6] = string.sub(planet1,\
    \ 13, 15)\n            table[i + 7] = string.sub(planet2, 13, 15)\n          \
    \  break\n        end\n    end\n    return table\nend\n", "    local table = {}\n\
    \    local p1 = string.lower(planet1)\n    local p2 = string.lower(planet2)\n\
    \    if p1 == \"mercury\" and p2 == \"venus\" then\n        table[1] = \"Mercury\"\
    \n    elseif p1 == \"venus\" and p2 == \"earth\" then\n        table[1] = \"Venus\"\
    \n    elseif p1 == \"earth\" and p2 == \"mars\" then\n        table[1] = \"Earth\"\
    \n    elseif p1 == \"mars\" and p2 == \"jupiter\" then\n        table[1] = \"\
    Mars\"\n    elseif p1 == \"jupiter\" and p2 == \"saturn\" then\n        table[1]\
    \ = \"Jupiter\"\n    elseif p1 == \"saturn\" and p2 == \"uranus\" then\n     \
    \   table[1] = \"Saturn\"\n    elseif p1 == \"uranus\" and p2 == \"neptune\" then\n\
    \        table[1] = \"Uranus\"\n    else\n        table[1] = nil\n    if p1 ==\
    \ \"mercury\" and p2 == \"earth\" then\n        table[2] = \"Mercury\"\n    elseif\
    \ p1 == \"earth\" and p2 == \"mars\" then\n        table[2] = \"Earth\"\n    elseif\
    \ p1 == \"mars\" and p2 == \"jupiter\" then\n        table[2] = \"Mars\"\n   \
    \ elseif p1 == \"jupiter\" and p2 == \"saturn\" then\n        table[2] = \"Jupiter\"\
    \n    elseif p1 == \"saturn\" and p2 == \"uranus\" then\n        table[2] = \"\
    Saturn\"\n    elseif p1 == \"uranus\" and p2 == \"neptune\" then\n        table[2]\
    \ = \"Uranus\"\n    else\n        table[2] = nil\n    return table\nend", "  \
    \  local table = {}\n    for i = 1, 8 do\n        for j = 1, 8 do\n          \
    \  if i < j then\n                if planet1 == planets[i] and planet2 == planets[j]\
    \ then\n                    table[j] = planets[i]\n                end\n     \
    \           if planet2 == planets[i] and planet1 == planets[j] then\n        \
    \            table[i] = planets[j]\n                end\n            end\n   \
    \     end\n    end\n    return table\nend", "    local table = {}\n    local planet1\
    \ = string.lower(planet1)\n    local planet2 = string.lower(planet2)\n    if planet1\
    \ ~= \"mercury\" and planet1 ~= \"venus\" and planet1 ~= \"earth\" and planet1\
    \ ~= \"mars\" and planet1 ~= \"jupiter\" and planet1 ~= \"saturn\" and planet1\
    \ ~= \"uranus\" and planet1 ~= \"neptune\" then\n        table.planet1 = planet1\n\
    \    else\n        table.planet1 = \"\"\n    end\n    if planet2 ~= \"mercury\"\
    \ and planet2 ~= \"venus\" and planet2 ~= \"earth\" and planet2 ~= \"mars\" and\
    \ planet2 ~= \"jupiter\" and planet2 ~= \"saturn\" and planet2 ~= \"uranus\" and\
    \ planet2 ~= \"neptune\" then\n        table.planet2 = planet2\n    else\n   \
    \     table.planet2 = \"\"\n    end\n    if table.planet1 and table.planet2 then\n\
    \        table.planet1 = string.lower(table.planet1)\n        table.planet2 =\
    \ string.lower(table.planet2)\n        local table1 = {}\n        local table2\
    \ = {}\n        table1 = bf(table.planet1, table.planet2)\n        table2 = bf(table.planet2,\
    \ table.planet1)\n        table.planet1 = table1.planet1\n        table.planet2\
    \ = table2.planet1\n        table.planet1 = table1.planet2\n        table.planet2\
    \ = table2.planet2\n        table.planet1 = table1.planet1\n        table.planet2\
    \ = table2.planet2\n        table.planet1 = table1.planet2\n        table.planet2\
    \ = table2.planet1\n        table.planet1 = table1.planet2\n        table.planet2\
    \ = table2.planet2\n        table.planet1 = table1.planet1\n        table.planet2\
    \ = table2.planet1\n        table.planet1 = table1.planet2\n        table.planet2\
    \ = table2.planet2\n        table.planet1 = table1.planet1\n        table.planet2\
    \ = table", "    local table = {}\n    for i = 1, 8 do\n        if string.sub(planet1,\
    \ 1, i) == string.sub(planet2, 1, i) then\n            table[i] = string.sub(planet1,\
    \ i + 1, 8)\n        end\n    end\n    return table\nend", "    local table =\
    \ {}\n    for i=1,8 do\n        if string.sub(planet1, 1, 3) == string.sub(planet2,\
    \ 1, 3) then\n            table[i] = string.sub(planet1, 4, 6)\n            table[i+1]\
    \ = string.sub(planet2, 4, 6)\n            table[i+2] = string.sub(planet1, 7,\
    \ 9)\n            table[i+3] = string.sub(planet2, 7, 9)\n            table[i+4]\
    \ = string.sub(planet1, 10, 12)\n            table[i+5] = string.sub(planet2,\
    \ 10, 12)\n            table[i+6] = string.sub(planet1, 13, 15)\n            table[i+7]\
    \ = string.sub(planet2, 13, 15)\n            break\n        end\n    end\n   \
    \ return table\nend\n", "    local table = {}\n    local i = 0\n    local j =\
    \ 0\n    local k = 0\n    local l = 0\n    local m = 0\n    local n = 0\n    local\
    \ o = 0\n    local p = 0\n    local q = 0\n    local r = 0\n    local s = 0\n\
    \    local t = 0\n    local u = 0\n    local v = 0\n    local w = 0\n    local\
    \ x = 0\n    local y = 0\n    local z = 0\n    local a = 0\n    local b = 0\n\
    \    local c = 0\n    local d = 0\n    local e = 0\n    local f = 0\n    local\
    \ g = 0\n    local h = 0\n    local i = 0\n    local j = 0\n    local k = 0\n\
    \    local l = 0\n    local m = 0\n    local n = 0\n    local o = 0\n    local\
    \ p = 0\n    local q = 0\n    local r = 0\n    local s = 0\n    local t = 0\n\
    \    local u = 0\n    local v = 0\n    local w = 0\n    local x = 0\n    local\
    \ y = 0\n    local z = 0\n    local a = 0\n    local b = 0\n    local c = 0\n\
    \    local d = 0\n    local e = 0\n    local f = 0\n    local g = 0\n    local\
    \ h = 0\n    local i = 0\n    local j = 0\n    local k = 0\n    local l = 0\n\
    \    local m = 0\n    local n = 0\n    local o = 0\n    local p = 0\n    local\
    \ q = 0\n    local r = 0\n    local s = 0\n    local t = 0\n    local u = 0\n\
    \    local v = 0\n    local w = 0\n    local x = 0\n    local y = 0\n    local\
    \ z = 0\n    local a = 0\n    local b = 0\n    local c = 0\n    local d = 0\n\
    \    local e = 0\n    local f = 0\n    local g = 0\n    local h = 0\n    local\
    \ i = 0\n    local j = 0\n    local k = 0\n    local l = 0\n    local m = 0\n\
    \    local n = 0\n    local", "    local planets = {}\n    local i = 1\n    while\
    \ i <= 9 do\n        if string.sub(planet1, 1, 5) == string.sub(planet2, 1, 5)\
    \ then\n            table.insert(planets, string.sub(planet1, 6, 9))\n       \
    \     table.insert(planets, string.sub(planet2, 6, 9))\n            return planets\n\
    \        end\n        i = i + 1\n    end\nend", "    local table = {}\n    local\
    \ i = 1\n    while i <= 8 do\n        if table[i] == nil then\n            table[i]\
    \ = {\n                planet = planets[i],\n                distance = math.fabs(math.sqrt(math.pow(planets[i][1]\
    \ - sun[1], 2) + math.pow(planets[i][2] - sun[2], 2))),\n                index\
    \ = i\n            end\n            i = i + 1\n        end\n    end\n    table[1]\
    \ = {\n        planet = planets[1],\n        distance = math.fabs(math.sqrt(math.pow(planets[1][1]\
    \ - sun[1], 2) + math.pow(planets[1][2] - sun[2], 2))),\n        index = 1\n \
    \   }\n    table[2] = {\n        planet = planets[2],\n        distance = math.fabs(math.sqrt(math.pow(planets[2][1]\
    \ - sun[1], 2) + math.pow(planets[2][2] - sun[2], 2))),\n        index = 2\n \
    \   }\n    table[3] = {\n        planet = planets[3],\n        distance = math.fabs(math.sqrt(math.pow(planets[3][1]\
    \ - sun[1], 2) + math.pow(planets[3][2] - sun[2], 2))),\n        index = 3\n \
    \   }\n    table[4] = {\n        planet = planets[4],\n        distance = math.fabs(math.sqrt(math.pow(planets[4][1]\
    \ - sun[1], 2) + math.pow(planets[4][2] - sun[2], 2))),\n        index = 4\n \
    \   }\n    table[5] = {\n        planet = planets[5],\n        distance = math.fabs(math.sqrt(math.pow(planets[5][1]\
    \ - sun[1], 2) + math.pow(planets[5][2] - sun[2], 2))),\n        index = 5\n \
    \   }\n    table", "    local planets = {}\n    for i = 1, 8 do\n        if string.sub(planet1,\
    \ 1, string.len(planet1)) == string.sub(planet2, 1, string.len(planet2)) then\n\
    \            planets[i] = string.sub(planet1, 1, string.len(planet1))\n      \
    \      break\n        end\n    end\n    return planets\nend", "    local table\
    \ = {}\n    local i = 1\n    while i <= 8 do\n        if string.sub(planet1, 1,\
    \ string.len(planet1)) == string.sub(planet2, 1, string.len(planet2)) then\n \
    \           table[i] = string.sub(planet1, 1, string.len(planet1))\n         \
    \   table[i + 1] = string.sub(planet2, 1, string.len(planet2))\n            i\
    \ = i + 2\n        end\n        i = i + 1\n    end\n    return table\nend", " \
    \   local planets = {}\n    for i = 1, 8 do\n        if string.sub(planet1, 1,\
    \ string.len(planet1)) == string.sub(planet2, 1, string.len(planet2)) then\n \
    \           table.insert(planets, string.sub(planet1, 1, string.len(planet1)))\n\
    \        end\n        if string.sub(planet2, 1, string.len(planet2)) == string.sub(planet1,\
    \ 1, string.len(planet1)) then\n            table.insert(planets, string.sub(planet2,\
    \ 1, string.len(planet2)))\n        end\n        if string.sub(planet1, 1, string.len(planet1))\
    \ == string.sub(planet2, 1, string.len(planet2)) then\n            table.insert(planets,\
    \ string.sub(planet1, 1, string.len(planet1)))\n            table.insert(planets,\
    \ string.sub(planet2, 1, string.len(planet2)))\n        end\n        if string.sub(planet1,\
    \ 1, string.len(planet1)) == string.sub(planet2, 1, string.len(planet2)) then\n\
    \            table.insert(planets, string.sub(planet1, 1, string.len(planet1)))\n\
    \            table.insert(planets, string.sub(planet2, 1, string.len(planet2)))\n\
    \        end\n        if string.sub(planet1, 1, string.len(planet1)) == string.sub(planet2,\
    \ 1, string.len(planet2)) then\n            table.insert(planets, string.sub(planet1,\
    \ 1, string.len(planet1)))\n            table.insert(planets, string.sub(planet2,\
    \ 1, string.len(planet2)))\n        end\n        if string.sub(planet1, 1, string.len(planet1))\
    \ == string.sub(planet2, 1, string.len(planet2)) then\n            table.insert(planets,\
    \ string.sub(planet1, 1, string.len(planet1)))\n            table.insert(planets,\
    \ string.sub(planet2, 1, string.len(planet2)))\n        end\n        if string.sub(planet",
  "    local planets = {}\n    for i = 1, 8 do\n        if string.sub(planet1, 1,\
    \ i) == string.sub(planet2, 1, i) then\n            table.insert(planets, string.sub(planet1,\
    \ 1, i))\n        end\n    end\n    return planets\nend", "    local planets =\
    \ {}\n    local i = 1\n    while i <= 8 do\n        if string.sub(planet1, 1,\
    \ string.len(planet1)) == string.sub(planet2, 1, string.len(planet2)) then\n \
    \           table.insert(planets, string.sub(planet1, 1, string.len(planet1)))\n\
    \            table.insert(planets, string.sub(planet2, 1, string.len(planet2)))\n\
    \            table.insert(planets, string.sub(planet1, 1, string.len(planet1)))\n\
    \            table.insert(planets, string.sub(planet2, 1, string.len(planet2)))\n\
    \            table.insert(planets, string.sub(planet1, 1, string.len(planet1)))\n\
    \            table.insert(planets, string.sub(planet2, 1, string.len(planet2)))\n\
    \            table.insert(planets, string.sub(planet1, 1, string.len(planet1)))\n\
    \            table.insert(planets, string.sub(planet2, 1, string.len(planet2)))\n\
    \            table.insert(planets, string.sub(planet1, 1, string.len(planet1)))\n\
    \            table.insert(planets, string.sub(planet2, 1, string.len(planet2)))\n\
    \            table.insert(planets, string.sub(planet1, 1, string.len(planet1)))\n\
    \            table.insert(planets, string.sub(planet2, 1, string.len(planet2)))\n\
    \            table.insert(planets, string.sub(planet1, 1, string.len(planet1)))\n\
    \            table.insert(planets, string.sub(planet2, 1, string.len(planet2)))\n\
    \            table.insert(planets, string.sub(planet1, 1, string.len(planet1)))\n\
    \            table.insert(planets, string.sub(planet2, 1, string.len(planet2)))\n\
    \            table.insert(planets, string.sub(planet1, 1, string.len(planet1)))\n\
    \            table.insert(planets, string.sub(planet2, 1, string.len(planet2)))\n\
    \            table.insert(plan", "    local table = {}\n    local p1 = string.lower(planet1)\n\
    \    local p2 = string.lower(planet2)\n    if p1 == \"earth\" and p2 == \"mercury\"\
    \ then\n        table[\"mercury\"] = true\n    elseif p1 == \"earth\" and p2 ==\
    \ \"venus\" then\n        table[\"venus\"] = true\n    elseif p1 == \"earth\"\
    \ and p2 == \"mars\" then\n        table[\"mars\"] = true\n    elseif p1 == \"\
    earth\" and p2 == \"jupiter\" then\n        table[\"jupiter\"] = true\n    elseif\
    \ p1 == \"earth\" and p2 == \"saturn\" then\n        table[\"saturn\"] = true\n\
    \    elseif p1 == \"earth\" and p2 == \"uranus\" then\n        table[\"uranus\"\
    ] = true\n    elseif p1 == \"earth\" and p2 == \"neptune\" then\n        table[\"\
    neptune\"] = true\n    elseif p1 == \"mercury\" and p2 == \"earth\" then\n   \
    \     table[\"earth\"] = true\n    elseif p1 == \"mercury\" and p2 == \"venus\"\
    \ then\n        table[\"venus\"] = true\n    elseif p1 == \"mercury\" and p2 ==\
    \ \"mars\" then\n        table[\"mars\"] = true\n    elseif p1 == \"mercury\"\
    \ and p2 == \"jupiter\" then\n        table[\"jupiter\"] = true\n    elseif p1\
    \ == \"mercury\" and p2 == \"saturn\" then\n        table[\"saturn\"] = true\n\
    \    elseif p1 == \"mercury\" and p2 == \"uranus\" then\n        table[\"uranus\"\
    ] = true\n    elseif p1 == \"mercury\" and p2 == \"neptune\" then\n        table[\"\
    neptune\"] = true\n    elseif p1 == \"venus\" and p2 == \"earth\" then\n     \
    \   table[\"earth\"] = true\n    elseif p1 == \"venus\" and p2 == \"mars\" then\n\
    \        table[\"mars\"] = true\n    elseif p1 == \"venus\" and p2 == \"", " \
    \   local planets = {}\n    for i = 1, 8 do\n        if string.sub(planet1, 1,\
    \ string.len(planet1)) == string.sub(planet2, 1, string.len(planet2)) then\n \
    \           planets[i] = string.sub(planet1, 1, string.len(planet1))\n       \
    \ end\n        planet1 = string.sub(planet1, 1, string.len(planet1))\n       \
    \ planet2 = string.sub(planet2, 1, string.len(planet2))\n    end\n    return planets\n\
    end", "    local table = {}\n    local planet1 = string.lower(planet1)\n    local\
    \ planet2 = string.lower(planet2)\n    if planet1 == \"earth\" and planet2 ==\
    \ \"mercury\" then\n        table[1] = \"Mercury\"\n    elseif planet1 == \"earth\"\
    \ and planet2 == \"venus\" then\n        table[1] = \"Venus\"\n    elseif planet1\
    \ == \"earth\" and planet2 == \"mars\" then\n        table[1] = \"Mars\"\n   \
    \ elseif planet1 == \"earth\" and planet2 == \"jupiter\" then\n        table[1]\
    \ = \"Jupiter\"\n    elseif planet1 == \"earth\" and planet2 == \"saturn\" then\n\
    \        table[1] = \"Saturn\"\n    elseif planet1 == \"mars\" and planet2 ==\
    \ \"jupiter\" then\n        table[2] = \"Jupiter\"\n    elseif planet1 == \"mars\"\
    \ and planet2 == \"saturn\" then\n        table[2] = \"Saturn\"\n    elseif planet1\
    \ == \"mercury\" and planet2 == \"jupiter\" then\n        table[3] = \"Jupiter\"\
    \n    elseif planet1 == \"mercury\" and planet2 == \"saturn\" then\n        table[3]\
    \ = \"Saturn\"\n    elseif planet1 == \"mercury\" and planet2 == \"uranus\" then\n\
    \        table[3] = \"Uranus\"\n    elseif planet1 == \"mercury\" and planet2\
    \ == \"neptune\" then\n        table[3] = \"Neptune\"\n    elseif planet1 == \"\
    venus\" and planet2 == \"jupiter\" then\n        table[4] = \"Jupiter\"\n    elseif\
    \ planet1 == \"venus\" and planet2 == \"saturn\" then\n        table[4] = \"Saturn\"\
    \n    elseif planet1 == \"venus\" and planet2 == \"uranus\" then\n        table[4]\
    \ = \"Uranus\"\n    elseif planet1 == \"venus\" and planet2 == \"neptune\" then\n\
    \        table[4] = \"Neptune\"\n    elseif planet1 == \"mars\" and", "    local\
    \ planets = {}\n    for i = 1, 8 do\n        if string.sub(planet1, 1, i) == string.sub(planet2,\
    \ 1, i) then\n            table.insert(planets, string.sub(planet1, 1, i))\n \
    \       end\n    end\n    return planets\nend", "    local planets = {}\n    local\
    \ i = 1\n    while i <= 8 do\n        if string.sub(planet1, 1, 5) == string.sub(planet2,\
    \ 1, 5) then\n            table.insert(planets, string.sub(planet1, 6, 9))\n \
    \           table.insert(planets, string.sub(planet2, 6, 9))\n            return\
    \ planets\n        end\n        i = i + 1\n    end\n    return nil\nend", "  \
    \  local planets = {}\n    local i = 1\n    while i <= 8 do\n        if string.sub(planet1,\
    \ 1, string.len(planet1)) == string.sub(planet2, 1, string.len(planet2)) then\n\
    \            planets[i] = string.sub(planet1, 1, string.len(planet1))\n      \
    \      i = i + 1\n        end\n        i = i + 1\n    end\n    return planets\n\
    end", "    local planets = {}\n    local i = 1\n    while i <= 8 do\n        if\
    \ string.sub(planet1, 1, string.len(planet1)) == string.sub(planet2, 1, string.len(planet2))\
    \ then\n            planets[i] = string.sub(planet1, 1, string.len(planet1))\n\
    \            i = i + 1\n        end\n        i = i + 1\n    end\n    return planets\n\
    end", "    local planets = {}\n    local p1 = planets[planet1]\n    local p2 =\
    \ planets[planet2]\n    if p1 and p2 then\n        for i = 1, p1.length, 2 do\n\
    \            if p1[i] > p2[i] then\n                table.insert(planets, p1[i])\n\
    \                table.insert(planets, p1[i-1])\n            else\n          \
    \      table.insert(planets, p2[i])\n                table.insert(planets, p2[i-1])\n\
    \            end\n        end\n    end\n    return planets\nend", "    local table\
    \ = {}\n    local i = 0\n    local j = 0\n    local k = 0\n    local l = 0\n \
    \   local m = 0\n    local n = 0\n    local o = 0\n    local p = 0\n    local\
    \ q = 0\n    local r = 0\n    local s = 0\n    local t = 0\n    local u = 0\n\
    \    local v = 0\n    local w = 0\n    local x = 0\n    local y = 0\n    local\
    \ z = 0\n    local a = 0\n    local b = 0\n    local c = 0\n    local d = 0\n\
    \    local e = 0\n    local f = 0\n    local g = 0\n    local h = 0\n    local\
    \ i = 0\n    local j = 0\n    local k = 0\n    local l = 0\n    local m = 0\n\
    \    local n = 0\n    local o = 0\n    local p = 0\n    local q = 0\n    local\
    \ r = 0\n    local s = 0\n    local t = 0\n    local u = 0\n    local v = 0\n\
    \    local w = 0\n    local x = 0\n    local y = 0\n    local z = 0\n    local\
    \ a = 0\n    local b = 0\n    local c = 0\n    local d = 0\n    local e = 0\n\
    \    local f = 0\n    local g = 0\n    local h = 0\n    local i = 0\n    local\
    \ j = 0\n    local k = 0\n    local l = 0\n    local m = 0\n    local n = 0\n\
    \    local o = 0\n    local p = 0\n    local q = 0\n    local r = 0\n    local\
    \ s = 0\n    local t = 0\n    local u = 0\n    local v = 0\n    local w = 0\n\
    \    local x = 0\n    local y = 0\n    local z = 0\n    local a = 0\n    local\
    \ b = 0\n    local c = 0\n    local d = 0\n    local e = 0\n    local f = 0\n\
    \    local g = 0\n    local h = 0\n    local i = 0\n    local j = 0\n    local\
    \ k = 0\n    local l = 0\n    local m = 0\n    local n = 0\n    local", "    local\
    \ planets = {}\n    local i = 1\n    while i <= 8 do\n        if string.sub(planet1,\
    \ 1, string.len(planet1)) == string.sub(planet2, 1, string.len(planet2)) then\n\
    \            table.insert(planets, string.sub(planet1, 1, string.len(planet1)))\n\
    \            table.insert(planets, string.sub(planet2, 1, string.len(planet2)))\n\
    \            table.insert(planets, string.sub(planet1, 1, string.len(planet1)))\n\
    \            table.insert(planets, string.sub(planet2, 1, string.len(planet2)))\n\
    \            table.insert(planets, string.sub(planet1, 1, string.len(planet1)))\n\
    \            table.insert(planets, string.sub(planet2, 1, string.len(planet2)))\n\
    \            table.insert(planets, string.sub(planet1, 1, string.len(planet1)))\n\
    \            table.insert(planets, string.sub(planet2, 1, string.len(planet2)))\n\
    \            table.insert(planets, string.sub(planet1, 1, string.len(planet1)))\n\
    \            table.insert(planets, string.sub(planet2, 1, string.len(planet2)))\n\
    \            table.insert(planets, string.sub(planet1, 1, string.len(planet1)))\n\
    \            table.insert(planets, string.sub(planet2, 1, string.len(planet2)))\n\
    \            table.insert(planets, string.sub(planet1, 1, string.len(planet1)))\n\
    \            table.insert(planets, string.sub(planet2, 1, string.len(planet2)))\n\
    \            table.insert(planets, string.sub(planet1, 1, string.len(planet1)))\n\
    \            table.insert(planets, string.sub(planet2, 1, string.len(planet2)))\n\
    \            table.insert(planets, string.sub(planet1, 1, string.len(planet1)))\n\
    \            table.insert(planets, string.sub(planet2, 1, string.len(planet2)))\n\
    \            table.insert(plan", "    local table = {}\n    local planets = {\n\
    \        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"\n    }\n    for _, p in ipairs(planets) do\n       \
    \ if p ~= planet1 and p ~= planet2 then\n            table[p] = p\n        end\n\
    \    end\n    return table\nend", "    local table = {}\n    local i = 1\n   \
    \ while i <= 9 do\n        if i ~= planet1 and i ~= planet2 then\n           \
    \ table[i] = i\n            i = i + 1\n        end\n        i = i + 1\n    end\n\
    \    return table\nend", "    local table = {}\n    local planet1 = string.lower(planet1)\n\
    \    local planet2 = string.lower(planet2)\n    if planet1 == \"earth\" and planet2\
    \ == \"mercury\" then\n        table[1] = \"Mercury\"\n    elseif planet1 == \"\
    earth\" and planet2 == \"venus\" then\n        table[1] = \"Venus\"\n    elseif\
    \ planet1 == \"earth\" and planet2 == \"mars\" then\n        table[1] = \"Mars\"\
    \n    elseif planet1 == \"earth\" and planet2 == \"jupiter\" then\n        table[1]\
    \ = \"Jupiter\"\n    elseif planet1 == \"earth\" and planet2 == \"saturn\" then\n\
    \        table[1] = \"Saturn\"\n    elseif planet1 == \"mercury\" and planet2\
    \ == \"earth\" then\n        table[2] = \"Mercury\"\n    elseif planet1 == \"\
    mercury\" and planet2 == \"venus\" then\n        table[2] = \"Venus\"\n    elseif\
    \ planet1 == \"mercury\" and planet2 == \"mars\" then\n        table[2] = \"Mars\"\
    \n    elseif planet1 == \"mercury\" and planet2 == \"jupiter\" then\n        table[2]\
    \ = \"Jupiter\"\n    elseif planet1 == \"mercury\" and planet2 == \"saturn\" then\n\
    \        table[2] = \"Saturn\"\n    elseif planet1 == \"venus\" and planet2 ==\
    \ \"earth\" then\n        table[3] = \"Venus\"\n    elseif planet1 == \"venus\"\
    \ and planet2 == \"mars\" then\n        table[3] = \"Mars\"\n    elseif planet1\
    \ == \"venus\" and planet2 == \"jupiter\" then\n        table[3] = \"Jupiter\"\
    \n    elseif planet1 == \"venus\" and planet2 == \"saturn\" then\n        table[3]\
    \ = \"Saturn\"\n    elseif planet1 == \"mars\" and planet2 == \"earth\" then\n\
    \        table[4] = \"Mars\"\n    elseif planet1 == \"mars\" and planet2 == \"\
    mercury\" then\n        ", "    local table = {}\n    local planet1 = string.lower(planet1)\n\
    \    local planet2 = string.lower(planet2)\n    if planet1 == \"earth\" and planet2\
    \ == \"mercury\" then\n        table[\"earth\"] = \"Mercury\"\n    elseif planet1\
    \ == \"earth\" and planet2 == \"venus\" then\n        table[\"earth\"] = \"Venus\"\
    \n    elseif planet1 == \"mars\" and planet2 == \"mercury\" then\n        table[\"\
    mars\"] = \"Mercury\"\n    elseif planet1 == \"mars\" and planet2 == \"venus\"\
    \ then\n        table[\"mars\"] = \"Venus\"\n    elseif planet1 == \"jupiter\"\
    \ and planet2 == \"mercury\" then\n        table[\"jupiter\"] = \"Mercury\"\n\
    \    elseif planet1 == \"jupiter\" and planet2 == \"venus\" then\n        table[\"\
    jupiter\"] = \"Venus\"\n    elseif planet1 == \"saturn\" and planet2 == \"mercury\"\
    \ then\n        table[\"saturn\"] = \"Mercury\"\n    elseif planet1 == \"saturn\"\
    \ and planet2 == \"venus\" then\n        table[\"saturn\"] = \"Venus\"\n    elseif\
    \ planet1 == \"uranus\" and planet2 == \"mercury\" then\n        table[\"uranus\"\
    ] = \"Mercury\"\n    elseif planet1 == \"uranus\" and planet2 == \"venus\" then\n\
    \        table[\"uranus\"] = \"Venus\"\n    elseif planet1 == \"neptune\" and\
    \ planet2 == \"mercury\" then\n        table[\"neptune\"] = \"Mercury\"\n    elseif\
    \ planet1 == \"neptune\" and planet2 == \"venus\" then\n        table[\"neptune\"\
    ] = \"Venus\"\n    else\n        table = {}\n    return table\nend", "    local\
    \ table = {}\n    for i = 1, 8 do\n        if string.sub(planet1, 1, i) == string.sub(planet2,\
    \ 1, i) then\n            table[i] = string.sub(planet1, i + 1)\n        end\n\
    \    end\n    return table\nend", "    local planets = {}\n    local i = 1\n \
    \   while i <= 8 do\n        if string.sub(planet1, 1, string.len(planet1)) ==\
    \ string.sub(planet2, 1, string.len(planet2)) then\n            table.insert(planets,\
    \ string.sub(planet1, 1, string.len(planet1)))\n            table.insert(planets,\
    \ string.sub(planet2, 1, string.len(planet2)))\n            return planets\n \
    \       end\n        i = i + 1\n    end\n    return nil\nend", "    local table\
    \ = {}\n    for i = 1, 8 do\n        if string.sub(planet1, 1, 3) == string.sub(planet2,\
    \ 1, 3) then\n            table[i] = string.sub(planet1, 4, 6)\n            table[i\
    \ + 1] = string.sub(planet2, 4, 6)\n            table[i + 2] = string.sub(planet1,\
    \ 7, 9)\n            table[i + 3] = string.sub(planet2, 7, 9)\n            table[i\
    \ + 4] = string.sub(planet1, 10, 12)\n            table[i + 5] = string.sub(planet2,\
    \ 10, 12)\n            table[i + 6] = string.sub(planet1, 13, 15)\n          \
    \  table[i + 7] = string.sub(planet2, 13, 15)\n            break\n        end\n\
    \    end\n    return table\nend", "    local planets = {}\n    for i = 1, 8 do\n\
    \        if string.sub(planet1, 1, 3) == string.sub(planet2, 1, 3) then\n    \
    \        table.insert(planets, string.sub(planet1, 4, 5))\n        end\n     \
    \   planet1 = string.sub(planet1, 1, 3)\n        planet2 = string.sub(planet2,\
    \ 1, 3)\n    end\n    return planets\nend", "    local planets = {}\n    local\
    \ i = 0\n    while true do\n        local planet = planets[i]\n        if not\
    \ planet then\n            break\n        local orbit = math.sqrt(math.pow(planet.x,\
    \ 2) + math.pow(planet.y, 2))\n        if orbit > math.sqrt(math.pow(planet1.x,\
    \ 2) + math.pow(planet1.y, 2)) and orbit < math.sqrt(math.pow(planet2.x, 2) +\
    \ math.pow(planet2.y, 2)) then\n            table.insert(planets, planet)\n  \
    \      end\n        i = i + 1\n    end\n    return table.sort(planets)\nend",
  "    local table = {}\n    local p1 = string.lower(planet1)\n    local p2 = string.lower(planet2)\n\
    \    if p1 == \"earth\" and p2 == \"mercury\" then\n        table[1] = \"Mercury\"\
    \n    elseif p1 == \"earth\" and p2 == \"venus\" then\n        table[1] = \"Venus\"\
    \n    elseif p1 == \"earth\" and p2 == \"mars\" then\n        table[1] = \"Mars\"\
    \n    elseif p1 == \"earth\" and p2 == \"jupiter\" then\n        table[1] = \"\
    Jupiter\"\n    elseif p1 == \"earth\" and p2 == \"saturn\" then\n        table[1]\
    \ = \"Saturn\"\n    elseif p1 == \"mars\" and p2 == \"jupiter\" then\n       \
    \ table[2] = \"Jupiter\"\n    elseif p1 == \"mars\" and p2 == \"saturn\" then\n\
    \        table[2] = \"Saturn\"\n    elseif p1 == \"mercury\" and p2 == \"jupiter\"\
    \ then\n        table[3] = \"Jupiter\"\n    elseif p1 == \"mercury\" and p2 ==\
    \ \"saturn\" then\n        table[3] = \"Saturn\"\n    elseif p1 == \"mercury\"\
    \ and p2 == \"uranus\" then\n        table[3] = \"Uranus\"\n    elseif p1 == \"\
    mercury\" and p2 == \"neptune\" then\n        table[3] = \"Neptune\"\n    elseif\
    \ p1 == \"mars\" and p2 == \"uranus\" then\n        table[4] = \"Uranus\"\n  \
    \  elseif p1 == \"mars\" and p2 == \"neptune\" then\n        table[4] = \"Neptune\"\
    \n    elseif p1 == \"jupiter\" and p2 == \"uranus\" then\n        table[5] = \"\
    Uranus\"\n    elseif p1 == \"jupiter\" and p2 == \"neptune\" then\n        table[5]\
    \ = \"Neptune\"\n    elseif p1 == \"sat", "    local planets = {}\n    local i\
    \ = 0\n    while i < 8 do\n        if planets[planet1] == nil then\n         \
    \   planets[planet1] = i\n        elseif planets[planet2] == nil then\n      \
    \      planets[planet2] = i\n        else\n            table.insert(planets, i)\n\
    \            table.insert(planets, i)\n        end\n        i = i + 1\n    end\n\
    \    return table.concat(planets, \",\")\nend", "    local table = {}\n    for\
    \ i = 1, 8 do\n        if string.sub(planet1, 1, i) == string.sub(planet2, 1,\
    \ i) then\n            table[i] = string.sub(planet1, i + 1)\n        end\n  \
    \  end\n    return table\nend", "    local table = {}\n    local planet1 = string.lower(planet1)\n\
    \    local planet2 = string.lower(planet2)\n    if planet1 == \"earth\" and planet2\
    \ == \"mercury\" then\n        table[\"Mercury\"] = true\n    elseif planet1 ==\
    \ \"earth\" and planet2 == \"venus\" then\n        table[\"Venus\"] = true\n \
    \   elseif planet1 == \"earth\" and planet2 == \"mars\" then\n        table[\"\
    Mars\"] = true\n    elseif planet1 == \"earth\" and planet2 == \"jupiter\" then\n\
    \        table[\"Jupiter\"] = true\n    elseif planet1 == \"earth\" and planet2\
    \ == \"saturn\" then\n        table[\"Saturn\"] = true\n    elseif planet1 ==\
    \ \"earth\" and planet2 == \"uranus\" then\n        table[\"Uranus\"] = true\n\
    \    elseif planet1 == \"earth\" and planet2 == \"neptune\" then\n        table[\"\
    Neptune\"] = true\n    elseif planet1 == \"mercury\" and planet2 == \"earth\"\
    \ then\n        table[\"Earth\"] = true\n    elseif planet1 == \"mercury\" and\
    \ planet2 == \"venus\" then\n        table[\"Venus\"] = true\n    elseif planet1\
    \ == \"mercury\" and planet2 == \"mars\" then\n        table[\"Mars\"] = true\n\
    \    elseif planet1 == \"mercury\" and planet2 == \"jupiter\" then\n        table[\"\
    Jupiter\"] = true\n    elseif planet1 == \"mercury\" and planet2 == \"saturn\"\
    \ then\n        table[\"Saturn\"] = true\n    elseif planet1 == \"mercury\" and\
    \ planet2 == \"uranus\" then\n        table[\"Uranus\"] = true\n    elseif planet1\
    \ == \"mercury\" and planet2 == \"neptune\" then\n        table[\"Neptune\"] =\
    \ true\n    elseif planet1 == \"mars\" and planet2 == \"earth\" then\n       \
    \ table[\"Earth\"] = true\n    elseif planet1 == \"mars\" and planet2 == \"venus\"\
    \ then\n        table[\"Venus\"] = true\n    elseif planet1 == \"mars\" and planet2\
    \ == \"m", "    local table = {}\n    local planet1 = string.lower(planet1)\n\
    \    local planet2 = string.lower(planet2)\n    if planet1 == \"earth\" and planet2\
    \ == \"mercury\" then\n        table[\"earth\"] = \"Mercury\"\n    elseif planet1\
    \ == \"mercury\" and planet2 == \"earth\" then\n        table[\"earth\"] = \"\
    Mercury\"\n    elseif planet1 == \"venus\" and planet2 == \"earth\" then\n   \
    \     table[\"earth\"] = \"Venus\"\n    elseif planet1 == \"mars\" and planet2\
    \ == \"earth\" then\n        table[\"earth\"] = \"Mars\"\n    elseif planet1 ==\
    \ \"jupiter\" and planet2 == \"earth\" then\n        table[\"earth\"] = \"Jupiter\"\
    \n    elseif planet1 == \"saturn\" and planet2 == \"earth\" then\n        table[\"\
    earth\"] = \"Saturn\"\n    elseif planet1 == \"uranus\" and planet2 == \"earth\"\
    \ then\n        table[\"earth\"] = \"Uranus\"\n    elseif planet1 == \"neptune\"\
    \ and planet2 == \"earth\" then\n        table[\"earth\"] = \"Neptune\"\n    elseif\
    \ planet1 == \"mercury\" and planet2 == \"mars\" then\n        table[\"mars\"\
    ] = \"Mercury\"\n    elseif planet1 == \"venus\" and planet2 == \"mars\" then\n\
    \        table[\"mars\"] = \"Venus\"\n    elseif planet1 == \"jupiter\" and planet2\
    \ == \"mars\" then\n        table[\"mars\"] = \"Jupiter\"\n    elseif planet1\
    \ == \"saturn\" and planet2 == \"mars\" then\n        table[\"mars\"] = \"Saturn\"\
    \n    elseif planet1 == \"uranus\" and planet2 == \"mars\" then\n        table[\"\
    mars\"] = \"Uranus\"\n    elseif planet1 == \"neptune\" and planet2 == \"mars\"\
    \ then\n        table[\"mars\"] = \"Neptune\"\n    elseif planet1 == \"mercury\"\
    \ and planet2 == \"jupiter\" then\n        table[\"jupiter\"] = \"Mercury\"\n\
    \    elseif planet1 == \"ven", "    local planets = {}\n    local p1 = planets[planet1]\n\
    \    local p2 = planets[planet2]\n    if p1 and p2 then\n        for i = 1, #p1\
    \ do\n            if p1[i] > p2[i] then\n                table.insert(planets,\
    \ p1[i])\n            end\n        end\n        for i = 1, #p2 do\n          \
    \  if p1[i] < p2[i] then\n                table.insert(planets, p2[i])\n     \
    \       end\n        end\n    end\n    return planets\nend", "    local table\
    \ = {}\n    local p1 = string.lower(planet1)\n    local p2 = string.lower(planet2)\n\
    \    if p1 == \"earth\" and p2 == \"mercury\" then\n        table[\"mercury\"\
    ] = \"Venus\"\n    elseif p1 == \"earth\" and p2 == \"venus\" then\n        table[\"\
    venus\"] = \"Mercury\"\n    elseif p1 == \"earth\" and p2 == \"mars\" then\n \
    \       table[\"mars\"] = \"Mercury\"\n    elseif p1 == \"earth\" and p2 == \"\
    jupiter\" then\n        table[\"jupiter\"] = \"Mercury\"\n    elseif p1 == \"\
    earth\" and p2 == \"saturn\" then\n        table[\"saturn\"] = \"Mercury\"\n \
    \   elseif p1 == \"earth\" and p2 == \"uranus\" then\n        table[\"uranus\"\
    ] = \"Mercury\"\n    elseif p1 == \"earth\" and p2 == \"neptune\" then\n     \
    \   table[\"neptune\"] = \"Mercury\"\n    elseif p1 == \"mars\" and p2 == \"earth\"\
    \ then\n        table[\"earth\"] = \"Mercury\"\n    elseif p1 == \"mars\" and\
    \ p2 == \"venus\" then\n        table[\"venus\"] = \"Mercury\"\n    elseif p1\
    \ == \"mars\" and p2 == \"jupiter\" then\n        table[\"jupiter\"] = \"Mercury\"\
    \n    elseif p1 == \"mars\" and p2 == \"saturn\" then\n        table[\"saturn\"\
    ] = \"Mercury\"\n    elseif p1 == \"mars\" and p2 == \"uranus\" then\n       \
    \ table[\"uranus\"] = \"Mercury\"\n    elseif p1 == \"mars\" and p2 == \"neptune\"\
    \ then\n        table[\"neptune\"] = \"Mercury\"\n    elseif p1 == \"jupiter\"\
    \ and p2 == \"earth\" then\n        table[\"earth\"] = \"Mercury\"\n    elseif\
    \ p1 == \"jupiter\" and p2 == \"venus\" then\n        table[\"venus\"] = \"Mercury\"\
    \n    elseif p1 ==", "    local planets = {}\n    local i = 1\n    while i <=\
    \ 8 do\n        if string.sub(planet1, 1, string.len(planet1)) == string.sub(planet2,\
    \ 1, string.len(planet2)) then\n            table.insert(planets, string.sub(planet1,\
    \ string.len(planet1) + 1, string.len(planet1)))\n            table.insert(planets,\
    \ string.sub(planet2, string.len(planet2) + 1, string.len(planet2)))\n       \
    \     return planets\n        end\n        i = i + 1\n    end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
