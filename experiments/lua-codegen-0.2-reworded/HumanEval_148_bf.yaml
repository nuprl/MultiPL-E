name: HumanEval_148_bf
language: lua
prompt: "-- There are eight planets in our solar system: the closerst to the Sun \n\
  -- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n-- Uranus,\
  \ Neptune.\n-- Write a function that takes two planet names as strings planet1 and\
  \ planet2. \n-- The function should return a table containing all planets whose\
  \ orbits are \n-- located between the orbit of planet1 and the orbit of planet2,\
  \ sorted by \n-- the proximity to the sun. \n-- The function should return an empty\
  \ table if planet1 or planet2\n-- are not correct planet names. \n-- Examples\n\
  -- >>> bf(\"Jupiter\", \"Neptune\")\n-- (\"Saturn\", \"Uranus\")\n-- >>> bf(\"Earth\"\
  , \"Mercury\")\n-- (\"Venus\")\n-- >>> bf(\"Mercury\", \"Uranus\")\n-- (\"Venus\"\
  , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nlocal function bf(planet1, planet2)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
  \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n  \
  \  lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
  \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
  \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
  \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
  \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local planets = {}\n    for i = 1, 8 do\n        if string.sub(planet1,\
    \ 1, string.len(planet1)) == string.sub(planet2, 1, string.len(planet2)) then\n\
    \            planets[i] = string.sub(planet1, 1, string.len(planet1))\n      \
    \  end\n        planet1 = string.sub(planet1, 1, string.len(planet1) - 1)\n  \
    \      planet2 = string.sub(planet2, 1, string.len(planet2) - 1)\n    end\n  \
    \  return planets\nend", "    local table = {}\n    local i = 0\n    while true\
    \ do\n        local planet = \"planet\" .. i\n        if planet == planet1 then\n\
    \            table[i] = planet\n            i = i + 1\n            break\n   \
    \     end\n        i = i + 1\n    end\n    i = 0\n    while true do\n        local\
    \ planet = \"planet\" .. i\n        if planet == planet2 then\n            table[i]\
    \ = planet\n            i = i + 1\n            break\n        end\n        i =\
    \ i + 1\n    end\n    return table\nend", "    local planets = {}\n    local i\
    \ = 1\n    while i <= 8 do\n        if string.sub(planet1, 1, string.len(planet1))\
    \ == string.sub(planet2, 1, string.len(planet2)) then\n            table.insert(planets,\
    \ string.sub(planet1, 1, string.len(planet1)))\n            table.insert(planets,\
    \ string.sub(planet2, 1, string.len(planet2)))\n            return planets\n \
    \       end\n        i = i + 1\n    end\nend", "    local table = {}\n    for\
    \ i = 1, 8 do\n        for j = 1, 8 do\n            if i < j then\n          \
    \      table[j] = table[j] or {planet1, planet2}\n            end\n        end\n\
    \    end\n    return table\nend", "    local planets = {}\n    local i = 0\n \
    \   while i < 8 do\n        if planets[planet1] == nil then\n            planets[planet1]\
    \ = i\n        elseif planets[planet2] == nil then\n            planets[planet2]\
    \ = i\n        else\n            table.insert(planets, i)\n            table.insert(planets,\
    \ i)\n        end\n        i = i + 1\n    end\n    return table.concat(planets,\
    \ \",\")\nend", "    local table = {}\n    local planet1 = string.lower(planet1)\n\
    \    local planet2 = string.lower(planet2)\n    if planet1 == \"earth\" and planet2\
    \ == \"mercury\" then\n        table[\"venus\"] = true\n    elseif planet1 ==\
    \ \"earth\" and planet2 == \"venus\" then\n        table[\"mercury\"] = true\n\
    \    elseif planet1 == \"mercury\" and planet2 == \"earth\" then\n        table[\"\
    venus\"] = true\n    elseif planet1 == \"mercury\" and planet2 == \"venus\" then\n\
    \        table[\"earth\"] = true\n    elseif planet1 == \"mercury\" and planet2\
    \ == \"mars\" then\n        table[\"venus\"] = true\n    elseif planet1 == \"\
    mercury\" and planet2 == \"jupiter\" then\n        table[\"earth\"] = true\n \
    \   elseif planet1 == \"mercury\" and planet2 == \"saturn\" then\n        table[\"\
    earth\"] = true\n    elseif planet1 == \"mercury\" and planet2 == \"uranus\" then\n\
    \        table[\"earth\"] = true\n    elseif planet1 == \"mercury\" and planet2\
    \ == \"neptune\" then\n        table[\"earth\"] = true\n    elseif planet1 ==\
    \ \"mars\" and planet2 == \"earth\" then\n        table[\"jupiter\"] = true\n\
    \    elseif planet1 == \"mars\" and planet2 == \"mercury\" then\n        table[\"\
    jupiter\"] = true\n    elseif planet1 == \"mars\" and planet2 == \"venus\" then\n\
    \        table[\"jupiter\"] = true\n    elseif planet1 == \"mars\" and planet2\
    \ == \"jupiter\" then\n        table[\"earth\"] = true\n    elseif planet1 ==\
    \ \"mars\" and planet2 == \"saturn\" then\n        table[\"jupiter\"] = true\n\
    \    elseif planet1 == \"mars\" and planet2 == \"uranus\" then\n        table[\"\
    earth\"] = true\n    elseif planet1 == \"mars\" and planet2 == \"neptune\" then\n\
    \        table[\"earth\"] = true\n    elseif planet1 == \"jupiter\" and planet2\
    \ == \"earth\"", "    local table = {}\n    for i = 1, 8 do\n        for j = 1,\
    \ 8 do\n            if i != j and math.abs(math.degrees(math.pi/2 - math.radians(planets[i].orbital_period)))\
    \ < math.degrees(math.pi/2 - math.radians(planets[j].orbital_period)) then\n \
    \               table[j] = table[j] or {planet1, planet2}\n            end\n \
    \       end\n    end\n    return table\nend", "    local planets = {}\n    for\
    \ i = 1, 8 do\n        if string.sub(planet1, 1, 3) == string.sub(planet2, 1,\
    \ 3) then\n            table.insert(planets, string.sub(planet1, 4, 5))\n    \
    \        table.insert(planets, string.sub(planet2, 4, 5))\n            return\
    \ planets\n        end\n        planet1 = string.sub(planet1, 1, 3)\n        planet2\
    \ = string.sub(planet2, 1, 3)\n    end\nend", "    local table = {}\n    local\
    \ i = 0\n    local j = 0\n    local k = 0\n    local l = 0\n    local m = 0\n\
    \    local n = 0\n    local o = 0\n    local p = 0\n    local q = 0\n    local\
    \ r = 0\n    local s = 0\n    local t = 0\n    local u = 0\n    local v = 0\n\
    \    local w = 0\n    local x = 0\n    local y = 0\n    local z = 0\n    local\
    \ a = 0\n    local b = 0\n    local c = 0\n    local d = 0\n    local e = 0\n\
    \    local f = 0\n    local g = 0\n    local h = 0\n    local i = 0\n    local\
    \ j = 0\n    local k = 0\n    local l = 0\n    local m = 0\n    local n = 0\n\
    \    local o = 0\n    local p = 0\n    local q = 0\n    local r = 0\n    local\
    \ s = 0\n    local t = 0\n    local u = 0\n    local v = 0\n    local w = 0\n\
    \    local x = 0\n    local y = 0\n    local z = 0\n    local a = 0\n    local\
    \ b = 0\n    local c = 0\n    local d = 0\n    local e = 0\n    local f = 0\n\
    \    local g = 0\n    local h = 0\n    local i = 0\n    local j = 0\n    local\
    \ k = 0\n    local l = 0\n    local m = 0\n    local n = 0\n    local o = 0\n\
    \    local p = 0\n    local q = 0\n    local r = 0\n    local s = 0\n    local\
    \ t = 0\n    local u = 0\n    local v = 0\n    local w = 0\n    local x = 0\n\
    \    local y = 0\n    local z = 0\n    local a = 0\n    local b = 0\n    local\
    \ c = 0\n    local d = 0\n    local e = 0\n    local f = 0\n    local g = 0\n\
    \    local h = 0\n    local i = 0\n    local j = 0\n    local k = 0\n    local\
    \ l = 0\n    local m = 0\n    local n = 0\n    local", "    local planets = {}\n\
    \    for i = 1, 8 do\n        if string.sub(planet1, 1, i) == string.sub(planet2,\
    \ 1, i) then\n            table.insert(planets, string.sub(planet1, 1, i))\n \
    \       end\n    end\n    return planets\nend", "    local table = {}\n    local\
    \ planet1 = tolower(planet1)\n    local planet2 = tolower(planet2)\n    if planet1\
    \ == \"mercury\" and planet2 == \"venus\" then\n        table = { \"venus\" }\n\
    \    elseif planet1 == \"venus\" and planet2 == \"earth\" then\n        table\
    \ = { \"earth\" }\n    elseif planet1 == \"earth\" and planet2 == \"mars\" then\n\
    \        table = { \"mars\" }\n    elseif planet1 == \"mars\" and planet2 == \"\
    jupiter\" then\n        table = { \"jupiter\" }\n    elseif planet1 == \"jupiter\"\
    \ and planet2 == \"saturn\" then\n        table = { \"saturn\" }\n    elseif planet1\
    \ == \"saturn\" and planet2 == \"uranus\" then\n        table = { \"uranus\" }\n\
    \    elseif planet1 == \"uranus\" and planet2 == \"neptune\" then\n        table\
    \ = { \"neptune\" }\n    elseif planet1 == \"neptune\" and planet2 == \"pluto\"\
    \ then\n        table = { \"pluto\" }\n    else\n        table = {}\n    return\
    \ table\nend\n<|endoftext|><|python|>#                                       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                 ", "    local planets = {}\n    for i = 1, 8\
    \ do\n        if string.sub(planet1, 1, string.len(planet1)) == string.sub(planet2,\
    \ 1, string.len(planet2)) then\n            planets[i] = string.sub(planet1, 1,\
    \ string.len(planet1))\n        end\n        if string.sub(planet1, 1, string.len(planet1))\
    \ > string.sub(planet2, 1, string.len(planet2)) then\n            planets[i] =\
    \ string.sub(planet2, 1, string.len(planet2))\n        end\n        if string.sub(planet1,\
    \ 1, string.len(planet1)) < string.sub(planet2, 1, string.len(planet2)) then\n\
    \            planets[i] = string.sub(planet1, 1, string.len(planet1))\n      \
    \  end\n        if string.sub(planet1, 1, string.len(planet1)) < string.sub(planet2,\
    \ 1, string.len(planet2)) then\n            planets[i] = string.sub(planet2, 1,\
    \ string.len(planet2))\n        end\n        if string.sub(planet1, 1, string.len(planet1))\
    \ > string.sub(planet2, 1, string.len(planet2)) then\n            planets[i] =\
    \ string.sub(planet1, 1, string.len(planet1))\n        end\n        if string.sub(planet1,\
    \ 1, string.len(planet1)) == string.sub(planet2, 1, string.len(planet2)) then\n\
    \            planets[i] = string.sub(planet1, 1, string.len(planet1))\n      \
    \  end\n    end\n    return planets\nend\n<|endoftext|><|python|>#", "    local\
    \ table = {}\n    for i = 1, 8 do\n        if string.sub(planet1, 1, i) == string.sub(planet2,\
    \ 1, i) then\n            table[i] = string.sub(planet1, i+1)\n            table[i+1]\
    \ = string.sub(planet2, i+1)\n            break\n        end\n    end\n    return\
    \ table\nend", "    local planets = {}\n    for i = 1, 8 do\n        if string.sub(planet1,\
    \ 1, 3) == string.sub(planet2, 1, 3) then\n            table.insert(planets, string.sub(planet1,\
    \ 4, 5))\n            table.insert(planets, string.sub(planet2, 4, 5))\n     \
    \   end\n        planet1 = string.sub(planet1, 1)\n        planet2 = string.sub(planet2,\
    \ 1)\n    end\n    return planets\nend", "    local planets = {}\n    for i =\
    \ 1, 8 do\n        if string.sub(planet1, 1, string.len(planet1)) == string.sub(planet2,\
    \ 1, string.len(planet2)) then\n            table.insert(planets, string.sub(planet1,\
    \ 1, string.len(planet1)))\n        end\n        planet1 = string.sub(planet1,\
    \ 1, string.len(planet1))\n        planet2 = string.sub(planet2, 1, string.len(planet2))\n\
    \    end\n    return table.sort(planets)\nend", "    local planets = {}\n    for\
    \ i = 1, 8 do\n        if string.sub(planet1, 1, string.len(planet1)) == string.sub(planet2,\
    \ 1, string.len(planet2)) then\n            table.insert(planets, string.sub(planet1,\
    \ 1, string.len(planet1)))\n        end\n        if string.sub(planet1, 1, string.len(planet1))\
    \ < string.sub(planet2, 1, string.len(planet2)) then\n            table.insert(planets,\
    \ string.sub(planet1, 1, string.len(planet1)))\n        end\n        if string.sub(planet1,\
    \ 1, string.len(planet1)) > string.sub(planet2, 1, string.len(planet2)) then\n\
    \            table.insert(planets, string.sub(planet1, 1, string.len(planet1)))\n\
    \        end\n        if string.sub(planet1, 1, string.len(planet1)) == string.sub(planet2,\
    \ 1, string.len(planet2)) then\n            table.insert(planets, string.sub(planet1,\
    \ 1, string.len(planet1)))\n        end\n    end\n    return planets\nend", " \
    \   local planets = {}\n    for i=1,8 do\n        if string.sub(planet1, 1, string.len(planet1))\
    \ == string.sub(planet2, 1, string.len(planet2)) then\n            planets[i]\
    \ = string.sub(planet1, 1, string.len(planet1))\n            break\n        end\n\
    \    end\n    return planets\nend", "    local planets = {}\n    local i = 0\n\
    \    while true do\n        local p = getPlanet(i)\n        if p ~= nil then\n\
    \            if p.name == planet1 then\n                if p.orbital_period ~=\
    \ nil then\n                    if p.orbital_period > 0 then\n               \
    \         if p.orbital_period > 0 then\n                            if p.orbital_period\
    \ > 0 then\n                                if p.orbital_period > 0 then\n   \
    \                                 if p.orbital_period > 0 then\n             \
    \                           if p.orbital_period > 0 then\n                   \
    \                         if p.orbital_period > 0 then\n                     \
    \                           if p.orbital_period > 0 then\n                   \
    \                                 if p.orbital_period > 0 then\n             \
    \                                           if p.orbital_period > 0 then\n   \
    \                                                         if p.orbital_period\
    \ > 0 then\n                                                                if\
    \ p.orbital_period > 0 then\n                                                \
    \                    if p.orbital_period > 0 then\n                          \
    \                                              if p.orbital_period > 0 then\n\
    \                                                                            if\
    \ p.orbital_period > 0 then\n                                                \
    \                                if p.orbital_period > 0 then\n              \
    \                                                                      if p.orbital_period\
    \ > 0 then\n                                                                 \
    \                       if p.orbital_period > 0 then\n                       \
    \                                                                     if p.orbital_period\
    \ > 0 then\n                                                                 \
    \                               if p.orbital_period > 0 then\n               \
    \                                                                            \
    \         if p.orbital_period > 0 then\n                                     \
    \                                                                   if p.orbital_period\
    \ > 0 then\n                                                                 \
    \                                           if p.orbital_period > 0 then\n   \
    \                                                                            \
    \                                 if p.orbital_period > 0 then\n             \
    \                                                                            \
    \                              if p.orbital_period > 0 then\n                \
    \                                                                            \
    \                               if p.orbital_period > 0 then\n               \
    \                                                                            \
    \                                     if p.orbital_period > 0 then\n         \
    \                                                                            \
    \                                                  if p.orbital_period > 0 then\n\
    \                                                                            \
    \                                                                ", "    local\
    \ planets = {}\n    local i = 1\n    while i <= 8 do\n        if string.sub(planet1,\
    \ 1, 5) == string.sub(planets[i], 1, 5) or string.sub(planet2, 1, 5) == string.sub(planets[i],\
    \ 1, 5) then\n            table.insert(planets, planets[i])\n            i = i\
    \ + 1\n        end\n        i = i + 1\n    end\n    return table.sort(planets)\n\
    end", "    local table = {}\n    local i = 0\n    while i < 8 do\n        if table[planet1]\
    \ == nil and table[planet2] == nil then\n            table[planet1] = i\n    \
    \        table[planet2] = i\n            i = i + 1\n        else\n           \
    \ if table[planet1] > table[planet2] then\n                table[planet1] = i\n\
    \                table[planet2] = i\n            else\n                table[planet2]\
    \ = i\n                table[planet1] = i\n            end\n        end\n    end\n\
    \    return table\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
