{
  "language": "lua",
  "name": "HumanEval_24_largest_divisor",
  "results": [
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp70isb5ns.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp70isb5ns.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local result = 1\n    for i = 2, math.sqrt(n) + 1 do\n        if n % i == 0 then\n            result = i\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd11by1hp.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpd11by1hp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            divisors[i] = true\n        end\n    end\n    return math.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqzxob67h.lua:17: expected: 1, actual: {true, 3=true}\nstack traceback:\n\t/tmp/tmpqzxob67h.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp70isb5ns.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp70isb5ns.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = math.floor(math.sqrt(n))\n    for i = 2, max do\n        if n % i == 0 then\n            return i\n        end\n    end\nend\nreturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpds8lza6x.lua:13: <eof> expected near 'end'\n",
      "stdout": "",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            divisors[i] = true\n            if i > max then max = i\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpfuset7b6.lua:25: 'end' expected (to close 'function' at line 4) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local d = math.floor(math.sqrt(n))\n    for i = 1, d do\n        if n % i == 0 then\n            return i\n        end\n    end\nend\nreturn largest_divisor(n)\nend\n\"\"\"\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpad3yazyf.lua:13: <eof> expected near 'end'\n",
      "stdout": "",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local result = 1\n    for i = 2, n do\n        if n % i == 0 then\n            result = i\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6r58n1lu.lua:18: expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp6r58n1lu.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            divisors[i] = true\n            if i > max_divisor then max_divisor = i\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpr9kp3973.lua:25: 'end' expected (to close 'function' at line 4) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local d = math.floor(math.sqrt(n))\n    for i = 1, d do\n        if n % i == 0 then\n            return i\n        end\n    end\nend\nreturn largest_divisor(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp0tmhv7jt.lua:13: <eof> expected near 'end'\n",
      "stdout": "",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local result = 1\n    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n            result = i\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpekce4rc9.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpekce4rc9.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p6xb4n3.lua:11: attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp_p6xb4n3.lua:11: in local 'candidate'\n\t/tmp/tmp_p6xb4n3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, n do\n        if n % i == 0 then\n            max = i\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9eya38u.lua:17: expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpf9eya38u.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.sqrt(n) + 1 do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpetqup4zm.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpetqup4zm.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp70isb5ns.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp70isb5ns.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = math.floor(math.sqrt(n))\n    for i = 2, max do\n        if n % i == 0 then\n            return i\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp98lroxh6.lua:16: expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmp98lroxh6.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p6xb4n3.lua:11: attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp_p6xb4n3.lua:11: in local 'candidate'\n\t/tmp/tmp_p6xb4n3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local i, j, k\n    for i = 1, n, 2 do\n        for j = 1, n, 2 do\n            k = i * j\n            if k < n and k % n == 0 then\n                return k\n            end\n        end\n    end\nend\nreturn largest_divisor(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpdxayw5wd.lua:16: <eof> expected near 'end'\n",
      "stdout": "",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            divisors[i] = true\n            if i > max then max = i\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpfuset7b6.lua:25: 'end' expected (to close 'function' at line 4) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p6xb4n3.lua:11: attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp_p6xb4n3.lua:11: in local 'candidate'\n\t/tmp/tmp_p6xb4n3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907494
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local d = 1\n    while d <= n do\n        if n % d == 0 then\n            return d\n        end\n        d = d + 1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe6hz0_az.lua:19: expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpe6hz0_az.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            divisors[i] = true\n        end\n    end\n    return max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmj45paw1.lua:11: attempt to call a nil value (global 'max')\nstack traceback:\n\t/tmp/tmpmj45paw1.lua:11: in local 'candidate'\n\t/tmp/tmpmj45paw1.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.floor(math.sqrt(n))+1 do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpccbdfdyp.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpccbdfdyp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            divisors[i] = i\n            divisors[n / i] = n / i\n        end\n    end\n    return max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local m = math.floor(math.sqrt(n))\n    for i = 2, m do\n        if n % i == 0 then\n            return i\n        end\n    end\nend\nreturn largest_divisor(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmp86j1xxvo.lua:13: <eof> expected near 'end'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.floor(math.sqrt(n))+1 do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpccbdfdyp.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpccbdfdyp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p6xb4n3.lua:11: attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp_p6xb4n3.lua:11: in local 'candidate'\n\t/tmp/tmp_p6xb4n3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907494
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, n, 1 do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp24c_2_ax.lua:18: expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp24c_2_ax.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local result = 1\n    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n            result = i\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpekce4rc9.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpekce4rc9.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local i, j\n    for i = 1, n do\n        for j = 1, n do\n            if j % i == 0 then\n                return i\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnttboduo.lua:20: expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpnttboduo.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, n do\n        if n % i == 0 then\n            max = i\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9eya38u.lua:17: expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpf9eya38u.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp70isb5ns.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp70isb5ns.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p6xb4n3.lua:11: attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp_p6xb4n3.lua:11: in local 'candidate'\n\t/tmp/tmp_p6xb4n3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p6xb4n3.lua:11: attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp_p6xb4n3.lua:11: in local 'candidate'\n\t/tmp/tmp_p6xb4n3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p6xb4n3.lua:11: attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp_p6xb4n3.lua:11: in local 'candidate'\n\t/tmp/tmp_p6xb4n3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907494
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.floor(math.sqrt(n))+1 do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpccbdfdyp.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpccbdfdyp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            divisors[i] = true\n            if i > divisors[n / i] then\n                divisors[n / i] = i\n            end\n        end\n    end\n    return divisors[n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpefbgc6yl.lua:9: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpefbgc6yl.lua:9: in local 'candidate'\n\t/tmp/tmpefbgc6yl.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, n do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpevgnfits.lua:18: expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpevgnfits.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.floor(math.sqrt(n))+1 do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpccbdfdyp.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpccbdfdyp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local i = math.floor(math.sqrt(n))\n    for i = i, 1, -1 do\n        if n % i == 0 then\n            return i\n        end\n    end\nend\nreturn largest_divisor(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmp67snahaj.lua:13: <eof> expected near 'end'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.floor(math.sqrt(n)) + 1 do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdv6kz47t.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpdv6kz47t.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local d = 1\n    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n            d = i\n            break\n        end\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd17ehc9k.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpd17ehc9k.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local i = 1\n    while i <= n do\n        if n % i == 0 then\n            return i\n        end\n        i = i + 1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcv7rcsec.lua:19: expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpcv7rcsec.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local result = 1\n    for i = 2, math.floor(math.sqrt(n))+1 do\n        if n % i == 0 then\n            result = i\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvqdmesem.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpvqdmesem.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp70isb5ns.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp70isb5ns.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p6xb4n3.lua:11: attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp_p6xb4n3.lua:11: in local 'candidate'\n\t/tmp/tmp_p6xb4n3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.sqrt(n) + 1 do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpetqup4zm.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpetqup4zm.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p6xb4n3.lua:11: attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp_p6xb4n3.lua:11: in local 'candidate'\n\t/tmp/tmp_p6xb4n3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907494
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, n do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpevgnfits.lua:18: expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpevgnfits.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.sqrt(n) + 1 do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpetqup4zm.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpetqup4zm.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp70isb5ns.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp70isb5ns.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            divisors[i] = true\n        end\n    end\n    return max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmj45paw1.lua:11: attempt to call a nil value (global 'max')\nstack traceback:\n\t/tmp/tmpmj45paw1.lua:11: in local 'candidate'\n\t/tmp/tmpmj45paw1.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, n do\n        if n % i == 0 then\n            max = i\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9eya38u.lua:17: expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpf9eya38u.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local d = 1\n    for i = 2, math.sqrt(n) + 1 do\n        if n % i == 0 then\n            d = i\n            break\n        end\n    end\n    return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm0zvtpqd.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpm0zvtpqd.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p6xb4n3.lua:11: attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp_p6xb4n3.lua:11: in local 'candidate'\n\t/tmp/tmp_p6xb4n3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907494
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local m = math.floor(math.sqrt(n))\n    for i = 1, m do\n        if n % i == 0 then\n            return i\n        end\n    end\nend\nreturn largest_divisor(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpod8_wj5k.lua:13: <eof> expected near 'end'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p6xb4n3.lua:11: attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp_p6xb4n3.lua:11: in local 'candidate'\n\t/tmp/tmp_p6xb4n3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            divisors[i] = true\n        end\n    end\n    return math.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqzxob67h.lua:17: expected: 1, actual: {true, 3=true}\nstack traceback:\n\t/tmp/tmpqzxob67h.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp70isb5ns.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp70isb5ns.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp70isb5ns.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp70isb5ns.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local result = 1\n    for i = 2, math.floor(math.sqrt(n)) + 1 do\n        if n % i == 0 then\n            result = i\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp50ieekjj.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp50ieekjj.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            divisors[i] = i\n            divisors[n/i] = n/i\n        end\n    end\n    return max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphyzl_l7h.lua:12: attempt to call a nil value (global 'max')\nstack traceback:\n\t/tmp/tmphyzl_l7h.lua:12: in local 'candidate'\n\t/tmp/tmphyzl_l7h.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local m = math.floor(math.sqrt(n))\n    for i = 1, m do\n        if n % i == 0 then\n            return i\n        end\n    end\nend\nreturn largest_divisor(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpod8_wj5k.lua:13: <eof> expected near 'end'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local i, j, k, m = 1, 1, 1, math.floor(math.sqrt(n))\n    while m * m <= n do\n        if n % m == 0 then\n            return m\n        end\n        i, j = i + 1, j + 1\n        k = math.floor(math.sqrt(n / m))\n        m = k * k + i * j\n    end\n    return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4tfqvesl.lua:21: expected: 1, actual: 7\nstack traceback:\n\t/tmp/tmp4tfqvesl.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.floor(math.sqrt(n)) + 1 do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdv6kz47t.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpdv6kz47t.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p6xb4n3.lua:11: attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp_p6xb4n3.lua:11: in local 'candidate'\n\t/tmp/tmp_p6xb4n3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907494
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.floor(math.sqrt(n))+1 do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpccbdfdyp.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpccbdfdyp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.floor(math.sqrt(n))+1 do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpccbdfdyp.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpccbdfdyp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.floor(math.sqrt(n))+1 do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpccbdfdyp.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpccbdfdyp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p6xb4n3.lua:11: attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp_p6xb4n3.lua:11: in local 'candidate'\n\t/tmp/tmp_p6xb4n3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p6xb4n3.lua:11: attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp_p6xb4n3.lua:11: in local 'candidate'\n\t/tmp/tmp_p6xb4n3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p6xb4n3.lua:11: attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp_p6xb4n3.lua:11: in local 'candidate'\n\t/tmp/tmp_p6xb4n3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p6xb4n3.lua:11: attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp_p6xb4n3.lua:11: in local 'candidate'\n\t/tmp/tmp_p6xb4n3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p6xb4n3.lua:11: attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp_p6xb4n3.lua:11: in local 'candidate'\n\t/tmp/tmp_p6xb4n3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp70isb5ns.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp70isb5ns.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p6xb4n3.lua:11: attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp_p6xb4n3.lua:11: in local 'candidate'\n\t/tmp/tmp_p6xb4n3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907494
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.floor(math.sqrt(n))+1 do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpccbdfdyp.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpccbdfdyp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = math.floor(math.sqrt(n))\n    for i = 2, max do\n        if n % i == 0 then\n            return i\n        end\n    end\nend\nreturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpds8lza6x.lua:13: <eof> expected near 'end'\n",
      "stdout": "",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp70isb5ns.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp70isb5ns.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local i, j, k\n    for i = 1, n do\n        for j = 1, n do\n            k = i * j\n            if k > n then break\n            if k == n then return i\n        end\n    end\n    return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmp8md6icpz.lua:26: 'end' expected (to close 'for' at line 6) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p6xb4n3.lua:11: attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp_p6xb4n3.lua:11: in local 'candidate'\n\t/tmp/tmp_p6xb4n3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907494
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            divisors[i] = i\n            divisors[n / i] = n / i\n        end\n    end\n    return max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local m = math.floor(math.sqrt(n))\n    for i = 2, m do\n        if n % i == 0 then return i\n    end\nend\nreturn largest_divisor(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            divisors[i] = true\n        end\n    end\n    return max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmj45paw1.lua:11: attempt to call a nil value (global 'max')\nstack traceback:\n\t/tmp/tmpmj45paw1.lua:11: in local 'candidate'\n\t/tmp/tmpmj45paw1.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local m = math.floor(math.sqrt(n))\n    for i = 2, m do\n        if n % i == 0 then return i\n    end\nend\nreturn largest_divisor(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local result = 1\n    for i = 2, math.floor(math.sqrt(n))+1 do\n        if n % i == 0 then\n            result = i\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvqdmesem.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpvqdmesem.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            divisors[i] = true\n            if i > max then max = i\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpfuset7b6.lua:25: 'end' expected (to close 'function' at line 4) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            divisors[i] = true\n        end\n    end\n    return math.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqzxob67h.lua:17: expected: 1, actual: {true, 3=true}\nstack traceback:\n\t/tmp/tmpqzxob67h.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            divisors[i] = true\n            if i > max then max = i\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpfuset7b6.lua:25: 'end' expected (to close 'function' at line 4) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907494
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            divisors[i] = true\n            if i > divisors[n / i] then\n                divisors[n / i] = i\n            end\n        end\n    end\n    return divisors[n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpefbgc6yl.lua:9: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpefbgc6yl.lua:9: in local 'candidate'\n\t/tmp/tmpefbgc6yl.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.sqrt(n) + 1 do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpetqup4zm.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpetqup4zm.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            divisors[i] = true\n        end\n    end\n    return math.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqzxob67h.lua:17: expected: 1, actual: {true, 3=true}\nstack traceback:\n\t/tmp/tmpqzxob67h.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, n, 1 do\n        if n % i == 0 then\n            max = i\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnd1rpl1.lua:17: expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmphnd1rpl1.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local i, j, k\n    for i = 1, n do\n        for j = 1, n do\n            k = i * j\n            if k > n then break\n            if k == n then return i\n        end\n    end\nend\nreturn largest_divisor(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmp8wxtah9u.lua:27: 'end' expected (to close 'function' at line 4) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local m = math.floor(math.sqrt(n))\n    for i = 2, m do\n        if n % i == 0 then\n            return i\n        end\n    end\nend\nreturn largest_divisor(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmp86j1xxvo.lua:13: <eof> expected near 'end'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local result = 1\n    for i = 2, math.sqrt(n) + 1 do\n        if n % i == 0 then\n            result = i\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd11by1hp.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpd11by1hp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local result = 1\n    for i = 2, n do\n        if n % i == 0 then\n            result = i\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6r58n1lu.lua:18: expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp6r58n1lu.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p6xb4n3.lua:11: attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp_p6xb4n3.lua:11: in local 'candidate'\n\t/tmp/tmp_p6xb4n3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local result = 1\n    for i = 2, math.sqrt(n) + 1 do\n        if n % i == 0 then\n            result = i\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd11by1hp.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpd11by1hp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp70isb5ns.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp70isb5ns.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            divisors[i] = true\n            if i > divisors[n / i] then\n                divisors[n / i] = i\n            end\n        end\n    end\n    return divisors[n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpefbgc6yl.lua:9: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpefbgc6yl.lua:9: in local 'candidate'\n\t/tmp/tmpefbgc6yl.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            divisors[i] = true\n            if i > max then max = i\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpfuset7b6.lua:25: 'end' expected (to close 'function' at line 4) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907494
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local i, j, k, m\n    for i = 2, math.sqrt(n) + 1, 1 do\n        for j = 1, i - 1, 1 do\n            if n % i == 0 and n / i > j then\n                k = i\n                m = j\n            end\n        end\n    end\n    return k, m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp67pi1df_.lua:20: expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmp67pi1df_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local i, j, k\n    for i = 1, n do\n        for j = 1, n do\n            k = i * j\n            if k <= n and k % n == 0 then\n                return k\n            end\n        end\n    end\nend\nreturn largest_divisor(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmp8fccv7ro.lua:16: <eof> expected near 'end'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local result = 1\n    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n            result = i\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpekce4rc9.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpekce4rc9.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp70isb5ns.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp70isb5ns.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local m = math.floor(math.sqrt(n))\n    for i = m, 1, -1 do\n        if n % i == 0 then\n            return i\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv61ut_h8.lua:18: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpv61ut_h8.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            divisors[i] = true\n            if i > divisors[n / i] then\n                divisors[n / i] = i\n            end\n        end\n    end\n    return divisors[n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpefbgc6yl.lua:9: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpefbgc6yl.lua:9: in local 'candidate'\n\t/tmp/tmpefbgc6yl.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p6xb4n3.lua:11: attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp_p6xb4n3.lua:11: in local 'candidate'\n\t/tmp/tmp_p6xb4n3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, n do\n        if n % i == 0 then\n            max = i\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9eya38u.lua:17: expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpf9eya38u.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            divisors[i] = true\n        end\n    end\n    for i = 1, n do\n        if not divisors[i] then\n            return i\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6tfjj1zd.lua:21: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp6tfjj1zd.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local i = math.floor(math.sqrt(n))\n    for i = i + 1, 1, -1 do\n        if n % i == 0 then\n            return i\n        end\n    end\nend\nreturn largest_divisor(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpp6a3vk66.lua:13: <eof> expected near 'end'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p6xb4n3.lua:11: attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp_p6xb4n3.lua:11: in local 'candidate'\n\t/tmp/tmp_p6xb4n3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp70isb5ns.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp70isb5ns.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p6xb4n3.lua:11: attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp_p6xb4n3.lua:11: in local 'candidate'\n\t/tmp/tmp_p6xb4n3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p6xb4n3.lua:11: attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp_p6xb4n3.lua:11: in local 'candidate'\n\t/tmp/tmp_p6xb4n3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.sqrt(n) + 1 do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpetqup4zm.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpetqup4zm.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp70isb5ns.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp70isb5ns.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p6xb4n3.lua:11: attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp_p6xb4n3.lua:11: in local 'candidate'\n\t/tmp/tmp_p6xb4n3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907494
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 0\n    for i = 1, n do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuqp_i2_h.lua:20: expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpuqp_i2_h.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local result = 1\n    for i = 2, math.sqrt(n) + 1 do\n        if n % i == 0 then\n            result = i\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd11by1hp.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpd11by1hp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p6xb4n3.lua:11: attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp_p6xb4n3.lua:11: in local 'candidate'\n\t/tmp/tmp_p6xb4n3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p6xb4n3.lua:11: attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp_p6xb4n3.lua:11: in local 'candidate'\n\t/tmp/tmp_p6xb4n3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907494
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.floor(math.sqrt(n))+1 do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpccbdfdyp.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpccbdfdyp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p6xb4n3.lua:11: attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp_p6xb4n3.lua:11: in local 'candidate'\n\t/tmp/tmp_p6xb4n3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            divisors[i] = true\n        end\n    end\n    return math.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqzxob67h.lua:17: expected: 1, actual: {true, 3=true}\nstack traceback:\n\t/tmp/tmpqzxob67h.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p6xb4n3.lua:11: attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp_p6xb4n3.lua:11: in local 'candidate'\n\t/tmp/tmp_p6xb4n3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907494
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.floor(math.sqrt(n))+1 do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpccbdfdyp.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpccbdfdyp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p6xb4n3.lua:11: attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp_p6xb4n3.lua:11: in local 'candidate'\n\t/tmp/tmp_p6xb4n3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp70isb5ns.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp70isb5ns.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p6xb4n3.lua:11: attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp_p6xb4n3.lua:11: in local 'candidate'\n\t/tmp/tmp_p6xb4n3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.sqrt(n) + 1 do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpetqup4zm.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpetqup4zm.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            divisors[i] = true\n            if i > divisors[n / i] then\n                divisors[n / i] = i\n            end\n        end\n    end\n    return divisors[n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpefbgc6yl.lua:9: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpefbgc6yl.lua:9: in local 'candidate'\n\t/tmp/tmpefbgc6yl.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = math.floor(math.sqrt(n))\n    for i = 2, max do\n        if n % i == 0 then\n            return i\n        end\n    end\nend\nreturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpds8lza6x.lua:13: <eof> expected near 'end'\n",
      "stdout": "",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p6xb4n3.lua:11: attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp_p6xb4n3.lua:11: in local 'candidate'\n\t/tmp/tmp_p6xb4n3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907494
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.floor(math.sqrt(n)) + 1 do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdv6kz47t.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpdv6kz47t.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local i, j\n    for i = 1, n do\n        for j = 1, n do\n            if j > i and j % i == 0 then\n                return j\n            end\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppnu2r98i.lua:18: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmppnu2r98i.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local i, j, k\n    for i = 1, n, 2 do\n        for j = 1, n, 2 do\n            for k = 1, n, 2 do\n                if k * k * k <= n and n % k * k * k == 0 then\n                    return k * k * k\n                end\n            end\n        end\n    end\n    return 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5yjg35fm.lua:23: expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp5yjg35fm.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local result = 1\n    for i = 2, math.sqrt(n) + 1 do\n        if n % i == 0 then\n            result = i\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd11by1hp.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpd11by1hp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            divisors[i] = true\n        end\n    end\n    return max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmj45paw1.lua:11: attempt to call a nil value (global 'max')\nstack traceback:\n\t/tmp/tmpmj45paw1.lua:11: in local 'candidate'\n\t/tmp/tmpmj45paw1.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = math.floor(math.sqrt(n))\n    for i = 2, max do\n        if n % i == 0 then\n            return i\n        end\n    end\nend\nreturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpds8lza6x.lua:13: <eof> expected near 'end'\n",
      "stdout": "",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.sqrt(n) + 1 do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpetqup4zm.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpetqup4zm.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.floor(math.sqrt(n))+1 do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpccbdfdyp.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpccbdfdyp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.floor(math.sqrt(n))+1 do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpccbdfdyp.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpccbdfdyp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp70isb5ns.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp70isb5ns.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p6xb4n3.lua:11: attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp_p6xb4n3.lua:11: in local 'candidate'\n\t/tmp/tmp_p6xb4n3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907494
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local d = 1\n    while d <= n/2 do\n        if n % d == 0 then return d end\n        d = d + 1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpix925vkj.lua:17: expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpix925vkj.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local result = 1\n    for i = 2, n do\n        if n % i == 0 then\n            result = i\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6r58n1lu.lua:18: expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp6r58n1lu.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p6xb4n3.lua:11: attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp_p6xb4n3.lua:11: in local 'candidate'\n\t/tmp/tmp_p6xb4n3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907494
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.floor(math.sqrt(n))+1 do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpccbdfdyp.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpccbdfdyp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.floor(math.sqrt(n)) + 1 do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdv6kz47t.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpdv6kz47t.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p6xb4n3.lua:11: attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp_p6xb4n3.lua:11: in local 'candidate'\n\t/tmp/tmp_p6xb4n3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p6xb4n3.lua:11: attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp_p6xb4n3.lua:11: in local 'candidate'\n\t/tmp/tmp_p6xb4n3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = math.floor(math.sqrt(n))\n    for i = 2, max do\n        if n % i == 0 then\n            return i\n        end\n    end\nend\nreturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpds8lza6x.lua:13: <eof> expected near 'end'\n",
      "stdout": "",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p6xb4n3.lua:11: attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp_p6xb4n3.lua:11: in local 'candidate'\n\t/tmp/tmp_p6xb4n3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local result = 1\n    for i = 2, n do\n        if n % i == 0 then\n            result = i\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6r58n1lu.lua:18: expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp6r58n1lu.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.floor(math.sqrt(n))+1 do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpccbdfdyp.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpccbdfdyp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p6xb4n3.lua:11: attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp_p6xb4n3.lua:11: in local 'candidate'\n\t/tmp/tmp_p6xb4n3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local result = 1\n    for i = 2, n do\n        if n % i == 0 then\n            result = i\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6r58n1lu.lua:18: expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp6r58n1lu.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.sqrt(n) + 1 do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpetqup4zm.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpetqup4zm.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.sqrt(n) + 1 do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpetqup4zm.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpetqup4zm.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p6xb4n3.lua:11: attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp_p6xb4n3.lua:11: in local 'candidate'\n\t/tmp/tmp_p6xb4n3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907494
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local i, j\n    for i = 1, n do\n        for j = 1, n do\n            if j > i and j % i == 0 then\n                return j\n            end\n        end\n    end\nend\nprint(largest_divisor(15))\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "2\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr5jkwym6.lua:19: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpr5jkwym6.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local m = math.floor(math.sqrt(n))\n    for i = 1, m do\n        if n % i == 0 then\n            return i\n        end\n    end\nend\nreturn largest_divisor(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpod8_wj5k.lua:13: <eof> expected near 'end'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local m = math.floor(math.sqrt(n))\n    for i = 2, m do\n        if n % i == 0 then\n            return i\n        end\n    end\nend\nreturn largest_divisor(n)\nend\n\"\"\"\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmp6v_vlgms.lua:13: <eof> expected near 'end'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p6xb4n3.lua:11: attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp_p6xb4n3.lua:11: in local 'candidate'\n\t/tmp/tmp_p6xb4n3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907494
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            divisors[i] = true\n            if i > max_divisor then\n                max_divisor = i\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpwn7cwvsu.lua:26: 'end' expected (to close 'function' at line 4) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.floor(math.sqrt(n)) + 1 do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdv6kz47t.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpdv6kz47t.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.floor(math.sqrt(n))+1 do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpccbdfdyp.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpccbdfdyp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            divisors[i] = true\n        end\n    end\n    for i = 1, n do\n        if not divisors[i] then\n            return i\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6tfjj1zd.lua:21: expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp6tfjj1zd.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.floor(math.sqrt(n))+1 do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpccbdfdyp.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpccbdfdyp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p6xb4n3.lua:11: attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp_p6xb4n3.lua:11: in local 'candidate'\n\t/tmp/tmp_p6xb4n3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907494
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.floor(math.sqrt(n))+1 do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpccbdfdyp.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpccbdfdyp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p6xb4n3.lua:11: attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp_p6xb4n3.lua:11: in local 'candidate'\n\t/tmp/tmp_p6xb4n3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907494
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local i = 1\n    while i <= n do\n        if n % i == 0 then\n            return i\n        end\n        i = i + 1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcv7rcsec.lua:19: expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpcv7rcsec.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local d = 1\n    while d <= n/2 do\n        if n % d == 0 then\n            return d\n        end\n        d = d + 1\n    end\nend\nprint(largest_divisor(15))\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "1\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt79l5_w7.lua:20: expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpt79l5_w7.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p6xb4n3.lua:11: attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp_p6xb4n3.lua:11: in local 'candidate'\n\t/tmp/tmp_p6xb4n3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907494
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local m = math.floor(math.sqrt(n))\n    for i = 2, m do\n        if n % i == 0 then\n            return i\n        end\n    end\nend\nreturn largest_divisor(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmp86j1xxvo.lua:13: <eof> expected near 'end'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.floor(math.sqrt(n))+1 do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpccbdfdyp.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpccbdfdyp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p6xb4n3.lua:11: attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp_p6xb4n3.lua:11: in local 'candidate'\n\t/tmp/tmp_p6xb4n3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907494
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local i, d\n    for i = 2, n, 1 do\n        d = math.floor(n / i)\n        if d == n / i then\n            return i\n        end\n    end\nend\nreturn largest_divisor(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpwx3vhazo.lua:14: <eof> expected near 'end'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p6xb4n3.lua:11: attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp_p6xb4n3.lua:11: in local 'candidate'\n\t/tmp/tmp_p6xb4n3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = math.floor(math.sqrt(n))\n    for i = 2, max do\n        if n % i == 0 then\n            return i\n        end\n    end\nend\nreturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpds8lza6x.lua:13: <eof> expected near 'end'\n",
      "stdout": "",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p6xb4n3.lua:11: attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp_p6xb4n3.lua:11: in local 'candidate'\n\t/tmp/tmp_p6xb4n3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p6xb4n3.lua:11: attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp_p6xb4n3.lua:11: in local 'candidate'\n\t/tmp/tmp_p6xb4n3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907494
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.floor(math.sqrt(n)) + 1 do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdv6kz47t.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpdv6kz47t.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p6xb4n3.lua:11: attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp_p6xb4n3.lua:11: in local 'candidate'\n\t/tmp/tmp_p6xb4n3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907494
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            divisors[i] = true\n            if i > divisors[n / i] then\n                divisors[n / i] = i\n            end\n        end\n    end\n    return divisors[n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpefbgc6yl.lua:9: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpefbgc6yl.lua:9: in local 'candidate'\n\t/tmp/tmpefbgc6yl.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 0\n    for i = 1, n do\n        if n % i == 0 then\n            max = i\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr_7krwqi.lua:17: expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpr_7krwqi.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local d = 1\n    while d <= n/2 do\n        if n % d == 0 then\n            return d\n        end\n        d = d + 1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjajb0drm.lua:19: expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpjajb0drm.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p6xb4n3.lua:11: attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp_p6xb4n3.lua:11: in local 'candidate'\n\t/tmp/tmp_p6xb4n3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp70isb5ns.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp70isb5ns.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p6xb4n3.lua:11: attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp_p6xb4n3.lua:11: in local 'candidate'\n\t/tmp/tmp_p6xb4n3.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp70isb5ns.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp70isb5ns.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local d = 1\n    while d <= n/2 do\n        if n % d == 0 then\n            return d\n        end\n        d = d + 1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjajb0drm.lua:19: expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpjajb0drm.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.sqrt(n) + 1 do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpetqup4zm.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpetqup4zm.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp70isb5ns.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp70isb5ns.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local max = 1\n    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n            max = i\n            break\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp70isb5ns.lua:20: expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp70isb5ns.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    },
    {
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local d = 1\n    while d <= n/2 do\n        if n % d == 0 then return d end\n        d = d + 1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpix925vkj.lua:17: expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpix925vkj.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given number n, find the largest number that divides n evenly, smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n    local result = 1\n    for i = 2, n do\n        if n % i == 0 then\n            result = i\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6r58n1lu.lua:18: expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp6r58n1lu.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907494
    }
  ]
}