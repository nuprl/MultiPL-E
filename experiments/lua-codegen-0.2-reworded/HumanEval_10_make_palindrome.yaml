name: HumanEval_10_make_palindrome
language: lua
prompt: "-- Find the shortest palindrome that begins with a supplied string.\n-- Algorithm\
  \ idea is simple:\n-- - Find the longest postfix of supplied string that is a palindrome.\n\
  -- - Append to the end of the string reverse of a string prefix that comes before\
  \ the palindromic suffix.\n-- >>> make_palindrome('')\n-- ''\n-- >>> make_palindrome('cat')\n\
  -- 'catac'\n-- >>> make_palindrome('cata')\n-- 'catac'\nlocal function make_palindrome(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
  \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
  \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
  \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local max_len = math.inf\n    local max_len_index = 0\n    for\
    \ i = 1, #string, 2 do\n        if string:sub(string, i, i) == string:sub(string,\
    \ 1, i) then\n            if max_len > i then\n                max_len = i\n \
    \               max_len_index = i\n            end\n        end\n    end\n   \
    \ if max_len == math.inf then\n        return string\n    end\n    return string:sub(1,\
    \ max_len_index) .. string:sub(max_len_index + 1, #string)\nend", "    local max_len\
    \ = math.inf\n    local max_len_index = 1\n    local max_len_index_rev = 1\n \
    \   for i = 1, #string, 2 do\n        if string:sub(string, i, i) == string:sub(string,\
    \ 1, i) then\n            if max_len > i then\n                max_len = i\n \
    \               max_len_index = i\n                max_len_index_rev = string:sub(1,\
    \ i)\n            end\n        end\n    end\n    if max_len == math.inf then\n\
    \        return string\n    end\n    return string:sub(1, max_len_index) .. string:sub(max_len_index_rev,\
    \ max_len)\nend", "    local max_postfix = ''\n    local max_postfix_len = 0\n\
    \    for i = 1, #string, 2 do\n        if string:sub(string, i, i) == string:sub(string,\
    \ 1, i) then\n            max_postfix = string:sub(string, 1, i)\n           \
    \ max_postfix_len = i\n            break\n        end\n    end\n    if max_postfix_len\
    \ == 0 then\n        return string\n    end\n    local max_prefix = string:sub(string,\
    \ 1, max_postfix_len)\n    local max_prefix_len = max_postfix_len\n    for i =\
    \ max_postfix_len, 1, -1 do\n        if string:sub(string, i, i) == string:sub(string,\
    \ max_postfix_len, i) then\n            max_prefix = string:sub(string, max_postfix_len,\
    \ i)\n            max_prefix_len = i\n            break\n        end\n    end\n\
    \    return string:gsub(max_prefix, max_prefix:gsub(max_prefix, '', 1, 2), 1,\
    \ 2) .. string:gsub(max_postfix, max_postfix:gsub(max_postfix, '', 1, 2), 1, 2)\n\
    end", "    local max_len = math.inf\n    local max_len_postfix = ''\n    local\
    \ max_len_prefix = ''\n    for i = 1, #string, 2 do\n        if string[i] == string[i-1]\
    \ then\n            if max_len_postfix < i then\n                max_len_postfix\
    \ = i\n            end\n        elseif max_len_prefix < i then\n            max_len_prefix\
    \ = i\n        end\n    end\n    if max_len_postfix > 0 then\n        string =\
    \ string .. string[1, max_len_postfix] .. string[max_len_postfix+1, #string]\n\
    \    end\n    if max_len_prefix > 0 then\n        string = string[max_len_prefix+1,\
    \ #string] .. string[1, max_len_prefix]\n    end\n    return string\nend", " \
    \   local max_len = 1\n    local max_len_postfix = ''\n    local max_len_prefix\
    \ = ''\n    local i = 1\n    while i <= #string do\n        if string:sub(string,\
    \ i, i) == string:sub(string, 1, i) then\n            max_len = i\n          \
    \  max_len_postfix = string:sub(string, 1, i)\n            max_len_prefix = string:sub(string,\
    \ i, i)\n            break\n        i = i + 1\n    end\n    if max_len == 1 then\n\
    \        return string\n    end\n    return string:gsub(max_len_postfix, max_len_prefix:rev())\n\
    end", "    local max_len = math.inf\n    local max_palindrome = ''\n    for i\
    \ = 1, #string, 2 do\n        local palindrome = string[i] .. string[i-1] .. string[i+1]\
    \ .. string[i-2]\n        if palindrome == string and len(palindrome) > max_len\
    \ then\n            max_len = len(palindrome)\n            max_palindrome = palindrome\n\
    \        end\n    end\n    return max_palindrome\nend", "    local max_len = math.inf\n\
    \    local max_palindrome = ''\n    for i = 1, #string, 2 do\n        local palindrome\
    \ = string:sub(i, i)\n        if palindrome:len() > max_len then\n           \
    \ max_len = palindrome:len()\n            max_palindrome = palindrome\n      \
    \  end\n    end\n    return max_palindrome:reverse() .. max_palindrome\nend",
  "    local max_len = math.inf\n    local max_len_index = 1\n    local max_len_index_rev\
    \ = 1\n    for i = 1,#                                                       \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                           ",
  "    local max_len = math.inf\n    local max_len_index = 0\n    local max_len_string\
    \ = ''\n    for i = 1,#                                                      \
    \      ", "    local max_len = math.inf\n    local max_len_index = 1\n    local\
    \ max_len_index_rev = 1\n    for i = 1,#", "    local max_postfix = string:match('(.+)[^a-zA-Z]*$')\n\
    \    local max_postfix_palindrome = string:match('(.+)[^a-zA-Z]*$', max_postfix[1])\n\
    \    local max_postfix_palindrome_reverse = string:match('^(.+)[^a-zA-Z]*$', max_postfix_palindrome[1])\n\
    \    return string:gsub(max_postfix_palindrome_reverse, max_postfix_palindrome)\n\
    end", "    local max_len = math.inf\n    local max_len_index = 1\n    local max_len_string\
    \ = ''\n    for i = 1, #string, 2 do\n        if string:sub(string, i, i) == string:sub(string,\
    \ 1, i) then\n            if max_len > i then\n                max_len = i\n \
    \               max_len_index = i\n                max_len_string = string:sub(1,\
    \ i)\n            end\n        end\n    end\n    if max_len == math.inf then\n\
    \        return string\n    end\n    return string:gsub(max_len_string, 1, max_len_string:len())\n\
    end", "    local max_len = math.inf\n    local max_len_str = ''\n    local max_len_str_rev\
    \ = ''\n    local i = 1\n    while i <= #string do\n        local len = math.inf\n\
    \        local len_str = string[i]\n        local len_str_rev = string[i]\n  \
    \      while len_str == string[i-1] do\n            len = len + 1\n          \
    \  len_str = string[i+len]\n            len_str_rev = string[i-len]\n        if\
    \ len > max_len then\n            max_len = len\n            max_len_str = string[i-len+1]\n\
    \            max_len_str_rev = string[i-1]\n        end\n        i = i + 1\n \
    \   end\n    return max_len_str .. max_len_str_rev\nend", "    local max_len =\
    \ math.inf\n    local max_len_postfix = ''\n    local max_len_prefix = ''\n  \
    \  for i = 1, #string, 2 do\n        if string:sub(string, i, i) == string:sub(string,\
    \ 1, i) then\n            max_len = math.min(max_len, i)\n            max_len_postfix\
    \ = string:sub(string, 1, i)\n            max_len_prefix = string:sub(string,\
    \ i, i)\n        end\n    end\n    return max_len_postfix .. max_len_prefix\n\
    end", "    local max_len = math.inf\n    local max_len_index = 1\n    local max_len_index_index\
    \ = 1\n    local max_len_index_string = ''\n    local max_len_index_string_index\
    \ = 1\n    local max_len_index_string_string = ''\n    for i = 1,#           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                           ", "    local max_len\
    \ = math.inf\n    local max_len_postfix = ''\n    local max_len_prefix = ''\n\
    \    for i = 1, #string, 2 do\n        if string:sub(string, i, i) == string:sub(string,\
    \ 1, i) then\n            max_len = math.min(max_len, i)\n            max_len_postfix\
    \ = string:sub(string, 1, i)\n            max_len_prefix = string:sub(string,\
    \ i, i)\n        end\n    end\n    return max_len_postfix .. max_len_prefix\n\
    end", "    local longest_palindrome = ''\n    local longest_palindrome_length\
    \ = 0\n    local i = 1\n    while i <= #string do\n        local palindrome =\
    \ string:sub(i, i) .. string:sub(i, i)\n        if palindrome == string:sub(1,\
    \ #palindrome) then\n            if #palindrome > longest_palindrome_length then\n\
    \                longest_palindrome = palindrome\n                longest_palindrome_length\
    \ = #palindrome\n            end\n        end\n        i = i + 1\n    end\n  \
    \  return longest_palindrome\nend", "    local max_len = math.inf\n    local max_len_postfix\
    \ = ''\n    local max_len_prefix = ''\n    for i = 1, #string, 2 do\n        if\
    \ string:sub(string, i, i) == string:sub(string, 1, i) then\n            max_len\
    \ = math.min(max_len, i)\n            max_len_postfix = string:sub(string, 1,\
    \ i)\n            max_len_prefix = string:sub(string, i, i)\n        end\n   \
    \ end\n    return max_len_prefix .. max_len_postfix\nend", "    local max_len\
    \ = math.inf\n    local max_len_postfix = ''\n    local max_len_prefix = ''\n\
    \    for i = 1, #string, 2 do\n        if string[i] == string[i-1] then\n    \
    \        max_len = math.min(max_len, i)\n            max_len_postfix = string[i-max_len+1\
    \ .. i+1]\n            max_len_prefix = string[i-max_len .. i-1]\n        end\n\
    \    end\n    return max_len_prefix .. max_len_postfix\nend", "    local max_len\
    \ = math.inf\n    local max_palindrome = ''\n    for i = 1, #string, 2 do\n  \
    \      local palindrome = string:sub(i, i)\n        if palindrome:len() > max_len\
    \ then\n            max_len = palindrome:len()\n            max_palindrome = palindrome\n\
    \        end\n    end\n    return max_palindrome:reverse() .. max_palindrome\n\
    end", "    local max_len = math.inf\n    local max_len_index = 1\n    local max_len_string\
    \ = ''\n    for i = 1, #string, 2 do\n        if string:sub(string, i, i) == string:sub(string,\
    \ 1, i) then\n            if max_len > i then\n                max_len = i\n \
    \               max_len_index = i\n                max_len_string = string:sub(1,\
    \ i)\n            end\n        end\n    end\n    if max_len == math.inf then\n\
    \        return string\n    end\n    return string:gsub(max_len_string, max_len_string:rev())\n\
    end", "    local max_len = math.inf\n    local max_len_index = 1\n    local max_len_index_rev\
    \ = 1\n    local max_len_index_rev_rev = 1\n    local max_len_index_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local\
    \ max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n\
    \    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n\
    \    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev =\
    \ 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_", "    local max_len = math.inf\n\
    \    local max_len_index = 1\n    local max_len_string = ''\n    for i = 1, #string,\
    \ 2 do\n        if string:sub(string, i, i) == string:sub(string, 1, i) then\n\
    \            if max_len > i then\n                max_len = i\n              \
    \  max_len_index = i\n                max_len_string = string:sub(1, max_len_index)\n\
    \            end\n        end\n    end\n    if max_len == math.inf then\n    \
    \    return string\n    else\n        return string:concat(max_len_string:rev())\n\
    \    end\nend", "    local max_len = math.inf\n    local max_len_postfix = ''\n\
    \    local max_len_prefix = ''\n    for i = 1, #string, 2 do\n        if string:sub(string,\
    \ i, i) == string:sub(string, 1, i) then\n            max_len = math.min(max_len,\
    \ i)\n            max_len_postfix = string:sub(string, 1, i)\n            max_len_prefix\
    \ = string:sub(string, i, i)\n        end\n    end\n    return max_len_postfix\
    \ .. max_len_prefix\nend", "    local max_len = 1\n    local max_postfix = string\n\
    \    local max_prefix = string\n    local i = 1\n    while i <= #string do\n \
    \       if string[i] == string[#string - i] then\n            max_len = i * 2\n\
    \            max_postfix = string[i + 1 .. #string - i]\n            max_prefix\
    \ = string[1 .. i - 1]\n            break\n        i = i + 1\n    end\n    return\
    \ max_prefix .. max_postfix\nend", "    local max_len = math.inf\n    local max_len_index\
    \ = 0\n    local max_len_string = ''\n    for i = 1,#string,2 do\n        if string:sub(string,i,i)\
    \ == string:sub(string,1,i) then\n            if max_len > i then\n          \
    \      max_len = i\n                max_len_index = i\n                max_len_string\
    \ = string:sub(1,max_len_index)\n            end\n        end\n    end\n    if\
    \ max_len == math.inf then\n        return string\n    end\n    return string:concat(max_len_string:reverse())\n\
    end", "    local max_len = math.inf\n    local max_len_index = 1\n    local max_len_string\
    \ = ''\n    for i = 1, #string, 2 do\n        if string:sub(string, i, i) == string:sub(string,\
    \ 1, i) then\n            if max_len > i then\n                max_len = i\n \
    \               max_len_index = i\n                max_len_string = string:sub(1,\
    \ max_len_index)\n            end\n        end\n    end\n    if max_len == math.inf\
    \ then\n        return string\n    end\n    return string:concat(max_len_string,\
    \ string:sub(1, max_len_index - max_len + 1))\nend", "    local max_len = math.inf\n\
    \    local max_len_index = 0\n    for i = 1,#string,2 do\n        if string:sub(string,i,i)\
    \ == string:sub(string,1,i) then\n            if max_len > i then\n          \
    \      max_len = i\n                max_len_index = i\n            end\n     \
    \   end\n    end\n    if max_len == math.inf then\n        return string\n   \
    \ else\n        return string:sub(1,max_len_index) .. string:sub(max_len_index+1,-1)\n\
    \    end\nend", "    local max_len = math.inf\n    local max_len_index = 1\n \
    \   local max_len_index_index = 1\n    local max_len_index_index_index = 1\n \
    \   local max_len_index_index_index_index = 1\n    local max_len_index_index_index_index_index\
    \ = 1\n    local max_len_index_index_index_index_index_index = 1\n    local max_len_index_index_index_index_index_index_index\
    \ = 1\n    local max_len_index_index_index_index_index_index_index_index = 1\n\
    \    local max_len_index_index_index_index_index_index_index_index_index = 1\n\
    \    local max_len_index_index_index_index_index_index_index_index_index_index\
    \ = 1\n    local max_len_index_index_index_index_index_index_index_index_index_index_index\
    \ = 1\n    local max_len_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 1\n    local max_len_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 1\n    local max_len_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 1\n    local max_len_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 1\n    local max_len_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 1\n    local max_len_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 1\n    local max_len_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 1\n    local max_len_index_index_index_index_index_", "    local max_len =\
    \ math.inf\n    local max_len_index = 1\n    local max_len_index_rev = 1\n   \
    \ local max_len_index_rev_rev = 1\n    local max_len_index_rev_rev_rev = 1\n \
    \   local max_len_index_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local\
    \ max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n\
    \    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n\
    \    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev =\
    \ 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_", "    local max_postfix = ''\n\
    \    local max_postfix_palindrome = ''\n    local max_postfix_palindrome_length\
    \ = 0\n    local i = 1\n    while i <= #string do\n        local palindrome =\
    \ string:sub(i,i)\n        if palindrome == palindrome:\n            if max_postfix_palindrome_length\
    \ < i - 1:\n                max_postfix_palindrome_length = i - 1\n          \
    \      max_postfix_palindrome = string:sub(1,i)\n        i = i + 1\n    end\n\
    \    if max_postfix_palindrome_length > 0 then\n        max_postfix = string:sub(1,max_postfix_palindrome_length\
    \ + 1) .. max_postfix_palindrome\n    end\n    return max_postfix\nend", "   \
    \ local max_len = math.inf\n    local max_len_index = 1\n    local max_len_index_index\
    \ = 1\n    for i = 1,#string,2 do\n        if string:sub(string,i,i) == string:sub(string,1,i)\
    \ then\n            if max_len > i then\n                max_len = i\n       \
    \         max_len_index = i\n                max_len_index_index = i\n       \
    \     end\n        end\n    end\n    if max_len == math.inf then\n        return\
    \ string\n    end\n    return string:sub(1,max_len_index-max_len_index_index+1)\
    \ .. string:sub(max_len_index,max_len)\nend", "    local max_len = 1\n    local\
    \ max_len_postfix = ''\n    local max_len_prefix = ''\n    for i = 1, #string,\
    \ 2 do\n        if string:sub(string, i, i) == string:sub(string, 1, i) then\n\
    \            max_len = i\n            max_len_postfix = string:sub(string, 1,\
    \ i)\n            max_len_prefix = string:sub(string, i, i)\n            break\n\
    \        end\n    end\n    return max_len_prefix .. max_len_postfix\nend", " \
    \   local max_len = math.inf\n    local max_len_index = 1\n    local max_len_index_rev\
    \ = 1\n    local max_len_index_rev_rev = 1\n    local max_len_index_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local\
    \ max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n\
    \    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n\
    \    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev =\
    \ 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_", "    local max_len = math.inf\n\
    \    local max_len_index = 0\n    local max_len_string = ''\n    for i = 1, #string,\
    \ 2 do\n        if string:sub(string, i, i) == string:sub(string, 1, i) then\n\
    \            if max_len > i then\n                max_len = i\n              \
    \  max_len_index = i\n                max_len_string = string:sub(1, max_len_index)\n\
    \            end\n        end\n    end\n    if max_len == math.inf then\n    \
    \    return string\n    end\n    return string:gsub(max_len_string, max_len_string:reverse())\n\
    end", "    local max_len = math.inf\n    local max_len_index = 1\n    local max_len_index_index\
    \ = 1\n    local max_len_index_index_index = 1\n    local max_len_index_index_index_index\
    \ = 1\n    local max_len_index_index_index_index_index = 1\n    local max_len_index_index_index_index_index_index\
    \ = 1\n    local max_len_index_index_index_index_index_index_index = 1\n    local\
    \ max_len_index_index_index_index_index_index_index_index = 1\n    local max_len_index_index_index_index_index_index_index_index_index\
    \ = 1\n    local max_len_index_index_index_index_index_index_index_index_index_index\
    \ = 1\n    local max_len_index_index_index_index_index_index_index_index_index_index_index\
    \ = 1\n    local max_len_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 1\n    local max_len_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 1\n    local max_len_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 1\n    local max_len_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 1\n    local max_len_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 1\n    local max_len_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 1\n    local max_len_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 1\n    local max_len_index_index_index_index_index_", "    local max_len =\
    \ 1\n    local max_len_postfix = ''\n    local max_len_prefix = ''\n    for i\
    \ = 1, #string, 2 do\n        if string:sub(string, i, i) == string:sub(string,\
    \ 1, i) then\n            max_len = i\n            max_len_postfix = string:sub(string,\
    \ 1, i)\n            max_len_prefix = string:sub(string, i, i)\n            break\n\
    \        end\n    end\n    return string:gsub(max_len_postfix .. max_len_prefix\
    \ .. '', '', 'x')\nend", "    local max_len = math.inf\n    local max_len_index\
    \ = 1\n    local max_len_index_rev = 1\n    local max_len_index_rev_rev = 1\n\
    \    local max_len_index_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local\
    \ max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_", "    local longest_palindrome\
    \ = ''\n    local longest_palindrome_length = 0\n    for i = 1, #string, 2 do\n\
    \        local palindrome = string:sub(i, i)\n        if palindrome == palindrome:\n\
    \            if longest_palindrome_length < i:\n                longest_palindrome\
    \ = palindrome\n                longest_palindrome_length = i\n        end\n \
    \   end\n    if longest_palindrome_length > 0:\n        return string:gsub(longest_palindrome,\
    \ '') .. string:sub(1, longest_palindrome_length)\n    else:\n        return string\n\
    end", "    local max_len = 1\n    local max_len_postfix = ''\n    local max_len_prefix\
    \ = ''\n    for i = 1, #string, 2 do\n        if string:sub(string, i, i) == string:sub(string,\
    \ 1, i) then\n            max_len = i\n            max_len_postfix = string:sub(string,\
    \ 1, i)\n            max_len_prefix = string:sub(string, i, i)\n            break\n\
    \        end\n    end\n    if max_len == 1 then\n        return string\n    end\n\
    \    return string:gsub(max_len_postfix .. max_len_prefix .. '', 1, max_len)\n\
    end", "    local max_len = math.inf\n    local max_len_index = 1\n    local max_len_index_index\
    \ = 1\n    for i = 1,#string,2 do\n        if string:sub(string,i,i) == string:sub(string,1,i)\
    \ then\n            if max_len > i then\n                max_len = i\n       \
    \         max_len_index = i\n                max_len_index_index = i\n       \
    \     end\n        end\n    end\n    if max_len == math.inf then\n        return\
    \ string\n    else\n        return string:sub(1,max_len_index) .. string:sub(max_len_index_index,max_len)\n\
    \    end\nend", "    local max_len = math.inf\n    local max_len_postfix = ''\n\
    \    local max_len_prefix = ''\n    for i = 1, #string, 2 do\n        if string:sub(string,\
    \ i, i) == string:sub(string, 1, i) then\n            max_len = math.min(max_len,\
    \ i)\n            max_len_postfix = string:sub(string, 1, i)\n            max_len_prefix\
    \ = string:sub(string, i, i)\n        end\n    end\n    return max_len_prefix\
    \ .. max_len_postfix\nend", "    local max_len = math.inf\n    local max_len_index\
    \ = 0\n    local max_len_string = ''\n    for i = 1, #string, 2 do\n        if\
    \ string:sub(string, i, i) == string:sub(string, 1, i) then\n            if max_len\
    \ > i then\n                max_len = i\n                max_len_index = i\n \
    \               max_len_string = string:sub(1, max_len_index)\n            end\n\
    \        end\n    end\n    if max_len == math.inf then\n        return string\n\
    \    end\n    return string:gsub(max_len_string, max_len_string:rev())\nend",
  "    local max_len = math.inf\n    local max_len_index = 1\n    local max_len_index_rev\
    \ = 1\n    local max_len_index_rev_rev = 1\n    local max_len_index_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local\
    \ max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n\
    \    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n\
    \    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev =\
    \ 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_", "    local max_len = math.inf\n\
    \    local max_len_index = 1\n    local max_len_index_rev = 1\n    local max_len_index_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local\
    \ max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_", "    local max_len = math.inf\n\
    \    local max_len_index = 0\n    local max_len_string = ''\n    for i = 1, #string,\
    \ 2 do\n        if string:sub(string, i, i) == string:sub(string, 1, i) then\n\
    \            if max_len > i then\n                max_len = i\n              \
    \  max_len_index = i\n                max_len_string = string:sub(1, i)\n    \
    \        end\n        end\n    end\n    if max_len == math.inf then\n        return\
    \ string\n    end\n    return string:gsub(max_len_string, 1, max_len_string) ..\
    \ string:sub(1, max_len_index - max_len + 1)\nend", "    local longest_palindrome\
    \ = ''\n    local i = 1\n    while i <= #string do\n        local palindrome =\
    \ string:sub(i, i)\n        if palindrome == palindrome:\n            if longest_palindrome\
    \ == '' or #palindrome > #longest_palindrome:\n                longest_palindrome\
    \ = palindrome\n            end\n        i = i + 1\n    end\n    return longest_palindrome\n\
    end", "    local max_len = math.inf\n    local max_len_index = 1\n    local max_len_index_str\
    \ = ''\n    for i = 1, #string, 2 do\n        if string:sub(string, i, i) == string:sub(string,\
    \ 1, i) then\n            if max_len > i then\n                max_len = i\n \
    \               max_len_index = i\n                max_len_index_str = string:sub(1,\
    \ max_len_index)\n            end\n        end\n    end\n    if max_len == math.inf\
    \ then\n        return string\n    end\n    return string:gsub(max_len_index_str,\
    \ string:sub(1, max_len_index - 1)) .. string:sub(max_len_index, max_len)\nend",
  "    local max_len = math.inf\n    local max_palindrome = ''\n    for i = 1, #string,\
    \ 2 do\n        local palindrome = string:sub(i, i)\n        if palindrome ==\
    \ palindrome:\n            if max_len > i:\n                max_len = i\n    \
    \            max_palindrome = string:sub(1, i)\n        else:\n            break\n\
    \    return max_palindrome\nend", "    local max_len = math.inf\n    local max_len_index\
    \ = 1\n    local max_len_index_rev = 1\n    local max_len_index_rev_rev = 1\n\
    \    local max_len_index_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local\
    \ max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_", "    local max_len = 1\n   \
    \ local max_palindrome = string\n    for i = 1, #string, 2 do\n        if string:sub(string,\
    \ i, i) == string:sub(string, 1, i) then\n            max_len = i\n          \
    \  max_palindrome = string\n        end\n    end\n    return string:sub(1, max_len)\
    \ .. string:sub(max_len, 1, max_len)\nend", "    local longest_palindrome = string:match('(.+)[^a-zA-Z]*(.+)')\n\
    \    if not longest_palindrome then return string end\n    local palindrome_prefix\
    \ = longest_palindrome[1]\n    local palindrome_suffix = longest_palindrome[2]\n\
    \    return palindrome_prefix .. string:reverse() .. palindrome_suffix\nend",
  "    local max_len = math.inf\n    local max_len_index = 1\n    local max_len_index_index\
    \ = 1\n    local max_len_index_index_index = 1\n    local max_len_index_index_index_index\
    \ = 1\n    local max_len_index_index_index_index_index = 1\n    local max_len_index_index_index_index_index_index\
    \ = 1\n    local max_len_index_index_index_index_index_index_index = 1\n    local\
    \ max_len_index_index_index_index_index_index_index_index = 1\n    local max_len_index_index_index_index_index_index_index_index_index\
    \ = 1\n    local max_len_index_index_index_index_index_index_index_index_index_index\
    \ = 1\n    local max_len_index_index_index_index_index_index_index_index_index_index_index\
    \ = 1\n    local max_len_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 1\n    local max_len_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 1\n    local max_len_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 1\n    local max_len_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 1\n    local max_len_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 1\n    local max_len_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 1\n    local max_len_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 1\n    local max_len_index_index_index_index_index_", "    local max_len =\
    \ math.inf\n    local max_len_index = 0\n    local max_len_string = ''\n    for\
    \ i = 1, #string, 2 do\n        if string:sub(string, i, i) == string:sub(string,\
    \ 1, i) then\n            if max_len > i then\n                max_len = i\n \
    \               max_len_index = i\n                max_len_string = string:sub(1,\
    \ max_len)\n            end\n        end\n    end\n    if max_len == math.inf\
    \ then\n        return string\n    end\n    return string:gsub(max_len_string,\
    \ max_len_string:reverse())\nend", "    local max_len = math.inf\n    local max_len_index\
    \ = 1\n    local max_len_index_index = 1\n    local max_len_index_index_index\
    \ = 1\n    local max_len_index_index_index_index = 1\n    local max_len_index_index_index_index_index\
    \ = 1\n    local max_len_index_index_index_index_index_index = 1\n    local max_len_index_index_index_index_index_index_index\
    \ = 1\n    local max_len_index_index_index_index_index_index_index_index = 1\n\
    \    local max_len_index_index_index_index_index_index_index_index_index = 1\n\
    \    local max_len_index_index_index_index_index_index_index_index_index_index\
    \ = 1\n    local max_len_index_index_index_index_index_index_index_index_index_index_index\
    \ = 1\n    local max_len_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 1\n    local max_len_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 1\n    local max_len_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 1\n    local max_len_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 1\n    local max_len_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 1\n    local max_len_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 1\n    local max_len_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index_index\
    \ = 1\n    local max_len_index_index_index_index_index_", "    local max_len =\
    \ math.inf\n    local max_len_index = 1\n    local max_len_index_index = 1\n \
    \   for i = 1,#string,2 do\n        if string:sub(string,i,i) == string:sub(string,1,i)\
    \ then\n            if max_len > i then\n                max_len = i\n       \
    \         max_len_index = i\n                max_len_index_index = i\n       \
    \     end\n        end\n    end\n    if max_len == math.inf then\n        return\
    \ string\n    end\n    return string:sub(1,max_len_index-max_len_index_index+1)\
    \ .. string:sub(max_len_index,max_len)\nend", "    local max_len = math.inf\n\
    \    local max_len_index = 1\n    local max_len_index_rev = 1\n    local max_len_index_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local\
    \ max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_", "    local max_len = math.inf\n\
    \    local max_len_index = 0\n    for i = 1,#string,2 do\n        if string:sub(string,i,i)\
    \ == string:sub(string,1,i) then\n            if max_len > i then\n          \
    \      max_len = i\n                max_len_index = i\n            end\n     \
    \   end\n    end\n    if max_len == math.inf then\n        return string\n   \
    \ end\n    return string:sub(1,max_len_index) .. string:sub(max_len_index+1,-1)\n\
    end", "    local max_len = 0\n    local max_len_index = 0\n    local max_len_string\
    \ = ''\n    for i = 1, #string, 2 do\n        if string:sub(string, i, i) == string:sub(string,\
    \ 1, i) then\n            if max_len < i then\n                max_len = i\n \
    \               max_len_index = i\n                max_len_string = string:sub(string,\
    \ 1, i)\n            end\n        end\n    end\n    if max_len == 0 then\n   \
    \     return string\n    end\n    return string:gsub(max_len_string, 1, max_len_string:len())\n\
    end", "    local longest_palindrome = ''\n    local i = 1\n    while i <= #string\
    \ do\n        local palindrome = string:sub(i, i) .. string:sub(i, i)\n      \
    \  if palindrome == string:\n            if #longest_palindrome < #palindrome\
    \ then\n                longest_palindrome = palindrome\n            end\n   \
    \     i = i + 1\n    end\n    return longest_palindrome\nend", "    local max_len\
    \ = 1\n    local max_palindrome = string\n    for i = 1, #string, 2 do\n     \
    \   if string[i] == string[-i] then\n            max_len = i\n            max_palindrome\
    \ = string\n        end\n    end\n    if max_len > 1 then\n        max_palindrome\
    \ = string .. string[1..max_len] .. string[max_len+1..#string]\n    end\n    return\
    \ max_palindrome\nend", "    local max_len = 1\n    local max_palindrome = string\n\
    \    for i = 1, #string, 2 do\n        if string:sub(string, i, i) == string:sub(string,\
    \ 1, i) then\n            max_len = i\n            max_palindrome = string\n \
    \       end\n    end\n    return string:sub(1, max_len) .. string:sub(max_len,\
    \ -1)\nend", "    local max_len = 1\n    local max_palindrome = string\n    for\
    \ i = 1, #string, 2 do\n        if string[i] == string[i-1] then\n           \
    \ max_len = i\n            max_palindrome = string\n        end\n    end\n   \
    \ return string .. string[max_len .. #string] .. string[1 .. max_len - 1 .. #string]\n\
    end", "    local max_len = math.inf\n    local max_len_postfix = ''\n    local\
    \ max_len_prefix = ''\n    for i = 1, #string, 2 do\n        if string:sub(string,\
    \ i, i) == string:sub(string, 1, i) then\n            max_len = math.min(max_len,\
    \ i)\n            max_len_postfix = string:sub(string, 1, i)\n            max_len_prefix\
    \ = string:sub(string, i, i)\n        end\n    end\n    return max_len_prefix\
    \ .. max_len_postfix\nend", "    local max_len = math.inf\n    local max_len_index\
    \ = 1\n    local max_len_index_str = ''\n    local max_len_index_str_rev = ''\n\
    \    for i = 1,#string,2 do\n        if string:sub(string,i,i) == string:sub(string,1,i)\
    \ then\n            if max_len > i then\n                max_len = i\n       \
    \         max_len_index = i\n                max_len_index_str = string:sub(1,i)\n\
    \                max_len_index_str_rev = string:sub(i+1,#string)\n           \
    \ end\n        end\n    end\n    return max_len_index_str .. max_len_index_str_rev\n\
    end", "    local max_len = math.inf\n    local max_len_index = 1\n    local max_len_string\
    \ = ''\n    for i = 1, #string, 2 do\n        if string:sub(string, i, i) == string:sub(string,\
    \ 1, i) then\n            if max_len > i then\n                max_len = i\n \
    \               max_len_index = i\n                max_len_string = string:sub(1,\
    \ max_len_index)\n            end\n        end\n    end\n    if max_len == math.inf\
    \ then\n        return string\n    end\n    return string:gsub(max_len_string,\
    \ max_len_string:rev())\nend", "    local max_len = math.inf\n    local max_len_index\
    \ = 1\n    local max_len_index_rev = 1\n    local max_len_index_rev_rev = 1\n\
    \    local max_len_index_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local\
    \ max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_", "    local max_len = math.inf\n\
    \    local max_len_index = 1\n    local max_len_index_rev = 1\n    local max_len_index_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local\
    \ max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_", "    local longest_palindrome\
    \ = ''\n    local i = 1\n    while i <= #string do\n        local palindrome =\
    \ string:sub(i,i) .. string:sub(i,i)\n        if palindrome == string:longest_palindrome\
    \ = string:sub(1,i)\n        i = i + 1\n    end\n    return longest_palindrome\n\
    end", "    local max_len = 1\n    local max_len_postfix = ''\n    local max_len_prefix\
    \ = ''\n    for i = 1, #string, 2 do\n        if string:sub(string, i, i) == string:sub(string,\
    \ 1, i) then\n            max_len = i\n            max_len_postfix = string:sub(string,\
    \ 1, i)\n            max_len_prefix = string:sub(string, i, i)\n            break\n\
    \        end\n    end\n    return max_len_prefix .. max_len_postfix\nend", " \
    \   local max_len = 1\n    local max_len_postfix = ''\n    local max_len_prefix\
    \ = ''\n    local i = 1\n    while i <= #string do\n        if string[i] == string[i-1]\
    \ then\n            max_len = max_len + 1\n            max_len_postfix = string[i-1]..max_len_postfix\n\
    \            max_len_prefix = string[i]..max_len_prefix\n        else\n      \
    \      max_len = 1\n            max_len_postfix = string[i]\n            max_len_prefix\
    \ = string[i]\n        end\n        i = i + 1\n    end\n    return max_len_postfix..max_len_prefix\n\
    end", "    local max_len = math.inf\n    local max_len_postfix = ''\n    local\
    \ max_len_prefix = ''\n    for i = 1, #string, 2 do\n        if string:sub(string,\
    \ i, i) == string:sub(string, 1, i) then\n            max_len = math.min(max_len,\
    \ i)\n            max_len_postfix = string:sub(string, 1, i)\n            max_len_prefix\
    \ = string:sub(string, i, i)\n        end\n    end\n    return max_len_postfix\
    \ .. max_len_prefix\nend", "    local max_len = math.inf\n    local max_len_index\
    \ = 0\n    for i = 1,#string,2 do\n        if string:sub(string,i,i) == string:sub(string,1,i)\
    \ then\n            if max_len > i then\n                max_len = i\n       \
    \         max_len_index = i\n            end\n        end\n    end\n    if max_len\
    \ == math.inf then\n        return string\n    end\n    return string:sub(1,max_len_index)\
    \ .. string:sub(max_len_index+1,-1)\nend", "    local max_len = math.inf\n   \
    \ local max_len_postfix = ''\n    local max_len_prefix = ''\n    for i = 1, #string,\
    \ 2 do\n        if string:sub(string, i, i) == string:sub(string, 1, i) then\n\
    \            max_len = math.min(max_len, i)\n            max_len_postfix = string:sub(string,\
    \ 1, i)\n            max_len_prefix = string:sub(string, i, i)\n        end\n\
    \    end\n    return max_len_postfix .. max_len_prefix\nend", "    local max_len\
    \ = math.inf\n    local max_len_index = 1\n    local max_len_index_rev = 1\n \
    \   for i = 1,#string,2 do\n        if string:sub(string,i,i) == string:sub(string,1,i)\
    \ then\n            if max_len > i then\n                max_len = i\n       \
    \         max_len_index = i\n                max_len_index_rev = string:sub(1,i)\n\
    \            end\n        end\n    end\n    if max_len == math.inf then\n    \
    \    return string\n    end\n    return string:sub(1,max_len_index) .. string:sub(max_len_index_rev,max_len_index)\n\
    end", "    local max_len = math.inf\n    local max_len_index = 1\n    local max_len_index_str\
    \ = ''\n    for i = 1, #string, 2 do\n        if string:sub(string, i, i) == string:sub(string,\
    \ 1, i) then\n            if max_len > i then\n                max_len = i\n \
    \               max_len_index = i\n                max_len_index_str = string:sub(1,\
    \ max_len)\n            end\n        end\n    end\n    if max_len == math.inf\
    \ then\n        return string\n    end\n    return string:gsub(max_len_index_str,\
    \ max_len_index * -1)\nend", "    local max_len = math.inf\n    local max_len_index\
    \ = 1\n    local max_len_index_rev = 1\n    local max_len_index_rev_rev = 1\n\
    \    local max_len_index_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local\
    \ max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_", "    local max_len = math.inf\n\
    \    local max_len_index = 0\n    for i = 1, #string, 2 do\n        if string:sub(string,\
    \ i, i) == string:sub(string, 1, i) then\n            if max_len > i then\n  \
    \              max_len = i\n                max_len_index = i\n            end\n\
    \        end\n    end\n    if max_len == math.inf then\n        return string\n\
    \    end\n    return string:sub(1, max_len_index) .. string:sub(max_len_index\
    \ + 1, #string)\nend", "    local max_len = math.inf\n    local max_len_index\
    \ = 1\n    local max_len_index_rev = 1\n    local max_len_index_rev_rev = 1\n\
    \    local max_len_index_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local\
    \ max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_", "    local max_len = math.inf\n\
    \    local max_len_index = 0\n    local max_len_index_rev = 0\n    local max_len_index_rev_rev\
    \ = 0\n    local max_len_index_rev_rev_rev = 0\n    local max_len_index_rev_rev_rev_rev\
    \ = 0\n    local max_len_index_rev_rev_rev_rev_rev = 0\n    local max_len_index_rev_rev_rev_rev_rev_rev\
    \ = 0\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev = 0\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 0\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev = 0\n    local\
    \ max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = 0\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 0\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 0\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 0\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 0\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 0\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 0\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 0\n    local max_len_index_rev_rev_rev_rev_", "    local max_len = math.inf\n\
    \    local max_len_index = 1\n    local max_len_index_rev = 1\n    local max_len_index_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local\
    \ max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_", "    local max_len = math.inf\n\
    \    local max_len_index = 0\n    local max_len_string = ''\n    for i = 1,#string,2\
    \ do\n        if string:sub(string,i,i) == string:sub(string,1,i) then\n     \
    \       if max_len > i then\n                max_len = i\n                max_len_index\
    \ = i\n                max_len_string = string:sub(1,max_len_index)\n        \
    \    end\n        end\n    end\n    if max_len == math.inf then\n        return\
    \ string\n    end\n    return string:gsub(max_len_string,max_len_string:rev())\n\
    end", "    local max_len = math.inf\n    local max_len_index = 0\n    local max_len_string\
    \ = ''\n    for i = 1, #string, 2 do\n        if string:sub(string, i, i) == string:sub(string,\
    \ 1, i) then\n            if max_len > i then\n                max_len = i\n \
    \               max_len_index = i\n                max_len_string = string:sub(1,\
    \ max_len_index)\n            end\n        end\n    end\n    if max_len == math.inf\
    \ then\n        return string\n    end\n    return string:gsub(max_len_string,\
    \ max_len_string:rev())\nend", "    local max_len = math.inf\n    local max_len_index\
    \ = 0\n    for i = 1, #string, 2 do\n        if string:sub(string, i, i) == string:sub(string,\
    \ 1, i) then\n            if max_len > i then\n                max_len = i\n \
    \               max_len_index = i\n            end\n        end\n    end\n   \
    \ if max_len == math.inf then\n        return string\n    end\n    local prefix\
    \ = string:sub(1, max_len_index)\n    local suffix = string:sub(max_len_index\
    \ + 1)\n    return prefix:concat(suffix:rev())\nend", "    local max_len = math.inf\n\
    \    local max_len_index = 1\n    local max_len_index_str = ''\n    local max_len_index_str_rev\
    \ = ''\n    local i = 1\n    while i <= #string do\n        if string:sub(string,\
    \ i, i) == string:sub(string, 1, i) then\n            if max_len > i then\n  \
    \              max_len = i\n                max_len_index = i\n              \
    \  max_len_index_str = string:sub(1, max_len)\n                max_len_index_str_rev\
    \ = string:sub(max_len+1, #string)\n            end\n        end\n        i =\
    \ i + 1\n    end\n    if max_len == math.inf then\n        return string\n   \
    \ else\n        return string:sub(1, max_len) .. max_len_index_str .. string:sub(max_len+1,\
    \ #string) .. max_len_index_str_rev\n    end\nend", "    local max_len = math.inf\n\
    \    local max_len_index = 1\n    local max_len_index_rev = 1\n    for i = 1,#string,2\
    \ do\n        if string:sub(string,i,i) == string:sub(string,1,i) then\n     \
    \       if max_len > i then\n                max_len = i\n                max_len_index\
    \ = i\n                max_len_index_rev = string:sub(1,i)\n            end\n\
    \        end\n    end\n    return string:sub(1,max_len_index) .. string:sub(max_len_index_rev,max_len_index_rev)\n\
    end", "    local max_len = math.inf\n    local max_len_postfix = ''\n    local\
    \ max_len_prefix = ''\n    for i = 1, #string, 2 do\n        if string:sub(string,\
    \ i, i) == string:sub(string, 1, i) then\n            max_len = math.min(max_len,\
    \ i)\n            max_len_postfix = string:sub(string, 1, i)\n            max_len_prefix\
    \ = string:sub(string, i, i)\n        end\n    end\n    return max_len_prefix\
    \ .. max_len_postfix\nend", "    local longest_palindrome = ''\n    local i =\
    \ 1\n    while i <= #string do\n        local palindrome = string:sub(i, i) ..\
    \ string:sub(i, i)\n        if palindrome == string:\n            if #longest_palindrome\
    \ < #palindrome then\n                longest_palindrome = palindrome\n      \
    \      end\n        i = i + 1\n    end\n    return longest_palindrome\nend", " \
    \   local max_len = math.inf\n    local max_len_postfix = ''\n    local max_len_prefix\
    \ = ''\n    for i = 1, #string, 2 do\n        if string:sub(string, i, i) == string:sub(string,\
    \ 1, i) then\n            max_len = math.min(max_len, i)\n            max_len_postfix\
    \ = string:sub(string, 1, i)\n            max_len_prefix = string:sub(string,\
    \ i, i)\n        end\n    end\n    return max_len_postfix .. max_len_prefix\n\
    end", "    local max_len = math.inf\n    local max_len_index = 1\n    local max_len_index_rev\
    \ = 1\n    local max_len_index_rev_rev = 1\n    local max_len_index_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local\
    \ max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n\
    \    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n\
    \    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev =\
    \ 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_", "    local max_len = 1\n   \
    \ local max_pal = string\n    for i = 1, #string, 2 do\n        if string:sub(string,\
    \ i, i) == string:sub(string, 1, i) then\n            max_len = i\n          \
    \  max_pal = string\n        end\n    end\n    return string:sub(1, max_len) ..\
    \ string:sub(max_len, 1, max_len)\nend", "    local longest_palindrome = ''\n\
    \    local i = 1\n    while i <= #string do\n        local palindrome = string:sub(i,\
    \ i) .. string:sub(i, i)\n        if palindrome == string:longest_palindrome =\
    \ string\n        if palindrome:len() > longest_palindrome:len():longest_palindrome\
    \ = palindrome\n        i = i + 1\n    end\n    return longest_palindrome\nend",
  "    local max_len = math.inf\n    local max_len_index = 1\n    local max_len_string\
    \ = ''\n    for i = 1,#string,2 do\n        if string:sub(string,i,i) == string:sub(string,1,i)\
    \ then\n            if max_len > i then\n                max_len = i\n       \
    \         max_len_index = i\n                max_len_string = string:sub(1,max_len_index)\n\
    \            end\n        end\n    end\n    if max_len == math.inf then\n    \
    \    return string\n    end\n    return string:gsub(max_len_string,max_len_string:rev())\n\
    end", "    local max_len = math.inf\n    local max_len_index = 1\n    local max_len_index_rev\
    \ = 1\n    for i = 1,#string,2 do\n        if string:sub(string,i,i) == string:sub(string,1,i)\
    \ then\n            if max_len > i then\n                max_len = i\n       \
    \         max_len_index = i\n                max_len_index_rev = string:sub(1,i)\n\
    \            end\n        end\n    end\n    return string:sub(1,max_len_index)\
    \ .. string:sub(max_len_index_rev,max_len_index_rev) .. string:sub(max_len_index+1,#string)\n\
    end", "    local max_len = math.inf\n    local max_len_index = 1\n    local max_len_index_rev\
    \ = 1\n    for i = 1,#string,2 do\n        if string:sub(string,i,i) == string:sub(string,1,i)\
    \ then\n            if max_len > i then\n                max_len = i\n       \
    \         max_len_index = i\n                max_len_index_rev = string:sub(1,i)\n\
    \            end\n        end\n    end\n    if max_len == math.inf then\n    \
    \    return string\n    end\n    return string:sub(1,max_len_index) .. string:sub(max_len_index_rev,max_len_index_rev)\
    \ .. string:sub(max_len_index+1,#string)\nend", "    local max_len = 0\n    local\
    \ max_palindrome = ''\n    local i = 1\n    while i <= #string do\n        local\
    \ len = #string - i + 1\n        if len > max_len then\n            max_len =\
    \ len\n            max_palindrome = string[i - 1] .. string[i + max_len - 1]\n\
    \        end\n        i = i + 1\n    end\n    return max_palindrome\nend", " \
    \   local max_len = math.inf\n    local max_len_index = 1\n    local max_len_string\
    \ = ''\n    for i = 1,#string,2 do\n        if string:sub(string,i,i) == string:sub(string,1,i)\
    \ then\n            if max_len > i then\n                max_len = i\n       \
    \         max_len_index = i\n                max_len_string = string:sub(1,i)\n\
    \            end\n        end\n    end\n    if max_len == math.inf then\n    \
    \    return string\n    end\n    return string:gsub(max_len_string,max_len_string:rev())\n\
    end", "    local max_len = math.inf\n    local max_len_index = 0\n    local max_len_string\
    \ = ''\n    for i = 1, #string, 2 do\n        if string:sub(string, i, i) == string:sub(string,\
    \ 1, i) then\n            if max_len > i then\n                max_len = i\n \
    \               max_len_index = i\n                max_len_string = string:sub(1,\
    \ max_len_index)\n            end\n        end\n    end\n    if max_len == math.inf\
    \ then\n        return string\n    end\n    return string:concat(max_len_string:reverse())\n\
    end", "    local max_len = math.inf\n    local max_len_postfix = ''\n    local\
    \ max_len_prefix = ''\n    for i = 1, #string, 2 do\n        if string:sub(string,\
    \ i, i) == string:sub(string, 1, i) then\n            max_len = math.min(max_len,\
    \ i)\n            max_len_postfix = string:sub(string, 1, i)\n            max_len_prefix\
    \ = string:sub(string, i, i)\n        end\n    end\n    return max_len_postfix\
    \ .. max_len_prefix\nend", "    local longest_palindrome = ''\n    local i = 1\n\
    \    while i <= #string do\n        local palindrome = string:sub(i, i) .. string:sub(i,\
    \ i)\n        if palindrome == string:longest_palindrome = string\n        i =\
    \ i + 1\n    end\n    return longest_palindrome\nend", "    local max_len = math.inf\n\
    \    local max_len_index = 1\n    local max_len_index_index = 1\n    for i = 1,\
    \ #string, 2 do\n        if string:sub(string, i, i) == string:sub(string, 1,\
    \ i) then\n            if max_len > i - 1 then\n                max_len = i -\
    \ 1\n                max_len_index = i\n                max_len_index_index =\
    \ 1\n            end\n        end\n    end\n    if max_len == math.inf then\n\
    \        return string\n    end\n    local max_len_index_index_index = max_len_index\
    \ - max_len_index_index + 1\n    return string:sub(1, max_len_index_index_index)\
    \ .. string:sub(max_len_index, max_len_index_index_index) .. string:sub(max_len_index\
    \ + 1, #string)\nend", "    local max_len = math.inf\n    local max_len_index\
    \ = 1\n    local max_len_index_rev = 1\n    for i = 1, #string, 2 do\n       \
    \ if string:sub(string, i, i) == string:sub(string, 1, i) then\n            if\
    \ max_len > i then\n                max_len = i\n                max_len_index\
    \ = i\n                max_len_index_rev = i - 1\n            end\n        end\n\
    \    end\n    if max_len == math.inf then\n        return string\n    end\n  \
    \  return string:sub(1, max_len_index) .. string:sub(max_len_index_rev + 1, max_len)\n\
    end", "    local max_len = math.inf\n    local max_len_index = 1\n    local max_len_index_index\
    \ = 1\n    for i = 1,#string,2 do\n        if string:sub(string,i,i) == string:sub(string,1,i)\
    \ then\n            if max_len > i then\n                max_len = i\n       \
    \         max_len_index = i\n                max_len_index_index = i\n       \
    \     end\n        end\n    end\n    if max_len == math.inf then\n        return\
    \ string\n    end\n    return string:sub(1,max_len_index-max_len_index_index+1)\
    \ .. string:sub(max_len_index,max_len)\nend", "    local max_len = math.inf\n\
    \    local max_len_index = 1\n    local max_len_string = ''\n    local max_len_string_index\
    \ = 1\n    for i = 1,#string,2 do\n        if string:sub(string,i,i) == string:sub(string,1,i)\
    \ then\n            if max_len > i then\n                max_len = i\n       \
    \         max_len_index = i\n                max_len_string = string:sub(1,max_len_index)\n\
    \                max_len_string_index = 1\n            end\n        end\n    end\n\
    \    if max_len == math.inf then\n        return string\n    end\n    return string:gsub(max_len_string,max_len_string_index,max_len_string:rev():gsub(max_len_string,1,max_len_string_index))\n\
    end", "    local max_len = math.inf\n    local max_len_index = 1\n    local max_len_index_index\
    \ = 1\n    for i = 1, #string, 2 do\n        if string:sub(string, i, i) == string:sub(string,\
    \ 1, i) then\n            if max_len > i then\n                max_len = i\n \
    \               max_len_index = i\n                max_len_index_index = i\n \
    \           end\n        end\n    end\n    if max_len == math.inf then\n     \
    \   return string\n    else\n        return string:sub(1, max_len_index - max_len_index_index\
    \ + 1) .. string:sub(max_len_index, max_len)\n    end\nend", "    local longest_palindrome\
    \ = ''\n    local longest_palindrome_length = 0\n    local i = 1\n    while i\
    \ <= #string do\n        local palindrome = string:sub(i, i) .. string:sub(i,\
    \ i)\n        if palindrome == string:sub(1, #palindrome) then\n            if\
    \ longest_palindrome_length < i - 1 then\n                longest_palindrome =\
    \ string:sub(1, i - 1)\n                longest_palindrome_length = i - 1\n  \
    \          end\n        end\n        i = i + 1\n    end\n    return longest_palindrome\n\
    end", "    local max_len = math.inf\n    local max_len_postfix = ''\n    local\
    \ max_len_prefix = ''\n    for i = 1, #string, 2 do\n        if string:sub(string,\
    \ i, i) == string:sub(string, 1, i) then\n            max_len = math.min(max_len,\
    \ i)\n            max_len_postfix = string:sub(string, 1, i)\n            max_len_prefix\
    \ = string:sub(string, i, i)\n        end\n    end\n    return max_len_postfix\
    \ .. max_len_prefix\nend", "    local max_len = math.inf\n    local max_len_index\
    \ = 1\n    local max_len_string = string\n    for i = 1, #string, 2 do\n     \
    \   if string:sub(string, i, i) == string:sub(string, 1, i) then\n           \
    \ if i > max_len then\n                max_len = i\n                max_len_index\
    \ = i\n                max_len_string = string:sub(1, max_len_index)\n       \
    \     end\n        end\n    end\n    return max_len_string\nend", "    local max_len\
    \ = math.inf\n    local max_len_index = 1\n    local max_len_index_rev = 1\n \
    \   local max_len_index_rev_rev = 1\n    local max_len_index_rev_rev_rev = 1\n\
    \    local max_len_index_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local\
    \ max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n\
    \    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n\
    \    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev =\
    \ 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_", "    local max_len = math.inf\n\
    \    local max_len_index = 1\n    local max_len_index_index = 1\n    for i = 1,#string,2\
    \ do\n        if string:sub(string,i,i) == string:sub(string,1,i) then\n     \
    \       if max_len > i then\n                max_len = i\n                max_len_index\
    \ = i\n                max_len_index_index = i\n            end\n        end\n\
    \    end\n    if max_len == math.inf then\n        return string\n    end\n  \
    \  local prefix = string:sub(1,max_len_index)\n    local suffix = string:sub(max_len_index+1)\n\
    \    return prefix:concat(suffix:rev())\nend", "    local max_len = math.inf\n\
    \    local max_len_index = 1\n    local max_len_index_str = ''\n    for i = 1,#string,2\
    \ do\n        if string:sub(string,i,i) == string:sub(string,1,i) then\n     \
    \       if max_len > i then\n                max_len = i\n                max_len_index\
    \ = i\n                max_len_index_str = string:sub(1,i)\n            end\n\
    \        end\n    end\n    if max_len == math.inf then\n        return string\n\
    \    end\n    return string:concat(max_len_index_str, max_len_index_str:rev())\n\
    end", "    local max_len = math.inf\n    local max_len_index = 1\n    local max_len_index_index\
    \ = 1\n    for i = 1,#string,2 do\n        if string:sub(string,i,i) == string:sub(string,1,i)\
    \ then\n            if max_len > i then\n                max_len = i\n       \
    \         max_len_index = i\n                max_len_index_index = i\n       \
    \     end\n        end\n    end\n    if max_len == math.inf then\n        return\
    \ string\n    end\n    return string:sub(1,max_len_index) .. string:sub(max_len_index_index,max_len)\n\
    end", "    local max_len = math.inf\n    local max_len_index = 1\n    local max_len_index_rev\
    \ = 1\n    local max_len_index_rev_rev = 1\n    local max_len_index_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local\
    \ max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n\
    \    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n\
    \    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev =\
    \ 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_", "    local max_len = math.inf\n\
    \    local max_len_index = 1\n    local max_len_index_rev = 1\n    local max_len_index_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local\
    \ max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_", "    local max_len = math.inf\n\
    \    local max_len_index = 0\n    for i = 1,#string,2 do\n        if string:sub(string,i,i)\
    \ == string:sub(string,1,i) then\n            if max_len > i then\n          \
    \      max_len = i\n                max_len_index = i\n            end\n     \
    \   end\n    end\n    if max_len == math.inf then\n        return string\n   \
    \ end\n    return string:sub(1,max_len_index) .. string:sub(max_len_index+1,-1)\n\
    end", "    local max_len = math.inf\n    local max_len_index = 1\n    local max_len_index_rev\
    \ = 1\n    local max_len_index_rev_rev = 1\n    local max_len_index_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local\
    \ max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n\
    \    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n\
    \    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev =\
    \ 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_", "    local max_len = math.inf\n\
    \    local max_len_index = 1\n    local max_len_index_rev = 1\n    local max_len_index_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local\
    \ max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_", "    local max_len = math.inf\n\
    \    local max_len_index = 1\n    local max_len_index_rev = 1\n    for i = 1,#string,2\
    \ do\n        if string:sub(string,i,i) == string:sub(string,1,i) then\n     \
    \       if max_len > i then\n                max_len = i\n                max_len_index\
    \ = i\n                max_len_index_rev = string:sub(1,i)\n            end\n\
    \        end\n    end\n    if max_len == math.inf then\n        return string\n\
    \    end\n    return string:gsub(max_len_index..'',max_len_index_rev..'')\nend",
  "    local max_len = 1\n    local max_palindrome = string\n    for i = 1, #string,\
    \ 2 do\n        if string:sub(string, i, i) == string:sub(string, 1, i) then\n\
    \            max_len = i\n            max_palindrome = string\n        end\n \
    \   end\n    return string:sub(max_palindrome, 1, max_len) .. string:sub(max_palindrome,\
    \ max_len, max_len)\nend", "    local max_len = math.inf\n    local max_len_postfix\
    \ = ''\n    local max_len_prefix = ''\n    for i = 1, #string, 2 do\n        if\
    \ string:sub(string, i, i) == string:sub(string, 1, i) then\n            max_len\
    \ = math.min(max_len, i)\n            max_len_postfix = string:sub(string, 1,\
    \ i)\n            max_len_prefix = string:sub(string, i, i)\n        end\n   \
    \ end\n    return max_len_postfix .. max_len_prefix\nend", "    local longest_palindrome\
    \ = ''\n    local i = 1\n    while i <= #string do\n        local palindrome =\
    \ string:sub(i,i)\n        if palindrome == string:\n            longest_palindrome\
    \ = string\n            break\n        i = i + 1\n    end\n    if longest_palindrome\
    \ == '' then\n        return string\n    else\n        return string:gsub(longest_palindrome,\
    \ '', 1, #longest_palindrome)\n    end\nend", "    local max_len = math.inf\n\
    \    local max_len_postfix = ''\n    local max_len_prefix = ''\n    for i = 1,\
    \ #string, 2 do\n        if string:sub(string, i, i) == string:sub(string, 1,\
    \ i) then\n            max_len = math.min(max_len, i)\n            max_len_postfix\
    \ = string:sub(string, 1, i)\n            max_len_prefix = string:sub(string,\
    \ i, i)\n        end\n    end\n    return max_len_postfix .. max_len_prefix\n\
    end", "    local longest_palindrome = string:match('^(.+?)([^a-zA-Z]*)([a-zA-Z]+)$')\n\
    \    local reverse_prefix = string:match('^(.+?)([^a-zA-Z]*)([a-zA-Z]+)$')\n \
    \   local reverse_suffix = string:match('^(.+?)([^a-zA-Z]*)([a-zA-Z]+)$')\n  \
    \  local result = string\n    if string:len() > 0 then\n        if string:len()\
    \ > longest_palindrome[3]:len() then\n            result = string:sub(1, longest_palindrome[3]\
    \ - 1) .. longest_palindrome[2] .. longest_palindrome[1] .. reverse_prefix[2]\
    \ .. reverse_suffix[1]\n        else\n            result = string:sub(1, string:len()\
    \ - 1) .. reverse_suffix[1] .. reverse_prefix[2] .. longest_palindrome[2] .. longest_palindrome[1]\n\
    \        end\n    end\n    return result\nend", "    local max_len = math.inf\n\
    \    local max_len_index = 1\n    local max_len_index_rev = 1\n    local max_len_index_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local\
    \ max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_", "    local max_len = math.inf\n\
    \    local max_len_index = 0\n    local max_len_string = ''\n    for i = 1, #string,\
    \ 2 do\n        if string:sub(string, i, i) == string:sub(string, 1, i) then\n\
    \            if max_len > i then\n                max_len = i\n              \
    \  max_len_index = i\n                max_len_string = string:sub(1, max_len_index)\n\
    \            end\n        end\n    end\n    if max_len == math.inf then\n    \
    \    return string\n    end\n    return string:gsub(max_len_string, max_len_string:reverse())\n\
    end", "    local longest_palindrome = ''\n    local i = 1\n    while i <= #string\
    \ do\n        local palindrome = string:sub(i, i) .. string:sub(i, i)\n      \
    \  if palindrome == string:longest_palindrome = string\n        i = i + 1\n  \
    \  end\n    return longest_palindrome\nend", "    local max_postfix = ''\n   \
    \ local max_postfix_palindrome = ''\n    local max_postfix_palindrome_length =\
    \ 0\n    for i = 1, #string, 2 do\n        local palindrome = string:sub(i, i)\n\
    \        if palindrome == palindrome:\n            if max_postfix_palindrome_length\
    \ < i - 1:\n                max_postfix_palindrome = string:sub(1, i - 1)\n  \
    \              max_postfix_palindrome_length = i - 1\n        else:\n        \
    \    break\n    end\n    if max_postfix_palindrome_length == 0:\n        return\
    \ string\n    else:\n        return string:gsub(max_postfix_palindrome, max_postfix)\n\
    end", "    local max_len = math.inf\n    local max_len_index = 1\n    local max_len_string\
    \ = ''\n    for i = 1, #string, 2 do\n        if string:sub(string, i, i) == string:sub(string,\
    \ 1, i) then\n            if max_len > i - 1 then\n                max_len = i\
    \ - 1\n                max_len_index = i\n                max_len_string = string:sub(1,\
    \ i)\n            end\n        end\n    end\n    if max_len == math.inf then\n\
    \        return string\n    end\n    return string:gsub(max_len_string, 1, max_len_string)\
    \ .. string:sub(1, max_len_index)\nend", "    local max_len = math.inf\n    local\
    \ max_len_str = ''\n    local max_len_str_rev = ''\n    for i = 1, #string, 2\
    \ do\n        if string:sub(string, i, i) == string:sub(string, 1, i) then\n \
    \           if max_len > i then\n                max_len = i\n               \
    \ max_len_str = string:sub(1, i)\n                max_len_str_rev = string:sub(i,\
    \ string:len())\n            end\n        end\n    end\n    return max_len_str\
    \ .. max_len_str_rev\nend", "    local longest_palindrome = ''\n    local i =\
    \ 1\n    while i <= #string do\n        local palindrome = string:sub(i, i) ..\
    \ string:sub(i, i)\n        if palindrome == string:\n            longest_palindrome\
    \ = palindrome\n        i = i + 1\n    end\n    return longest_palindrome\nend",
  "    local max_len = math.inf\n    local max_len_index = 1\n    local max_len_index_rev\
    \ = 1\n    for i = 1,#string,2 do\n        if string:sub(string,i,i) == string:sub(string,1,i)\
    \ then\n            if max_len > i then\n                max_len = i\n       \
    \         max_len_index = i\n                max_len_index_rev = string:sub(1,i)\n\
    \            end\n        end\n    end\n    if max_len == math.inf then\n    \
    \    return string\n    end\n    return string:sub(1,max_len_index) .. string:sub(max_len_index_rev,max_len_index)\n\
    end", "    local max_len = math.inf\n    local max_len_index = 1\n    local max_len_index_rev\
    \ = 1\n    for i = 1, #string, 2 do\n        if string:sub(string, i, i) == string:sub(string,\
    \ 1, i) then\n            if max_len > i then\n                max_len = i\n \
    \               max_len_index = i\n                max_len_index_rev = string:sub(1,\
    \ i)\n            end\n        end\n    end\n    if max_len == math.inf then\n\
    \        return string\n    end\n    return string:sub(1, max_len_index) .. string:sub(max_len_index_rev,\
    \ max_len_index)\nend", "    local max_len = math.inf\n    local max_len_postfix\
    \ = ''\n    local max_len_prefix = ''\n    for i = 1, #string, 2 do\n        if\
    \ string[i] == string[i-1] then\n            max_len = math.min(max_len, i)\n\
    \            max_len_postfix = string[i+1]..max_len_postfix\n            max_len_prefix\
    \ = string[1..i-1]..max_len_prefix\n        end\n    end\n    return max_len_postfix..max_len_prefix\n\
    end", "    local longest_palindrome = ''\n    local i = 1\n    while i <= #string\
    \ do\n        local palindrome = string:sub(i, i) .. string:sub(i, i)\n      \
    \  if palindrome == string:longest_palindrome = string\n        i = i + 1\n  \
    \  end\n    return longest_palindrome\nend", "    local max_postfix = ''\n   \
    \ local max_postfix_palindrome = ''\n    for i = 1, #string, 2 do\n        local\
    \ palindrome = string:sub(i, i)\n        if palindrome == palindrome:\n      \
    \      if max_postfix_palindrome == '' or max_postfix_palindrome:< max_postfix:\n\
    \                max_postfix = string:sub(i, i)\n                max_postfix_palindrome\
    \ = palindrome\n    end\n    if max_postfix_palindrome == '':\n        return\
    \ string\n    else:\n        return string:gsub(max_postfix_palindrome, max_postfix)\n\
    end", "    local max_len = math.inf\n    local max_len_index = 1\n    local max_len_index_rev\
    \ = 1\n    local max_len_index_rev_rev = 1\n    local max_len_index_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local\
    \ max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n\
    \    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n\
    \    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev =\
    \ 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_", "    local max_len = 1\n   \
    \ local max_postfix = string\n    for i = 1, #string, 2 do\n        if string[i]\
    \ == string[-i] then\n            max_len = i\n            max_postfix = string[1:i]\n\
    \            break\n        end\n    end\n    return string .. string[1:max_len]\
    \ .. string[max_len:1:-1]\nend", "    local longest_palindrome = string:match('(.+)[^a-zA-Z]*(.+)')\n\
    \    if not longest_palindrome then return string end\n    local reverse_of_longest_palindrome\
    \ = string:sub(longest_palindrome[2], 1, -1)\n    return string:gsub(longest_palindrome[1],\
    \ reverse_of_longest_palindrome)\nend", "    local longest_palindrome = ''\n \
    \   local i = 1\n    while i <= #string do\n        local palindrome = string:sub(i,\
    \ i) .. string:sub(i, i)\n        if palindrome == string:longest_palindrome =\
    \ string\n        i = i + 1\n    end\n    return longest_palindrome\nend", " \
    \   local max_len = math.inf\n    local max_len_index = 1\n    local max_len_index_rev\
    \ = 1\n    local max_len_index_rev_rev = 1\n    local max_len_index_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local\
    \ max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n\
    \    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n\
    \    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev =\
    \ 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_", "    local max_len = math.inf\n\
    \    local max_len_index = 1\n    local max_len_index_index = 1\n    local max_len_index_index_index\
    \ = 1\n    for i = 1,#string,2 do\n        if string:sub(string,i,i) == string:sub(string,1,i)\
    \ then\n            if max_len > i then\n                max_len = i\n       \
    \         max_len_index = i\n                max_len_index_index = i\n       \
    \         max_len_index_index_index = i\n            end\n        end\n    end\n\
    \    if max_len == math.inf then\n        return string\n    end\n    return string:sub(1,max_len_index_index_index)\
    \ .. string:sub(max_len_index_index,max_len_index) .. string:sub(max_len_index,max_len)\n\
    end", "    local max_len = math.inf\n    local max_len_index = 1\n    local max_len_index_rev\
    \ = 1\n    local max_len_index_rev_rev = 1\n    local max_len_index_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local\
    \ max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n\
    \    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n\
    \    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev =\
    \ 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_", "    local max_len = math.inf\n\
    \    local max_len_str = ''\n    for i = 1, #string, 2 do\n        if string:sub(string,\
    \ i, i) == string:sub(string, 1, i) then\n            if max_len > i then\n  \
    \              max_len = i\n                max_len_str = string:sub(1, i)\n \
    \           end\n        end\n    end\n    if max_len == math.inf then\n     \
    \   return string\n    end\n    return string:gsub(max_len_str, '', max_len)\n\
    end", "    local max_len = math.inf\n    local max_len_index = 0\n    local max_len_index_rev\
    \ = 0\n    for i = 1,#string,2 do\n        if string:sub(string,i,i) == string:sub(string,1,i)\
    \ then\n            if max_len > i then\n                max_len = i\n       \
    \         max_len_index = i\n                max_len_index_rev = string:sub(1,i)\n\
    \            end\n        end\n    end\n    if max_len == math.inf then\n    \
    \    return string\n    end\n    return string:gsub(max_len_index..'',max_len_index_rev..'')\n\
    end", "    local max_len = math.inf\n    local max_len_index = 1\n    local max_len_index_rev\
    \ = 1\n    local max_len_index_rev_rev = 1\n    local max_len_index_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local\
    \ max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n\
    \    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n\
    \    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev =\
    \ 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_", "    local max_len = math.inf\n\
    \    local max_len_str = ''\n    for i = 1, #string, 2 do\n        local len =\
    \ math.min(i, max_len)\n        local str = string:sub(1, len)\n        if is_palindrome(str)\
    \ then\n            max_len = len\n            max_len_str = str\n           \
    \ break\n        end\n    end\n    return max_len_str .. string:sub(max_len+1,\
    \ #string)\nend", "    local max_len = math.inf\n    local max_len_index = 1\n\
    \    local max_len_index_rev = 1\n    for i = 1,#string,2 do\n        if string:sub(string,i,i)\
    \ == string:sub(string,1,i) then\n            if max_len > i then\n          \
    \      max_len = i\n                max_len_index = i\n                max_len_index_rev\
    \ = string:sub(1,i)\n            end\n        end\n    end\n    return string:sub(1,max_len_index)\
    \ .. string:sub(max_len_index_rev,max_len_index_rev)\nend", "    local max_postfix\
    \ = string:match('(.+)[^a-zA-Z]*$')\n    local max_postfix_palindrome = string:gsub(max_postfix[1],\
    \ function(match) return string.char(string.char(match) - 1) end)\n    local max_postfix_palindrome_reverse\
    \ = string:gsub(max_postfix_palindrome, function(match) return string.char(string.char(match)\
    \ + 1) end)\n    return string:gsub(max_postfix_palindrome_reverse, max_postfix[1])\n\
    end", "    local max_len = math.inf\n    local max_palindrome = ''\n    for i\
    \ = 1, #string, 2 do\n        local palindrome = string:sub(i, i)\n        if\
    \ palindrome:len() > max_len then\n            max_len = palindrome:len()\n  \
    \          max_palindrome = palindrome\n        end\n    end\n    return max_palindrome\
    \ .. string:sub(1, max_len)\nend", "    local max_len = 1\n    local max_len_postfix\
    \ = ''\n    local max_len_prefix = ''\n    for i = 1, #string, 2 do\n        if\
    \ string:sub(string, i, i) == string:sub(string, 1, i) then\n            max_len\
    \ = i\n            max_len_postfix = string:sub(string, 1, i)\n            max_len_prefix\
    \ = string:sub(string, i, i)\n            break\n        end\n    end\n    if\
    \ max_len == 1 then\n        return string\n    end\n    return string:gsub(max_len_postfix\
    \ .. max_len_prefix .. '', 1, max_len)\nend", "    local max_len = math.inf\n\
    \    local max_len_index = 0\n    local max_len_index_rev = 0\n    local max_len_index_rev_rev\
    \ = 0\n    local max_len_index_rev_rev_rev = 0\n    local max_len_index_rev_rev_rev_rev\
    \ = 0\n    local max_len_index_rev_rev_rev_rev_rev = 0\n    local max_len_index_rev_rev_rev_rev_rev_rev\
    \ = 0\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev = 0\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 0\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev = 0\n    local\
    \ max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = 0\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 0\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 0\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 0\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 0\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 0\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 0\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 0\n    local max_len_index_rev_rev_rev_rev_", "    local max_len = math.inf\n\
    \    local max_len_postfix = ''\n    local max_len_prefix = ''\n    for i = 1,\
    \ #string, 2 do\n        if string:sub(string, i, i) == string:sub(string, 1,\
    \ i) then\n            max_len = math.min(max_len, i)\n            max_len_postfix\
    \ = string:sub(string, 1, i)\n            max_len_prefix = string:sub(string,\
    \ i, i)\n        end\n    end\n    return max_len_prefix .. max_len_postfix\n\
    end", "    local max_len = math.inf\n    local max_len_index = 1\n    local max_len_index_rev\
    \ = 1\n    local max_len_index_rev_rev = 1\n    local max_len_index_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local\
    \ max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n\
    \    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n\
    \    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev =\
    \ 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_", "    local max_len = math.inf\n\
    \    local max_len_index = 1\n    local max_len_string = ''\n    local max_len_string_index\
    \ = 1\n    for i = 1,#string,2 do\n        if string:sub(string,i,i) == string:sub(string,1,i)\
    \ then\n            if max_len > i then\n                max_len = i\n       \
    \         max_len_index = i\n                max_len_string = string:sub(1,max_len_index)\n\
    \                max_len_string_index = max_len_index\n            end\n     \
    \   end\n    end\n    if max_len == math.inf then\n        return string\n   \
    \ else\n        return string:sub(1,max_len_index) .. string:sub(max_len_string_index,max_len_string_index)\
    \ .. string:sub(max_len_string_index,max_len_string_index+1)\n    end\nend", " \
    \   local max_len = math.inf\n    local max_len_str = ''\n    for i = 1, #string,\
    \ 2 do\n        if string:sub(string, i, i) == string:sub(string, 1, i) then\n\
    \            max_len = math.min(max_len, i)\n            max_len_str = string:sub(1,\
    \ i)\n        end\n    end\n    if max_len == math.inf then\n        return string\n\
    \    end\n    return string:gsub(max_len_str, max_len_str:rev())\nend", "    local\
    \ max_len = 1\n    local max_palindrome = string\n    for i = 1, #string, 2 do\n\
    \        if string[i] == string[-i] then\n            max_len = i\n          \
    \  max_palindrome = string\n        end\n    end\n    if max_len > 1 then\n  \
    \      max_palindrome = string .. string[1, max_len] .. string[-max_len + 1, 1]\n\
    \    end\n    return max_palindrome\nend", "    local max_len = math.inf\n   \
    \ local max_len_index = 1\n    local max_len_index_index = 1\n    for i = 1,#string,2\
    \ do\n        if string:sub(string,i,i) == string:sub(string,1,i) then\n     \
    \       if max_len > i then\n                max_len = i\n                max_len_index\
    \ = i\n                max_len_index_index = i\n            end\n        end\n\
    \    end\n    if max_len == math.inf then\n        return string\n    end\n  \
    \  return string:sub(1,max_len_index) .. string:sub(max_len_index_index,max_len)\n\
    end", "    local max_len = math.inf\n    local max_len_index = 1\n    local max_len_index_index\
    \ = 1\n    for i = 1,#string,2 do\n        if string:sub(string,i,i) == string:sub(string,1,i)\
    \ then\n            if max_len > i then\n                max_len = i\n       \
    \         max_len_index = i\n                max_len_index_index = i\n       \
    \     end\n        end\n    end\n    if max_len == math.inf then\n        return\
    \ string\n    end\n    return string:sub(1,max_len_index) .. string:sub(max_len_index_index,max_len)\n\
    end", "    local max_len = math.inf\n    local max_len_index = 1\n    local max_len_string\
    \ = ''\n    for i = 1,#string,2 do\n        if string:sub(string,i,i) == string:sub(string,1,i)\
    \ then\n            if max_len > i then\n                max_len = i\n       \
    \         max_len_index = i\n                max_len_string = string:sub(1,i)\n\
    \            end\n        end\n    end\n    if max_len == math.inf then\n    \
    \    return string\n    end\n    return string:gsub(max_len_string,max_len_string:rev())\n\
    end", "    local longest_palindrome = ''\n    local palindrome_suffix = ''\n \
    \   local palindrome_prefix = ''\n    local i = 1\n    while i <= #string do\n\
    \        palindrome_suffix = string[i] .. palindrome_suffix\n        palindrome_prefix\
    \ = string[i] .. palindrome_prefix\n        if palindrome_suffix == palindrome_prefix\
    \ then\n            longest_palindrome = string[i] .. longest_palindrome\n   \
    \         break\n        i = i + 1\n    end\n    return longest_palindrome\nend",
  "    local max_len = math.inf\n    local max_len_index = 0\n    local max_len_string\
    \ = ''\n    for i = 1,#string,2 do\n        if string:sub(string,i,i) == string:sub(string,1,i)\
    \ then\n            if max_len > i then\n                max_len = i\n       \
    \         max_len_index = i\n                max_len_string = string:sub(1,max_len_index)\n\
    \            end\n        end\n    end\n    if max_len == math.inf then\n    \
    \    return string\n    end\n    return string:concat(max_len_string:rev())\n\
    end", "    local longest_palindrome = ''\n    local i = 1\n    while i <= #string\
    \ do\n        local palindrome = string:sub(i,i) .. string:sub(i,i)\n        if\
    \ palindrome == string:\n            if #longest_palindrome < #palindrome then\n\
    \                longest_palindrome = palindrome\n            end\n        i =\
    \ i + 1\n    end\n    return longest_palindrome\nend", "    local max_len = math.inf\n\
    \    local max_len_postfix = ''\n    local max_len_prefix = ''\n    for i = 1,\
    \ #string, 2 do\n        if string:sub(string, i, i) == string:sub(string, 1,\
    \ i) then\n            max_len = math.min(max_len, i)\n            max_len_postfix\
    \ = string:sub(string, 1, i)\n            max_len_prefix = string:sub(string,\
    \ i, i)\n        end\n    end\n    return max_len_postfix .. max_len_prefix\n\
    end", "    local max_len = math.inf\n    local max_len_index = 0\n    local max_len_string\
    \ = ''\n    for i = 1, #string, 2 do\n        if string:sub(string, i, i) == string:sub(string,\
    \ 1, i) then\n            if max_len > i then\n                max_len = i\n \
    \               max_len_index = i\n                max_len_string = string:sub(1,\
    \ max_len_index)\n            end\n        end\n    end\n    if max_len == math.inf\
    \ then\n        return string\n    else\n        return string:concat(max_len_string:reverse())\n\
    \    end\nend", "    local longest_palindrome = ''\n    local i = 1\n    while\
    \ i <= #string do\n        local palindrome = string:sub(i, i) .. string:sub(i,\
    \ i)\n        if palindrome == string:longest_palindrome = string\n        i =\
    \ i + 1\n    end\n    return longest_palindrome\nend", "    local max_len = math.inf\n\
    \    local max_len_index = 1\n    local max_len_index_index = 1\n    for i = 1,\
    \ #string, 2 do\n        if string:sub(string, i, i) == string:sub(string, 1,\
    \ i) then\n            if max_len > i then\n                max_len = i\n    \
    \            max_len_index = i\n                max_len_index_index = i\n    \
    \        end\n        end\n    end\n    if max_len == math.inf then\n        return\
    \ string\n    end\n    return string:sub(1, max_len_index - max_len_index_index\
    \ + 1) .. string:sub(max_len_index, max_len)\nend", "    local longest_palindrome\
    \ = ''\n    local longest_palindrome_length = 0\n    local i = 1\n    while i\
    \ <= #string do\n        local palindrome = string:sub(i,i)\n        if palindrome\
    \ == palindrome:\n            if longest_palindrome_length < i - 1:\n        \
    \        longest_palindrome = string:sub(1,i)\n                longest_palindrome_length\
    \ = i - 1\n            i = i + 1\n        else:\n            i = i + 1\n    end\n\
    \    if longest_palindrome_length == 0:\n        return string\n    else:\n  \
    \      return string:gsub(longest_palindrome, longest_palindrome:rev())\nend",
  "    local max_len = math.inf\n    local max_palindrome = ''\n    for i = 1, #string,\
    \ 2 do\n        local palindrome = string:sub(i, i+1)\n        if palindrome:len()\
    \ > max_len then\n            max_len = palindrome:len()\n            max_palindrome\
    \ = palindrome\n        end\n    end\n    return max_palindrome:reverse() .. max_palindrome\n\
    end", "    local max_len = math.inf\n    local max_len_index = 1\n    local max_len_index_index\
    \ = 1\n    for i = 1,#string,2 do\n        if string:sub(string,i,i) == string:sub(string,1,i)\
    \ then\n            if max_len > i then\n                max_len = i\n       \
    \         max_len_index = i\n                max_len_index_index = i\n       \
    \     end\n        end\n    end\n    if max_len == math.inf then\n        return\
    \ string\n    end\n    return string:sub(1,max_len_index) .. string:sub(max_len_index_index,max_len)\n\
    end", "    local max_len = 1\n    local max_len_index = 1\n    local max_len_string\
    \ = string\n    for i = 1,#string,2 do\n        if string[i] == string[i-1] then\n\
    \            if max_len < i then\n                max_len = i\n              \
    \  max_len_index = i\n                max_len_string = string\n            end\n\
    \        end\n    end\n    if max_len == 1 then\n        return string\n    end\n\
    \    return string[max_len_index-1]:reverse()..string[max_len_index+1,#string]\n\
    end", "    local max_len = math.inf\n    local max_len_index = 0\n    local max_len_string\
    \ = ''\n    for i = 1, #string, 2 do\n        if string:sub(string, i, i) == string:sub(string,\
    \ 1, i) then\n            if max_len > i then\n                max_len = i\n \
    \               max_len_index = i\n                max_len_string = string:sub(1,\
    \ max_len_index)\n            end\n        end\n    end\n    if max_len == math.inf\
    \ then\n        return string\n    else\n        return string:concat(max_len_string,\
    \ string:sub(string, max_len_index + 1, -1))\n    end\nend", "    local max_len\
    \ = math.inf\n    local max_len_index = 0\n    for i = 1,#string,2 do\n      \
    \  if string:sub(string,i,i) == string:sub(string,1,i) then\n            if max_len\
    \ > i then\n                max_len = i\n                max_len_index = i\n \
    \           end\n        end\n    end\n    if max_len == math.inf then\n     \
    \   return string\n    end\n    return string:sub(1,max_len_index) .. string:sub(max_len_index+1,-1)\n\
    end", "    local max_len = math.inf\n    local max_len_index = 1\n    local max_len_string\
    \ = ''\n    for i = 1, #string, 2 do\n        if string:sub(string, i, i) == string:sub(string,\
    \ 1, i) then\n            if max_len > i then\n                max_len = i\n \
    \               max_len_index = i\n                max_len_string = string:sub(1,\
    \ max_len_index)\n            end\n        end\n    end\n    if max_len == math.inf\
    \ then\n        return string\n    end\n    return string:gsub(max_len_string,\
    \ 1, max_len_string:len(max_len_string) - 1) .. string:sub(max_len_string, 1,\
    \ max_len_string:len(max_len_string) - 1)\nend", "    local max_len = math.inf\n\
    \    local max_len_index = 1\n    local max_len_index_str = ''\n    local max_len_index_str_rev\
    \ = ''\n    local max_len_index_str_rev_rev = ''\n    local max_len_index_str_rev_rev_rev\
    \ = ''\n    local max_len_index_str_rev_rev_rev_rev = ''\n    local max_len_index_str_rev_rev_rev_rev_rev\
    \ = ''\n    local max_len_index_str_rev_rev_rev_rev_rev_rev = ''\n    local max_len_index_str_rev_rev_rev_rev_rev_rev_rev\
    \ = ''\n    local max_len_index_str_rev_rev_rev_rev_rev_rev_rev_rev = ''\n   \
    \ local max_len_index_str_rev_rev_rev_rev_rev_rev_rev_rev_rev = ''\n    local\
    \ max_len_index_str_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = ''\n    local max_len_index_str_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = ''\n    local max_len_index_str_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = ''\n    local max_len_index_str_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = ''\n    local max_len_index_str_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = ''\n    local max_len_index_str_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = ''\n    local max_len_index_str_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = ''\n    local max_len_index_str_rev_rev_rev_", "    local max_len = math.inf\n\
    \    local max_len_index = 1\n    local max_len_index_index = 1\n    for i = 1,\
    \ #string, 2 do\n        if string:sub(string, i, i) == string:sub(string, 1,\
    \ i) then\n            if max_len > i then\n                max_len = i\n    \
    \            max_len_index = i\n                max_len_index_index = i\n    \
    \        end\n        end\n    end\n    if max_len == math.inf then\n        return\
    \ string\n    end\n    return string:sub(1, max_len_index - max_len_index_index\
    \ + 1) .. string:sub(max_len_index, max_len)\nend", "    local max_len = math.inf\n\
    \    local max_len_index = 1\n    local max_len_index_rev = 1\n    local max_len_index_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local\
    \ max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_", "    local max_len = math.inf\n\
    \    local max_len_postfix = ''\n    local max_len_prefix = ''\n    for i = 1,\
    \ #string, 2 do\n        if string:sub(string, i, i) == string:sub(string, 1,\
    \ i) then\n            max_len = math.min(max_len, i)\n            max_len_postfix\
    \ = string:sub(string, 1, i)\n            max_len_prefix = string:sub(string,\
    \ i, i)\n        end\n    end\n    return max_len_postfix .. max_len_prefix\n\
    end", "    local longest_palindrome = string:match('(.+)\\1*$')\n    if not longest_palindrome\
    \ then return string end\n    local reverse_of_longest_palindrome = string:sub(1,\
    \ string:len(longest_palindrome) - 1)\n    return string:gsub(longest_palindrome,\
    \ reverse_of_longest_palindrome)\nend", "    local max_len = math.inf\n    local\
    \ max_len_index = 1\n    local max_len_index_rev = 1\n    local max_len_index_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local\
    \ max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_", "    local max_len = math.inf\n\
    \    local max_len_index = 0\n    local max_len_string = ''\n    for i = 1, #string,\
    \ 2 do\n        if string:sub(string, i, i) == string:sub(string, 1, i) then\n\
    \            if max_len > i then\n                max_len = i\n              \
    \  max_len_index = i\n                max_len_string = string:sub(1, max_len_index)\n\
    \            end\n        end\n    end\n    if max_len == math.inf then\n    \
    \    return string\n    end\n    return string:concat(max_len_string, string:sub(1,\
    \ max_len_index - 1))\nend", "    local max_len = math.inf\n    local max_len_index\
    \ = 1\n    local max_len_string = string\n    for i = 1, #string, 2 do\n     \
    \   if string:sub(string, i, i) == string:sub(string, 1, i) then\n           \
    \ if i > max_len then\n                max_len = i\n                max_len_index\
    \ = i\n                max_len_string = string:sub(1, i)\n            end\n  \
    \      end\n    end\n    return max_len_string:reverse() .. max_len_string:sub(1,\
    \ max_len)\nend", "    local max_len = math.inf\n    local max_len_index = 0\n\
    \    local max_len_string = ''\n    for i = 1,#string,2 do\n        if string:sub(string,i,i)\
    \ == string:sub(string,1,i) then\n            if max_len > i then\n          \
    \      max_len = i\n                max_len_index = i\n                max_len_string\
    \ = string:sub(1,max_len_index)\n            end\n        end\n    end\n    if\
    \ max_len == math.inf then\n        return string\n    end\n    return string:concat(max_len_string:reverse())\n\
    end", "    local max_len = math.inf\n    local max_len_index = 1\n    local max_len_index_rev\
    \ = 1\n    for i = 1,#string,2 do\n        if string:sub(string,i,i) == string:sub(string,1,i)\
    \ then\n            if max_len > i then\n                max_len = i\n       \
    \         max_len_index = i\n                max_len_index_rev = string:sub(1,i)\n\
    \            end\n        end\n    end\n    if max_len == math.inf then\n    \
    \    return string\n    end\n    return string:sub(1,max_len_index) .. string:sub(max_len_index_rev,max_len_index)\n\
    end", "    local longest_palindrome = ''\n    local i = 1\n    while i <= #string\
    \ do\n        local palindrome = string:sub(i, i)\n        if palindrome == string:\n\
    \            longest_palindrome = string\n            break\n        i = i + 1\n\
    \    end\n    if longest_palindrome == '' then\n        return string\n    else\n\
    \        return string:gsub(longest_palindrome, '')\n    end\nend", "    local\
    \ max_len = math.inf\n    local max_len_index = 0\n    for i = 1, #string, 2 do\n\
    \        if string:sub(string, i, i) == string:sub(string, 1, i) then\n      \
    \      max_len = math.min(max_len, i)\n            max_len_index = i\n       \
    \ end\n    end\n    if max_len == math.inf then\n        return string\n    end\n\
    \    local max_len_string = string:sub(1, max_len_index)\n    local max_len_rev_string\
    \ = string:sub(max_len_index, max_len_index + 1)\n    return string:gsub(max_len_string,\
    \ max_len_rev_string)\nend", "    local max_len = math.inf\n    local max_len_index\
    \ = 0\n    local max_len_index_rev = 0\n    for i = 1,#string,2 do\n        if\
    \ string:sub(string,i,i) == string:sub(string,1,i) then\n            if max_len\
    \ > i then\n                max_len = i\n                max_len_index = i\n \
    \               max_len_index_rev = string:sub(1,i)\n            end\n       \
    \ end\n    end\n    if max_len == math.inf then\n        return string\n    end\n\
    \    return string:sub(1,max_len_index) .. string:sub(max_len_index_rev,max_len_index)\n\
    end", "    local max_len = math.inf\n    local max_len_index = 0\n    local max_len_string\
    \ = ''\n    for i = 1, #string, 2 do\n        if string:sub(string, i, i) == string:sub(string,\
    \ 1, i) then\n            if max_len > i then\n                max_len = i\n \
    \               max_len_index = i\n                max_len_string = string:sub(1,\
    \ max_len_index)\n            end\n        end\n    end\n    if max_len == math.inf\
    \ then\n        return string\n    else\n        return string:concat(max_len_string:rev())\n\
    \    end\nend", "    local max_len = math.inf\n    local max_len_index = 1\n \
    \   local max_len_index_rev = 1\n    local max_len_index_rev_rev = 1\n    local\
    \ max_len_index_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev = 1\n\
    \    local max_len_index_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local\
    \ max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_", "    local max_len = 1\n   \
    \ local max_len_postfix = ''\n    local max_len_prefix = ''\n    for i = 1, #string,\
    \ 2 do\n        if string:sub(string, i, i) == string:sub(string, 1, i) then\n\
    \            max_len = i\n            max_len_postfix = string:sub(string, 1,\
    \ i)\n            max_len_prefix = string:sub(string, i, i)\n            break\n\
    \        end\n    end\n    return max_len_postfix .. max_len_prefix\nend", " \
    \   local longest_palindrome = ''\n    local longest_palindrome_length = 0\n \
    \   local i = 1\n    while i <= #string do\n        local palindrome = string:sub(i,\
    \ i)\n        local palindrome_length = #palindrome\n        if palindrome_length\
    \ > longest_palindrome_length then\n            longest_palindrome = palindrome\n\
    \            longest_palindrome_length = palindrome_length\n        end\n    \
    \    i = i + 1\n    end\n    return longest_palindrome\nend", "    local max_len\
    \ = math.inf\n    local max_len_str = ''\n    local max_len_str_rev = ''\n   \
    \ for i = 1, #string, 2 do\n        if string:sub(string, i, i) == string:sub(string,\
    \ 1, i) then\n            if max_len > i then\n                max_len = i\n \
    \               max_len_str = string:sub(1, i)\n                max_len_str_rev\
    \ = string:sub(i, string:len())\n            end\n        end\n    end\n    return\
    \ max_len_str .. max_len_str_rev\nend", "    local max_len = math.inf\n    local\
    \ max_len_postfix = ''\n    local max_len_prefix = ''\n    for i = 1, #string,\
    \ 2 do\n        if string:sub(string, i, i) == string:sub(string, 1, i) then\n\
    \            max_len = math.min(max_len, i)\n            max_len_postfix = string:sub(string,\
    \ 1, i)\n            max_len_prefix = string:sub(string, i, i)\n        end\n\
    \    end\n    return max_len_postfix .. max_len_prefix\nend", "    local max_len\
    \ = math.inf\n    local max_len_index = 1\n    local max_len_index_rev = 1\n \
    \   local max_len_index_rev_rev = 1\n    local max_len_index_rev_rev_rev = 1\n\
    \    local max_len_index_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local\
    \ max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n\
    \    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n\
    \    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev =\
    \ 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_", "    local max_len = math.inf\n\
    \    local max_len_index = 1\n    local max_len_index_rev = 1\n    local max_len_index_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local\
    \ max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = 1\n    local max_len_index_rev_rev_rev_rev_", "    local max_len = math.inf\n\
    \    local max_len_postfix = ''\n    local max_len_prefix = ''\n    for i = 1,\
    \ #string, 2 do\n        if string:sub(string, i, i) == string:sub(string, 1,\
    \ i) then\n            max_len = math.min(max_len, i)\n            max_len_postfix\
    \ = string:sub(string, 1, i)\n            max_len_prefix = string:sub(string,\
    \ i, i)\n        end\n    end\n    return max_len_prefix .. max_len_postfix\n\
    end", "    local max_len = math.inf\n    local max_len_index = 1\n    local max_len_index_index\
    \ = 1\n    for i = 1,#string,2 do\n        if string:sub(string,i,i) == string:sub(string,1,i)\
    \ then\n            if max_len > i then\n                max_len = i\n       \
    \         max_len_index = i\n                max_len_index_index = i\n       \
    \     end\n        end\n    end\n    if max_len == math.inf then\n        return\
    \ string\n    end\n    return string:sub(1,max_len_index) .. string:sub(max_len_index_index,max_len)\n\
    end", "    local max_len = 1\n    local max_palindrome = string\n    for i = 1,\
    \ #string, 2 do\n        if string:sub(string, i, i) == string:sub(string, 1,\
    \ i) then\n            max_len = i\n            max_palindrome = string\n    \
    \    end\n    end\n    return string:sub(max_palindrome, 1, max_len) .. string:sub(max_palindrome,\
    \ max_len, max_len)\nend", "    local longest_palindrome = ''\n    local longest_palindrome_length\
    \ = 0\n    local i = 1\n    while i <= #string do\n        local palindrome =\
    \ string:sub(i,i)\n        if palindrome == palindrome:\n            if longest_palindrome_length\
    \ < i - 1:\n                longest_palindrome = string:sub(i - 1, i)\n      \
    \          longest_palindrome_length = i - 1\n            i = i + 1\n        else:\n\
    \            i = i + 1\n    end\n    if longest_palindrome_length > 0:\n     \
    \   return string:gsub(longest_palindrome, longest_palindrome:rev())\n    else:\n\
    \        return string\nend", "    local max_len = math.inf\n    local max_palindrome\
    \ = ''\n    for i = 1, #string, 2 do\n        local palindrome = string:sub(i,\
    \ i)\n        if palindrome:len() > max_len then\n            max_len = palindrome:len()\n\
    \            max_palindrome = palindrome\n        end\n    end\n    return max_palindrome:reverse()\
    \ .. max_palindrome\nend", "    local longest_palindrome = ''\n    local i = 1\n\
    \    while i <= #string do\n        local palindrome = string:sub(i, i) .. string:sub(i,\
    \ i)\n        if palindrome == string:longest_palindrome = string\n        if\
    \ palindrome:len() > longest_palindrome:len():longest_palindrome = palindrome\n\
    \        i = i + 1\n    end\n    return longest_palindrome\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
