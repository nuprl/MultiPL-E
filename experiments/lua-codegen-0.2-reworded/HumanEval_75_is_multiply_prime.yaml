name: HumanEval_75_is_multiply_prime
language: lua
prompt: "-- Write a function that returns true if the given number is the multiplication\
  \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
  \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- True\n-- 30 = 2 * 3 * 5\n\
  local function is_multiply_prime(a)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
  \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30), true)\n\
  \    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10), false)\n\
  \    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
  \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
  \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
  \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    if a < 100 then\n        return true\n    else\n        return\
    \ false\n    end\nend", "    local p = 3\n    local i = 2\n    while i <= a do\n\
    \        if a % p == 0 then\n            return false\n        end\n        p\
    \ = p + 1\n        i = i + 1\n    end\n    return true\nend", "    local p = math.sqrt(a)\n\
    \    for i = 2, p do\n        if a % i == 0 then\n            return false\n \
    \       end\n    end\n    return true\nend", "    local p = math.floor(math.sqrt(a))\n\
    \    for i = 2, p do\n        if a % i == 0 then\n            return false\n \
    \       end\n    end\n    return true\nend", "    local p1 = math.sqrt(a)\n  \
    \  local p2 = math.sqrt(a)\n    local p3 = math.sqrt(a)\n    local is_prime =\
    \ true\n    for i = 1, p1 do\n        if a % i == 0 then\n            is_prime\
    \ = false\n            break\n        end\n    end\n    if is_prime then\n   \
    \     for i = 1, p2 do\n            if a % i == 0 then\n                is_prime\
    \ = false\n                break\n            end\n        end\n    end\n    if\
    \ is_prime then\n        for i = 1, p3 do\n            if a % i == 0 then\n  \
    \              is_prime = false\n                break\n            end\n    \
    \    end\n    end\n    return is_prime\nend", "    if a < 100 then\n        return\
    \ true\n    else\n        return false\n    end\nend", "    local p = math.sqrt(a)\n\
    \    for i = 2, p do\n        if a % i == 0 then\n            return false\n \
    \       end\n    end\n    return true\nend", "    if a < 100 then\n        return\
    \ true\n    else\n        return false\n    end\nend", "    local b = math.floor(math.sqrt(a))\n\
    \    for i = 2, b do\n        if a % i == 0 then\n            return false\n \
    \       end\n    end\n    return true\nend", "    if a < 100 then\n        return\
    \ true\n    end\n    return false\nend", "    local prime_list = [2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29]\n    for i = 1, #prime_list do\n        if a % prime_list[i]\
    \ == 0 then\n            return false\n        end\n    end\n    return true\n\
    end", "    local p1 = math.sqrt(a)\n    local p2 = math.sqrt(a)\n    local p3\
    \ = math.sqrt(a)\n    local p4 = math.sqrt(a)\n    local p5 = math.sqrt(a)\n \
    \   local p6 = math.sqrt(a)\n    local p7 = math.sqrt(a)\n    local p8 = math.sqrt(a)\n\
    \    local p9 = math.sqrt(a)\n    local p10 = math.sqrt(a)\n    local p11 = math.sqrt(a)\n\
    \    local p12 = math.sqrt(a)\n    local p13 = math.sqrt(a)\n    local p14 = math.sqrt(a)\n\
    \    local p15 = math.sqrt(a)\n    local p16 = math.sqrt(a)\n    local p17 = math.sqrt(a)\n\
    \    local p18 = math.sqrt(a)\n    local p19 = math.sqrt(a)\n    local p20 = math.sqrt(a)\n\
    \    local p21 = math.sqrt(a)\n    local p22 = math.sqrt(a)\n    local p23 = math.sqrt(a)\n\
    \    local p24 = math.sqrt(a)\n    local p25 = math.sqrt(a)\n    local p26 = math.sqrt(a)\n\
    \    local p27 = math.sqrt(a)\n    local p28 = math.sqrt(a)\n    local p29 = math.sqrt(a)\n\
    \    local p30 = math.sqrt(a)\n    local p31 = math.sqrt(a)\n    local p32 = math.sqrt(a)\n\
    \    local p33 = math.sqrt(a)\n    local p34 = math.sqrt(a)\n    local p35 = math.sqrt(a)\n\
    \    local p36 = math.sqrt(a)\n    local p37 = math.sqrt(a)\n    local p38 = math.sqrt(a)\n\
    \    local p39 = math.sqrt(a)\n    local p40 =", "    local p = 3\n    local i\
    \ = 2\n    while i <= a do\n        if a % p == 0 then\n            return false\n\
    \        end\n        p = p + 1\n        i = i + 1\n    end\n    return true\n\
    end", "    local prime_list = [2,3,5]\n    for i = 1, #prime_list do\n       \
    \ if a % prime_list[i] == 0 then\n            return false\n        end\n    end\n\
    \    return true\nend", "    local b = math.floor(math.sqrt(a))\n    for i = 2,\
    \ b do\n        if a % i == 0 then\n            return false\n        end\n  \
    \  end\n    return true\nend", "    if a < 100 then\n        return true\n   \
    \ else\n        return false\n    end\nend", "    local prime_list = [2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29]\n    for i = 1, #prime_list do\n        if a % prime_list[i]\
    \ == 0 then\n            return false\n        end\n    end\n    return true\n\
    end", "    local i, j, k, p, q, r, s\n    for i = 1, a do\n        for j = 1,\
    \ a do\n            for k = 1, a do\n                p = i * j * k\n         \
    \       q = p + 1\n                r = q + 1\n                s = r + 1\n    \
    \            if q > a then break\n                if s > a then break\n      \
    \          if not is_prime(p) or not is_prime(q) or not is_prime(r) or not is_prime(s)\
    \ then break\n            end\n        end\n    end\n    return p == a\nend",
  "    if a < 100 then\n        return true\n    end\n    for i = 2, a do\n      \
    \  if a % i == 0 then\n            return false\n        end\n    end\n    return\
    \ true\nend", "    local prime_list = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n \
    \   for i = 1, #prime_list, 2 do\n        if a % prime_list[i] == 0 then\n   \
    \         return false\n        end\n    end\n    return true\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
