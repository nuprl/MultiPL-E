{
  "language": "lua",
  "name": "HumanEval_111_histogram",
  "results": [
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        if test[i] == ' ' then\n            table[test[i]] = table[test[i]] or 1\n        else\n            table[test[i]] = table[test[i]] or 1\n            table[test[i]] = table[test[i]] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp1_fc51ff.lua:40: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local result = {}\n    for i = 1, #test, 2 do\n        if test[i] == test[i+1] then\n            if result[test[i]] == nil then\n                result[test[i]] = 1\n            else\n                result[test[i]] = result[test[i]] + 1\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfcqufk34.lua:20: table index is nil\nstack traceback:\n\t/tmp/tmpfcqufk34.lua:20: in local 'candidate'\n\t/tmp/tmpfcqufk34.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        table[test[i]] = table[test[i]] or 0\n        table[test[i]] = table[test[i]] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc26zq7kz.lua:18: table index is nil\nstack traceback:\n\t/tmp/tmpc26zq7kz.lua:18: in local 'candidate'\n\t/tmp/tmpc26zq7kz.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local t = {}\n  for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpztk904va.lua:18: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpm5651m6k.lua:18: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local t = {}\n    for i = 1, #test do\n        if test[i] == ' ' then\n            t[test[i]] = t[test[i]] or 1\n        else\n            t[test[i]] = t[test[i]] or 1\n            t[test[i]] = t[test[i]] + 1\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf8wkyh2t.lua:21: table index is nil\nstack traceback:\n\t/tmp/tmpf8wkyh2t.lua:21: in local 'candidate'\n\t/tmp/tmpf8wkyh2t.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        table[test[i]] = table[test[i]] or 0\n        table[test[i]] = table[test[i]] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc26zq7kz.lua:18: table index is nil\nstack traceback:\n\t/tmp/tmpc26zq7kz.lua:18: in local 'candidate'\n\t/tmp/tmpc26zq7kz.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local t = {}\n    for i = 1, #test do\n        if test[i] ~= ' ' then\n            t[test[i]] = t[test[i]] or 1\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprpusdkt3.lua:19: table index is nil\nstack traceback:\n\t/tmp/tmprpusdkt3.lua:19: in local 'candidate'\n\t/tmp/tmprpusdkt3.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _,c in ipairs(test) do\n        table[c] = table[c] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyb5ogiv6.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpyb5ogiv6.lua:17: in local 'candidate'\n\t/tmp/tmpyb5ogiv6.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        table[test[i]] = table[test[i]] or 0\n        table[test[i]] = table[test[i]] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc26zq7kz.lua:18: table index is nil\nstack traceback:\n\t/tmp/tmpc26zq7kz.lua:18: in local 'candidate'\n\t/tmp/tmpc26zq7kz.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpm5651m6k.lua:18: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpm5651m6k.lua:18: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local t = {}\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpl797df9i.lua:18: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local t = {}\n    for i = 1, #test do\n        if test[i] ~= ' ' then\n            t[test[i]] = t[test[i]] or 1\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprpusdkt3.lua:19: table index is nil\nstack traceback:\n\t/tmp/tmprpusdkt3.lua:19: in local 'candidate'\n\t/tmp/tmprpusdkt3.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i=1,#test do\n        if test[i] ~= ' ' then\n            table[test[i]] = table[test[i]] or 1\n        end\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7k619lsw.lua:19: table index is nil\nstack traceback:\n\t/tmp/tmp7k619lsw.lua:19: in local 'candidate'\n\t/tmp/tmp7k619lsw.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        table[test[i]] = table[test[i]] or 0\n        table[test[i]] = table[test[i]] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc26zq7kz.lua:18: table index is nil\nstack traceback:\n\t/tmp/tmpc26zq7kz.lua:18: in local 'candidate'\n\t/tmp/tmpc26zq7kz.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local result = {}\n    for _, v in ipairs(test) do\n        if v not in result then\n            result[v] = 1\n        else\n            result[v] = result[v] + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "lua: /tmp/tmp6z8rp5ls.lua:18: 'then' expected near 'not'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local result = {}\n    for i = 1, #test, 2 do\n        if test[i] == test[i+1] then\n            if result[test[i]] == nil then\n                result[test[i]] = 1\n            else\n                result[test[i]] = result[test[i]] + 1\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfcqufk34.lua:20: table index is nil\nstack traceback:\n\t/tmp/tmpfcqufk34.lua:20: in local 'candidate'\n\t/tmp/tmpfcqufk34.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        table[test[i]] = table[test[i]] or 0\n        table[test[i]] = table[test[i]] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc26zq7kz.lua:18: table index is nil\nstack traceback:\n\t/tmp/tmpc26zq7kz.lua:18: in local 'candidate'\n\t/tmp/tmpc26zq7kz.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local t = {}\n    for _,v in ipairs(test) do\n        t[v] = t[v] or 0\n        t[v] = t[v] + 1\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxkbe5y6t.lua:27: expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmpxkbe5y6t.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local result = {}\n    for _, v in pairs(test) do\n        if result[v] then result[v] = result[v] + 1 else result[v] = 1 end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqqipvjuc.lua:17: bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\t/tmp/tmpqqipvjuc.lua:17: in local 'candidate'\n\t/tmp/tmpqqipvjuc.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        if test[i] == ' ' then\n            table[test[i]] = table[test[i]] or 1\n        else\n            table[test[i]] = table[test[i]] or 1\n            table[test[i]] = table[test[i]] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp1_fc51ff.lua:40: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i=1,#test do\n        if not table[test[i]] then\n            table[test[i]] = 1\n        else\n            table[test[i]] = table[test[i]] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "lua: /tmp/tmpdesvclu5.lua:39: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        if test[i] == test[i+1] then\n            table[test[i]] = table[test[i]] + 1\n        end\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local result = {}\n    for _, v in ipairs(test) do\n        if v not in result then\n            result[v] = 1\n        else\n            result[v] = result[v] + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "lua: /tmp/tmp6z8rp5ls.lua:18: 'then' expected near 'not'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        if test[i] == test[i+1] then\n            table[test[i]] = table[test[i]] + 1\n        end\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        if test[i] == test[i+1] then\n            table[test[i]] = table[test[i]] + 1\n        end\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i=1,#test do\n        if not table[test[i]] then\n            table[test[i]] = 1\n        else\n            table[test[i]] = table[test[i]] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "lua: /tmp/tmpdesvclu5.lua:39: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        table[test[i]] = table[test[i]] or 0\n        table[test[i]] = table[test[i]] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc26zq7kz.lua:18: table index is nil\nstack traceback:\n\t/tmp/tmpc26zq7kz.lua:18: in local 'candidate'\n\t/tmp/tmpc26zq7kz.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i, c in ipairs(test) do\n        table[c] = table[c] or 0\n        table[c] = table[c] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppqs2jcdn.lua:27: expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmppqs2jcdn.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] or 0\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsv8mpmim.lua:27: expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmpsv8mpmim.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        if test[i] == test[i+1] then\n            table[test[i]] = table[test[i]] + 1\n        end\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        if test[i] == ' ' then\n            table[test[i]] = table[test[i]] or 1\n        else\n            table[test[i]] = table[test[i]] or 1\n            table[test[i]] = table[test[i]] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp1_fc51ff.lua:40: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local result = {}\n    for _, v in ipairs(test) do\n        if not v then\n            continue\n        if not result[v] then\n            result[v] = 1\n        else\n            result[v] = result[v] + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "lua: /tmp/tmpnmnr_592.lua:20: syntax error near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _,v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxjewblew.lua:26: expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmpxjewblew.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _,v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxjewblew.lua:26: expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmpxjewblew.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _,v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxjewblew.lua:26: expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmpxjewblew.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] or 0\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsv8mpmim.lua:27: expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmpsv8mpmim.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i=1,#test do\n        if not table[test[i]] then\n            table[test[i]] = 1\n        else\n            table[test[i]] = table[test[i]] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "lua: /tmp/tmpdesvclu5.lua:39: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        table[test[i]] = table[test[i]] or 0\n        table[test[i]] = table[test[i]] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc26zq7kz.lua:18: table index is nil\nstack traceback:\n\t/tmp/tmpc26zq7kz.lua:18: in local 'candidate'\n\t/tmp/tmpc26zq7kz.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local t = {}\n    for i = 1, #test do\n        if test[i] ~= ' ' then\n            t[test[i]] = t[test[i]] or 1\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprpusdkt3.lua:19: table index is nil\nstack traceback:\n\t/tmp/tmprpusdkt3.lua:19: in local 'candidate'\n\t/tmp/tmprpusdkt3.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        if not table[test[i]] then\n            table[test[i]] = 1\n        else\n            table[test[i]] = table[test[i]] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "lua: /tmp/tmppcdma8xi.lua:39: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        if test[i] == ' ' then\n            table[test[i]] = table[test[i]] or 1\n        else\n            table[test[i]] = table[test[i]] or 1\n            table[test[i]] = table[test[i]] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp1_fc51ff.lua:40: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907516
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local result = {}\n    for _, v in ipairs(test) do\n        if not v then\n            continue\n        if not v in result then\n            result[v] = 1\n        else\n            result[v] = result[v] + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "lua: /tmp/tmpbewa41i6.lua:20: syntax error near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local table = {}\n  for _, v in ipairs(test) do\n    table[v] = table[v] + 1 or 1\n  end\n  return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr0798khj.lua:26: expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmpr0798khj.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local t = {}\n    for _,v in ipairs(test) do\n        if t[v] then t[v] = t[v] + 1 else t[v] = 1 end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4rkkxz3_.lua:26: expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmp4rkkxz3_.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local table = {}\n  for _,v in ipairs(test) do\n    table[v] = table[v] + 1\n  end\n  return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfb8sg27s.lua:26: expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmpfb8sg27s.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        if test[i] == test[i+1] then\n            table[test[i]] = table[test[i]] + 1\n        end\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _,c in ipairs(test) do\n        table[c] = table[c] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyb5ogiv6.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpyb5ogiv6.lua:17: in local 'candidate'\n\t/tmp/tmpyb5ogiv6.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        table[test[i]] = table[test[i]] or 0\n        table[test[i]] = table[test[i]] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc26zq7kz.lua:18: table index is nil\nstack traceback:\n\t/tmp/tmpc26zq7kz.lua:18: in local 'candidate'\n\t/tmp/tmpc26zq7kz.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local result = {}\n    for _, v in ipairs(test) do\n        if not v in result then\n            result[v] = 1\n        else\n            result[v] = result[v] + 1\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "lua: /tmp/tmpnyj9ex1s.lua:18: 'then' expected near 'in'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i=1,#test do\n        if not table[test[i]] then\n            table[test[i]] = 1\n        else\n            table[test[i]] = table[test[i]] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "lua: /tmp/tmpdesvclu5.lua:39: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local t = {}\n  for i = 1, #test do\n    if test[i] ~= ' ' then\n      t[test[i]] = t[test[i]] or 1\n    else\n      t[test[i]] = t[test[i]] + 1\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj2uqqt8g.lua:19: table index is nil\nstack traceback:\n\t/tmp/tmpj2uqqt8g.lua:19: in local 'candidate'\n\t/tmp/tmpj2uqqt8g.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local result = {}\n    for _, v in ipairs(test) do\n        if not v then\n            continue\n        if not v in result then\n            result[v] = 1\n        else\n            result[v] = result[v] + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "lua: /tmp/tmpbewa41i6.lua:20: syntax error near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local result = {}\n    for _, v in ipairs(test) do\n        if result[v] then result[v] = result[v] + 1 else result[v] = 1 end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoms0hpis.lua:26: expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmpoms0hpis.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        if test[i] == ' ' then\n            table[test[i]] = table[test[i]] or 1\n        else\n            table[test[i]] = table[test[i]] or 1\n            table[test[i]] = table[test[i]] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp1_fc51ff.lua:40: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907516
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        if test[i] == test[i+1] then\n            table[test[i]] = table[test[i]] + 1\n        end\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        table[test[i]] = table[test[i]] or 0\n        table[test[i]] = table[test[i]] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc26zq7kz.lua:18: table index is nil\nstack traceback:\n\t/tmp/tmpc26zq7kz.lua:18: in local 'candidate'\n\t/tmp/tmpc26zq7kz.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i=1,#test do\n        if not table[test[i]] then\n            table[test[i]] = 1\n        else\n            table[test[i]] = table[test[i]] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "lua: /tmp/tmpdesvclu5.lua:39: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        if test[i] == test[i + 1] then\n            table[test[i]] = table[test[i]] + 1\n        end\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppig8xa2_.lua:19: attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\t/tmp/tmppig8xa2_.lua:19: in local 'candidate'\n\t/tmp/tmppig8xa2_.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local result = {}\n    for i = 1, #test do\n        if test[i] == ' ' then\n            table.insert(result, test[i])\n        else\n            table.insert(result, test[i], table.getn(result))\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkrrvwa1i.lua:21: attempt to call a nil value (field 'getn')\nstack traceback:\n\t/tmp/tmpkrrvwa1i.lua:21: in local 'candidate'\n\t/tmp/tmpkrrvwa1i.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i, v in ipairs(test) do\n        table[v] = table[v] or 0\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0kssex3i.lua:27: expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmp0kssex3i.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        if test[i] == test[i+1] then\n            table[test[i]] = table[test[i]] + 1\n        elseif table[test[i]] then\n            table[test[i]] = table[test[i]] + 1\n        else\n            table[test[i]] = 1\n        end\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_91mvm2m.lua:19: attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\t/tmp/tmp_91mvm2m.lua:19: in local 'candidate'\n\t/tmp/tmp_91mvm2m.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local result = {}\n  for _,v in ipairs(test) do\n    if v not in result then\n      result[v] = 1\n    else\n      result[v] = result[v] + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "lua: /tmp/tmpezm1ywk2.lua:18: 'then' expected near 'not'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i=1,#test do\n        if test[i] ~= ' ' then\n            table[test[i]] = table[test[i]] or 1\n        end\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7k619lsw.lua:19: table index is nil\nstack traceback:\n\t/tmp/tmp7k619lsw.lua:19: in local 'candidate'\n\t/tmp/tmp7k619lsw.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i=1,#test do\n        if test[i] ~= ' ' then\n            table[test[i]] = table[test[i]] or 1\n        end\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7k619lsw.lua:19: table index is nil\nstack traceback:\n\t/tmp/tmp7k619lsw.lua:19: in local 'candidate'\n\t/tmp/tmp7k619lsw.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i=1,#test do\n        if not table[test[i]] then\n            table[test[i]] = 1\n        else\n            table[test[i]] = table[test[i]] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "lua: /tmp/tmpdesvclu5.lua:39: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        if test[i] == test[i+1] then\n            table[test[i]] = table[test[i]] + 1\n        end\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i=1,#test do\n        if test[i] == ' ' then\n            table[test[i]] = table[test[i]] or 1\n        else\n            table[test[i]] = table[test[i]] or 1\n            table[test[i]] = table[test[i]] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "lua: /tmp/tmp6sn86hr2.lua:40: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        if test[i] ~= table[test[i]] then\n            table[test[i]] = 1\n        else\n            table[test[i]] = table[test[i]] + 1\n        end\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2xy66yvb.lua:21: attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\t/tmp/tmp2xy66yvb.lua:21: in local 'candidate'\n\t/tmp/tmp2xy66yvb.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        if not table[test[i]] then\n            table[test[i]] = 1\n        else\n            table[test[i]] = table[test[i]] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "lua: /tmp/tmppcdma8xi.lua:39: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        if test[i] == test[i+1] then\n            table[test[i]] = table[test[i]] + 1\n        elseif table[test[i]] then\n            table[test[i]] = table[test[i]] + 1\n        else\n            table[test[i]] = 1\n        end\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_91mvm2m.lua:19: attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\t/tmp/tmp_91mvm2m.lua:19: in local 'candidate'\n\t/tmp/tmp_91mvm2m.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] or 0\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsv8mpmim.lua:27: expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmpsv8mpmim.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        table[test[i]] = table[test[i]] or 0\n        table[test[i]] = table[test[i]] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc26zq7kz.lua:18: table index is nil\nstack traceback:\n\t/tmp/tmpc26zq7kz.lua:18: in local 'candidate'\n\t/tmp/tmpc26zq7kz.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, c in ipairs(test) do\n        table[c] = table[c] + 1 if table[c] ~= nil then table[c] = table[c] + 1 else table[c] = 1 end\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2e7_vmz6.lua:26: expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmp2e7_vmz6.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        table[test[i]] = table[test[i]] or 0\n        table[test[i]] = table[test[i]] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc26zq7kz.lua:18: table index is nil\nstack traceback:\n\t/tmp/tmpc26zq7kz.lua:18: in local 'candidate'\n\t/tmp/tmpc26zq7kz.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _,c in ipairs(test) do\n        table[c] = table[c] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyb5ogiv6.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpyb5ogiv6.lua:17: in local 'candidate'\n\t/tmp/tmpyb5ogiv6.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local result = {}\n    for _, v in ipairs(test) do\n        if not v in result then\n            result[v] = 1\n        else\n            result[v] = result[v] + 1\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "lua: /tmp/tmpnyj9ex1s.lua:18: 'then' expected near 'in'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        if test[i] == test[i+1] then\n            table[test[i]] = table[test[i]] + 1\n        else\n            table[test[i]] = 1\n        end\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsuffj9i2.lua:19: attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\t/tmp/tmpsuffj9i2.lua:19: in local 'candidate'\n\t/tmp/tmpsuffj9i2.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        if test[i] ~= table[test[i]] then\n            table[test[i]] = 1\n        else\n            table[test[i]] = table[test[i]] + 1\n        end\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2xy66yvb.lua:21: attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\t/tmp/tmp2xy66yvb.lua:21: in local 'candidate'\n\t/tmp/tmp2xy66yvb.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i=1,#test do\n        if not table[test[i]] then\n            table[test[i]] = 1\n        else\n            table[test[i]] = table[test[i]] + 1\n        end\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkvy7gd7a.lua:19: table index is nil\nstack traceback:\n\t/tmp/tmpkvy7gd7a.lua:19: in local 'candidate'\n\t/tmp/tmpkvy7gd7a.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i=1,#test do\n        if test[i] ~= ' ' then\n            table[test[i]] = table[test[i]] or 1\n        end\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7k619lsw.lua:19: table index is nil\nstack traceback:\n\t/tmp/tmp7k619lsw.lua:19: in local 'candidate'\n\t/tmp/tmp7k619lsw.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        table[test[i]] = table[test[i]] or 0\n        table[test[i]] = table[test[i]] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc26zq7kz.lua:18: table index is nil\nstack traceback:\n\t/tmp/tmpc26zq7kz.lua:18: in local 'candidate'\n\t/tmp/tmpc26zq7kz.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local t = {}\n    for _,v in ipairs(test) do\n        if t[v] then t[v] = t[v] + 1 else t[v] = 1 end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4rkkxz3_.lua:26: expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmp4rkkxz3_.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _,v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxjewblew.lua:26: expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmpxjewblew.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local t = {}\n    for _,v in ipairs(test) do\n        if t[v] then t[v] = t[v] + 1 else t[v] = 1 end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4rkkxz3_.lua:26: expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmp4rkkxz3_.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i=1,#test do\n        if test[i] == ' ' then\n            table[test[i]] = table[test[i]] or 1\n        else\n            table[test[i]] = table[test[i]] or 1\n            table[test[i]] = table[test[i]] + 1\n        end\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2fe6d8kx.lua:21: table index is nil\nstack traceback:\n\t/tmp/tmp2fe6d8kx.lua:21: in local 'candidate'\n\t/tmp/tmp2fe6d8kx.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i=1,#test do\n        if not table[test[i]] then\n            table[test[i]] = 1\n        else\n            table[test[i]] = table[test[i]] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "lua: /tmp/tmpdesvclu5.lua:39: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i, c in ipairs(test) do\n        table[c] = table[c] or 0\n        table[c] = table[c] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppqs2jcdn.lua:27: expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmppqs2jcdn.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        if test[i] ~= table[test[i]] then\n            table[test[i]] = 1\n        else\n            table[test[i]] = table[test[i]] + 1\n        end\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2xy66yvb.lua:21: attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\t/tmp/tmp2xy66yvb.lua:21: in local 'candidate'\n\t/tmp/tmp2xy66yvb.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        if test[i] == ' ' then\n            table[test[i]] = table[test[i]] or 1\n        else\n            table[test[i]] = table[test[i]] or 1\n            table[test[i]] = table[test[i]] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp1_fc51ff.lua:40: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907516
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local t = {}\n  for i = 1, #test do\n    if test[i] ~= ' ' then\n      t[test[i]] = t[test[i]] or 1\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp861l1uhk.lua:19: table index is nil\nstack traceback:\n\t/tmp/tmp861l1uhk.lua:19: in local 'candidate'\n\t/tmp/tmp861l1uhk.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i=1,#test do\n        if test[i] ~= ' ' then\n            table[test[i]] = table[test[i]] or 1\n        end\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7k619lsw.lua:19: table index is nil\nstack traceback:\n\t/tmp/tmp7k619lsw.lua:19: in local 'candidate'\n\t/tmp/tmp7k619lsw.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local result = {}\n    for i = 1, #test, 2 do\n        if test[i] == test[i+1] then\n            table.insert(result, test[i])\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq8o64vz1.lua:28: expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmpq8o64vz1.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i=1,#test do\n        if not table[test[i]] then\n            table[test[i]] = 1\n        else\n            table[test[i]] = table[test[i]] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "lua: /tmp/tmpdesvclu5.lua:39: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        if not table[test[i]] then\n            table[test[i]] = 1\n        else\n            table[test[i]] = table[test[i]] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "lua: /tmp/tmppcdma8xi.lua:39: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i=1,#test do\n        if test[i] ~= ' ' then\n            table[test[i]] = table[test[i]] or 1\n        end\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7k619lsw.lua:19: table index is nil\nstack traceback:\n\t/tmp/tmp7k619lsw.lua:19: in local 'candidate'\n\t/tmp/tmp7k619lsw.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        if test[i] ~= ' ' then\n            table[test[i]] = table[test[i]] or 1\n        else\n            table[test[i]] = table[test[i]] + 1\n        end\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv1iutshj.lua:19: table index is nil\nstack traceback:\n\t/tmp/tmpv1iutshj.lua:19: in local 'candidate'\n\t/tmp/tmpv1iutshj.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        if test[i] == test[i+1] then\n            table[test[i]] = table[test[i]] + 1\n        elseif table[test[i]] then\n            table[test[i]] = table[test[i]] + 1\n        else\n            table[test[i]] = 1\n        end\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_91mvm2m.lua:19: attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\t/tmp/tmp_91mvm2m.lua:19: in local 'candidate'\n\t/tmp/tmp_91mvm2m.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        table[test[i]] = table[test[i]] or 0\n        table[test[i]] = table[test[i]] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc26zq7kz.lua:18: table index is nil\nstack traceback:\n\t/tmp/tmpc26zq7kz.lua:18: in local 'candidate'\n\t/tmp/tmpc26zq7kz.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        if test[i] == ' ' then\n            table[test[i]] = table[test[i]] or 1\n        else\n            table[test[i]] = table[test[i]] or 1\n            table[test[i]] = table[test[i]] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp1_fc51ff.lua:40: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907516
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        if not table[test[i]] then\n            table[test[i]] = 1\n        else\n            table[test[i]] = table[test[i]] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "lua: /tmp/tmppcdma8xi.lua:39: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] or 0\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsv8mpmim.lua:27: expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmpsv8mpmim.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        if test[i] == ' ' then\n            table[test[i]] = table[test[i]] or 1\n        else\n            table[test[i]] = table[test[i]] or 1\n            table[test[i]] = table[test[i]] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp1_fc51ff.lua:40: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907516
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local result = {}\n    for _, v in ipairs(test) do\n        if not v in result then\n            result[v] = 1\n        else\n            result[v] = result[v] + 1\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "lua: /tmp/tmpnyj9ex1s.lua:18: 'then' expected near 'in'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        if test[i] == test[i+1] then\n            table[test[i]] = table[test[i]] + 1\n        end\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _,c in ipairs(test) do\n        table[c] = table[c] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyb5ogiv6.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpyb5ogiv6.lua:17: in local 'candidate'\n\t/tmp/tmpyb5ogiv6.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _,v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxjewblew.lua:26: expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmpxjewblew.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        if not table[test[i]] then\n            table[test[i]] = 1\n        else\n            table[test[i]] = table[test[i]] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "lua: /tmp/tmppcdma8xi.lua:39: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i=1,#test do\n        if not table[test[i]] then\n            table[test[i]] = 1\n        else\n            table[test[i]] = table[test[i]] + 1\n        end\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkvy7gd7a.lua:19: table index is nil\nstack traceback:\n\t/tmp/tmpkvy7gd7a.lua:19: in local 'candidate'\n\t/tmp/tmpkvy7gd7a.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i=1,#test do\n        if test[i] ~= ' ' then\n            table[test[i]] = table[test[i]] or 1\n        else\n            table[test[i]] = table[test[i]] + 1\n        end\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7eab0057.lua:19: table index is nil\nstack traceback:\n\t/tmp/tmp7eab0057.lua:19: in local 'candidate'\n\t/tmp/tmp7eab0057.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        if test[i] == test[i+1] then\n            table[test[i]] = table[test[i]] + 1\n        end\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _,v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxjewblew.lua:26: expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmpxjewblew.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i, c in ipairs(test) do\n        table[c] = table[c] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw7li4rda.lua:26: expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmpw7li4rda.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        if test[i] == test[i+1] then\n            table[test[i]] = table[test[i]] + 1\n        end\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local result = {}\n    for _, v in ipairs(test) do\n        if v not in result then\n            result[v] = 1\n        else\n            result[v] = result[v] + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "lua: /tmp/tmp6z8rp5ls.lua:18: 'then' expected near 'not'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i, c in ipairs(test) do\n        table[c] = table[c] or 0\n        table[c] = table[c] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppqs2jcdn.lua:27: expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmppqs2jcdn.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        if test[i] == test[i + 1] then\n            table[test[i]] = table[test[i]] + 1\n        end\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppig8xa2_.lua:19: attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\t/tmp/tmppig8xa2_.lua:19: in local 'candidate'\n\t/tmp/tmppig8xa2_.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        if not table[test[i]] then\n            table[test[i]] = 1\n        else\n            table[test[i]] = table[test[i]] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "lua: /tmp/tmppcdma8xi.lua:39: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        table[test[i]] = table[test[i]] or 0\n        table[test[i]] = table[test[i]] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc26zq7kz.lua:18: table index is nil\nstack traceback:\n\t/tmp/tmpc26zq7kz.lua:18: in local 'candidate'\n\t/tmp/tmpc26zq7kz.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        table[test[i]] = table[test[i]] or 0\n        table[test[i]] = table[test[i]] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc26zq7kz.lua:18: table index is nil\nstack traceback:\n\t/tmp/tmpc26zq7kz.lua:18: in local 'candidate'\n\t/tmp/tmpc26zq7kz.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] or 0\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsv8mpmim.lua:27: expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmpsv8mpmim.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i=1,#test do\n        if not table[test[i]] then\n            table[test[i]] = 1\n        else\n            table[test[i]] = table[test[i]] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "lua: /tmp/tmpdesvclu5.lua:39: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        table[test[i]] = table[test[i]] or 0\n        table[test[i]] = table[test[i]] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc26zq7kz.lua:18: table index is nil\nstack traceback:\n\t/tmp/tmpc26zq7kz.lua:18: in local 'candidate'\n\t/tmp/tmpc26zq7kz.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local result = {}\n    for i=1,#test do\n        if not test[i] then\n            result[test[i]] = result[test[i]] or 1\n        else\n            result[test[i]] = result[test[i]] or 1 + result[test[i]]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmfh9qruc.lua:19: table index is nil\nstack traceback:\n\t/tmp/tmpmfh9qruc.lua:19: in local 'candidate'\n\t/tmp/tmpmfh9qruc.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i, v in ipairs(test) do\n        table[v] = table[v] or 0\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0kssex3i.lua:27: expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmp0kssex3i.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local result = {}\n    for i = 1, #test do\n        if test[i] == test[i+1] then\n            if not result[test[i]] then\n                result[test[i]] = 1\n            else\n                result[test[i]] = result[test[i]] + 1\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "lua: /tmp/tmp4qi310d9.lua:41: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _,c in ipairs(test) do\n        table[c] = table[c] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyb5ogiv6.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpyb5ogiv6.lua:17: in local 'candidate'\n\t/tmp/tmpyb5ogiv6.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        if test[i] == test[i+1] then\n            table[test[i]] = table[test[i]] + 1\n        end\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i=1,#test do\n        if test[i] ~= ' ' then\n            table[test[i]] = table[test[i]] or 1\n        end\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7k619lsw.lua:19: table index is nil\nstack traceback:\n\t/tmp/tmp7k619lsw.lua:19: in local 'candidate'\n\t/tmp/tmp7k619lsw.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        if test[i] == ' ' then\n            table[test[i]] = table[test[i]] or 1\n        else\n            table[test[i]] = table[test[i]] or 1\n            table[test[i]] = table[test[i]] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp1_fc51ff.lua:40: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907516
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local t = {}\n    for i = 1, #test do\n        t[test[i]] = t[test[i]] or 0\n        t[test[i]] = t[test[i]] + 1\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_mpbegog.lua:18: table index is nil\nstack traceback:\n\t/tmp/tmp_mpbegog.lua:18: in local 'candidate'\n\t/tmp/tmp_mpbegog.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local t = {}\n    for _,v in ipairs(test) do\n        if t[v] then t[v] = t[v] + 1 else t[v] = 1 end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4rkkxz3_.lua:26: expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmp4rkkxz3_.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i=1,#test do\n        if test[i] ~= ' ' then\n            table[test[i]] = table[test[i]] or 1\n        end\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7k619lsw.lua:19: table index is nil\nstack traceback:\n\t/tmp/tmp7k619lsw.lua:19: in local 'candidate'\n\t/tmp/tmp7k619lsw.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        table[test[i]] = table[test[i]] or 0\n        table[test[i]] = table[test[i]] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc26zq7kz.lua:18: table index is nil\nstack traceback:\n\t/tmp/tmpc26zq7kz.lua:18: in local 'candidate'\n\t/tmp/tmpc26zq7kz.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i=1,#test do\n        table[test[i]] = table[test[i]] or 0\n        table[test[i]] = table[test[i]] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjcxl4gtc.lua:18: table index is nil\nstack traceback:\n\t/tmp/tmpjcxl4gtc.lua:18: in local 'candidate'\n\t/tmp/tmpjcxl4gtc.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, c in ipairs(test) do\n        table[c] = table[c] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_kmzr3v.lua:26: expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmpu_kmzr3v.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _, v in ipairs(test) do\n        table[v] = table[v] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo3b8udx7.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpo3b8udx7.lua:17: in local 'candidate'\n\t/tmp/tmpo3b8udx7.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        table[test[i]] = table[test[i]] or 0\n        table[test[i]] = table[test[i]] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc26zq7kz.lua:18: table index is nil\nstack traceback:\n\t/tmp/tmpc26zq7kz.lua:18: in local 'candidate'\n\t/tmp/tmpc26zq7kz.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n  local t = {}\n  for i=1,#test do\n    if test[i] ~= ' ' then\n      t[test[i]] = t[test[i]] or 1\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl9l1uaok.lua:19: table index is nil\nstack traceback:\n\t/tmp/tmpl9l1uaok.lua:19: in local 'candidate'\n\t/tmp/tmpl9l1uaok.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        if test[i] == test[i+1] then\n            table[test[i]] = table[test[i]] + 1\n        end\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        table[test[i]] = table[test[i]] or 0\n        table[test[i]] = table[test[i]] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc26zq7kz.lua:18: table index is nil\nstack traceback:\n\t/tmp/tmpc26zq7kz.lua:18: in local 'candidate'\n\t/tmp/tmpc26zq7kz.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        if test[i] == test[i+1] then\n            table[test[i]] = table[test[i]] + 1\n        elseif table[test[i]] then\n            table[test[i]] = table[test[i]] + 1\n        else\n            table[test[i]] = 1\n        end\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_91mvm2m.lua:19: attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\t/tmp/tmp_91mvm2m.lua:19: in local 'candidate'\n\t/tmp/tmp_91mvm2m.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        table[test[i]] = table[test[i]] or 0\n        table[test[i]] = table[test[i]] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc26zq7kz.lua:18: table index is nil\nstack traceback:\n\t/tmp/tmpc26zq7kz.lua:18: in local 'candidate'\n\t/tmp/tmpc26zq7kz.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for _,c in ipairs(test) do\n        table[c] = table[c] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyb5ogiv6.lua:17: bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmpyb5ogiv6.lua:17: in local 'candidate'\n\t/tmp/tmpyb5ogiv6.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907516
    },
    {
      "exit_code": 1,
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i = 1, #test do\n        if test[i] == ' ' then\n            table[test[i]] = table[test[i]] or 1\n        else\n            table[test[i]] = table[test[i]] or 1\n            table[test[i]] = table[test[i]] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp1_fc51ff.lua:40: 'end' expected (to close 'function' at line 15) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907516
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local result = {}\n    for _, v in ipairs(test) do\n        if not v in result then\n            result[v] = 1\n        else\n            result[v] = result[v] + 1\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "",
      "stderr": "lua: /tmp/tmpnyj9ex1s.lua:18: 'then' expected near 'in'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string representing a space separated lowercase letters, return a table\n-- of the letter with the most repetition and containing the corresponding count.\n-- If several letters have the same occurrence, return all of them.\n-- Example:\n-- >>> histogram('a b c')\n-- {'a': 1, 'b': 1, 'c': 1}\n-- >>> histogram('a b b a')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('a b c a b')\n-- {'a': 2, 'b': 2}\n-- >>> histogram('b b b b a')\n-- {'b': 4}\n-- >>> histogram('')\n-- {}\nlocal function histogram(test)\n    local table = {}\n    for i, c in ipairs(test) do\n        table[c] = table[c] or 0\n        table[c] = table[c] + 1\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'), {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'), {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292456,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppqs2jcdn.lua:27: expected: {a=2, b=2}\nactual: {}\nstack traceback:\n\t/tmp/tmppqs2jcdn.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}