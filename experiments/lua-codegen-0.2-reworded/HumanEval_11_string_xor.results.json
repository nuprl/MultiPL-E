{
  "language": "lua",
  "name": "HumanEval_11_string_xor",
  "results": [
    {
      "exit_code": 1,
      "program": "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010', '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n    for i = 1, #a, 1 do\n        result = string.byte(result, a[i])\n    end\n    for i = 1, #b, 1 do\n        result = string.byte(result, b[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpadjvj1az.lua:8: bad argument #1 to 'byte' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpadjvj1az.lua:8: in local 'candidate'\n\t/tmp/tmpadjvj1az.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907483
    },
    {
      "exit_code": 1,
      "program": "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010', '110')\n-- '100'\nlocal function string_xor(a, b)\n    local a_len = #a\n    local b_len = #b\n    local result = \"\"\n    for i = 1, a_len do\n        result = result .. string.sub(a, i, 1)\n    end\n    for i = 1, b_len do\n        result = result .. string.sub(b, i, 1)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiikmqfjs.lua:21: expected: \"010010\"\nactual: \"11\"\nstack traceback:\n\t/tmp/tmpiikmqfjs.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907483
    },
    {
      "exit_code": 1,
      "program": "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010', '110')\n-- '100'\nlocal function string_xor(a, b)\n    local a_len = #a\n    local b_len = #b\n    local result = ''\n    for i = 1, a_len do\n        if a[i] == '1' then\n            result = result .. '1'\n        else\n            result = result .. '0'\n        end\n    end\n    for i = 1, b_len do\n        if b[i] == '1' then\n            result = result .. '1'\n        else\n            result = result .. '0'\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxywyi9g7.lua:29: expected: \"010010\"\nactual: \"000000000000\"\nstack traceback:\n\t/tmp/tmpxywyi9g7.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907483
    },
    {
      "exit_code": 1,
      "program": "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010', '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n    for i = 1, #a, 1 do\n        if a[i] == '1' and b[i] == '1' then\n            result = result .. '1'\n        else\n            result = result .. '0'\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa3xxo8pe.lua:20: expected: \"010010\"\nactual: \"000000\"\nstack traceback:\n\t/tmp/tmpa3xxo8pe.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907483
    },
    {
      "exit_code": 1,
      "program": "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010', '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n    for i = 1, #a, 2 do\n        if a[i] ~= '0' and b[i] ~= '0' then\n            result = result .. '1'\n        else\n            result = result .. '0'\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwauipho7.lua:20: expected: \"010010\"\nactual: \"111\"\nstack traceback:\n\t/tmp/tmpwauipho7.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907483
    },
    {
      "exit_code": 1,
      "program": "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010', '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n    for i = 1, #a, 2 do\n        result = string.byte(result, string.byte(a, i)^string.byte(b, i))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm8wcxka2.lua:8: bad argument #2 to 'byte' (number has no integer representation)\nstack traceback:\n\t/tmp/tmpm8wcxka2.lua:8: in local 'candidate'\n\t/tmp/tmpm8wcxka2.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907483
    },
    {
      "exit_code": 1,
      "program": "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010', '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n    for i = 1, #a, 1 do\n        if a[i] == '1' and b[i] == '1' then\n            result = result .. '1'\n        else\n            result = result .. '0'\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa3xxo8pe.lua:20: expected: \"010010\"\nactual: \"000000\"\nstack traceback:\n\t/tmp/tmpa3xxo8pe.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907483
    },
    {
      "exit_code": 1,
      "program": "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010', '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n    for i = 1, #a, 2 do\n        if a[i] == '1' and b[i] == '1' then\n            result = result .. '1'\n        else\n            result = result .. '0'\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpivmvznya.lua:20: expected: \"010010\"\nactual: \"000\"\nstack traceback:\n\t/tmp/tmpivmvznya.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907483
    },
    {
      "exit_code": 1,
      "program": "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010', '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n    for i = 1, #a, 1 do\n        result = string.byte(result, a[i])\n    end\n    for i = 1, #b, 1 do\n        result = string.byte(result, b[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpadjvj1az.lua:8: bad argument #1 to 'byte' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpadjvj1az.lua:8: in local 'candidate'\n\t/tmp/tmpadjvj1az.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907483
    },
    {
      "exit_code": 1,
      "program": "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010', '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n    for i = 1, #a, 2 do\n        result = string.byte(result, string.byte(a, i)^string.byte(b, i))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm8wcxka2.lua:8: bad argument #2 to 'byte' (number has no integer representation)\nstack traceback:\n\t/tmp/tmpm8wcxka2.lua:8: in local 'candidate'\n\t/tmp/tmpm8wcxka2.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907483
    },
    {
      "exit_code": 1,
      "program": "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010', '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n    for i = 1, #a do\n        if a[i] == '1' then\n            result = result .. '0'\n        else\n            result = result .. '1'\n        end\n    end\n    for i = 1, #b do\n        if b[i] == '1' then\n            result = result .. '0'\n        else\n            result = result .. '1'\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyuw88vz3.lua:27: expected: \"010010\"\nactual: \"111111111111\"\nstack traceback:\n\t/tmp/tmpyuw88vz3.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907483
    },
    {
      "exit_code": 1,
      "program": "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010', '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n    for i = 1, #a do\n        if a[i] == '1' then\n            result = result .. '0'\n        else\n            result = result .. '1'\n        end\n    end\n    for i = 1, #b do\n        if b[i] == '1' then\n            result = result .. '0'\n        else\n            result = result .. '1'\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyuw88vz3.lua:27: expected: \"010010\"\nactual: \"111111111111\"\nstack traceback:\n\t/tmp/tmpyuw88vz3.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907483
    },
    {
      "exit_code": 1,
      "program": "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010', '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n    for i = 1, #a, 1 do\n        result = string.byte(result, a[i])\n    end\n    for i = 1, #b, 1 do\n        result = string.byte(result, b[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpadjvj1az.lua:8: bad argument #1 to 'byte' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpadjvj1az.lua:8: in local 'candidate'\n\t/tmp/tmpadjvj1az.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907483
    },
    {
      "exit_code": 1,
      "program": "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010', '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n    for i = 1, #a, 2 do\n        if a[i] == '1' and b[i] == '1' then\n            result = result .. '1'\n        else\n            result = result .. '0'\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpivmvznya.lua:20: expected: \"010010\"\nactual: \"000\"\nstack traceback:\n\t/tmp/tmpivmvznya.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907483
    },
    {
      "exit_code": 1,
      "program": "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010', '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n    for i = 1, #a, 1 do\n        result = string.byte(result, a[i])\n    end\n    for i = 1, #b, 1 do\n        result = string.byte(result, b[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpadjvj1az.lua:8: bad argument #1 to 'byte' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpadjvj1az.lua:8: in local 'candidate'\n\t/tmp/tmpadjvj1az.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907483
    },
    {
      "exit_code": 1,
      "program": "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010', '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n    for i = 1, #a, 1 do\n        result = string.byte(result, a[i])\n    end\n    for i = 1, #b, 1 do\n        result = string.byte(result, b[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpadjvj1az.lua:8: bad argument #1 to 'byte' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpadjvj1az.lua:8: in local 'candidate'\n\t/tmp/tmpadjvj1az.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907483
    },
    {
      "exit_code": 1,
      "program": "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010', '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n    for i = 1, #a, 1 do\n        result = string.byte(result, a[i])\n    end\n    for i = 1, #b, 1 do\n        result = string.byte(result, b[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpadjvj1az.lua:8: bad argument #1 to 'byte' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpadjvj1az.lua:8: in local 'candidate'\n\t/tmp/tmpadjvj1az.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907483
    },
    {
      "exit_code": 1,
      "program": "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010', '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n    for i = 1, #a, 1 do\n        if a[i] == '1' and b[i] == '1' then\n            result = result .. '1'\n        else\n            result = result .. '0'\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa3xxo8pe.lua:20: expected: \"010010\"\nactual: \"000000\"\nstack traceback:\n\t/tmp/tmpa3xxo8pe.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907483
    },
    {
      "exit_code": 1,
      "program": "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010', '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n    for i = 1, #a, 1 do\n        result = string.byte(result, a[i])\n    end\n    for i = 1, #b, 1 do\n        result = string.byte(result, b[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpadjvj1az.lua:8: bad argument #1 to 'byte' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpadjvj1az.lua:8: in local 'candidate'\n\t/tmp/tmpadjvj1az.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907483
    },
    {
      "exit_code": 1,
      "program": "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010', '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n    for i = 1, #a, 1 do\n        result = string.byte(result, a[i])\n    end\n    for i = 1, #b, 1 do\n        result = string.byte(result, b[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpadjvj1az.lua:8: bad argument #1 to 'byte' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpadjvj1az.lua:8: in local 'candidate'\n\t/tmp/tmpadjvj1az.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907483
    }
  ]
}