name: HumanEval_76_is_simple_power
language: lua
prompt: "-- Your task is to write a function that returns true if a number x is a\
  \ simple\n-- power of n and false in other cases.\n-- x is a simple power of n if\
  \ n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>> is_simple_power(2,\
  \ 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>> is_simple_power(3,\
  \ 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n-- >>> is_simple_power(5,\
  \ 3)\n-- false\nlocal function is_simple_power(x, n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
  \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
  \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
  \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
  \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
  \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
  \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    return x == n ** math.floor(math.log(x) / math.log(n))\nend", " \
    \   return x ** n == x\nend", "    return x ** n == x\nend", "    if x == n then\
    \ return true else return false end\nend", "    if x == n then\n        return\
    \ true\n    end\n    return false\nend", "    if x == n then return true\n   \
    \ else return false\nend", "    return x ** n == x\nend", "    return x == n **\
    \ math.floor(math.log(x) / math.log(n))\nend", "    if x == n then\n        return\
    \ true\n    else\n        return false\n    end\nend", "    return x ** n == x\n\
    end", "    return x ** n == x\nend", "    return x == n ** math.floor(math.log(x)\
    \ / math.log(n))\nend", "    if x == n then return true\n    return false\nend",
  "    if x == n then\n        return true\n    else\n        return false\n    end\n\
    end", "    return x == n ** math.floor(math.log(x) / math.log(n))\nend", "   \
    \ if x == n then\n        return true\n    end\n    if x < 0 then\n        return\
    \ false\n    end\n    if x == 1 then\n        return true\n    end\n    return\
    \ false\nend", "    return x == n ** math.floor(math.log(x) / math.log(n))\nend",
  "    return x == n ** math.floor(math.log(x) / math.log(n))\nend", "    return x\
    \ == n ** math.floor(math.log(x) / math.log(n))\nend", "    local t = math.pow(n,\
    \ math.floor(math.log(x)/math.log(n)))\n    return t == x\nend", "    if x ==\
    \ n then return true\n    else return false\nend", "    return x ** n == x\nend",
  "    return x ** n == x\nend", "    if x == n then return true\n    else return\
    \ false\nend", "    return x ** n == x\nend", "    return x ** n == x\nend", " \
    \   return x ** n == x\nend", "    return x == n ** math.floor(math.log(x) / math.log(n))\n\
    end", "    return x == n ** math.floor(math.log(x) / math.log(n))\nend", "   \
    \ return x ** n == x\nend", "    if x == n then\n        return true\n    end\n\
    \    return false\nend", "    return x ** n == x\nend", "    return x == n **\
    \ math.floor(math.log(x) / math.log(n))\nend", "    return x == n ** math.floor(math.log(x)\
    \ / math.log(n))\nend", "    return x ** n == x\nend", "    if x == n then\n \
    \       return true\n    else\n        return false\n    end\nend", "    return\
    \ x ** n == x\nend", "    return x == n**math.floor(math.log(x)/math.log(n))\n\
    end", "    local t = math.pow(n, math.floor(math.log(x) / math.log(n)))\n    return\
    \ x == t\nend", "    return x ** n == x\nend", "    return x ** n == x\nend",
  "    if x == n then\n        return true\n    else\n        return false\n    end\n\
    end", "    if x == n then return true\n    return false\nend", "    return x **\
    \ n == x\nend", "    return x ** n == x\nend", "    return x ** n == x\nend",
  "    if x == n then return true\n    return false\nend", "    if x == n then\n \
    \       return true\n    else\n        return false\n    end\nend", "    return\
    \ x ** n == x\nend", "    return x == n ** math.floor(math.log(x) / math.log(n))\n\
    end", "    if n == 0 then return true end\n    if x == 1 then return true end\n\
    \    if x == n then return true end\n    if x % n == 0 then return true end\n\
    \    return false\nend", "    return x ** n == x\nend", "    return x ** n ==\
    \ x\nend", "    if x == n then return true end\n    if x < 0 then return false\
    \ end\n    if x == 1 then return true end\n    if x == 0 then return false end\n\
    \    return is_simple_power(x, n/x)\nend", "    if x == n then\n        return\
    \ true\n    else\n        return false\n    end\nend", "    if x == n then\n \
    \       return true\n    end\n    return false\nend", "    return x ** n == x\n\
    end", "    if x == n then return true\n    elseif x == 0 then return false\n \
    \   else return is_simple_power(x, n/x)\nend", "    return n ** math.floor(math.log(x)\
    \ / math.log(n)) == x\nend", "    local t = x\n    local i = 1\n    while t >\
    \ 1 do\n        if t % 2 == 0 then\n            t = t / 2\n        else\n    \
    \        t = t * x\n        end\n        i = i + 1\n    end\n    return i == n\n\
    end", "    return x ** n == x\nend", "    return x ** n == x\nend", "    return\
    \ x == n ** math.floor(math.log(x) / math.log(n))\nend", "    if x == n then return\
    \ true\n    return false\nend", "    return x ** n == x\nend", "    if x == n\
    \ then return true\n    else return false\nend", "    return x ** n == x\nend",
  "    return x == n ** math.floor(math.log(x) / math.log(n))\nend", "    return x\
    \ == n ** math.floor(math.log(x) / math.log(n))\nend", "    return x == n ** math.floor(math.log(x)\
    \ / math.log(n))\nend", "    local t = math.pow(n, math.floor(math.log(x) / math.log(n)))\n\
    \    return x == t\nend", "    return x ** n == x\nend", "    return x ** n ==\
    \ x\nend", "    local t = math.pow(n, math.floor(math.log(x) / math.log(n)))\n\
    \    return t == x\nend", "    return x ** n == x\nend", "    if x == n then return\
    \ true\n    else return false\nend", "    if x == n then\n        return true\n\
    \    end\n    return false\nend", "    return x ** n == x\nend", "    if x ==\
    \ n then return true end\n    if x < 0 then return false end\n    if x == 1 then\
    \ return true end\n    if x == 0 then return false end\n    if x % 1 == 0 then\
    \ return false end\n    return is_simple_power(x, n/x)\nend", "    return x ==\
    \ n**math.floor(math.log(x)/math.log(n))\nend", "    return x ** n == x\nend",
  "    return x ** n == x\nend", "    return x ** n == x\nend", "    if x == n then\
    \ return true\n    return false\nend", "    return x ** n == x\nend", "    return\
    \ x ** n == x\nend", "    local t = math.pow(n, math.floor(math.log(x)/math.log(n)))\n\
    \    return t == x\nend", "    return x ** n == x\nend", "    return x ** n ==\
    \ x\nend", "    return x ** n == x\nend", "    return x ** n == x\nend", "   \
    \ return x ** n == x\nend", "    return x ** n == x\nend", "    local t = n **\
    \ math.floor(math.log(x) / math.log(n))\n    return t == x\nend", "    return\
    \ x == n ** math.floor(math.log(x) / math.log(n))\nend", "    return x ** n ==\
    \ x\nend", "    return x == n ** math.floor(math.log(x) / math.log(n))\nend",
  "    if x == n then return true\n    else return false\nend", "    return x ** n\
    \ == x\nend", "    if x == n then return true end\n    if x < 0 then return false\
    \ end\n    if x == 1 then return true end\n    return is_simple_power(x, n/2)\n\
    end", "    if x == n then\n        return true\n    else\n        return false\n\
    \    end\nend", "    local t = math.pow(n, math.floor(math.log(x)/math.log(n)))\n\
    \    return t == x\nend", "    return x ** n == x\nend", "    return x == n **\
    \ math.floor(math.log(x) / math.log(n))\nend", "    if x == n then\n        return\
    \ true\n    else\n        return false\n    end\nend", "    return x ** n == x\n\
    end", "    local t = n\n    while t > 0 do\n        if x == t then\n         \
    \   return true\n        end\n        t = t - 1\n    end\n    return false\nend",
  "    return x ** n == x\nend", "    local t = math.pow(n, math.floor(math.log(x)\
    \ / math.log(n)))\n    return t == x\nend", "    return x ** n == x\nend", " \
    \   return x == n ** math.floor(math.log(x) / math.log(n))\nend", "    if x ==\
    \ n then return true\n    return false\nend", "    return x ** n == x\nend", " \
    \   return x ** n == x\nend", "    local t = math.pow(n, math.floor(math.log(x)\
    \ / math.log(n)))\n    return t == x\nend", "    local t = math.pow(n, math.floor(math.log(x)\
    \ / math.log(n)))\n    return t == x\nend", "    if x == n then return true\n\
    \    else return false\nend", "    if x == n then return true\n    else return\
    \ false\nend", "    local t = math.pow(n, math.floor(math.log(x)/math.log(n)))\n\
    \    return t == x\nend", "    return x ** n == x\nend", "    local t = math.pow(n,\
    \ math.floor(math.log(x) / math.log(n)))\n    return t == x\nend", "    if x ==\
    \ n then\n        return true\n    else\n        return false\n    end\nend",
  "    return x ** n == x\nend", "    return x ** n == x\nend", "    return x == n\
    \ ** math.floor(math.log(x) / math.log(n))\nend", "    if x == n then return true\n\
    \    return false\nend", "    if x == n then\n        return true\n    end\n \
    \   return false\nend", "    if x == n then\n        return true\n    else\n \
    \       return false\n    end\nend", "    return x ** n == x\nend", "    return\
    \ x ** n == x\nend", "    return x == n ** math.floor(math.log(x) / math.log(n))\n\
    end", "    return x == n ** math.floor(math.log(x) / math.log(n))\nend", "   \
    \ return x ** n == x\nend", "    return x == n ** math.floor(math.log(x) / math.log(n))\n\
    end", "    return x == n ** math.floor(math.log(x) / math.log(n))\nend", "   \
    \ if x == n then\n        return true\n    end\n    return false\nend", "    return\
    \ x ** n == x\nend", "    if x == n then\n        return true\n    end\n    return\
    \ false\nend", "    if x == n then return true\n    elseif x == 0 then return\
    \ false\n    else return is_simple_power(x, n/x)\nend", "    return x == n **\
    \ math.floor(math.log(x) / math.log(n))\nend", "    if x == n then return true\n\
    \    else return false\nend", "    return x == n ** math.floor(math.log(x) / math.log(n))\n\
    end", "    return n ** math.floor(math.log(x) / math.log(n)) == x\nend", "   \
    \ return x == n ** math.floor(math.log(x) / math.log(n))\nend", "    return x\
    \ == n ** math.floor(math.log(x) / math.log(n))\nend", "    return x ** n == x\n\
    end", "    return x == n ** math.floor(math.log(x) / math.log(n))\nend", "   \
    \ return x ** n == x\nend", "    if x == n then\n        return true\n    else\n\
    \        return false\n    end\nend", "    if n == 1 then\n        return true\n\
    \    end\n    if x == n then\n        return true\n    end\n    return false\n\
    end", "    return x == n ** math.floor(math.log(x) / math.log(n))\nend", "   \
    \ return n ** math.floor(math.log(x) / math.log(n)) == x\nend", "    return x\
    \ == n ** math.floor(math.log(x) / math.log(n))\nend", "    return x == n ** math.floor(math.log(x)\
    \ / math.log(n))\nend", "    return x ** n == x\nend", "    if x == n then return\
    \ true\n    elseif x < 0 then return false\n    else return is_simple_power(n,\
    \ x)\nend", "    if x == n then\n        return true\n    end\n    return false\n\
    end", "    return x ** n == x\nend", "    return x ** n == x\nend", "    return\
    \ x ** n == x\nend", "    if x == n then\n        return true\n    else\n    \
    \    return false\n    end\nend", "    return x ** n == x\nend", "    if x ==\
    \ n then return true\n    else return false\nend", "    local t = n\n    while\
    \ t > 0 do\n        if x ** t == x then\n            return true\n        end\n\
    \        t = t - 1\n    end\n    return false\nend", "    return x ** n == x\n\
    end", "    return x ** n == x\nend", "    return x == n ** math.floor(math.log(x)\
    \ / math.log(n))\nend", "    local t = math.pow(n, math.floor(math.log(x) / math.log(n)))\n\
    \    return t == x\nend", "    return x == n ** math.floor(math.log(x) / math.log(n))\n\
    end", "    if x == n then\n        return true\n    else\n        return false\n\
    \    end\nend", "    return x ** n == x\nend", "    return x == n ** math.floor(math.log(x)\
    \ / math.log(n))\nend", "    local t = math.pow(n, math.floor(math.log(x) / math.log(n)))\n\
    \    return t == x\nend", "    return x == n ** math.floor(math.log(x) / math.log(n))\n\
    end", "    if x == n then return true\n    else return false\nend", "    if n\
    \ == 0 then\n        return true\n    end\n    if x == 1 then\n        return\
    \ true\n    end\n    if x == n then\n        return true\n    end\n    return\
    \ false\nend", "    return x ** n == x\nend", "    return x ** n == x\nend", " \
    \   return x ** n == x\nend", "    return x == n ** math.floor(math.log(x) / math.log(n))\n\
    end", "    if x == n then\n        return true\n    else\n        return false\n\
    \    end\nend", "    if n == 1 then\n        return true\n    end\n    if x ==\
    \ n then\n        return true\n    end\n    return false\nend", "    return x\
    \ ** n == x\nend", "    return x ** n == x\nend", "    if x == n then return true\n\
    \    else return false\nend", "    if x == n then\n        return true\n    else\n\
    \        return false\n    end\nend", "    if x == n then return true else return\
    \ false end\nend", "    if x == n then return true\n    else return false\nend",
  "    return x ** n == x\nend", "    return x ** n == x\nend", "    if x == n then\n\
    \        return true\n    else\n        return false\n    end\nend", "    return\
    \ x ** n == x\nend", "    return x ** n == x\nend", "    return x == n ** math.floor(math.log(x)\
    \ / math.log(n))\nend", "    return x ** n == x\nend", "    return x ** n == x\n\
    end", "    return x ** n == x\nend", "    return x ** n == x\nend", "    return\
    \ x ** n == x\nend", "    return x ** n == x\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
