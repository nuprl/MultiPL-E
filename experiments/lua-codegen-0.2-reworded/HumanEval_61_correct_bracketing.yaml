name: HumanEval_61_correct_bracketing
language: lua
prompt: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
  \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"(\"\
  )\n-- False\n-- >>> correct_bracketing(\"()\")\n-- True\n-- >>> correct_bracketing(\"\
  (()())\")\n-- True\n-- >>> correct_bracketing(\")(()\")\n-- False\nlocal function\
  \ correct_bracketing(brackets)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
  \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
  \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
  \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
  \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
  \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
  \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
  \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local result = true\n    for i = 1, #brackets, 2 do\n        if\
    \ brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n\
    \            break\n        end\n    end\n    return result\nend", "    local\
    \ function is_open_bracket(c)\n        return c == \"(\" or c == \"[\" or c ==\
    \ \"{\"\n    end\n    local function is_close_bracket(c)\n        return c ==\
    \ \")\" or c == \"]\" or c == \"}\"\n    end\n    local function is_balanced(brackets)\n\
    \        local i = 1\n        while i <= #brackets do\n            if not is_open_bracket(brackets[i])\
    \ and not is_close_bracket(brackets[i]) then\n                return false\n \
    \           end\n            i = i + 1\n        end\n        return true\n   \
    \ end\n    return is_balanced(brackets)\nend", "    if brackets == \"\" then return\
    \ true end\n    local bracket_count = 0\n    for i = 1, #brackets, 2 do\n    \
    \    if brackets[i] == '(' and brackets[i+1] == ')' then\n            bracket_count\
    \ = bracket_count + 1\n        end\n    end\n    if bracket_count == 0 then return\
    \ true end\n    return bracket_count == #brackets - 1\nend", "    local result\
    \ = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1]\
    \ ~= \")\" then\n            result = false\n            break\n        end\n\
    \    end\n    return result\nend", "    local result = true\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n     \
    \       result = false\n            break\n        end\n    end\n    return result\n\
    end", "    local open_brackets = {'(', '{', '['}\n    local close_brackets = {')',\
    \ '}', ']'}\n    local result = true\n    for _, v in ipairs(brackets) do\n  \
    \      if v not in open_brackets then\n            result = false\n          \
    \  break\n    end\n    for _, v in ipairs(brackets) do\n        if v not in close_brackets\
    \ then\n            result = false\n            break\n    end\n    return result\n\
    end", "    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i]\
    \ ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n      \
    \      break\n        end\n    end\n    return result\nend", "    local result\
    \ = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" or brackets[i+1]\
    \ ~= \")\" then\n            result = false\n            break\n        end\n\
    \    end\n    return result\nend", "    local open_brackets = 0\n    local close_brackets\
    \ = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == '(' then\n  \
    \          open_brackets = open_brackets + 1\n        elseif brackets[i] == ')'\
    \ then\n            close_brackets = close_brackets + 1\n        end\n    end\n\
    \    return open_brackets == close_brackets\nend", "    local result = true\n\
    \    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" and brackets[i]\
    \ ~= \")\" then\n            result = false\n            break\n        end\n\
    \    end\n    return result\nend", "    local function is_open_bracket(c)\n  \
    \      return c == \"(\" or c == \"[\" or c == \"{\"\n    end\n    local function\
    \ is_close_bracket(c)\n        return c == \")\" or c == \"]\" or c == \"}\"\n\
    \    end\n    local function is_balanced(brackets)\n        local i = 1\n    \
    \    while i <= #brackets do\n            if not is_open_bracket(brackets[i])\
    \ and not is_close_bracket(brackets[i]) then\n                return false\n \
    \           end\n            i = i + 1\n        end\n        return true\n   \
    \ end\n    return is_balanced(brackets)\nend", "    local result = true\n    for\
    \ i = 1, #brackets, 2 do\n        if brackets[i] ~= \"(\" and brackets[i] ~= \"\
    )\" then\n            result = false\n            break\n        end\n    end\n\
    \    return result\nend", "    if brackets == \"\" then return true end\n    local\
    \ open_brackets = 0\n    local close_brackets = 0\n    for i = 1, #brackets, 2\
    \ do\n        if brackets[i] == \"(\" then open_brackets = open_brackets + 1 end\n\
    \        if brackets[i] == \")\" then close_brackets = close_brackets + 1 end\n\
    \    end\n    if open_brackets == close_brackets then return true end\n    return\
    \ false\nend", "    local result = true\n    for i = 1, #brackets, 2 do\n    \
    \    if brackets[i] ~= \"(\" or brackets[i+1] ~= \")\" then\n            result\
    \ = false\n            break\n        end\n    end\n    return result\nend", " \
    \   local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i]\
    \ ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n      \
    \      break\n        end\n    end\n    return result\nend", "    local function\
    \ is_open_bracket(c)\n        return c == \"(\" or c == \"{\" or c == \"[\"\n\
    \    end\n    local function is_close_bracket(c)\n        return c == \")\" or\
    \ c == \"}\" or c == \"]\"\n    end\n    local function is_balanced(brackets)\n\
    \        local function is_balanced_bracket(c)\n            return is_open_bracket(c)\
    \ and is_close_bracket(brackets[#                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                      ", "  \
    \  local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i]\
    \ ~= \"(\" or brackets[i+1] ~= \")\" then\n            result = false\n      \
    \      break\n        end\n    end\n    return result\nend", "    if brackets\
    \ == \"\" then return true end\n    local bracket_count = 0\n    for i = 1, #brackets,\
    \ 2 do\n        if brackets[i] == \"(\" and brackets[i+1] == \")\" then\n    \
    \        bracket_count = bracket_count + 1\n        end\n    end\n    if bracket_count\
    \ == 0 then return true end\n    return bracket_count == #brackets\nend", "  \
    \  local i = 1\n    while i <= #brackets do\n        if brackets[i] ~= \"(\" then\n\
    \            return true\n        end\n        i = i + 1\n    end\n    return\
    \ false\nend", "    if brackets == \"\" then return true end\n    local bracket_count\
    \ = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == \"(\" and brackets[i+1]\
    \ == \")\" then\n            bracket_count = bracket_count + 1\n        end\n\
    \    end\n    if bracket_count == 0 then return true end\n    return bracket_count\
    \ == #brackets - 1\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
