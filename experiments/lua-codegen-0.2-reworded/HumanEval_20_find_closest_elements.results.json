{
  "language": "lua",
  "name": "HumanEval_20_find_closest_elements",
  "results": [
    {
      "exit_code": 1,
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_pair = {}\n    local min_diff = math.inf\n    for i = 1, #numbers, 2 do\n        local diff = math.abs(numbers[i] - numbers[i+1])\n        if diff < min_diff then\n            min_diff = diff\n            closest_pair = {numbers[i], numbers[i+1]}\n        end\n    end\n    return closest_pair\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb7adqtj6.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpb7adqtj6.lua:12: in local 'candidate'\n\t/tmp/tmpb7adqtj6.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907514
    },
    {
      "exit_code": 1,
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_pair = math.inf\n    local min_index = math.inf\n    local max_index = math.inf\n    for i = 1, #numbers, 2 do\n        local current_pair = math.abs(numbers[i] - numbers[i + 1])\n        if current_pair < closest_pair then\n            closest_pair = current_pair\n            min_index = i\n            max_index = i + 1\n        end\n    end\n    return (numbers[min_index], numbers[max_index])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp3nug_njh.lua:19: ')' expected near ','\n",
      "stdout": "",
      "timestamp": 1661907514
    },
    {
      "exit_code": 1,
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest = {}\n    local min_diff = math.inf\n    for i = 1, #numbers, 2 do\n        local diff = math.abs(numbers[i] - numbers[i+1])\n        if diff < min_diff then\n            min_diff = diff\n            closest = {numbers[i], numbers[i+1]}\n        end\n    end\n    return closest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpflz4zxjk.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpflz4zxjk.lua:12: in local 'candidate'\n\t/tmp/tmpflz4zxjk.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907514
    },
    {
      "exit_code": 1,
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_difference = math.inf\n    for i = 1, #numbers, 2 do\n        local difference = math.abs(numbers[i] - numbers[i + 1])\n        if difference < min_difference then\n            min_difference = difference\n            closest_elements = {numbers[i], numbers[i + 1]}\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_twke4ia.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp_twke4ia.lua:12: in local 'candidate'\n\t/tmp/tmp_twke4ia.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907514
    },
    {
      "exit_code": 1,
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_pair = {}\n    local min_value = math.inf\n    local max_value = math.inf\n    for i = 1, #numbers, 2 do\n        local value = numbers[i]\n        if value < min_value then\n            min_value = value\n            closest_pair[1] = i\n        end\n        if value > max_value then\n            max_value = value\n            closest_pair[2] = i\n        end\n    end\n    return closest_pair\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpivl77td1.lua:13: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpivl77td1.lua:13: in local 'candidate'\n\t/tmp/tmpivl77td1.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907514
    },
    {
      "exit_code": 1,
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest = {}\n    for i = 1, #numbers, 2 do\n        local diff = math.abs(numbers[i] - numbers[i+1])\n        if diff < closest[1] or closest[1] == nil then\n            closest[2] = numbers[i]\n            closest[1] = diff\n        end\n    end\n    return closest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr2bdx4c_.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpr2bdx4c_.lua:11: in local 'candidate'\n\t/tmp/tmpr2bdx4c_.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907514
    },
    {
      "exit_code": 1,
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest = {}\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmppjsrcfsr.lua:10: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907514
    },
    {
      "exit_code": 1,
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_value = math.inf\n    local max_value = math.inf\n    for i = 1, #numbers, 2 do\n        local value = numbers[i]\n        if value < min_value then\n            min_value = value\n            closest_elements[1] = value\n        end\n        if value > max_value then\n            max_value = value\n            closest_elements[2] = value\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2si2yyf8.lua:13: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp2si2yyf8.lua:13: in local 'candidate'\n\t/tmp/tmp2si2yyf8.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907514
    },
    {
      "exit_code": 1,
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_pair = {}\n    local closest_pair_index = {}\n    local closest_pair_value = {}\n    local closest_pair_value_index = {}\n    for i = 1, #numbers, 2 do\n        local closest_pair_value_index_i = math.mod(i, #numbers)\n        local closest_pair_value_i = numbers[closest_pair_value_index_i]\n        local closest_pair_i = numbers[closest_pair_value_index_i]\n        local closest_pair_value_index_j = math.mod(closest_pair_value_index_i + 1, #numbers)\n        local closest_pair_value_j = numbers[closest_pair_value_index_j]\n        local closest_pair_j = numbers[closest_pair_value_index_j]\n        local closest_pair_value_value = math.abs(closest_pair_value_i - closest_pair_value_j)\n        local closest_pair_value_value_index = math.mod(closest_pair_value_value, #numbers)\n        local closest_pair_value_value_i = numbers[closest_pair_value_value_index]\n        local closest_pair_value_value_j = numbers[closest_pair_value_value_index + 1]\n        local closest_pair_value_value_value = math.abs(closest_pair_value_value_i - closest_pair_value_value_j)\n        local closest_pair_value_value_value_index = math.mod(closest_pair_value_value_value, #numbers)\n        local closest_pair_value_value_value_i = numbers[closest_pair_value_value_value_index]\n        local closest_pair_value_value_value_j = numbers[closest_pair_value_value_value_index + 1]\n        local closest_pair_value_value_value_value = math.abs(closest_pair_value_value_value_i - closest_pair_value_value_value_j)\n        local\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp71kvfxhs.lua:40: 'end' expected (to close 'for' at line 12) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907514
    },
    {
      "exit_code": 1,
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest = {}\n    for i = 1, #numbers, 2 do\n        local diff = math.abs(numbers[i] - numbers[i+1])\n        if diff < closest[1] then closest[2] = numbers[i]\n            closest[1] = diff\n        end\n    end\n    return closest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd5r_qcsd.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpd5r_qcsd.lua:11: in local 'candidate'\n\t/tmp/tmpd5r_qcsd.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907514
    },
    {
      "exit_code": 1,
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_difference = math.inf\n    for i = 1, #numbers, 2 do\n        local difference = math.abs(numbers[i] - numbers[i+1])\n        if difference < min_difference then\n            min_difference = difference\n            closest_elementsnlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp2b7wz2y9.lua:15: ']' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907514
    },
    {
      "exit_code": 1,
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_pair = {}\n    local min_number = math.inf\n    local max_number = math.inf\n    for i = 1, #numbers, 2 do\n        local number = numbers[i]\n        local min_number = math.min(number, min_number)\n        local max_number = math.max(number, max_number)\n        if number < min_number then\n            closest_pair[1] = min_number\n            closest_pair[2] = number\n        else\n            closest_pair[2] = min_number\n            closest_pair[1] = number\n        end\n    end\n    return closest_pair\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare nil with number\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907514
    },
    {
      "exit_code": 1,
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    for i = 1, #numbers, 2 do\n        local closest_element = math.inf\n        for j = 1, #numbers, 2 do\n            if numbers[i] < numbers[j] then\n                closest_element = numbers[j]\n            end\n        end\n        closest_elementsnlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpi1g1m43p.lua:17: ']' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907514
    },
    {
      "exit_code": 1,
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_pair = {}\n    local min_diff = math.inf\n    for i = 1, #numbers, 2 do\n        for j = i + 1, #numbers, 2 do\n            local diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff then\n                min_diff = diff\n                closest_pair[1] = numbers[i]\n                closest_pair[2] = numbers[j]\n            end\n        end\n    end\n    return closest_pair\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd_r5j67y.lua:13: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpd_r5j67y.lua:13: in local 'candidate'\n\t/tmp/tmpd_r5j67y.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907514
    },
    {
      "exit_code": 1,
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest = {}\n    for i = 1, #numbers, 2 do\n        local min = math.inf\n        local max = math.inf\n        for j = 1, #numbers, 2 do\n            if numbers[i] > numbers[j] then\n                min = numbers[j]\n            elseif numbers[i] < numbers[j] then\n                max = numbers[j]\n            end\n        end\n        closest[i] = min\n        closest[i + 1] = max\n    end\n    return closest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5g7dp4e9.lua:28: expected: {3.9, 4}\nactual: {2=5, 3=1, 4=5, 5=3.9}\nstack traceback:\n\t/tmp/tmp5g7dp4e9.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907514
    },
    {
      "exit_code": 1,
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest = {}\n    local min_diff = math.inf\n    for i = 1, #numbers, 2 do\n        diff = math.abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff then\n            min_diff = diff\n            closest = { numbers[i], numbers[i + 1] }\n        end\n    end\n    return closest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf2qsk2bx.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpf2qsk2bx.lua:12: in local 'candidate'\n\t/tmp/tmpf2qsk2bx.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907514
    },
    {
      "exit_code": 1,
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_numbers = {}\n    for i = 1, #numbers, 2 do\n        local closest_number = math.inf\n        for j = 1, #numbers, 2 do\n            if numbers[i] > numbers[j] then\n                closest_number = numbers[j]\n            end\n        end\n        closest_numbers[closest_number] = i\n    end\n    return closest_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwt2kym9l.lua:16: table index is nil\nstack traceback:\n\t/tmp/tmpwt2kym9l.lua:16: in local 'candidate'\n\t/tmp/tmpwt2kym9l.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907514
    },
    {
      "exit_code": 1,
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    for i = 1, #numbers, 2 do\n        local closest_element = math.inf\n        for j = 1, #numbers, 2 do\n            if numbers[i] > numbers[j] then\n                local closest_element = numbers[j]\n            end\n        end\n        closest_elements[#                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpz9bpmuxk.lua:17: ']' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907514
    },
    {
      "exit_code": 1,
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_diff = math.inf\n    for i = 1, #numbers, 2 do\n        diff = math.abs(numbers[i] - numbers[i+1])\n        if diff < min_diff then\n            min_diff = diff\n            closest_elements = {numbers[i], numbers[i+1]}\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprwlkp8sd.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmprwlkp8sd.lua:12: in local 'candidate'\n\t/tmp/tmprwlkp8sd.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907514
    },
    {
      "exit_code": 1,
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    for i = 1, #numbers, 2 do\n        local closest_element = math.inf\n        for j = 1, #numbers, 2 do\n            if i != j then\n                local distance = math.abs(numbers[i] - numbers[j])\n                if distance < closest_element then\n                    closest_element = distance\n                end\n            end\n        end\n        closest_elementsnlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp_tycslzx.lua:12: 'then' expected near '!'\n",
      "stdout": "",
      "timestamp": 1661907514
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest = {}\n    for i = 1, #numbers, 2 do\n        local diff = math.abs(numbers[i] - numbers[i + 1])\n        if not closest or diff < closest[1] then\n            closest = { numbers[i], numbers[i + 1], diff }\n        end\n    end\n    return closest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest = {}\n    for i = 1, #numbers, 2 do\n        local diff = math.abs(numbers[i] - numbers[i+1])\n        if diff < closest[1] then closest[1] = diff\n        elseif diff > closest[2] then closest[2] = diff\n    end\n    return closest[1], closest[2]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmphgtn69ad.lua:27: 'end' expected (to close 'function' at line 7) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    for i = 1, #numbers, 2 do\n        local min = math.inf\n        local max = math.inf\n        for j = 1, #numbers, 2 do\n            if numbers[i] > numbers[j] then\n                min = numbers[j]\n            elseif numbers[i] < numbers[j] then\n                max = numbers[j]\n            end\n        end\n        closest_elements[i] = min\n        closest_elements[j] = max\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptzyrho7f.lua:20: table index is nil\nstack traceback:\n\t/tmp/tmptzyrho7f.lua:20: in local 'candidate'\n\t/tmp/tmptzyrho7f.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_distance = math.inf\n    for i = 1, #numbers, 2 do\n        local distance = math.abs(numbers[i] - numbers[i+1])\n        if distance < min_distance then\n            min_distance = distance\n            closest_elements = {numbers[i], numbers[i+1]}\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8acavn_o.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp8acavn_o.lua:12: in local 'candidate'\n\t/tmp/tmp8acavn_o.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    for i = 1, #numbers, 2 do\n        local closest_element = math.inf\n        for j = 1, #numbers, 2 do\n            if i != j then\n                local distance = math.abs(numbers[i] - numbers[j])\n                if distance < closest_element then\n                    closest_element = distance\n                end\n            end\n        end\n        closest_elements[#closest_elements + 1] = closest_element\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpgevx46ca.lua:12: 'then' expected near '!'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    for i = 1, #numbers, 2 do\n        local closest_element = math.inf\n        for j = 1, #numbers, 2 do\n            if i != j then\n                local distance = math.abs(numbers[i] - numbers[j])\n                if distance < closest_element then\n                    closest_element = distance\n                end\n            end\n        end\n        closest_elements[i] = closest_element\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpgrxdvf7e.lua:12: 'then' expected near '!'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest = {}\n    for i = 1, #numbers, 2 do\n        local min = math.inf\n        local max = math.inf\n        for j = 1, #numbers, 2 do\n            if numbers[i] > numbers[j] then\n                min = numbers[j]\n            elseif numbers[i] < numbers[j] then\n                max = numbers[j]\n            end\n        end\n        closest[i] = min\n        closest[i+1] = max\n    end\n    return closest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpso20sfrh.lua:28: expected: {3.9, 4.0}\nactual: {2=5.0, 3=1.0, 4=5.0, 5=3.9}\nstack traceback:\n\t/tmp/tmpso20sfrh.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_value = math.inf\n    local max_value = math.inf\n    for i = 1, #numbers, 2 do\n        local value = numbers[i]\n        if value < min_value then\n            min_value = value\n            closest_elements[1] = value\n        end\n        if value > max_value then\n            max_value = value\n            closest_elements[2] = value\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2si2yyf8.lua:13: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp2si2yyf8.lua:13: in local 'candidate'\n\t/tmp/tmp2si2yyf8.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907514
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_pair = {}\n    for i = 1, #numbers, 2 do\n        local closest_pair[i] = math.inf\n        for j = i + 1, #numbers, 2 do\n            local diff = numbers[i] - numbers[j]\n            if diff < closest_pair[i] then closest_pair[i] = diff\n            if diff > closest_pair[j] then closest_pair[j] = diff\n    end\n    return closest_pair[1], closest_pair[2]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpw2voom6w.lua:10: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_pair = math.inf\n    local closest_pair_index = nil\n    local closest_pair_value = nil\n    for i = 1, #numbers, 2 do\n        local current_value = numbers[i]\n        local current_index = i\n        for j = i + 1, #numbers, 2 do\n            local candidate_value = numbers[j]\n            local candidate_index = j\n            if math.abs(candidate_value - current_value) < closest_pair then\n                closest_pair = math.abs(candidate_value - current_value)\n                closest_pair_index = candidate_index\n                closest_pair_value = candidate_value\n            end\n        end\n    end\n    return closest_pair_index, closest_pair_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplzm8rop_.lua:17: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmplzm8rop_.lua:17: in local 'candidate'\n\t/tmp/tmplzm8rop_.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_pair = math.inf\n    for i = 1, #numbers, 2 do\n        local distance = math.sqrt(math.pow(numbers[i], 2) + math.pow(numbers[i + 1], 2))\n        if distance < closest_pair then closest_pair = distance end\n    end\n    return closest_pair, numbers[1], numbers[2]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc67ute9o.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpc67ute9o.lua:11: in local 'candidate'\n\t/tmp/tmpc67ute9o.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_pair = {}\n    local closest_pair_index = {}\n    local closest_pair_value = {}\n    local closest_pair_value_index = {}\n    for i = 1, #numbers, 2 do\n        local value = numbers[i]\n        local value_index = i\n        local closest_pair_value_index = value_index\n        local closest_pair_value = value\n        local closest_pair_index = value_index\n        for j = i + 1, #numbers, 2 do\n            local other_value = numbers[j]\n            local other_value_index = j\n            local distance = math.sqrt(math.pow(value - other_value, 2))\n            if distance < closest_pair_value then\n                closest_pair_value = other_value\n                closest_pair_value_index = other_value_index\n                closest_pair_index = other_value_index\n            end\n        end\n    end\n    closest_pair[1] = closest_pair_value\n    closest_pair[2] = closest_pair_index\n    closest_pair_value[1] = closest_pair_value_index\n    closest_pair_value[2] = closest_pair_value_index\n    return closest_pair\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmebdcunm.lua:39: expected: {3.9, 4.0}\nactual: <table 04> {<table 02> {<table 01> {}, <table 01>}, <table 03> {}}\nstack traceback:\n\t/tmp/tmpmebdcunm.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest = math.inf\n    local min = math.inf\n    local max = math.inf\n    for i = 1, #numbers, 2 do\n        local current = numbers[i]\n        local diff = current - numbers[i - 1]\n        if diff < closest then\n            closest = diff\n            min = numbers[i - 1]\n            max = numbers[i]\n        end\n    end\n    return min, max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8850jpio.lua:13: attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\t/tmp/tmp8850jpio.lua:13: in local 'candidate'\n\t/tmp/tmp8850jpio.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest = {}\n    for i = 1, #numbers, 2 do\n        local min = math.inf\n        local max = math.inf\n        for j = 1, #numbers, 2 do\n            if numbers[i] > numbers[j] then\n                min = numbers[j]\n            elseif numbers[i] < numbers[j] then\n                max = numbers[j]\n            end\n        end\n        closest[i] = min\n        closest[i + 1] = max\n    end\n    return closest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5g7dp4e9.lua:28: expected: {3.9, 4}\nactual: {2=5, 3=1, 4=5, 5=3.9}\nstack traceback:\n\t/tmp/tmp5g7dp4e9.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907514
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    for i=1,#numbers,2 do\n        local closest_element = math.inf\n        for j=1,#numbers,2 do\n            local distance = math.abs(numbers[i] - numbers[j])\n            if distance < closest_element then\n                closest_element = distance\n            end\n        end\n        closest_elements[#closest_elements+1] = closest_element\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp524bjlv_.lua:13: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp524bjlv_.lua:13: in local 'candidate'\n\t/tmp/tmp524bjlv_.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_pair = {}\n    local min_value = math.inf\n    local max_value = math.inf\n    for i = 1, #numbers, 2 do\n        local value = numbers[i]\n        if value < min_value then\n            min_value = value\n            closest_pair[1] = i\n        end\n        if value > max_value then\n            max_value = value\n            closest_pair[2] = i\n        end\n    end\n    return closest_pair\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpivl77td1.lua:13: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpivl77td1.lua:13: in local 'candidate'\n\t/tmp/tmpivl77td1.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907514
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest = {}\n    for i = 1, #numbers, 2 do\n        local diff = math.abs(numbers[i] - numbers[i + 1])\n        if not closest or diff < closest[1] then\n            closest = { numbers[i], numbers[i + 1], diff }\n        end\n    end\n    return closest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_distance = math.inf\n    for i = 1, #numbers, 2 do\n        local distance = math.abs(numbers[i] - numbers[i + 1])\n        if distance < min_distance then\n            min_distance = distance\n            closest_elements = {numbers[i], numbers[i + 1]}\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqqfext4n.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpqqfext4n.lua:12: in local 'candidate'\n\t/tmp/tmpqqfext4n.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest = math.inf\n    local min = math.inf\n    local max = math.inf\n    for i = 1, #numbers, 2 do\n        local current = numbers[i]\n        local diff = math.abs(current - numbers[i+1])\n        if diff < closest then\n            closest = diff\n            min = numbers[i]\n            max = numbers[i+1]\n        end\n    end\n    return min, max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxjrq4f_q.lua:14: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpxjrq4f_q.lua:14: in local 'candidate'\n\t/tmp/tmpxjrq4f_q.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest = {}\n    for i = 1, #numbers, 2 do\n        local diff = math.abs(numbers[i] - numbers[i+1])\n        if not closest or diff < closest[1] then\n            closest = { numbers[i], numbers[i+1], diff }\n        end\n    end\n    return closest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzk4dj26s.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpzk4dj26s.lua:11: in local 'candidate'\n\t/tmp/tmpzk4dj26s.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_value = math.inf\n    local max_value = math.inf\n    for i = 1, #numbers, 2 do\n        local value = numbers[i]\n        if value < min_value then\n            min_value = value\n            closest_elements[1] = value\n        end\n        if value > max_value then\n            max_value = value\n            closest_elements[2] = value\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2si2yyf8.lua:13: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp2si2yyf8.lua:13: in local 'candidate'\n\t/tmp/tmp2si2yyf8.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907514
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    for i=1,#numbers,2 do\n        local closest_element = math.inf\n        for j=1,#numbers,2 do\n            if numbers[i] > numbers[j] then\n                closest_element = numbers[j]\n            end\n        end\n        closest_elements[#closest_elements+1] = closest_element\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnrxojdzh.lua:24: expected: {3.9, 4.0}\nactual: {1.0, 3.9}\nstack traceback:\n\t/tmp/tmpnrxojdzh.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_diff = math.inf\n    for i = 1, #numbers, 2 do\n        local diff = math.abs(numbers[i] - numbers[i+1])\n        if diff < min_diff then\n            min_diff = diff\n            closest_elements = {numbers[i], numbers[i+1]}\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpslo4ossx.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpslo4ossx.lua:12: in local 'candidate'\n\t/tmp/tmpslo4ossx.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    for i = 1, #numbers, 2 do\n        local closest_element = {}\n        local closest_element_value = math.inf\n        for j = 1, #numbers, 2 do\n            if numbers[i] > numbers[j] then\n                local closest_element_value = numbers[j]\n                closest_element = j\n            end\n        end\n        closest_elements[i] = closest_element_value\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    for i = 1, #numbers, 2 do\n        local min_diff = math.inf\n        for j = 1, #numbers, 2 do\n            local diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff then\n                min_diff = diff\n                closest_elements[1] = numbers[i]\n                closest_elements[2] = numbers[j]\n            end\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2ja21lpz.lua:13: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp2ja21lpz.lua:13: in local 'candidate'\n\t/tmp/tmp2ja21lpz.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_distance = math.inf\n    for i = 1, #numbers, 2 do\n        local distance = math.abs(numbers[i] - numbers[i+1])\n        if distance < min_distance then\n            min_distance = distance\n            closest_elements[1] = numbers[i]\n            closest_elements[2] = numbers[i+1]\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpau1wgxz7.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpau1wgxz7.lua:12: in local 'candidate'\n\t/tmp/tmpau1wgxz7.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_pair = math.inf\n    local closest_pair_index = 0\n    local closest_pair_value = 0\n    for i = 1, #numbers, 2 do\n        local value = numbers[i]\n        local diff = math.abs(value - numbers[i - 1])\n        if diff < closest_pair then\n            closest_pair = diff\n            closest_pair_index = i\n            closest_pair_value = value\n        end\n    end\n    return closest_pair_value, closest_pair_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpms2k8cur.lua:13: attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\t/tmp/tmpms2k8cur.lua:13: in local 'candidate'\n\t/tmp/tmpms2k8cur.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest = {}\n    for i = 1, #numbers, 2 do\n        local diff = math.abs(numbers[i] - numbers[i + 1])\n        if not closest or diff < closest[1] then\n            closest = { numbers[i], diff }\n        end\n    end\n    return closest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsrr1p0_5.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpsrr1p0_5.lua:11: in local 'candidate'\n\t/tmp/tmpsrr1p0_5.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local closest_elements_index = {}\n    for i = 1, #numbers, 2 do\n        local closest_elements_index[numbers[i]] = i\n        local closest_elements[i] = numbers[i]\n    end\n    return closest_elements, closest_elements_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpkzjuckbw.lua:11: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_distance = math.inf\n    for i = 1, #numbers, 2 do\n        local distance = math.abs(numbers[i] - numbers[i+1])\n        if distance < min_distance then\n            min_distance = distance\n            closest_elements[1] = numbers[i]\n            closest_elements[2] = numbers[i+1]\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpau1wgxz7.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpau1wgxz7.lua:12: in local 'candidate'\n\t/tmp/tmpau1wgxz7.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    for i = 1, #numbers, 2 do\n        local closest_element = math.inf\n        for j = 1, #numbers, 2 do\n            if numbers[i] > numbers[j] then\n                local closest_element = numbers[j]\n            end\n        end\n        closest_elements[#closest_elements + 1] = closest_element\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc94wojh3.lua:24: expected: {3.9, 4.0}\nactual: {}\nstack traceback:\n\t/tmp/tmpc94wojh3.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_pair = {}\n    local closest_pair_index = {}\n    local closest_pair_value = {}\n    local closest_pair_value_index = {}\n    for i = 1, #numbers, 2 do\n        local closest_pair_value_index_i = math.mod(i, #numbers)\n        local closest_pair_value_i = numbers[closest_pair_value_index_i]\n        local closest_pair_i = numbers[closest_pair_value_index_i]\n        local closest_pair_value_index_j = math.mod(closest_pair_value_index_i + 1, #numbers)\n        local closest_pair_value_j = numbers[closest_pair_value_index_j]\n        local closest_pair_j = numbers[closest_pair_value_index_j]\n        local distance_i = math.abs(closest_pair_i - closest_pair_value_i)\n        local distance_j = math.abs(closest_pair_j - closest_pair_value_j)\n        if distance_i < distance_j then\n            closest_pair_index[i] = closest_pair_value_index_i\n            closest_pair_value[i] = closest_pair_value_i\n            closest_pair_index[j] = closest_pair_value_index_j\n            closest_pair_value[j] = closest_pair_value_j\n        end\n    end\n    return closest_pair_index, closest_pair_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps5id4s0w.lua:13: attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmps5id4s0w.lua:13: in local 'candidate'\n\t/tmp/tmps5id4s0w.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest = {}\n    for i = 1, #numbers, 2 do\n        local diff = math.abs(numbers[i] - numbers[i+1])\n        if not closest[diff] then closest[diff] = numbers[i] end\n    end\n    return closest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp48aaluav.lua:19: expected: {3.9, 4.0}\nactual: {0.1=3.9, 1.0, 2.8=5.0}\nstack traceback:\n\t/tmp/tmp48aaluav.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    for i = 1, #numbers, 2 do\n        local closest_element = math.inf\n        for j = 1, #numbers, 2 do\n            if numbers[i] > numbers[j] then\n                local closest_element = math.min(closest_element, numbers[j] - numbers[i])\n            end\n        end\n        closest_elements[#closest_elements + 1] = closest_element\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare number with nil\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_pair = {}\n    local min_value = math.inf\n    local max_value = math.inf\n    for i = 1, #numbers, 2 do\n        local value = numbers[i]\n        if value < min_value then\n            min_value = value\n            closest_pair[1] = i\n        end\n        if value > max_value then\n            max_value = value\n            closest_pair[2] = i\n        end\n    end\n    return closest_pair\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpivl77td1.lua:13: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpivl77td1.lua:13: in local 'candidate'\n\t/tmp/tmpivl77td1.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907514
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_diff = math.inf\n    for i = 1, #numbers, 2 do\n        local diff = math.abs(numbers[i] - numbers[i+1])\n        if diff < min_diff then\n            min_diff = diff\n            closest_elements[1] = numbers[i]\n            closest_elements[2] = numbers[i+1]\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnp8z349f.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpnp8z349f.lua:12: in local 'candidate'\n\t/tmp/tmpnp8z349f.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest = {}\n    for i = 1, #numbers, 2 do\n        local min = math.inf\n        local max = math.inf\n        for j = 1, #numbers, 2 do\n            if numbers[i] > numbers[j] then\n                min = numbers[j]\n            elseif numbers[i] < numbers[j] then\n                max = numbers[j]\n            end\n        end\n        closest[i] = min\n        closest[i+1] = max\n    end\n    return closest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpso20sfrh.lua:28: expected: {3.9, 4.0}\nactual: {2=5.0, 3=1.0, 4=5.0, 5=3.9}\nstack traceback:\n\t/tmp/tmpso20sfrh.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_value = math.inf\n    local max_value = math.inf\n    for i = 1, #numbers, 2 do\n        local value = numbers[i]\n        if value < min_value then\n            min_value = value\n            closest_elements[1] = value\n        end\n        if value > max_value then\n            max_value = value\n            closest_elements[2] = value\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2si2yyf8.lua:13: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp2si2yyf8.lua:13: in local 'candidate'\n\t/tmp/tmp2si2yyf8.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907514
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_pair = {}\n    local closest_pair_index = {}\n    local closest_pair_value = {}\n    local closest_pair_value_index = {}\n    for i = 1, #numbers, 2 do\n        local closest_pair_value_index_i = math.mod(i, #numbers)\n        local closest_pair_value_i = numbers[closest_pair_value_index_i]\n        local closest_pair_i = math.mod(closest_pair_value_i, #numbers)\n        local closest_pair_value_index_j = math.mod(closest_pair_value_i, #numbers)\n        local closest_pair_value_j = numbers[closest_pair_value_index_j]\n        local closest_pair_j = math.mod(closest_pair_value_j, #numbers)\n        if closest_pair_i ~= closest_pair_j then\n            if closest_pair_value_i < closest_pair_value_j then\n                closest_pair_value = closest_pair_value_i\n                closest_pair_value_index = closest_pair_value_index_i\n                closest_pair_index = closest_pair_i\n            else\n                closest_pair_value = closest_pair_value_j\n                closest_pair_value_index = closest_pair_value_index_j\n                closest_pair_index = closest_pair_j\n            end\n        end\n    end\n    return closest_pair_value, closest_pair_value_index, closest_pair_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw68acidi.lua:13: attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmpw68acidi.lua:13: in local 'candidate'\n\t/tmp/tmpw68acidi.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_pair = math.inf\n    local closest_pair_index = 0\n    local closest_pair_value = 0\n    local closest_pair_value_index = 0\n    for i = 1, #numbers, 2 do\n        local value = numbers[i]\n        local value_index = i\n        local distance = math.inf\n        for j = 1, #numbers, 2 do\n            if j == i then continue\n            local other_value = numbers[j]\n            local other_value_index = j\n            local distance_between = math.abs(value - other_value)\n            if distance_between < distance then\n                distance = distance_between\n                closest_pair_index = i\n                closest_pair_value_index = j\n                closest_pair_value = other_value\n            end\n        end\n        if distance < closest_pair then\n            closest_pair = distance\n            closest_pair_index = value_index\n            closest_pair_value = value\n        end\n    end\n    return closest_pair_value, closest_pair_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmp0f64jq7m.lua:18: syntax error near 'local'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_pair = math.inf\n    local min_index = math.inf\n    local max_index = math.inf\n    for i = 1, #numbers, 2 do\n        local diff = numbers[i] - numbers[i - 1]\n        if diff < closest_pair then\n            closest_pair = diff\n            min_index = i - 1\n            max_index = i\n        end\n    end\n    return (numbers[min_index], numbers[max_index])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7mc5og15.lua:19: ')' expected near ','\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    for i=1,#numbers,2 do\n        local closest_element = math.inf\n        for j=1,#numbers,2 do\n            if numbers[i] > numbers[j] then\n                closest_element = numbers[j]\n            end\n        end\n        closest_elements[#closest_elements+1] = closest_element\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnrxojdzh.lua:24: expected: {3.9, 4.0}\nactual: {1.0, 3.9}\nstack traceback:\n\t/tmp/tmpnrxojdzh.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_distance = math.inf\n    for i = 1, #numbers, 2 do\n        local distance = math.abs(numbers[i] - numbers[i+1])\n        if distance < min_distance then\n            min_distance = distance\n            closest_elements = {numbers[i], numbers[i+1]}\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8acavn_o.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp8acavn_o.lua:12: in local 'candidate'\n\t/tmp/tmp8acavn_o.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest = {}\n    for i = 1, #numbers, 2 do\n        local diff = math.abs(numbers[i] - numbers[i+1])\n        if diff < closest[1] then closest[2] = numbers[i]\n            closest[1] = diff\n        end\n    end\n    return closest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd5r_qcsd.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpd5r_qcsd.lua:11: in local 'candidate'\n\t/tmp/tmpd5r_qcsd.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907514
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest = {}\n    for i = 1, #numbers, 2 do\n        local diff = math.abs(numbers[i] - numbers[i+1])\n        if diff < closest[1] then closest[1] = diff\n        elseif diff > closest[2] then closest[2] = diff\n    end\n    return closest[1], closest[2]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmphgtn69ad.lua:27: 'end' expected (to close 'function' at line 7) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_value = math.inf\n    local max_value = math.inf\n    for i=1,#numbers,2 do\n        local value = numbers[i]\n        if value < min_value then\n            min_value = value\n            closest_elements[1] = numbers[i+1]\n        end\n        if value > max_value then\n            max_value = value\n            closest_elements[2] = numbers[i+1]\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqn_tfzwl.lua:13: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpqn_tfzwl.lua:13: in local 'candidate'\n\t/tmp/tmpqn_tfzwl.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_diff = math.inf\n    for i = 1, #numbers, 2 do\n        local diff = math.abs(numbers[i] - numbers[i+1])\n        if diff < min_diff then\n            min_diff = diff\n            closest_elements = {numbers[i], numbers[i+1]}\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpslo4ossx.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpslo4ossx.lua:12: in local 'candidate'\n\t/tmp/tmpslo4ossx.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest = math.inf\n    local min = math.inf\n    local max = math.inf\n    for i = 1, #numbers, 2 do\n        local diff = numbers[i] - numbers[i-1]\n        if diff < closest then\n            closest = diff\n            min = numbers[i]\n            max = numbers[i-1]\n        end\n    end\n    return min, max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb8m1mboh.lua:12: attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\t/tmp/tmpb8m1mboh.lua:12: in local 'candidate'\n\t/tmp/tmpb8m1mboh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_diff = math.inf\n    for i = 1, #numbers, 2 do\n        local diff = math.abs(numbers[i] - numbers[i+1])\n        if diff < min_diff then\n            min_diff = diff\n            closest_elements = {numbers[i], numbers[i+1]}\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpslo4ossx.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpslo4ossx.lua:12: in local 'candidate'\n\t/tmp/tmpslo4ossx.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_pair = {}\n    local min_value = math.inf\n    local max_value = -math.inf\n    for i = 1, #numbers, 2 do\n        local value = numbers[i]\n        if value < min_value then\n            min_value = value\n            closest_pair[1] = i\n        end\n        if value > max_value then\n            max_value = value\n            closest_pair[2] = i\n        end\n    end\n    return closest_pair\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc3fnwjee.lua:10: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpc3fnwjee.lua:10: in local 'candidate'\n\t/tmp/tmpc3fnwjee.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_diff = math.inf\n    for i = 1, #numbers, 2 do\n        local diff = math.abs(numbers[i] - numbers[i+1])\n        if diff < min_diff then\n            min_diff = diff\n            closest_elements = {numbers[i], numbers[i+1]}\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpslo4ossx.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpslo4ossx.lua:12: in local 'candidate'\n\t/tmp/tmpslo4ossx.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    for i = 1, #numbers, 2 do\n        local min = math.inf\n        local max = math.inf\n        for j = 1, #numbers, 2 do\n            if numbers[i] > numbers[j] then\n                min = math.min(min, numbers[j])\n            else\n                max = math.max(max, numbers[j])\n        end\n        closest_elements[i] = min\n        closest_elements[i + 1] = max\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmp83rrjlgp.lua:34: 'end' expected (to close 'function' at line 7) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest = {}\n    local min_distance = math.inf\n    for i = 1, #numbers, 2 do\n        local distance = math.abs(numbers[i] - numbers[i+1])\n        if distance < min_distance then\n            min_distance = distance\n            closest = {numbers[i], numbers[i+1]}\n        end\n    end\n    return closest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7q1dyxzb.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp7q1dyxzb.lua:12: in local 'candidate'\n\t/tmp/tmp7q1dyxzb.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_diff = math.inf\n    for i = 1, #numbers, 2 do\n        local diff = math.abs(numbers[i] - numbers[i+1])\n        if diff < min_diff then\n            min_diff = diff\n            closest_elements = {numbers[i], numbers[i+1]}\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpslo4ossx.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpslo4ossx.lua:12: in local 'candidate'\n\t/tmp/tmpslo4ossx.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local closest_elements_index = {}\n    for i=1,#numbers,2 do\n        local closest_elements_index[numbers[i]] = i\n        local closest_elements[i] = numbers[i]\n    end\n    return closest_elements, closest_elements_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmplgqqdkuv.lua:11: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    for i = 1, #numbers, 2 do\n        local closest_element = math.inf\n        for j = 1, #numbers, 2 do\n            if i != j then\n                local distance = math.abs(numbers[i] - numbers[j])\n                if distance < closest_element then\n                    closest_element = distance\n                end\n            end\n        end\n        closest_elements[i] = closest_element\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpgrxdvf7e.lua:12: 'then' expected near '!'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest = {}\n    for i = 1, #numbers, 2 do\n        local diff = math.abs(numbers[i] - numbers[i - 1])\n        if not closest[diff] then closest[diff] = numbers[i]\n        else if diff < closest[diff][2] then closest[diff] = numbers[i]\n    end\n    return closest[1], closest[2]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpjnlog1mf.lua:27: 'end' expected (to close 'for' at line 9) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_diff = math.inf\n    for i = 1, #numbers, 2 do\n        local diff = math.abs(numbers[i] - numbers[i+1])\n        if diff < min_diff then\n            min_diff = diff\n            closest_elements = {numbers[i], numbers[i+1]}\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpslo4ossx.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpslo4ossx.lua:12: in local 'candidate'\n\t/tmp/tmpslo4ossx.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    for i = 1, #numbers, 2 do\n        local closest_element = math.inf\n        for j = 1, #numbers, 2 do\n            if i != j then\n                local distance = math.abs(numbers[i] - numbers[j])\n                if distance < closest_element then\n                    closest_element = distance\n                end\n            end\n        end\n        closest_elements[i] = closest_element\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpgrxdvf7e.lua:12: 'then' expected near '!'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local closest_elements_index = {}\n    local min_distance = math.inf\n    for i = 1, #numbers, 2 do\n        local distance = math.abs(numbers[i] - numbers[i + 1])\n        if distance < min_distance then\n            min_distance = distance\n            closest_elements_index[i] = i\n            closest_elements_index[i + 1] = i + 1\n        end\n    end\n    for i = 1, #closest_elements_index, 2 do\n        closest_elements[closest_elements_index[i]] = numbers[i]\n        closest_elements[closest_elements_index[i + 1]] = numbers[i + 1]\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4ba5wnwu.lua:13: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp4ba5wnwu.lua:13: in local 'candidate'\n\t/tmp/tmp4ba5wnwu.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_distance = math.inf\n    for i = 1, #numbers, 2 do\n        local distance = math.abs(numbers[i] - numbers[i+1])\n        if distance < min_distance then\n            min_distance = distance\n            closest_elements[1] = numbers[i]\n            closest_elements[2] = numbers[i+1]\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpau1wgxz7.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpau1wgxz7.lua:12: in local 'candidate'\n\t/tmp/tmpau1wgxz7.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_pair = {}\n    local min_diff = math.inf\n    for i = 1, #numbers, 2 do\n        local diff = math.abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff then\n            min_diff = diff\n            closest_pair = {numbers[i], numbers[i + 1]}\n        end\n    end\n    return closest_pair\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2r0h6fet.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp2r0h6fet.lua:12: in local 'candidate'\n\t/tmp/tmp2r0h6fet.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_diff = math.inf\n    for i = 1, #numbers, 2 do\n        diff = math.abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff then\n            min_diff = diff\n            closest_elements = {numbers[i], numbers[i + 1]}\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmoki_dt_.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpmoki_dt_.lua:12: in local 'candidate'\n\t/tmp/tmpmoki_dt_.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_value = math.inf\n    local max_value = math.inf\n    for i = 1, #numbers, 2 do\n        local value = numbers[i]\n        if value < min_value then\n            min_value = value\n            closest_elements[1] = value\n        end\n        if value > max_value then\n            max_value = value\n            closest_elements[2] = value\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2si2yyf8.lua:13: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp2si2yyf8.lua:13: in local 'candidate'\n\t/tmp/tmp2si2yyf8.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907514
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_numbers = {}\n    for i = 1, #numbers, 2 do\n        local closest_number = math.inf\n        for j = 1, #numbers, 2 do\n            if i != j then\n                local distance = math.abs(numbers[i] - numbers[j])\n                if distance < closest_number then\n                    closest_number = distance\n                end\n            end\n        end\n        closest_numbers[i] = closest_number\n    end\n    return closest_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpf0b0mj1g.lua:12: 'then' expected near '!'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    for i = 1, #numbers, 2 do\n        local closest_element = math.inf\n        for j = 1, #numbers, 2 do\n            if numbers[i] > numbers[j] then\n                local closest_element = math.min(closest_element, numbers[j] - numbers[i])\n            end\n        end\n        closest_elements[i] = closest_element\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare number with nil\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    for i = 1, #numbers, 2 do\n        local closest_element = {}\n        local closest_distance = math.inf\n        for j = 1, #numbers, 2 do\n            local distance = math.abs(numbers[i] - numbers[j])\n            if distance < closest_distance then\n                closest_distance = distance\n                closest_element = numbers[j]\n            end\n        end\n        closest_elements[#closest_elements + 1] = closest_element\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkqwe8c6g.lua:14: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpkqwe8c6g.lua:14: in local 'candidate'\n\t/tmp/tmpkqwe8c6g.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    for i = 1, #numbers, 2 do\n        local min = math.inf\n        local max = math.inf\n        for j = 1, #numbers, 2 do\n            if numbers[i] > numbers[j] then\n                min = numbers[j]\n            elseif numbers[i] < numbers[j] then\n                max = numbers[j]\n            end\n        end\n        closest_elements[i] = min\n        closest_elements[j] = max\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptzyrho7f.lua:20: table index is nil\nstack traceback:\n\t/tmp/tmptzyrho7f.lua:20: in local 'candidate'\n\t/tmp/tmptzyrho7f.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_pair = {}\n    local closest_pair_index = {}\n    for i = 1, #numbers, 2 do\n        local closest_pair_value = math.inf\n        for j = 1, #numbers, 2 do\n            if i == j or numbers[i] == numbers[j] then\n                continue\n            local distance = math.abs(numbers[i] - numbers[j])\n            if distance < closest_pair_value then\n                closest_pair_value = distance\n                closest_pair_index = j\n            end\n        end\n        if closest_pair_value < math.inf then\n            closest_pair[i] = numbers[i]\n            closest_pair[j] = numbers[j]\n            closest_pair_index[i] = i\n            closest_pair_index[j] = j\n        end\n    end\n    return closest_pair, closest_pair_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpar3a4hsc.lua:15: syntax error near 'local'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest = {}\n    for i=1,#numbers,2 do\n        local diff = math.abs(numbers[i] - numbers[i+1])\n        if not closest[diff] then\n            closest[diff] = {number = numbers[i], index = i}\n        end\n    end\n    return closest[1][1], closest[2][1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0i5ftkcu.lua:15: attempt to index a nil value (field 'integer index')\nstack traceback:\n\t/tmp/tmp0i5ftkcu.lua:15: in local 'candidate'\n\t/tmp/tmp0i5ftkcu.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_value = math.inf\n    local max_value = math.inf\n    for i = 1, #numbers, 2 do\n        local value = numbers[i]\n        if value < min_value then\n            min_value = value\n            closest_elements[1] = value\n        end\n        if value > max_value then\n            max_value = value\n            closest_elements[2] = value\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2si2yyf8.lua:13: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp2si2yyf8.lua:13: in local 'candidate'\n\t/tmp/tmp2si2yyf8.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907514
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    for i=1,#numbers,2 do\n        local closest_element = math.inf\n        for j=1,#numbers,2 do\n            if numbers[i] < numbers[j] then\n                closest_element = numbers[j]\n            end\n        end\n        closest_elements[#closest_elements+1] = closest_element\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbfcg82dm.lua:24: expected: {3.9, 4.0}\nactual: {5.0, 5.0}\nstack traceback:\n\t/tmp/tmpbfcg82dm.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local closest_elements_index = {}\n    for i = 1, #numbers, 2 do\n        local closest_elements_index[numbers[i]] = i\n        local closest_elements[i] = numbers[i]\n    end\n    return closest_elements, closest_elements_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpkzjuckbw.lua:11: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    for i = 1, #numbers, 2 do\n        local closest_element = {}\n        local closest_element_value = math.inf\n        for j = 1, #numbers, 2 do\n            if numbers[i] > numbers[j] then\n                local closest_element_value = numbers[j]\n                closest_element = j\n            elseif numbers[i] < numbers[j] then\n                local closest_element_value = numbers[i]\n                closest_element = i\n            end\n        end\n        closest_elements[closest_element] = closest_element_value\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprw9ey3ur.lua:29: expected: {3.9, 4.0}\nactual: {}\nstack traceback:\n\t/tmp/tmprw9ey3ur.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_distance = math.inf\n    for i = 1, #numbers, 2 do\n        local distance = math.abs(numbers[i] - numbers[i+1])\n        if distance < min_distance then\n            min_distance = distance\n            closest_elements = {numbers[i], numbers[i+1]}\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8acavn_o.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp8acavn_o.lua:12: in local 'candidate'\n\t/tmp/tmp8acavn_o.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_distance = math.inf\n    for i = 1, #numbers, 2 do\n        local distance = math.abs(numbers[i] - numbers[i+1])\n        if distance < min_distance then\n            min_distance = distance\n            closest_elements[1] = numbers[i]\n            closest_elements[2] = numbers[i+1]\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpau1wgxz7.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpau1wgxz7.lua:12: in local 'candidate'\n\t/tmp/tmpau1wgxz7.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest = {}\n    for i = 1, #numbers, 2 do\n        local min = math.inf\n        local max = math.inf\n        for j = 1, #numbers, 2 do\n            if numbers[i] > numbers[j] then\n                min = numbers[j]\n            elseif numbers[i] < numbers[j] then\n                max = numbers[j]\n            end\n        end\n        closest[i] = min\n        closest[i + 1] = max\n    end\n    return closest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5g7dp4e9.lua:28: expected: {3.9, 4}\nactual: {2=5, 3=1, 4=5, 5=3.9}\nstack traceback:\n\t/tmp/tmp5g7dp4e9.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907514
    },
    {
      "exit_code": 1,
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_diff = math.inf\n    for i = 1, #numbers, 2 do\n        diff = math.abs(numbers[i] - numbers[i+1])\n        if diff < min_diff then\n            min_diff = diff\n            closest_elements = {numbers[i], numbers[i+1]}\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprwlkp8sd.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmprwlkp8sd.lua:12: in local 'candidate'\n\t/tmp/tmprwlkp8sd.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907514
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_diff = math.inf\n    for i = 1, #numbers, 2 do\n        local diff = math.abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff then\n            min_diff = diff\n            closest_elements = {numbers[i], numbers[i + 1]}\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7tk3vl0l.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp7tk3vl0l.lua:12: in local 'candidate'\n\t/tmp/tmp7tk3vl0l.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    for i = 1, #numbers, 2 do\n        local closest_element = math.inf\n        for j = 1, #numbers, 2 do\n            if i == j or numbers[i] == numbers[j] then\n                closest_element = numbers[i]\n                break\n            end\n        end\n        if closest_element < closest_elements[1] then\n            closest_elements[1] = closest_element\n        end\n        if closest_element > closest_elements[2] then\n            closest_elements[2] = closest_element\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp066kcquo.lua:17: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp066kcquo.lua:17: in local 'candidate'\n\t/tmp/tmp066kcquo.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_distance = math.inf\n    for i = 1, #numbers, 2 do\n        local distance = math.abs(numbers[i] - numbers[i+1])\n        if distance < min_distance then\n            min_distance = distance\n            closest_elements[1] = numbers[i]\n            closest_elements[2] = numbers[i+1]\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpau1wgxz7.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpau1wgxz7.lua:12: in local 'candidate'\n\t/tmp/tmpau1wgxz7.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_value = math.inf\n    local max_value = math.inf\n    for i=1,#numbers,2 do\n        local value = numbers[i]\n        if value < min_value then\n            min_value = value\n            closest_elements[1] = value\n        end\n        if value > max_value then\n            max_value = value\n            closest_elements[2] = value\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwjg54rbr.lua:13: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpwjg54rbr.lua:13: in local 'candidate'\n\t/tmp/tmpwjg54rbr.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_pair = {}\n    for i = 1, #numbers, 2 do\n        local closest_pair_i = {}\n        local closest_pair_j = {}\n        local min_i = math.inf\n        local min_j = math.inf\n        for j = 1, #numbers, 2 do\n            local distance = math.abs(numbers[i] - numbers[j])\n            if distance < min_i then\n                min_i = distance\n                closest_pair_i = j\n            end\n            if distance < min_j then\n                min_j = distance\n                closest_pair_j = j\n            end\n        end\n        closest_pair[i] = closest_pair_i\n        closest_pair[j] = closest_pair_j\n    end\n    return closest_pair\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8zjvvsgg.lua:16: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp8zjvvsgg.lua:16: in local 'candidate'\n\t/tmp/tmp8zjvvsgg.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_numbers = {}\n    local min_number = math.inf\n    local max_number = math.inf\n    for i=1,#numbers,2 do\n        local number = numbers[i]\n        local min_number = math.min(min_number, number)\n        local max_number = math.max(max_number, number)\n        closest_numbers[i] = number\n    end\n    return min_number, max_number, closest_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare number with nil\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    for i = 1, #numbers, 2 do\n        local closest_element = math.inf\n        for j = 1, #numbers, 2 do\n            if numbers[i] > numbers[j] then\n                closest_element = numbers[j]\n            end\n        end\n        if closest_element < closest_elements[#closest_elements] then\n            closest_elements[#closest_elements + 1] = closest_element\n        end\n    end\n    return closest_elements[1], closest_elements[#closest_elements]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphqiqy9oc.lua:16: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmphqiqy9oc.lua:16: in local 'candidate'\n\t/tmp/tmphqiqy9oc.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local closest_elements_index = {}\n    local closest_elements_value = {}\n    for i = 1, #numbers, 2 do\n        local value = numbers[i]\n        local index = i\n        if value > numbers[i + 1] then\n            index = i + 1\n        end\n        if index ~= i then\n            local difference = math.abs(numbers[i] - numbers[index])\n            if difference < closest_elements_value[#closest_elements] then\n                closest_elements_value[#closest_elements] = difference\n                closest_elements_index[#closest_elements] = index\n            end\n        end\n    end\n    for i = 1, #closest_elements, 2 do\n        local value = numbers[closest_elements_index[i]]\n        local index = closest_elements_index[i]\n        if value > numbers[index + 1] then\n            index = index + 1\n        end\n        if index ~= i then\n            local difference = math.abs(numbers[i] - numbers[index])\n            if difference < closest_elements_value[#closest_elements] then\n                closest_elements_value[#closest_elements] = difference\n                closest_elements_index[#closest_elements] = index\n            end\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8bldw3dg.lua:19: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp8bldw3dg.lua:19: in local 'candidate'\n\t/tmp/tmp8bldw3dg.lua:45: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local closest_elements_index = {}\n    for i=1,#numbers,2 do\n        local closest_elements_index[numbers[i]] = i\n        local closest_elements[i] = numbers[i]\n    end\n    for i=1,#numbers,2 do\n        local closest_elements[i+1] = math.min(closest_elements[i], closest_elements[i+1])\n    end\n    return closest_elements[1], closest_elements[2]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmplp24vkjs.lua:11: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local closest_elements_index = {}\n    local closest_elements_value = {}\n    local i = 1\n    while i <= #numbers do\n        local closest_elements_value[i] = math.sqrt(numbers[i])\n        local closest_elements_index[i] = i\n        i = i + 1\n    end\n    i = 1\n    while i <= #numbers do\n        local closest_elements_value[i] = math.sqrt(numbers[i])\n        local closest_elements_index[i] = i\n        i = i + 1\n    end\n    i = 1\n    while i <= #numbers do\n        local closest_elements_value[i] = math.sqrt(numbers[i])\n        local closest_elements_index[i] = i\n        i = i + 1\n    end\n    i = 1\n    while i <= #numbers do\n        local closest_elements_value[i] = math.sqrt(numbers[i])\n        local closest_elements_index[i] = i\n        i = i + 1\n    end\n    i = 1\n    while i <= #numbers do\n        local closest_elements_value[i] = math.sqrt(numbers[i])\n        local closest_elements_index[i] = i\n        i = i + 1\n    end\n    i = 1\n    while i <= #numbers do\n        local closest_elements_value[i] = math.sqrt(numbers[i])\n        local closest_elements_index[i] = i\n        i = i + 1\n    end\n    i = 1\n    while i <= #numbers do\n        local closest_elements_value[i] = math.sqrt(numbers[i])\n        local closest_elements_index[i] = i\n        i = i + 1\n    end\n    i = 1\n    while i <= #numbers do\n        local closest_elements_value[i] = math.sqrt(numbers[i])\n        local closest_elements_index[i] = i\n        i\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmp_4ckmw_z.lua:13: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_diff = math.inf\n    for i = 1, #numbers, 2 do\n        local diff = math.abs(numbers[i] - numbers[i+1])\n        if diff < min_diff then\n            min_diff = diff\n            closest_elements = {numbers[i], numbers[i+1]}\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpslo4ossx.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpslo4ossx.lua:12: in local 'candidate'\n\t/tmp/tmpslo4ossx.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest = math.inf\n    local min_index = 1\n    local max_index = 1\n    for i = 2, #numbers, 2 do\n        local current = numbers[i]\n        if current < closest then\n            closest = current\n            min_index = i\n            max_index = i\n        end\n    end\n    return (numbers[min_index], numbers[max_index])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpcl6c52ie.lua:19: ')' expected near ','\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_pair = {}\n    local min_number = math.inf\n    local max_number = math.inf\n    for i = 1, #numbers, 2 do\n        local number = numbers[i]\n        if number < min_number then\n            min_number = number\n            closest_pair[1] = i\n        end\n        if number > max_number then\n            max_number = number\n            closest_pair[2] = i\n        end\n    end\n    return closest_pair\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9rb6pkaq.lua:13: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp9rb6pkaq.lua:13: in local 'candidate'\n\t/tmp/tmp9rb6pkaq.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_distance = math.inf\n    for i = 1, #numbers, 2 do\n        local distance = math.abs(numbers[i] - numbers[i+1])\n        if distance < min_distance then\n            min_distance = distance\n            closest_elements[1] = numbers[i]\n            closest_elements[2] = numbers[i+1]\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpau1wgxz7.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpau1wgxz7.lua:12: in local 'candidate'\n\t/tmp/tmpau1wgxz7.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_distance = math.inf\n    for i = 1, #numbers, 2 do\n        local distance = math.abs(numbers[i] - numbers[i+1])\n        if distance < min_distance then\n            min_distance = distance\n            closest_elements[1] = numbers[i]\n            closest_elements[2] = numbers[i+1]\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpau1wgxz7.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpau1wgxz7.lua:12: in local 'candidate'\n\t/tmp/tmpau1wgxz7.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    for i = 1, #numbers, 2 do\n        local closest_element = math.inf\n        for j = 1, #numbers, 2 do\n            if numbers[i] > numbers[j] then\n                closest_element = numbers[j]\n            end\n        end\n        closest_elements[#closest_elements + 1] = closest_element\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv08c3e99.lua:24: expected: {3.9, 4.0}\nactual: {1.0, 3.9}\nstack traceback:\n\t/tmp/tmpv08c3e99.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local closest_elements_index = {}\n    for i=1,#numbers,2 do\n        local closest_elements_index[numbers[i]] = i\n        local closest_elements[i] = numbers[i]\n    end\n    return closest_elements, closest_elements_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmplgqqdkuv.lua:11: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_value = math.inf\n    local max_value = math.inf\n    for i=1,#numbers,2 do\n        local value = numbers[i]\n        if value < min_value then\n            min_value = value\n            closest_elements[1] = value\n        end\n        if value > max_value then\n            max_value = value\n            closest_elements[2] = value\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwjg54rbr.lua:13: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpwjg54rbr.lua:13: in local 'candidate'\n\t/tmp/tmpwjg54rbr.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_numbers = {}\n    local min_diff = math.inf\n    for i=1,#numbers,2 do\n        local diff = math.abs(numbers[i] - numbers[i+1])\n        if diff < min_diff then\n            min_diff = diff\n            closest_numbers = {numbers[i], numbers[i+1]}\n        end\n    end\n    return closest_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkk516fkv.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpkk516fkv.lua:12: in local 'candidate'\n\t/tmp/tmpkk516fkv.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    for i = 1, #numbers, 2 do\n        local closest_element = math.inf\n        for j = 1, #numbers, 2 do\n            if i != j then\n                local distance = math.abs(numbers[i] - numbers[j])\n                if distance < closest_element then\n                    closest_element = distance\n                end\n            end\n        end\n        closest_elements[i] = closest_element\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpgrxdvf7e.lua:12: 'then' expected near '!'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local closest_elements_index = {}\n    for i = 1, #numbers, 2 do\n        local closest_elements_index[numbers[i]] = i\n        local closest_elements[i] = numbers[i]\n    end\n    return closest_elements, closest_elements_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpkzjuckbw.lua:11: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest = {}\n    for i = 1, #numbers, 2 do\n        local diff = math.abs(numbers[i] - numbers[i+1])\n        if not closest[diff] then\n            closest[diff] = numbers[i]\n        end\n    end\n    return closest[1], closest[2]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoqah4o1j.lua:21: expected: {3.9, 4.0}\nactual: 1.0\nstack traceback:\n\t/tmp/tmpoqah4o1j.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest = math.inf\n    local closest_index = 0\n    for i = 1, #numbers, 2 do\n        local current = math.abs(numbers[i] - numbers[i-1])\n        if current < closest then\n            closest = current\n            closest_index = i\n        end\n    end\n    return numbers[closest_index], numbers[closest_index+1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi_san7f9.lua:11: attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\t/tmp/tmpi_san7f9.lua:11: in local 'candidate'\n\t/tmp/tmpi_san7f9.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_distance = math.inf\n    for i = 1, #numbers, 2 do\n        local distance = math.abs(numbers[i] - numbers[i + 1])\n        if distance < min_distance then\n            min_distance = distance\n            closest_elements = {numbers[i], numbers[i + 1]}\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqqfext4n.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpqqfext4n.lua:12: in local 'candidate'\n\t/tmp/tmpqqfext4n.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_pair = {}\n    local min_diff = math.inf\n    for i = 1, #numbers, 2 do\n        local diff = math.abs(numbers[i] - numbers[i+1])\n        if diff < min_diff then\n            min_diff = diff\n            closest_pair = {numbers[i], numbers[i+1]}\n        end\n    end\n    return closest_pair\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb7adqtj6.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpb7adqtj6.lua:12: in local 'candidate'\n\t/tmp/tmpb7adqtj6.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907514
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    for i = 1, #numbers, 2 do\n        local min_diff = math.inf\n        for j = 1, #numbers, 2 do\n            if i == j then continue\n            local diff = math.abs(numbers[i] - numbers[j])\n            if diff < min_diff then\n                min_diff = diff\n                closest_elements[1] = numbers[i]\n                closest_elements[2] = numbers[j]\n            end\n        end\n        if min_diff == math.inf then\n            print(\"No closest elements found.\")\n            return\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmp3z6zjbqb.lua:13: syntax error near 'local'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_index = 1\n    local max_index = 1\n    for i = 1, #numbers, 2 do\n        local current_value = numbers[i]\n        local closest_value = numbers[min_index]\n        local closest_index = min_index\n        local min_value = closest_value\n        local max_value = closest_value\n        for j = i + 1, #numbers, 2 do\n            local candidate_value = numbers[j]\n            if candidate_value < current_value then\n                closest_value = candidate_value\n                closest_index = j\n            end\n            if candidate_value > current_value then\n                max_value = candidate_value\n            end\n        end\n        if closest_value < min_value then\n            min_value = closest_value\n            min_index = closest_index\n        end\n        if max_value > min_value then\n            closest_elements[#closest_elements + 1] = min_value\n            closest_elements[#closest_elements + 1] = max_value\n            min_index = closest_index\n            max_index = closest_index\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9k9yj_cp.lua:44: expected: {3.9, 4.0}\nactual: {1.0, 2.2, 1.0, 4.0}\nstack traceback:\n\t/tmp/tmp9k9yj_cp.lua:44: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_pair = {}\n    local closest_pair_index = {}\n    local min_diff = math.inf\n    for i = 1, #numbers, 2 do\n        diff = math.abs(numbers[i] - numbers[i+1])\n        if diff < min_diff then\n            min_diff = diff\n            closest_pair_index = i\n            closest_pair = {numbers[i], numbers[i+1]}\n        end\n    end\n    return closest_pair, closest_pair_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpimw3hr9i.lua:13: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpimw3hr9i.lua:13: in local 'candidate'\n\t/tmp/tmpimw3hr9i.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_pair = math.inf\n    for i = 1, #numbers, 2 do\n        local distance = math.sqrt(math.pow(numbers[i] - numbers[i + 1], 2))\n        if distance < closest_pair then closest_pair = distance\n    end\n    return closest_pair, numbers[1], numbers[2]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmp6lru_z9k.lua:26: 'end' expected (to close 'function' at line 7) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_value = math.inf\n    local max_value = math.inf\n    for i = 1, #numbers, 2 do\n        local value = numbers[i]\n        if value < min_value then\n            min_value = value\n            closest_elements[1] = value\n        end\n        if value > max_value then\n            max_value = value\n            closest_elements[2] = value\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2si2yyf8.lua:13: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp2si2yyf8.lua:13: in local 'candidate'\n\t/tmp/tmp2si2yyf8.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907514
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_numbers = {}\n    for i = 1, #numbers, 2 do\n        local closest_number = math.inf\n        for j = 1, #numbers, 2 do\n            if numbers[i] > numbers[j] then\n                closest_number = numbers[j]\n            end\n        end\n        closest_numbers[closest_number] = numbers[i]\n    end\n    return closest_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpihnha6nb.lua:16: table index is nil\nstack traceback:\n\t/tmp/tmpihnha6nb.lua:16: in local 'candidate'\n\t/tmp/tmpihnha6nb.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_distance = math.inf\n    for i = 1, #numbers, 2 do\n        local distance = math.abs(numbers[i] - numbers[i+1])\n        if distance < min_distance then\n            min_distance = distance\n            closest_elements = {numbers[i], numbers[i+1]}\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8acavn_o.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp8acavn_o.lua:12: in local 'candidate'\n\t/tmp/tmp8acavn_o.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_pair = {}\n    local min_number = math.inf\n    local max_number = math.inf\n    for i = 1, #numbers, 2 do\n        local number = numbers[i]\n        local min_number = math.min(min_number, number)\n        local max_number = math.max(max_number, number)\n        local closest_pair[i] = number\n    end\n    return min_number, max_number, closest_pair\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmppz8q26s3.lua:15: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    for i = 1, #numbers, 2 do\n        local closest_element = math.inf\n        for j = 1, #numbers, 2 do\n            if i == j or numbers[i] == numbers[j] then\n                continue\n            local distance = math.sqrt(math.pow(numbers[i] - numbers[j], 2))\n            if distance < closest_element then\n                closest_element = distance\n            end\n        end\n        closest_elements[i] = closest_element\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmp4ugm5yaq.lua:14: syntax error near 'local'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_pair = {}\n    local closest_pair_index = {}\n    for i = 1, #numbers, 2 do\n        local closest_pair_value = math.inf\n        local closest_pair_index_value = math.inf\n        for j = 1, #numbers, 2 do\n            local distance = math.abs(numbers[i] - numbers[j])\n            if distance < closest_pair_value then\n                closest_pair_value = distance\n                closest_pair_index_value = j\n            end\n        end\n        closest_pair[i] = closest_pair_value\n        closest_pair_index[i] = closest_pair_index_value\n    end\n    return closest_pair[1], closest_pair[2]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwbm46dsj.lua:15: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpwbm46dsj.lua:15: in local 'candidate'\n\t/tmp/tmpwbm46dsj.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_pair = {}\n    local min_diff = math.inf\n    for i = 1, #numbers, 2 do\n        local diff = math.abs(numbers[i] - numbers[i+1])\n        if diff < min_diff then\n            min_diff = diff\n            closest_pair = {numbers[i], numbers[i+1]}\n        end\n    end\n    return closest_pair\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb7adqtj6.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpb7adqtj6.lua:12: in local 'candidate'\n\t/tmp/tmpb7adqtj6.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907514
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_index = 1\n    local max_index = 1\n    for i = 1, #numbers, 2 do\n        local distance = math.sqrt(math.pow(numbers[i], 2) + math.pow(numbers[i+1], 2))\n        if distance < closest_elements[#closest_elements] then\n            closest_elements[#closest_elements] = distance\n            min_index = i\n            max_index = i + 1\n        end\n    end\n    return closest_elements[min_index], closest_elements[max_index]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkbt5gg7_.lua:13: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpkbt5gg7_.lua:13: in local 'candidate'\n\t/tmp/tmpkbt5gg7_.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_diff = math.inf\n    for i = 1, #numbers, 2 do\n        local diff = math.abs(numbers[i] - numbers[i+1])\n        if diff < min_diff then\n            min_diff = diff\n            closest_elements[1] = numbers[i]\n            closest_elements[2] = numbers[i+1]\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnp8z349f.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpnp8z349f.lua:12: in local 'candidate'\n\t/tmp/tmpnp8z349f.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest = math.inf\n    local closest_index = 0\n    local closest_value = math.inf\n    for i = 1, #numbers, 2 do\n        local value = numbers[i]\n        local diff = math.abs(value - numbers[i - 1])\n        if diff < closest then\n            closest = diff\n            closest_index = i\n            closest_value = value\n        end\n    end\n    return closest_value, closest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp11su3x5z.lua:13: attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\t/tmp/tmp11su3x5z.lua:13: in local 'candidate'\n\t/tmp/tmp11su3x5z.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local closest_elements_index = {}\n    for i = 1, #numbers, 2 do\n        local closest_elements_index[numbers[i]] = i\n        local closest_elements[i] = numbers[i]\n    end\n    return closest_elements, closest_elements_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpkzjuckbw.lua:11: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_pair = {}\n    local closest_pair_index = {}\n    local closest_pair_value = {}\n    local closest_pair_index_value = {}\n    local i = 1\n    while i <= #numbers do\n        local closest_pair_value[i] = math.inf\n        local closest_pair_index_value[i] = math.inf\n        local closest_pair[i] = math.inf\n        local closest_pair_index[i] = math.inf\n        local closest_pair_value[i] = math.inf\n        local closest_pair_index_value[i] = math.inf\n        local j = 1\n        while j <= #numbers do\n            local diff = numbers[i] - numbers[j]\n            if diff < closest_pair_value[i] then\n                closest_pair_value[i] = diff\n                closest_pair_index_value[i] = j\n            end\n            if diff < closest_pair_value[j] then\n                closest_pair_value[j] = diff\n                closest_pair_index_value[j] = i\n            end\n            j = j + 1\n        end\n        i = i + 1\n    end\n    i = 1\n    while i <= #numbers do\n        local diff = closest_pair_value[i]\n        if diff < closest_pair[i] then\n            closest_pair[i] = diff\n            closest_pair_index[i] = closest_pair_index_value[i]\n        end\n        i = i + 1\n    end\n    return closest_pair[1], closest_pair[2]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmp5oxjtaek.lua:14: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest = {}\n    for i = 1, #numbers, 2 do\n        local min = math.inf\n        local max = math.inf\n        for j = 1, #numbers, 2 do\n            if numbers[i] > numbers[j] then\n                min = numbers[j]\n            elseif numbers[i] < numbers[j] then\n                max = numbers[j]\n            end\n        end\n        closest[i] = min\n        closest[i + 1] = max\n    end\n    return closest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5g7dp4e9.lua:28: expected: {3.9, 4}\nactual: {2=5, 3=1, 4=5, 5=3.9}\nstack traceback:\n\t/tmp/tmp5g7dp4e9.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907514
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_diff = math.inf\n    for i = 1, #numbers, 2 do\n        local diff = math.abs(numbers[i] - numbers[i+1])\n        if diff < min_diff then\n            min_diff = diff\n            closest_elements = {numbers[i], numbers[i+1]}\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpslo4ossx.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpslo4ossx.lua:12: in local 'candidate'\n\t/tmp/tmpslo4ossx.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_pair = {}\n    local min_diff = math.inf\n    for i = 1, #numbers, 2 do\n        local diff = math.abs(numbers[i] - numbers[i+1])\n        if diff < min_diff then\n            min_diff = diff\n            closest_pair = {numbers[i], numbers[i+1]}\n        end\n    end\n    return closest_pair\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb7adqtj6.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpb7adqtj6.lua:12: in local 'candidate'\n\t/tmp/tmpb7adqtj6.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907514
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_distance = math.inf\n    for i = 1, #numbers, 2 do\n        local distance = math.abs(numbers[i] - numbers[i+1])\n        if distance < min_distance then\n            min_distance = distance\n            closest_elements = {numbers[i], numbers[i+1]}\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8acavn_o.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp8acavn_o.lua:12: in local 'candidate'\n\t/tmp/tmp8acavn_o.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest = {}\n    for i = 1, #numbers, 2 do\n        local closest_number = math.inf\n        for j = 1, #numbers, 2 do\n            if numbers[i] > numbers[j] then\n                closest_number = numbers[j]\n            end\n        end\n        closest[#closest + 1] = closest_number\n    end\n    return closest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1p3s75bd.lua:24: expected: {3.9, 4.0}\nactual: {1.0, 3.9}\nstack traceback:\n\t/tmp/tmp1p3s75bd.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_value = math.inf\n    local max_value = math.inf\n    for i = 1, #numbers, 2 do\n        local value = numbers[i]\n        if value < min_value then\n            min_value = value\n            closest_elements[1] = value\n        end\n        if value > max_value then\n            max_value = value\n            closest_elements[2] = value\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2si2yyf8.lua:13: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp2si2yyf8.lua:13: in local 'candidate'\n\t/tmp/tmp2si2yyf8.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907514
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    for i = 1, #numbers, 2 do\n        local min = math.inf\n        local max = math.inf\n        for j = 1, #numbers, 2 do\n            if numbers[i] > numbers[j] then\n                min = numbers[j]\n            elseif numbers[i] < numbers[j] then\n                max = numbers[j]\n            end\n        end\n        closest_elements[i] = min\n        closest_elements[j] = max\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptzyrho7f.lua:20: table index is nil\nstack traceback:\n\t/tmp/tmptzyrho7f.lua:20: in local 'candidate'\n\t/tmp/tmptzyrho7f.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_value = math.inf\n    local max_value = math.inf\n    for i = 1, #numbers, 2 do\n        local value = numbers[i]\n        if value < min_value then\n            min_value = value\n            closest_elements[1] = value\n        end\n        if value > max_value then\n            max_value = value\n            closest_elements[2] = value\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2si2yyf8.lua:13: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp2si2yyf8.lua:13: in local 'candidate'\n\t/tmp/tmp2si2yyf8.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907514
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    for i = 1, #numbers, 2 do\n        local closest_element = {}\n        local closest_distance = math.inf\n        for j = 1, #numbers, 2 do\n            local distance = math.abs(numbers[i] - numbers[j])\n            if distance < closest_distance then\n                closest_distance = distance\n                closest_element = j\n            end\n        end\n        closest_elements[i] = closest_element\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu4a22dpu.lua:14: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpu4a22dpu.lua:14: in local 'candidate'\n\t/tmp/tmpu4a22dpu.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    for i = 1, #numbers, 2 do\n        local closest_element = math.inf\n        for j = 1, #numbers, 2 do\n            if i != j then\n                local distance = math.abs(numbers[i] - numbers[j])\n                if distance < closest_element then\n                    closest_element = distance\n                end\n            end\n        end\n        closest_elements[i] = closest_element\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpgrxdvf7e.lua:12: 'then' expected near '!'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_diff = math.inf\n    for i = 1, #numbers, 2 do\n        local diff = math.abs(numbers[i] - numbers[i+1])\n        if diff < min_diff then\n            min_diff = diff\n            closest_elements = {numbers[i], numbers[i+1]}\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpslo4ossx.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpslo4ossx.lua:12: in local 'candidate'\n\t/tmp/tmpslo4ossx.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_pair = {}\n    local closest_pair_index = {}\n    local closest_pair_value = {}\n    local closest_pair_index_value = {}\n    local min_value = math.inf\n    local max_value = -math.inf\n    for i = 1, #numbers, 2 do\n        local value = numbers[i]\n        if value < min_value then\n            min_value = value\n            closest_pair_index = i\n            closest_pair_value = value\n        end\n        if value > max_value then\n            max_value = value\n            closest_pair_index = i\n            closest_pair_value = value\n        end\n    end\n    closest_pair_index_value = closest_pair_index\n    closest_pair_index_value = closest_pair_value\n    return closest_pair_index_value, closest_pair_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl9d61b2x.lua:13: attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\t/tmp/tmpl9d61b2x.lua:13: in local 'candidate'\n\t/tmp/tmpl9d61b2x.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    for i = 1, #numbers, 2 do\n        local closest_element = math.inf\n        for j = 1, #numbers, 2 do\n            if numbers[i] > numbers[j] then\n                closest_element = numbers[j]\n            end\n        end\n        closest_elements[#closest_elements + 1] = closest_element\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv08c3e99.lua:24: expected: {3.9, 4.0}\nactual: {1.0, 3.9}\nstack traceback:\n\t/tmp/tmpv08c3e99.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_pair = {}\n    for i = 1, #numbers, 2 do\n        local closest_pair[i] = math.inf\n        for j = i + 1, #numbers, 2 do\n            local distance = math.abs(numbers[i] - numbers[j])\n            if distance < closest_pair[i] then\n                closest_pair[i] = distance\n                closest_pair[j] = distance\n            end\n        end\n    end\n    return closest_pair[1], closest_pair[2]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmpgtmkp3_c.lua:10: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_pair = {}\n    local closest_pair_index = {}\n    local closest_pair_value = {}\n    local closest_pair_value_index = {}\n    for i = 1, #numbers, 2 do\n        local closest_pair_value_index_i = math.mod(i, #numbers)\n        local closest_pair_value_i = numbers[closest_pair_value_index_i]\n        local closest_pair_i = math.mod(closest_pair_value_i, #numbers)\n        local closest_pair_value_index_j = math.mod(closest_pair_i, #numbers)\n        local closest_pair_value_j = numbers[closest_pair_value_index_j]\n        local closest_pair_i_j = math.mod(closest_pair_value_i, #numbers)\n        local closest_pair_j_i = math.mod(closest_pair_value_j, #numbers)\n        if closest_pair_i_j > closest_pair_i and closest_pair_i_j > closest_pair_j_i then\n            closest_pair_value = closest_pair_value_i\n            closest_pair_value_index = closest_pair_value_index_i\n            closest_pair = closest_pair_i\n            closest_pair_index = closest_pair_i_j\n        elseif closest_pair_i_j < closest_pair_i and closest_pair_i_j < closest_pair_j_i then\n            closest_pair_value = closest_pair_value_j\n            closest_pair_value_index = closest_pair_value_index_j\n            closest_pair = closest_pair_j_i\n            closest_pair_index = closest_pair_j_i\n        elseif closest_pair_i_j < closest_pair_j_i and closest_pair_i_j < closest_pair_i_j then\n            closest_pair_value = closest_pair_value_i\n            closest_pair_value_index = closest_pair\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmptj9zi7q0.lua:44: 'end' expected (to close 'if' at line 20) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_pair = {}\n    local closest_pair_index = {}\n    local closest_pair_value = {}\n    local closest_pair_value_index = {}\n    for i = 1, #numbers, 2 do\n        local value = numbers[i]\n        local closest_pair_value_index[value] = i\n        local closest_pair_value[i] = value\n        for j = i + 1, #numbers, 2 do\n            local value2 = numbers[j]\n            local closest_pair_index[value2] = j\n            local closest_pair[j] = value2\n            local closest_pair_index[value] = i\n            local closest_pair[i] = value\n            local distance = math.sqrt(math.pow(value2 - value, 2))\n            if distance < closest_pair_value[i] - closest_pair_value[j] or\n                distance < closest_pair_value[j] - closest_pair_value[i] then\n                closest_pair_value[i] = value2\n                closest_pair_value[j] = value\n                closest_pair_value_index[value2] = i\n                closest_pair_value_index[value] = j\n                closest_pair_index[value2] = i\n                closest_pair_index[value] = j\n            end\n        end\n    end\n    return closest_pair[1], closest_pair[2]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmp0kocojl7.lua:14: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_value = math.inf\n    local max_value = math.inf\n    for i = 1, #numbers, 2 do\n        local value = numbers[i]\n        if value < min_value then\n            min_value = value\n            closest_elements[1] = i\n        end\n        if value > max_value then\n            max_value = value\n            closest_elements[2] = i\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm706z81j.lua:13: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpm706z81j.lua:13: in local 'candidate'\n\t/tmp/tmpm706z81j.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    for i = 1, #numbers, 2 do\n        local closest_element = {}\n        local closest_distance = math.inf\n        for j = 1, #numbers, 2 do\n            local distance = math.abs(numbers[i] - numbers[j])\n            if distance < closest_distance then\n                closest_distance = distance\n                closest_element = j\n            end\n        end\n        closest_elements[i] = closest_element\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu4a22dpu.lua:14: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpu4a22dpu.lua:14: in local 'candidate'\n\t/tmp/tmpu4a22dpu.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    for i = 1, #numbers, 2 do\n        local closest_element = math.inf\n        for j = 1, #numbers, 2 do\n            if numbers[i] > numbers[j] then\n                local closest_element = numbers[j]\n            end\n        end\n        closest_elements[#closest_elements + 1] = closest_element\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc94wojh3.lua:24: expected: {3.9, 4.0}\nactual: {}\nstack traceback:\n\t/tmp/tmpc94wojh3.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    for i = 1, #numbers, 2 do\n        local closest_element = math.inf\n        for j = 1, #numbers, 2 do\n            if i != j then\n                local distance = math.abs(numbers[i] - numbers[j])\n                if distance < closest_element then\n                    closest_element = distance\n                end\n            end\n        end\n        closest_elements[#closest_elements + 1] = closest_element\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpgevx46ca.lua:12: 'then' expected near '!'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_pair = {}\n    local closest_pair_index = {}\n    for i = 1, #numbers, 2 do\n        local closest_pair_value = math.inf\n        local closest_pair_index_value = math.inf\n        for j = 1, #numbers, 2 do\n            if numbers[i] > numbers[j] then\n                local closest_pair_value = numbers[j]\n                local closest_pair_index_value = j\n            end\n        end\n        if closest_pair_value < closest_pair_value then\n            closest_pair_value = closest_pair_value\n            closest_pair_index_value = closest_pair_index_value\n        end\n    end\n    closest_pair[1] = numbers[closest_pair_index_value]\n    closest_pair[2] = numbers[closest_pair_index_value + 1]\n    closest_pair_index[1] = closest_pair_index_value\n    closest_pair_index[2] = closest_pair_index_value + 1\n    return closest_pair, closest_pair_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmgwxozgm.lua:19: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpmgwxozgm.lua:19: in local 'candidate'\n\t/tmp/tmpmgwxozgm.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_pair = {}\n    local closest_pair_index = {}\n    for i = 1, #numbers, 2 do\n        local closest_pair_value = math.inf\n        local closest_pair_index_value = math.inf\n        for j = 1, #numbers, 2 do\n            if numbers[j] < numbers[i] then\n                local closest_pair_value = numbers[j]\n                local closest_pair_index_value = j\n            end\n        end\n        if closest_pair_value < closest_pair_value then\n            closest_pair = {closest_pair_value, closest_pair_index_value}\n            closest_pair_index = {i, j}\n        end\n    end\n    return closest_pair\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgcwkiq2u.lua:19: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpgcwkiq2u.lua:19: in local 'candidate'\n\t/tmp/tmpgcwkiq2u.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_numbers = {}\n    for i=1,#numbers,2 do\n        local closest_number = math.inf\n        for j=1,#numbers,2 do\n            if numbers[i] < numbers[j] then\n                closest_number = numbers[j]\n            end\n        end\n        closest_numbers[#closest_numbers+1] = closest_number\n    end\n    return closest_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp536az0w_.lua:24: expected: {3.9, 4.0}\nactual: {5.0, 5.0}\nstack traceback:\n\t/tmp/tmp536az0w_.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_value = math.inf\n    local max_value = math.inf\n    for i = 1, #numbers, 2 do\n        local value = numbers[i]\n        if value < min_value then\n            min_value = value\n            closest_elements[1] = value\n        end\n        if value > max_value then\n            max_value = value\n            closest_elements[2] = value\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2si2yyf8.lua:13: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp2si2yyf8.lua:13: in local 'candidate'\n\t/tmp/tmp2si2yyf8.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907514
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    for i = 1, #numbers, 2 do\n        local closest_element = math.inf\n        for j = 1, #numbers, 2 do\n            if numbers[i] > numbers[j] then\n                local closest_element = math.min(closest_element, numbers[j] - numbers[i])\n            end\n        end\n        closest_elements[i] = closest_element\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare number with nil\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    for i = 1, #numbers, 2 do\n        local min_index = 1\n        local min_value = numbers[1]\n        for j = 2, #numbers, 2 do\n            if numbers[j] < min_value then\n                min_value = numbers[j]\n                min_index = j\n            end\n        end\n        closest_elements[i] = min_value\n        closest_elements[min_index] = min_value\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxfc52n93.lua:27: expected: {3.9, 4.0}\nactual: {1.0, 3=1.0, 5=1.0}\nstack traceback:\n\t/tmp/tmpxfc52n93.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_diff = math.inf\n    for i = 1, #numbers, 2 do\n        diff = math.abs(numbers[i] - numbers[i+1])\n        if diff < min_diff then\n            min_diff = diff\n            closest_elements[1] = numbers[i]\n            closest_elements[2] = numbers[i+1]\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6vjp38r6.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp6vjp38r6.lua:12: in local 'candidate'\n\t/tmp/tmp6vjp38r6.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_pair = {}\n    local min_value = math.inf\n    local max_value = math.inf\n    for i = 1, #numbers, 2 do\n        local value = numbers[i]\n        if value < min_value then\n            min_value = value\n            closest_pair[1] = i\n        end\n        if value > max_value then\n            max_value = value\n            closest_pair[2] = i\n        end\n    end\n    return closest_pair\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpivl77td1.lua:13: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpivl77td1.lua:13: in local 'candidate'\n\t/tmp/tmpivl77td1.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907514
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest = math.inf\n    local closest_index = 0\n    local closest_value = 0\n    for i = 1, #numbers, 2 do\n        local value = numbers[i]\n        local diff = math.abs(value - numbers[i+1])\n        if diff < closest then\n            closest = diff\n            closest_index = i\n            closest_value = value\n        end\n    end\n    return closest_value, closest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp67po4t4_.lua:14: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp67po4t4_.lua:14: in local 'candidate'\n\t/tmp/tmp67po4t4_.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local closest_elements_index = {}\n    for i = 1, #numbers, 2 do\n        local closest_elements_index[numbers[i]] = i\n        local closest_elements[i] = numbers[i]\n    end\n    return closest_elements, closest_elements_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpkzjuckbw.lua:11: unexpected symbol near '['\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_distance = math.inf\n    for i = 1, #numbers, 2 do\n        local distance = math.abs(numbers[i] - numbers[i+1])\n        if distance < min_distance then\n            min_distance = distance\n            closest_elements = {numbers[i], numbers[i+1]}\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8acavn_o.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp8acavn_o.lua:12: in local 'candidate'\n\t/tmp/tmp8acavn_o.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_pair = {}\n    local closest_pair_index = {}\n    for i = 1, #numbers, 2 do\n        local closest_pair_value = math.inf\n        local closest_pair_index_value = math.inf\n        for j = 1, #numbers, 2 do\n            if numbers[i] < numbers[j] then\n                if closest_pair_value > numbers[j] then\n                    closest_pair_value = numbers[j]\n                    closest_pair_index_value = j\n                end\n            end\n        end\n        if closest_pair_value < closest_pair_value then\n            closest_pair_value = numbers[i]\n            closest_pair_index_value = i\n        end\n        closest_pair[i] = closest_pair_value\n        closest_pair_index[i] = closest_pair_index_value\n    end\n    return closest_pair[1], closest_pair[2]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmponwrrguu.lua:15: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmponwrrguu.lua:15: in local 'candidate'\n\t/tmp/tmponwrrguu.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_pair = math.inf\n    local min_index = math.inf\n    local max_index = math.inf\n    for i = 1, #numbers, 2 do\n        local diff = numbers[i] - numbers[i - 1]\n        if diff < closest_pair then\n            closest_pair = diff\n            min_index = i\n            max_index = i\n        end\n    end\n    return min_index, max_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpruv52otk.lua:12: attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\t/tmp/tmpruv52otk.lua:12: in local 'candidate'\n\t/tmp/tmpruv52otk.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest = math.inf\n    local closest_index = 1\n    local closest_value = numbers[1]\n    for i = 2, #numbers, 2 do\n        local value = numbers[i]\n        local distance = math.abs(value - closest)\n        if distance < closest then\n            closest = distance\n            closest_index = i\n            closest_value = value\n        end\n    end\n    return closest_value, closest_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnr2xe4rq.lua:13: attempt to perform arithmetic on a nil value (local 'closest')\nstack traceback:\n\t/tmp/tmpnr2xe4rq.lua:13: in local 'candidate'\n\t/tmp/tmpnr2xe4rq.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_diff = math.inf\n    for i = 1, #numbers, 2 do\n        local diff = math.abs(numbers[i] - numbers[i+1])\n        if diff < min_diff then\n            min_diff = diff\n            closest_elements = {numbers[i], numbers[i+1]}\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpslo4ossx.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpslo4ossx.lua:12: in local 'candidate'\n\t/tmp/tmpslo4ossx.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_distance = math.inf\n    for i = 1, #numbers, 2 do\n        local distance = math.abs(numbers[i] - numbers[i+1])\n        if distance < min_distance then\n            min_distance = distance\n            closest_elements[1] = numbers[i]\n            closest_elements[2] = numbers[i+1]\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpau1wgxz7.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpau1wgxz7.lua:12: in local 'candidate'\n\t/tmp/tmpau1wgxz7.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_distance = math.inf\n    for i = 1, #numbers, 2 do\n        local distance = math.abs(numbers[i] - numbers[i + 1])\n        if distance < min_distance then\n            min_distance = distance\n            closest_elements = {numbers[i], numbers[i + 1]}\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqqfext4n.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpqqfext4n.lua:12: in local 'candidate'\n\t/tmp/tmpqqfext4n.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest = {}\n    for i = 1, #numbers, 2 do\n        local diff = math.abs(numbers[i] - numbers[i + 1])\n        if diff < closest[1] or closest[1] == nil then\n            closest[1] = diff\n            closest[2] = numbers[i]\n        end\n    end\n    return closest[2], closest[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyqhfbn4o.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpyqhfbn4o.lua:11: in local 'candidate'\n\t/tmp/tmpyqhfbn4o.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    for i = 1, #numbers, 2 do\n        local min = math.inf\n        local max = math.inf\n        for j = 1, #numbers, 2 do\n            if numbers[j] < numbers[i] then\n                min = numbers[j]\n            else\n                max = numbers[j]\n        end\n        closest_elements[i] = min\n        closest_elements[i + 1] = max\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "",
      "stderr": "lua: /tmp/tmpzr0xl3c6.lua:34: 'end' expected (to close 'function' at line 7) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest = {}\n    for i = 1, #numbers, 2 do\n        local diff = math.abs(numbers[i] - numbers[i - 1])\n        if not closest[diff] then\n            closest[diff] = numbers[i]\n        end\n    end\n    return closest[1], closest[2]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplwmn4w0n.lua:10: attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\t/tmp/tmplwmn4w0n.lua:10: in local 'candidate'\n\t/tmp/tmplwmn4w0n.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    for i = 1, #numbers, 2 do\n        local closest_element = math.inf\n        for j = 1, #numbers, 2 do\n            if numbers[i] > numbers[j] then\n                closest_element = numbers[j]\n            end\n        end\n        if closest_element < closest_elements[1] then\n            closest_elements[1] = closest_element\n            closest_elements[2] = numbers[i]\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplm7d8yp0.lua:16: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmplm7d8yp0.lua:16: in local 'candidate'\n\t/tmp/tmplm7d8yp0.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_numbers = {}\n    local closest_numbers_index = {}\n    for i = 1, #numbers, 2 do\n        local closest_number = math.inf\n        for j = 1, #numbers, 2 do\n            if numbers[i] < numbers[j] then\n                local closest_number = numbers[j]\n                closest_numbers_index[j] = i\n            end\n        end\n        if closest_number < closest_numbers[#closest_numbers] then\n            closest_numbers[#closest_numbers + 1] = closest_number\n            closest_numbers_index[#closest_numbers + 1] = i\n        end\n    end\n    return closest_numbers[1], closest_numbers[#closest_numbers]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2l62zb53.lua:18: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp2l62zb53.lua:18: in local 'candidate'\n\t/tmp/tmp2l62zb53.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    for i = 1, #numbers, 2 do\n        local closest_element = math.inf\n        for j = 1, #numbers, 2 do\n            if i != j then\n                local distance = math.abs(numbers[i] - numbers[j])\n                if distance < closest_element then\n                    closest_element = distance\n                end\n            end\n        end\n        closest_elements[#closest_elements + 1] = closest_element\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpgevx46ca.lua:12: 'then' expected near '!'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_diff = math.inf\n    for i = 1, #numbers, 2 do\n        local diff = math.abs(numbers[i] - numbers[i+1])\n        if diff < min_diff then\n            min_diff = diff\n            closest_elements = {numbers[i], numbers[i+1]}\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpslo4ossx.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpslo4ossx.lua:12: in local 'candidate'\n\t/tmp/tmpslo4ossx.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_value = math.inf\n    local max_value = math.inf\n    for i = 1, #numbers, 2 do\n        local value = numbers[i]\n        if value < min_value then\n            min_value = value\n            closest_elements[1] = value\n        end\n        if value > max_value then\n            max_value = value\n            closest_elements[2] = value\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2si2yyf8.lua:13: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp2si2yyf8.lua:13: in local 'candidate'\n\t/tmp/tmp2si2yyf8.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907514
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest = {}\n    for i = 1, #numbers, 2 do\n        local min = math.inf\n        local max = math.inf\n        for j = 1, #numbers, 2 do\n            if numbers[i] > numbers[j] then\n                min = numbers[j]\n            elseif numbers[i] < numbers[j] then\n                max = numbers[j]\n            end\n        end\n        closest[#closest + 1] = min\n        closest[#closest + 1] = max\n    end\n    return closest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_8hivpln.lua:28: expected: {3.9, 4.0}\nactual: {5.0, 1.0, 5.0, 3.9}\nstack traceback:\n\t/tmp/tmp_8hivpln.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_numbers = {}\n    for i=1,#numbers,2 do\n        local closest_number = math.inf\n        for j=1,#numbers,2 do\n            local distance = math.abs(numbers[i] - numbers[j])\n            if distance < closest_number then\n                closest_number = distance\n                closest_numbers[i] = j\n                closest_numbers[j] = i\n            end\n        end\n    end\n    return closest_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprmxgd19q.lua:13: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmprmxgd19q.lua:13: in local 'candidate'\n\t/tmp/tmprmxgd19q.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_pair = math.inf\n    local closest_pair_index = 0\n    local closest_pair_value = 0\n    for i = 1, #numbers, 2 do\n        local this_value = numbers[i]\n        local this_distance = math.abs(this_value - numbers[i+1])\n        if this_distance < closest_pair then\n            closest_pair = this_distance\n            closest_pair_index = i\n            closest_pair_value = this_value\n        end\n    end\n    return closest_pair_value, closest_pair_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxi5g0xmy.lua:14: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpxi5g0xmy.lua:14: in local 'candidate'\n\t/tmp/tmpxi5g0xmy.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_difference = math.inf\n    for i = 1, #numbers, 2 do\n        local difference = math.abs(numbers[i] - numbers[i + 1])\n        if difference < min_difference then\n            min_difference = difference\n            closest_elements = {numbers[i], numbers[i + 1]}\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_twke4ia.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp_twke4ia.lua:12: in local 'candidate'\n\t/tmp/tmp_twke4ia.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907514
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_pair = math.inf\n    local closest_pair_index = nil\n    local closest_pair_value = nil\n    for i = 1, #numbers, 2 do\n        local current_value = numbers[i]\n        local current_index = i\n        for j = i + 1, #numbers, 2 do\n            local candidate_value = numbers[j]\n            local candidate_index = j\n            if candidate_value < current_value then\n                current_value = candidate_value\n                current_index = candidate_index\n            end\n        end\n        if current_value < closest_pair then\n            closest_pair = current_value\n            closest_pair_index = current_index\n            closest_pair_value = current_value\n        end\n    end\n    return closest_pair_value, closest_pair_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaexahgq8.lua:22: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpaexahgq8.lua:22: in local 'candidate'\n\t/tmp/tmpaexahgq8.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    for i = 1, #numbers, 2 do\n        local closest_element = math.inf\n        for j = 1, #numbers, 2 do\n            if i != j then\n                local distance = math.abs(numbers[i] - numbers[j])\n                if distance < closest_element then\n                    closest_element = distance\n                end\n            end\n        end\n        closest_elements[i] = closest_element\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "",
      "stderr": "lua: /tmp/tmpgrxdvf7e.lua:12: 'then' expected near '!'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    for i = 1, #numbers, 2 do\n        local closest_element = math.inf\n        for j = 1, #numbers, 2 do\n            if numbers[i] > numbers[j] then\n                closest_element = numbers[j]\n            end\n        end\n        if closest_element < closest_elements[#closest_elements] then\n            closest_elements[#closest_elements] = closest_element\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpowa3nz6n.lua:16: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpowa3nz6n.lua:16: in local 'candidate'\n\t/tmp/tmpowa3nz6n.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest = {}\n    for i = 1, #numbers, 2 do\n        local diff = math.abs(numbers[i] - numbers[i+1])\n        if not closest or diff < closest[1] then\n            closest = { numbers[i], numbers[i+1], diff }\n        end\n    end\n    return closest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzk4dj26s.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpzk4dj26s.lua:11: in local 'candidate'\n\t/tmp/tmpzk4dj26s.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_numbers = {}\n    for i = 1, #numbers, 2 do\n        local closest_number = math.inf\n        for j = 1, #numbers, 2 do\n            if numbers[i] > numbers[j] then\n                closest_number = numbers[j]\n            end\n        end\n        closest_numbers[closest_number] = numbers[i]\n    end\n    return closest_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpihnha6nb.lua:16: table index is nil\nstack traceback:\n\t/tmp/tmpihnha6nb.lua:16: in local 'candidate'\n\t/tmp/tmpihnha6nb.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_pair = {}\n    local closest_pair_index = {}\n    for i = 1, #numbers, 2 do\n        local closest_pair_value = math.inf\n        local closest_pair_index_value = math.inf\n        for j = 1, #numbers, 2 do\n            if numbers[i] > numbers[j] then\n                local closest_pair_value = numbers[j]\n                local closest_pair_index_value = j\n            end\n        end\n        if closest_pair_value < closest_pair_value then\n            closest_pair_value = closest_pair_value\n            closest_pair_index_value = closest_pair_index_value\n        end\n    end\n    closest_pair[1] = numbers[closest_pair_index_value]\n    closest_pair[2] = numbers[closest_pair_index_value + 1]\n    closest_pair_index[1] = closest_pair_index_value\n    closest_pair_index[2] = closest_pair_index_value + 1\n    return closest_pair, closest_pair_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmgwxozgm.lua:19: attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpmgwxozgm.lua:19: in local 'candidate'\n\t/tmp/tmpmgwxozgm.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_value = math.inf\n    local max_value = math.inf\n    for i = 1, #numbers, 2 do\n        local value = numbers[i]\n        if value < min_value then\n            min_value = value\n            closest_elements[1] = value\n        end\n        if value > max_value then\n            max_value = value\n            closest_elements[2] = value\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2si2yyf8.lua:13: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp2si2yyf8.lua:13: in local 'candidate'\n\t/tmp/tmp2si2yyf8.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907514
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_diff = math.inf\n    for i = 1, #numbers, 2 do\n        local diff = math.abs(numbers[i] - numbers[i+1])\n        if diff < min_diff then\n            min_diff = diff\n            closest_elements = {numbers[i], numbers[i+1]}\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpslo4ossx.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpslo4ossx.lua:12: in local 'candidate'\n\t/tmp/tmpslo4ossx.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_distance = math.inf\n    for i = 1, #numbers, 2 do\n        local distance = math.abs(numbers[i] - numbers[i+1])\n        if distance < min_distance then\n            min_distance = distance\n            closest_elements = {numbers[i], numbers[i+1]}\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292514,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8acavn_o.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp8acavn_o.lua:12: in local 'candidate'\n\t/tmp/tmp8acavn_o.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_diff = math.inf\n    for i = 1, #numbers, 2 do\n        diff = math.abs(numbers[i] - numbers[i+1])\n        if diff < min_diff then\n            min_diff = diff\n            closest_elements = {numbers[i], numbers[i+1]}\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprwlkp8sd.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmprwlkp8sd.lua:12: in local 'candidate'\n\t/tmp/tmprwlkp8sd.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907514
    },
    {
      "exit_code": 1,
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_pair = {}\n    local min_value = math.inf\n    local max_value = math.inf\n    for i = 1, #numbers, 2 do\n        local value = numbers[i]\n        if value < min_value then\n            min_value = value\n            closest_pair[1] = i\n        end\n        if value > max_value then\n            max_value = value\n            closest_pair[2] = i\n        end\n    end\n    return closest_pair\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpivl77td1.lua:13: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpivl77td1.lua:13: in local 'candidate'\n\t/tmp/tmpivl77td1.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907514
    },
    {
      "program": "-- From a supplied table of numbers (of length at least two) select and return two that are the closest to each\n-- other and return them in order (smaller number, larger number).\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n-- (2.0, 2.2)\n-- >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n-- (2.0, 2.0)\nlocal function find_closest_elements(numbers)\n    local closest_elements = {}\n    local min_distance = math.inf\n    for i=1,#numbers,2 do\n        local distance = math.abs(numbers[i] - numbers[i+1])\n        if distance < min_distance then\n            min_distance = distance\n            closest_elements = {numbers[i], numbers[i+1]}\n        end\n    end\n    return closest_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292515,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4v5fu2w_.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp4v5fu2w_.lua:12: in local 'candidate'\n\t/tmp/tmp4v5fu2w_.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}