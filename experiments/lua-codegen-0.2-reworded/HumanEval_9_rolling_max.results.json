{
  "language": "lua",
  "name": "HumanEval_9_rolling_max",
  "results": [
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 0\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h0ppnxp.lua:20: expected: {}\nactual: 0\nstack traceback:\n\t/tmp/tmp8h0ppnxp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max then max = numbers[i]\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpbjfp8zeg.lua:22: 'end' expected (to close 'function' at line 5) near <eof>\n",
      "stdout": "",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6svg5zy.lua:20: expected: {}\nactual: 1\nstack traceback:\n\t/tmp/tmpk6svg5zy.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max then max = numbers[i]\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpbjfp8zeg.lua:22: 'end' expected (to close 'function' at line 5) near <eof>\n",
      "stdout": "",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 0\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return {max_index, max_value}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsrki7zm8.lua:20: expected: {}\nactual: {0}\nstack traceback:\n\t/tmp/tmpsrki7zm8.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local result = {}\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp4etvjerz.lua:8: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 0\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h0ppnxp.lua:20: expected: {}\nactual: 0\nstack traceback:\n\t/tmp/tmp8h0ppnxp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max = 0\n    local result = {}\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp33c7tzw6.lua:9: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_table = {}\n    for i=1,#                                                                                                                                                                                                                                                \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpajtv7lk1.lua:8: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_table = {}\n    local current_max = nil\n    for i=1,#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp0ol9drce.lua:9: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 0\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h0ppnxp.lua:20: expected: {}\nactual: 0\nstack traceback:\n\t/tmp/tmp8h0ppnxp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6svg5zy.lua:20: expected: {}\nactual: 1\nstack traceback:\n\t/tmp/tmpk6svg5zy.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max = 0\n    local max_index = 0\n    for i=1,#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmphw06p384.lua:9: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max = 0\n    local result = {}\n    for i=1,#                                                            \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpeoyyt2n2.lua:9: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max = 0\n    local result = {}\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp33c7tzw6.lua:9: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6svg5zy.lua:20: expected: {}\nactual: 1\nstack traceback:\n\t/tmp/tmpk6svg5zy.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6svg5zy.lua:20: expected: {}\nactual: 1\nstack traceback:\n\t/tmp/tmpk6svg5zy.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 0\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h0ppnxp.lua:20: expected: {}\nactual: 0\nstack traceback:\n\t/tmp/tmp8h0ppnxp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 0\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return {max_index, max_value}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsrki7zm8.lua:20: expected: {}\nactual: {0}\nstack traceback:\n\t/tmp/tmpsrki7zm8.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max then max = numbers[i]\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpbjfp8zeg.lua:22: 'end' expected (to close 'function' at line 5) near <eof>\n",
      "stdout": "",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max then max = numbers[i]\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpbjfp8zeg.lua:22: 'end' expected (to close 'function' at line 5) near <eof>\n",
      "stdout": "",
      "timestamp": 1661938064
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return {max_index, max_value}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8us8jrd9.lua:20: expected: {}\nactual: {1}\nstack traceback:\n\t/tmp/tmp8us8jrd9.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6svg5zy.lua:20: expected: {}\nactual: 1\nstack traceback:\n\t/tmp/tmpk6svg5zy.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6svg5zy.lua:20: expected: {}\nactual: 1\nstack traceback:\n\t/tmp/tmpk6svg5zy.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return {max_index, max_value}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8us8jrd9.lua:20: expected: {}\nactual: {1}\nstack traceback:\n\t/tmp/tmp8us8jrd9.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6svg5zy.lua:20: expected: {}\nactual: 1\nstack traceback:\n\t/tmp/tmpk6svg5zy.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local result = {}\n    for i=1,#numbers,1 do\n        result[i] = math.max(numbers[i], result[i-1])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare number with nil\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6svg5zy.lua:20: expected: {}\nactual: 1\nstack traceback:\n\t/tmp/tmpk6svg5zy.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max = numbers[1]\n    for i = 2, #numbers, 1 do\n        max = math.max(max, numbers[i])\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9apzdvqq.lua:16: expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp9apzdvqq.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_table = {}\n    for i = 1, #numbers, 1 do\n        max_table[i] = numbers[i]\n        for j = i + 1, #numbers, 1 do\n            if max_table[i] < numbers[j] then\n                max_table[i] = numbers[j]\n            end\n        end\n    end\n    return max_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpugs_f8iu.lua:22: expected: {1, 2, 3, 4}\nactual: {4, 4, 4, 4}\nstack traceback:\n\t/tmp/tmpugs_f8iu.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 0\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h0ppnxp.lua:20: expected: {}\nactual: 0\nstack traceback:\n\t/tmp/tmp8h0ppnxp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 0\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h0ppnxp.lua:20: expected: {}\nactual: 0\nstack traceback:\n\t/tmp/tmp8h0ppnxp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 0\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h0ppnxp.lua:20: expected: {}\nactual: 0\nstack traceback:\n\t/tmp/tmp8h0ppnxp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max then max = numbers[i]\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpbjfp8zeg.lua:22: 'end' expected (to close 'function' at line 5) near <eof>\n",
      "stdout": "",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6svg5zy.lua:20: expected: {}\nactual: 1\nstack traceback:\n\t/tmp/tmpk6svg5zy.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 0\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_value, max_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjodgl_uz.lua:20: expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpjodgl_uz.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return {max_index, max_value}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8us8jrd9.lua:20: expected: {}\nactual: {1}\nstack traceback:\n\t/tmp/tmp8us8jrd9.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 0\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h0ppnxp.lua:20: expected: {}\nactual: 0\nstack traceback:\n\t/tmp/tmp8h0ppnxp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max then max = numbers[i]\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpbjfp8zeg.lua:22: 'end' expected (to close 'function' at line 5) near <eof>\n",
      "stdout": "",
      "timestamp": 1661938064
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_value, max_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwy8p22zj.lua:20: expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpwy8p22zj.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max = 0\n    local result = {}\n    for i=1,#numbers,1 do\n        max = math.max(max, numbers[i])\n        result[i] = max\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6svg5zy.lua:20: expected: {}\nactual: 1\nstack traceback:\n\t/tmp/tmpk6svg5zy.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6svg5zy.lua:20: expected: {}\nactual: 1\nstack traceback:\n\t/tmp/tmpk6svg5zy.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 0\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return {max_value, max_index}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz0tflyx0.lua:20: expected: {}\nactual: {2=0}\nstack traceback:\n\t/tmp/tmpz0tflyx0.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return {max_index, max_value}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8us8jrd9.lua:20: expected: {}\nactual: {1}\nstack traceback:\n\t/tmp/tmp8us8jrd9.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 0\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h0ppnxp.lua:20: expected: {}\nactual: 0\nstack traceback:\n\t/tmp/tmp8h0ppnxp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local result = {}\n    for i=1,#numbers,1 do\n        result[i] = math.max(numbers[i], result[i-1])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare number with nil\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_table = {}\n    for i=1,#numbers do\n        if numbers[i] > max_table[#max_table+1] then\n            max_table[#max_table+1] = numbers[i]\n        end\n    end\n    return max_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq__7b43j.lua:8: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpq__7b43j.lua:8: in local 'candidate'\n\t/tmp/tmpq__7b43j.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 0\n    local max_value = 0\n    for i = 1, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6g8nrsr9.lua:20: expected: {}\nactual: 0\nstack traceback:\n\t/tmp/tmp6g8nrsr9.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local table = {}\n    for i=1,#numbers,1 do\n        table[i] = math.max(table[i-1], numbers[i])\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare nil with number\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local result = {}\n    for i=1,#numbers,1 do\n        result[i] = math.max(numbers[i], result[i-1])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare number with nil\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max then max = numbers[i]\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpbjfp8zeg.lua:22: 'end' expected (to close 'function' at line 5) near <eof>\n",
      "stdout": "",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6svg5zy.lua:20: expected: {}\nactual: 1\nstack traceback:\n\t/tmp/tmpk6svg5zy.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 0\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return {max_index, max_value}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsrki7zm8.lua:20: expected: {}\nactual: {0}\nstack traceback:\n\t/tmp/tmpsrki7zm8.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max then max = numbers[i]\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpbjfp8zeg.lua:22: 'end' expected (to close 'function' at line 5) near <eof>\n",
      "stdout": "",
      "timestamp": 1661938064
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_table = {}\n    for i=1,#numbers,1 do\n        local max = numbers[i]\n        for j=i+1,#numbers,1 do\n            if max < numbers[j] then\n                max = numbers[j]\n            end\n        end\n        max_table[#max_table+1] = max\n    end\n    return max_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjav2ufoo.lua:23: expected: {1, 2, 3, 4}\nactual: {4, 4, 4, 4}\nstack traceback:\n\t/tmp/tmpjav2ufoo.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_table = {}\n    for i=1,#numbers do\n        if numbers[i] > max_table[i] then\n            max_table[i] = numbers[i]\n        end\n    end\n    return max_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5siya00d.lua:8: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp5siya00d.lua:8: in local 'candidate'\n\t/tmp/tmp5siya00d.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max then max = numbers[i]\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpbjfp8zeg.lua:22: 'end' expected (to close 'function' at line 5) near <eof>\n",
      "stdout": "",
      "timestamp": 1661938064
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local result = {}\n    for i=1,#numbers,1 do\n        result[i] = math.max(numbers[i], result[i-1])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare number with nil\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max then max = numbers[i]\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpbjfp8zeg.lua:22: 'end' expected (to close 'function' at line 5) near <eof>\n",
      "stdout": "",
      "timestamp": 1661938064
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_table = {}\n    for i=1,#numbers do\n        if numbers[i] > max_table[#max_table] then\n            max_table[#max_table+1] = numbers[i]\n        end\n        max_table[#max_table] = max_table[#max_table] or numbers[i]\n    end\n    return max_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp19qdjrek.lua:8: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp19qdjrek.lua:8: in local 'candidate'\n\t/tmp/tmp19qdjrek.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6svg5zy.lua:20: expected: {}\nactual: 1\nstack traceback:\n\t/tmp/tmpk6svg5zy.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max then max = numbers[i]\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpbjfp8zeg.lua:22: 'end' expected (to close 'function' at line 5) near <eof>\n",
      "stdout": "",
      "timestamp": 1661938064
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_value, max_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwy8p22zj.lua:20: expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpwy8p22zj.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_table = {}\n    for i=1,#numbers do\n        if numbers[i] > max_table[i-1] then\n            max_table[i] = numbers[i]\n        end\n    end\n    return max_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8xf37u1k.lua:8: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp8xf37u1k.lua:8: in local 'candidate'\n\t/tmp/tmp8xf37u1k.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 0\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h0ppnxp.lua:20: expected: {}\nactual: 0\nstack traceback:\n\t/tmp/tmp8h0ppnxp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_table = {}\n    for i=1,#numbers do\n        max_table[i] = math.max(max_table[i-1], numbers[i])\n    end\n    return max_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare nil with number\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max then max = numbers[i]\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpbjfp8zeg.lua:22: 'end' expected (to close 'function' at line 5) near <eof>\n",
      "stdout": "",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 0\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h0ppnxp.lua:20: expected: {}\nactual: 0\nstack traceback:\n\t/tmp/tmp8h0ppnxp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 0\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return {max_value, max_index}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz0tflyx0.lua:20: expected: {}\nactual: {2=0}\nstack traceback:\n\t/tmp/tmpz0tflyx0.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_value, max_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwy8p22zj.lua:20: expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpwy8p22zj.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 0\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return {max_value, max_index}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz0tflyx0.lua:20: expected: {}\nactual: {2=0}\nstack traceback:\n\t/tmp/tmpz0tflyx0.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max then max = numbers[i]\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpbjfp8zeg.lua:22: 'end' expected (to close 'function' at line 5) near <eof>\n",
      "stdout": "",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max then max = numbers[i]\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpbjfp8zeg.lua:22: 'end' expected (to close 'function' at line 5) near <eof>\n",
      "stdout": "",
      "timestamp": 1661938064
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local result = {}\n    for i=1,#numbers,1 do\n        result[i] = math.max(numbers[i], result[i-1])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare number with nil\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6svg5zy.lua:20: expected: {}\nactual: 1\nstack traceback:\n\t/tmp/tmpk6svg5zy.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_table = {}\n    local max_index = 0\n    for i = 1, #numbers, 1 do\n        if numbers[i] > max_table[max_index] then\n            max_table[max_index] = numbers[i]\n            max_index = max_index + 1\n        end\n    end\n    return max_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5nnmkeq6.lua:9: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp5nnmkeq6.lua:9: in local 'candidate'\n\t/tmp/tmp5nnmkeq6.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_table = {}\n    for i=1,#numbers do\n        max_table[i] = math.max(numbers[i], max_table[i-1])\n    end\n    return max_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare number with nil\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local result = {}\n    for i=1,#numbers,1 do\n        result[i] = math.max(numbers[i], result[i-1])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare number with nil\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max then max = numbers[i]\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpbjfp8zeg.lua:22: 'end' expected (to close 'function' at line 5) near <eof>\n",
      "stdout": "",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max then max = numbers[i]\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpbjfp8zeg.lua:22: 'end' expected (to close 'function' at line 5) near <eof>\n",
      "stdout": "",
      "timestamp": 1661938064
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_table = {}\n    for i=1,#numbers do\n        if numbers[i] > max_table[#max_table] then\n            max_table[#max_table+1] = numbers[i]\n        end\n        max_table[#max_table] = max_table[#max_table] or numbers[i]\n    end\n    return max_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp19qdjrek.lua:8: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp19qdjrek.lua:8: in local 'candidate'\n\t/tmp/tmp19qdjrek.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6svg5zy.lua:20: expected: {}\nactual: 1\nstack traceback:\n\t/tmp/tmpk6svg5zy.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return {max_index, max_value}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8us8jrd9.lua:20: expected: {}\nactual: {1}\nstack traceback:\n\t/tmp/tmp8us8jrd9.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 0\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h0ppnxp.lua:20: expected: {}\nactual: 0\nstack traceback:\n\t/tmp/tmp8h0ppnxp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 0\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h0ppnxp.lua:20: expected: {}\nactual: 0\nstack traceback:\n\t/tmp/tmp8h0ppnxp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_table = {}\n    local max_index = {}\n    for i = 1, #numbers, 1 do\n        max_index[i] = 1\n        max_table[1] = numbers[i]\n    end\n    for i = 2, #numbers, 1 do\n        for j = 1, #numbers, i do\n            if numbers[j] > max_table[i-1] then\n                max_index[i] = j\n                max_table[i] = numbers[j]\n            end\n        end\n    end\n    return max_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0_pw2fmg.lua:14: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp0_pw2fmg.lua:14: in local 'candidate'\n\t/tmp/tmp0_pw2fmg.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6svg5zy.lua:20: expected: {}\nactual: 1\nstack traceback:\n\t/tmp/tmpk6svg5zy.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 0\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h0ppnxp.lua:20: expected: {}\nactual: 0\nstack traceback:\n\t/tmp/tmp8h0ppnxp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_table = {}\n    for i=1,#numbers do\n        if numbers[i] > max_table[#max_table] then\n            max_table[#max_table+1] = numbers[i]\n        end\n    end\n    return max_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpexhqo532.lua:8: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpexhqo532.lua:8: in local 'candidate'\n\t/tmp/tmpexhqo532.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 0\n    local max_value = 0\n    for i = 1, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6g8nrsr9.lua:20: expected: {}\nactual: 0\nstack traceback:\n\t/tmp/tmp6g8nrsr9.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local result = {}\n    for i=1,#numbers,1 do\n        result[i] = math.max(numbers[i], result[i-1])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare number with nil\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return {max_index, max_value}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8us8jrd9.lua:20: expected: {}\nactual: {1}\nstack traceback:\n\t/tmp/tmp8us8jrd9.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max then max = numbers[i]\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpbjfp8zeg.lua:22: 'end' expected (to close 'function' at line 5) near <eof>\n",
      "stdout": "",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 0\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return {max_index, max_value}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsrki7zm8.lua:20: expected: {}\nactual: {0}\nstack traceback:\n\t/tmp/tmpsrki7zm8.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max = 0\n    local max_index = 0\n    for i = 1, #numbers, 1 do\n        if numbers[i] > max then\n            max = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjekdl80q.lua:20: expected: {}\nactual: 0\nstack traceback:\n\t/tmp/tmpjekdl80q.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6svg5zy.lua:20: expected: {}\nactual: 1\nstack traceback:\n\t/tmp/tmpk6svg5zy.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local result = {}\n    for i = 1, #numbers, 1 do\n        result[i] = math.max(numbers[i], result[i-1] if i > 1 else numbers[i])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "lua: /tmp/tmp7ua0ai34.lua:8: ')' expected near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 0\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_value, max_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjodgl_uz.lua:20: expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpjodgl_uz.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max then max = numbers[i]\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpbjfp8zeg.lua:22: 'end' expected (to close 'function' at line 5) near <eof>\n",
      "stdout": "",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max then max = numbers[i]\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpbjfp8zeg.lua:22: 'end' expected (to close 'function' at line 5) near <eof>\n",
      "stdout": "",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6svg5zy.lua:20: expected: {}\nactual: 1\nstack traceback:\n\t/tmp/tmpk6svg5zy.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local result = {}\n    for i=1,#numbers,1 do\n        result[i] = math.max(numbers[i], result[i-1])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare number with nil\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return {max_index, max_value}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8us8jrd9.lua:20: expected: {}\nactual: {1}\nstack traceback:\n\t/tmp/tmp8us8jrd9.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local result = {}\n    for i=1,#numbers,1 do\n        result[i] = math.max(numbers[i], result[i-1])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare number with nil\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 0\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return {max_index, max_value}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsrki7zm8.lua:20: expected: {}\nactual: {0}\nstack traceback:\n\t/tmp/tmpsrki7zm8.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max then max = numbers[i]\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpbjfp8zeg.lua:22: 'end' expected (to close 'function' at line 5) near <eof>\n",
      "stdout": "",
      "timestamp": 1661938064
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 0\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_value, max_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjodgl_uz.lua:20: expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpjodgl_uz.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local result = {}\n    for i=1,#numbers,1 do\n        result[i] = math.max(numbers[i], result[i-1] if i > 1 else numbers[1])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "lua: /tmp/tmpogi1zp65.lua:8: ')' expected near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local result = {}\n    for i = 1, #numbers, 1 do\n        result[i] = math.max(numbers[i], result[i - 1])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare number with nil\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max = 0\n    local max_index = 0\n    for i = 1, #numbers, 1 do\n        if numbers[i] > max then\n            max = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjekdl80q.lua:20: expected: {}\nactual: 0\nstack traceback:\n\t/tmp/tmpjekdl80q.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max = 0\n    local result = {}\n    for i = 1, #numbers, 1 do\n        if numbers[i] > max then\n            max = numbers[i]\n            result = {max}\n        else\n            if max == numbers[i] then\n                result = result .. {max}\n            else\n                result = result .. {numbers[i]}\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsqdw_093.lua:31: 'end' expected (to close 'function' at line 5) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 0\n    local max_value = 0\n    for i = 1, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy_5ginwg.lua:20: expected: {}\nactual: 0\nstack traceback:\n\t/tmp/tmpy_5ginwg.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 0\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h0ppnxp.lua:20: expected: {}\nactual: 0\nstack traceback:\n\t/tmp/tmp8h0ppnxp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_table = {}\n    for i = 1, #numbers, 1 do\n        max_table[i] = numbers[i]\n        for j = i + 1, #numbers, 1 do\n            if max_table[j] < numbers[j] then\n                max_table[i] = numbers[i]\n                max_table[j] = numbers[j]\n            end\n        end\n    end\n    return max_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl7krh77r.lua:10: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpl7krh77r.lua:10: in local 'candidate'\n\t/tmp/tmpl7krh77r.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local result = {}\n    for i = 1, #numbers, 1 do\n        result[i] = math.max(numbers[i], result[i-1] if i > 1 else numbers[1])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "lua: /tmp/tmpzx8mktwl.lua:8: ')' expected near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max = 0\n    local result = {}\n    for i=1,#numbers,1 do\n        if numbers[i] > max then\n            max = numbers[i]\n            result = {max}\n        else\n            if max > numbers[i] then\n                result = {max, numbers[i]}\n            else\n                result = {numbers[i], max}\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "lua: /tmp/tmpf2vq6w09.lua:31: 'end' expected (to close 'function' at line 5) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_value, max_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwy8p22zj.lua:20: expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpwy8p22zj.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local table = {}\n    for i = 1, #numbers, 1 do\n        table[i] = math.max(table[i-1], numbers[i])\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare nil with number\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_table = {}\n    for i=1,#numbers do\n        if numbers[i] > max_table[#max_table] then\n            max_table[#max_table+1] = numbers[i]\n        end\n    end\n    return max_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpexhqo532.lua:8: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpexhqo532.lua:8: in local 'candidate'\n\t/tmp/tmpexhqo532.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6svg5zy.lua:20: expected: {}\nactual: 1\nstack traceback:\n\t/tmp/tmpk6svg5zy.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return {max_index, max_value}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8us8jrd9.lua:20: expected: {}\nactual: {1}\nstack traceback:\n\t/tmp/tmp8us8jrd9.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_table = {}\n    for i=1,#numbers,1 do\n        max_table[i] = numbers[i]\n        for j=i+1,#numbers,1 do\n            if max_table[i] < numbers[j] then\n                max_table[i] = numbers[j]\n            end\n        end\n    end\n    return max_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzxrb6xt6.lua:22: expected: {1, 2, 3, 4}\nactual: {4, 4, 4, 4}\nstack traceback:\n\t/tmp/tmpzxrb6xt6.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6svg5zy.lua:20: expected: {}\nactual: 1\nstack traceback:\n\t/tmp/tmpk6svg5zy.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6svg5zy.lua:20: expected: {}\nactual: 1\nstack traceback:\n\t/tmp/tmpk6svg5zy.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_table = {}\n    for i=1,#numbers do\n        if numbers[i] > max_table[i] then\n            max_table[i] = numbers[i]\n        end\n    end\n    return max_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5siya00d.lua:8: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp5siya00d.lua:8: in local 'candidate'\n\t/tmp/tmp5siya00d.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 0\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h0ppnxp.lua:20: expected: {}\nactual: 0\nstack traceback:\n\t/tmp/tmp8h0ppnxp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_table = {}\n    for i = 1, #numbers do\n        if numbers[i] > max_table[#max_table + 1] then\n            max_table[#max_table + 1] = numbers[i]\n        end\n        if numbers[i] > max_table[#max_table] then\n            max_table[#max_table] = numbers[i]\n        end\n    end\n    return max_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpecuw2ac3.lua:8: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpecuw2ac3.lua:8: in local 'candidate'\n\t/tmp/tmpecuw2ac3.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max = numbers[1]\n    for i = 2, #numbers, 1 do\n        max = math.max(max, numbers[i])\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9apzdvqq.lua:16: expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp9apzdvqq.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6svg5zy.lua:20: expected: {}\nactual: 1\nstack traceback:\n\t/tmp/tmpk6svg5zy.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_table = {}\n    local current_max = nil\n    local current_index = nil\n    for i = 1, #numbers, 1 do\n        if current_max == nil or numbers[i] > current_max then\n            current_max = numbers[i]\n            current_index = i\n        end\n        table.insert(max_table, current_max)\n    end\n    return max_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 0\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h0ppnxp.lua:20: expected: {}\nactual: 0\nstack traceback:\n\t/tmp/tmp8h0ppnxp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max then max = numbers[i]\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpbjfp8zeg.lua:22: 'end' expected (to close 'function' at line 5) near <eof>\n",
      "stdout": "",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 0\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return {max_index, max_value}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsrki7zm8.lua:20: expected: {}\nactual: {0}\nstack traceback:\n\t/tmp/tmpsrki7zm8.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 0\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h0ppnxp.lua:20: expected: {}\nactual: 0\nstack traceback:\n\t/tmp/tmp8h0ppnxp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max then max = numbers[i]\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpbjfp8zeg.lua:22: 'end' expected (to close 'function' at line 5) near <eof>\n",
      "stdout": "",
      "timestamp": 1661938064
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_table = {}\n    for i=1,#numbers do\n        if numbers[i] > max_table[#max_table] then\n            max_table[#max_table+1] = numbers[i]\n        end\n        max_table[#max_table] = max_table[#max_table] or numbers[i]\n    end\n    return max_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp19qdjrek.lua:8: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp19qdjrek.lua:8: in local 'candidate'\n\t/tmp/tmp19qdjrek.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local result = {}\n    for i=1,#numbers,1 do\n        result[i] = math.max(numbers[i], result[i-1])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare number with nil\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6svg5zy.lua:20: expected: {}\nactual: 1\nstack traceback:\n\t/tmp/tmpk6svg5zy.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6svg5zy.lua:20: expected: {}\nactual: 1\nstack traceback:\n\t/tmp/tmpk6svg5zy.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max = 0\n    local result = {}\n    for i = 1, #numbers, 1 do\n        max = math.max(max, numbers[i])\n        result[i] = max\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6svg5zy.lua:20: expected: {}\nactual: 1\nstack traceback:\n\t/tmp/tmpk6svg5zy.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local result = {}\n    for i=1,#numbers,1 do\n        result[i] = math.max(numbers[i], result[i-1])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare number with nil\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_value, max_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwy8p22zj.lua:20: expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpwy8p22zj.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6svg5zy.lua:20: expected: {}\nactual: 1\nstack traceback:\n\t/tmp/tmpk6svg5zy.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6svg5zy.lua:20: expected: {}\nactual: 1\nstack traceback:\n\t/tmp/tmpk6svg5zy.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max then max = numbers[i]\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpbjfp8zeg.lua:22: 'end' expected (to close 'function' at line 5) near <eof>\n",
      "stdout": "",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6svg5zy.lua:20: expected: {}\nactual: 1\nstack traceback:\n\t/tmp/tmpk6svg5zy.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 0\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h0ppnxp.lua:20: expected: {}\nactual: 0\nstack traceback:\n\t/tmp/tmp8h0ppnxp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max then max = numbers[i]\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpbjfp8zeg.lua:22: 'end' expected (to close 'function' at line 5) near <eof>\n",
      "stdout": "",
      "timestamp": 1661938064
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_table = {}\n    for i = 1, #numbers, 1 do\n        max_table[i] = numbers[i]\n        for j = i + 1, #numbers, 1 do\n            if numbers[j] > max_table[i] then\n                max_table[i] = numbers[j]\n            end\n        end\n    end\n    return max_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpinv3hg1g.lua:22: expected: {1, 2, 3, 4}\nactual: {4, 4, 4, 4}\nstack traceback:\n\t/tmp/tmpinv3hg1g.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max = 0\n    local result = {}\n    for i=1,#numbers,1 do\n        if numbers[i] > max then\n            max = numbers[i]\n        end\n        result[#result+1] = max\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6svg5zy.lua:20: expected: {}\nactual: 1\nstack traceback:\n\t/tmp/tmpk6svg5zy.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max then max = numbers[i]\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpbjfp8zeg.lua:22: 'end' expected (to close 'function' at line 5) near <eof>\n",
      "stdout": "",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 0\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h0ppnxp.lua:20: expected: {}\nactual: 0\nstack traceback:\n\t/tmp/tmp8h0ppnxp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6svg5zy.lua:20: expected: {}\nactual: 1\nstack traceback:\n\t/tmp/tmpk6svg5zy.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_table = {}\n    for i=1,#numbers do\n        if numbers[i] > max_table[i] then\n            max_table[i] = numbers[i]\n        end\n    end\n    return max_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5siya00d.lua:8: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp5siya00d.lua:8: in local 'candidate'\n\t/tmp/tmp5siya00d.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6svg5zy.lua:20: expected: {}\nactual: 1\nstack traceback:\n\t/tmp/tmpk6svg5zy.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6svg5zy.lua:20: expected: {}\nactual: 1\nstack traceback:\n\t/tmp/tmpk6svg5zy.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_table = {}\n    for i = 1, #numbers do\n        max_table[i] = math.max(numbers[i], max_table[i-1])\n    end\n    return max_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare number with nil\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max then max = numbers[i]\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpbjfp8zeg.lua:22: 'end' expected (to close 'function' at line 5) near <eof>\n",
      "stdout": "",
      "timestamp": 1661938064
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local table = {}\n    for i=1,#numbers do\n        table[i] = math.max(table[i-1], numbers[i])\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare nil with number\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_table = {}\n    for i=1,#numbers do\n        local max = numbers[i]\n        for j=i+1,#numbers do\n            if max < numbers[j] then\n                max = numbers[j]\n            end\n        end\n        max_table[i] = max\n    end\n    return max_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhtaazv_.lua:23: expected: {1, 2, 3, 4}\nactual: {4, 4, 4, 4}\nstack traceback:\n\t/tmp/tmpkhtaazv_.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return {max_index, max_value}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8us8jrd9.lua:20: expected: {}\nactual: {1}\nstack traceback:\n\t/tmp/tmp8us8jrd9.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 0\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h0ppnxp.lua:20: expected: {}\nactual: 0\nstack traceback:\n\t/tmp/tmp8h0ppnxp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max = 0\n    local i = 1\n    while i <= #numbers do\n        if numbers[i] > max then max = numbers[i]\n        i = i + 1\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "lua: /tmp/tmpklyaqslu.lua:24: 'end' expected (to close 'function' at line 5) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6svg5zy.lua:20: expected: {}\nactual: 1\nstack traceback:\n\t/tmp/tmpk6svg5zy.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 0\n    local max_value = 0\n    for i = 1, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_value, max_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7e8n097h.lua:20: expected: {}\nactual: 0\nstack traceback:\n\t/tmp/tmp7e8n097h.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local result = {}\n    for i=1,#numbers,1 do\n        result[i] = math.max(numbers[i], result[i-1])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare number with nil\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max = numbers[1]\n    for i = 2, #numbers, 1 do\n        max = max if max > numbers[i] else numbers[i]\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "",
      "stderr": "lua: /tmp/tmppv0qt0z3.lua:8: 'then' expected near 'else'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 0\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h0ppnxp.lua:20: expected: {}\nactual: 0\nstack traceback:\n\t/tmp/tmp8h0ppnxp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local result = {}\n    for i = 1, #numbers, 1 do\n        result[i] = math.max(numbers[i], result[i-1])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare number with nil\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local result = {}\n    for i=1,#numbers,1 do\n        result[i] = math.max(numbers[i], result[i-1])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare number with nil\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_value, max_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwy8p22zj.lua:20: expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpwy8p22zj.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_table = {}\n    for i = 1, #numbers, 1 do\n        max_table[i] = numbers[i]\n        for j = i + 1, #numbers, 1 do\n            if numbers[j] > max_table[i] then\n                max_table[i + 1] = numbers[j]\n            end\n        end\n    end\n    return max_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ekic3u1.lua:23: expected: {4, 4, 4, 4}\nactual: {4, 3, 2, 1}\nstack traceback:\n\t/tmp/tmp_ekic3u1.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6svg5zy.lua:20: expected: {}\nactual: 1\nstack traceback:\n\t/tmp/tmpk6svg5zy.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 0\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h0ppnxp.lua:20: expected: {}\nactual: 0\nstack traceback:\n\t/tmp/tmp8h0ppnxp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max then max = numbers[i]\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpbjfp8zeg.lua:22: 'end' expected (to close 'function' at line 5) near <eof>\n",
      "stdout": "",
      "timestamp": 1661938064
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_table = {}\n    for i=1,#numbers do\n        if numbers[i] > max_table[#max_table] then\n            max_table[#max_table+1] = numbers[i]\n        end\n        if i == #numbers then\n            max_table[#max_table] = 0\n        end\n    end\n    return max_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3uwknprk.lua:8: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp3uwknprk.lua:8: in local 'candidate'\n\t/tmp/tmp3uwknprk.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_table = {}\n    for i=1,#numbers do\n        max_table[i] = math.max(max_table[i-1], numbers[i])\n    end\n    return max_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare nil with number\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6svg5zy.lua:20: expected: {}\nactual: 1\nstack traceback:\n\t/tmp/tmpk6svg5zy.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max then max = numbers[i]\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpbjfp8zeg.lua:22: 'end' expected (to close 'function' at line 5) near <eof>\n",
      "stdout": "",
      "timestamp": 1661938064
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_table = {}\n    for i = 1, #numbers, 1 do\n        max_table[i] = numbers[i]\n        for j = i + 1, #numbers, 1 do\n            if numbers[j] > max_table[i] then\n                max_table[i] = numbers[j]\n            end\n        end\n    end\n    return max_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpinv3hg1g.lua:22: expected: {1, 2, 3, 4}\nactual: {4, 4, 4, 4}\nstack traceback:\n\t/tmp/tmpinv3hg1g.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max then max = numbers[i]\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpbjfp8zeg.lua:22: 'end' expected (to close 'function' at line 5) near <eof>\n",
      "stdout": "",
      "timestamp": 1661938064
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return {max_index, max_value}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8us8jrd9.lua:20: expected: {}\nactual: {1}\nstack traceback:\n\t/tmp/tmp8us8jrd9.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6svg5zy.lua:20: expected: {}\nactual: 1\nstack traceback:\n\t/tmp/tmpk6svg5zy.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 0\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return {max_value, max_index}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292574,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz0tflyx0.lua:20: expected: {}\nactual: {2=0}\nstack traceback:\n\t/tmp/tmpz0tflyx0.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max then max = numbers[i]\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpbjfp8zeg.lua:22: 'end' expected (to close 'function' at line 5) near <eof>\n",
      "stdout": "",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6svg5zy.lua:20: expected: {}\nactual: 1\nstack traceback:\n\t/tmp/tmpk6svg5zy.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_table = {}\n    for i=1,#numbers do\n        if numbers[i] > max_table[i] then\n            max_table[i] = numbers[i]\n        end\n    end\n    return max_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5siya00d.lua:8: attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp5siya00d.lua:8: in local 'candidate'\n\t/tmp/tmp5siya00d.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local result = {}\n    for i=1,#numbers,1 do\n        result[i] = math.max(numbers[i], result[i-1])\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare number with nil\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_table = {}\n    for i=1,#numbers do\n        max_table[i] = math.max(max_table[i-1], numbers[i])\n    end\n    return max_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to compare nil with number\nstack traceback:\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max = 0\n    local result = {}\n    for i=1,#numbers,1 do\n        if max < numbers[i] then\n            max = numbers[i]\n        end\n        result[i] = max\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_index, max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk6svg5zy.lua:20: expected: {}\nactual: 1\nstack traceback:\n\t/tmp/tmpk6svg5zy.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661938064
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 0\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_value, max_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjodgl_uz.lua:20: expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpjodgl_uz.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_value, max_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwy8p22zj.lua:20: expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpwy8p22zj.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max then max = numbers[i]\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpbjfp8zeg.lua:22: 'end' expected (to close 'function' at line 5) near <eof>\n",
      "stdout": "",
      "timestamp": 1661938064
    },
    {
      "exit_code": 1,
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max then max = numbers[i]\n    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpbjfp8zeg.lua:22: 'end' expected (to close 'function' at line 5) near <eof>\n",
      "stdout": "",
      "timestamp": 1661938064
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 1\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return {max_index, max_value}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8us8jrd9.lua:20: expected: {}\nactual: {1}\nstack traceback:\n\t/tmp/tmp8us8jrd9.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- From a given table of integers, generate a table of rolling maximum element found until given moment\n-- in the sequence.\n-- >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n-- [1, 2, 3, 3, 3, 4, 4]\nlocal function rolling_max(numbers)\n    local max_index = 0\n    local max_value = numbers[1]\n    for i = 2, #numbers, 1 do\n        if numbers[i] > max_value then\n            max_value = numbers[i]\n            max_index = i\n        end\n    end\n    return max_value, max_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292575,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjodgl_uz.lua:20: expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpjodgl_uz.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}