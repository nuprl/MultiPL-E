name: HumanEval_24_largest_divisor
language: lua
prompt: "-- For a given number n, find the largest number that divides n evenly, smaller\
  \ than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
  \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n  \
  \  lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
  \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local max = 1\n    for i = 2, math.floor(math.sqrt(n)) do\n   \
    \     if n % i == 0 then\n            max = i\n            break\n        end\n\
    \    end\n    return max\nend", "    local result = 1\n    for i = 2, math.sqrt(n)\
    \ + 1 do\n        if n % i == 0 then\n            result = i\n            break\n\
    \        end\n    end\n    return result\nend", "    local divisors = {}\n   \
    \ for i = 1, n do\n        if n % i == 0 then\n            divisors[i] = true\n\
    \        end\n    end\n    return math.max(divisors)\nend", "    local max = 1\n\
    \    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n    \
    \        max = i\n            break\n        end\n    end\n    return max\nend",
  "    local max = math.floor(math.sqrt(n))\n    for i = 2, max do\n        if n %\
    \ i == 0 then\n            return i\n        end\n    end\nend\nreturn max\nend",
  "    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n    \
    \        divisors[i] = true\n            if i > max then max = i\n        end\n\
    \    end\n    return max\nend", "    local d = math.floor(math.sqrt(n))\n    for\
    \ i = 1, d do\n        if n % i == 0 then\n            return i\n        end\n\
    \    end\nend\nreturn largest_divisor(n)\nend\n\"\"\"", "    local result = 1\n\
    \    for i = 2, n do\n        if n % i == 0 then\n            result = i\n   \
    \         break\n        end\n    end\n    return result\nend", "    local divisors\
    \ = {}\n    for i = 1, n do\n        if n % i == 0 then\n            divisors[i]\
    \ = true\n            if i > max_divisor then max_divisor = i\n        end\n \
    \   end\n    return max_divisor\nend", "    local d = math.floor(math.sqrt(n))\n\
    \    for i = 1, d do\n        if n % i == 0 then\n            return i\n     \
    \   end\n    end\nend\nreturn largest_divisor(n)\nend", "    local result = 1\n\
    \    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n    \
    \        result = i\n            break\n        end\n    end\n    return result\n\
    end", "    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n\
    \            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\n\
    end", "    local max = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          max = i\n        end\n    end\n    return max\nend", "    local max\
    \ = 1\n    for i = 2, math.sqrt(n) + 1 do\n        if n % i == 0 then\n      \
    \      max = i\n            break\n        end\n    end\n    return max\nend",
  "    local max = 1\n    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i\
    \ == 0 then\n            max = i\n            break\n        end\n    end\n  \
    \  return max\nend", "    local max = math.floor(math.sqrt(n))\n    for i = 2,\
    \ max do\n        if n % i == 0 then\n            return i\n        end\n    end\n\
    end", "    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n\
    \            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\n\
    end", "    local i, j, k\n    for i = 1, n, 2 do\n        for j = 1, n, 2 do\n\
    \            k = i * j\n            if k < n and k % n == 0 then\n           \
    \     return k\n            end\n        end\n    end\nend\nreturn largest_divisor(n)\n\
    end", "    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n\
    \            divisors[i] = true\n            if i > max then max = i\n       \
    \ end\n    end\n    return max\nend", "    local divisors = {}\n    for i = 1,\
    \ n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n  \
    \      end\n    end\n    return table.max(divisors)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
