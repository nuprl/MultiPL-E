name: HumanEval_24_largest_divisor
language: lua
prompt: "-- For a given number n, find the largest number that divides n evenly, smaller\
  \ than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
  \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n  \
  \  lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
  \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local max = 1\n    for i = 2, math.floor(math.sqrt(n)) do\n   \
    \     if n % i == 0 then\n            max = i\n            break\n        end\n\
    \    end\n    return max\nend", "    local result = 1\n    for i = 2, math.sqrt(n)\
    \ + 1 do\n        if n % i == 0 then\n            result = i\n            break\n\
    \        end\n    end\n    return result\nend", "    local divisors = {}\n   \
    \ for i = 1, n do\n        if n % i == 0 then\n            divisors[i] = true\n\
    \        end\n    end\n    return math.max(divisors)\nend", "    local max = 1\n\
    \    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n    \
    \        max = i\n            break\n        end\n    end\n    return max\nend",
  "    local max = math.floor(math.sqrt(n))\n    for i = 2, max do\n        if n %\
    \ i == 0 then\n            return i\n        end\n    end\nend\nreturn max\nend",
  "    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n    \
    \        divisors[i] = true\n            if i > max then max = i\n        end\n\
    \    end\n    return max\nend", "    local d = math.floor(math.sqrt(n))\n    for\
    \ i = 1, d do\n        if n % i == 0 then\n            return i\n        end\n\
    \    end\nend\nreturn largest_divisor(n)\nend\n\"\"\"", "    local result = 1\n\
    \    for i = 2, n do\n        if n % i == 0 then\n            result = i\n   \
    \         break\n        end\n    end\n    return result\nend", "    local divisors\
    \ = {}\n    for i = 1, n do\n        if n % i == 0 then\n            divisors[i]\
    \ = true\n            if i > max_divisor then max_divisor = i\n        end\n \
    \   end\n    return max_divisor\nend", "    local d = math.floor(math.sqrt(n))\n\
    \    for i = 1, d do\n        if n % i == 0 then\n            return i\n     \
    \   end\n    end\nend\nreturn largest_divisor(n)\nend", "    local result = 1\n\
    \    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n    \
    \        result = i\n            break\n        end\n    end\n    return result\n\
    end", "    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n\
    \            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\n\
    end", "    local max = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          max = i\n        end\n    end\n    return max\nend", "    local max\
    \ = 1\n    for i = 2, math.sqrt(n) + 1 do\n        if n % i == 0 then\n      \
    \      max = i\n            break\n        end\n    end\n    return max\nend",
  "    local max = 1\n    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i\
    \ == 0 then\n            max = i\n            break\n        end\n    end\n  \
    \  return max\nend", "    local max = math.floor(math.sqrt(n))\n    for i = 2,\
    \ max do\n        if n % i == 0 then\n            return i\n        end\n    end\n\
    end", "    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n\
    \            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\n\
    end", "    local i, j, k\n    for i = 1, n, 2 do\n        for j = 1, n, 2 do\n\
    \            k = i * j\n            if k < n and k % n == 0 then\n           \
    \     return k\n            end\n        end\n    end\nend\nreturn largest_divisor(n)\n\
    end", "    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n\
    \            divisors[i] = true\n            if i > max then max = i\n       \
    \ end\n    end\n    return max\nend", "    local divisors = {}\n    for i = 1,\
    \ n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n  \
    \      end\n    end\n    return table.max(divisors)\nend", "    local divisors\
    \ = {}\n    for i = 1, n do\n        if n % i == 0 then\n            divisors[i]\
    \ = true\n            if i > max then max = i\n        end\n    end\n    return\
    \ max\nend", "    local divisors = {}\n    for i = 1, n do\n        if n % i ==\
    \ 0 then\n            table.insert(divisors, i)\n        end\n    end\n    return\
    \ table.max(divisors)\nend", "    local max = 1\n    for i = 2, math.floor(math.sqrt(n))\
    \ + 1 do\n        if n % i == 0 then\n            max = i\n            break\n\
    \        end\n    end\n    return max\nend", "    local i = math.floor(math.sqrt(n))\n\
    \    while i > 0 and n % i > 0\n        i = i - 1\n    end\n    return i\nend",
  "    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n    \
    \        table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\n\
    end", "    local d = 1\n    while d <= n/2 do\n        if n % d == 0 then\n  \
    \          return d\n        end\n        d = d + 1\n    end\nend", "    local\
    \ max = 1\n    for i = 2, math.sqrt(n) + 1 do\n        if n % i == 0 then\n  \
    \          max = i\n            break\n        end\n    end\n    return max\n\
    end", "    local max = 1\n    for i = 2, math.sqrt(n) + 1 do\n        if n % i\
    \ == 0 then\n            max = i\n            break\n        end\n    end\n  \
    \  return max\nend", "    local max = 1\n    for i = 2, math.floor(math.sqrt(n))+1\
    \ do\n        if n % i == 0 then\n            max = i\n            break\n   \
    \     end\n    end\n    return max\nend", "    local max = 0\n    for i = 1, n\
    \ do\n        if n % i == 0 then\n            max = i\n        end\n    end\n\
    \    return max\nend", "    local max = 1\n    for i = 2, math.floor(math.sqrt(n))\
    \ do\n        if n % i == 0 then\n            max = i\n            break\n   \
    \     end\n    end\n    return max\nend", "    local divisors = {}\n    for i\
    \ = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n\
    \        end\n    end\n    return table.max(divisors)\nend", "    local divisors\
    \ = {}\n    for i = 1, n do\n        if n % i == 0 then\n            divisors[i]\
    \ = true\n        end\n    end\n    return math.max(divisors)\nend", "    local\
    \ divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n           \
    \ table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\n\
    end", "    local max = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          max = i\n        end\n    end\n    return max\nend", "    local max\
    \ = 1\n    for i = 2, math.sqrt(n) + 1 do\n        if n % i == 0 then\n      \
    \      max = i\n            break\n        end\n    end\n    return max\nend",
  "    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n    \
    \        divisors[i] = true\n        end\n    end\n    return max(divisors, key\
    \ = function(x) return x end)\nend", "    local max = 1\n    for i = 2, math.floor(math.sqrt(n))\
    \ + 1 do\n        if n % i == 0 then\n            max = i\n            break\n\
    \        end\n    end\n    return max\nend", "    local max = 1\n    for i = 2,\
    \ math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n            max = i\n\
    \            break\n        end\n    end\n    return max\nend", "    local i,\
    \ j, k, m, p\n    for i = 1, n, 2 do\n        for j = 1, n, 2 do\n           \
    \ for k = 1, n, 2 do\n                for m = 1, n, 2 do\n                   \
    \ for p = 1, n, 2 do\n                        if (m * p) > (n / i) and (m * p)\
    \ < (n / j) and (m * p) < (n / k) and (m * p) < (n / m) and (m * p) < (n / p)\
    \ then\n                            return m * p\n                        end\n\
    \                    end\n                end\n            end\n        end\n\
    \    end\nend\nprint(largest_divisor(15))", "    local divisors = {}\n    for\
    \ i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors,\
    \ i)\n        end\n    end\n    return table.max(divisors)\nend", "    local d\
    \ = 1\n    while d <= n/2 do\n        if n % d == 0 then\n            return d\n\
    \        end\n        d = d + 1\n    end\nend", "    local i = 1\n    while i\
    \ <= n do\n        if n % i == 0 then\n            return i\n        end\n   \
    \     i = i + 1\n    end\nend", "    local i, j, k\n    for i = 2, n, 1 do\n \
    \       for j = 2, i, 1 do\n            k = n / i / j\n            if k > 0 and\
    \ k < n then\n                return k\n            end\n        end\n    end\n\
    \    return 0\nend", "    local divisors = {}\n    for i = 1, n do\n        if\
    \ n % i == 0 then\n            divisors[i] = true\n        end\n    end\n    for\
    \ i = 1, n do\n        if not divisors[i] then\n            return i\n       \
    \ end\n    end\nend", "    local d = math.floor(math.sqrt(n))\n    for i = 2,\
    \ d do\n        if n % i == 0 then\n            return i\n        end\n    end\n\
    \    return 1\nend", "    local divisors = {}\n    for i = 1, n do\n        if\
    \ n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n\
    \    return table.max(divisors)\nend", "    local max = 1\n    for i = 2, n, 1\
    \ do\n        if n % i == 0 then\n            max = i\n        end\n    end\n\
    \    return max\nend", "    local divisors = {}\n    for i = 1, n do\n       \
    \ if n % i == 0 then\n            table.insert(divisors, i)\n        end\n   \
    \ end\n    return table.max(divisors)\nend", "    local m = math.floor(math.sqrt(n))\n\
    \    for i = 2, m do\n        if n % i == 0 then\n            return i\n     \
    \   end\n    end\nend\nreturn largest_divisor(n)\nend\n\"\"\"", "    local divisors\
    \ = {}\n    for i = 1, n do\n        if n % i == 0 then\n            divisors[i]\
    \ = true\n        end\n    end\n    return math.max(divisors)\nend", "    local\
    \ max = 1\n    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n\
    \            max = i\n            break\n        end\n    end\n    return max\n\
    end", "    local i, j\n    for i = 1, n do\n        for j = 1, n do\n        \
    \    if j > i and j % i == 0 then\n                return j\n            end\n\
    \        end\n    end\nend", "    local max = 1\n    for i = 2, math.floor(math.sqrt(n))\
    \ do\n        if n % i == 0 then\n            max = i\n            break\n   \
    \     end\n    end\n    return max\nend", "    local divisors = {}\n    for i\
    \ = 1, n do\n        if n % i == 0 then\n            divisors[i] = true\n    \
    \        if i > divisors[n / i] then\n                divisors[n / i] = i\n  \
    \          end\n        end\n    end\n    return divisors[n]\nend", "    local\
    \ max = 1\n    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n\
    \            max = i\n            break\n        end\n    end\n    return max\n\
    end", "    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n\
    \            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\n\
    end", "    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n\
    \            divisors[i] = i\n            divisors[n/i] = n/i\n        end\n \
    \   end\n    return max(divisors)\nend", "    local divisors = {}\n    for i =\
    \ 1, n do\n        if n % i == 0 then\n            divisors[i] = true\n      \
    \  end\n    end\n    return math.max(divisors)\nend", "    local max = math.floor(math.sqrt(n))\n\
    \    for i = 1, max do\n        if n % i == 0 then\n            return i\n   \
    \     end\n    end\nend\nreturn max\nend", "    local m = math.floor(math.sqrt(n))\n\
    \    for i = 2, m do\n        if n % i == 0 then\n            return i\n     \
    \   end\n    end\nend\nreturn largest_divisor(n)\nend", "    local max = math.floor(math.sqrt(n))\n\
    \    for i = 2, max do\n        if n % i == 0 then\n            return i\n   \
    \     end\n    end\nend\nreturn max\nend", "    local max = 1\n    for i = 2,\
    \ math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n            max = i\n\
    \            break\n        end\n    end\n    return max\nend", "    local i =\
    \ 1\n    while i <= n do\n        if n % i == 0 then\n            return i\n \
    \       end\n        i = i + 1\n    end\nend", "    local d = 1\n    while d <=\
    \ n/2 do\n        if n % d == 0 then\n            return d\n        end\n    \
    \    d = d + 1\n    end\nend", "    local divisors = {}\n    for i = 1, n do\n\
    \        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n\
    \    end\n    return table.max(divisors)\nend", "    local divisors = {}\n   \
    \ for i = 1, n do\n        if n % i == 0 then\n            divisors[i] = true\n\
    \        end\n    end\n    return math.max(divisors)\nend", "    local max = 1\n\
    \    for i = 2, n do\n        if n % i == 0 then\n            max = i\n      \
    \  end\n    end\n    return max\nend", "    local divisors = {}\n    for i = 1,\
    \ n do\n        if n % i == 0 then\n            divisors[i] = true\n        end\n\
    \    end\n    return max(divisors)\nend", "    local result = 1\n    for i = 2,\
    \ math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n            result\
    \ = i\n            break\n        end\n    end\n    return result\nend", "   \
    \ local max = 0\n    for i = 1, n do\n        if n % i == 0 then\n           \
    \ max = i\n            break\n        end\n    end\n    return max\nend", "  \
    \  local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n    \
    \        table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\n\
    end", "    local i = 1\n    while i <= n do\n        if n % i == 0 then\n    \
    \        return i\n        end\n        i = i + 1\n    end\nend", "    local divisors\
    \ = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors,\
    \ i)\n        end\n    end\n    return table.max(divisors)\nend", "    local divisors\
    \ = {}\n    for i = 1, n do\n        if n % i == 0 then\n            divisors[i]\
    \ = true\n            if i > divisors[n / i] then\n                divisors[n\
    \ / i] = i\n            end\n        end\n    end\n    return divisors[n]\nend",
  "    local max = math.floor(math.sqrt(n))\n    for i = 2, max do\n        if n %\
    \ i == 0 then\n            return i\n        end\n    end\nend\nreturn max\nend",
  "    local max = 1\n    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i\
    \ == 0 then\n            max = i\n            break\n        end\n    end\n  \
    \  return max\nend", "    local divisors = {}\n    for i = 1, n do\n        if\
    \ n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n\
    \    return table.max(divisors)\nend", "    local divisors = {}\n    for i = 1,\
    \ n do\n        if n % i == 0 then\n            divisors[i] = i\n            divisors[n/i]\
    \ = n/i\n        end\n    end\n    return max(divisors, key = function(k) return\
    \ divisors[k] end)\nend", "    local result = 1\n    for i = 2, n do\n       \
    \ if n % i == 0 then\n            result = i\n            break\n        end\n\
    \    end\n    return result\nend", "    local i, j, k, m, r\n    for i = 1, n\
    \ do\n        for j = 1, n do\n            for k = 1, n do\n                for\
    \ m = 1, n do\n                    r = i * j * k * m\n                    if r\
    \ > n then\n                        return r\n                    end\n      \
    \          end\n            end\n        end\n    end\n    return 0\nend", " \
    \   local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n   \
    \         table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\n\
    end", "    local d = 1\n    for i = 2, math.sqrt(n) do\n        if n % i == 0\
    \ then\n            d = i\n            break\n        end\n    end\n    return\
    \ d\nend", "    local max = 1\n    for i = 2, math.floor(math.sqrt(n))+1 do\n\
    \        if n % i == 0 then\n            max = i\n            break\n        end\n\
    \    end\n    return max\nend", "    local divisors = {}\n    for i = 1, n do\n\
    \        if n % i == 0 then\n            divisors[i] = true\n        end\n   \
    \ end\n    for i = 1, n do\n        if not divisors[i] then\n            return\
    \ i\n        end\n    end\nend", "    local m = math.floor(math.sqrt(n))\n   \
    \ for i = 2, m do\n        if n % i == 0 then\n            return i\n        end\n\
    \    end\nend\nreturn largest_divisor(n)\nend", "    local max = math.floor(math.sqrt(n))\n\
    \    for i = 2, max do\n        if n % i == 0 then\n            return i\n   \
    \     end\n    end\nend\nreturn max\nend", "    local divisors = {}\n    for i\
    \ = 1, n do\n        if n % i == 0 then\n            divisors[i] = i\n       \
    \     divisors[n/i] = n/i\n        end\n    end\n    return max(divisors)\nend",
  "    local max = 1\n    for i = 2, n do\n        if n % i == 0 then\n          \
    \  max = i\n        end\n    end\n    return max\nend", "    local max = math.floor(math.sqrt(n))\n\
    \    for i = 2, max do\n        if n % i == 0 then\n            return i\n   \
    \     end\n    end\nend\nreturn max\nend", "    local divisors = {}\n    for i\
    \ = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n\
    \        end\n    end\n    return table.max(divisors)\nend", "    local max =\
    \ 1\n    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n\
    \            max = i\n            break\n        end\n    end\n    return max\n\
    end", "    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n\
    \            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\n\
    end", "    local max = 1\n    for i = 2, math.floor(math.sqrt(n))+1 do\n     \
    \   if n % i == 0 then\n            max = i\n            break\n        end\n\
    \    end\n    return max\nend", "    local i, j, k, m, s\n    for i = 1, n, 2\
    \ do\n        for j = 1, n, 2 do\n            for k = 1, n, 2 do\n           \
    \     for m = 1, n, 2 do\n                    s = i * i + j * j + k * k + m *\
    \ m\n                    if s <= n and s % n == 0 then\n                     \
    \   return s\n                    end\n                end\n            end\n\
    \        end\n    end\n    return 0\nend", "    local result = 1\n    for i =\
    \ 2, n do\n        if n % i == 0 then\n            result = i\n            break\n\
    \        end\n    end\n    return result\nend", "    local divisors = {}\n   \
    \ for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors,\
    \ i)\n        end\n    end\n    return table.max(divisors)\nend", "    local divisors\
    \ = {}\n    for i = 1, n do\n        if n % i == 0 then\n            divisors[i]\
    \ = true\n        end\n    end\n    return max(divisors)\nend", "    local divisors\
    \ = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors,\
    \ i)\n        end\n    end\n    return table.max(divisors)\nend", "    local i\
    \ = 1\n    while i <= n do\n        if n % i == 0 then\n            return i\n\
    \        end\n        i = i + 1\n    end\nend", "    local i, j, k\n    for i\
    \ = 1, n, 2 do\n        for j = 1, n, 2 do\n            k = i * j\n          \
    \  if k > n then\n                return k\n            end\n        end\n   \
    \ end\nend\nreturn largest_divisor(n)\nend", "    local max = math.floor(math.sqrt(n))\n\
    \    for i = 2, max do\n        if n % i == 0 then\n            return i\n   \
    \     end\n    end\nend\nreturn max\nend", "    local max = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            max = i\n        end\n    end\n\
    \    return max\nend", "    local d = math.floor(math.sqrt(n))\n    for i = 2,\
    \ d do\n        if n % i == 0 then\n            return i\n        end\n    end\n\
    end\nreturn largest_divisor(n)\nend", "    local i, j, k\n    for i = 1, n do\n\
    \        for j = 1, n do\n            k = i * j\n            if k > n then\n \
    \               break\n            if k == n then\n                return i\n\
    \            end\n        end\n    end\n    return 0\nend", "    local divisors\
    \ = {}\n    for i = 1, n do\n        if n % i == 0 then\n            divisors[i]\
    \ = true\n        end\n    end\n    return max(divisors)\nend", "    local max\
    \ = 1\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n          \
    \  max = i\n            break\n        end\n    end\n    return max\nend", " \
    \   local max = 0\n    for i = 1, n do\n        if n % i == 0 then\n         \
    \   max = i\n        end\n    end\n    return max\nend", "    local divisors =\
    \ {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors,\
    \ i)\n        end\n    end\n    return table.max(divisors)\nend", "    local result\
    \ = 1\n    for i = 2, math.sqrt(n) + 1 do\n        if n % i == 0 then\n      \
    \      result = i\n            break\n        end\n    end\n    return result\n\
    end", "    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n\
    \            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\n\
    end", "    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n\
    \            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\n\
    end", "    local m = math.floor(math.sqrt(n))\n    for i = 1, m do\n        if\
    \ n % i == 0 then\n            return i\n        end\n    end\nend\nreturn largest_divisor(n)\n\
    end\n\"\"\"", "    local divisors = {}\n    for i = 1, n do\n        if n % i\
    \ == 0 then\n            table.insert(divisors, i)\n        end\n    end\n   \
    \ return table.max(divisors)\nend", "    local max = 1\n    for i = 2, math.floor(math.sqrt(n))\
    \ do\n        if n % i == 0 then\n            max = i\n            break\n   \
    \     end\n    end\n    return max\nend", "    local divisors = {}\n    for i\
    \ = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n\
    \        end\n    end\n    return table.max(divisors)\nend", "    local divisors\
    \ = {}\n    for i = 1, n do\n        if n % i == 0 then\n            divisors[i]\
    \ = true\n            if i > max then max = i\n        end\n    end\n    return\
    \ max\nend", "    local m = math.floor(math.sqrt(n))\n    for i = 2, m do\n  \
    \      if n % i == 0 then\n            return i\n        end\n    end\nend\nreturn\
    \ largest_divisor(n)\nend", "    local m = math.floor(math.sqrt(n))\n    for i\
    \ = 1, m do\n        if n % i == 0 then\n            return i\n        end\n \
    \   end\nend\nreturn largest_divisor(n)\nend", "    local divisors = {}\n    for\
    \ i = 1, n do\n        if n % i == 0 then\n            divisors[i] = true\n  \
    \          if i > max then max = i\n        end\n    end\n    return max\nend",
  "    local max = 1\n    for i = 2, math.sqrt(n) + 1 do\n        if n % i == 0 then\n\
    \            max = i\n            break\n        end\n    end\n    return max\n\
    end", "    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n\
    \            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\n\
    end", "    local m = math.floor(math.sqrt(n))\n    for i = 1, m do\n        if\
    \ n % i == 0 then\n            return i\n        end\n    end\nend", "    local\
    \ max = 1\n    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n\
    \            max = i\n            break\n        end\n    end\n    return max\n\
    end", "    local max = math.floor(math.sqrt(n))\n    for i = 2, max do\n     \
    \   if n % i == 0 then\n            return i\n        end\n    end\nend\nreturn\
    \ max\nend", "    local max = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            max = i\n        end\n    end\n    return max\nend", "    local max\
    \ = 1\n    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n\
    \            max = i\n            break\n        end\n    end\n    return max\n\
    end", "    local max = 1\n    for i = 2, math.sqrt(n) + 1 do\n        if n % i\
    \ == 0 then\n            max = i\n            break\n        end\n    end\n  \
    \  return max\nend", "    local divisors = {}\n    for i = 1, n do\n        if\
    \ n % i == 0 then\n            table.insert(divisors, i)\n        end\n    end\n\
    \    return table.max(divisors)\nend", "    local max = 0\n    for i = 1, n do\n\
    \        if n % i == 0 then\n            max = i\n        end\n    end\n    return\
    \ max\nend", "    local divisors = {}\n    for i = 1, n do\n        if n % i ==\
    \ 0 then\n            divisors[i] = true\n            if i > divisors[n / i] then\n\
    \                divisors[n / i] = i\n            end\n        end\n    end\n\
    \    return divisors[n]\nend", "    local divisors = {}\n    for i = 1, n do\n\
    \        if n % i == 0 then\n            table.insert(divisors, i)\n        end\n\
    \    end\n    return table.max(divisors)\nend", "    local max = 1\n    for i\
    \ = 2, math.floor(math.sqrt(n))+1 do\n        if n % i == 0 then\n           \
    \ max = i\n            break\n        end\n    end\n    return max\nend", "  \
    \  local d = math.floor(math.sqrt(n))\n    for i = 2, d do\n        if n % i ==\
    \ 0 then\n            return i\n        end\n    end\n    return 1\nend", "  \
    \  local i, j, k\n    for i = 1, n do\n        for j = 1, n do\n            k\
    \ = i * j\n            if k > n then break\n            if k == n then return\
    \ i\n        end\n    end\nend\nreturn largest_divisor(n)\nend", "    local divisors\
    \ = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors,\
    \ i)\n        end\n    end\n    return table.max(divisors)\nend", "    local max\
    \ = math.floor(math.sqrt(n))\n    for i = 2, max do\n        if n % i == 0 then\n\
    \            return i\n        end\n    end\nend", "    local i, j, k\n    for\
    \ i = 1, n do\n        for j = 1, n do\n            k = i * j\n            if\
    \ k > n then\n                break\n            if k == n then\n            \
    \    return i\n            end\n        end\n    end\nend\nreturn largest_divisor(n)\n\
    end", "    local max = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          max = i\n        end\n    end\n    return max\nend", "    local divisors\
    \ = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors,\
    \ i)\n        end\n    end\n    return table.max(divisors)\nend", "    local i\
    \ = 1\n    while i <= n do\n        if n % i == 0 then\n            return i\n\
    \        end\n        i = i + 1\n    end\nend", "    local max = 1\n    for i\
    \ = 2, n, 1 do\n        if n % i == 0 then\n            max = i\n        end\n\
    \    end\n    return max\nend", "    local divisors = {}\n    for i = 1, n do\n\
    \        if n % i == 0 then\n            divisors[i] = true\n        end\n   \
    \ end\n    for i = 1, n do\n        if not divisors[i] then\n            return\
    \ i\n        end\n    end\nend", "    local max = math.floor(math.sqrt(n))\n \
    \   for i = 2, max do\n        if n % i == 0 then\n            return i\n    \
    \    end\n    end\n    return max\nend", "    local divisors = {}\n    for i =\
    \ 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n\
    \        end\n    end\n    return table.max(divisors)\nend", "    local divisors\
    \ = {}\n    for i = 1, n do\n        if n % i == 0 then\n            divisors[i]\
    \ = true\n        end\n    end\n    return math.max(divisors)\nend", "    local\
    \ divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n           \
    \ table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\n\
    end", "    local max = math.floor(math.sqrt(n))\n    for i = 2, max do\n     \
    \   if n % i == 0 then\n            return i\n        end\n    end\nend", "  \
    \  local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n    \
    \        table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\n\
    end", "    local max = 1\n    for i = 2, n, 1 do\n        if n % i == 0 then\n\
    \            max = i\n        end\n    end\n    return max\nend", "    local max\
    \ = 1\n    for i = 2, n do\n        if n % i == 0 then\n            max = i\n\
    \        end\n    end\n    return max\nend", "    local divisors = {}\n    for\
    \ i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors,\
    \ i)\n        end\n    end\n    return table.max(divisors)\nend", "    local divisors\
    \ = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors,\
    \ i)\n        end\n    end\n    return table.max(divisors)\nend", "    local d\
    \ = 1\n    while d <= n do\n        if n % d == 0 then\n            return d\n\
    \        end\n        d = d + 1\n    end\nend", "    local divisors = {}\n   \
    \ for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors,\
    \ i)\n        end\n    end\n    return table.max(divisors)\nend", "    local max\
    \ = 1\n    for i = 2, math.floor(math.sqrt(n))+1 do\n        if n % i == 0 then\n\
    \            max = i\n            break\n        end\n    end\n    return max\n\
    end", "    local i, j, k\n    for i = 1, n do\n        for j = 1, n do\n     \
    \       k = i * j\n            if k > n then break\n            if k == n then\
    \ return i\n        end\n    end\nend\nreturn largest_divisor(n)\nend", "    local\
    \ divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n           \
    \ table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\n\
    end", "    local m = math.floor(math.sqrt(n))\n    for i = 2, m do\n        if\
    \ n % i == 0 then\n            return i\n        end\n    end\nend\nreturn largest_divisor(n)\n\
    end", "    local max = 0\n    for i = 1, n do\n        if n % i == 0 then\n  \
    \          max = i\n        end\n    end\n    return max\nend", "    local i,\
    \ j, k\n    for i = 1, n, 2 do\n        for j = 1, n, 2 do\n            for k\
    \ = 1, n, 2 do\n                if (n % i) == 0 and (n % j) == 0 and (n % k) ==\
    \ 0 then\n                    return i * j * k\n                end\n        \
    \    end\n        end\n    end\n    return 0\nend", "    local max = 1\n    for\
    \ i = 2, math.floor(math.sqrt(n)) + 1 do\n        if n % i == 0 then\n       \
    \     max = i\n            break\n        end\n    end\n    return max\nend",
  "    local i, j\n    for i = 1, n do\n        for j = 1, n do\n            if j\
    \ > i and j % i == 0 then\n                return j\n            end\n       \
    \ end\n    end\n    return 1\nend", "    local m = math.floor(math.sqrt(n))\n\
    \    for i = 2, m do\n        if n % i == 0 then return i\n    end\nend\nreturn\
    \ largest_divisor(n)\nend", "    local divisors = {}\n    for i = 1, n do\n  \
    \      if n % i == 0 then\n            divisors[i] = true\n        end\n    end\n\
    \    for i = 1, n do\n        if not divisors[i] then\n            return i\n\
    \        end\n    end\nend", "    local max = 1\n    for i = 2, math.floor(math.sqrt(n))+1\
    \ do\n        if n % i == 0 then\n            max = i\n            break\n   \
    \     end\n    end\n    return max\nend", "    local max = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            max = i\n        end\n    end\n\
    \    return max\nend", "    local max = 1\n    for i = 2, math.floor(math.sqrt(n))+1\
    \ do\n        if n % i == 0 then\n            max = i\n            break\n   \
    \     end\n    end\n    return max\nend", "    local divisors = {}\n    for i\
    \ = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n\
    \        end\n    end\n    return table.max(divisors)\nend", "    local max =\
    \ 1\n    for i = 2, n do\n        if n % i == 0 then\n            max = i\n  \
    \      end\n    end\n    return max\nend", "    local result = 1\n    for i =\
    \ 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n            result\
    \ = i\n            break\n        end\n    end\n    return result\nend", "   \
    \ local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n     \
    \       table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\n\
    end", "    local max = 1\n    for i = 2, n, 1 do\n        if n % i == 0 then\n\
    \            max = i\n        end\n    end\n    return max\nend", "    local divisors\
    \ = {}\n    for i = 1, n do\n        if n % i == 0 then\n            divisors[i]\
    \ = true\n            if i > max then max = i\n        end\n    end\n    return\
    \ max\nend", "    local divisors = {}\n    for i = 1, n do\n        if n % i ==\
    \ 0 then\n            divisors[i] = true\n            if i > max then max = i\n\
    \        end\n    end\n    return max\nend", "    local max = 1\n    for i = 2,\
    \ math.floor(math.sqrt(n))+1 do\n        if n % i == 0 then\n            max =\
    \ i\n            break\n        end\n    end\n    return max\nend", "    local\
    \ max = math.floor(math.sqrt(n))\n    for i = 2, max do\n        if n % i == 0\
    \ then\n            return i\n        end\n    end\nend\nreturn max\nend", " \
    \   local max = 1\n    for i = 2, math.floor(math.sqrt(n))+1 do\n        if n\
    \ % i == 0 then\n            max = i\n            break\n        end\n    end\n\
    \    return max\nend", "    local max = 1\n    for i = 2, math.floor(math.sqrt(n))+1\
    \ do\n        if n % i == 0 then\n            max = i\n            break\n   \
    \     end\n    end\n    return max\nend", "    local divisors = {}\n    for i\
    \ = 1, n do\n        if n % i == 0 then\n            divisors[i] = true\n    \
    \    end\n    end\n    return math.max(divisors)\nend", "    local divisors =\
    \ {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors,\
    \ i)\n        end\n    end\n    return table.max(divisors)\nend", "    local result\
    \ = 1\n    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n\
    \            result = i\n            break\n        end\n    end\n    return result\n\
    end", "    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n\
    \            table.insert(divisors, i)\n        end\n    end\n    return table.max(divisors)\n\
    end", "    local divisors = {}\n    for i = 1, n do\n        if n % i == 0 then\n\
    \            divisors[i] = true\n            if i > max then max = i\n       \
    \ end\n    end\n    return max\nend", "    local max = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then max = i end\n    end\n    return max\nend", "    local\
    \ i, d\n    for i = 1, n do\n        d = math.floor(n / i)\n        if d == n\
    \ / i then\n            return i\n        end\n    end\nend\nreturn largest_divisor(n)\n\
    end", "    local result = 1\n    for i = 2, math.sqrt(n) + 1 do\n        if n\
    \ % i == 0 then\n            result = i\n            break\n        end\n    end\n\
    \    return result\nend", "    local max = 1\n    for i = 2, math.sqrt(n) + 1\
    \ do\n        if n % i == 0 then\n            max = i\n            break\n   \
    \     end\n    end\n    return max\nend", "    local divisors = {}\n    for i\
    \ = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n\
    \        end\n    end\n    return table.max(divisors)\nend", "    local divisors\
    \ = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors,\
    \ i)\n        end\n    end\n    return table.max(divisors)\nend", "    local max\
    \ = 1\n    for i = 2, math.sqrt(n) + 1 do\n        if n % i == 0 then\n      \
    \      max = i\n            break\n        end\n    end\n    return max\nend",
  "    local d = 1\n    while d <= n/2 do\n        if n % d == 0 then return d end\n\
    \        d = d + 1\n    end\nend", "    local max = 1\n    for i = 2, math.floor(math.sqrt(n))\
    \ do\n        if n % i == 0 then\n            max = i\n            break\n   \
    \     end\n    end\n    return max\nend", "    local divisors = {}\n    for i\
    \ = 1, n do\n        if n % i == 0 then\n            table.insert(divisors, i)\n\
    \        end\n    end\n    return table.max(divisors)\nend", "    local divisors\
    \ = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors,\
    \ i)\n        end\n    end\n    return table.max(divisors)\nend", "    local divisors\
    \ = {}\n    for i = 1, n do\n        if n % i == 0 then\n            table.insert(divisors,\
    \ i)\n        end\n    end\n    return table.max(divisors)\nend", "    local max\
    \ = 1\n    for i = 2, math.sqrt(n) + 1 do\n        if n % i == 0 then\n      \
    \      max = i\n            break\n        end\n    end\n    return max\nend",
  "    local max = 1\n    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i\
    \ == 0 then\n            max = i\n            break\n        end\n    end\n  \
    \  return max\nend", "    local divisors = {}\n    for i = 1, n do\n        if\
    \ n % i == 0 then\n            divisors[i] = true\n        end\n    end\n    return\
    \ math.max(divisors)\nend", "    local max = math.floor(math.sqrt(n))\n    for\
    \ i = 2, max do\n        if n % i == 0 then\n            return i\n        end\n\
    \    end\nend\nreturn max\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
