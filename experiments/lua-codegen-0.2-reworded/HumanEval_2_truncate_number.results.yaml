language: lua
name: HumanEval_2_truncate_number
results:
- exit_code: 0
  program: "-- Given a positive floating point number, it can be decomposed into\n\
    -- and integer part (largest integer smaller than given number) and decimals\n\
    -- (leftover part always smaller than 1).\n-- Return the decimal part of the number.\n\
    -- >>> truncate_number(3.5)\n-- 0.5\nlocal function truncate_number(number)\n\
    \    local integer_part = math.floor(number)\n    local decimal_part = number\
    \ - integer_part\n    return decimal_part\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = truncate_number\n    lu.assertEquals(candidate(3.5),\
    \ 0.5)\n    lu.assertEquals(candidate(1.25), 0.25)\n    lu.assertEquals(candidate(123.0),\
    \ 0.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1661907447
- exit_code: 0
  program: "-- Given a positive floating point number, it can be decomposed into\n\
    -- and integer part (largest integer smaller than given number) and decimals\n\
    -- (leftover part always smaller than 1).\n-- Return the decimal part of the number.\n\
    -- >>> truncate_number(3.5)\n-- 0.5\nlocal function truncate_number(number)\n\
    \    local integer, decimals = math.modf(number)\n    return decimals\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = truncate_number\n\
    \    lu.assertEquals(candidate(3.5), 0.5)\n    lu.assertEquals(candidate(1.25),\
    \ 0.25)\n    lu.assertEquals(candidate(123.0), 0.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1661907447
- exit_code: 0
  program: "-- Given a positive floating point number, it can be decomposed into\n\
    -- and integer part (largest integer smaller than given number) and decimals\n\
    -- (leftover part always smaller than 1).\n-- Return the decimal part of the number.\n\
    -- >>> truncate_number(3.5)\n-- 0.5\nlocal function truncate_number(number)\n\
    \    local integer_part = math.floor(number)\n    local decimal_part = number\
    \ - integer_part\n    return decimal_part\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = truncate_number\n    lu.assertEquals(candidate(3.5),\
    \ 0.5)\n    lu.assertEquals(candidate(1.25), 0.25)\n    lu.assertEquals(candidate(123.0),\
    \ 0.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1661907447
- exit_code: 0
  program: "-- Given a positive floating point number, it can be decomposed into\n\
    -- and integer part (largest integer smaller than given number) and decimals\n\
    -- (leftover part always smaller than 1).\n-- Return the decimal part of the number.\n\
    -- >>> truncate_number(3.5)\n-- 0.5\nlocal function truncate_number(number)\n\
    \    local integer, decimals = math.modf(number)\n    return decimals\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = truncate_number\n\
    \    lu.assertEquals(candidate(3.5), 0.5)\n    lu.assertEquals(candidate(1.25),\
    \ 0.25)\n    lu.assertEquals(candidate(123.0), 0.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1661907447
- exit_code: 0
  program: "-- Given a positive floating point number, it can be decomposed into\n\
    -- and integer part (largest integer smaller than given number) and decimals\n\
    -- (leftover part always smaller than 1).\n-- Return the decimal part of the number.\n\
    -- >>> truncate_number(3.5)\n-- 0.5\nlocal function truncate_number(number)\n\
    \    local integer, decimals = math.modf(number)\n    return decimals\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = truncate_number\n\
    \    lu.assertEquals(candidate(3.5), 0.5)\n    lu.assertEquals(candidate(1.25),\
    \ 0.25)\n    lu.assertEquals(candidate(123.0), 0.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1661907447
- exit_code: 0
  program: "-- Given a positive floating point number, it can be decomposed into\n\
    -- and integer part (largest integer smaller than given number) and decimals\n\
    -- (leftover part always smaller than 1).\n-- Return the decimal part of the number.\n\
    -- >>> truncate_number(3.5)\n-- 0.5\nlocal function truncate_number(number)\n\
    \    local integer_part = math.floor(number)\n    local decimal_part = number\
    \ - integer_part\n    return decimal_part\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = truncate_number\n    lu.assertEquals(candidate(3.5),\
    \ 0.5)\n    lu.assertEquals(candidate(1.25), 0.25)\n    lu.assertEquals(candidate(123.0),\
    \ 0.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1661907447
- exit_code: 0
  program: "-- Given a positive floating point number, it can be decomposed into\n\
    -- and integer part (largest integer smaller than given number) and decimals\n\
    -- (leftover part always smaller than 1).\n-- Return the decimal part of the number.\n\
    -- >>> truncate_number(3.5)\n-- 0.5\nlocal function truncate_number(number)\n\
    \    local integer, decimals = math.modf(number)\n    return decimals\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = truncate_number\n\
    \    lu.assertEquals(candidate(3.5), 0.5)\n    lu.assertEquals(candidate(1.25),\
    \ 0.25)\n    lu.assertEquals(candidate(123.0), 0.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1661907447
- exit_code: 0
  program: "-- Given a positive floating point number, it can be decomposed into\n\
    -- and integer part (largest integer smaller than given number) and decimals\n\
    -- (leftover part always smaller than 1).\n-- Return the decimal part of the number.\n\
    -- >>> truncate_number(3.5)\n-- 0.5\nlocal function truncate_number(number)\n\
    \    local integer_part = math.floor(number)\n    local decimal_part = number\
    \ - integer_part\n    return decimal_part\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = truncate_number\n    lu.assertEquals(candidate(3.5),\
    \ 0.5)\n    lu.assertEquals(candidate(1.25), 0.25)\n    lu.assertEquals(candidate(123.0),\
    \ 0.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1661907447
- exit_code: 1
  program: "-- Given a positive floating point number, it can be decomposed into\n\
    -- and integer part (largest integer smaller than given number) and decimals\n\
    -- (leftover part always smaller than 1).\n-- Return the decimal part of the number.\n\
    -- >>> truncate_number(3.5)\n-- 0.5\nlocal function truncate_number(number)\n\
    \    local integer_part = math.floor(number)\n    local decimal_part = math.mod(number,\
    \ 1)\n    return decimal_part\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = truncate_number\n    lu.assertEquals(candidate(3.5), 0.5)\n\
    \    lu.assertEquals(candidate(1.25), 0.25)\n    lu.assertEquals(candidate(123.0),\
    \ 0.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8405zv02.lua:9:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmp8405zv02.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp8405zv02.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1661907447
- exit_code: 1
  program: "-- Given a positive floating point number, it can be decomposed into\n\
    -- and integer part (largest integer smaller than given number) and decimals\n\
    -- (leftover part always smaller than 1).\n-- Return the decimal part of the number.\n\
    -- >>> truncate_number(3.5)\n-- 0.5\nlocal function truncate_number(number)\n\
    \    local integer_part = math.floor(number)\n    local decimals = math.floor(number\
    \ - integer_part)\n    return decimals\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = truncate_number\n    lu.assertEquals(candidate(3.5),\
    \ 0.5)\n    lu.assertEquals(candidate(1.25), 0.25)\n    lu.assertEquals(candidate(123.0),\
    \ 0.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp155emi32.lua:16:\
    \ expected: 0.5, actual: 0\nstack traceback:\n\t/tmp/tmp155emi32.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1661907447
- exit_code: 0
  program: "-- Given a positive floating point number, it can be decomposed into\n\
    -- and integer part (largest integer smaller than given number) and decimals\n\
    -- (leftover part always smaller than 1).\n-- Return the decimal part of the number.\n\
    -- >>> truncate_number(3.5)\n-- 0.5\nlocal function truncate_number(number)\n\
    \    local integer, decimals = math.modf(number)\n    return decimals\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = truncate_number\n\
    \    lu.assertEquals(candidate(3.5), 0.5)\n    lu.assertEquals(candidate(1.25),\
    \ 0.25)\n    lu.assertEquals(candidate(123.0), 0.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1661907447
- exit_code: 0
  program: "-- Given a positive floating point number, it can be decomposed into\n\
    -- and integer part (largest integer smaller than given number) and decimals\n\
    -- (leftover part always smaller than 1).\n-- Return the decimal part of the number.\n\
    -- >>> truncate_number(3.5)\n-- 0.5\nlocal function truncate_number(number)\n\
    \    local integer = math.floor(number)\n    local decimal = number - integer\n\
    \    return decimal\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = truncate_number\n    lu.assertEquals(candidate(3.5), 0.5)\n\
    \    lu.assertEquals(candidate(1.25), 0.25)\n    lu.assertEquals(candidate(123.0),\
    \ 0.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1661907447
- exit_code: 0
  program: "-- Given a positive floating point number, it can be decomposed into\n\
    -- and integer part (largest integer smaller than given number) and decimals\n\
    -- (leftover part always smaller than 1).\n-- Return the decimal part of the number.\n\
    -- >>> truncate_number(3.5)\n-- 0.5\nlocal function truncate_number(number)\n\
    \    local integer_part = math.floor(number)\n    local decimals = number - integer_part\n\
    \    return decimals\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = truncate_number\n    lu.assertEquals(candidate(3.5), 0.5)\n\
    \    lu.assertEquals(candidate(1.25), 0.25)\n    lu.assertEquals(candidate(123.0),\
    \ 0.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1661907447
- exit_code: 0
  program: "-- Given a positive floating point number, it can be decomposed into\n\
    -- and integer part (largest integer smaller than given number) and decimals\n\
    -- (leftover part always smaller than 1).\n-- Return the decimal part of the number.\n\
    -- >>> truncate_number(3.5)\n-- 0.5\nlocal function truncate_number(number)\n\
    \    local integer = math.floor(number)\n    local decimal = number - integer\n\
    \    return decimal\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = truncate_number\n    lu.assertEquals(candidate(3.5), 0.5)\n\
    \    lu.assertEquals(candidate(1.25), 0.25)\n    lu.assertEquals(candidate(123.0),\
    \ 0.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1661907447
- exit_code: 0
  program: "-- Given a positive floating point number, it can be decomposed into\n\
    -- and integer part (largest integer smaller than given number) and decimals\n\
    -- (leftover part always smaller than 1).\n-- Return the decimal part of the number.\n\
    -- >>> truncate_number(3.5)\n-- 0.5\nlocal function truncate_number(number)\n\
    \    local integer, decimals = math.modf(number)\n    return decimals\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = truncate_number\n\
    \    lu.assertEquals(candidate(3.5), 0.5)\n    lu.assertEquals(candidate(1.25),\
    \ 0.25)\n    lu.assertEquals(candidate(123.0), 0.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1661907447
- exit_code: 0
  program: "-- Given a positive floating point number, it can be decomposed into\n\
    -- and integer part (largest integer smaller than given number) and decimals\n\
    -- (leftover part always smaller than 1).\n-- Return the decimal part of the number.\n\
    -- >>> truncate_number(3.5)\n-- 0.5\nlocal function truncate_number(number)\n\
    \    local integer_part = math.floor(number)\n    local decimal_part = number\
    \ - integer_part\n    return decimal_part\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = truncate_number\n    lu.assertEquals(candidate(3.5),\
    \ 0.5)\n    lu.assertEquals(candidate(1.25), 0.25)\n    lu.assertEquals(candidate(123.0),\
    \ 0.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1661907447
- exit_code: 0
  program: "-- Given a positive floating point number, it can be decomposed into\n\
    -- and integer part (largest integer smaller than given number) and decimals\n\
    -- (leftover part always smaller than 1).\n-- Return the decimal part of the number.\n\
    -- >>> truncate_number(3.5)\n-- 0.5\nlocal function truncate_number(number)\n\
    \    local integer = math.floor(number)\n    local decimal = number - integer\n\
    \    return decimal\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = truncate_number\n    lu.assertEquals(candidate(3.5), 0.5)\n\
    \    lu.assertEquals(candidate(1.25), 0.25)\n    lu.assertEquals(candidate(123.0),\
    \ 0.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1661907447
- exit_code: 0
  program: "-- Given a positive floating point number, it can be decomposed into\n\
    -- and integer part (largest integer smaller than given number) and decimals\n\
    -- (leftover part always smaller than 1).\n-- Return the decimal part of the number.\n\
    -- >>> truncate_number(3.5)\n-- 0.5\nlocal function truncate_number(number)\n\
    \    local integer_part = math.floor(number)\n    local decimal_part = number\
    \ - integer_part\n    return decimal_part\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = truncate_number\n    lu.assertEquals(candidate(3.5),\
    \ 0.5)\n    lu.assertEquals(candidate(1.25), 0.25)\n    lu.assertEquals(candidate(123.0),\
    \ 0.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1661907447
- exit_code: 1
  program: "-- Given a positive floating point number, it can be decomposed into\n\
    -- and integer part (largest integer smaller than given number) and decimals\n\
    -- (leftover part always smaller than 1).\n-- Return the decimal part of the number.\n\
    -- >>> truncate_number(3.5)\n-- 0.5\nlocal function truncate_number(number)\n\
    \    local integer_part = math.floor(number)\n    local decimals = math.mod(number,\
    \ 1)\n    return decimals\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = truncate_number\n    lu.assertEquals(candidate(3.5), 0.5)\n\
    \    lu.assertEquals(candidate(1.25), 0.25)\n    lu.assertEquals(candidate(123.0),\
    \ 0.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl75o3jre.lua:9:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmpl75o3jre.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpl75o3jre.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1661907447
- exit_code: 1
  program: "-- Given a positive floating point number, it can be decomposed into\n\
    -- and integer part (largest integer smaller than given number) and decimals\n\
    -- (leftover part always smaller than 1).\n-- Return the decimal part of the number.\n\
    -- >>> truncate_number(3.5)\n-- 0.5\nlocal function truncate_number(number)\n\
    \    local integer_part = math.floor(number)\n    local decimal_part = math.modf(number)[1]\n\
    \    return decimal_part\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = truncate_number\n    lu.assertEquals(candidate(3.5), 0.5)\n\
    \    lu.assertEquals(candidate(1.25), 0.25)\n    lu.assertEquals(candidate(123.0),\
    \ 0.0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcjmuyvx6.lua:9:\
    \ attempt to index a number value\nstack traceback:\n\t/tmp/tmpcjmuyvx6.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpcjmuyvx6.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1661907447
