name: HumanEval_134_check_if_last_char_is_a_letter
language: lua
prompt: "-- Create a function that returns true if the last character\n-- of a given\
  \ string is an alphabetical character and is not\n-- a part of a word, and false\
  \ otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n--\
  \ Examples:\n-- >>> check_if_last_char_is_a_letter(\"apple pie\") \n-- False\n--\
  \ >>> check_if_last_char_is_a_letter(\"apple pi e\") \n-- True\n-- >>> check_if_last_char_is_a_letter(\"\
  apple pi e \") \n-- False\n-- >>> check_if_last_char_is_a_letter(\"\") \n-- False\n\
  local function check_if_last_char_is_a_letter(txt)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
  \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
  \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
  \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
  \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
  \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
  \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local txt = string.gsub(txt, \" \", \"\")\n    local last_char\
    \ = string.char(txt, -1)\n    return string.char(txt, -1) ~= nil and string.char(txt,\
    \ -1) ~= \" \" and string.char(txt, -1) ~= \".\"\nend", "    local txt_len = #txt\n\
    \    if txt_len == 0 then\n        return false\n    end\n    return txt[txt_len]\
    \ ~= \" \"\nend", "    local txt_len = #txt\n    if txt_len == 0 then\n      \
    \  return false\n    end\n    local last_char = string.char(txt, txt_len)\n  \
    \  return string.sub(last_char, 1, 1) ~= \" \"\nend", "    local last_char = string.char(txt,\
    \ -1)\n    local last_char_is_letter = string.char(last_char, -1) ~= nil\n   \
    \ return last_char_is_letter and string.char(txt, -2) ~= \" \"\nend", "    local\
    \ last_char = string.char(txt, -1)\n    return string.find(string.char(txt, -2,\
    \ -1), \" \") == -1 and string.find(last_char, \"a\") == 1 and string.find(last_char,\
    \ \"e\") == 1 and string.find(last_char, \"i\") == 1 and string.find(last_char,\
    \ \"o\") == 1 and string.find(last_char, \"u\") == 1 and string.find(last_char,\
    \ \"y\") == 1\nend", "    local txt = string.gsub(txt, \" \", \"\")\n    if txt\
    \ == \"\" then\n        return false\n    end\n    return string.char(txt, -1)\
    \ ~= \" \"\nend", "    local txt = string.gsub(txt, \" \", \"\")\n    return string.sub(txt,\
    \ -1, 1) ~= \" \"\nend", "    local last_char = string.char(txt, -1)\n    return\
    \ string.len(txt) > 0 and string.sub(txt, -1) ~= \" \" and string.sub(txt, -1)\
    \ ~= \" \" and string.sub(txt, -1) ~= \" \" and string.sub(txt, -1) ~= \" \" and\
    \ string.sub(txt, -1) ~= \" \" and string.sub(txt, -1) ~= \" \" and string.sub(txt,\
    \ -1) ~= \" \" and string.sub(txt, -1) ~= \" \" and string.sub(txt, -1) ~= \"\
    \ \" and string.sub(txt, -1) ~= \" \" and string.sub(txt, -1) ~= \" \" and string.sub(txt,\
    \ -1) ~= \" \" and string.sub(txt, -1) ~= \" \" and string.sub(txt, -1) ~= \"\
    \ \" and string.sub(txt, -1) ~= \" \" and string.sub(txt, -1) ~= \" \" and string.sub(txt,\
    \ -1) ~= \" \" and string.sub(txt, -1) ~= \" \" and string.sub(txt, -1) ~= \"\
    \ \" and string.sub(txt, -1) ~= \" \" and string.sub(txt, -1) ~= \" \" and string.sub(txt,\
    \ -1) ~= \" \" and string.sub(txt, -1) ~= \" \" and string.sub(txt, -1) ~= \"\
    \ \" and string.sub(txt, -1) ~= \" \" and string.sub(txt, -1) ~= \" \" and string.sub(txt,\
    \ -1) ~= \" \" and string.sub(txt, -1) ~= \" \" and string.sub(txt, -1) ~= \"\
    \ \" and string.sub(txt, -1) ~= \" \" and string.sub(txt, -1) ~= \" \" and string.sub(txt,\
    \ -1) ~= \" \" and string.sub(txt, -1) ~= \" \" and string.sub(txt, -1) ~= \"\
    \ \" and string.sub(txt, -1)", "    local txt_len = #txt\n    if txt_len == 0\
    \ then\n        return false\n    end\n    local last_char = txt[txt_len]\n  \
    \  if not isalpha(last_char) then\n        return false\n    end\n    local word_end\
    \ = false\n    for i = 1, txt_len - 1 do\n        if txt[i] == \" \" then\n  \
    \          word_end = true\n            break\n        end\n    end\n    if word_end\
    \ == true then\n        return false\n    end\n    return true\nend", "    local\
    \ last_char = string.char(txt, -1)\n    return string.sub(last_char, 1, 1) ~=\
    \ \" \"\nend", "    local last_char = string.char(txt, -1)\n    local is_letter\
    \ = string.char(last_char, 1) ~= nil\n    return is_letter and string.find(txt,\
    \ last_char) == nil\nend", "    local last_char = string.char(txt, -1)\n    return\
    \ string.sub(last_char, 1, 1) ~= \" \"\nend", "    local txt_len = #txt\n    if\
    \ txt_len == 0 then\n        return false\n    end\n    return txt[txt_len] ~=\
    \ \" \"\nend", "    local txt = string.gsub(txt, \"%s+$\", \"\")\n    local last_char\
    \ = string.char(txt, -1)\n    return string.sub(last_char, 1, 1) ~= \" \" and\
    \ string.sub(last_char, 1, 1) ~= \"-\"\nend", "    local last_char = string.char(txt,\
    \ -1)\n    if string.len(txt) == 0 or string.len(last_char) == 0 then\n      \
    \  return false\n    end\n    return string.char(last_char, 1) ~= \" \"\nend",
  "    local txt = string.lower(txt)\n    local last_char = string.char(txt, -1)\n\
    \    local is_letter = string.char(last_char, 1) ~= \" \"\n    return is_letter\n\
    end", "    local last_char = string.char(txt, -1)\n    return string.len(txt)\
    \ > 0 and string.sub(txt, -1, 1) ~= \" \" and string.sub(txt, -1, 1) ~= \".\"\
    \ and string.sub(txt, -1, 1) ~= \",\" and string.sub(txt, -1, 1) ~= \"!\" and\
    \ string.sub(txt, -1, 1) ~= \"?\" and string.sub(txt, -1, 1) ~= \":\" and string.sub(txt,\
    \ -1, 1) ~= \";\" and string.sub(txt, -1, 1) ~= \"\\\"\" and string.sub(txt, -1,\
    \ 1) ~= \"'\" and string.sub(txt, -1, 1) ~= \"(\" and string.sub(txt, -1, 1) ~=\
    \ \")\" and string.sub(txt, -1, 1) ~= \"-\" and string.sub(txt, -1, 1) ~= \"_\"\
    \ and string.sub(txt, -1, 1) ~= \"&\" and string.sub(txt, -1, 1) ~= \"|\" and\
    \ string.sub(txt, -1, 1) ~= \"*\" and string.sub(txt, -1, 1) ~= \"+\" and string.sub(txt,\
    \ -1, 1) ~= \"=\" and string.sub(txt, -1, 1) ~= \"^\" and string.sub(txt, -1,\
    \ 1) ~= \"{\" and string.sub(txt, -1, 1) ~= \"}\" and string.sub(txt, -1, 1) ~=\
    \ \"~\" and string.sub(txt, -1, 1) ~= \"`\"\nend", "    local last_char = string.char(txt,\
    \ -1)\n    local is_letter = string.char(last_char, -1) ~= \"\"\n    return is_letter\
    \ and not string.find(txt, last_char)\nend", "    local txt = string.lower(txt)\n\
    \    local last_char = string.char(txt, -1)\n    return string.find(txt, \" \"\
    ) == nil and string.find(txt, \".\") == nil and string.find(txt, \",\") == nil\
    \ and string.find(txt, \";\") == nil and string.find(txt, \":\") == nil and string.find(txt,\
    \ \"!\") == nil and string.find(txt, \"?\") == nil and string.find(txt, \"\\\"\
    \") == nil and string.find(txt, \"'\") == nil and string.find(txt, \"`\") == nil\
    \ and string.find(txt, \"{\") == nil and string.find(txt, \"}\") == nil and string.find(txt,\
    \ \"[\") == nil and string.find(txt, \"]\") == nil and string.find(txt, \"(\"\
    ) == nil and string.find(txt, \")\") == nil and string.find(txt, \"*\") == nil\
    \ and string.find(txt, \"+\") == nil and string.find(txt, \"=\") == nil and string.find(txt,\
    \ \"&\") == nil and string.find(txt, \"|\") == nil and string.find(txt, \"^\"\
    ) == nil and string.find(txt, \"~\") == nil and string.find(txt, \"\\\\\") ==\
    \ nil and string.find(txt, \"/\") == nil and string.find(txt, \" \") == nil and\
    \ string.find(txt, \".\") == nil and string.find(txt, \",\") == nil and string.find(txt,\
    \ \";\") == nil and string.find(txt, \":\") == nil and string.find(txt, \"!\"\
    ) == nil and string.find(txt, \"?\") == nil and string.find(txt, \"\\\"\") ==\
    \ nil and string.find(txt, \"'\") == nil and string.find(txt, \"`\") == nil and\
    \ string.find(txt, \"{\") == nil and string.find(txt, \"}\") == nil and string.find(txt,\
    \ \"[\") == nil and string.find(txt, \"]\") == nil and string.find(txt, \"(\"\
    ) == nil and string.find(txt, \")\") ==", "    local txt_len = #txt\n    if txt_len\
    \ == 0 then\n        return false\n    end\n    local last_char = string.char(txt,\
    \ txt_len)\n    return string.sub(last_char, 1, 1) ~= \" \"\nend", "    local\
    \ last_char = string.char(txt, -1)\n    local last_char_is_letter = string.char(last_char,\
    \ -1) ~= nil\n    return last_char_is_letter\nend", "    local txt_len = #txt\n\
    \    local last_char = txt[txt_len]\n    return (txt_len > 0 and string.char(last_char)\
    \ ~= \" \")\nend", "    local last_char = string.char(txt, -1)\n    return string.sub(last_char,\
    \ 1, 1) ~= \" \"\nend", "    local last_char = string.char(txt, -1)\n    return\
    \ string.sub(last_char, 1, 1) ~= \" \"\nend", "    local txt = string.gsub(txt,\
    \ \"%s+$\", \"\")\n    if string.len(txt) == 0 then\n        return false\n  \
    \  end\n    return string.char(txt, string.len(txt) - 1) ~= nil\nend", "    local\
    \ last_char = string.char(txt, -1)\n    return string.sub(last_char, 1, 1) ~=\
    \ \" \"\nend", "    local last_char = string.char(txt, -1)\n    return string.sub(last_char,\
    \ 1, 1) ~= \" \"\nend", "    local last_char = string.char(txt, -1)\n    local\
    \ is_letter = string.char(last_char, 1) ~= \"\"\n    return is_letter and not\
    \ string.find(txt, last_char)\nend", "    local txt_len = #txt\n    if txt_len\
    \ == 0 then\n        return false\n    end\n    return txt_len > 0 and string.char(txt[txt_len\
    \ - 1]) ~= \" \"\nend", "    local last_char = string.char(txt, -1)\n    local\
    \ last_char_is_letter = string.char(last_char, -1) ~= nil\n    return last_char_is_letter\n\
    end", "    local last_char = string.char(txt, -1)\n    local last_char_is_a_letter\
    \ = string.char(txt, -1) ~= nil\n    return last_char_is_a_letter\nend", "   \
    \ local last_char = string.char(txt, -1)\n    return string.len(txt) > 0 and string.sub(txt,\
    \ -1, 1) ~= \" \" and string.sub(txt, -1, 1) ~= \"-\" and string.sub(txt, -1,\
    \ 1) ~= \"_\" and string.sub(txt, -1, 1) ~= \".\" and string.sub(txt, -1, 1) ~=\
    \ \",\" and string.sub(txt, -1, 1) ~= \";\" and string.sub(txt, -1, 1) ~= \":\"\
    \ and string.sub(txt, -1, 1) ~= \"!\" and string.sub(txt, -1, 1) ~= \"?\" and\
    \ string.sub(txt, -1, 1) ~= \"\\\"\" and string.sub(txt, -1, 1) ~= \"'\" and string.sub(txt,\
    \ -1, 1) ~= \"(\" and string.sub(txt, -1, 1) ~= \")\" and string.sub(txt, -1,\
    \ 1) ~= \"{\" and string.sub(txt, -1, 1) ~= \"}\" and string.sub(txt, -1, 1) ~=\
    \ \"|\" and string.sub(txt, -1, 1) ~= \"&\" and string.sub(txt, -1, 1) ~= \"*\"\
    \ and string.sub(txt, -1, 1) ~= \"+\" and string.sub(txt, -1, 1) ~= \"=\" and\
    \ string.sub(txt, -1, 1) ~= \":\" and string.sub(txt, -1, 1) ~= \";\" and string.sub(txt,\
    \ -1, 1) ~= \",\" and string.sub(txt, -1, 1) ~= \".\" and string.sub(txt, -1,\
    \ 1) ~= \"?\" and string.sub(txt, -1, 1) ~= \"!\" and string.sub(txt, -1, 1) ~=\
    \ \"\\\"\" and string.sub(txt, -1, 1) ~= \"'\" and string.sub(txt, -1, 1) ~= \"\
    (\" and string.sub(txt, -1, 1) ~= \")\" and", "    local last_char = string.char(txt,\
    \ -1)\n    local last_char_is_letter = string.char(last_char, 1) ~= nil\n    return\
    \ last_char_is_letter\nend", "    local last_char = string.char(txt, -1)\n   \
    \ local is_letter = string.char(last_char, 1) ~= nil\n    return is_letter and\
    \ string.char(last_char, -2) ~= \" \"\nend", "    local last_char = string.char(txt,\
    \ -1)\n    local last_char_is_letter = string.char(last_char, -1) ~= nil\n   \
    \ return last_char_is_letter\nend", "    local last_char = string.char(txt, -1)\n\
    \    return string.sub(last_char, 1, 1) ~= \" \"\nend", "    local txt = string.lower(txt)\n\
    \    local last_char = string.char(txt, -1)\n    return string.find(txt, \" \"\
    ) == nil and string.find(txt, \".\") == nil and string.find(txt, \",\") == nil\
    \ and string.find(txt, \";\") == nil and string.find(txt, \":\") == nil and string.find(txt,\
    \ \"!\") == nil and string.find(txt, \"?\") == nil and string.find(txt, \"\\\"\
    \") == nil and string.find(txt, \"'\") == nil and string.find(txt, \"`\") == nil\
    \ and string.find(txt, \"{\") == nil and string.find(txt, \"}\") == nil and string.find(txt,\
    \ \"|\") == nil and string.find(txt, \"\\\\\") == nil and string.find(txt, \"\
    /\") == nil and string.find(txt, \"&\") == nil and string.find(txt, \"*\") ==\
    \ nil and string.find(txt, \"(\") == nil and string.find(txt, \")\") == nil and\
    \ string.find(txt, \"=\") == nil and string.find(txt, \"]\") == nil and string.find(txt,\
    \ \"[\") == nil and string.find(txt, \"}\") == nil and string.find(txt, \"{\"\
    ) == nil and string.find(txt, \"]\") == nil and string.find(txt, \"[\") == nil\
    \ and string.find(txt, \"}\") == nil and string.find(txt, \"]\") == nil and string.find(txt,\
    \ \"]\") == nil and string.find(txt, \"]\") == nil and string.find(txt, \"]\"\
    ) == nil and string.find(txt, \"]\") == nil and string.find(txt, \"]\") == nil\
    \ and string.find(txt, \"]\") == nil and string.find(txt, \"]\") == nil and string.find(txt,\
    \ \"]\") == nil and string.find(txt, \"]\") == nil and string.find(txt, \"]\"\
    ) == nil and string.find(txt, \"]\") == nil and string.find(txt, \"]\") == nil\
    \ and string.find(txt, \"", "    local last_char = string.char(txt, -1)\n    local\
    \ is_letter = string.char(last_char, -1) ~= nil\n    return is_letter\nend", " \
    \   local txt = string.gsub(txt, \"%S\", \" \")\n    local last_char = string.char(txt,\
    \ -1)\n    return string.sub(last_char, 1, 1) ~= \" \" and string.sub(last_char,\
    \ 1, 1) ~= \" \"\nend", "    local last_char = string.char(txt, -1)\n    local\
    \ last_char_is_letter = string.char(last_char, -1) ~= nil\n    return last_char_is_letter\n\
    end", "    local last_char = string.char(txt, -1)\n    return string.sub(last_char,\
    \ 1, 1) ~= \" \"\nend", "    local last_char = string.char(txt, -1)\n    return\
    \ string.sub(last_char, 1, 1) ~= \" \"\nend", "    local last_char = string.char(txt,\
    \ -1)\n    return string.sub(last_char, 1, 1) ~= \" \"\nend", "    local last_char\
    \ = string.char(txt, -1)\n    if string.byte(last_char, 1) ~= 0 then\n       \
    \ return true\n    else\n        return false\n    end\nend", "    local last_char\
    \ = string.char(txt, -1)\n    return string.sub(last_char, 1, 1) ~= \" \"\nend",
  "    local last_char = string.char(txt, -1)\n    return string.sub(last_char, 1,\
    \ 1) ~= \" \"\nend", "    local txt = string.lower(txt)\n    local last_char =\
    \ string.char(txt, -1)\n    local is_letter = string.char(last_char, 1) ~= \"\
    \ \"\n    return is_letter and not string.find(txt, last_char)\nend", "    local\
    \ txt_len = #txt\n    if txt_len == 0 then\n        return false\n    end\n  \
    \  local last_char = string.char(txt, txt_len)\n    return string.sub(last_char,\
    \ 1, 1) ~= \" \"\nend", "    local last_char = string.char(txt, -1)\n    return\
    \ string.sub(last_char, 1, 1) ~= \" \"\nend", "    local last_char = string.char(txt,\
    \ -1)\n    if string.len(txt) == 0 or string.len(last_char) == 0 then\n      \
    \  return false\n    end\n    return string.sub(last_char, 1, 1) ~= \" \"\nend",
  "    local last_char = string.char(txt, -1)\n    return string.sub(last_char, 1,\
    \ 1) ~= \" \"\nend", "    local last_char = string.char(txt, -1)\n    return string.sub(last_char,\
    \ 1, 1) ~= \" \"\nend", "    local txt_len = #txt\n    if txt_len == 0 then return\
    \ false end\n    local last_char = txt[txt_len]\n    if string.byte(last_char,\
    \ 1) ~= 0 then return true end\n    local is_a_letter = string.byte(last_char,\
    \ 1) >= 97 and string.byte(last_char, 1) <= 122\n    if is_a_letter then\n   \
    \     local word_len = 0\n        for i = txt_len - 1, 1, -1 do\n            if\
    \ string.byte(txt[i], 1) == 32 then\n                word_len = i\n          \
    \      break\n            end\n        end\n        if word_len == 0 then return\
    \ true end\n        local word = string.sub(txt, word_len + 1, txt_len)\n    \
    \    local is_a_word = word ~= \"\"\n        return is_a_letter and not is_a_word\n\
    \    else\n        return false\nend", "    local last_char = string.char(txt,\
    \ -1)\n    return string.sub(last_char, 1, 1) ~= \" \"\nend", "    local txt_len\
    \ = #txt\n    if txt_len == 0 then return false end\n    local last_char = string.char(txt,\
    \ txt_len)\n    return string.sub(last_char, 1, 1) ~= \" \"\nend", "    local\
    \ txt = string.lower(txt)\n    local last_char = string.char(txt, -1)\n    local\
    \ is_letter = string.char(last_char, -1) ~= nil\n    return is_letter and not\
    \ string.match(txt, /\\w+/)\nend", "    local last_char = string.char(txt, -1)\n\
    \    return string.find(string.char(txt, -2, -1), \" \") == -1 and string.isalpha(last_char)\n\
    end", "    local last_char = string.char(txt, -1)\n    return string.sub(last_char,\
    \ 1, 1) ~= \" \"\nend", "    local txt = string.lower(txt)\n    local last_char\
    \ = string.char(txt, -1)\n    return (last_char ~= \" \" and string.find(txt,\
    \ last_char) == -1)\nend", "    local last_char = string.char(txt, -1)\n    return\
    \ string.sub(last_char, 1, 1) ~= \" \"\nend", "    local last_char = string.char(txt,\
    \ -1)\n    local last_char_is_a_letter = string.char(txt, -1) ~= nil\n    return\
    \ last_char_is_a_letter\nend", "    local last_char = string.char(txt, -1)\n \
    \   if string.len(txt) == 0 or string.len(last_char) == 0 then\n        return\
    \ false\n    end\n    return string.char(last_char, 1) ~= \" \"\nend", "    local\
    \ txt = string.lower(txt)\n    local last_char = string.char(txt, -1)\n    return\
    \ (last_char ~= \" \" and string.find(txt, last_char) == -1)\nend", "    local\
    \ last_char = string.char(txt, -1)\n    return string.sub(last_char, 1, 1) ~=\
    \ \" \"\nend", "    local last_char = string.char(txt, -1)\n    return string.sub(last_char,\
    \ 1, 1) ~= \" \"\nend", "    local txt_len = #txt\n    if txt_len == 0 then\n\
    \        return false\n    end\n    local last_char = txt[txt_len]\n    return\
    \ (last_char >= \"a\" and last_char <= \"z\") or (last_char >= \"A\" and last_char\
    \ <= \"Z\")\nend", "    local last_char = string.char(txt, -1)\n    return string.sub(last_char,\
    \ 1, 1) ~= \" \"\nend", "    local last_char = string.char(txt, -1)\n    return\
    \ string.sub(last_char, 1, 1) ~= \" \"\nend", "    local txt = string.lower(txt)\n\
    \    local last_char = string.char(txt, -1)\n    local last_char_is_letter = string.char(last_char,\
    \ -1)\n    return string.char(last_char, -1) ~= nil and string.char(last_char,\
    \ -1) ~= \" \"\nend", "    local txt = string.gsub(txt, \"%s+$\", \"\")\n    if\
    \ txt == \"\" then return false\n    return string.char(txt, -1) ~= \" \"\nend",
  "    local txt_len = #txt\n    if txt_len == 0 then\n        return false\n    end\n\
    \    local last_char = txt[txt_len]\n    return (last_char >= \"a\" and last_char\
    \ <= \"z\") or (last_char >= \"A\" and last_char <= \"Z\")\nend", "    local txt\
    \ = string.lower(txt)\n    local last_char = string.char(txt, -1)\n    return\
    \ (last_char ~= \" \") and (last_char ~= \".\")\nend", "    local last_char =\
    \ string.char(txt, -1)\n    return string.len(txt) > 0 and string.sub(last_char,\
    \ 1, 1) ~= \" \"\nend", "    local txt = string.lower(txt)\n    local last_char\
    \ = string.char(txt, -1)\n    local last_char_is_letter = string.char(last_char,\
    \ -1) ~= \"\"\n    return last_char_is_letter\nend", "    local last_char = string.char(txt,\
    \ -1)\n    return string.sub(last_char, 1, 1) ~= \" \"\nend", "    local last_char\
    \ = string.char(txt, -1)\n    if string.len(txt) == 0 or string.len(last_char)\
    \ == 0 then\n        return false\n    end\n    return string.char(last_char,\
    \ -1) ~= \" \"\nend", "    local last_char = string.char(txt, -1)\n    return\
    \ string.sub(last_char, 1, 1) ~= \" \"\nend", "    local last_char = string.char(txt,\
    \ -1)\n    local is_letter = string.char(last_char, 1) ~= nil\n    return is_letter\
    \ and string.char(txt, -2) ~= \" \"\nend", "    local last_char = string.char(txt,\
    \ -1)\n    return string.sub(last_char, 1, 1) ~= \" \"\nend", "    local txt =\
    \ string.gsub(txt, \" \", \"\")\n    local last_char = string.char(txt, -1)\n\
    \    return string.sub(last_char, 1, 1) ~= \" \" and string.sub(last_char, 1,\
    \ 1) ~= \"-\" and string.sub(last_char, 1, 1) ~= \"_\"\nend", "    local txt_len\
    \ = #txt\n    if txt_len == 0 then\n        return false\n    end\n    local last_char\
    \ = txt[txt_len]\n    if string.byte(last_char, 1) ~= 0 then\n        return false\n\
    \    end\n    return true\nend", "    local last_char = string.char(txt, -1)\n\
    \    return string.sub(last_char, 1, 1) ~= \" \"\nend", "    local last_char =\
    \ string.char(txt, -1)\n    local last_char_is_letter = string.char(last_char,\
    \ -1) ~= nil\n    return last_char_is_letter\nend", "    local last_char = string.char(txt,\
    \ -1)\n    if string.len(txt) == 0 or string.len(last_char) == 0 then\n      \
    \  return false\n    end\n    return string.char(last_char, 1) ~= \" \"\nend",
  "    local last_char = string.char(txt, -1)\n    return string.find(string.lower(last_char),\
    \ \"a\") == 1 and string.find(string.lower(last_char), \"e\") == 1 and string.find(string.lower(last_char),\
    \ \"i\") == 1 and string.find(string.lower(last_char), \"o\") == 1 and string.find(string.lower(last_char),\
    \ \"u\") == 1 and string.find(string.lower(last_char), \"y\") == 1 and string.find(string.lower(last_char),\
    \ \" \") == -1\nend", "    local txt = string.lower(txt)\n    local last_char\
    \ = string.char(txt, -1)\n    local is_letter = string.char(last_char, 1) ~= \"\
    \ \"\n    return is_letter and string.find(txt, last_char) == -1\nend", "    local\
    \ txt_len = #txt\n    if txt_len == 0 then\n        return false\n    end\n  \
    \  return txt[txt_len] ~= \" \"\nend", "    local txt = string.gsub(txt, \" \"\
    , \"\")\n    local last_char = string.char(txt, -1)\n    return string.sub(last_char,\
    \ 1, 1) ~= \" \"\nend", "    local last_char = string.char(txt, -1)\n    if string.len(txt)\
    \ == 0 or string.len(txt) == 1 then\n        return false\n    end\n    return\
    \ string.char(txt, -1) ~= last_char and string.char(txt, -1) ~= \" \"\nend", " \
    \   local txt = string.lower(txt)\n    local last_char = string.char(txt, -1)\n\
    \    if string.sub(txt, -2, 1) == \" \" then\n        return true\n    else\n\
    \        return string.char(txt, -1) ~= \" \" and string.char(txt, -1) ~= \"-\"\
    \ and string.char(txt, -1) ~= \".\"\n    end\nend", "    local last_char = string.char(txt,\
    \ -1)\n    local last_char_is_letter = string.char(last_char, 1) ~= nil\n    return\
    \ last_char_is_letter\nend", "    local last_char = string.char(txt, -1)\n   \
    \ local last_char_is_a_letter = string.char(txt, -1) ~= \" \"\n    return last_char_is_a_letter\n\
    end", "    local last_char = string.char(txt, -1)\n    return string.sub(last_char,\
    \ 1, 1) ~= \" \"\nend", "    local last_char = string.char(txt, -1)\n    return\
    \ string.len(txt) > 0 and string.sub(txt, -1, 1) ~= \" \" and string.sub(txt,\
    \ -1, 1) ~= \"-\" and string.sub(txt, -1, 1) ~= \"_\" and string.sub(txt, -1,\
    \ 1) ~= \".\" and string.sub(txt, -1, 1) ~= \",\" and string.sub(txt, -1, 1) ~=\
    \ \":\" and string.sub(txt, -1, 1) ~= \";\" and string.sub(txt, -1, 1) ~= \"!\"\
    \ and string.sub(txt, -1, 1) ~= \"?\" and string.sub(txt, -1, 1) ~= \"(\" and\
    \ string.sub(txt, -1, 1) ~= \")\" and string.sub(txt, -1, 1) ~= \"{\" and string.sub(txt,\
    \ -1, 1) ~= \"}\" and string.sub(txt, -1, 1) ~= \"|\" and string.sub(txt, -1,\
    \ 1) ~= \"-\"\nend", "    local last_char = string.char(txt, -1)\n    local last_char_is_letter\
    \ = string.char(last_char, 1) ~= nil\n    return last_char_is_letter\nend", " \
    \   local last_char = string.char(txt, -1)\n    return string.sub(last_char, 1,\
    \ 1) ~= \" \"\nend", "    local txt = string.lower(txt)\n    local last_char =\
    \ string.char(txt, -1)\n    if string.byte(last_char, 1) >= 48 and string.byte(last_char,\
    \ 1) <= 57 then\n        return true\n    else\n        return false\n    end\n\
    end", "    local last_char = string.char(txt, -1)\n    return string.sub(last_char,\
    \ 1, 1) ~= \" \"\nend", "    local txt = string.lower(txt)\n    local i = string.len(txt)\n\
    \    local last_char = string.char(txt, i)\n    local is_letter = string.char(last_char,\
    \ 1) ~= \" \"\n    return is_letter\nend", "    local last_char = string.char(txt,\
    \ -1)\n    return string.len(txt) > 0 and string.sub(last_char, 1, 1) ~= \" \"\
    \nend", "    local last_char = string.char(txt, -1)\n    return string.sub(last_char,\
    \ 1, 1) ~= \" \"\nend", "    local last_char = string.char(txt, -1)\n    return\
    \ string.sub(last_char, 1, 1) ~= \" \"\nend", "    local txt = string.gsub(txt,\
    \ \"%s+$\", \"\")\n    return string.char(txt, -1) ~= nil and string.char(txt,\
    \ -1) ~= \"\" and string.char(txt, -1) ~= \" \"\nend", "    local last_char =\
    \ string.char(txt, -1)\n    return string.sub(last_char, 1, 1) ~= \" \"\nend",
  "    local last_char = string.char(txt, -1)\n    local last_char_is_a_letter = string.char(txt,\
    \ -1) ~= nil\n    return last_char_is_a_letter and string.char(txt, -1) ~= \"\
    \ \"\nend", "    local last_char = string.char(txt, -1)\n    return string.sub(last_char,\
    \ 1, 1) ~= \" \"\nend", "    local last_char = string.char(txt, -1)\n    return\
    \ string.sub(last_char, 1, 1) ~= \" \"\nend", "    local last_char = string.char(txt,\
    \ -1)\n    return string.sub(last_char, 1, 1) ~= \" \"\nend", "    local last_char\
    \ = string.char(txt, -1)\n    local last_char_is_letter = string.char(last_char,\
    \ -1) ~= nil\n    return last_char_is_letter\nend", "    local last_char = string.char(txt,\
    \ -1)\n    local last_char_is_letter = string.char(last_char, -1) ~= nil\n   \
    \ return last_char_is_letter\nend", "    local txt = string.gsub(txt, \"%s+$\"\
    , \"\")\n    local last_char = string.char(txt, -1)\n    return string.find(string.char(txt,\
    \ -1), \"a-zA-Z\") == nil and last_char ~= \" \"\nend", "    local last_char =\
    \ string.char(txt, -1)\n    return string.sub(last_char, 1, 1) ~= \" \"\nend",
  "    local txt = string.gsub(txt, \" \", \"\")\n    if txt == \"\" then\n      \
    \  return false\n    end\n    return string.char(txt, -1) ~= \" \"\nend", "  \
    \  local last_char = string.char(txt, -1)\n    return string.sub(last_char, 1,\
    \ 1) ~= \" \"\nend", "    local txt = string.lower(txt)\n    local last_char =\
    \ string.char(txt, -1)\n    local is_letter = string.char(last_char, 1) ~= \"\
    \ \"\n    return is_letter\nend", "    local txt = string.gsub(txt, \"%s+$\",\
    \ \"\")\n    local last_char = string.char(txt, -1)\n    return string.sub(last_char,\
    \ 1, 1) ~= \" \"\nend", "    local txt_len = #txt\n    if txt_len == 0 then\n\
    \        return false\n    end\n    return txt[txt_len] ~= \" \"\nend", "    local\
    \ txt = string.lower(txt)\n    local last_char = string.char(txt, -1)\n    local\
    \ is_letter = string.char(last_char, 1) ~= \" \"\n    return is_letter and not\
    \ string.find(txt, last_char)\nend", "    local txt_len = #txt\n    if txt_len\
    \ == 0 then\n        return false\n    end\n    local last_char = string.char(txt,\
    \ txt_len)\n    return string.char(last_char, 1) ~= \" \"\nend", "    local txt\
    \ = string.lower(txt)\n    if string.len(txt) == 0 then\n        return false\n\
    \    end\n    return string.char(txt, string.len(txt) - 1) ~= nil and string.char(txt,\
    \ string.len(txt) - 1) ~= \" \"\nend", "    local last_char = string.char(txt,\
    \ -1)\n    local is_letter = string.char(last_char, -1) ~= nil\n    return is_letter\
    \ and string.char(last_char, -2) ~= \" \"\nend", "    local txt = string.gsub(txt,\
    \ \"%S\", \" \")\n    local last_char = string.char(txt, -1)\n    return string.sub(last_char,\
    \ 1, 1) ~= \" \" and string.sub(last_char, 1, 1) ~= \"-\"\nend", "    local last_char\
    \ = string.char(txt, -1)\n    return string.sub(last_char, 1, 1) ~= \" \"\nend",
  "    local txt = string.lower(txt)\n    local last_char = string.char(txt, -1)\n\
    \    local is_letter = string.char(txt, -2) ~= \" \"\n    return is_letter and\
    \ last_char ~= \" \" and last_char ~= \".\"\nend", "    local txt_len = #txt\n\
    \    if txt_len == 0 then\n        return false\n    end\n    local last_char\
    \ = string.char(txt, txt_len)\n    if string.sub(last_char, 1, 1) ~= \" \" then\n\
    \        return true\n    end\n    return false\nend", "    local txt = string.gsub(txt,\
    \ \"%s+$\", \"\")\n    if string.len(txt) == 0 then\n        return false\n  \
    \  end\n    return string.char(txt, string.len(txt)) ~= nil\nend", "    local\
    \ last_char = string.char(txt, -1)\n    return string.sub(last_char, 1, 1) ~=\
    \ \" \"\nend", "    local txt = string.lower(txt)\n    local last_char = string.char(txt,\
    \ -1)\n    local is_letter = string.char(last_char, -1) ~= \" \"\n    return is_letter\n\
    end", "    local last_char = string.char(txt, -1)\n    if string.len(txt) == 0\
    \ then\n        return false\n    else\n        return string.sub(last_char, 1,\
    \ 1) ~= \" \"\n    end\nend", "    local txt = string.gsub(txt, \"%s+\", \" \"\
    )\n    local last_char = string.char(txt, -1)\n    return string.sub(last_char,\
    \ 1, 1) ~= \" \" and string.sub(last_char, 1, 1) ~= \"-\" and string.sub(last_char,\
    \ 1, 1) ~= \"_\"\nend", "    local last_char = string.char(txt, -1)\n    return\
    \ string.sub(last_char, 1, 1) ~= \" \"\nend", "    local last_char = string.char(txt,\
    \ -1)\n    return string.sub(last_char, 1, 1) ~= \" \"\nend", "    local last_char\
    \ = string.char(txt, -1)\n    return string.sub(last_char, 1, 1) ~= \" \"\nend",
  "    local txt_len = #txt\n    if txt_len == 0 then\n        return false\n    end\n\
    \    local last_char = txt[txt_len]\n    return isalpha(last_char) and not is_part_of_word(last_char)\n\
    end", "    local txt = string.lower(txt)\n    local last_char = string.char(txt,\
    \ -1)\n    return string.find(txt, \" \") == nil and string.find(txt, \".\") ==\
    \ nil and string.find(txt, \",\") == nil and string.find(txt, \";\") == nil and\
    \ string.find(txt, \":\") == nil and string.find(txt, \"!\") == nil and string.find(txt,\
    \ \"?\") == nil and string.find(txt, \"\\\"\") == nil and string.find(txt, \"\
    '\") == nil and string.find(txt, \"`\") == nil and string.find(txt, \"{\") ==\
    \ nil and string.find(txt, \"}\") == nil and string.find(txt, \"(\") == nil and\
    \ string.find(txt, \")\") == nil and string.find(txt, \"=\") == nil and string.find(txt,\
    \ \"*\") == nil and string.find(txt, \"+\") == nil and string.find(txt, \",\"\
    ) == nil and string.find(txt, \"-\") == nil and string.find(txt, \".\") == nil\
    \ and string.find(txt, \"/\") == nil and string.find(txt, \"\\\\\") == nil and\
    \ string.find(txt, \"&\") == nil and string.find(txt, \"|\") == nil and string.find(txt,\
    \ \";\") == nil and string.find(txt, \":\") == nil and string.find(txt, \"^\"\
    ) == nil and string.find(txt, \"~\") == nil and string.find(txt, \" \") == nil\
    \ and string.find(txt, \".\") == nil and string.find(txt, \",\") == nil and string.find(txt,\
    \ \";\") == nil and string.find(txt, \":\") == nil and string.find(txt, \"!\"\
    ) == nil and string.find(txt, \"?\") == nil and string.find(txt, \"\\\"\") ==\
    \ nil and string.find(txt, \"'\") == nil and string.find(txt, \"`\") == nil and\
    \ string.find(txt, \"{\") == nil and string.find(txt, \"}\") == nil and string.find(txt,\
    \ \"(\") ==", "    local last_char = string.char(txt, -1)\n    return string.sub(last_char,\
    \ 1, 1) ~= \" \"\nend", "    local last_char = string.char(txt, -1)\n    local\
    \ last_char_is_letter = string.char(last_char, -1) ~= nil\n    return last_char_is_letter\n\
    end", "    local last_char = string.char(txt, -1)\n    return string.sub(last_char,\
    \ 1, 1) ~= \" \"\nend", "    local last_char = string.char(txt, -1)\n    return\
    \ string.sub(last_char, 1, 1) ~= \" \"\nend", "    local txt_len = #txt\n    if\
    \ txt_len == 0 then\n        return false\n    end\n    local last_char = string.char(txt,\
    \ txt_len)\n    return string.sub(last_char, 1, 1) ~= \" \"\nend", "    local\
    \ last_char = string.char(txt, -1)\n    return string.sub(last_char, 1, 1) ~=\
    \ \" \"\nend", "    local last_char = string.char(txt, -1)\n    local last_char_is_a_letter\
    \ = string.char(txt, -1) ~= nil\n    return last_char_is_a_letter\nend", "   \
    \ local last_char = string.char(txt, -1)\n    return string.sub(last_char, 1,\
    \ 1) ~= \" \"\nend", "    local last_char = string.char(txt, -1)\n    local last_char_is_a_letter\
    \ = string.char(txt, -1) ~= nil\n    return last_char_is_a_letter\nend", "   \
    \ local txt = string.lower(txt)\n    local last_char = string.char(txt, -1)\n\
    \    return string.find(txt, \" \") == -1 and string.find(txt, \".\") == -1 and\
    \ string.find(txt, \",\") == -1 and string.find(txt, \";\") == -1 and string.find(txt,\
    \ \":\") == -1 and string.find(txt, \"!\") == -1 and string.find(txt, \"?\") ==\
    \ -1 and string.find(txt, \"\\\"\") == -1 and string.find(txt, \"\\\\\") == -1\
    \ and string.find(txt, \"|\") == -1 and string.find(txt, \"{\") == -1 and string.find(txt,\
    \ \"}\") == -1 and string.find(txt, \"(\") == -1 and string.find(txt, \")\") ==\
    \ -1 and string.find(txt, \"[\") == -1 and string.find(txt, \"]\") == -1 and string.find(txt,\
    \ \"{\") == -1 and string.find(txt, \"}\") == -1 and string.find(txt, \";\") ==\
    \ -1 and string.find(txt, \":\") == -1 and string.find(txt, \".\") == -1 and string.find(txt,\
    \ \",\") == -1 and string.find(txt, \"!\") == -1 and string.find(txt, \"?\") ==\
    \ -1 and string.find(txt, \"\\\"\") == -1 and string.find(txt, \"\\\\\") == -1\
    \ and string.find(txt, \"|\") == -1 and string.find(txt, \"{\") == -1 and string.find(txt,\
    \ \"}\") == -1 and string.find(txt, \"(\") == -1 and string.find(txt, \")\") ==\
    \ -1 and string.find(txt, \"[\") == -1 and string.find(txt, \"]\") == -1 and string.find(txt,\
    \ \"{\") == -1 and string.find(txt, \"}\") == -1 and string.find(txt, \";\") ==\
    \ -1 and string.find(txt, \":\") == -1 and string.find(txt", "    local last_char\
    \ = string.char(txt, -1)\n    if string.len(txt) == 0 then\n        return false\n\
    \    end\n    return string.sub(last_char, 1, 1) ~= \" \"\nend", "    local last_char\
    \ = string.char(txt, -1)\n    local last_char_is_letter = string.char(last_char,\
    \ -1) ~= nil\n    return last_char_is_letter\nend", "    local txt = string.lower(txt)\n\
    \    local last_char = string.char(txt, -1)\n    local is_letter = string.char(last_char,\
    \ -1) ~= nil\n    return is_letter and not string.find(txt, last_char)\nend",
  "    local txt = string.lower(txt)\n    local last_char = string.char(txt, -1)\n\
    \    local is_letter = string.char(last_char, 1) ~= \"\"\n    return is_letter\
    \ and string.find(txt, last_char) == -1\nend", "    local last_char = string.char(txt,\
    \ -1)\n    return string.sub(last_char, 1, 1) ~= \" \"\nend", "    local last_char\
    \ = string.char(txt, -1)\n    return string.sub(last_char, 1, 1) ~= \" \"\nend",
  "    local last_char = string.char(txt, -1)\n    return string.len(txt) > 0 and\
    \ string.sub(last_char, 1, 1) ~= \" \"\nend", "    local txt = string.lower(txt)\n\
    \    local last_char = string.char(txt, -1)\n    local is_letter = string.char(last_char,\
    \ 1) ~= \"\"\n    return is_letter and not string.find(txt, last_char)\nend",
  "    local last_char = string.char(txt, -1)\n    return string.len(txt) > 0 and\
    \ string.sub(txt, 1, -1) ~= last_char\nend", "    local last_char = string.char(txt,\
    \ -1)\n    return string.sub(last_char, 1, 1) ~= \" \"\nend", "    local last_char\
    \ = string.char(txt, -1)\n    return string.sub(last_char, 1, 1) ~= \" \"\nend",
  "    local txt = string.gsub(txt, \"%s+$\", \"\")\n    return string.char(txt, -1)\
    \ ~= nil and string.char(txt, -1) ~= \" \"\nend", "    local txt = string.gsub(txt,\
    \ \"%s+\", \" \")\n    local last_char = string.char(txt, -1)\n    return string.find(string.char(txt,\
    \ -2, -1), \"a-zA-Z\") == -1 and\n        string.find(string.char(txt, -2, -1),\
    \ \" \") == -1 and\n        string.find(string.char(txt, -2, -1), \".\") == -1\
    \ and\n        string.find(string.char(txt, -2, -1), \",\") == -1 and\n      \
    \  string.find(string.char(txt, -2, -1), \";\") == -1 and\n        string.find(string.char(txt,\
    \ -2, -1), \":\") == -1 and\n        string.find(string.char(txt, -2, -1), \"\
    !\") == -1 and\n        string.find(string.char(txt, -2, -1), \"?\") == -1 and\n\
    \        string.find(string.char(txt, -2, -1), \"\\\"\") == -1 and\n        string.find(string.char(txt,\
    \ -2, -1), \"'\") == -1 and\n        string.find(string.char(txt, -2, -1), \"\\\
    \\\") == -1 and\n        string.find(string.char(txt, -2, -1), \"|\") == -1 and\n\
    \        string.find(string.char(txt, -2, -1), \"/\") == -1 and\n        string.find(string.char(txt,\
    \ -2, -1), \"*\") == -1 and\n        string.find(string.char(txt, -2, -1), \"\
    &\") == -1 and\n        string.find(string.char(txt, -2, -1), \"=\") == -1 and\n\
    \        string.find(string.char(txt, -2, -1), \">\") == -1 and\n        string.find(string.char(txt,\
    \ -2, -1), \"<\") == -1 and\n        string.find(string.char(txt, -2, -1), \"\
    (\") == -1 and", "    local last_char = string.char(txt, -1)\n    return string.len(txt)\
    \ > 0 and string.sub(last_char, 1, 1) ~= \" \"\nend", "    local last_char = string.char(txt,\
    \ -1)\n    local last_char_is_a_letter = string.char(txt, -1) ~= \" \"\n    return\
    \ last_char_is_a_letter\nend", "    local last_char = string.char(txt, -1)\n \
    \   return string.sub(last_char, 1, 1) ~= \" \"\nend", "    local last_char =\
    \ string.char(txt, -1)\n    local last_char_is_letter = string.char(last_char,\
    \ 1) ~= nil\n    return last_char_is_letter\nend", "    local last_char = string.char(txt,\
    \ -1)\n    return string.sub(last_char, 1, 1) ~= \" \"\nend", "    local last_char\
    \ = string.char(txt, -1)\n    return string.sub(last_char, 1, 1) ~= \" \"\nend",
  "    local txt_len = #txt\n    if txt_len == 0 then\n        return false\n    end\n\
    \    return txt[txt_len] ~= \" \"\nend", "    local last_char = string.char(txt,\
    \ -1)\n    return string.sub(last_char, 1, 1) ~= \" \"\nend", "    local txt_len\
    \ = #txt\n    if txt_len == 0 then\n        return false\n    end\n    local last_char\
    \ = txt[txt_len]\n    if not isalpha(last_char) then\n        return false\n \
    \   end\n    local last_char_is_a_word = false\n    for i = 1, txt_len - 1 do\n\
    \        if txt[i] == \" \" then\n            last_char_is_a_word = false\n  \
    \      end\n        if txt[i] == \" \" and not last_char_is_a_word then\n    \
    \        last_char_is_a_word = true\n        end\n        if not isalpha(txt[i])\
    \ then\n            last_char_is_a_word = false\n        end\n    end\n    return\
    \ not last_char_is_a_word\nend", "    local txt_len = #txt\n    if txt_len ==\
    \ 0 then\n        return false\n    end\n    local last_char = string.char(txt,\
    \ txt_len)\n    return string.char(last_char, 1) ~= \" \"\nend", "    local last_char\
    \ = string.char(txt, -1)\n    return string.sub(last_char, 1, 1) ~= \" \"\nend",
  "    local txt = string.lower(txt)\n    local last_char = string.char(txt, -1)\n\
    \    local last_char_is_a_letter = string.char(txt, -1) ~= \" \"\n    return last_char_is_a_letter\
    \ and not string.find(txt, last_char)\nend", "    local last_char = string.char(txt,\
    \ -1)\n    local is_letter = string.char(last_char, 1) ~= nil\n    return is_letter\
    \ and string.find(txt, last_char) == nil\nend", "    local last_char = string.char(txt,\
    \ -1)\n    return string.sub(last_char, 1, 1) ~= \" \"\nend", "    local last_char\
    \ = string.char(txt, -1)\n    return string.sub(last_char, 1, 1) ~= \" \"\nend",
  "    local txt_len = #txt\n    if txt_len == 0 then\n        return false\n    end\n\
    \    local last_char = txt[txt_len]\n    if not isalpha(last_char) then\n    \
    \    return false\n    end\n    local word_end = false\n    for i = txt_len -\
    \ 1, 1, -1 do\n        if txt[i] == \" \" then\n            word_end = true\n\
    \            break\n        end\n    end\n    if word_end then\n        return\
    \ false\n    end\n    return true\nend", "    local txt = string.gsub(txt, \"\
    \ \", \"\")\n    local last_char = string.char(txt, -1)\n    return string.char(txt,\
    \ -1) ~= nil and string.char(txt, -1) ~= \"\" and string.char(txt, -1) ~= \" \"\
    \ and string.char(txt, -1) ~= \".\" and string.char(txt, -1) ~= \",\" and string.char(txt,\
    \ -1) ~= \"!\" and string.char(txt, -1) ~= \"?\" and string.char(txt, -1) ~= \"\
    \\\"\" and string.char(txt, -1) ~= \"(\" and string.char(txt, -1) ~= \")\" and\
    \ string.char(txt, -1) ~= \"{\" and string.char(txt, -1) ~= \"}\" and string.char(txt,\
    \ -1) ~= \"|\"\nend", "    local last_char = string.char(txt, -1)\n    return\
    \ string.sub(last_char, 1, 1) ~= \" \"\nend", "    local txt = string.lower(txt)\n\
    \    local last_char = string.char(txt, -1)\n    local last_char_is_letter = string.char(last_char,\
    \ 1) ~= \"\"\n    return last_char_is_letter and not string.find(txt, last_char)\n\
    end", "    local last_char = string.char(txt, -1)\n    local last_char_is_letter\
    \ = string.char(last_char, 1) ~= nil\n    return last_char_is_letter and not string.find(last_char,\
    \ \" \")\nend", "    local last_char = string.char(txt, -1)\n    return string.sub(last_char,\
    \ 1, 1) ~= \" \"\nend", "    local last_char = string.char(txt, -1)\n    return\
    \ string.sub(last_char, 1, 1) ~= \" \"\nend", "    local last_char = string.char(txt,\
    \ -1)\n    local last_char_is_letter = string.char(last_char, -1) ~= nil\n   \
    \ return last_char_is_letter\nend", "    local last_char = string.char(txt, -1)\n\
    \    local last_char_is_a_letter = string.char(txt, -1) ~= \" \"\n    return last_char_is_a_letter\
    \ and string.find(last_char, \" \") == -1\nend", "    local last_char = string.char(txt,\
    \ -1)\n    return string.sub(last_char, 1, 1) ~= \" \"\nend", "    local last_char\
    \ = string.char(txt, -1)\n    return string.len(txt) > 0 and string.sub(txt, 1,\
    \ -1) ~= last_char\nend", "    local txt_len = #txt\n    if txt_len == 0 then\n\
    \        return false\n    end\n    local last_char = string.char(txt, txt_len)\n\
    \    return string.char(last_char, 1) ~= \" \"\nend", "    local last_char = string.char(txt,\
    \ -1)\n    return string.len(txt) > 0 and string.sub(txt, -1, 1) ~= \" \" and\
    \ string.sub(txt, -1, 1) ~= \"-\" and string.sub(txt, -1, 1) ~= \"_\" and string.sub(txt,\
    \ -1, 1) ~= \".\" and string.sub(txt, -1, 1) ~= \",\" and string.sub(txt, -1,\
    \ 1) ~= \":\" and string.sub(txt, -1, 1) ~= \";\" and string.sub(txt, -1, 1) ~=\
    \ \"!\" and string.sub(txt, -1, 1) ~= \"?\" and string.sub(txt, -1, 1) ~= \"\\\
    \"\" and string.sub(txt, -1, 1) ~= \"(\" and string.sub(txt, -1, 1) ~= \")\" and\
    \ string.sub(txt, -1, 1) ~= \"{\" and string.sub(txt, -1, 1) ~= \"}\" and string.sub(txt,\
    \ -1, 1) ~= \"|\"\nend", "    local txt = string.lower(txt)\n    local last_char\
    \ = string.char(txt, -1)\n    local last_char_is_letter = string.char(last_char,\
    \ -1) ~= nil\n    return last_char_is_letter\nend", "    local last_char = string.char(txt,\
    \ -1)\n    if string.len(txt) == 0 or string.len(last_char) == 0 then\n      \
    \  return false\n    end\n    return string.sub(last_char, 1, 1) ~= \" \"\nend",
  "    local last_char = string.char(txt, -1)\n    return string.sub(last_char, 1,\
    \ 1) ~= \" \"\nend", "    local txt = string.lower(txt)\n    local last_char =\
    \ string.char(txt, -1)\n    if string.char(txt, -2) == \" \" then\n        return\
    \ true\n    else\n        return string.char(txt, -1) ~= \" \" and string.char(txt,\
    \ -1) ~= \".\"\n    end\nend", "    local txt_len = #txt\n    if txt_len == 0\
    \ then\n        return false\n    end\n    local last_char = txt[txt_len]\n  \
    \  if not isalpha(last_char) then\n        return false\n    end\n    local word_end\
    \ = false\n    for i = txt_len - 1, 1, -1 do\n        if txt[i] == \" \" then\n\
    \            word_end = true\n            break\n        end\n    end\n    if\
    \ word_end == true then\n        return false\n    end\n    return true\nend",
  "    local last_char = string.char(txt, -1)\n    return string.len(txt) > 0 and\
    \ string.sub(txt, -1, 1) ~= \" \" and string.sub(txt, -1, 1) ~= \"-\" and string.sub(txt,\
    \ -1, 1) ~= \"_\" and string.sub(txt, -1, 1) ~= \".\" and string.sub(txt, -1,\
    \ 1) ~= \",\" and string.sub(txt, -1, 1) ~= \":\" and string.sub(txt, -1, 1) ~=\
    \ \";\" and string.sub(txt, -1, 1) ~= \"(\" and string.sub(txt, -1, 1) ~= \")\"\
    \ and string.sub(txt, -1, 1) ~= \"{\" and string.sub(txt, -1, 1) ~= \"}\" and\
    \ string.sub(txt, -1, 1) ~= \"&\" and string.sub(txt, -1, 1) ~= \"|\" and string.sub(txt,\
    \ -1, 1) ~= \"!\" and string.sub(txt, -1, 1) ~= \"?\" and string.sub(txt, -1,\
    \ 1) ~= \"*\" and string.sub(txt, -1, 1) ~= \"\\\"\" and string.sub(txt, -1, 1)\
    \ ~= \"'\" and string.sub(txt, -1, 1) ~= \"-\"\nend", "    local txt = string.lower(txt)\n\
    \    local last_char = string.char(txt, -1)\n    local is_letter = string.char(last_char,\
    \ -1) ~= nil\n    return is_letter and not string.match(txt, \"\\\\w+$\")\nend",
  "    local txt_len = #txt\n    if txt_len == 0 then\n        return false\n    end\n\
    \    local last_char = string.char(txt, txt_len)\n    return string.char(last_char,\
    \ 1) ~= \" \"\nend", "    local last_char = string.char(txt, -1)\n    return string.sub(last_char,\
    \ 1, 1) ~= \" \"\nend", "    local last_char = string.char(txt, -1)\n    return\
    \ string.find(string.lower(last_char), \"a\") == 1 and string.find(string.lower(last_char),\
    \ \"e\") == 1 and string.find(string.lower(last_char), \"i\") == 1 and string.find(string.lower(last_char),\
    \ \"o\") == 1 and string.find(string.lower(last_char), \"u\") == 1 and string.find(string.lower(last_char),\
    \ \"y\") == 1 and string.find(string.lower(last_char), \" \") == -1\nend", " \
    \   local last_char = string.char(txt, -1)\n    if string.len(txt) == 0 or string.len(last_char)\
    \ == 0 then\n        return false\n    end\n    return string.char(last_char,\
    \ 1) ~= \" \"\nend", "    local last_char = string.char(txt, -1)\n    local last_char_is_a_letter\
    \ = string.char(txt, -1) ~= nil\n    return last_char_is_a_letter and string.char(txt,\
    \ -1) ~= \" \"\nend", "    local last_char = string.char(txt, -1)\n    return\
    \ string.sub(last_char, 1, 1) ~= \" \"\nend", "    local last_char = string.char(txt,\
    \ -1)\n    return string.sub(last_char, 1, 1) ~= \" \"\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
