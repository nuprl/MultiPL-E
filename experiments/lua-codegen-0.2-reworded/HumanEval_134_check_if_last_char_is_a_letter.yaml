name: HumanEval_134_check_if_last_char_is_a_letter
language: lua
prompt: "-- Create a function that returns true if the last character\n-- of a given\
  \ string is an alphabetical character and is not\n-- a part of a word, and false\
  \ otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n--\
  \ Examples:\n-- >>> check_if_last_char_is_a_letter(\"apple pie\") \n-- False\n--\
  \ >>> check_if_last_char_is_a_letter(\"apple pi e\") \n-- True\n-- >>> check_if_last_char_is_a_letter(\"\
  apple pi e \") \n-- False\n-- >>> check_if_last_char_is_a_letter(\"\") \n-- False\n\
  local function check_if_last_char_is_a_letter(txt)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
  \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
  \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
  \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
  \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
  \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
  \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local txt = string.gsub(txt, \" \", \"\")\n    local last_char\
    \ = string.char(txt, -1)\n    return string.char(txt, -1) ~= nil and string.char(txt,\
    \ -1) ~= \" \" and string.char(txt, -1) ~= \".\"\nend", "    local txt_len = #txt\n\
    \    if txt_len == 0 then\n        return false\n    end\n    return txt[txt_len]\
    \ ~= \" \"\nend", "    local txt_len = #txt\n    if txt_len == 0 then\n      \
    \  return false\n    end\n    local last_char = string.char(txt, txt_len)\n  \
    \  return string.sub(last_char, 1, 1) ~= \" \"\nend", "    local last_char = string.char(txt,\
    \ -1)\n    local last_char_is_letter = string.char(last_char, -1) ~= nil\n   \
    \ return last_char_is_letter and string.char(txt, -2) ~= \" \"\nend", "    local\
    \ last_char = string.char(txt, -1)\n    return string.find(string.char(txt, -2,\
    \ -1), \" \") == -1 and string.find(last_char, \"a\") == 1 and string.find(last_char,\
    \ \"e\") == 1 and string.find(last_char, \"i\") == 1 and string.find(last_char,\
    \ \"o\") == 1 and string.find(last_char, \"u\") == 1 and string.find(last_char,\
    \ \"y\") == 1\nend", "    local txt = string.gsub(txt, \" \", \"\")\n    if txt\
    \ == \"\" then\n        return false\n    end\n    return string.char(txt, -1)\
    \ ~= \" \"\nend", "    local txt = string.gsub(txt, \" \", \"\")\n    return string.sub(txt,\
    \ -1, 1) ~= \" \"\nend", "    local last_char = string.char(txt, -1)\n    return\
    \ string.len(txt) > 0 and string.sub(txt, -1) ~= \" \" and string.sub(txt, -1)\
    \ ~= \" \" and string.sub(txt, -1) ~= \" \" and string.sub(txt, -1) ~= \" \" and\
    \ string.sub(txt, -1) ~= \" \" and string.sub(txt, -1) ~= \" \" and string.sub(txt,\
    \ -1) ~= \" \" and string.sub(txt, -1) ~= \" \" and string.sub(txt, -1) ~= \"\
    \ \" and string.sub(txt, -1) ~= \" \" and string.sub(txt, -1) ~= \" \" and string.sub(txt,\
    \ -1) ~= \" \" and string.sub(txt, -1) ~= \" \" and string.sub(txt, -1) ~= \"\
    \ \" and string.sub(txt, -1) ~= \" \" and string.sub(txt, -1) ~= \" \" and string.sub(txt,\
    \ -1) ~= \" \" and string.sub(txt, -1) ~= \" \" and string.sub(txt, -1) ~= \"\
    \ \" and string.sub(txt, -1) ~= \" \" and string.sub(txt, -1) ~= \" \" and string.sub(txt,\
    \ -1) ~= \" \" and string.sub(txt, -1) ~= \" \" and string.sub(txt, -1) ~= \"\
    \ \" and string.sub(txt, -1) ~= \" \" and string.sub(txt, -1) ~= \" \" and string.sub(txt,\
    \ -1) ~= \" \" and string.sub(txt, -1) ~= \" \" and string.sub(txt, -1) ~= \"\
    \ \" and string.sub(txt, -1) ~= \" \" and string.sub(txt, -1) ~= \" \" and string.sub(txt,\
    \ -1) ~= \" \" and string.sub(txt, -1) ~= \" \" and string.sub(txt, -1) ~= \"\
    \ \" and string.sub(txt, -1)", "    local txt_len = #txt\n    if txt_len == 0\
    \ then\n        return false\n    end\n    local last_char = txt[txt_len]\n  \
    \  if not isalpha(last_char) then\n        return false\n    end\n    local word_end\
    \ = false\n    for i = 1, txt_len - 1 do\n        if txt[i] == \" \" then\n  \
    \          word_end = true\n            break\n        end\n    end\n    if word_end\
    \ == true then\n        return false\n    end\n    return true\nend", "    local\
    \ last_char = string.char(txt, -1)\n    return string.sub(last_char, 1, 1) ~=\
    \ \" \"\nend", "    local last_char = string.char(txt, -1)\n    local is_letter\
    \ = string.char(last_char, 1) ~= nil\n    return is_letter and string.find(txt,\
    \ last_char) == nil\nend", "    local last_char = string.char(txt, -1)\n    return\
    \ string.sub(last_char, 1, 1) ~= \" \"\nend", "    local txt_len = #txt\n    if\
    \ txt_len == 0 then\n        return false\n    end\n    return txt[txt_len] ~=\
    \ \" \"\nend", "    local txt = string.gsub(txt, \"%s+$\", \"\")\n    local last_char\
    \ = string.char(txt, -1)\n    return string.sub(last_char, 1, 1) ~= \" \" and\
    \ string.sub(last_char, 1, 1) ~= \"-\"\nend", "    local last_char = string.char(txt,\
    \ -1)\n    if string.len(txt) == 0 or string.len(last_char) == 0 then\n      \
    \  return false\n    end\n    return string.char(last_char, 1) ~= \" \"\nend",
  "    local txt = string.lower(txt)\n    local last_char = string.char(txt, -1)\n\
    \    local is_letter = string.char(last_char, 1) ~= \" \"\n    return is_letter\n\
    end", "    local last_char = string.char(txt, -1)\n    return string.len(txt)\
    \ > 0 and string.sub(txt, -1, 1) ~= \" \" and string.sub(txt, -1, 1) ~= \".\"\
    \ and string.sub(txt, -1, 1) ~= \",\" and string.sub(txt, -1, 1) ~= \"!\" and\
    \ string.sub(txt, -1, 1) ~= \"?\" and string.sub(txt, -1, 1) ~= \":\" and string.sub(txt,\
    \ -1, 1) ~= \";\" and string.sub(txt, -1, 1) ~= \"\\\"\" and string.sub(txt, -1,\
    \ 1) ~= \"'\" and string.sub(txt, -1, 1) ~= \"(\" and string.sub(txt, -1, 1) ~=\
    \ \")\" and string.sub(txt, -1, 1) ~= \"-\" and string.sub(txt, -1, 1) ~= \"_\"\
    \ and string.sub(txt, -1, 1) ~= \"&\" and string.sub(txt, -1, 1) ~= \"|\" and\
    \ string.sub(txt, -1, 1) ~= \"*\" and string.sub(txt, -1, 1) ~= \"+\" and string.sub(txt,\
    \ -1, 1) ~= \"=\" and string.sub(txt, -1, 1) ~= \"^\" and string.sub(txt, -1,\
    \ 1) ~= \"{\" and string.sub(txt, -1, 1) ~= \"}\" and string.sub(txt, -1, 1) ~=\
    \ \"~\" and string.sub(txt, -1, 1) ~= \"`\"\nend", "    local last_char = string.char(txt,\
    \ -1)\n    local is_letter = string.char(last_char, -1) ~= \"\"\n    return is_letter\
    \ and not string.find(txt, last_char)\nend", "    local txt = string.lower(txt)\n\
    \    local last_char = string.char(txt, -1)\n    return string.find(txt, \" \"\
    ) == nil and string.find(txt, \".\") == nil and string.find(txt, \",\") == nil\
    \ and string.find(txt, \";\") == nil and string.find(txt, \":\") == nil and string.find(txt,\
    \ \"!\") == nil and string.find(txt, \"?\") == nil and string.find(txt, \"\\\"\
    \") == nil and string.find(txt, \"'\") == nil and string.find(txt, \"`\") == nil\
    \ and string.find(txt, \"{\") == nil and string.find(txt, \"}\") == nil and string.find(txt,\
    \ \"[\") == nil and string.find(txt, \"]\") == nil and string.find(txt, \"(\"\
    ) == nil and string.find(txt, \")\") == nil and string.find(txt, \"*\") == nil\
    \ and string.find(txt, \"+\") == nil and string.find(txt, \"=\") == nil and string.find(txt,\
    \ \"&\") == nil and string.find(txt, \"|\") == nil and string.find(txt, \"^\"\
    ) == nil and string.find(txt, \"~\") == nil and string.find(txt, \"\\\\\") ==\
    \ nil and string.find(txt, \"/\") == nil and string.find(txt, \" \") == nil and\
    \ string.find(txt, \".\") == nil and string.find(txt, \",\") == nil and string.find(txt,\
    \ \";\") == nil and string.find(txt, \":\") == nil and string.find(txt, \"!\"\
    ) == nil and string.find(txt, \"?\") == nil and string.find(txt, \"\\\"\") ==\
    \ nil and string.find(txt, \"'\") == nil and string.find(txt, \"`\") == nil and\
    \ string.find(txt, \"{\") == nil and string.find(txt, \"}\") == nil and string.find(txt,\
    \ \"[\") == nil and string.find(txt, \"]\") == nil and string.find(txt, \"(\"\
    ) == nil and string.find(txt, \")\") ==", "    local txt_len = #txt\n    if txt_len\
    \ == 0 then\n        return false\n    end\n    local last_char = string.char(txt,\
    \ txt_len)\n    return string.sub(last_char, 1, 1) ~= \" \"\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
