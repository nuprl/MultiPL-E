name: HumanEval_29_filter_by_prefix
language: lua
prompt: "-- Filter an input table of strings only for ones that start with a given\
  \ prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc',\
  \ 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings,\
  \ prefix)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n\
  \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
  \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local filtered = {}\n    for _, string in ipairs(strings) do\n\
    \        if string.substring(1, #prefix) == prefix then\n            table.insert(filtered,\
    \ string)\n        end\n    end\n    return filtered\nend", "    local result\
    \ = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1,\
    \ prefix.length + 1) == prefix then\n            table.insert(result, string)\n\
    \        end\n    end\n    return result\nend", "    local filtered = {}\n   \
    \ for _, string in pairs(strings) do\n        if string.substring(1, prefix.length\
    \ + 1) == prefix then\n            table.insert(filtered, string)\n        end\n\
    \    end\n    return filtered\nend", "    local filtered = {}\n    for _, string\
    \ in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) ==\
    \ prefix then\n            table.insert(filtered, string)\n        end\n    end\n\
    \    return filtered\nend", "    local filtered = {}\n    for _, string in ipairs(strings)\
    \ do\n        if string.substring(1, prefix.length + 1) == prefix then\n     \
    \       table.insert(filtered, string)\n        end\n    end\n    return filtered\n\
    end", "    local filtered = {}\n    for _, string in ipairs(strings) do\n    \
    \    if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered,\
    \ string)\n        end\n    end\n    return filtered\nend", "    local filtered\
    \ = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1,\
    \ prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n\
    \        end\n    end\n    return filtered\nend", "    local filtered = {}\n \
    \   for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length\
    \ + 1) == prefix then\n            table.insert(filtered, string)\n        end\n\
    \    end\n    return filtered\nend", "    local result = {}\n    for _, string\
    \ in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) ==\
    \ prefix then\n            table.insert(result, string)\n        end\n    end\n\
    \    return result\nend", "    local result = {}\n    for _, string in ipairs(strings)\
    \ do\n        if string.substring(1, prefix.length + 1) == prefix then\n     \
    \       table.insert(result, string)\n        end\n    end\n    return result\n\
    end", "    local result = {}\n    for _, string in pairs(strings) do\n       \
    \ if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result,\
    \ string)\n        end\n    end\n    return result\nend", "    local filtered\
    \ = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1,\
    \ prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n\
    \        end\n    end\n    return filtered\nend", "    local filtered = {}\n \
    \   for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length\
    \ + 1) == prefix then\n            table.insert(filtered, string)\n        end\n\
    \    end\n    return filtered\nend", "    local filtered = {}\n    for _, string\
    \ in ipairs(strings) do\n        if string.substring(1, #prefix) == prefix then\n\
    \            table.insert(filtered, string)\n        end\n    end\n    return\
    \ filtered\nend", "    local filtered = {}\n    for _, string in ipairs(strings)\
    \ do\n        if string.substring(1, prefix.length + 1) == prefix then\n     \
    \       table.insert(filtered, string)\n        end\n    end\n    return filtered\n\
    end", "    local filtered = {}\n    for _, string in ipairs(strings) do\n    \
    \    if string.substring(1, #prefix) == prefix then\n            table.insert(filtered,\
    \ string)\n        end\n    end\n    return filtered\nend", "    local result\
    \ = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1,\
    \ prefix.length + 1) == prefix then\n            table.insert(result, string)\n\
    \        end\n    end\n    return result\nend", "    local filtered = {}\n   \
    \ for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length\
    \ + 1) == prefix then\n            table.insert(filtered, string)\n        end\n\
    \    end\n    return filtered\nend", "    local result = {}\n    for _, string\
    \ in ipairs(strings) do\n        if string.substring(1, #prefix) == prefix then\n\
    \            table.insert(result, string)\n        end\n    end\n    return result\n\
    end", "    local filtered = {}\n    for _, string in ipairs(strings) do\n    \
    \    if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered,\
    \ string)\n        end\n    end\n    return filtered\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
