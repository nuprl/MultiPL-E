name: HumanEval_59_largest_prime_factor
language: lua
prompt: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n--\
  \ 2\nlocal function largest_prime_factor(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
  \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
  \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
  \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local factors = {}\n    for i = 2, math.sqrt(n) do\n        if\
    \ n % i == 0 then\n            factors[i] = factors[i] or i\n            factors[n\
    \ / i] = i\n        end\n    end\n    return factors[n] or 1\nend", "    local\
    \ prime_factors = {}\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n\
    \            prime_factors[i] = true\n            n = n / i\n        end\n   \
    \ end\n    if n > 1 then\n        prime_factors[n] = true\n    end\n    return\
    \ math.max(prime_factors, key=function(k) return prime_factors[k] end)\nend",
  "    local factors = {}\n    for i = 2, math.sqrt(n) + 1, 1 do\n        if n % i\
    \ == 0 then\n            table.insert(factors, i)\n            table.insert(factors,\
    \ n / i)\n        end\n    end\n    return table.maxn(factors)\nend", "    local\
    \ factors = {}\n    for i = 2, math.sqrt(n) + 1 do\n        if n % i == 0 then\n\
    \            factors[i] = factors[i] or i\n            factors[n / i] = i\n  \
    \      end\n    end\n    return factors[n]\nend", "    local factors = {}\n  \
    \  for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            table.insert(factors, n / i)\n            break\n        end\n\
    \    end\n    return table.max(factors)\nend", "    local max = math.sqrt(n)\n\
    \    for i = 2, max do\n        if n % i == 0 then\n            return i\n   \
    \     end\n    end\n    return n\nend", "    local factors = {}\n    for i = 2,\
    \ math.sqrt(n) do\n        if n % i == 0 then\n            factors[i] = true\n\
    \            factors[n/i] = true\n            break\n        end\n    end\n  \
    \  for k, v in pairs(factors) do\n        if v then\n            return k\n  \
    \      end\n    end\n    return n\nend", "    local prime_factors = {}\n    for\
    \ i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            prime_factors[i]\
    \ = prime_factors[i] or i\n            prime_factors[n / i] = prime_factors[n\
    \ / i] or i\n        end\n    end\n    return math.max(prime_factors)\nend", " \
    \   local factors = {}\n    for i = 2, math.sqrt(n) do\n        if n % i == 0\
    \ then\n            if not factors[i] then factors[i] = 1 else factors[i] = factors[i]\
    \ + 1\n            n = n / i\n        end\n    end\n    if not n then return factors[2]\n\
    \    return factors[n]\nend", "    local factors = {}\n    for i = 2, math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            table.insert(factors, i)\n     \
    \       table.insert(factors, n / i)\n        end\n    end\n    return table.max(factors)\n\
    end", "    local factors = {}\n    for i = 2, math.sqrt(n) do\n        if n %\
    \ i == 0 then\n            factors[i] = true\n            n = n / i\n        \
    \    if n == 1 then\n                return i\n            end\n        end\n\
    \    end\n    return nil\nend", "    local prime_factors = {}\n    for i = 2,\
    \ math.sqrt(n) do\n        if n % i == 0 then\n            prime_factors[i] =\
    \ prime_factors[i] or i\n            prime_factors[n / i] = prime_factors[n /\
    \ i] or i\n        end\n    end\n    return math.max(prime_factors)\nend", " \
    \   local factors = {}\n    for i = 2, math.sqrt(n) do\n        if n % i == 0\
    \ then\n            factors[i] = factors[i] or i\n            factors[n / i] =\
    \ i\n        end\n    end\n    return factors[n]\nend", "    local prime_factors\
    \ = {}\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n         \
    \   prime_factors[i] = true\n            n = n / i\n        end\n    end\n   \
    \ if n > 1 then\n        prime_factors[n] = true\n    end\n    return table.max(prime_factors)\n\
    end", "    local prime_factors = {}\n    local i = 2\n    while i <= math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            if prime_factors[i] == nil then\n\
    \                prime_factors[i] = i\n            else\n                prime_factors[i]\
    \ = prime_factors[i] * i\n            end\n        end\n        i = i + 1\n  \
    \  end\n    return prime_factors[n]\nend", "    local prime_factors = {}\n   \
    \ for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            prime_factors[i]\
    \ = prime_factors[i] or i\n            prime_factors[n / i] = prime_factors[n\
    \ / i] or i\n        end\n    end\n    return math.max(prime_factors)\nend", " \
    \   local factors = {}\n    for i = 2, math.sqrt(n) do\n        if n % i == 0\
    \ then\n            factors[i] = true\n            n = n / i\n            if n\
    \ == 1 then\n                return i\n        end\n    end\n    return nil\n\
    end", "    local prime_factors = {}\n    for i = 2, math.sqrt(n) do\n        if\
    \ n % i == 0 then\n            prime_factors[i] = true\n            n = n / i\n\
    \        end\n    end\n    for i = 2, math.sqrt(n) do\n        if prime_factors[i]\
    \ == true then\n            return i\n        end\n    end\nend", "    local factors\
    \ = {}\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n         \
    \   factors[i] = true\n            factors[n/i] = true\n        end\n    end\n\
    \    for k, v in pairs(factors) do\n        if v == true then\n            return\
    \ k\n        end\n    end\n    return n\nend", "    local max = math.sqrt(n)\n\
    \    for i = 2, max do\n        if n % i == 0 then\n            return i\n   \
    \     end\n    end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
