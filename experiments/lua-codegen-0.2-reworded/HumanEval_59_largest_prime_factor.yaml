name: HumanEval_59_largest_prime_factor
language: lua
prompt: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n--\
  \ 2\nlocal function largest_prime_factor(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
  \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
  \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
  \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local factors = {}\n    for i = 2, math.sqrt(n) do\n        if\
    \ n % i == 0 then\n            factors[i] = factors[i] or i\n            factors[n\
    \ / i] = i\n        end\n    end\n    return factors[n] or 1\nend", "    local\
    \ prime_factors = {}\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n\
    \            prime_factors[i] = true\n            n = n / i\n        end\n   \
    \ end\n    if n > 1 then\n        prime_factors[n] = true\n    end\n    return\
    \ math.max(prime_factors, key=function(k) return prime_factors[k] end)\nend",
  "    local factors = {}\n    for i = 2, math.sqrt(n) + 1, 1 do\n        if n % i\
    \ == 0 then\n            table.insert(factors, i)\n            table.insert(factors,\
    \ n / i)\n        end\n    end\n    return table.maxn(factors)\nend", "    local\
    \ factors = {}\n    for i = 2, math.sqrt(n) + 1 do\n        if n % i == 0 then\n\
    \            factors[i] = factors[i] or i\n            factors[n / i] = i\n  \
    \      end\n    end\n    return factors[n]\nend", "    local factors = {}\n  \
    \  for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            table.insert(factors, n / i)\n            break\n        end\n\
    \    end\n    return table.max(factors)\nend", "    local max = math.sqrt(n)\n\
    \    for i = 2, max do\n        if n % i == 0 then\n            return i\n   \
    \     end\n    end\n    return n\nend", "    local factors = {}\n    for i = 2,\
    \ math.sqrt(n) do\n        if n % i == 0 then\n            factors[i] = true\n\
    \            factors[n/i] = true\n            break\n        end\n    end\n  \
    \  for k, v in pairs(factors) do\n        if v then\n            return k\n  \
    \      end\n    end\n    return n\nend", "    local prime_factors = {}\n    for\
    \ i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            prime_factors[i]\
    \ = prime_factors[i] or i\n            prime_factors[n / i] = prime_factors[n\
    \ / i] or i\n        end\n    end\n    return math.max(prime_factors)\nend", " \
    \   local factors = {}\n    for i = 2, math.sqrt(n) do\n        if n % i == 0\
    \ then\n            if not factors[i] then factors[i] = 1 else factors[i] = factors[i]\
    \ + 1\n            n = n / i\n        end\n    end\n    if not n then return factors[2]\n\
    \    return factors[n]\nend", "    local factors = {}\n    for i = 2, math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            table.insert(factors, i)\n     \
    \       table.insert(factors, n / i)\n        end\n    end\n    return table.max(factors)\n\
    end", "    local factors = {}\n    for i = 2, math.sqrt(n) do\n        if n %\
    \ i == 0 then\n            factors[i] = true\n            n = n / i\n        \
    \    if n == 1 then\n                return i\n            end\n        end\n\
    \    end\n    return nil\nend", "    local prime_factors = {}\n    for i = 2,\
    \ math.sqrt(n) do\n        if n % i == 0 then\n            prime_factors[i] =\
    \ prime_factors[i] or i\n            prime_factors[n / i] = prime_factors[n /\
    \ i] or i\n        end\n    end\n    return math.max(prime_factors)\nend", " \
    \   local factors = {}\n    for i = 2, math.sqrt(n) do\n        if n % i == 0\
    \ then\n            factors[i] = factors[i] or i\n            factors[n / i] =\
    \ i\n        end\n    end\n    return factors[n]\nend", "    local prime_factors\
    \ = {}\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n         \
    \   prime_factors[i] = true\n            n = n / i\n        end\n    end\n   \
    \ if n > 1 then\n        prime_factors[n] = true\n    end\n    return table.max(prime_factors)\n\
    end", "    local prime_factors = {}\n    local i = 2\n    while i <= math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            if prime_factors[i] == nil then\n\
    \                prime_factors[i] = i\n            else\n                prime_factors[i]\
    \ = prime_factors[i] * i\n            end\n        end\n        i = i + 1\n  \
    \  end\n    return prime_factors[n]\nend", "    local prime_factors = {}\n   \
    \ for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            prime_factors[i]\
    \ = prime_factors[i] or i\n            prime_factors[n / i] = prime_factors[n\
    \ / i] or i\n        end\n    end\n    return math.max(prime_factors)\nend", " \
    \   local factors = {}\n    for i = 2, math.sqrt(n) do\n        if n % i == 0\
    \ then\n            factors[i] = true\n            n = n / i\n            if n\
    \ == 1 then\n                return i\n        end\n    end\n    return nil\n\
    end", "    local prime_factors = {}\n    for i = 2, math.sqrt(n) do\n        if\
    \ n % i == 0 then\n            prime_factors[i] = true\n            n = n / i\n\
    \        end\n    end\n    for i = 2, math.sqrt(n) do\n        if prime_factors[i]\
    \ == true then\n            return i\n        end\n    end\nend", "    local factors\
    \ = {}\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n         \
    \   factors[i] = true\n            factors[n/i] = true\n        end\n    end\n\
    \    for k, v in pairs(factors) do\n        if v == true then\n            return\
    \ k\n        end\n    end\n    return n\nend", "    local max = math.sqrt(n)\n\
    \    for i = 2, max do\n        if n % i == 0 then\n            return i\n   \
    \     end\n    end\nend", "    local prime_factors = {}\n    for i = 2, math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            prime_factors[i] = prime_factors[i]\
    \ or i\n            prime_factors[n / i] = prime_factors[n / i] or i\n       \
    \ end\n    end\n    return prime_factors[n]\nend", "    local i, p\n    for i\
    \ = 2, math.sqrt(n) do\n        p = math.mod(n, i)\n        if p == 0 then\n \
    \           return i\n        end\n    end\nend", "    local max = math.sqrt(n)\n\
    \    for i = 2, max do\n        if n % i == 0 then\n            return i\n   \
    \     end\n    end\nend", "    local factors = {}\n    for i = 2, math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            factors[i] = factors[i] or i\n \
    \           factors[n/i] = i\n        end\n    end\n    return factors[n]\nend",
  "    local factors = {}\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n\
    \            table.insert(factors, i)\n            n = n / i\n        end\n  \
    \  end\n    if n > 1 then\n        table.insert(factors, n)\n    end\n    return\
    \ table.max(factors)\nend", "    local factors = {}\n    for i = 2, math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            factors[i] = factors[i] or i\n \
    \           factors[n/i] = factors[n/i] or i\n        end\n    end\n    return\
    \ factors[n]\nend", "    local p = math.sqrt(n)\n    local i = 2\n    while i\
    \ <= p do\n        if n % i == 0 then\n            return i\n        end\n   \
    \     i = i + 1\n    end\n    return n\nend", "    local i, j, k, d, p\n    for\
    \ i = 2, math.sqrt(n) do\n        for j = 2, i do\n            if n % j == 0 then\n\
    \                p = j\n                k = i\n                d = 0\n       \
    \         while n % j == 0 do\n                    d = d + 1\n               \
    \     n = n / j\n                end\n                if d > 1 then\n        \
    \            p = p * k\n                    d = d - 1\n                end\n \
    \           end\n        end\n    end\n    return p, d\nend", "    local prime_factors\
    \ = {}\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n         \
    \   prime_factors[i] = true\n            n = n / i\n        end\n    end\n   \
    \ for i = 2, math.sqrt(n) do\n        if prime_factors[i] == false then\n    \
    \        return i\n        end\n    end\nend", "    local max = math.sqrt(n)\n\
    \    for i = 2, max do\n        if n % i == 0 then\n            return i\n   \
    \     end\n    end\nend", "    local factors = {}\n    for i = 2, math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            factors[i] = factors[i] or i\n \
    \           factors[n/i] = factors[n/i] or i\n        end\n    end\n    return\
    \ factors[n]\nend", "    local prime_factors = {}\n    for i = 2, math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            prime_factors[i] = true\n      \
    \      n = n / i\n        end\n    end\n    return math.max(prime_factors)\nend",
  "    local factors = {}\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n\
    \            factors[i] = factors[i] or 1\n            factors[n/i] = factors[n/i]\
    \ or i\n        end\n    end\n    return factors[n]\nend", "    local i, j, k,\
    \ p, q, r\n    for i = 2, math.sqrt(n) do\n        for j = 2, i do\n         \
    \   if n % j == 0 then\n                p = j\n                q = n / j\n   \
    \             r = math.floor(math.sqrt(q))\n                if r == math.floor(r)\
    \ and r * r == q then\n                    return p\n                end\n   \
    \         end\n        end\n    end\n    return n\nend", "    local factors =\
    \ math.sqrt(n)\n    for i = 2, factors do\n        if n % i == 0 then\n      \
    \      return i\n        end\n    end\nend", "    local i, j, k, m, p\n    i =\
    \ math.sqrt(n)\n    for j = 2, i do\n        if n % j == 0 then\n            p\
    \ = j\n            k = 1\n            while n % j == 0 then\n                n\
    \ = n / j\n                k = k + 1\n            end\n            if k > 1 then\n\
    \                return p * k\n            end\n        end\n    end\n    return\
    \ n\nend", "    local factors = math.sqrt(n)\n    for i = 2, factors do\n    \
    \    if n % i == 0 then\n            return i\n        end\n    end\n    return\
    \ n\nend", "    local factors = {}\n    for i = 2, math.sqrt(n) + 1 do\n     \
    \   if n % i == 0 then\n            table.insert(factors, i)\n            table.insert(factors,\
    \ n / i)\n        end\n    end\n    return table.max(factors)\nend", "    local\
    \ factors = {}\n    for i = 2, math.sqrt(n) + 1 do\n        if n % i == 0 then\n\
    \            factors[i] = factors[i] or i\n            factors[n / i] = i\n  \
    \      end\n    end\n    return factors[n]\nend", "    local factors = {}\n  \
    \  for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            table.insert(factors, n / i)\n        end\n    end\n    return\
    \ table.max(factors)\nend", "    local factors = {}\n    for i = 2, math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            table.insert(factors, i)\n     \
    \       n = n / i\n        end\n    end\n    if n > 1 then\n        table.insert(factors,\
    \ n)\n    end\n    return table.max(factors)\nend", "    local max = math.sqrt(n)\n\
    \    for i = 2, max do\n        if n % i == 0 then\n            return i\n   \
    \     end\n    end\nend", "    local factors = {}\n    for i = 2, math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            factors[i] = factors[i] or 1\n \
    \           factors[n/i] = factors[n/i] or i\n        end\n    end\n    return\
    \ factors[n]\nend", "    local factors = {}\n    for i = 2, math.sqrt(n) do\n\
    \        if n % i == 0 then\n            table.insert(factors, i)\n          \
    \  table.insert(factors, n / i)\n        end\n    end\n    return table.max(factors)\n\
    end", "    local i, p\n    for i = math.sqrt(n) + 1, 2, 1 do\n        p = math.floor(n\
    \ / i)\n        if p == math.floor(p) and p > 1 and math.mod(n, p) == 0 then\n\
    \            return p\n        end\n    end\nend", "    local factors = {}\n \
    \   for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            factors[i]\
    \ = factors[i] or 1\n            factors[i] = factors[i] + 1\n            n =\
    \ n / i\n        end\n    end\n    return factors[n]\nend", "    local prime_factors\
    \ = {}\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n         \
    \   prime_factors[i] = true\n            n = n / i\n        end\n    end\n   \
    \ if n > 1 then\n        prime_factors[n] = true\n    end\n    return math.max(prime_factors)\n\
    end", "    local max = math.sqrt(n)\n    for i = 2, max do\n        if n % i ==\
    \ 0 then\n            return i\n        end\n    end\nend", "    local prime_factors\
    \ = {}\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n         \
    \   prime_factors[i] = true\n            n = n / i\n        end\n    end\n   \
    \ if n > 1 then\n        prime_factors[n] = true\n    end\n    return math.max(prime_factors)\n\
    end", "    local factors = {}\n    for i = 2, math.sqrt(n) do\n        if n %\
    \ i == 0 then\n            factors[i] = factors[i] or 1\n            factors[n/i]\
    \ = factors[n/i] or i\n        end\n    end\n    return factors[n]\nend", "  \
    \  local factors = {}\n    for i = 2, math.sqrt(n) + 1 do\n        if n % i ==\
    \ 0 then\n            factors[i] = factors[i] or i\n            factors[n / i]\
    \ = i\n        end\n    end\n    return factors[n]\nend", "    local i, p = 2,\
    \ 1\n    while i < math.sqrt(n) do\n        if n % i == 0 then\n            p\
    \ = i\n            break\n        end\n        i = i + 1\n    end\n    return\
    \ p\nend", "    local prime_factors = {}\n    for i = 2, math.sqrt(n) do\n   \
    \     if n % i == 0 then\n            prime_factors[i] = true\n            n =\
    \ n / i\n        end\n    end\n    if n > 1 then\n        prime_factors[n] = true\n\
    \    end\n    return math.max(prime_factors, key=function(k) return prime_factors[k]\
    \ end)\nend", "    local factors = {}\n    for i = 2, math.sqrt(n) + 1 do\n  \
    \      if n % i == 0 then\n            factors[i] = factors[i] or i\n        \
    \    factors[n / i] = i\n        end\n    end\n    return factors[n]\nend", " \
    \   local factors = {}\n    for i = 2, math.sqrt(n) do\n        if n % i == 0\
    \ then\n            factors[i] = true\n            n = n / i\n        end\n  \
    \  end\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n         \
    \   factors[i] = true\n            n = n / i\n        end\n    end\n    for i\
    \ = 2, math.sqrt(n) do\n        if n % i == 0 then\n            factors[i] = true\n\
    \            n = n / i\n        end\n    end\n    for i = 2, math.sqrt(n) do\n\
    \        if n % i == 0 then\n            factors[i] = true\n            n = n\
    \ / i\n        end\n    end\n    for i = 2, math.sqrt(n) do\n        if n % i\
    \ == 0 then\n            factors[i] = true\n            n = n / i\n        end\n\
    \    end\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n       \
    \     factors[i] = true\n            n = n / i\n        end\n    end\n    for\
    \ i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            factors[i] =\
    \ true\n            n = n / i\n        end\n    end\n    for i = 2, math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            factors[i] = true\n            n\
    \ = n / i\n        end\n    end\n    for i = 2, math.sqrt(n) do\n        if n\
    \ % i == 0 then\n            factors[i] = true\n            n = n / i\n      \
    \  end\n    end\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n\
    \            factors[i] = true\n            n = n / i\n        end\n    end\n\
    \    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            factors[i]\
    \ = true\n            n = n / i\n        end\n    end\n", "    local factors =\
    \ {}\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n           \
    \ factors[i] = factors[i] or i\n            factors[n/i] = i\n        end\n  \
    \  end\n    return factors[n]\nend", "    local max = math.sqrt(n)\n    for i\
    \ = 2, max do\n        if n % i == 0 then\n            return i\n        end\n\
    \    end\nend", "    local prime_factors = {}\n    for i = 2, math.sqrt(n) do\n\
    \        if n % i == 0 then\n            prime_factors[i] = true\n           \
    \ n = n / i\n        end\n    end\n    if n > 1 then\n        prime_factors[n]\
    \ = true\n    end\n    return math.max(prime_factors, key = function(k) return\
    \ prime_factors[k] end)\nend", "    local p = math.sqrt(n)\n    local i = 2\n\
    \    while i <= p do\n        if n % i == 0 then\n            return i\n     \
    \   end\n        i = i + 1\n    end\n    return n\nend", "    local prime_factors\
    \ = {}\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n         \
    \   prime_factors[i] = true\n            n = n / i\n        end\n    end\n   \
    \ for i = 2, math.sqrt(n) do\n        if prime_factors[i] == false then\n    \
    \        return i\n        end\n    end\nend", "    local prime_factors = {}\n\
    \    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            prime_factors[i]\
    \ = true\n            n = n / i\n        end\n    end\n    for i = 2, math.sqrt(n)\
    \ do\n        if prime_factors[i] == true then\n            prime_factors[i] =\
    \ true\n            n = n / i\n        end\n    end\n    return math.max(prime_factors)\n\
    end", "    local factors = {}\n    for i = 2, math.sqrt(n) do\n        if n %\
    \ i == 0 then\n            factors[i] = factors[i] or i\n            factors[n/i]\
    \ = factors[n/i] or i\n        end\n    end\n    return factors[n]\nend", "  \
    \  local max = math.sqrt(n)\n    for i = 2, max do\n        if n % i == 0 then\n\
    \            return i\n        end\n    end\n    return n\nend", "    local factors\
    \ = {}\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n         \
    \   factors[i] = true\n            n = n / i\n            if n == 1 then\n   \
    \             return i\n        end\n    end\n    return n\nend", "    local prime_factors\
    \ = {}\n    local i = 2\n    while i <= math.sqrt(n) do\n        if n % i == 0\
    \ then\n            prime_factors[i] = true\n            n = n / i\n        end\n\
    \        i = i + 1\n    end\n    if n > 1 then\n        prime_factors[n] = true\n\
    \    end\n    return math.max(prime_factors)\nend", "    local factors = math.sqrt(n)\n\
    \    for i = 2, factors do\n        if n % i == 0 then\n            return i\n\
    \        end\n    end\nend", "    local factors = math.sqrt(n)\n    for i = 2,\
    \ factors do\n        if n % i == 0 then\n            return i\n        end\n\
    \    end\nend", "    local i, j, k, p\n    for i = 2, math.sqrt(n) do\n      \
    \  for j = 2, i do\n            if n % j == 0 then\n                p = j\n  \
    \              k = i\n                break\n            end\n        end\n  \
    \      if p ~= nil then\n            break\n        end\n    end\n    return p\n\
    end", "    local factors = {}\n    for i = 2, math.sqrt(n) do\n        if n %\
    \ i == 0 then\n            table.insert(factors, i)\n            table.insert(factors,\
    \ n / i)\n        end\n    end\n    return table.max(factors)\nend", "    local\
    \ factors = {}\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n \
    \           factors[i] = factors[i] or 1\n            factors[n / i] = factors[n\
    \ / i] or i\n        end\n    end\n    return factors[n]\nend", "    local factors\
    \ = {}\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n         \
    \   if not factors[i] then factors[i] = i else factors[i] = factors[i] * i end\n\
    \            if not factors[n / i] then factors[n / i] = i else factors[n / i]\
    \ = factors[n / i] * i end\n        end\n    end\n    return factors[n]\nend",
  "    local factors = {}\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n\
    \            factors[i] = factors[i] or i\n            factors[n/i] = factors[n/i]\
    \ or i\n        end\n    end\n    return factors[n]\nend", "    local i, j, k\n\
    \    for i = 2, math.sqrt(n) do\n        for j = 2, i do\n            if n % j\
    \ == 0 then\n                k = j\n                break\n            end\n \
    \       end\n        if k then\n            return k\n        end\n    end\n \
    \   return n\nend", "    local factors = {}\n    for i = 2, math.sqrt(n) + 1 do\n\
    \        if n % i == 0 then\n            factors[i] = factors[i] or i\n      \
    \      factors[n/i] = i\n        end\n    end\n    return factors[n]\nend", " \
    \   local factors = {}\n    for i = 2, math.sqrt(n) do\n        if n % i == 0\
    \ then\n            factors[i] = factors[i] or i\n            factors[n/i] = factors[n/i]\
    \ or i\n        end\n    end\n    return factors[n]\nend", "    local prime_factors\
    \ = {}\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n         \
    \   prime_factors[i] = true\n            n = n / i\n        end\n    end\n   \
    \ if n > 1 then\n        prime_factors[n] = true\n    end\n    return math.max(prime_factors,\
    \ key=function(k) return prime_factors[k] end)\nend", "    local factors = {}\n\
    \    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            factors[i]\
    \ = factors[i] or i\n            factors[n/i] = factors[n/i] or i\n        end\n\
    \    end\n    return factors[n]\nend", "    local factors = {}\n    for i = 2,\
    \ math.sqrt(n) do\n        if n % i == 0 then\n            factors[i] = factors[i]\
    \ or i\n            factors[n / i] = i\n        end\n    end\n    return factors[n]\n\
    end", "    local max = math.sqrt(n)\n    for i = 2, max do\n        if n % i ==\
    \ 0 then\n            return i\n        end\n    end\nend", "    local max = math.sqrt(n)\n\
    \    local i = 2\n    while i <= max do\n        if n % i == 0 then\n        \
    \    return i\n        end\n        i = i + 1\n    end\nend", "    local factors\
    \ = {}\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n         \
    \   table.insert(factors, i)\n            table.insert(factors, n / i)\n     \
    \   end\n    end\n    return table.max(factors)\nend", "    local factors = {}\n\
    \    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            factors[i]\
    \ = factors[i] or i\n            factors[n/i] = i\n        end\n    end\n    return\
    \ factors[n]\nend", "    local max = math.sqrt(n)\n    for i = 2, max, math.sqrt(i)\
    \ do\n        if n % i == 0 then\n            return i\n        end\n    end\n\
    end", "    local factors = {}\n    for i = 2, math.sqrt(n) do\n        if n %\
    \ i == 0 then\n            table.insert(factors, i)\n            n = n / i\n \
    \       end\n    end\n    if n > 1 then\n        table.insert(factors, n)\n  \
    \  end\n    return table.max(factors)\nend", "    local factors = {}\n    for\
    \ i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            factors[i] =\
    \ factors[i] or i\n            factors[n / i] = i\n        end\n    end\n    return\
    \ factors[n]\nend", "    local prime_factors = {}\n    for i = 2, math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            prime_factors[i] = true\n      \
    \      n = n / i\n        end\n    end\n    if n > 1 then\n        prime_factors[n]\
    \ = true\n    end\n    return math.max(prime_factors, key=function(k) return prime_factors[k]\
    \ end)\nend", "    local p = math.sqrt(n)\n    for i = 2, p do\n        if n %\
    \ i == 0 then\n            return i\n        end\n    end\nend", "    local factors\
    \ = {}\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n         \
    \   factors[i] = factors[i] or i\n            factors[n / i] = i\n        end\n\
    \    end\n    return factors[n]\nend", "    local factors = {}\n    for i = 2,\
    \ math.sqrt(n) do\n        if n % i == 0 then\n            if not factors[i] then\n\
    \                factors[i] = i\n            else\n                factors[i]\
    \ = factors[i] * i\n            end\n        end\n    end\n    return factors[n]\n\
    end", "    local prime_factors = {}\n    for i = 2, math.sqrt(n) do\n        if\
    \ n % i == 0 then\n            prime_factors[i] = true\n            n = n / i\n\
    \        end\n    end\n    if n > 1 then\n        prime_factors[n] = true\n  \
    \  end\n    return table.concat(prime_factors, \"\")\nend", "    local factors\
    \ = {}\n    for i = 2, math.sqrt(n) + 1 do\n        if n % i == 0 then\n     \
    \       factors[i] = true\n            n = n / i\n            if n == 1 then\n\
    \                return i\n        end\n    end\n    return nil\nend", "    local\
    \ prime_factors = {}\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n\
    \            prime_factors[i] = true\n            n = n / i\n        end\n   \
    \ end\n    if n > 1 then\n        prime_factors[n] = true\n    end\n    return\
    \ table.concat(prime_factors, \"\")\nend", "    local max = math.sqrt(n)\n   \
    \ for i = 2, max do\n        if n % i == 0 then\n            return i\n      \
    \  end\n    end\n    return n\nend", "    local factors = {}\n    for i = 2, math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            if not factors[i] then\n       \
    \         factors[i] = i\n            else\n                factors[i] = factors[i]\
    \ * i\n            end\n        end\n    end\n    return factors[n]\nend", " \
    \   local prime_factors = {}\n    local i = 2\n    while i <= math.sqrt(n) do\n\
    \        if n % i == 0 then\n            prime_factors[i] = prime_factors[i] or\
    \ 1\n            prime_factors[n / i] = prime_factors[n / i] or i\n        end\n\
    \        i = i + 1\n    end\n    return prime_factors[n]\nend", "    local factors\
    \ = {}\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n         \
    \   factors[i] = factors[i] or i\n            factors[n / i] = i\n        end\n\
    \    end\n    return factors[n]\nend", "    local factors = {}\n    for i = 2,\
    \ math.sqrt(n) + 1 do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    if n > 1 then\n       \
    \ table.insert(factors, n)\n    end\n    return table.max(factors)\nend", "  \
    \  local factors = math.factors(n)\n    local max_factor = 1\n    for i=1,#factors,1\
    \ do\n        if factors[i] > max_factor then\n            max_factor = factors[i]\n\
    \        end\n    end\n    return max_factor\nend", "    local factors = {}\n\
    \    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            factors[i]\
    \ = factors[i] or 1\n            factors[n/i] = factors[n/i] or i\n        end\n\
    \    end\n    return factors[n]\nend", "    local factors = {}\n    for i = 2,\
    \ math.sqrt(n) do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            table.insert(factors, n/i)\n        end\n    end\n    return\
    \ table.max(factors)\nend", "    local factors = {}\n    for i = 2, math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            factors[i] = factors[i] or i\n \
    \           factors[n / i] = i\n        end\n    end\n    return factors[n]\n\
    end", "    local factors = {}\n    for i = 2, math.sqrt(n) do\n        if n %\
    \ i == 0 then\n            factors[i] = factors[i] or 1\n            factors[n/i]\
    \ = factors[n/i] or i\n        end\n    end\n    return factors[n]\nend", "  \
    \  local max = math.sqrt(n)\n    for i = 2, max do\n        if n % i == 0 then\n\
    \            return i\n        end\n    end\nend", "    local factors = {}\n \
    \   for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            factors[i]\
    \ = true\n            n = n / i\n        end\n    end\n    if n > 1 then\n   \
    \     factors[n] = true\n    end\n    return factors\nend", "    local prime_factors\
    \ = {}\n    local i = 2\n    while i <= math.sqrt(n) do\n        if n % i == 0\
    \ then\n            prime_factors[i] = true\n            n = n / i\n        end\n\
    \        i = i + 1\n    end\n    if n > 1 then prime_factors[n] = true end\n \
    \   return math.max(prime_factors)\nend", "    local max = math.sqrt(n)\n    for\
    \ i = 2, max do\n        if n % i == 0 then\n            return i\n        end\n\
    \    end\nend", "    local prime_factors = {}\n    for i = 2, math.sqrt(n) do\n\
    \        if n % i == 0 then\n            prime_factors[i] = prime_factors[i] or\
    \ i\n            prime_factors[n / i] = prime_factors[n / i] or i\n        end\n\
    \    end\n    return prime_factors[n]\nend", "    local prime_factors = {}\n \
    \   for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            prime_factors[i]\
    \ = true\n            n = n / i\n        end\n    end\n    if n > 1 then\n   \
    \     prime_factors[n] = true\n    end\n    return math.max(prime_factors)\nend",
  "    local factors = {}\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n\
    \            factors[i] = factors[i] or i\n            factors[n / i] = i\n  \
    \      end\n    end\n    return factors[n]\nend", "    local max = math.sqrt(n)\n\
    \    for i = 2, max do\n        if n % i == 0 then\n            return i\n   \
    \     end\n    end\nend", "    local prime_factors = {}\n    local i = 2\n   \
    \ while i <= math.sqrt(n) do\n        if n % i == 0 then\n            prime_factors[i]\
    \ = true\n            n = n / i\n        end\n        i = i + 1\n    end\n   \
    \ if n > 1 then prime_factors[n] = true end\n    return math.max(prime_factors)\n\
    end", "    local factors = {}\n    for i = 2, math.sqrt(n) do\n        if n %\
    \ i == 0 then\n            if not factors[i] then\n                factors[i]\
    \ = i\n            else\n                factors[i] = factors[i] * i\n       \
    \     end\n        end\n    end\n    return factors[n]\nend", "    local factors\
    \ = {}\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n         \
    \   if not factors[i] then\n                factors[i] = i\n            else\n\
    \                factors[i] = factors[i] * i\n            end\n        end\n \
    \   end\n    return factors[n]\nend", "    local i, j, k, p\n    for i = 2, math.sqrt(n)\
    \ do\n        for j = 2, i do\n            if n % j == 0 then\n              \
    \  p = j\n                k = i\n                break\n            end\n    \
    \    end\n        if p then\n            break\n        end\n    end\n    return\
    \ p\nend", "    local factors = {}\n    for i = 2, math.sqrt(n) do\n        if\
    \ n % i == 0 then\n            factors[i] = true\n            n = n / i\n    \
    \    end\n    end\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n\
    \            factors[i] = true\n            n = n / i\n        end\n    end\n\
    \    return math.max(factors)\nend", "    local factors = {}\n    for i = 2, math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            if not factors[i] then factors[i]\
    \ = i\n            else factors[i] = factors[i] * i\n        end\n    end\n  \
    \  return factors[n]\nend", "    local max = math.sqrt(n)\n    for i = 2, max\
    \ do\n        if n % i == 0 then\n            return i\n        end\n    end\n\
    end", "    local prime_factors = {}\n    for i = 2, math.sqrt(n) do\n        if\
    \ n % i == 0 then\n            prime_factors[i] = true\n            n = n / i\n\
    \        end\n    end\n    if n > 1 then\n        prime_factors[n] = true\n  \
    \  end\n    return math.max(prime_factors)\nend", "    local factors = {}\n  \
    \  for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            factors[i]\
    \ = true\n            factors[n/i] = true\n        end\n    end\n    for k, v\
    \ in pairs(factors) do\n        if v then\n            return k\n        end\n\
    \    end\n    return n\nend", "    local prime_factors = {}\n    for i = 2, math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            prime_factors[i] = prime_factors[i]\
    \ or i\n            prime_factors[n/i] = prime_factors[n/i] or i\n        end\n\
    \    end\n    return math.max(prime_factors)\nend", "    local max = math.sqrt(n)\n\
    \    for i = 2, max do\n        if n % i == 0 then\n            return i\n   \
    \     end\n    end\nend", "    local factors = {}\n    for i = 2, math.sqrt(n)\
    \ + 1 do\n        if n % i == 0 then\n            factors[i] = factors[i] or i\n\
    \            factors[n / i] = i\n        end\n    end\n    return factors[n] or\
    \ 1\nend", "    local factors = {}\n    for i = 2, math.sqrt(n) do\n        if\
    \ n % i == 0 then\n            factors[i] = factors[i] or i\n            factors[n/i]\
    \ = i\n        end\n    end\n    return factors[n]\nend", "    local factors =\
    \ {}\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n           \
    \ factors[i] = factors[i] or i\n            factors[n / i] = i\n        end\n\
    \    end\n    return factors[n]\nend", "    local p = math.sqrt(n)\n    for i\
    \ = 2, p do\n        if n % i == 0 then\n            return i\n        end\n \
    \   end\nend", "    local prime_factors = {}\n    for i = 2, math.sqrt(n) do\n\
    \        if n % i == 0 then\n            prime_factors[i] = true\n           \
    \ n = n / i\n        end\n    end\n    if n > 1 then\n        prime_factors[n]\
    \ = true\n    end\n    return math.max(prime_factors, function(k) return prime_factors[k]\
    \ end)\nend", "    local max = math.sqrt(n)\n    for i = 2, max do\n        if\
    \ n % i == 0 then\n            return i\n        end\n    end\nend", "    local\
    \ prime_factors = {}\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n\
    \            prime_factors[i] = true\n            n = n / i\n        end\n   \
    \ end\n    for i = 2, math.sqrt(n) do\n        if prime_factors[i] == false then\n\
    \            return i\n        end\n    end\nend", "    local factors = {}\n \
    \   for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            factors[i]\
    \ = factors[i] or i\n            factors[n / i] = factors[n / i] or i\n      \
    \  end\n    end\n    return factors[n] or 1\nend", "    local factors = {}\n \
    \   for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    table.insert(factors, n)\n\
    \    return table.max(factors)\nend", "    local prime_factors = {}\n    local\
    \ i = 2\n    while i <= math.sqrt(n) do\n        if n % i == 0 then\n        \
    \    prime_factors[i] = prime_factors[i] or 1\n            prime_factors[n/i]\
    \ = prime_factors[n/i] or i\n        end\n        i = i + 1\n    end\n    return\
    \ math.max(prime_factors)\nend", "    local prime_factors = {}\n    for i = 2,\
    \ math.sqrt(n) do\n        if n % i == 0 then\n            prime_factors[i] =\
    \ true\n            n = n / i\n        end\n    end\n    if n > 1 then\n     \
    \   prime_factors[n] = true\n    end\n    return table.concat(prime_factors, ',')\n\
    end", "    local max = math.sqrt(n)\n    local i = 2\n    while i <= max do\n\
    \        if n % i == 0 then\n            return i\n        end\n        i = i\
    \ + 1\n    end\nend", "    local max = math.sqrt(n)\n    for i = 2, max do\n \
    \       if n % i == 0 then\n            return i\n        end\n    end\nend",
  "    local factors = {}\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n\
    \            factors[i] = factors[i] or 1\n            factors[n/i] = factors[n/i]\
    \ or i\n        end\n    end\n    return factors[n]\nend", "    local factors\
    \ = math.sqrt(n)\n    for i = 2, factors do\n        if n % i == 0 then\n    \
    \        return i\n        end\n    end\nend", "    local factors = {}\n    for\
    \ i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            table.insert(factors, n / i)\n        end\n    end\n    return\
    \ table.max(factors)\nend", "    local i, j, k, p, q\n    for i = 2, math.sqrt(n)\
    \ do\n        for j = 2, i do\n            if n % j == 0 then\n              \
    \  p = j\n                q = n / j\n                return p, q\n           \
    \ end\n        end\n    end\nend", "    local factors = {}\n    for i = 2, math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            factors[i] = true\n            n\
    \ = n / i\n        end\n    end\n    for i = 2, math.sqrt(n) do\n        if not\
    \ factors[i] then\n            factors[i] = true\n            n = n / i\n    \
    \    end\n    end\n    return n\nend", "    local factors = {}\n    for i = 2,\
    \ math.sqrt(n) do\n        if n % i == 0 then\n            factors[i] = factors[i]\
    \ or i\n            factors[n/i] = i\n        end\n    end\n    return factors[n]\n\
    end", "    local factors = {}\n    for i = 2, math.sqrt(n) do\n        if n %\
    \ i == 0 then\n            table.insert(factors, i)\n            n = n / i\n \
    \       end\n    end\n    table.insert(factors, n)\n    return table.max(factors)\n\
    end", "    local factors = math.sqrt(n)\n    for i = 2, factors do\n        if\
    \ n % i == 0 then\n            return i\n        end\n    end\nend", "    local\
    \ prime_factors = {}\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n\
    \            prime_factors[i] = true\n            n = n / i\n        end\n   \
    \ end\n    if n > 1 then\n        prime_factors[n] = true\n    end\n    return\
    \ math.max(prime_factors, key=function(k) return prime_factors[k] end)\nend",
  "    local factors = {}\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n\
    \            factors[i] = true\n            n = n / i\n            if n == 1 then\n\
    \                return i\n        end\n    end\n    return nil\nend", "    local\
    \ prime_factors = {}\n    local i = 2\n    while i <= math.sqrt(n) do\n      \
    \  if n % i == 0 then\n            prime_factors[i] = true\n            n = n\
    \ / i\n        end\n        i = i + 1\n    end\n    if n > 1 then\n        prime_factors[n]\
    \ = true\n    end\n    return table.max(prime_factors)\nend", "    local factors\
    \ = {}\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n         \
    \   factors[i] = factors[i] or i\n            factors[n/i] = i\n        end\n\
    \    end\n    return factors[n]\nend", "    local prime_factors = {}\n    for\
    \ i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            prime_factors[i]\
    \ = true\n            n = n / i\n        end\n    end\n    for i = 2, math.sqrt(n)\
    \ do\n        if prime_factors[i] == false then\n            return i\n      \
    \  end\n    end\nend", "    local factors = {}\n    for i = 2, math.sqrt(n) do\n\
    \        if n % i == 0 then\n            factors[i] = factors[i] or i\n      \
    \      factors[n/i] = factors[n/i] or i\n        end\n    end\n    return factors[n]\n\
    end", "    local prime_factors = {}\n    local i = 2\n    while i <= math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            prime_factors[i] = prime_factors[i]\
    \ or 1\n            prime_factors[n/i] = prime_factors[n/i] or i\n        end\n\
    \        i = i + 1\n    end\n    return prime_factors[n]\nend", "    local factors\
    \ = {}\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n         \
    \   table.insert(factors, i)\n            table.insert(factors, n / i)\n     \
    \   end\n    end\n    return table.max(factors)\nend", "    local factors = {}\n\
    \    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            factors[i]\
    \ = factors[i] or i\n            factors[n/i] = i\n        end\n    end\n    return\
    \ factors[n]\nend", "    local prime_factors = {}\n    for i = 2, math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            prime_factors[i] = true\n      \
    \      n = n / i\n        end\n    end\n    if n > 1 then\n        prime_factors[n]\
    \ = true\n    end\n    return math.max(prime_factors)\nend", "    local max =\
    \ math.sqrt(n)\n    for i = 2, max do\n        if n % i == 0 then\n          \
    \  return i\n        end\n    end\nend", "    local factors = {}\n    for i =\
    \ 2, math.sqrt(n) do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            table.insert(factors, n / i)\n        end\n    end\n    return\
    \ table.max(factors)\nend", "    local factors = {}\n    for i = 2, math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            if not factors[i] then\n       \
    \         factors[i] = i\n            else\n                factors[i] = factors[i]\
    \ * i\n            end\n        end\n    end\n    return factors[n]\nend", " \
    \   local factors = {}\n    for i = 2, math.sqrt(n) do\n        if n % i == 0\
    \ then\n            factors[i] = factors[i] or i\n            factors[n / i] =\
    \ i\n        end\n    end\n    return factors[n]\nend", "    local factors = {}\n\
    \    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    table.insert(factors, n)\n\
    \    return table.max(factors)\nend", "    local factors = {}\n    for i = 2,\
    \ math.sqrt(n) do\n        if n % i == 0 then\n            factors[i] = true\n\
    \            n = n / i\n        end\n    end\n    for i = 2, math.sqrt(n) do\n\
    \        if n % i == 0 then\n            factors[i] = true\n            n = n\
    \ / i\n        end\n    end\n    return math.max(factors, function(k) return factors[k]\
    \ end)\nend", "    local prime_factors = {}\n    for i = 2, math.sqrt(n) do\n\
    \        if n % i == 0 then\n            prime_factors[i] = prime_factors[i] or\
    \ i\n            prime_factors[n / i] = prime_factors[n / i] or i\n        end\n\
    \    end\n    return math.max(prime_factors)\nend", "    local max = math.sqrt(n)\n\
    \    for i = 2, max do\n        if n % i == 0 then\n            return i\n   \
    \     end\n    end\nend", "    local factors = {}\n    for i = 2, math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            factors[i] = factors[i] or i\n \
    \           factors[n/i] = i\n        end\n    end\n    return factors[n]\nend",
  "    local factors = {}\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n\
    \            table.insert(factors, i)\n            n = n / i\n        end\n  \
    \  end\n    if n > 1 then\n        table.insert(factors, n)\n    end\n    return\
    \ table.max(factors)\nend", "    local i, p\n    for i = math.sqrt(n) + 1, 2,\
    \ 1 do\n        p = math.floor(n / i)\n        if p == math.floor(p) and p > 1\
    \ and p < n then\n            return p\n        end\n    end\nend", "    local\
    \ prime_factors = {}\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n\
    \            prime_factors[i] = true\n            n = n / i\n        end\n   \
    \ end\n    if n > 1 then\n        prime_factors[n] = true\n    end\n    return\
    \ table.concat(prime_factors, ',')\nend", "    local factors = {}\n    for i =\
    \ 2, math.sqrt(n) do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            table.insert(factors, n / i)\n        end\n    end\n    return\
    \ table.max(factors)\nend", "    local factors = {}\n    for i = 2, math.sqrt(n)\
    \ + 1 do\n        if n % i == 0 then\n            table.insert(factors, i)\n \
    \           n = n / i\n        end\n    end\n    if n > 1 then\n        table.insert(factors,\
    \ n)\n    end\n    return table.max(factors)\nend", "    local prime_factors =\
    \ {}\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n           \
    \ prime_factors[i] = true\n            n = n / i\n        end\n    end\n    for\
    \ i = 2, math.sqrt(n) do\n        if prime_factors[i] == true then\n         \
    \   return i\n        end\n    end\nend", "    local factors = {}\n    for i =\
    \ 2, math.sqrt(n) do\n        if n % i == 0 then\n            factors[i] = true\n\
    \            n = n / i\n        end\n    end\n    return math.max(factors)\nend",
  "    local prime_factors = {}\n    for i = 2, math.sqrt(n) do\n        if n % i\
    \ == 0 then\n            prime_factors[i] = true\n            n = n / i\n    \
    \    end\n    end\n    if n > 1 then\n        prime_factors[n] = true\n    end\n\
    \    return math.max(prime_factors, key = function(x) return prime_factors[x]\
    \ end)\nend", "    local factors = {}\n    for i = 2, math.sqrt(n) do\n      \
    \  if n % i == 0 then\n            factors[i] = factors[i] or i\n            factors[n/i]\
    \ = i\n        end\n    end\n    return factors[n]\nend", "    local factors =\
    \ {}\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n           \
    \ factors[i] = factors[i] or i\n            factors[n / i] = i\n        end\n\
    \    end\n    return factors[n]\nend", "    local p = math.sqrt(n)\n    local\
    \ i = 2\n    while i <= p do\n        if n % i == 0 then\n            return i\n\
    \        end\n        i = i + 1\n    end\nend", "    local factors = {}\n    for\
    \ i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            factors[i] =\
    \ true\n            n = n / i\n        end\n    end\n    for i = 2, math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            factors[i] = true\n            n\
    \ = n / i\n        end\n    end\n    for i = 2, math.sqrt(n) do\n        if n\
    \ % i == 0 then\n            factors[i] = true\n            n = n / i\n      \
    \  end\n    end\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n\
    \            factors[i] = true\n            n = n / i\n        end\n    end\n\
    \    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            factors[i]\
    \ = true\n            n = n / i\n        end\n    end\n    for i = 2, math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            factors[i] = true\n            n\
    \ = n / i\n        end\n    end\n    for i = 2, math.sqrt(n) do\n        if n\
    \ % i == 0 then\n            factors[i] = true\n            n = n / i\n      \
    \  end\n    end\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n\
    \            factors[i] = true\n            n = n / i\n        end\n    end\n\
    \    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            factors[i]\
    \ = true\n            n = n / i\n        end\n    end\n    for i = 2, math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            factors[i] = true\n            n\
    \ = n / i\n        end\n    end\n    for i = 2, math.sqrt(n) do\n        if n\
    \ % i == 0 then\n            factors[i] = true\n            n = n / i\n      \
    \  end\n    end\n", "    local prime_factors = {}\n    for i = 2, math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            prime_factors[i] = true\n      \
    \      n = n / i\n        end\n    end\n    for i = 2, math.sqrt(n) do\n     \
    \   if prime_factors[i] == false then\n            prime_factors[i] = true\n \
    \           n = n / i\n        end\n    end\n    return math.max(prime_factors)\n\
    end", "    local prime_factors = {}\n    for i = 2, math.sqrt(n) do\n        if\
    \ n % i == 0 then\n            prime_factors[i] = true\n            n = n / i\n\
    \        end\n    end\n    if n > 1 then\n        prime_factors[n] = true\n  \
    \  end\n    return table.concat(prime_factors, \"\")\nend", "    local factors\
    \ = {}\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n         \
    \   table.insert(factors, i)\n            table.insert(factors, n / i)\n     \
    \   end\n    end\n    return table.max(factors)\nend", "    local factors = {}\n\
    \    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            factors[i]\
    \ = factors[i] or i\n            factors[n/i] = factors[n/i] or i\n        end\n\
    \    end\n    return factors[n]\nend", "    local factors = {}\n    for i = 2,\
    \ math.sqrt(n) + 1 do\n        if n % i == 0 then\n            factors[i] = factors[i]\
    \ or i\n            factors[n / i] = i\n        end\n    end\n    return factors[n]\n\
    end", "    local factors = {}\n    for i = 2, math.sqrt(n) do\n        if n %\
    \ i == 0 then\n            table.insert(factors, i)\n            table.insert(factors,\
    \ n / i)\n        end\n    end\n    return table.max(factors)\nend", "    local\
    \ max = math.sqrt(n)\n    for i = 2, max do\n        if n % i == 0 then\n    \
    \        return i\n        end\n    end\nend", "    local factors = {}\n    for\
    \ i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            factors[i] =\
    \ true\n            n = n / i\n        end\n    end\n    if n > 1 then\n     \
    \   factors[n] = true\n    end\n    return factors\nend", "    local i, j, k,\
    \ d\n    for i = 2, math.sqrt(n) do\n        for j = 2, i do\n            if n\
    \ % j == 0 then\n                d = j\n                k = i\n              \
    \  break\n            end\n        end\n        if d then\n            return\
    \ d, k\n        end\n    end\n    return n, 0\nend", "    local factors = {}\n\
    \    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            factors[i]\
    \ = factors[i] or 1\n            factors[n/i] = factors[n/i] or i\n        end\n\
    \    end\n    return factors[n]\nend", "    local factors = {}\n    for i = 2,\
    \ math.sqrt(n) + 1 do\n        if n % i == 0 then\n            factors[i] = factors[i]\
    \ or i\n            factors[n / i] = i\n        end\n    end\n    return factors[n]\n\
    end", "    local prime_factors = {}\n    for i = 2, math.sqrt(n) do\n        if\
    \ n % i == 0 then\n            prime_factors[i] = true\n            n = n / i\n\
    \        end\n    end\n    if n > 1 then\n        prime_factors[n] = true\n  \
    \  end\n    return math.max(prime_factors, key=function(k) return prime_factors[k]\
    \ end)\nend", "    local prime_factors = {}\n    for i = 2, math.sqrt(n) do\n\
    \        if n % i == 0 then\n            prime_factors[i] = true\n           \
    \ n = n / i\n        end\n    end\n    if n > 1 then\n        prime_factors[n]\
    \ = true\n    end\n    return math.max(prime_factors, key=function(k) return prime_factors[k]\
    \ end)\nend", "    local factors = {}\n    for i = 2, math.sqrt(n) do\n      \
    \  if n % i == 0 then\n            table.insert(factors, i)\n            n = n\
    \ / i\n            if n == 1 then\n                return table.max(factors)\n\
    \        end\n    end\n    return n\nend", "    local prime_factors = {}\n   \
    \ for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            prime_factors[i]\
    \ = prime_factors[i] or i\n            prime_factors[n / i] = prime_factors[n\
    \ / i] or i\n        end\n    end\n    return math.max(prime_factors, key=function(k)\
    \ return prime_factors[k] end)\nend", "    local factors = {}\n    for i = 2,\
    \ math.sqrt(n) do\n        if n % i == 0 then\n            factors[i] = factors[i]\
    \ or i\n            factors[n / i] = i\n        end\n    end\n    return factors[n]\
    \ or 1\nend", "    local max = math.sqrt(n)\n    for i = 2, max do\n        if\
    \ n % i == 0 then\n            return i\n        end\n    end\nend", "    local\
    \ prime_factors = {}\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n\
    \            prime_factors[i] = true\n            n = n / i\n        end\n   \
    \ end\n    if n > 1 then\n        prime_factors[n] = true\n    end\n    return\
    \ table.concat(prime_factors, \"\")\nend", "    local factors = {}\n    for i\
    \ = 2, math.sqrt(n) do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    if n > 1 then\n       \
    \ table.insert(factors, n)\n    end\n    return table.max(factors)\nend", "  \
    \  local prime_factors = {}\n    for i = 2, math.sqrt(n) do\n        if n % i\
    \ == 0 then\n            prime_factors[i] = prime_factors[i] or i\n          \
    \  prime_factors[n / i] = prime_factors[n / i] or i\n        end\n    end\n  \
    \  return prime_factors[n]\nend", "    local factors = {}\n    for i = 2, math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            table.insert(factors, i)\n     \
    \       table.insert(factors, n / i)\n        end\n    end\n    return table.max(factors)\n\
    end", "    local factors = {}\n    for i = 2, math.sqrt(n) do\n        if n %\
    \ i == 0 then\n            factors[i] = factors[i] or i\n            factors[n/i]\
    \ = factors[n/i] or i\n        end\n    end\n    return factors[n]\nend", "  \
    \  local factors = {}\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n\
    \            factors[i] = factors[i] or i\n            factors[n/i] = i\n    \
    \    end\n    end\n    return factors[n]\nend", "    local factors = {}\n    for\
    \ i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            table.insert(factors, n / i)\n        end\n    end\n    return\
    \ table.max(factors)\nend", "    local factors = {}\n    for i = 2, math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            table.insert(factors, i)\n     \
    \       n = n / i\n        end\n    end\n    table.insert(factors, n)\n    return\
    \ table.max(factors)\nend", "    local i, p\n    for i = math.sqrt(n) + 1, 1,\
    \ -1 do\n        p = math.floor(n / i)\n        if p == math.floor(p) and p >\
    \ 1 then\n            return p\n        end\n    end\nend", "    local factors\
    \ = math.sqrt(n)\n    for i = 2, factors do\n        if n % i == 0 then\n    \
    \        return i\n        end\n    end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
