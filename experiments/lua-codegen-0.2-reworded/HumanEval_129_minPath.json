{
  "name": "HumanEval_129_minPath",
  "language": "lua",
  "prompt": "-- Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n-- each cell of the grid contains a value. Every integer in the range [1, N * N]\n-- inclusive appears exactly once on the cells of the grid.\n-- You have to find the minimum path of length k in the grid. You can start\n-- from any cell, and in each step you can move to any of the neighbor cells,\n-- in other words, you can go to cells which share an edge with you current\n-- cell.\n-- Please note that a path of length k means visiting exactly k cells (not\n-- necessarily distinct).\n-- You CANNOT go off the grid.\n-- A path A (of length k) is considered less than a path B (of length k) if\n-- after making the ordered tables of the values on the cells that A and B go\n-- through (let's call them lst_A and lst_B), lst_A is lexicographically less\n-- than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n-- such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n-- lst_A[j] = lst_B[j].\n-- It is guaranteed that the answer is unique.\n-- Return an ordered table of the values on the cells that the minimum path go through.\n-- Examples:    \n-- >>> minPath([ [1,2,3], [4,5,6], [7,8,9]], 3)\n-- [1, 2, 1]\n-- >>> minPath([ [5,9,3], [4,1,6], [7,8,2]], 1)\n-- [1]\nlocal function minPath(grid, k)\n",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minPath\n    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3), {1, 2, 1})\n    lu.assertEquals(candidate({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1), {1})\n    lu.assertEquals(candidate({{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}}, 4), {1, 2, 1, 2})\n    lu.assertEquals(candidate({{6, 4, 13, 10}, {5, 7, 12, 1}, {3, 16, 11, 15}, {8, 14, 9, 2}}, 7), {1, 10, 1, 10, 1, 10, 1})\n    lu.assertEquals(candidate({{8, 14, 9, 2}, {6, 4, 13, 15}, {5, 7, 1, 12}, {3, 10, 11, 16}}, 5), {1, 7, 1, 7, 1})\n    lu.assertEquals(candidate({{11, 8, 7, 2}, {5, 16, 14, 4}, {9, 3, 15, 6}, {12, 13, 10, 1}}, 9), {1, 6, 1, 6, 1, 6, 1, 6, 1})\n    lu.assertEquals(candidate({{12, 13, 10, 1}, {9, 3, 15, 6}, {5, 16, 14, 4}, {11, 8, 7, 2}}, 12), {1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6})\n    lu.assertEquals(candidate({{2, 7, 4}, {3, 1, 5}, {6, 8, 9}}, 8), {1, 3, 1, 3, 1, 3, 1, 3})\n    lu.assertEquals(candidate({{6, 1, 5}, {3, 8, 9}, {2, 7, 4}}, 8), {1, 5, 1, 5, 1, 5, 1, 5})\n    lu.assertEquals(candidate({{1, 2}, {3, 4}}, 10), {1, 2, 1, 2, 1, 2, 1, 2, 1, 2})\n    lu.assertEquals(candidate({{1, 3}, {3, 2}}, 10), {1, 3, 1, 3, 1, 3, 1, 3, 1, 3})\nend\n\nos.exit(lu.LuaUnit.run())",
  "completions": [
    "    local i, j, n = #grid, #grid[1], #grid[1][1]\n    local res = {}\n    for i = 1, n do\n        for j = 1, n do\n            if grid[i][j] == k then\n                res = {i, j}\n                break\n            end\n        end\n        if res ~= {} then\n            break\n        end\n    end\n    return res\nend",
    "    local tbl = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            tbl[i, j] = grid[i][j]\n        end\n    end\n    for i = 2, k, 1 do\n        for j = 1, #grid, 1 do\n            for k = 1, #grid[i], 1 do\n                if grid[i][k] < grid[k][j] then\n                    tbl[i, j] = grid[i][k]\n                end\n            end\n        end\n    end\n    return tbl\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = grid[i % N][i / N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n            if grid[j % N][j / N] < result[j] then\n                result[j] = grid[j % N][j / N]\n            end\n        end\n    end\n    return result\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = grid[i % N][i / N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n            if grid[j % N][j / N] < result[j] then\n                result[j] = grid[j % N][j / N]\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            result[i] = result[i] or {}\n            result[i][j] = grid[i][j]\n        end\n    end\n    for i = 1, #result, 1 do\n        for j = 1, #result[i], 1 do\n            for k = 1, #result[i][j], 1 do\n                result[i][j] = result[i][j] or {}\n                result[i][j][k] = result[i][j][k] or {}\n                result[i][j][k][1] = result[i][j][k][1] or {}\n                result[i][j][k][1][1] = result[i][j][k][1][1] or {}\n                result[i][j][k][1][1][1] = result[i][j][k][1][1][1] or {}\n                result[i][j][k][1][1][1][1] = result[i][j][k][1][1][1][1] or {}\n                result[i][j][k][1][1][1][1][1] = result[i][j][k][1][1][1][1][1] or {}\n                result[i][j][k][1][1][1][1][1][1] = result[i][j][k][1][1][1][1][1][1] or {}\n                result[i][j][k][1][1][1][1][1][1][1] = result[i][j][k][1][1][1][1][1][1][1] or {}\n                result[i][j][k][1][1][1][1][1][1][1][1] = result[i][j][k][1][1][1][1][1][1][1][1] or {}\n                result[i][j][k][1][1][1][1][1][1][1][1][1] = result[i][j][k][1][1][1][1][1][1][1][1][1]",
    "    local path = {}\n    local i = 1\n    while i <= k\n        path[i] = grid[1][1]\n        grid = grid[1..]\n        i = i + 1\n    return path\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = i\n    end\n    for i = 1, N do\n        for j = 1, N do\n            if grid[i][j] == 0 then\n                result[i * N + j] = 0\n            elseif grid[i][j] == 1 then\n                result[i * N + j] = 1\n            elseif grid[i][j] == 2 then\n                result[i * N + j] = 2\n            end\n        end\n    end\n    for i = 1, M do\n        for j = 1, M do\n            if result[i] == result[j] then\n                result[i] = result[j]\n            elseif result[i] < result[j] then\n                result[i] = result[j]\n            end\n        end\n    end\n    for i = 1, k do\n        result[i] = result[i] + 1\n    end\n    return result\nend",
    "    local i, j, res = 1, 1, {}\n    for i = 1, #grid, 2 do\n        for j = 1, #grid[i], 2 do\n            if grid[i][j] > grid[i - 1][j] and grid[i][j] > grid[i][j - 1] then\n                res[k] = grid[i][j]\n                k = k - 1\n                if k == 0 then\n                    return res\n                end\n            end\n        end\n    end\nend",
    "    local path = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            path[i, j] = grid[i][j]\n        end\n    end\n    for i = 1, #path, 1 do\n        for j = 1, #path[i], 1 do\n            path[i, j] = math.min(path[i, j], path[i-1, j] + path[i, j-1])\n        end\n    end\n    return path[k, k]\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = grid[i % N][(i / N) % N]\n    end\n    for i = 2, M do\n        for j = 1, N do\n            if grid[j][(j + i - 1) % N] < grid[j][(j - 1) % N] then\n                result[i] = grid[j][(j + i - 1) % N]\n                break\n            end\n        end\n    end\n    for i = 1, M do\n        for j = 1, N do\n            if grid[j][(j + i - 1) % N] < result[i] then\n                result[i] = grid[j][(j + i - 1) % N]\n            end\n        end\n    end\n    return result[k]\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = i\n    end\n    for i = 1, M do\n        for j = 1, N do\n            if grid[j][i] == 0 then\n                break\n            end\n        end\n        for j = 1, N do\n            if grid[j][i] == 0 then\n                break\n            end\n        end\n        for j = 1, N do\n            for k = 1, N do\n                if grid[j][k] == 0 then\n                    break\n                end\n            end\n            for k = 1, N do\n                if grid[k][i] == 0 then\n                    break\n                end\n            end\n            for k = 1, N do\n                for l = 1, N do\n                    if grid[k][l] == 0 then\n                        break\n                    end\n                end\n                for l = 1, N do\n                    if grid[j][l] == 0 then\n                        break\n                    end\n                end\n                for l = 1, N do\n                    for m = 1, N do\n                        if grid[l][m] == 0 then\n                            break\n                        end\n                    end\n                    for m = 1, N do\n                        if grid[k][m] == 0 then\n                            break\n                        end\n                    end\n                    for m = 1, N do\n                        for n = 1, N do\n                            if grid[m][n] == 0 then\n                                break\n                            end\n                        end\n                        for n = 1, N do\n                            if grid[l][n] == 0 then\n                                break\n                            end\n                        end\n                        for n = 1, N do\n                            for o = 1, N do\n                                if grid[n][o] == 0 then\n                                    break\n                                end\n                            end\n                            for o = 1, N do\n                                if grid[m][o] == 0 then\n                                    break\n                                end\n                            end\n                            for o = 1, N do\n                                for p = 1, N do\n                                    if grid[o][p] == 0 then\n                                        break\n                                    end\n                                end\n                                for p = 1, N do",
    "    local i, j, path = 1, 1, [1]\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j] == k then\n                path = path .. grid[i][j]\n                while path[path.length - 1] == path[path.length - 2] do\n                    path = path .. grid[i][j]\n                end\n                path = path .. 1\n                path = path .. grid[i][j]\n            end\n        end\n    end\n    return path\nend",
    "    local N = #grid\n    local M = N * N\n    local i = 1\n    local j = 1\n    local result = {}\n    while i <= M and j <= M and i <= k and j <= k do\n        if grid[i][j] == 1 then\n            result[i] = j\n            i = i + 1\n            j = j + 1\n        else\n            i = i + 1\n    end\n    return result\nend",
    "    local N = #grid\n    local M = N * N\n    local i, j, path = 1, 1, 1\n    local table = {}\n    local min = M\n    while i <= N and j <= N and path <= k do\n        table[i] = j\n        if grid[i][j] < min then min = grid[i][j]\n        if i > 1 and grid[i - 1][j] < min then min = grid[i - 1][j]\n        if j > 1 and grid[i][j - 1] < min then min = grid[i][j - 1]\n        if i < N and j < N and grid[i + 1][j + 1] < min then min = grid[i + 1][j + 1]\n        if i < N and grid[i + 1][j] < min then min = grid[i + 1][j]\n        if j < N and grid[i][j + 1] < min then min = grid[i][j + 1]\n        if i > 1 and j < N and grid[i - 1][j + 1] < min then min = grid[i - 1][j + 1]\n        if i > 1 and grid[i - 1][j] < min then min = grid[i - 1][j]\n        if j > 1 and grid[i][j - 1] < min then min = grid[i][j - 1]\n        path = path + 1\n        i = i + 1\n        j = j + 1\n    return table\nend",
    "    local result = {}\n    local i, j\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j] == k then\n                result[i] = j\n                break\n        end\n    end\n    return result\nend",
    "    local i, j, min_path = 1, 1, 1\n    for i = 1, #grid do\n        for j = 1, #grid[i] do\n            if grid[i][j] < min_path then\n                min_path = grid[i][j]\n                i, j = i, j\n            end\n        end\n    end\n    return i, j, min_path\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = grid[i % N][(i - 1) / N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n            if grid[j % N][(j - 1) / N] < result[j] then\n                result[j] = grid[j % N][(j - 1) / N]\n            end\n        end\n    end\n    return result\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = grid[i % N][i / N]\n    end\n    for i = 1, M - k do\n        for j = 1, M - k do\n            if grid[i % N][j / N] < grid[j % N][i / N] then\n                result[i] = grid[i % N][j / N]\n                break\n            end\n        end\n    end\n    return result\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = grid[i % N][(i - 1) / N]\n    end\n    for i = 1, M do\n        for j = 1, M do\n            if grid[j % N][(j - 1) / N] < grid[i % N][(i - 1) / N] then\n                result[i] = result[i] + 1\n            end\n        end\n    end\n    return result[k]\nend",
    "    local N = #grid\n    local M = N * N\n    local i, j\n    local res = {}\n    for i = 1, M do\n        for j = 1, N do\n            if grid[i][j] == k then\n                res[i] = j\n                break\n        end\n    end\n    for i = 1, M do\n        for j = 1, N do\n            if grid[i][j] == k then\n                res[j] = i\n                break\n        end\n    end\n    return res\nend",
    "    local N = #grid\n    local M = N * N\n    local i, j, lst = 1, 1, {}\n    for i = 1, N do\n        for j = 1, N do\n            lst[i] = lst[i] or grid[i][j]\n            if i > 1 and grid[i-1][j] < lst[i] then lst[i] = grid[i-1][j]\n            if j > 1 and grid[i][j-1] < lst[i] then lst[i] = grid[i][j-1]\n        end\n    end\n    for i = 1, k do\n        lst = lst or {}\n        for j = 1, N do\n            lst[j] = lst[j] or grid[i][j]\n            if i > 1 and grid[i-1][j] < lst[j] then lst[j] = grid[i-1][j]\n            if j > 1 and grid[i][j-1] < lst[j] then lst[j] = grid[i][j-1]\n        end\n    end\n    return lst\nend",
    "    local N = #grid\n    local M = N * N\n    local i = 1\n    local j = 1\n    local path = {}\n    while i <= k and j <= M do\n        if grid[i][j] > grid[i - 1][j] and grid[i][j] > grid[i][j - 1] then\n            path[i] = j\n            i = i + 1\n        else if grid[i][j] > grid[i - 1][j] then\n            path[i] = j\n            j = j + 1\n        else if grid[i][j] > grid[i][j - 1] then\n            path[i] = j\n            i = i + 1\n        else\n            path[i] = j\n            j = j + 1\n    end\n    return path\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = grid[i % N][(i - 1) / N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n            if grid[j % N][(j - 1) / N] < result[j] then\n                result[j] = grid[j % N][(j - 1) / N]\n            end\n        end\n    end\n    return result\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    local i = 1\n    while i <= M do\n        result[i] = grid[i % N][i / N]\n        i = i + 1\n    end\n    i = 1\n    while i <= M do\n        local j = 1\n        while j <= M do\n            if result[i] < result[j] then\n                result[i] = result[j]\n            end\n            j = j + 1\n        end\n        i = i + 1\n    end\n    return result[k]\nend",
    "    local N = #grid\n    local M = N * N\n    local i = 1\n    local j = 1\n    local lst = {}\n    while i <= k and j <= M do\n        if grid[i][j] > grid[i-1][j] then\n            lst[i] = j\n            i = i + 1\n        else\n            j = j + 1\n    end\n    return lst\nend",
    "    local path = {}\n    local i = 1\n    while i <= k\n        path[i] = grid[1][1]\n        grid = grid[1:][1:][1:]\n        i = i + 1\n    return path\nend",
    "    local t = {}\n    for i = 1, #grid, 2 do\n        for j = 1, #grid[i], 2 do\n            if grid[i][j] == grid[i-1][j] + 1 and grid[i][j] <= k then\n                t[i] = j\n            end\n        end\n    end\n    return t\nend",
    "    local N = #grid\n    local M = N * N\n    local i, j, path = 1, 1, 1\n    local table = {}\n    local lst = {}\n    for i = 1, N do\n        for j = 1, N do\n            table[i, j] = grid[i][j]\n            lst[i, j] = path\n            if i > 1 and grid[i - 1][j] < table[i - 1, j] then\n                table[i, j] = table[i - 1, j]\n                lst[i, j] = lst[i - 1, j]\n            if j > 1 and grid[i][j - 1] < table[i, j - 1] then\n                table[i, j] = table[i, j - 1]\n                lst[i, j] = lst[i, j - 1]\n            if i > 1 and j > 1 and grid[i - 1][j - 1] < table[i - 1, j - 1] then\n                table[i, j] = table[i - 1, j - 1]\n                lst[i, j] = lst[i - 1, j - 1]\n            path = path + 1\n        end\n    end\n    for i = 1, N do\n        for j = 1, N do\n            if table[i, j] == M then\n                table[i, j] = 0\n                lst[i, j] = 0\n            end\n        end\n    end\n    for i = 1, N do\n        for j = 1, N do\n            if table[i, j] == k then\n                table[i, j] = 0\n                lst[i, j] = 0\n            end\n        end\n    end\n    return lst\nend",
    "    local N = #grid\n    local M = N * N\n    local i, j, lst = 1, 1, {}\n    for i = 1, N do\n        for j = 1, N do\n            lst[i] = j\n        end\n    end\n    for i = 1, M do\n        lst[grid[i][1]] = i\n    end\n    for i = 1, k do\n        for j = 1, N do\n            lst[grid[lst[i]][j]] = i\n        end\n    end\n    for i = 1, N do\n        for j = 1, N do\n            lst[grid[i][lst[i]]] = i\n        end\n    end\n    return lst\nend",
    "    local N = #grid\n    local M = N * N\n    local i, j, path = 1, 1, 1\n    local table = {}\n    while path <= k\n        i = math.floor(path / N)\n        j = math.floor(path % N)\n        if grid[i][j] == 0 then\n            table[path] = grid[i][j]\n            path = path + 1\n        else\n            path = path + 1\n    end\n    return table\nend",
    "    local result = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j] == k then\n                for jj = 1, #grid[i], 1 do\n                    if grid[i][jj] == k then\n                        result[jj] = grid[i][jj]\n                        break\n                end\n                break\n            end\n        end\n    end\n    return result\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = grid[i % N][(i - 1) / N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n            if grid[j % N][(j - 1) / N] < result[j] then\n                result[j] = grid[j % N][(j - 1) / N]\n            end\n        end\n    end\n    return result\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    local i = 1\n    while i <= k\n        local j = 1\n        while j <= k\n            local cell = grid[i - 1][j - 1]\n            if cell == M then\n                result[i] = j\n                break\n            elseif cell > M then\n                break\n            else\n                j = j + 1\n            end\n        end\n        i = i + 1\n    end\n    return result\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = grid[i % N][i / N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n            if grid[j % N][j / N] < result[j] then\n                result[j] = grid[j % N][j / N]\n            end\n        end\n    end\n    return result\nend",
    "    local N = #grid\n    local M = N * N\n    local i, j\n    local res = {}\n    for i = 1, N do\n        for j = 1, N do\n            res[i] = res[i] or {}\n            res[i][j] = grid[i][j]\n        end\n    end\n    for i = 1, k do\n        for j = 1, N do\n            res[i] = res[i] or {}\n            res[i][j] = math.min(res[i][j], res[i - 1] or {}, res[i + 1] or {})\n        end\n    end\n    return res[k]\nend",
    "    local path = {}\n    local i = 1\n    while i <= k do\n        path[i] = 1\n        i = i + 1\n    end\n    local i = 1\n    while i <= k do\n        local j = 1\n        while j <= k do\n            if grid[i][j] < grid[i - 1][j] then\n                path[i] = path[i] + 1\n            end\n            j = j + 1\n        end\n        i = i + 1\n    end\n    return path\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    local i = 1\n    while i <= k\n        local j = 1\n        while j <= k\n            local value = grid[i-1][j-1]\n            if value == M then\n                result[i] = j\n                break\n            elseif value > M then\n                break\n            else\n                j = j + 1\n            end\n        end\n        i = i + 1\n    end\n    return result\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = grid[i % N][i / N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n            if grid[j % N][j / N] < result[j] then\n                result[j] = grid[j % N][j / N]\n            end\n        end\n    end\n    return result\nend",
    "    local i, j, min_path = math.inf, math.inf, {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j] < min_path[k] then\n                min_path[k] = grid[i][j]\n                min_path[k + 1] = i\n                min_path[k + 2] = j\n            end\n        end\n    end\n    return min_path\nend",
    "    local N = #grid\n    local M = N * N\n    local i, j\n    local path = {}\n    local lst_path = {}\n    local lst_grid = {}\n    for i = 1, N do\n        for j = 1, N do\n            lst_grid[i, j] = grid[i][j]\n        end\n    end\n    for i = 1, M do\n        lst_path[i] = i\n    end\n    for i = 1, k do\n        for j = 1, N do\n            for k = 1, N do\n                if lst_grid[i, k] < lst_grid[j, k] then\n                    lst_path[i] = j\n                    break\n                end\n            end\n        end\n        path[i] = lst_path[i]\n    end\n    return path\nend",
    "    local N = #grid\n    local M = N * N\n    local i = 1\n    local j = 1\n    local path = {}\n    while i <= k and j <= M do\n        if grid[i][j] == 1 then\n            path[i] = j\n            i = i + 1\n        else\n            j = j + 1\n    end\n    return path\nend",
    "    local path = {}\n    local i = 1\n    local j = 1\n    local n = grid.length\n    local m = grid[1].length\n    while i <= n and j <= m and i <= k and j <= k do\n        if grid[i][j] < path[i] then\n            path[i] = grid[i][j]\n        end\n        if grid[i][j] > path[j] then\n            path[j] = grid[i][j]\n        end\n        i = i + 1\n        j = j + 1\n    end\n    return path\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    local i = 1\n    while i <= k and i <= M do\n        result[i] = 1\n        i = i + 1\n    end\n    i = 1\n    while i <= M do\n        if grid[i % N][i / N] == 0 then\n            result[1] = i\n            i = i + 1\n            break\n        end\n        i = i + 1\n    end\n    i = 1\n    while i <= k and i <= M do\n        if grid[i % N][i / N] == 0 then\n            result[i] = i\n            i = i + 1\n            break\n        end\n        i = i + 1\n    end\n    return result\nend",
    "    local i, j, path = 1, 1, [1]\n    for i = 1, #grid, 2 do\n        for j = 1, #grid[i], 2 do\n            if grid[i][j] < grid[i-1][j] and grid[i][j] < grid[i][j-1] then\n                path = path .. grid[i][j]\n                if path.length() == k then\n                    return path\n                end\n            end\n        end\n    end\n    return path\nend",
    "    local N = #grid\n    local M = N * N\n    local res = {}\n    for i = 1, M do\n        res[i] = grid[i % N][i / N]\n    end\n    for i = 2, M do\n        for j = 1, N do\n            if grid[j][i % N] < grid[j][(i - 1) / N] then\n                res[i] = grid[j][i % N]\n                break\n            end\n        end\n    end\n    for i = 1, M do\n        if res[i] < res[k] then\n            res[k] = res[i]\n        end\n    end\n    return res\nend",
    "    local result = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j] == k then\n                result[i] = j\n                break\n        end\n    end\n    return result\nend",
    "    local N = #grid\n    local M = N * N\n    local i = 1\n    local j = 1\n    local result = {}\n    while i <= k and j <= M do\n        if grid[i][j] > grid[i-1][j] then\n            result[i] = j\n            i = i + 1\n        else\n            j = j + 1\n    end\n    return result\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = grid[i % N][i / N]\n    end\n    for i = 2, M do\n        for j = 1, N do\n            if grid[j][i % N] < grid[j][(i - 1) / N] then\n                result[i] = grid[j][i % N]\n                break\n            end\n        end\n    end\n    for i = 1, k do\n        for j = 1, N do\n            if result[j] < result[(j - 1) / N] then\n                result[j] = result[(j - 1) / N]\n            end\n        end\n    end\n    return result\nend",
    "    local path = {}\n    local i = 1\n    local j = 1\n    while i <= k and j <= k\n        path[i] = grid[j][i]\n        if grid[j][i] > grid[j-1][i]\n            j = j + 1\n        else if grid[j][i] > grid[j][i-1]\n            i = i + 1\n        else\n            j = j - 1\n            i = i - 1\n    return path\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = grid[i % N][i / N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n            if grid[j % N][j / N] < result[j] then\n                result[j] = grid[j % N][j / N]\n            end\n        end\n    end\n    return result\nend",
    "    local N = #grid\n    local M = N * N\n    local i = 1\n    local j = 1\n    local path = {}\n    while i <= k and j <= M do\n        path[i] = grid[j]\n        if j == M then\n            return path\n        j = j + 1\n        if j % N == 1 then\n            i = i + 1\n            j = j + 1\n        else\n            j = j - N\n    end\nend",
    "    local t = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            t[i, j] = grid[i][j]\n        end\n    end\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            for k = 1, #grid, 1 do\n                if grid[i][j] > grid[k][j] then\n                    t[i, j] = grid[k][j]\n                end\n            end\n        end\n    end\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            for k = 1, #grid, 1 do\n                if grid[i][j] > grid[k][j] then\n                    t[i, j] = grid[k][j]\n                end\n            end\n        end\n    end\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            for k = 1, #grid, 1 do\n                if grid[i][j] > grid[k][j] then\n                    t[i, j] = grid[k][j]\n                end\n            end\n        end\n    end\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            for k = 1, #grid, 1 do\n                if grid[i][j] > grid[k][j] then\n                    t[i, j] = grid[k][j]\n                end\n            end\n        end\n    end\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            for k = 1, #grid, 1 do\n                if grid[i][j] > grid[k][j] then\n                    t[i, j] = grid[k][j]\n                end\n            end\n        end\n    end\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            for k = 1, #grid, 1 do\n                if grid[i][j] > grid[",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = grid[i % N][i / N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n            if grid[j % N][j / N] < result[j] then\n                result[j] = grid[j % N][j / N]\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j] == k then\n                for jj = 1, #grid[i], 1 do\n                    if grid[i][jj] == k then\n                        result[jj] = grid[i][jj]\n                        break\n                end\n                break\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j] == k then\n                for jj = 1, #grid[i], 1 do\n                    if grid[i][jj] == k then\n                        result[jj] = grid[i][jj]\n                    end\n                end\n                for ii = 1, #grid, 1 do\n                    if grid[ii][j] == k then\n                        result[ii] = grid[ii][j]\n                    end\n                end\n                for ii = 1, #grid, 1 do\n                    for jj = 1, #grid[ii], 1 do\n                        if grid[ii][jj] == k then\n                            result[ii] = grid[ii][jj]\n                        end\n                    end\n                end\n                for jj = 1, #grid, 1 do\n                    for ii = 1, #grid[jj], 1 do\n                        if grid[ii][jj] == k then\n                            result[ii] = grid[ii][jj]\n                        end\n                    end\n                end\n                for ii = 1, #grid, 1 do\n                    for jj = 1, #grid[ii], 1 do\n                        if grid[ii][jj] == k then\n                            result[ii] = grid[ii][jj]\n                        end\n                    end\n                end\n                for jj = 1, #grid, 1 do\n                    for ii = 1, #grid[jj], 1 do\n                        if grid[ii][jj] == k then\n                            result[ii] = grid[ii][jj]\n                        end\n                    end\n                end\n                for ii = 1, #grid, 1 do\n                    for jj = 1, #grid[ii], 1 do\n                        if grid[ii][jj] == k then\n                            result[ii] = grid[ii][jj]\n                        end\n                    end\n                end\n                for jj = 1, #grid, 1 do\n                    for ii = 1, #grid[jj], 1 do\n                        if grid[ii][jj] == k then\n                            result[ii] = grid[ii][jj]\n                        end\n                    end\n                end\n                for ii = 1, #grid, 1 do\n                    ",
    "    local N = #grid\n    local M = N * N\n    local i\n    local j\n    local res = {}\n    for i = 1, M do\n        res[i] = grid[i % N][i / N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n            if res[j] < res[j + 1] then\n                res[j + 1] = res[j]\n                j = j + 1\n            end\n        end\n    end\n    return res\nend",
    "    local N = #grid\n    local M = N * N\n    local i\n    local j\n    local min\n    local path\n    local lst\n    \n    for i = 1, M do\n        for j = 1, N do\n            if grid[i][j] == 0 then\n                path = nil\n                min = M\n                for jj = 1, N do\n                    if grid[jj][j] == 0 then\n                        if min > grid[i][jj] then\n                            min = grid[i][jj]\n                            path = path .. jj\n                        end\n                    end\n                end\n                if min == M then\n                    return path\n                end\n                if min < k then\n                    return path\n                end\n            end\n        end\n    end\nend",
    "    local i, j, min_path = 1, 1, math.inf\n    for i = 1, #grid do\n        for j = 1, #grid[i] do\n            if grid[i][j] < min_path then\n                min_path = grid[i][j]\n                min_path_i, min_path_j = i, j\n            end\n        end\n    end\n    return min_path_i, min_path_j, min_path\nend",
    "    local N = #grid\n    local M = N * N\n    local i\n    local j\n    local res = {}\n    for i = 1, M do\n        res[i] = grid[i % N][i / N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n            if res[j] < res[j + 1] then\n                res[j + 1] = res[j]\n                j = j + 1\n            end\n        end\n    end\n    return res\nend",
    "    local t = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            t[i, j] = grid[i][j]\n        end\n    end\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if t[i, j] == t[i - 1, j] or t[i, j] == t[i, j - 1] then\n                t[i, j] = math.min(t[i - 1, j], t[i, j - 1])\n            end\n        end\n    end\n    return t[k, k]\nend",
    "    local i, j, min_path = math.inf, math.inf, {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j] < min_path[k] then\n                min_path[k] = grid[i][j]\n                if k == 1 then\n                    min_path[1] = grid[i][j]\n                else\n                    min_path[k] = minPath(grid, k - 1)\n            end\n        end\n    end\n    return min_path\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = grid[i % N][i / N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n            if grid[j % N][j / N] < result[j] then\n                result[j] = grid[j % N][j / N]\n            end\n        end\n    end\n    return result\nend",
    "    local path = {}\n    local i = 1\n    local j = 1\n    while i <= k and j <= k\n        if grid[i][j] == grid[i-1][j] + 1 or grid[i][j] == grid[i][j-1] + 1 or grid[i][j] == grid[i-1][j-1] + 1\n            path[i] = j\n            i = i + 1\n            j = j + 1\n        else\n            i = i + 1\n    end\n    return path\nend",
    "    local i, j, lst = 1, 1, {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j] < lst[lst] then lst = grid[i][j] end\n        end\n        table.insert(lst, i)\n    end\n    return lst\nend",
    "    local path = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            path[i, j] = grid[i][j]\n        end\n    end\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if path[i, j] == path[i-1, j] or path[i, j] == path[i, j-1] then\n                path[i, j] = path[i-1, j]\n            end\n        end\n    end\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if path[i, j] == path[i-1, j] or path[i, j] == path[i, j-1] then\n                path[i, j] = path[i-1, j]\n            end\n        end\n    end\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if path[i, j] == path[i-1, j] or path[i, j] == path[i, j-1] then\n                path[i, j] = path[i-1, j]\n            end\n        end\n    end\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if path[i, j] == path[i-1, j] or path[i, j] == path[i, j-1] then\n                path[i, j] = path[i-1, j]\n            end\n        end\n    end\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if path[i, j] == path[i-1, j] or path[i, j] == path[i, j-1] then\n                path[i, j] = path[i-1, j]\n            end\n        end\n    end\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = grid[i % N][(i - 1) / N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n            if grid[j % N][(j - 1) / N] < result[j] then\n                result[j] = grid[j % N][(j - 1) / N]\n            end\n        end\n    end\n    return result\nend",
    "    local path = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            path[i, j] = grid[i][j]\n        end\n    end\n    for i = 1, #path, 1 do\n        for j = 1, #path[i], 1 do\n            path[i, j] = math.min(path[i, j], path[i-1, j] + path[i, j-1])\n        end\n    end\n    return path[k, k]\nend",
    "    local N = #grid\n    local M = N * N\n    local i, j\n    local path = {}\n    for i = 1, M do\n        path[i] = grid[i % N][i / N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n            if path[j] > grid[j % N][j / N] then\n                path[j] = grid[j % N][j / N]\n            end\n            if j - 1 >= 1 and path[j - 1] > grid[j % N][(j - 1) / N] then\n                path[j] = grid[j % N][(j - 1) / N]\n            end\n            if j + 1 <= M and path[j + 1] > grid[j % N][(j + 1) / N] then\n                path[j] = grid[j % N][(j + 1) / N]\n            end\n            if j - N >= 1 and path[j - N] > grid[(j - N) % N][j / N] then\n                path[j] = grid[(j - N) % N][j / N]\n            end\n            if j + N <= M and path[j + N] > grid[(j + N) % N][j / N] then\n                path[j] = grid[(j + N) % N][j / N]\n            end\n        end\n    end\n    return path\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = grid[i % N][(i - 1) / N]\n    end\n    for i = 1, M do\n        for j = 1, M do\n            if grid[j % N][(j - 1) / N] < grid[i % N][(i - 1) / N] then\n                result[i] = math.min(result[i], result[j] + 1)\n            end\n        end\n    end\n    return result[k]\nend",
    "    local path = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            path[i, j] = grid[i][j]\n        end\n    end\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if path[i, j] == path[i - 1, j] and path[i, j] == path[i, j - 1] then\n                path[i, j] = path[i - 1, j - 1]\n            end\n        end\n    end\n    return path[k, k]\nend",
    "    local path = {}\n    local i = 1\n    while i <= k\n        path[i] = grid[1][1]\n        i = i + 1\n    end\n    return path\nend",
    "    local N = #grid\n    local M = N * N\n    local i, j\n    local min = M + 1\n    local min_path = {}\n    for i = 1, N do\n        for j = 1, N do\n            if grid[i][j] < min then\n                min = grid[i][j]\n                min_path = {i, j}\n            end\n        end\n    end\n    for i = 1, k do\n        min = math.min(min, grid[min_path[i]])\n        min_path = {min_path[i], min_path[i - 1]}\n    end\n    return min_path\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    local i = 1\n    while i <= k\n        local j = 1\n        while j <= k\n            if grid[i][j] < M then\n                result[i] = j\n                break\n            j = j + 1\n        i = i + 1\n    return result\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = i\n    end\n    for i = 1, N do\n        for j = 1, N do\n            if grid[i][j] == 0 then\n                result[i * N + j] = 0\n            else\n                result[i * N + j] = math.min(result[i * N + j], result[i * N + j - 1] + 1)\n                result[i * N + j] = math.min(result[i * N + j], result[(i - 1) * N + j] + 1)\n                result[i * N + j] = math.min(result[i * N + j], result[i * N + (j - 1)] + 1)\n            end\n        end\n    end\n    return result[k]\nend",
    "    local result = {}\n    local i = 1\n    local j = 1\n    while i <= k and j <= k do\n        if grid[i][j] > grid[i-1][j] then\n            result[i] = j\n            i = i + 1\n        elseif grid[i][j] > grid[i][j-1] then\n            result[i] = j\n            j = j + 1\n        else\n            result[i] = j\n            i = i + 1\n            j = j + 1\n    end\n    return result\nend",
    "    local N = #grid\n    local M = N * N\n    local i, j, path = 1, 1, [1]\n    while path[k] < M do\n        i = path[k] // N\n        j = path[k] % N\n        path[k] = path[k] + 1\n        if grid[i][j] < grid[i - 1][j] then\n            path[k] = path[k] + 1\n        end\n        if grid[i][j] < grid[i][j - 1] then\n            path[k] = path[k] + 1\n        end\n        if grid[i][j] < grid[i + 1][j] then\n            path[k] = path[k] + 1\n        end\n        if grid[i][j] < grid[i][j + 1] then\n            path[k] = path[k] + 1\n        end\n        k = k + 1\n    end\n    return path\nend",
    "    local path = {}\n    local i = 1\n    local j = 1\n    while i <= k and j <= k\n        path[i] = grid[j][i]\n        if path[i] < path[j]\n            j = j + 1\n        else\n            i = i + 1\n    end\n    return path\nend",
    "    local N = #grid\n    local M = N * N\n    local i = 1\n    local j = 1\n    local lst = {}\n    while i <= M and j <= M and i <= k and j <= k do\n        if grid[i][j] == 1 then\n            lst[i] = j\n            i = i + 1\n            j = j + 1\n        else\n            i = i + 1\n    end\n    return lst\nend",
    "    local i, j, min_path = 1, 1, 1\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j] < min_path then\n                min_path = grid[i][j]\n                i, j = i, j\n            end\n        end\n    end\n    return i, j, min_path\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = grid[i % N][i / N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n            if grid[j % N][j / N] < result[j] then\n                result[j] = grid[j % N][j / N]\n            end\n        end\n    end\n    return result\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = grid[i % N][(i - 1) / N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n            if grid[j % N][(j - 1) / N] < result[j] then\n                result[j] = grid[j % N][(j - 1) / N]\n            end\n        end\n    end\n    return result\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = grid[i % N][i / N]\n    end\n    for i = 2, M do\n        for j = 1, N do\n            if grid[j][i] < grid[j][i - 1] then\n                result[i] = grid[j][i]\n                break\n            end\n        end\n    end\n    for i = 1, k do\n        for j = 1, N do\n            if result[j] == result[j + 1] then\n                result[j] = result[j + 1]\n            end\n        end\n    end\n    return result\nend",
    "    local N = #grid\n    local M = N * N\n    local i, j\n    local min = M + 1\n    local min_path = {}\n    for i = 1, N do\n        for j = 1, N do\n            min = math.min(min, grid[i][j])\n            if min == k then\n                min_path = {i, j}\n                break\n        end\n    end\n    return min_path\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    local i = 1\n    while i <= M do\n        result[i] = grid[i % N][i / N]\n        i = i + 1\n    end\n    i = 1\n    while i <= M do\n        if i % N == 1 or i % N == N - 1 or i / N == 1 or i / N == N - 1 then\n            result[i] = math.inf\n        else\n            result[i] = math.min(result[i - 1], result[i + 1], result[i - N], result[i + N])\n        end\n        i = i + 1\n    end\n    return result[k]\nend",
    "    local N = #grid\n    local M = N * N\n    local i = 1\n    local j = 1\n    local result = {}\n    while i <= k and j <= M do\n        if grid[i][j] == 1 then\n            result[i] = j\n            i = i + 1\n        else\n            j = j + 1\n    end\n    return result\nend",
    "    local N = #grid\n    local M = N * N\n    local i = 1\n    local j = 1\n    local path = {}\n    while i <= k and j <= M do\n        path[i] = grid[j]\n        if j + 1 <= M and grid[j] < grid[j + 1] then\n            path[i] = path[i] + path[i - 1]\n        end\n        j = j + 1\n        i = i + 1\n    end\n    return path\nend",
    "    local N = #grid\n    local M = N * N\n    local i = 1\n    local j = 1\n    local path = {}\n    while i <= k and j <= M do\n        path[i] = grid[j]\n        if j + 1 <= M then\n            path[i] = math.min(path[i], grid[j + 1])\n        if j - 1 >= 1 then\n            path[i] = math.min(path[i], grid[j - 1])\n        if i - 1 >= 1 then\n            path[i] = math.min(path[i], grid[j - N])\n        if i + 1 <= N then\n            path[i] = math.min(path[i], grid[j + N])\n        j = j + 1\n        i = i + 1\n    return path\nend",
    "    local path = {}\n    local i = 1\n    local j = 1\n    while i <= k and j <= k\n        if grid[i][j] > grid[i-1][j] and grid[i][j] > grid[i][j-1] and grid[i][j] > grid[i-1][j-1]\n            path[i] = j\n            i = i + 1\n        elseif grid[i][j] > grid[i-1][j] and grid[i][j] > grid[i][j-1] and grid[i][j] < grid[i-1][j-1]\n            path[i] = j\n            j = j + 1\n        elseif grid[i][j] > grid[i-1][j] and grid[i][j] < grid[i][j-1] and grid[i][j] > grid[i-1][j-1]\n            path[i] = j\n            i = i + 1\n        elseif grid[i][j] > grid[i-1][j] and grid[i][j] < grid[i][j-1] and grid[i][j] < grid[i-1][j-1]\n            path[i] = j\n            j = j + 1\n        elseif grid[i][j] < grid[i-1][j] and grid[i][j] < grid[i][j-1] and grid[i][j] > grid[i-1][j-1]\n            path[i] = j\n            i = i + 1\n        elseif grid[i][j] < grid[i-1][j] and grid[i][j] > grid[i][j-1] and grid[i][j] < grid[i-1][j-1]\n            path[i] = j\n            j = j + 1\n        elseif grid[i][j] < grid[i-1][j] and grid[i][j] < grid[i][j-1] and grid[i][j] < grid[i-1][j-1]\n            path[i] = j\n            i = i + 1\n        elseif grid[i][j]",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    local i = 1\n    while i <= k\n        local j = 1\n        while j <= k\n            local cell = grid[i - 1][j - 1]\n            if cell > 0 then\n                result[i] = cell\n                j = j + 1\n            end\n            j = j + 1\n        end\n        i = i + 1\n    end\n    return result\nend",
    "    local t = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            t[i, j] = grid[i][j]\n        end\n    end\n    for i = 2, k, 1 do\n        for j = 1, #grid, 1 do\n            for _, v in pairs(grid) do\n                if v[1] == j then\n                    if v[2] < t[i, j] then\n                        t[i, j] = v[2]\n                    end\n                end\n            end\n        end\n    end\n    return t\nend",
    "    local N = #grid\n    local M = N * N\n    local i, j\n    local path = {}\n    for i = 1, M do\n        path[i] = grid[i % N][i / N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n            if grid[j % N][j / N] > path[j] then\n                path[j] = grid[j % N][j / N]\n            end\n        end\n    end\n    return path\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    local i = 1\n    while i <= k\n        local j = 1\n        while j <= k\n            local cell = grid[i - 1][j - 1]\n            if cell == M then\n                result[i] = j\n                break\n            elseif cell > M then\n                break\n            else\n                j = j + 1\n            end\n        end\n        i = i + 1\n    end\n    return result\nend",
    "    local N = #grid\n    local M = N * N\n    local i, j, path = 1, 1, 1\n    local result = {}\n    for i = 1, N do\n        for j = 1, N do\n            path = path * 10 + grid[i][j]\n            if path >= M then\n                path = path - M\n            end\n            if path >= k then\n                result[path] = i * N + j\n                path = path - k\n            end\n        end\n    end\n    return result\nend",
    "    local i, j, min_path = math.inf, math.inf, {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j] < min_path[1] then\n                min_path[1] = grid[i][j]\n                min_path[2] = i\n                min_path[3] = j\n            end\n        end\n    end\n    for i = 2, k, 1 do\n        min_path[i] = min_path[1]\n        for j = 2, i, 1 do\n            if grid[min_path[2]][min_path[3]] < grid[min_path[i]][min_path[j]] then\n                min_path[i] = min_path[j]\n                min_path[i + 1] = min_path[i]\n            end\n        end\n    end\n    return min_path\nend",
    "    local N = #grid\n    local M = N * N\n    local i = 1\n    local j = 1\n    local path = {}\n    while i <= k and j <= M do\n        if grid[i][j] == 1 then\n            path[i] = j\n            i = i + 1\n        else\n            j = j + 1\n    end\n    return path\nend",
    "    local path = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            path[i, j] = grid[i][j]\n        end\n    end\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            for k = 1, #path[i, j], 1 do\n                path[i, j] = math.min(path[i, j], path[i, k] + path[k, j])\n            end\n        end\n    end\n    return path[1, 1]\nend",
    "    local result = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j] == k then\n                for jj = 1, #grid[i], 1 do\n                    if grid[i][jj] < grid[i][j] then\n                        grid[i][j] = grid[i][jj]\n                    end\n                end\n                result[i] = j\n                break\n            end\n        end\n    end\n    return result\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = grid[i % N][(i - 1) / N]\n    end\n    for i = 1, k do\n        for j = 1, N * N do\n            if grid[j % N][(j - 1) / N] < result[j] then\n                result[j] = grid[j % N][(j - 1) / N]\n            end\n        end\n    end\n    return result\nend",
    "    local N = #grid\n    local M = N * N\n    local i = 1\n    local j = 1\n    local path = {}\n    while i <= M and j <= M do\n        if grid[i][j] == k then\n            path[k] = i\n            i = i + 1\n            j = j + 1\n        elseif grid[i][j] < k then\n            i = i + 1\n        else\n            j = j + 1\n    end\n    return path\nend",
    "    local t = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            t[i, j] = grid[i][j]\n        end\n    end\n    for i = 2, k, 1 do\n        for j = 1, #grid, 1 do\n            for k = 1, #grid[i], 1 do\n                t[i, j] = min(t[i, j], t[i, k] + t[k, j])\n            end\n        end\n    end\n    return t\nend",
    "    local N = #grid\n    local M = N * N\n    local i, j\n    local min = M + 1\n    local path = {}\n    for i = 1, N do\n        for j = 1, N do\n            path[i] = path[i] or {}\n            path[i][j] = grid[i][j]\n            if i > 1 and j > 1 and grid[i - 1][j - 1] < grid[i][j] then\n                path[i][j] = path[i - 1][j - 1]\n            end\n            if path[i][j] < min then\n                min = path[i][j]\n            end\n        end\n    end\n    return path[N][N]\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = grid[i % N][(i - 1) / N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n            if grid[j % N][(j - 1) / N] < result[j] then\n                result[j] = grid[j % N][(j - 1) / N]\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    local i = 1\n    local j = 1\n    while i <= k and j <= k do\n        if grid[i][j] > grid[i-1][j] then\n            result[i] = j\n            i = i + 1\n        else\n            j = j + 1\n    end\n    return result\nend",
    "    local N = #grid\n    local M = N * N\n    local i, j\n    local path = {}\n    for i = 1, M do\n        path[i] = grid[i % N][i / N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n            if path[j] > grid[j % N][j / N] then\n                path[j] = grid[j % N][j / N]\n            end\n            if j > 1 and path[j] > path[j - 1] then\n                path[j] = path[j - 1]\n            end\n        end\n    end\n    return path\nend",
    "    local N = #grid\n    local M = N * N\n    local i = 1\n    local j = 1\n    local path = {}\n    local lst = {}\n    while i <= M and j <= M and k > 0 do\n        if grid[i][j] > 0 then\n            path[k] = grid[i][j]\n            lst[k] = i, j\n            k = k - 1\n        else\n            i = i + 1\n            j = j + 1\n    end\n    return path, lst\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = grid[i % N][(i - 1) / N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n            if grid[j % N][(j - 1) / N] < result[j] then\n                result[j] = grid[j % N][(j - 1) / N]\n            end\n        end\n    end\n    return result\nend",
    "    local N = #grid\n    local M = N * N\n    local i = 1\n    local j = 1\n    local path = {}\n    while i <= k and j <= M do\n        if grid[i][j] > grid[i - 1][j] and grid[i][j] > grid[i][j - 1] then\n            path[i] = j\n            i = i + 1\n        elseif grid[i][j] > grid[i - 1][j] then\n            path[i] = j\n            j = j + 1\n        elseif grid[i][j] > grid[i][j - 1] then\n            path[i] = j\n            j = j + 1\n        else\n            i = i + 1\n    end\n    return path\nend",
    "    local N = #grid\n    local M = N * N\n    local i, j, min_path = M + 1, M + 1, M + 1\n    local min_value = M + 1\n    local min_path_index = M + 1\n    for i = 1, N do\n        for j = 1, N do\n            if grid[i][j] < min_value then\n                min_value = grid[i][j]\n                min_path_index = i * N + j\n            end\n        end\n    end\n    for i = 1, k do\n        for j = 1, N * N do\n            if grid[i / N][j / N] < min_value then\n                min_value = grid[i / N][j / N]\n                min_path_index = i * N + j\n            end\n        end\n    end\n    return min_path_index\nend",
    "    local N = #grid\n    local M = N * N\n    local i, j, lst = 1, 1, {}\n    for i = 1, N do\n        for j = 1, N do\n            lst[i] = j\n            if grid[i][j] < k then\n                lst[i] = lst[i] + 1\n            end\n        end\n    end\n    for i = 1, N do\n        for j = 1, N do\n            if lst[i] < lst[j] then\n                lst[i] = lst[j]\n            end\n        end\n    end\n    return lst\nend",
    "    local N = #grid\n    local M = N * N\n    local i, j, min_path = M, M, M\n    for i = 1, N, 1 do\n        for j = 1, N, 1 do\n            if grid[i][j] < M then\n                min_path = min_path - grid[i][j]\n                if min_path < 0 then\n                    min_path = 0\n                end\n            end\n        end\n    end\n    for i = 1, k, 1 do\n        min_path = min_path - 1\n        if min_path < 0 then\n            min_path = 0\n        end\n    end\n    return min_path\nend",
    "    local result = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j] == k then\n                result[i] = j\n                break\n        end\n    end\n    return result\nend",
    "    local N = #grid\n    local M = N * N\n    local i, j, path = 1, 1, [1]\n    for i = 1, N do\n        for j = 1, N do\n            path[i] = path[i] + grid[i][j]\n            if path[i] > k then path[i] = path[i] - M\n        end\n    end\n    for i = 1, N do\n        for j = 1, N do\n            if path[i] < path[j] then path[i] = path[j]\n        end\n    end\n    return path\nend",
    "    local N = #grid\n    local M = N * N\n    local i, j, min_path\n    local min_path_table = {}\n    for i = 1, M do\n        min_path_table[i] = i\n    end\n    for i = 1, N do\n        for j = 1, N do\n            if grid[i][j] == 0 then\n                min_path = minPath(grid, k - 1)\n                for i = 1, k do\n                    min_path_table[i] = min_path[i]\n                end\n                break\n            end\n        end\n    end\n    return min_path_table\nend",
    "    local N = #grid\n    local M = N * N\n    local res = {}\n    for i = 1, M do\n        res[i] = grid[i % N][i / N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n            if res[j] > res[j + 1] then\n                res[j + 1] = res[j]\n            end\n            if res[j] > res[j - 1] then\n                res[j - 1] = res[j]\n            end\n            if res[j] > res[j + N] then\n                res[j + N] = res[j]\n            end\n            if res[j] > res[j - N] then\n                res[j - N] = res[j]\n            end\n        end\n    end\n    return res\nend",
    "    local N = #grid\n    local M = N * N\n    local i, j, lst = 1, 1, {}\n    for i = 1, N do\n        for j = 1, N do\n            lst[i] = lst[i] or grid[i][j]\n            if i > 1 and grid[i - 1][j] < grid[i][j] then\n                lst[i] = lst[i] or grid[i - 1][j]\n            if j > 1 and grid[i][j - 1] < grid[i][j] then\n                lst[i] = lst[i] or grid[i][j - 1]\n            if i > 1 and j > 1 and grid[i - 1][j - 1] < grid[i][j] then\n                lst[i] = lst[i] or grid[i - 1][j - 1]\n        end\n    end\n    for i = 1, k do\n        lst[i] = lst[i] or 1\n    end\n    return lst\nend",
    "    local tbl = {}\n    for i = 1, #grid, 2 do\n        for j = 1, #grid[i], 2 do\n            tbl[i, j] = grid[i][j]\n        end\n    end\n    for i = 2, k, 2 do\n        for j = 1, #grid, 2 do\n            for k = 1, #grid[j], 2 do\n                if grid[j][k] < tbl[j, k] then\n                    tbl[j, k] = grid[j][k]\n                end\n            end\n        end\n    end\n    return tbl\nend",
    "    local N = #grid\n    local M = N * N\n    local i\n    local j\n    local min = math.inf\n    local min_path = {}\n    for i = 1, M do\n        min = math.inf\n        for j = 1, N do\n            if grid[j][i] < min then\n                min = grid[j][i]\n                min_path = {i, j}\n            end\n        end\n        if min == math.inf then\n            return min_path\n        end\n    end\n    return min_path\nend",
    "    local result = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j] == k then\n                for jj = 1, #grid[i], 1 do\n                    if grid[i][jj] == k then\n                        result[jj] = grid[i][jj]\n                        break\n                end\n                break\n            end\n        end\n    end\n    return result\nend",
    "    local path = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            path[i, j] = grid[i][j]\n            if i > 1 and grid[i - 1][j] < path[i - 1, j] then\n                path[i, j] = path[i - 1, j]\n            if j > 1 and grid[i][j - 1] < path[i, j - 1] then\n                path[i, j] = path[i, j - 1]\n            if i > 1 and j > 1 and grid[i - 1][j - 1] < path[i - 1, j - 1] then\n                path[i, j] = path[i - 1, j - 1]\n        end\n    end\n    return path[k, #path]\nend",
    "    local i, j, path = 1, 1, {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            path[path[i, j]] = grid[i][j]\n            if path[i, j] == k then\n                return path\n            end\n        end\n    end\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = grid[i % N][(i - 1) / N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n            if grid[j % N][(j - 1) / N] < result[j] then\n                result[j] = grid[j % N][(j - 1) / N]\n            end\n        end\n    end\n    return result\nend",
    "    local N = #grid\n    local M = N * N\n    local i = 1\n    local j = 1\n    local res = {}\n    while i <= k and j <= M do\n        if grid[i][j] == 1 then\n            res[i] = j\n            i = i + 1\n        else\n            j = j + 1\n    end\n    return res\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = grid[i % N][(i - 1) / N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n            if grid[j % N][(j - 1) / N] < result[j] then\n                result[j] = grid[j % N][(j - 1) / N]\n            end\n        end\n    end\n    return result\nend",
    "    local i, j, path = 1, 1, {}\n    for i = 1, #grid, 2 do\n        for j = 1, #grid[i], 2 do\n            if grid[i][j] < grid[i-1][j] and grid[i][j] < grid[i][j-1] then\n                path[path.length] = grid[i][j]\n                path.length = path.length + 1\n                if path.length == k then\n                    return path\n                end\n            end\n        end\n    end\nend",
    "    local N = #grid\n    local M = N * N\n    local i = 1\n    local j = 1\n    local result = {}\n    while i <= M and j <= M and k > 0 do\n        if grid[i][j] == k then\n            result[k] = grid[i][j]\n            i = i + 1\n            j = j + 1\n            k = k - 1\n        elseif grid[i][j] < k then\n            i = i + 1\n        elseif grid[i][j] > k then\n            j = j + 1\n        end\n    end\n    return result\nend",
    "    local t = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            t[i, j] = grid[i][j]\n        end\n    end\n    for i = 2, k, 1 do\n        for j = 1, #grid, 1 do\n            if grid[i][j] > grid[i-1][j] then\n                t[i, j] = grid[i-1][j]\n            elseif grid[i][j] > grid[i][j-1] then\n                t[i, j] = grid[i][j-1]\n            else\n                t[i, j] = grid[i-1][j-1]\n            end\n        end\n    end\n    return t\nend",
    "    local N = #grid\n    local M = N * N\n    local i = 1\n    local j = 1\n    local path = {}\n    while i <= k and j <= M do\n        if grid[i][j] > grid[i-1][j] then\n            path[i] = j\n            i = i + 1\n        elseif grid[i][j] > grid[i][j-1] then\n            path[i] = j\n            j = j + 1\n        elseif grid[i][j] > grid[i-1][j-1] then\n            path[i] = j\n            i = i + 1\n            j = j + 1\n        else\n            path[i] = j\n            i = i + 1\n            j = j + 1\n    end\n    return path\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = grid[i % N][i // N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n            if grid[j % N][j // N] < result[j] then\n                result[j] = grid[j % N][j // N]\n            end\n        end\n    end\n    return result\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = grid[i % N][i / N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n            if grid[j % N][j / N] < result[j] then\n                result[j] = grid[j % N][j / N]\n            end\n        end\n    end\n    return result\nend",
    "    local N = #grid\n    local M = N * N\n    local i = 1\n    local j = 1\n    local path = {}\n    while i <= k and j <= M do\n        if grid[i][j] > grid[i-1][j] then\n            path[i] = j\n            j = j + 1\n        else\n            i = i + 1\n    end\n    return path\nend",
    "    local path = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            path[i, j] = grid[i][j]\n        end\n    end\n    for i = 1, #path, 1 do\n        for j = 1, #path[i], 1 do\n            path[i, j] = math.min(path[i, j], path[i-1, j] + path[i, j-1])\n        end\n    end\n    return path[k, k]\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    local i = 1\n    while i <= k do\n        local j = 1\n        while j <= N * N do\n            if grid[j % N][j / N] == i then\n                result[i] = grid[j % N][j / N]\n                j = M\n            end\n            j = j + 1\n        end\n        i = i + 1\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j] == k then\n                result[k] = i\n                result[k] = j\n                break\n        end\n    end\n    return result\nend",
    "    local path = {}\n    local visited = {}\n    local i = 1\n    while i <= k\n        local cell = grid[i]\n        if visited[cell] == false then\n            visited[cell] = true\n            path[i] = cell\n            i = i + 1\n        end\n    end\n    return path\nend",
    "    local N = #grid\n    local M = N * N\n    local i = 1\n    local j = 1\n    local path = {}\n    while i <= k and j <= M do\n        if grid[i][j] > grid[i-1][j] then\n            path[i] = j\n            i = i + 1\n        elseif grid[i][j] > grid[i][j-1] then\n            path[i] = j\n            j = j + 1\n        else\n            path[i] = j\n            i = i + 1\n            j = j + 1\n    end\n    return path\nend",
    "    local path = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            path[i, j] = grid[i][j]\n        end\n    end\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            path[i, j] = math.min(path[i, j], path[i - 1, j] + 1)\n            path[i, j] = math.min(path[i, j], path[i, j - 1] + 1)\n        end\n    end\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            path[i, j] = math.min(path[i, j], path[i - 1, j] + 1)\n            path[i, j] = math.min(path[i, j], path[i, j - 1] + 1)\n        end\n    end\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            path[i, j] = math.min(path[i, j], path[i - 1, j] + 1)\n            path[i, j] = math.min(path[i, j], path[i, j - 1] + 1)\n        end\n    end\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            path[i, j] = math.min(path[i, j], path[i - 1, j] + 1)\n            path[i, j] = math.min(path[i, j], path[i, j - 1] + 1)\n        end\n    end\n    return path[k, k]\nend",
    "    local N = #grid\n    local M = N * N\n    local i = 1\n    local j = 1\n    local result = {}\n    while i <= k and j <= M do\n        if grid[i][j] > grid[i-1][j] then\n            result[i] = grid[i][j]\n            i = i + 1\n        elseif grid[i][j] > grid[i][j-1] then\n            result[i] = grid[i][j]\n            j = j + 1\n        else\n            result[i] = grid[i-1][j]\n            i = i + 1\n            j = j + 1\n    end\n    return result\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = grid[i % N][i / N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n            if grid[j % N][j / N] < result[j] then\n                result[j] = grid[j % N][j / N]\n            end\n        end\n    end\n    return result\nend",
    "    local N = #grid\n    local M = N * N\n    local i = 1\n    local j = 1\n    local path = {}\n    local min = M\n    while i <= k and j <= M - k + 1 do\n        if grid[i][j] < grid[i][j + 1] then\n            path[i] = j\n            if grid[i][j] < min then\n                min = grid[i][j]\n            end\n        elseif grid[i][j] < grid[i + 1][j] then\n            path[i] = j\n            if grid[i][j] < min then\n                min = grid[i][j]\n            end\n        elseif grid[i][j] < grid[i][j - 1] then\n            path[i] = j\n            if grid[i][j] < min then\n                min = grid[i][j]\n            end\n        end\n        j = j + 1\n        i = i + 1\n    end\n    return path\nend",
    "    local path = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            path[i, j] = grid[i][j]\n        end\n    end\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            for k = 1, #path[i, j], 1 do\n                path[i, j] = math.min(path[i, j], path[i, k] + path[k, j])\n            end\n        end\n    end\n    return path[1, 1]\nend",
    "    local N = #grid\n    local M = N * N\n    local i, j, path = 1, 1, 1\n    local lst = {}\n    for i = 1, N do\n        for j = 1, N do\n            lst[path] = grid[i][j]\n            if path == k then\n                return lst\n            end\n            path = path + 1\n        end\n    end\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = grid[i % N][i / N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n            if grid[j % N][j / N] < result[j] then\n                result[j] = grid[j % N][j / N]\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j] == k then\n                result = {grid[i][j]}\n                for j = 1, #grid[i], 1 do\n                    if grid[i][j] < k then\n                        result = {grid[i][j]}\n                    end\n                end\n                for i = 1, #grid, 1 do\n                    for j = 1, #grid[i], 1 do\n                        if grid[i][j] < k then\n                            result = {grid[i][j]}\n                        end\n                    end\n                end\n                return result\n            end\n        end\n    end\nend",
    "    local path = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            path[i, j] = grid[i][j]\n        end\n    end\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if path[i, j] == path[i-1, j] or path[i, j] == path[i, j-1] then\n                path[i, j] = path[i-1, j]\n            end\n        end\n    end\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if path[i, j] == path[i, j-1] then\n                path[i, j] = path[i, j-1]\n            end\n        end\n    end\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if path[i, j] == path[i-1, j] then\n                path[i, j] = path[i-1, j]\n            end\n        end\n    end\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if path[i, j] == path[i-1, j] then\n                path[i, j] = path[i-1, j]\n            end\n        end\n    end\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if path[i, j] == path[i, j-1] then\n                path[i, j] = path[i, j-1]\n            end\n        end\n    end\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if path[i, j] == path[i-1, j] then\n                path[i, j] = path[i-1, j]\n            end\n        end\n    end\n    for i = 1, #grid, 1 do\n        for j = 1",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = grid[i % N][i / N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n            if grid[j % N][j / N] < result[j] then\n                result[j] = grid[j % N][j / N]\n            end\n        end\n    end\n    return result\nend",
    "    local i, j, path = 1, 1, {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            path[i] = j\n            if i > 1 and grid[i - 1][j] < grid[i][j] then\n                path[i] = path[i - 1]\n            end\n            if j > 1 and grid[i][j - 1] < grid[i][j] then\n                path[i] = path[i]\n            end\n            if i > 1 and j > 1 and grid[i - 1][j - 1] < grid[i][j] then\n                path[i] = path[i - 1]\n            end\n        end\n    end\n    return path[k]\nend",
    "    local path = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            path[i, j] = grid[i][j]\n        end\n    end\n    for i = 1, k, 1 do\n        for j = 1, #path, 1 do\n            path[j] = path[j] + path[j - 1]\n        end\n    end\n    return path\nend",
    "    local path = {}\n    for i = 1, k, 1 do\n        path[i] = grid[1][1]\n        for j = 2, grid.length - 1, 1 do\n            path[i] = min(path[i], grid[j][i])\n        end\n    end\n    return path\nend",
    "    local path = {}\n    for i = 1, #grid, 2 do\n        for j = 1, #grid[i], 2 do\n            if grid[i][j] == k then\n                path = path or {i, j}\n                if i > 1 then\n                    path = path or {i - 1, j}\n                if j > 1 then\n                    path = path or {i, j - 1}\n                if i < #grid, 2 then\n                    path = path or {i + 1, j}\n                if j < #grid[i], 2 then\n                    path = path or {i, j + 1}\n            end\n        end\n    end\n    return path\nend",
    "    local result = {}\n    local i = 1\n    local j = 1\n    while i <= k and j <= k do\n        if grid[i][j] > grid[i-1][j] then\n            result[i] = j\n            i = i + 1\n        else\n            j = j + 1\n        end\n    end\n    return result\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = grid[i % N][i / N]\n    end\n    for i = 1, k do\n        for j = 1, N do\n            for k = 1, N do\n                if grid[j][k] < result[i] then\n                    result[i] = grid[j][k]\n                end\n            end\n        end\n    end\n    return result\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = grid[i % N][i / N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n            if grid[j % N][j / N] < result[j] then\n                result[j] = grid[j % N][j / N]\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j] == k then\n                result[i] = j\n                break\n        end\n    end\n    return result\nend",
    "    local N = #grid\n    local M = N * N\n    local i = 1\n    local j = 1\n    local path = {}\n    while i <= k and j <= M do\n        path[i] = grid[j]\n        if j == M then\n            return path\n        else\n            j = j + 1\n        end\n        if j <= M and grid[j] == grid[j - 1] then\n            j = j + 1\n        end\n        i = i + 1\n    end\nend",
    "    local N = #grid\n    local M = N * N\n    local i = 1\n    local j = 1\n    local path = {}\n    while i <= k and j <= M do\n        if grid[i][j] == 1 then\n            path[i] = j\n            i = i + 1\n        else\n            j = j + 1\n    end\n    return path\nend",
    "    local path = {}\n    local i = 1\n    while i <= k\n        path[i] = grid[1][1]\n        grid = grid[1..]\n        i = i + 1\n    return path\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = grid[i % N][i / N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n            if grid[j % N][j / N] < result[j] then\n                result[j] = grid[j % N][j / N]\n            end\n        end\n    end\n    return result\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = grid[i % N][i / N]\n    end\n    for i = 1, M do\n        for j = 1, M do\n            if grid[i % N][j / N] < grid[j % N][i / N] then\n                result[i] = result[i] < result[j]\n            end\n        end\n    end\n    return result[1] .. \" \" .. result[k]\nend",
    "    local N = #grid\n    local M = N * N\n    local i, j, min_path\n    local min_path_table = {}\n    for i = 1, M do\n        min_path_table[i] = i\n    end\n    for i = 1, N do\n        for j = 1, N do\n            if grid[i][j] == 0 then\n                min_path = math.inf\n                for p in range(1, k + 1) do\n                    min_path = math.min(min_path, minPath(grid, p, i, j))\n                end\n                min_path_table[min_path] = i * N + j\n            end\n        end\n    end\n    return min_path_table\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = grid[i % N][(i - 1) / N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n            if grid[j % N][(j - 1) / N] < result[j] then\n                result[j] = grid[j % N][(j - 1) / N]\n            end\n        end\n    end\n    return result\nend",
    "    local N = #grid\n    local M = N * N\n    local i\n    local j\n    local res = {}\n    for i = 1, M do\n        res[i] = grid[i % N][i / N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n            if res[j] < res[j + 1] then\n                res[j + 1] = res[j]\n                j = j - 1\n            end\n            if res[j] < res[j - 1] then\n                res[j - 1] = res[j]\n                j = j + 1\n            end\n        end\n    end\n    return res\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = grid[i % N][i / N]\n    end\n    for i = 2, M do\n        for j = 1, M do\n            if grid[i % N][j / N] < grid[j % N][i / N] then\n                result[i] = result[i] < result[j]\n            end\n        end\n    end\n    return result[1] .. \" \" .. result[k]\nend",
    "    local N = #grid\n    local M = N * N\n    local i = 1\n    local j = 1\n    local path = {}\n    while i <= k and j <= M do\n        if grid[i][j] == 1 then\n            path[i] = j\n            i = i + 1\n        else\n            j = j + 1\n    end\n    return path\nend",
    "    local result = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j] == k then\n                for jj = 1, #grid[i], 1 do\n                    result[jj] = grid[i][jj]\n                end\n                for ii = 1, #grid, 1 do\n                    for jj = 1, #grid[ii], 1 do\n                        if grid[ii][jj] == k then\n                            result[jj] = grid[ii][jj]\n                        end\n                    end\n                end\n                break\n            end\n        end\n    end\n    return result\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = grid[i % N][(i - 1) / N]\n    end\n    for i = 1, M do\n        for j = 1, M do\n            if grid[i % N][j] < grid[(i - 1) / N][j] and grid[i % N][j] < grid[i / N][(j - 1) / N] then\n                result[i] = math.min(result[i], result[j] + 1)\n            end\n        end\n    end\n    return result[k]\nend",
    "    local i, j, min_path = math.inf, math.inf, {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j] < min_path[1] then\n                min_path = grid[i][j]\n            end\n        end\n    end\n    for i = 2, k, 1 do\n        for j = 1, #grid, 1 do\n            if grid[i-1][j] < grid[i][j] then\n                grid[i][j] = grid[i-1][j]\n            end\n        end\n    end\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j] < min_path[1] then\n                min_path = grid[i][j]\n            end\n        end\n    end\n    return min_path\nend",
    "    local path = {}\n    local i = 1\n    while i <= k\n        path[i] = grid[i][1]\n        i = i + 1\n    return path\nend",
    "    local N = #grid\n    local M = N * N\n    local i = 1\n    local j = 1\n    local path = {}\n    while i <= k and j <= M do\n        if grid[i][j] == 1 then\n            path[i] = j\n            i = i + 1\n        else\n            j = j + 1\n    end\n    return path\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = grid[i % N][i / N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n            if grid[j % N][j / N] < result[j] then\n                result[j] = grid[j % N][j / N]\n            end\n        end\n    end\n    return result\nend",
    "    local N = #grid\n    local M = N * N\n    local i\n    local j\n    local res = {}\n    for i = 1, M do\n        res[i] = grid[i % N][i / N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n            if res[j] < res[j + 1] then\n                res[j + 1] = res[j]\n                j = j - 1\n            end\n            if j == 1 then\n                res[j] = grid[i % N][i / N]\n            end\n        end\n    end\n    return res\nend",
    "    local N = #grid\n    local M = N * N\n    local i, j\n    local res = {}\n    for i = 1, M do\n        res[i] = grid[i % N][i / N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n            if res[j] > res[j + 1] then\n                res[j + 1] = res[j]\n                j = j - 1\n            end\n            if res[j] > res[j - 1] then\n                res[j - 1] = res[j]\n                j = j + 1\n            end\n        end\n    end\n    return res\nend",
    "    local tbl = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j] == k then\n                tbl[i] = j\n                break\n        end\n    end\n    return tbl\nend",
    "    local N = #grid\n    local M = N * N\n    local i = 1\n    local j = 1\n    local res = {}\n    while i <= M and j <= M do\n        if grid[i] ~= nil and grid[j] ~= nil then\n            if grid[i][j] < grid[i][j-1] then\n                res[k] = grid[i][j]\n                i = i + 1\n            elseif grid[i][j] < grid[i-1][j] then\n                res[k] = grid[i][j]\n                i = i + 1\n            elseif grid[i][j] < grid[i][j+1] then\n                res[k] = grid[i][j]\n                i = i + 1\n            elseif grid[i][j] < grid[i+1][j] then\n                res[k] = grid[i][j]\n                i = i + 1\n            elseif grid[i][j] < grid[i-1][j-1] then\n                res[k] = grid[i][j]\n                i = i + 1\n            elseif grid[i][j] < grid[i][j-1] then\n                res[k] = grid[i][j]\n                i = i + 1\n            elseif grid[i][j] < grid[i+1][j-1] then\n                res[k] = grid[i][j]\n                i = i + 1\n            elseif grid[i][j] < grid[i-1][j+1] then\n                res[k] = grid[i][j]\n                i = i + 1\n            elseif grid[i][j] < grid[i][j+1] then\n                res[k] = grid[i][j]\n                i = i + 1\n            elseif grid[i][j] < grid[i+1][j+1] then\n                res[k] = grid[i][j]\n                i = i + 1\n            else\n                j = j + 1\n        else\n            i = i + 1\n        end\n    end\n    return res\nend",
    "    local N = #grid\n    local M = N * N\n    local res = {}\n    for i = 1, M do\n        res[i] = grid[i % N][i / N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n            if res[j] < res[j + 1] then\n                res[j + 1] = res[j]\n                j = j + 1\n            end\n        end\n    end\n    return res\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = grid[i % N][i / N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n            if grid[j % N][j / N] < result[j] then\n                result[j] = grid[j % N][j / N]\n            end\n        end\n    end\n    return result\nend",
    "    local N = #grid\n    local M = N * N\n    local i\n    local j\n    local res = {}\n    for i = 1, M do\n        res[i] = grid[i % N][i / N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n            if res[j] > res[j + 1] then\n                res[j + 1] = res[j]\n            end\n            if res[j] > res[j - 1] then\n                res[j - 1] = res[j]\n            end\n            if res[j] > res[j + N] then\n                res[j + N] = res[j]\n            end\n            if res[j] > res[j - N] then\n                res[j - N] = res[j]\n            end\n        end\n    end\n    return res\nend",
    "    local N = #grid\n    local M = N * N\n    local i = 1\n    local j = 1\n    local path = {}\n    while i <= k and j <= M do\n        if grid[i][j] == 1 then\n            path[i] = j\n            i = i + 1\n        else\n            j = j + 1\n    end\n    return path\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = grid[i % N][i / N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n            if grid[j % N][j / N] < result[j] then\n                result[j] = grid[j % N][j / N]\n            end\n        end\n    end\n    return result\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    local i = 1\n    while i <= k\n        local j = 1\n        while j <= N\n            local value = grid[i-1][j-1]\n            if value == M then\n                result[i] = j\n                break\n            elseif value > M then\n                break\n            else\n                j = j + 1\n            end\n        end\n        i = i + 1\n    end\n    return result\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = grid[i % N][i / N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n            if grid[j % N][j / N] < result[j] then\n                result[j] = grid[j % N][j / N]\n            end\n        end\n    end\n    return result\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = i\n    end\n    for i = 1, N do\n        for j = 1, N do\n            if grid[i][j] == k then\n                for jj = 1, N do\n                    if grid[jj][j] == k then\n                        result[grid[jj][jj]] = grid[i][j]\n                    end\n                end\n            end\n        end\n    end\n    return result\nend",
    "    local N = #grid\n    local M = N * N\n    local i\n    local j\n    local lst = {}\n    for i = 1, M do\n        lst[i] = grid[i % N][i / N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n            if grid[j % N][j / N] < lst[j] then\n                lst[j] = grid[j % N][j / N]\n            end\n        end\n    end\n    return lst\nend",
    "    local result = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            result[i] = result[i] or {}\n            result[i][j] = grid[i][j]\n        end\n    end\n    for i = 1, #result, 1 do\n        for j = 1, #result[i], 1 do\n            for k = 1, #result[i][j], 1 do\n                result[i][j] = result[i][j] or {}\n                result[i][j][k] = result[i][j][k] or {}\n                result[i][j][k][1] = result[i][j][k][1] or {}\n                result[i][j][k][1][1] = result[i][j][k][1][1] or {}\n                result[i][j][k][1][1][1] = result[i][j][k][1][1][1] or {}\n                result[i][j][k][1][1][1][1] = result[i][j][k][1][1][1][1] or {}\n                result[i][j][k][1][1][1][1][1] = result[i][j][k][1][1][1][1][1] or {}\n                result[i][j][k][1][1][1][1][1][1] = result[i][j][k][1][1][1][1][1][1] or {}\n                result[i][j][k][1][1][1][1][1][1][1] = result[i][j][k][1][1][1][1][1][1][1] or {}\n                result[i][j][k][1][1][1][1][1][1][1][1] = result[i][j][k][1][1][1][1][1][1][1][1] or {}\n                result[i][j][k][1][1][1][1][1][1][1][1][1] = result[i][j][k][1][1][1][1][1][1][1][1][1]",
    "    local N = #grid\n    local M = N * N\n    local i = 1\n    local j = 1\n    local result = {}\n    while i <= k and j <= M do\n        if grid[i][j] == 1 then\n            result[i] = j\n            i = i + 1\n        else\n            j = j + 1\n    end\n    return result\nend",
    "    local N = #grid\n    local M = N * N\n    local i = 1\n    local j = 1\n    local res = {}\n    while i <= k and j <= M do\n        if grid[i][j] == 1 then\n            res[i] = j\n            i = i + 1\n        else\n            j = j + 1\n    end\n    return res\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = grid[i % N][i / N]\n    end\n    for i = 1, k do\n        for j = 1, M do\n            if grid[j % N][j / N] < result[j] then\n                result[j] = grid[j % N][j / N]\n            end\n        end\n    end\n    return result\nend",
    "    local i, j, min_path = math.inf, math.inf, {}\n    for i = 1, #grid do\n        for j = 1, #grid[i] do\n            if grid[i][j] < min_path[k] then\n                min_path[k] = grid[i][j]\n                min_path[k + 1] = i\n                min_path[k + 2] = j\n            end\n        end\n    end\n    return min_path\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    for i = 1, M do\n        result[i] = grid[i % N][i / N]\n    end\n    for i = 2, M do\n        for j = 1, N do\n            if grid[j][i] < result[i] then\n                result[i] = grid[j][i]\n            end\n        end\n    end\n    for i = 1, k do\n        for j = 1, N do\n            if result[i] < result[j] then\n                result[i] = result[j]\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j] == k then\n                for jj = 1, #grid[i], 1 do\n                    if grid[i][jj] == k then\n                        result[jj] = grid[i][jj]\n                        break\n                end\n                break\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j] == k then\n                for jj = 1, #grid[i], 1 do\n                    result[jj] = grid[i][jj]\n                end\n                break\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    local i = 1\n    while i <= k\n        local j = 1\n        while j <= k\n            if grid[i][j] > grid[i-1][j] and grid[i][j] > grid[i][j-1] and grid[i][j] > grid[i-1][j-1]\n                result[i] = j\n                break\n            j = j + 1\n        i = i + 1\n    return result\nend",
    "    local N = #grid\n    local M = N * N\n    local i, j, lst = 1, 1, {}\n    for i = 1, N do\n        for j = 1, N do\n            lst[i] = j\n            if i > 1 and grid[i - 1][j] < grid[i][j] then\n                lst[i] = lst[i - 1]\n            if j > 1 and grid[i][j - 1] < grid[i][j] then\n                lst[i] = lst[i]\n            if i > 1 and j > 1 and grid[i - 1][j - 1] < grid[i][j] then\n                lst[i] = lst[i - 1]\n            if i > 1 and j < N and grid[i - 1][j + 1] < grid[i][j] then\n                lst[i] = lst[i - 1]\n            if i < N and j > 1 and grid[i + 1][j - 1] < grid[i][j] then\n                lst[i] = lst[i + 1]\n            if i < N and j < N and grid[i + 1][j + 1] < grid[i][j] then\n                lst[i] = lst[i + 1]\n        end\n    end\n    for i = 1, k do\n        lst[i] = lst[i]\n    end\n    return lst\nend",
    "    local path = {}\n    local i = 1\n    while i <= k do\n        path[i] = grid[1][1]\n        grid = grid[1:][1:][1:]\n        i = i + 1\n    end\n    return path\nend",
    "    local tbl = {}\n    local i = 1\n    while i <= k\n        tbl[i] = grid[1][1]\n        grid = grid[1:][1:][1:]\n        i = i + 1\n    return tbl\nend",
    "    local N = #grid\n    local M = N * N\n    local i, j\n    local lst = {}\n    for i = 1, N do\n        for j = 1, N do\n            lst[i * M + j] = grid[i][j]\n        end\n    end\n    for i = 1, k do\n        for j = 1, N do\n            lst[i * M + j] = math.min(lst[(i - 1) * M + j], lst[i * M + (j - 1)], lst[(i - 1) * M + (j - 1)])\n        end\n    end\n    return lst\nend",
    "    local N = #grid\n    local M = N * N\n    local i, j, lst = 1, 1, {}\n    for i = 1, N do\n        for j = 1, N do\n            lst[i] = lst[i] or grid[i][j]\n            if i > 1 and grid[i - 1][j] < lst[i] then lst[i] = grid[i - 1][j]\n            if j > 1 and grid[i][j - 1] < lst[i] then lst[i] = grid[i][j - 1]\n        end\n    end\n    for i = 1, k do\n        lst = lst or {}\n        for j = 1, N do\n            lst[j] = lst[j] or grid[i][j]\n            if i > 1 and grid[i - 1][j] < lst[j] then lst[j] = grid[i - 1][j]\n            if j > 1 and grid[i][j - 1] < lst[j] then lst[j] = grid[i][j - 1]\n        end\n    end\n    return lst\nend",
    "    local result = {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j] == k then\n                for jj = 1, #grid[i], 1 do\n                    if grid[i][jj] < grid[i][j] then\n                        grid[i][j] = grid[i][jj]\n                    end\n                end\n                result[k] = grid[i][j]\n                break\n            end\n        end\n    end\n    return result\nend",
    "    local N = #grid\n    local M = N * N\n    local i = 1\n    local j = 1\n    local path = {}\n    local visited = {}\n    local min = M\n    while i <= k and j <= M - k:\n        if visited[i] == false and visited[j] == false:\n            visited[i] = true\n            visited[j] = true\n            path[i] = j\n            if i == k and j == M - k:\n                min = j\n            else:\n                min = math.min(min, j)\n            i = i + 1\n            j = j + 1\n        else:\n            j = path[i] + 1\n            i = i + 1\n    return path[k]\nend",
    "    local N = #grid\n    local M = N * N\n    local result = {}\n    local i = 1\n    while i <= M do\n        result[i] = grid[i % N][i / N]\n        i = i + 1\n    end\n    local i = 1\n    while i <= M do\n        local j = i + 1\n        while j <= M do\n            if result[i] < result[j] then\n                result[i] = result[j]\n            end\n            j = j + 1\n        end\n        i = i + 1\n    end\n    return result[k]\nend",
    "    local i, j, min_path = math.inf, math.inf, {}\n    for i = 1, #grid, 1 do\n        for j = 1, #grid[i], 1 do\n            if grid[i][j] < min_path[k] then\n                min_path[k] = grid[i][j]\n                min_path[k - 1] = i\n                min_path[k - 2] = j\n            end\n        end\n    end\n    return min_path\nend"
  ],
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ]
}