{
  "language": "lua",
  "name": "HumanEval_125_split_words",
  "results": [
    {
      "exit_code": 1,
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpuhn23em7.lua:14: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907502
    },
    {
      "exit_code": 1,
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gsub(txt, '(%s+)', ' ') do\n        table.insert(words, word)\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm970z6m2.lua:13: attempt to call a string value\nstack traceback:\n\t/tmp/tmpm970z6m2.lua:13: in local 'candidate'\n\t/tmp/tmpm970z6m2.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907502
    },
    {
      "exit_code": 1,
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1,#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp8rym8y4a.lua:14: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907502
    },
    {
      "exit_code": 1,
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1,#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp8rym8y4a.lua:14: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907502
    },
    {
      "exit_code": 1,
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1, #txt, 2 do\n        if txt[i] ~= ' ' then\n            if txt[i] ~= ',' then\n                words[#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpfp3u9rs4.lua:17: ']' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907502
    },
    {
      "exit_code": 1,
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpztmlvilu.lua:14: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907502
    },
    {
      "exit_code": 1,
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local t = {}\n    for i=1,#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp8bh7w12j.lua:14: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907502
    },
    {
      "exit_code": 1,
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i=1,#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpw0ytbzua.lua:14: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907502
    },
    {
      "exit_code": 1,
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gsub(txt, '[^a-zA-Z0-9]', ' ') do\n        words[#                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmprj4duly0.lua:15: ']' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907502
    },
    {
      "exit_code": 1,
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gsub(txt, '(\\\\s+)', ' ') do\n        table.insert(words, word)\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppijb_95v.lua:13: attempt to call a string value\nstack traceback:\n\t/tmp/tmppijb_95v.lua:13: in local 'candidate'\n\t/tmp/tmppijb_95v.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907502
    },
    {
      "exit_code": 1,
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1,#                                                                                                                                                                                    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpw0htkmip.lua:14: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907502
    },
    {
      "exit_code": 1,
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    local word = \"\"\n    for i = 1,#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp3d78tr27.lua:15: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907502
    },
    {
      "exit_code": 1,
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gmatch(txt, \"[^ ,]*\") do\n        words[word] = true\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmqa_0flk.lua:22: expected: {\"Hello\", \"world!\"}\nactual: {Hello=true, \"world!\"=true}\nstack traceback:\n\t/tmp/tmpmqa_0flk.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907502
    },
    {
      "exit_code": 1,
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local tbl = {}\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpasy_blzb.lua:14: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907502
    },
    {
      "exit_code": 1,
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gsub(txt, '[^a-zA-Z0-9]', ' ') do\n        words[#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmphw8_sag1.lua:15: ']' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907502
    },
    {
      "exit_code": 1,
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gsub(txt, ' ', '%s') do\n        if word then\n            words[#                                                                                                                                                      \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpweawfrwn.lua:16: ']' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907502
    },
    {
      "exit_code": 1,
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1,#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp8rym8y4a.lua:14: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907502
    },
    {
      "exit_code": 1,
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local t = {}\n    for i = 1,#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmprpvjioed.lua:14: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907502
    },
    {
      "exit_code": 1,
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local t = {}\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpfxso3k_0.lua:14: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907502
    },
    {
      "exit_code": 1,
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    local word = \"\"\n    for c in txt:\n        if c == \" \":\n            if word ~= \"\" then\n                words[#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp_m9sfryi.lua:15: <name> expected near 'if'\n",
      "stdout": "",
      "timestamp": 1661907502
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gsub(txt, '[^a-zA-Z0-9 ]', '') do\n        if word ~= '' then\n            words[#words + 1] = word\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3has0cmu.lua:13: attempt to call a string value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmp3has0cmu.lua:13: in local 'candidate'\n\t/tmp/tmp3has0cmu.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local t = {}\n    for i = 1,#txt do\n        if t[txt[i]] == nil then\n            t[txt[i]] = 1\n        else\n            t[txt[i]] = t[txt[i]] + 1\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk0swxt6.lua:15: table index is nil\nstack traceback:\n\t/tmp/tmpwk0swxt6.lua:15: in local 'candidate'\n\t/tmp/tmpwk0swxt6.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gsub(txt, '[^a-zA-Z0-9 ]', '') do\n        if word ~= '' then\n            words[#words + 1] = word\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3has0cmu.lua:13: attempt to call a string value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmp3has0cmu.lua:13: in local 'candidate'\n\t/tmp/tmp3has0cmu.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1,#txt do\n        if txt[i] ~= ' ' then\n            if txt[i] ~= ',' then\n                words[#words+1] = txt[i]\n            else\n                words[#words+1] = txt[i]\n            end\n        else\n            words[#words+1] = txt[i]\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaebaew47.lua:30: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpaebaew47.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1,#txt,2 do\n        if txt[i] ~= ' ' then\n            words[#words+1] = txt[i]\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp12h5t67k.lua:24: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp12h5t67k.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1,#txt do\n        if txt[i] ~= ' ' then\n            if words[txt[i]] == nil then\n                words[txt[i]] = 1\n            else\n                words[txt[i]] = words[txt[i]] + 1\n            end\n        else\n            if words[txt[i+1]] == nil then\n                words[txt[i+1]] = 1\n            else\n                words[txt[i+1]] = words[txt[i+1]] + 1\n            end\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcxos0_5q.lua:16: table index is nil\nstack traceback:\n\t/tmp/tmpcxos0_5q.lua:16: in local 'candidate'\n\t/tmp/tmpcxos0_5q.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1,#txt do\n        if txt[i] ~= ' ' then\n            if txt[i] ~= ',' then\n                words[#words+1] = txt[i]\n            else\n                words[#words+1] = txt[i+1]\n                words[#words+1] = txt[i]\n            end\n        else\n            words[#words+1] = txt[i]\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3hq64rk3.lua:31: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp3hq64rk3.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gsub(txt, ' ', '%s') do\n        words[word] = true\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1,#txt do\n        if txt[i] ~= ' ' then\n            words[#words+1] = txt[i]\n        else\n            words[#words+1] = txt[i:i+2]\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp6ob78644.lua:17: function arguments expected near '+'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i=1,#txt do\n        if txt[i] ~= ' ' then\n            if txt[i] ~= ',' then\n                words[#words+1] = txt[i]\n            else\n                words[#words+1] = txt[i+1]\n            end\n        else\n            words[#words+1] = txt[i]\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprsdvv91g.lua:30: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmprsdvv91g.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local tbl = {}\n    for i = 1,#txt do\n        if txt[i] ~= ' ' then\n            tbl[#tbl+1] = txt[i]\n        end\n    end\n    return tbl\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvj591478.lua:24: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpvj591478.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1,#txt,2 do\n        if txt[i] ~= txt[i+1] then\n            words[#words+1] = txt[i]\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphpw5dgda.lua:24: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmphpw5dgda.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gsub(txt, '[^a-zA-Z0-9]', '') do\n        if word then\n            words[#words + 1] = word\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4r6r2psq.lua:13: attempt to call a string value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmp4r6r2psq.lua:13: in local 'candidate'\n\t/tmp/tmp4r6r2psq.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    local word = \"\"\n    for i = 1, #txt, 2 do\n        if txt[i] ~= \" \" then\n            word = word .. txt[i]\n        else\n            if word ~= \"\" then\n                words[#words + 1] = word\n                word = \"\"\n            end\n        end\n    end\n    if word ~= \"\" then\n        words[#words + 1] = word\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqpqqkol9.lua:16: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpqpqqkol9.lua:16: in local 'candidate'\n\t/tmp/tmpqpqqkol9.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1,#txt do\n        if txt[i] ~= ' ' then\n            if words[txt[i]] == nil then\n                words[txt[i]] = 1\n            else\n                words[txt[i]] = words[txt[i]] + 1\n            end\n        else\n            if words[txt[i-1]] == nil then\n                words[txt[i-1]] = 1\n            else\n                words[txt[i-1]] = words[txt[i-1]] + 1\n            end\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe7hajg99.lua:16: table index is nil\nstack traceback:\n\t/tmp/tmpe7hajg99.lua:16: in local 'candidate'\n\t/tmp/tmpe7hajg99.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    local word_count = 0\n    for i = 1,#txt do\n        if txt[i] ~= ' ' then\n            if txt[i] ~= ',' then\n                if txt[i] ~= '.' then\n                    words[#words + 1] = txt[i]\n                else\n                    words[#words + 1] = txt[i]\n                end\n            else\n                words[#words + 1] = txt[i]\n            end\n        else\n            if txt[i] ~= ',' then\n                if txt[i] ~= '.' then\n                    words[#words + 1] = txt[i]\n                else\n                    words[#words + 1] = txt[i]\n                end\n            else\n                words[#words + 1] = txt[i]\n            end\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz87sqshh.lua:43: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpz87sqshh.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gsub(txt, '(%s+)', ' ') do\n        if word then\n            table.insert(words, word)\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpna9ta5nq.lua:13: attempt to call a string value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmpna9ta5nq.lua:13: in local 'candidate'\n\t/tmp/tmpna9ta5nq.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    local word = \"\"\n    for i = 1,#txt do\n        if txt[i] ~= \" \" then\n            word = word .. txt[i]\n        else\n            if word ~= \"\" then\n                words[#words + 1] = word\n                word = \"\"\n            end\n        end\n    end\n    if word ~= \"\" then\n        words[#words + 1] = word\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphgg_cz42.lua:16: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmphgg_cz42.lua:16: in local 'candidate'\n\t/tmp/tmphgg_cz42.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gsub(txt, '[^a-zA-Z0-9 ]', '') do\n        words[word] = true\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbhi8c4fi.lua:13: attempt to call a string value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmpbhi8c4fi.lua:13: in local 'candidate'\n\t/tmp/tmpbhi8c4fi.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1, #txt, 2 do\n        if txt[i] ~= ' ' then\n            words[#words+1] = txt[i]\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3nnl8iey.lua:24: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp3nnl8iey.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    local word_count = 0\n    local word_count_lower = 0\n    local word_count_upper = 0\n    local word_count_lower_odd = 0\n    local word_count_upper_odd = 0\n    local i = 1\n    while i <= #txt do\n        if txt[i] ~= ' ' then\n            if txt[i] ~= ',' then\n                if txt[i] ~= '.' then\n                    if txt[i] ~= '!' then\n                        if txt[i] ~= '?' then\n                            if txt[i] ~= ':' then\n                                if txt[i] ~= ';' then\n                                    if txt[i] ~= '\\n' then\n                                        if txt[i] ~= '\\r' then\n                                            if txt[i] ~= '\\t' then\n                                                if txt[i] ~= '\\v' then\n                                                    if txt[i] ~= '\\f' then\n                                                        if txt[i] ~= '\\b' then\n                                                            if txt[i] ~= '\\a' then\n                                                                if txt[i] ~= '\\e' then\n                                                                    if txt[i] ~= '\\f' then\n                                                                        if txt[i] ~= '\\n' then\n                                                                            if txt[i] ~= '\\r' then\n                                                                                if txt[i] ~= '\\t' then\n                                                                                    if txt[i] ~= '\\v' then\n                                                                                        if txt[i] ~= '\\f' then\n                                                                                            if txt[i] ~= '\\b' then\n                                                                                                if txt[i] ~= '\\a' then\n                                                                                                    if txt[i] ~= '\\e' then\n                                                                                                        if txt[i] ~= '\\f' then\n                                                                                                    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpzs50q_xn.lua:34: invalid escape sequence near ''\\e'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    local word_count = 0\n    local word_count_lower = 0\n    local word_count_upper = 0\n    local word_count_lower_odd = 0\n    local word_count_upper_odd = 0\n    for i = 1,#txt,2 do\n        if txt[i] == ' ' then\n            if word_count > 0 then\n                words[#words+1] = txt[i-1] .. txt[i]\n                word_count = word_count - 1\n            end\n        elseif txt[i] == ',' then\n            if word_count > 0 then\n                words[#words+1] = txt[i-1] .. txt[i]\n                word_count = word_count - 1\n            end\n        elseif txt[i] == '.' then\n            if word_count > 0 then\n                words[#words+1] = txt[i-1] .. txt[i]\n                word_count = word_count - 1\n            end\n        elseif txt[i] == '!' then\n            if word_count > 0 then\n                words[#words+1] = txt[i-1] .. txt[i]\n                word_count = word_count - 1\n            end\n        elseif txt[i] == '?' then\n            if word_count > 0 then\n                words[#words+1] = txt[i-1] .. txt[i]\n                word_count = word_count - 1\n            end\n        elseif txt[i] == ':' then\n            if word_count > 0 then\n                words[#words+1] = txt[i-1] .. txt[i]\n                word_count = word_count - 1\n            end\n        elseif txt[i] == ';' then\n            if word_count > 0 then\n                words[#words+1] = txt[i-1] .. txt[i]\n                word_count = word_count - 1\n            end\n        elseif txt[i] == '(' then\n            if word_count > 0 then\n                words[#words+1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpt5qog_hi.lua:57: ']' expected near 'lu'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gsub(txt, '[^\\w]', '') do\n        if word then\n            words[#words + 1] = word\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp8ql419kc.lua:13: invalid escape sequence near ''[^\\w'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1,#txt,2 do\n        if txt[i] ~= ' ' then\n            words[#words+1] = txt[i]\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp12h5t67k.lua:24: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp12h5t67k.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gsub(txt, '[^a-zA-Z0-9]', ' ') do\n        table.insert(words, word)\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb8qpcrrm.lua:13: attempt to call a string value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmpb8qpcrrm.lua:13: in local 'candidate'\n\t/tmp/tmpb8qpcrrm.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gsub(txt, '[^a-zA-Z0-9 ]', ' ') do\n        words[word] = true\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc6waal15.lua:13: attempt to call a string value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmpc6waal15.lua:13: in local 'candidate'\n\t/tmp/tmpc6waal15.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local tbl = {}\n    for i=1,#txt do\n        if txt[i] ~= ' ' then\n            tbl[#tbl+1] = txt[i]\n        end\n    end\n    return tbl\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzte9wofw.lua:24: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpzte9wofw.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1,#txt,2 do\n        if txt[i] ~= ' ' then\n            words[#words+1] = txt[i]\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp12h5t67k.lua:24: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp12h5t67k.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    local word = \"\"\n    for c in txt do\n        if c == \" \" then\n            if word ~= \"\" then\n                words[#words + 1] = word\n                word = \"\"\n            end\n        elseif c == \",\" then\n            if word ~= \"\" then\n                words[#words + 1] = word\n                word = \"\"\n            end\n        elseif c ~= \" \" and c ~= \",\" then\n            word = word .. c\n        end\n    end\n    if word ~= \"\" then\n        words[#words + 1] = word\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc2kofipo.lua:14: attempt to call a string value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmpc2kofipo.lua:14: in local 'candidate'\n\t/tmp/tmpc2kofipo.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gsub(txt, '[^\\w\\s]', '') do\n        words[word] = true\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp8qrbt1y1.lua:13: invalid escape sequence near ''[^\\w'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gmatch(txt, '[^\\s]+') do\n        words[word] = true\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpjx5cxgk7.lua:13: invalid escape sequence near ''[^\\s'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gmatch(txt, '[^\\s]+') do\n        words[word] = true\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpjx5cxgk7.lua:13: invalid escape sequence near ''[^\\s'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gsub(txt, ' ', '%s') do\n        if word ~= '' then\n            words[#words + 1] = word\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkx94y2gn.lua:13: invalid use of '%' in replacement string\nstack traceback:\n\t/tmp/tmpkx94y2gn.lua:13: in local 'candidate'\n\t/tmp/tmpkx94y2gn.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1,#txt do\n        if txt[i] ~= ' ' then\n            if words[txt[i]] == nil then\n                words[txt[i]] = 1\n            else\n                words[txt[i]] = words[txt[i]] + 1\n            end\n        else\n            if words[txt[i-1]] == nil then\n                words[txt[i-1]] = 1\n            else\n                words[txt[i-1]] = words[txt[i-1]] + 1\n            end\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe7hajg99.lua:16: table index is nil\nstack traceback:\n\t/tmp/tmpe7hajg99.lua:16: in local 'candidate'\n\t/tmp/tmpe7hajg99.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local t = {}\n    for i = 1, #txt, 2 do\n        if t[txt[i]] == nil then\n            t[txt[i]] = 1\n        else\n            t[txt[i]] = t[txt[i]] + 1\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_895dov2.lua:15: table index is nil\nstack traceback:\n\t/tmp/tmp_895dov2.lua:15: in local 'candidate'\n\t/tmp/tmp_895dov2.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    local word = \"\"\n    for c in txt:\n        if c == \" \":\n            if word:\n                words[word] = true\n                word = \"\"\n        else:\n            word = word .. c\n    if word:\n        words[word] = true\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp4g3253z8.lua:15: <name> expected near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1,#txt,2 do\n        if txt[i] ~= ' ' then\n            words[#words+1] = txt[i]\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp12h5t67k.lua:24: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp12h5t67k.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    local word = \"\"\n    for i = 1,#txt,2 do\n        if txt[i] ~= \" \" then\n            word = word .. txt[i]\n        else\n            if word ~= \"\" then\n                words[#words+1] = word\n                word = \"\"\n            end\n        end\n    end\n    if word ~= \"\" then\n        words[#words+1] = word\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfpfmapea.lua:16: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpfpfmapea.lua:16: in local 'candidate'\n\t/tmp/tmpfpfmapea.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1,#txt do\n        if txt[i] ~= ' ' then\n            if txt[i] ~= ',' then\n                words[#words+1] = txt[i]\n            else\n                words[#words+1] = txt[i+1]\n            end\n        else\n            words[#words+1] = txt[i]\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp75hcbove.lua:30: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp75hcbove.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    local word_count = 0\n    local word_count_lower = 0\n    local word_count_upper = 0\n    local word_count_lower_odd = 0\n    local word_count_upper_odd = 0\n    local word_count_lower_even = 0\n    local word_count_upper_even = 0\n    local word_count_lower_odd_even = 0\n    local word_count_lower_odd_odd = 0\n    local word_count_upper_odd_even = 0\n    local word_count_upper_odd_odd = 0\n    local word_count_lower_even_odd = 0\n    local word_count_lower_even_even = 0\n    local word_count_upper_even_odd = 0\n    local word_count_upper_even_even = 0\n    local word_count_lower_odd_even_odd = 0\n    local word_count_lower_odd_even_even = 0\n    local word_count_lower_odd_odd_odd = 0\n    local word_count_upper_odd_even_odd = 0\n    local word_count_upper_odd_even_even = 0\n    local word_count_lower_even_odd_odd = 0\n    local word_count_lower_even_even_odd = 0\n    local word_count_upper_even_odd_odd = 0\n    local word_count_upper_even_even_odd = 0\n    local word_count_lower_odd_even_odd_even = 0\n    local word_count_lower_odd_even_even_odd = 0\n    local word_count_lower_odd_odd_odd_odd = 0\n    local word_count_upper_odd_even_odd_even = 0\n    local word_count_upper_odd_even_even_odd = 0\n    local word_count_lower_even_odd_odd_even = 0\n    local word_count_lower_even_even_odd_odd = 0\n    local word_count_upper_even_odd_odd_even = 0\n    local word_count_upper_even_even_odd_odd = 0\n    local word_count_lower_odd_even_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmps2t0uony.lua:61: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1,#txt,2 do\n        if txt[i] ~= txt[i-1] then\n            words[#words+1] = txt[i]\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpldbj74uz.lua:24: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpldbj74uz.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local t = {}\n    for i = 1,#txt do\n        if t[txt[i]] == nil then\n            t[txt[i]] = 1\n        else\n            t[txt[i]] = t[txt[i]] + 1\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk0swxt6.lua:15: table index is nil\nstack traceback:\n\t/tmp/tmpwk0swxt6.lua:15: in local 'candidate'\n\t/tmp/tmpwk0swxt6.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1, #txt, 2 do\n        if txt[i] ~= ' ' then\n            words[#words + 1] = txt[i]\n        else\n            words[#words + 1] = txt[i - 1] .. ' ' .. txt[i + 1]\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwjvmbg_v.lua:26: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpwjvmbg_v.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    local word = \"\"\n    for i = 1,#txt do\n        if txt[i] == \" \" then\n            if word ~= \"\" then\n                words[#words + 1] = word\n                word = \"\"\n            end\n        elseif txt[i] == \",\" then\n            if word ~= \"\" then\n                words[#words + 1] = word\n                word = \"\"\n            end\n        elseif txt[i] ~= \" \" and txt[i] ~= \",\" then\n            word = word .. txt[i]\n        end\n    end\n    if word ~= \"\" then\n        words[#words + 1] = word\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi14xkzh1.lua:26: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpi14xkzh1.lua:26: in local 'candidate'\n\t/tmp/tmpi14xkzh1.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1,#txt do\n        if txt[i] ~= ' ' then\n            words[#words + 1] = txt[i]\n        else\n            words[#words + 1] = txt[i:i+2]\n            i = i + 1\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpqpa1clb_.lua:17: function arguments expected near '+'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    local word_count = 0\n    local word_index = 1\n    for i = 1,#txt do\n        if txt[i] ~= ' ' then\n            if txt[i] ~= ',' then\n                if txt[i] ~= '.' then\n                    if txt[i] ~= '!' then\n                        if txt[i] ~= '?' then\n                            if txt[i] ~= ':' then\n                                if txt[i] ~= ';' then\n                                    if txt[i] ~= '\\n' then\n                                        if txt[i] ~= '\\r' then\n                                            if txt[i] ~= '\\t' then\n                                                if txt[i] ~= '\\v' then\n                                                    if txt[i] ~= '\\f' then\n                                                        if txt[i] ~= '\\b' then\n                                                            if txt[i] ~= '\\a' then\n                                                                if txt[i] ~= '\\e' then\n                                                                    if txt[i] ~= '\\f' then\n                                                                        if txt[i] ~= '\\n' then\n                                                                            if txt[i] ~= '\\r' then\n                                                                                if txt[i] ~= '\\t' then\n                                                                                    if txt[i] ~= '\\v' then\n                                                                                        if txt[i] ~= '\\f' then\n                                                                                            if txt[i] ~= '\\b' then\n                                                                                                if txt[i] ~= '\\a' then\n                                                                                                    if txt[i] ~= '\\e' then\n                                                                                                        if txt[i] ~= '\\f' then\n                                                                                                            if txt[i] ~= '\\n' then\n                                                                                                                if txt[i] ~= '\\r' then\n                               \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpmm2pfry8.lua:30: invalid escape sequence near ''\\e'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    local word = \"\"\n    for i = 1,#txt do\n        if txt[i] == \" \" then\n            if word ~= \"\" then\n                words[#words+1] = word\n                word = \"\"\n            end\n        elseif txt[i] == \",\" then\n            if word ~= \"\" then\n                words[#words+1] = word\n                word = \"\"\n            end\n            words[#words+1] = \",\"\n        elseif txt[i] == \".\" then\n            if word ~= \"\" then\n                words[#words+1] = word\n                word = \"\"\n            end\n            words[#words+1] = \".\"\n        elseif txt[i] == \"!\" then\n            if word ~= \"\" then\n                words[#words+1] = word\n                word = \"\"\n            end\n            words[#words+1] = \"!\"\n        elseif txt[i] == \"?\" then\n            if word ~= \"\" then\n                words[#words+1] = word\n                word = \"\"\n            end\n            words[#words+1] = \"?\"\n        elseif txt[i] == \"\\\"\" then\n            if word ~= \"\" then\n                words[#words+1] = word\n                word = \"\"\n            end\n            words[#words+1] = \"\\\"\"\n        elseif txt[i] == \"'\" then\n            if word ~= \"\" then\n                words[#words+1] = word\n                word = \"\"\n            end\n            words[#words+1] = \"'\"\n        elseif txt[i] == \"(\" then\n            if word ~= \"\" then\n                words[#words+1] = word\n                word = \"\"\n            end\n            words[#words+1] = \"(\"\n        elseif txt[i] == \")\" then\n            if word ~= \"\" then\n                words[#words+1] = word\n                word = \"\"\n            end\n            words[#words+1] = \")\"\n        elseif txt[i] == \"{\" then\n            if word ~= \"\" then\n                words[#words+1] = word\n                \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp3_js8vak.lua:86: 'end' expected (to close 'if' at line 69) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gsub(txt, '[^a-zA-Z0-9]', '') do\n        if word then\n            words[#words + 1] = word\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4r6r2psq.lua:13: attempt to call a string value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmp4r6r2psq.lua:13: in local 'candidate'\n\t/tmp/tmp4r6r2psq.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1,#txt do\n        if txt[i] ~= ' ' then\n            if words[txt[i]] == nil then\n                words[txt[i]] = 1\n            else\n                words[txt[i]] = words[txt[i]] + 1\n            end\n        else\n            if words[txt[i-1]] == nil then\n                words[txt[i-1]] = 1\n            else\n                words[txt[i-1]] = words[txt[i-1]] + 1\n            end\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe7hajg99.lua:16: table index is nil\nstack traceback:\n\t/tmp/tmpe7hajg99.lua:16: in local 'candidate'\n\t/tmp/tmpe7hajg99.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1,#txt,2 do\n        if txt[i] ~= txt[i+1] then\n            words[#words+1] = txt[i]\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphpw5dgda.lua:24: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmphpw5dgda.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local tbl = {}\n    for i=1,#txt do\n        if txt[i] ~= ' ' then\n            tbl[#tbl+1] = txt[i]\n        else\n            tbl[#tbl+1] = txt[i:i+2]\n            i = i + 2\n        end\n    end\n    return tbl\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp9exegi7q.lua:17: function arguments expected near '+'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gmatch(txt, '[^\\s]+') do\n        if words[word] == nil then\n            words[word] = 1\n        else\n            words[word] = words[word] + 1\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpxy5oewoe.lua:13: invalid escape sequence near ''[^\\s'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local t = {}\n    for i = 1,#txt,2 do\n        if t[txt[i]] == nil then\n            t[txt[i]] = 1\n        else\n            t[txt[i]] = t[txt[i]] + 1\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz73lndry.lua:15: table index is nil\nstack traceback:\n\t/tmp/tmpz73lndry.lua:15: in local 'candidate'\n\t/tmp/tmpz73lndry.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local t = {}\n    for i=1,#txt do\n        if t[txt[i]] == nil then\n            t[txt[i]] = 1\n        else\n            t[txt[i]] = t[txt[i]] + 1\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0zev3drv.lua:15: table index is nil\nstack traceback:\n\t/tmp/tmp0zev3drv.lua:15: in local 'candidate'\n\t/tmp/tmp0zev3drv.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1,#txt do\n        if txt[i] ~= ' ' then\n            if words[txt[i]] == nil then\n                words[txt[i]] = 1\n            else\n                words[txt[i]] = words[txt[i]] + 1\n            end\n        else\n            if words[txt[i+1]] == nil then\n                words[txt[i+1]] = 1\n            else\n                words[txt[i+1]] = words[txt[i+1]] + 1\n            end\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcxos0_5q.lua:16: table index is nil\nstack traceback:\n\t/tmp/tmpcxos0_5q.lua:16: in local 'candidate'\n\t/tmp/tmpcxos0_5q.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i=1,#txt do\n        if txt[i] ~= ' ' then\n            words[#words+1] = txt[i]\n        else\n            words[#words+1] = txt[i:i+2]\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpz1spdt5_.lua:17: function arguments expected near '+'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1,#txt,2 do\n        if txt[i] ~= ' ' then\n            words[#words+1] = txt[i]\n        else\n            words[#words+1] = txt[i+1]\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp895wvui0.lua:26: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp895wvui0.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gsub(txt, '[^a-zA-Z0-9]', '') do\n        if word then\n            words[word] = words[word] or 0\n            words[word] = words[word] + 1\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc3dyv2_8.lua:13: attempt to call a string value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmpc3dyv2_8.lua:13: in local 'candidate'\n\t/tmp/tmpc3dyv2_8.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1,#txt,1 do\n        if txt[i] ~= ' ' then\n            words[#words+1] = txt[i]\n        else\n            words[#words+1] = txt[i:i+1]\n            words[#words+1] = words[#words+1]\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp2cqit2sx.lua:17: function arguments expected near '+'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1,#txt,2 do\n        if txt[i] ~= ' ' then\n            words[#words+1] = txt[i]\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp12h5t67k.lua:24: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp12h5t67k.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gmatch(txt, '[^\\s]+') do\n        words[word] = true\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpjx5cxgk7.lua:13: invalid escape sequence near ''[^\\s'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1, #txt, 2 do\n        if txt[i] ~= txt[i-1] then\n            words[#words+1] = txt[i]\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8zc3rsei.lua:24: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp8zc3rsei.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1,#txt,2 do\n        if txt[i] ~= txt[i+1] then\n            words[#words+1] = txt[i]\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphpw5dgda.lua:24: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmphpw5dgda.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    local i = 1\n    while i <= #txt do\n        if txt[i] ~= ' ' then\n            if words[#words] == nil then\n                words[#words] = txt[i]\n            else\n                words[#words] = #words + 1\n            end\n        else\n            if words[#words] ~= nil then\n                words[#words] = #words + 1\n            end\n        end\n        i = i + 1\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe6i_sbm2.lua:34: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpe6i_sbm2.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    local word = \"\"\n    for i = 1,#txt do\n        if txt[i] == ' ' then\n            if word ~= \"\" then\n                words[#words + 1] = word\n                word = \"\"\n            end\n        elseif txt[i] == ',' then\n            if word ~= \"\" then\n                words[#words + 1] = word\n                word = \"\"\n            end\n        elseif txt[i] ~= ' ' and txt[i] ~= ',' then\n            word = word .. txt[i]\n        end\n    end\n    if word ~= \"\" then\n        words[#words + 1] = word\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2eg1vp1r.lua:26: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmp2eg1vp1r.lua:26: in local 'candidate'\n\t/tmp/tmp2eg1vp1r.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1,#txt do\n        if txt[i] ~= ' ' then\n            if words[txt[i]] == nil then\n                words[txt[i]] = 1\n            else\n                words[txt[i]] = words[txt[i]] + 1\n            end\n        else\n            if words[txt[i-1]] == nil then\n                words[txt[i-1]] = 1\n            else\n                words[txt[i-1]] = words[txt[i-1]] + 1\n            end\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe7hajg99.lua:16: table index is nil\nstack traceback:\n\t/tmp/tmpe7hajg99.lua:16: in local 'candidate'\n\t/tmp/tmpe7hajg99.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1,#txt,1 do\n        if txt[i] ~= ' ' then\n            words[#words+1] = txt[i]\n        else\n            words[#words+1] = txt[i:i+2]\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpxiwh3hz5.lua:17: function arguments expected near '+'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    local word_count = 0\n    local word_index = 1\n    local word_index_count = 0\n    local word_index_count_2 = 0\n    local word_index_count_3 = 0\n    local word_index_count_4 = 0\n    local word_index_count_5 = 0\n    local word_index_count_6 = 0\n    local word_index_count_7 = 0\n    local word_index_count_8 = 0\n    local word_index_count_9 = 0\n    local word_index_count_10 = 0\n    local word_index_count_11 = 0\n    local word_index_count_12 = 0\n    local word_index_count_13 = 0\n    local word_index_count_14 = 0\n    local word_index_count_15 = 0\n    local word_index_count_16 = 0\n    local word_index_count_17 = 0\n    local word_index_count_18 = 0\n    local word_index_count_19 = 0\n    local word_index_count_20 = 0\n    local word_index_count_21 = 0\n    local word_index_count_22 = 0\n    local word_index_count_23 = 0\n    local word_index_count_24 = 0\n    local word_index_count_25 = 0\n    local word_index_count_26 = 0\n    local word_index_count_27 = 0\n    local word_index_count_28 = 0\n    local word_index_count_29 = 0\n    local word_index_count_30 = 0\n    local word_index_count_31 = 0\n    local word_index_count_32 = 0\n    local word_index_count_33 = 0\n    local word_index_count_34 = 0\n    local word_index_count_35 = 0\n    local word_index_count_36 = 0\n    local word_index_count_37 = 0\n    local word_index_count_38 = 0\n    local word_index_count_39 = 0\n    local word_index_count_40 = 0\n    local word_index_count_41 = 0\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpgjn4b4lc.lua:71: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gmatch(txt, '[^\\s]+') do\n        words[word] = true\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpjx5cxgk7.lua:13: invalid escape sequence near ''[^\\s'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1, #txt, 2 do\n        if txt[i] ~= ' ' then\n            words[#words + 1] = txt[i]\n        else\n            words[#words + 1] = txt[i + 1]\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjl220nlu.lua:26: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpjl220nlu.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1,#txt,2 do\n        if txt[i] ~= txt[i+1] then\n            words[#words+1] = txt[i]\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphpw5dgda.lua:24: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmphpw5dgda.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gsub(txt, '[^a-zA-Z0-9]', '') do\n        if word then\n            words[#words + 1] = word\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4r6r2psq.lua:13: attempt to call a string value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmp4r6r2psq.lua:13: in local 'candidate'\n\t/tmp/tmp4r6r2psq.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gsub(txt, '[^a-zA-Z0-9]', '') do\n        words[#words + 1] = word\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz1r863h8.lua:13: attempt to call a string value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmpz1r863h8.lua:13: in local 'candidate'\n\t/tmp/tmpz1r863h8.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1, #txt, 2 do\n        if txt[i] ~= ' ' then\n            if txt[i] ~= ',' then\n                words[#words + 1] = txt[i]\n            else\n                words[#words + 1] = txt[i + 1]\n            end\n        else\n            words[#words + 1] = txt[i]\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn616wcg6.lua:30: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpn616wcg6.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gsub(txt, ' ', '%s') do\n        words[word] = true\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1, #txt, 2 do\n        if txt[i] ~= ' ' then\n            words[#words+1] = txt[i]\n        else\n            words[#words+1] = txt[i+1]\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9g5a58ws.lua:26: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp9g5a58ws.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i=1,#txt do\n        if txt[i] ~= ' ' then\n            if words[txt[i]] then\n                words[txt[i]] = words[txt[i]] .. ' ' .. txt[i]\n            else\n                words[txt[i]] = txt[i]\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpi1uvp9mr.lua:37: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gsub(txt, '[^a-zA-Z0-9]', '') do\n        words[word] = true\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp89wvdnib.lua:13: attempt to call a string value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmp89wvdnib.lua:13: in local 'candidate'\n\t/tmp/tmp89wvdnib.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1,#txt do\n        if txt[i] ~= ' ' then\n            if txt[i] ~= ',' then\n                words[#words+1] = txt[i]\n            else\n                words[#words+1] = txt[i+1]\n                words[#words+1] = txt[i]\n            end\n        else\n            words[#words+1] = txt[i]\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3hq64rk3.lua:31: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp3hq64rk3.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local tbl = {}\n    for i = 1,#txt do\n        if txt[i] ~= ' ' then\n            tbl[#tbl+1] = txt[i]\n        else\n            tbl[#tbl+1] = txt[i+1]\n            i = i+1\n        end\n    end\n    return tbl\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphswdul8b.lua:27: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmphswdul8b.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    local word = \"\"\n    for i = 1,#txt do\n        if txt[i] == \" \" then\n            if word ~= \"\" then\n                words[#words + 1] = word\n                word = \"\"\n            end\n        elseif txt[i] == \",\" then\n            if word ~= \"\" then\n                words[#words + 1] = word\n                word = \"\"\n            end\n        elseif txt[i] == \".\" then\n            if word ~= \"\" then\n                words[#words + 1] = word\n                word = \"\"\n            end\n        elseif txt[i] >= \"a\" and txt[i] <= \"z\" then\n            word = word .. txt[i]\n        elseif txt[i] >= \"A\" and txt[i] <= \"Z\" then\n            word = word .. txt[i]\n        elseif txt[i] >= \"0\" and txt[i] <= \"9\" then\n            word = word .. txt[i]\n        end\n    end\n    if word ~= \"\" then\n        words[#words + 1] = word\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5brxsss8.lua:30: attempt to compare string with nil\nstack traceback:\n\t/tmp/tmp5brxsss8.lua:30: in local 'candidate'\n\t/tmp/tmp5brxsss8.lua:47: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1,#txt do\n        if txt[i] ~= ' ' then\n            words[#words+1] = txt[i]\n        else\n            words[#words+1] = txt[i+1]\n            i = i + 1\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpit9r7zo4.lua:27: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpit9r7zo4.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local tbl = {}\n    for _, word in ipairs(txt) do\n        if word ~= '' then\n            tbl[word] = true\n        end\n    end\n    return tbl\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpglev16t6.lua:24: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpglev16t6.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gmatch(txt, '[^\\s]+') do\n        words[word] = true\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpjx5cxgk7.lua:13: invalid escape sequence near ''[^\\s'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1,#txt,1 do\n        if txt[i] ~= ' ' then\n            words[#words+1] = txt[i]\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvg7ai__3.lua:24: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpvg7ai__3.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gsub(txt, '(?<![a-zA-Z0-9])[a-zA-Z0-9]+(?![a-zA-Z0-9])', ' ') do\n        words[#words + 1] = word\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6fja9cj6.lua:13: attempt to call a string value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmp6fja9cj6.lua:13: in local 'candidate'\n\t/tmp/tmp6fja9cj6.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i=1,#txt do\n        if txt[i] ~= ' ' then\n            if words[txt[i]] == nil then\n                words[txt[i]] = 1\n            else\n                words[txt[i]] = words[txt[i]] + 1\n            end\n        else\n            if words[txt[i+1]] == nil then\n                words[txt[i+1]] = 1\n            else\n                words[txt[i+1]] = words[txt[i+1]] + 1\n            end\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuwde8nu8.lua:16: table index is nil\nstack traceback:\n\t/tmp/tmpuwde8nu8.lua:16: in local 'candidate'\n\t/tmp/tmpuwde8nu8.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1,#txt,1 do\n        if txt[i] ~= \" \" then\n            words[#words+1] = txt[i]\n        else\n            words[#words+1] = txt[i:i+1]\n            words[#words+1] = words[#words+1]\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpg9x3nblp.lua:17: function arguments expected near '+'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gsub(txt, '[^a-zA-Z0-9]', ' ') do\n        words[#words + 1] = word\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf7ioxe7t.lua:13: attempt to call a string value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmpf7ioxe7t.lua:13: in local 'candidate'\n\t/tmp/tmpf7ioxe7t.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gsub(txt, '[^a-zA-Z0-9]', '') do\n        if word ~= '' then\n            words[#words + 1] = word\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyc1674wf.lua:13: attempt to call a string value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmpyc1674wf.lua:13: in local 'candidate'\n\t/tmp/tmpyc1674wf.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for _, word in ipairs(txt) do\n        if word ~= '' then\n            if words[word] then\n                words[word] = words[word] + 1\n            else\n                words[word] = 1\n            end\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2q3p0w29.lua:28: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp2q3p0w29.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local txt = string.gsub(txt, ',', ' ')\n    local txt = string.gsub(txt, '.', ' ')\n    local txt = string.gsub(txt, '!', ' ')\n    local txt = string.gsub(txt, '?', ' ')\n    local txt = string.gsub(txt, ';', ' ')\n    local txt = string.gsub(txt, ':', ' ')\n    local txt = string.gsub(txt, '-', ' ')\n    local txt = string.gsub(txt, '_', ' ')\n    local txt = string.gsub(txt, '\\'', ' ')\n    local txt = string.gsub(txt, '\\\"', ' ')\n    local txt = string.gsub(txt, '\\\\', ' ')\n    local txt = string.gsub(txt, '/', ' ')\n    local txt = string.gsub(txt, '*', ' ')\n    local txt = string.gsub(txt, '&', ' ')\n    local txt = string.gsub(txt, '=', ' ')\n    local txt = string.gsub(txt, '%', ' ')\n    local txt = string.gsub(txt, '#', ' ')\n    local txt = string.gsub(txt, '$', ' ')\n    local txt = string.gsub(txt, '@', ' ')\n    local txt = string.gsub(txt, '+', ' ')\n    local txt = string.gsub(txt, '-', ' ')\n    local txt = string.gsub(txt, '<', ' ')\n    local txt = string.gsub(txt, '>', ' ')\n    local txt = string.gsub(txt, ';', ' ')\n    local txt = string.gsub(txt, '^', ' ')\n    local txt = string.gsub(txt, '~', ' ')\n    local txt = string.gsub(txt, '`', ' ')\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmplepwu08s.lua:54: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1, #txt, 2 do\n        if txt[i] ~= txt[i-1] then\n            if txt[i] ~= ' ' then\n                words[#words+1] = txt[i]\n            end\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj4gjw7d9.lua:26: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpj4gjw7d9.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1, #txt, 2 do\n        if txt[i] ~= txt[i-1] then\n            if txt[i] ~= ' ' then\n                words[#words+1] = txt[i]\n            else\n                words[#words+1] = txt[i:i+2]\n            end\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp4vgh0zi_.lua:18: function arguments expected near '+'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    local word_count = 0\n    for i = 1,#txt do\n        if txt[i] ~= ' ' then\n            if txt[i] ~= ',' then\n                words[#words + 1] = txt[i]\n            else\n                word_count = word_count + 1\n            end\n        else\n            if word_count ~= 0 then\n                words[#words + 1] = txt[i]\n                word_count = word_count - 1\n            end\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgqdmo7gl.lua:34: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpgqdmo7gl.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gsub(txt, '[^a-zA-Z0-9]', '') do\n        words[#words+1] = word\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw2wd2k53.lua:13: attempt to call a string value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmpw2wd2k53.lua:13: in local 'candidate'\n\t/tmp/tmpw2wd2k53.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local tbl = {}\n    local words = string.gsub(txt, ' ', ',')\n    for i = 1, #words, 2 do\n        tbl[words[i]] = words[i+1]\n    end\n    return tbl\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptg0xx8xw.lua:15: table index is nil\nstack traceback:\n\t/tmp/tmptg0xx8xw.lua:15: in local 'candidate'\n\t/tmp/tmptg0xx8xw.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1,#txt,2 do\n        if txt[i] ~= txt[i+1] then\n            words[#words+1] = txt[i]\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphpw5dgda.lua:24: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmphpw5dgda.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1,#txt,2 do\n        if txt[i] ~= ' ' then\n            words[#words+1] = txt[i]\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp12h5t67k.lua:24: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp12h5t67k.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gsub(txt, '(?<![^\\s])(\\s+)(?![^\\s])', ' ') do\n        words[#words + 1] = word\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpe7jy7vo0.lua:13: invalid escape sequence near ''(?<![^\\s'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gmatch(txt, '[^\\s]+') do\n        words[word] = true\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpjx5cxgk7.lua:13: invalid escape sequence near ''[^\\s'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1,#txt,1 do\n        if txt[i] ~= ' ' then\n            words[#words+1] = txt[i]\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvg7ai__3.lua:24: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpvg7ai__3.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gsub(txt, '[^\\w]', '') do\n        if word then\n            words[#words + 1] = word\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp8ql419kc.lua:13: invalid escape sequence near ''[^\\w'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    local word = \"\"\n    for c in txt do\n        if c == \" \" then\n            if word ~= \"\" then\n                words[#words+1] = word\n                word = \"\"\n            end\n        else\n            word = word .. c\n        end\n    end\n    if word ~= \"\" then\n        words[#words+1] = word\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpigxle7d5.lua:14: attempt to call a string value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmpigxle7d5.lua:14: in local 'candidate'\n\t/tmp/tmpigxle7d5.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1, #txt, 2 do\n        if txt[i] ~= ' ' then\n            words[#words+1] = txt[i]\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3nnl8iey.lua:24: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp3nnl8iey.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local t = {}\n    for i=1,#txt do\n        if t[txt[i]] == nil then\n            t[txt[i]] = 1\n        else\n            t[txt[i]] = t[txt[i]] + 1\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0zev3drv.lua:15: table index is nil\nstack traceback:\n\t/tmp/tmp0zev3drv.lua:15: in local 'candidate'\n\t/tmp/tmp0zev3drv.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local t = {}\n    for i = 1,#txt do\n        if t[txt[i]] == nil then\n            t[txt[i]] = 1\n        else\n            t[txt[i]] = t[txt[i]] + 1\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk0swxt6.lua:15: table index is nil\nstack traceback:\n\t/tmp/tmpwk0swxt6.lua:15: in local 'candidate'\n\t/tmp/tmpwk0swxt6.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    local word = \"\"\n    for i = 1,#txt do\n        if txt[i] == \" \" then\n            if word ~= \"\" then\n                words[#words + 1] = word\n                word = \"\"\n            end\n        elseif txt[i] == \",\" then\n            if word ~= \"\" then\n                words[#words + 1] = word\n                word = \"\"\n            end\n        elseif txt[i] ~= \" \" and txt[i] ~= \",\" then\n            word = word .. txt[i]\n        end\n    end\n    if word ~= \"\" then\n        words[#words + 1] = word\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi14xkzh1.lua:26: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpi14xkzh1.lua:26: in local 'candidate'\n\t/tmp/tmpi14xkzh1.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    local word_count = 0\n    for i = 1,#txt do\n        if txt[i] == ' ' then\n            if words[#words] == nil then\n                words[#words] = txt[i+1]\n            else\n                words[#words] = words[#words] .. ' ' .. txt[i+1]\n            end\n        elseif txt[i] == ',' then\n            if words[#words] == nil then\n                words[#words] = txt[i+1]\n            else\n                words[#words] = words[#words] .. ',' .. txt[i+1]\n            end\n        elseif txt[i] == '.' then\n            if words[#words] == nil then\n                words[#words] = txt[i+1]\n            else\n                words[#words] = words[#words] .. '.' .. txt[i+1]\n            end\n        elseif txt[i] == '!' then\n            if words[#words] == nil then\n                words[#words] = txt[i+1]\n            else\n                words[#words] = words[#words] .. '!' .. txt[i+1]\n            end\n        elseif txt[i] == '?' then\n            if words[#words] == nil then\n                words[#words] = txt[i+1]\n            else\n                words[#words] = words[#words] .. '?' .. txt[i+1]\n            end\n        elseif txt[i] == '(' then\n            if words[#words] == nil then\n                words[#words] = txt[i+1]\n            else\n                words[#words] = words[#words] .. '(' .. txt[i+1]\n            end\n        elseif txt[i] == ')' then\n            if words[#words] == nil then\n                words[#words] = txt[i+1]\n            else\n                words[#words] = words[#words] .. ')' .. txt[i+1]\n            end\n        elseif txt[\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpd3svspgp.lua:58: ']' expected near '='\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gsub(txt, '(?<![^\\s])(\\s+)(?![^\\s])', ' ') do\n        words[#words + 1] = word\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpe7jy7vo0.lua:13: invalid escape sequence near ''(?<![^\\s'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    local word = \"\"\n    for c in txt:\n        if c == \" \":\n            if word:\n                words[word] = true\n                word = \"\"\n        else:\n            word = word .. c\n    if word:\n        words[word] = true\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp4g3253z8.lua:15: <name> expected near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1,#txt do\n        if txt[i] ~= ' ' then\n            words[#words+1] = txt[i]\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp76mfpkei.lua:24: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp76mfpkei.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1,#txt do\n        if txt[i] ~= ' ' then\n            words[#words+1] = txt[i]\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp76mfpkei.lua:24: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp76mfpkei.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gsub(txt, '[^a-zA-Z0-9]', '') do\n        words[word] = true\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp89wvdnib.lua:13: attempt to call a string value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmp89wvdnib.lua:13: in local 'candidate'\n\t/tmp/tmp89wvdnib.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gsub(txt, '(?<![a-zA-Z0-9])[a-zA-Z0-9]+(?![a-zA-Z0-9])', ' ') do\n        words[#words + 1] = word\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6fja9cj6.lua:13: attempt to call a string value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmp6fja9cj6.lua:13: in local 'candidate'\n\t/tmp/tmp6fja9cj6.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i=1,#txt do\n        if txt[i] ~= ' ' then\n            if words[txt[i]] == nil then\n                words[txt[i]] = 1\n            else\n                words[txt[i]] = words[txt[i]] + 1\n            end\n        else\n            if words[txt[i-1]] == nil then\n                words[txt[i-1]] = 1\n            else\n                words[txt[i-1]] = words[txt[i-1]] + 1\n            end\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps_gcznlp.lua:16: table index is nil\nstack traceback:\n\t/tmp/tmps_gcznlp.lua:16: in local 'candidate'\n\t/tmp/tmps_gcznlp.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gsub(txt, ' ', '%s') do\n        words[word] = true\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gmatch(txt, '[^\\s]+') do\n        words[word] = true\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpjx5cxgk7.lua:13: invalid escape sequence near ''[^\\s'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i=1,#txt do\n        if txt[i] ~= ' ' then\n            words[#words+1] = txt[i]\n        else\n            words[#words+1] = txt[i..i-1]\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnf2qm807.lua:26: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpnf2qm807.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gsub(txt, '[^a-zA-Z0-9]', '') do\n        words[#words + 1] = word\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz1r863h8.lua:13: attempt to call a string value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmpz1r863h8.lua:13: in local 'candidate'\n\t/tmp/tmpz1r863h8.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i=1,#txt do\n        if txt[i] ~= ' ' then\n            if words[txt[i]] == nil then\n                words[txt[i]] = 1\n            else\n                words[txt[i]] = words[txt[i]] + 1\n            end\n        else\n            if words[txt[i+1]] == nil then\n                words[txt[i+1]] = 1\n            else\n                words[txt[i+1]] = words[txt[i+1]] + 1\n            end\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuwde8nu8.lua:16: table index is nil\nstack traceback:\n\t/tmp/tmpuwde8nu8.lua:16: in local 'candidate'\n\t/tmp/tmpuwde8nu8.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    local word_count = 0\n    for i = 1, #txt, 2 do\n        if txt[i] == ' ' then\n            if words[#words] == nil then\n                words[#words] = txt[i+1]\n            else\n                words[#words] = words[#words] .. ' ' .. txt[i+1]\n            end\n        elseif txt[i] == ',' then\n            if words[#words] == nil then\n                words[#words] = txt[i+1]\n            else\n                words[#words] = words[#words] .. ',' .. txt[i+1]\n            end\n        elseif txt[i] == '.' then\n            if words[#words] == nil then\n                words[#words] = txt[i+1]\n            else\n                words[#words] = words[#words] .. '.' .. txt[i+1]\n            end\n        elseif txt[i] == '!' then\n            if words[#words] == nil then\n                words[#words] = txt[i+1]\n            else\n                words[#words] = words[#words] .. '!' .. txt[i+1]\n            end\n        elseif txt[i] == '?' then\n            if words[#words] == nil then\n                words[#words] = txt[i+1]\n            else\n                words[#words] = words[#words] .. '?' .. txt[i+1]\n            end\n        elseif txt[i] == '(' then\n            if words[#words] == nil then\n                words[#words] = txt[i+1]\n            else\n                words[#words] = words[#words] .. '(' .. txt[i+1]\n            end\n        elseif txt[i] == ')' then\n            if words[#words] == nil then\n                words[#words] = txt[i+1]\n            else\n                words[#words] = words[#words] .. ')' .. txt[i+1]\n            end\n        elseif t\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp_fwi363l.lua:58: 'then' expected near 'lu'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local tbl = {}\n    for i = 1,#txt do\n        if txt[i] ~= ' ' then\n            tbl[#tbl+1] = txt[i]\n        else\n            tbl[#tbl+1] = txt[i+1]\n            i = i + 1\n        end\n    end\n    return tbl\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphcuimtzp.lua:27: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmphcuimtzp.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gsub(txt, '[^a-zA-Z0-9]', '') do\n        words[word] = true\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp89wvdnib.lua:13: attempt to call a string value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmp89wvdnib.lua:13: in local 'candidate'\n\t/tmp/tmp89wvdnib.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    local word_count = 0\n    local word_count_lower = 0\n    local word_count_upper = 0\n    local word_count_lower_odd = 0\n    local word_count_upper_odd = 0\n    local word_count_lower_even = 0\n    local word_count_upper_even = 0\n    local word_count_lower_odd_even = 0\n    local word_count_upper_odd_even = 0\n    local word_count_lower_odd_odd = 0\n    local word_count_upper_odd_odd = 0\n    local word_count_lower_even_odd = 0\n    local word_count_upper_even_odd = 0\n    local word_count_lower_odd_even_odd = 0\n    local word_count_upper_odd_even_odd = 0\n    local word_count_lower_even_odd_even = 0\n    local word_count_upper_even_odd_even = 0\n    local word_count_lower_odd_even_odd_even = 0\n    local word_count_upper_odd_even_odd_even = 0\n    local word_count_lower_even_odd_even_odd_even = 0\n    local word_count_upper_even_odd_even_odd_even = 0\n    local word_count_lower_odd_even_odd_even_odd_even = 0\n    local word_count_upper_odd_even_odd_even_odd_even = 0\n    local word_count_lower_even_odd_even_odd_even_odd_even = 0\n    local word_count_upper_even_odd_even_odd_even_odd_even = 0\n    local word_count_lower_odd_even_odd_even_odd_even_odd_even = 0\n    local word_count_upper_odd_even_odd_even_odd_even_odd_even = 0\n    local word_count_lower_even_odd_even_odd_even_odd_even_odd_even = 0\n    local word_count_upper_even_odd_even_odd_even_odd_even_odd_even = 0\n    local word_count_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpfrg2nj8l.lua:57: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gmatch(txt, '[^\\s]+') do\n        words[word] = true\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpjx5cxgk7.lua:13: invalid escape sequence near ''[^\\s'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i=1,#txt do\n        if txt[i] ~= ' ' then\n            if words[txt[i]] == nil then\n                words[txt[i]] = 1\n            else\n                words[txt[i]] = words[txt[i]] + 1\n            end\n        else\n            if words[txt[i-1]] == nil then\n                words[txt[i-1]] = 1\n            else\n                words[txt[i-1]] = words[txt[i-1]] + 1\n            end\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps_gcznlp.lua:16: table index is nil\nstack traceback:\n\t/tmp/tmps_gcznlp.lua:16: in local 'candidate'\n\t/tmp/tmps_gcznlp.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local tbl = {}\n    for i = 1,#txt do\n        if txt[i] ~= ' ' then\n            tbl[#tbl+1] = txt[i]\n        else\n            tbl[#tbl+1] = txt[i+1]\n            i = i + 1\n        end\n    end\n    return tbl\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphcuimtzp.lua:27: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmphcuimtzp.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local t = {}\n    for i = 1,#txt do\n        if t[txt[i]] == nil then\n            t[txt[i]] = 1\n        else\n            t[txt[i]] = t[txt[i]] + 1\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwk0swxt6.lua:15: table index is nil\nstack traceback:\n\t/tmp/tmpwk0swxt6.lua:15: in local 'candidate'\n\t/tmp/tmpwk0swxt6.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gsub(txt, '[^a-zA-Z0-9 ]', '') do\n        words[word] = true\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbhi8c4fi.lua:13: attempt to call a string value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmpbhi8c4fi.lua:13: in local 'candidate'\n\t/tmp/tmpbhi8c4fi.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gsub(txt, '[^a-zA-Z0-9 ]', '') do\n        words[#words + 1] = word\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3yw8vf9g.lua:13: attempt to call a string value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmp3yw8vf9g.lua:13: in local 'candidate'\n\t/tmp/tmp3yw8vf9g.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gsub(txt, '[^\\w\\s]', '') do\n        words[word] = true\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp8qrbt1y1.lua:13: invalid escape sequence near ''[^\\w'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    local word = \"\"\n    for i = 1,#txt do\n        if txt[i] == \" \" then\n            if word ~= \"\" then\n                words[#words+1] = word\n                word = \"\"\n            end\n        elseif txt[i] == \",\" then\n            if word ~= \"\" then\n                words[#words+1] = word\n                word = \"\"\n            end\n            words[#words+1] = \",\"\n        elseif txt[i] ~= \" \" and txt[i] ~= \",\" then\n            word = word .. txt[i]\n        end\n    end\n    if word ~= \"\" then\n        words[#words+1] = word\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9exyckz5.lua:27: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmp9exyckz5.lua:27: in local 'candidate'\n\t/tmp/tmp9exyckz5.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    local word = \"\"\n    for c in txt do\n        if c == \" \" then\n            if word ~= \"\" then\n                words[#words + 1] = word\n                word = \"\"\n            end\n        elseif c == \",\" then\n            if word ~= \"\" then\n                words[#words + 1] = word\n                word = \"\"\n            end\n        elseif c == \".\" then\n            if word ~= \"\" then\n                words[#words + 1] = word\n                word = \"\"\n            end\n        elseif c == \"!\" then\n            if word ~= \"\" then\n                words[#words + 1] = word\n                word = \"\"\n            end\n        elseif c == \"?\" then\n            if word ~= \"\" then\n                words[#words + 1] = word\n                word = \"\"\n            end\n        elseif c == \"-\" then\n            if word ~= \"\" then\n                words[#words + 1] = word\n                word = \"\"\n            end\n        elseif c == \"(\" then\n            if word ~= \"\" then\n                words[#words + 1] = word\n                word = \"\"\n            end\n        elseif c == \")\" then\n            if word ~= \"\" then\n                words[#words + 1] = word\n                word = \"\"\n            end\n        elseif c == \"{\" then\n            if word ~= \"\" then\n                words[#words + 1] = word\n                word = \"\"\n            end\n        elseif c == \"}\" then\n            if word ~= \"\" then\n                words[#words + 1] = word\n                word = \"\"\n            end\n        elseif c == \"=\" then\n            if word ~= \"\" then\n                words[#words + 1] = word\n                word = \"\"\n            end\n        elseif c == \"|\" then\n            if word ~= \"\" then\n                words[#words + 1] = word\n                word = \"\"\n            end\n        elseif c == \"\\\\\" then\n            if word ~= \"\" then\n                words[#words + 1] = word\n                word = \"\"\n            end\n        elseif c == \"\\\"\" then\n            if word ~= \"\" then\n                words[#words\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpisg7j5bi.lua:83: ']' expected near 'lu'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1,#txt do\n        if txt[i] == ' ' then\n            if words[#words] == nil then\n                words[#words] = txt[i+1:i+1]\n            else\n                words[#words] = words[#words] .. ' ' .. txt[i+1:i+1]\n            end\n        elseif txt[i] == ',' then\n            if words[#words] == nil then\n                words[#words] = txt[i+1:i+1]\n            else\n                words[#words] = words[#words] .. ',' .. txt[i+1:i+1]\n            end\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmppom1p2z7.lua:16: ']' expected near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local t = {}\n    for i=1,#txt do\n        if t[txt[i]] == nil then\n            t[txt[i]] = 1\n        else\n            t[txt[i]] = t[txt[i]] + 1\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0zev3drv.lua:15: table index is nil\nstack traceback:\n\t/tmp/tmp0zev3drv.lua:15: in local 'candidate'\n\t/tmp/tmp0zev3drv.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1,#txt,1 do\n        if txt[i] ~= ' ' then\n            words[#words+1] = txt[i]\n        else\n            words[#words+1] = txt[i:i+2]\n            i = i + 2\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp6oam5x1o.lua:17: function arguments expected near '+'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local t = {}\n    for i = 1, #txt, 2 do\n        if t[txt[i]] == nil then\n            t[txt[i]] = 1\n        else\n            t[txt[i]] = t[txt[i]] + 1\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_895dov2.lua:15: table index is nil\nstack traceback:\n\t/tmp/tmp_895dov2.lua:15: in local 'candidate'\n\t/tmp/tmp_895dov2.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i=1,#txt do\n        if txt[i] ~= ' ' then\n            if words[txt[i]] == nil then\n                words[txt[i]] = 1\n            else\n                words[txt[i]] = words[txt[i]] + 1\n            end\n        else\n            if words[txt[i+1]] == nil then\n                words[txt[i+1]] = 1\n            else\n                words[txt[i+1]] = words[txt[i+1]] + 1\n            end\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuwde8nu8.lua:16: table index is nil\nstack traceback:\n\t/tmp/tmpuwde8nu8.lua:16: in local 'candidate'\n\t/tmp/tmpuwde8nu8.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    local word_count = 0\n    local word_count_lower = 0\n    local word_count_upper = 0\n    local word_count_lower_odd = 0\n    local word_count_upper_odd = 0\n    local word_count_lower_even = 0\n    local word_count_upper_even = 0\n    local word_count_lower_odd_even = 0\n    local word_count_upper_odd_even = 0\n    local word_count_lower_odd_odd = 0\n    local word_count_upper_odd_odd = 0\n    local word_count_lower_even_odd = 0\n    local word_count_upper_even_odd = 0\n    local word_count_lower_odd_even_odd = 0\n    local word_count_upper_odd_even_odd = 0\n    local word_count_lower_even_odd_even = 0\n    local word_count_upper_even_odd_even = 0\n    local word_count_lower_odd_even_odd_even = 0\n    local word_count_upper_odd_even_odd_even = 0\n    local word_count_lower_even_odd_odd = 0\n    local word_count_upper_even_odd_odd = 0\n    local word_count_lower_odd_even_odd = 0\n    local word_count_upper_even_odd_odd = 0\n    local word_count_lower_even_odd_even_odd = 0\n    local word_count_upper_even_odd_even_odd = 0\n    local word_count_lower_odd_even_odd_odd = 0\n    local word_count_upper_even_odd_odd_odd = 0\n    local word_count_lower_even_odd_even_odd_odd = 0\n    local word_count_upper_even_odd_even_odd_odd = 0\n    local word_count_lower_odd_even_odd_even_odd = 0\n    local word_count_upper_even_odd_odd_even_odd = 0\n    local word_count_lower_odd_even_odd_even_odd_odd = 0\n    local word_count_upper_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp8v0o1ihq.lua:60: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1,#txt do\n        if txt[i] ~= ' ' then\n            words[#words+1] = txt[i]\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp76mfpkei.lua:24: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp76mfpkei.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local tbl = {}\n    local words = string.gsub(txt, '[^\\w]', '')\n    for i = 1,#words,2 do\n        tbl[words[i]] = words[i+1]\n    end\n    return tbl\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpo6ocicpo.lua:13: invalid escape sequence near ''[^\\w'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gsub(txt, '(^[^a-zA-Z0-9]*|[^a-zA-Z0-9]*$)', '') do\n        if word then\n            words[word] = words[word] or 0\n            words[word] = words[word] + 1\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp06c0emy_.lua:13: attempt to call a string value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmp06c0emy_.lua:13: in local 'candidate'\n\t/tmp/tmp06c0emy_.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gsub(txt, '(^\\s*|\\s*$)', '') do\n        if word then\n            words[#words + 1] = word\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpuxn793k5.lua:13: invalid escape sequence near ''(^\\s'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    local word = \"\"\n    for i = 1,#txt do\n        if txt[i] == \" \" then\n            if word ~= \"\" then\n                words[#words+1] = word\n                word = \"\"\n            end\n        elseif txt[i] == \",\" then\n            if word ~= \"\" then\n                words[#words+1] = word\n                word = \"\"\n            end\n        elseif txt[i] ~= \" \" and txt[i] ~= \",\" then\n            word = word .. txt[i]\n        end\n    end\n    if word ~= \"\" then\n        words[#words+1] = word\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2y_tg_z1.lua:26: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmp2y_tg_z1.lua:26: in local 'candidate'\n\t/tmp/tmp2y_tg_z1.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1,#txt do\n        if txt[i] ~= ' ' then\n            words[#words+1] = txt[i]\n        else\n            words[#words+1] = txt[i:i+2]\n            i = i + 1\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpenvp_dij.lua:17: function arguments expected near '+'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1, #txt, 2 do\n        if txt[i] ~= txt[i-1] then\n            words[#words+1] = txt[i]\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8zc3rsei.lua:24: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp8zc3rsei.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i=1,#txt do\n        if txt[i] ~= ' ' then\n            if txt[i] ~= ',' then\n                words[#words+1] = txt[i]\n            else\n                words[#words+1] = txt[i+1]\n                words[#words+1] = txt[i]\n            end\n        else\n            words[#words+1] = txt[i]\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplo35yqvm.lua:31: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmplo35yqvm.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    local i = 1\n    while i <= #txt do\n        if txt[i] == ' ' then\n            table.insert(words, txt[i+1:i-1])\n            i = i + 1\n        elseif txt[i] == ',' then\n            table.insert(words, txt[i+1:i-1])\n            i = i + 1\n        elseif txt[i] == '.' then\n            table.insert(words, txt[i+1:i-1])\n            i = i + 1\n        elseif txt[i] == '!' then\n            table.insert(words, txt[i+1:i-1])\n            i = i + 1\n        elseif txt[i] == '?' then\n            table.insert(words, txt[i+1:i-1])\n            i = i + 1\n        elseif txt[i] == ';' then\n            table.insert(words, txt[i+1:i-1])\n            i = i + 1\n        elseif txt[i] == ':' then\n            table.insert(words, txt[i+1:i-1])\n            i = i + 1\n        elseif txt[i] == '(' then\n            table.insert(words, txt[i+1:i-1])\n            i = i + 1\n        elseif txt[i] == ')' then\n            table.insert(words, txt[i+1:i-1])\n            i = i + 1\n        elseif txt[i] == '[' then\n            table.insert(words, txt[i+1:i-1])\n            i = i + 1\n        elseif txt[i] == ']' then\n            table.insert(words, txt[i+1:i-1])\n            i = i + 1\n        elseif txt[i] == '{' then\n            table.insert(words, txt[i+1:i-1])\n            i = i + 1\n        elseif txt[i] == '}' then\n            table.insert(words, txt\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmp2xdjaa1c.lua:16: ']' expected near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gsub(txt, '[^a-zA-Z0-9]+', '') do\n        words[#words + 1] = word\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv0305ofn.lua:13: attempt to call a string value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmpv0305ofn.lua:13: in local 'candidate'\n\t/tmp/tmpv0305ofn.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1, #txt, 2 do\n        if txt[i] ~= txt[i-1] then\n            words[#words+1] = txt[i]\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8zc3rsei.lua:24: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp8zc3rsei.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gsub(txt, ' ', '%s') do\n        words[word] = true\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local t = {}\n    for i=1,#txt do\n        if t[txt[i]] == nil then\n            t[txt[i]] = 1\n        else\n            t[txt[i]] = t[txt[i]] + 1\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0zev3drv.lua:15: table index is nil\nstack traceback:\n\t/tmp/tmp0zev3drv.lua:15: in local 'candidate'\n\t/tmp/tmp0zev3drv.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    local word = \"\"\n    for i = 1,#txt do\n        if txt[i] == \" \" then\n            if word ~= \"\" then\n                words[#words + 1] = word\n                word = \"\"\n            end\n        elseif txt[i] == \",\" then\n            if word ~= \"\" then\n                words[#words + 1] = word\n                word = \"\"\n            end\n            word = word .. \" \"\n        elseif txt[i] ~= \" \" and txt[i] ~= \",\" then\n            word = word .. txt[i]\n        end\n    end\n    if word ~= \"\" then\n        words[#words + 1] = word\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp7k2krrd.lua:27: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpp7k2krrd.lua:27: in local 'candidate'\n\t/tmp/tmpp7k2krrd.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i=1,#txt do\n        if txt[i] ~= ' ' then\n            if words[txt[i]] == nil then\n                words[txt[i]] = 1\n            else\n                words[txt[i]] = words[txt[i]] + 1\n            end\n        else\n            if words[txt[i-1]] == nil then\n                words[txt[i-1]] = 1\n            else\n                words[txt[i-1]] = words[txt[i-1]] + 1\n            end\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps_gcznlp.lua:16: table index is nil\nstack traceback:\n\t/tmp/tmps_gcznlp.lua:16: in local 'candidate'\n\t/tmp/tmps_gcznlp.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for _, word in ipairs(txt) do\n        if word ~= '' then\n            if words[word] then\n                words[word] = words[word] + 1\n            else\n                words[word] = 1\n            end\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2q3p0w29.lua:28: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp2q3p0w29.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gsub(txt, ' ', '%s') do\n        words[word] = true\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local tbl = {}\n    for i=1,#txt do\n        if txt[i] ~= ' ' then\n            tbl[#tbl+1] = txt[i]\n        end\n    end\n    return tbl\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzte9wofw.lua:24: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpzte9wofw.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i=1,#txt do\n        if txt[i] ~= ' ' then\n            if words[txt[i]] == nil then\n                words[txt[i]] = 1\n            else\n                words[txt[i]] = words[txt[i]] + 1\n            end\n        else\n            if words[txt[i-1]] == nil then\n                words[txt[i-1]] = 1\n            else\n                words[txt[i-1]] = words[txt[i-1]] + 1\n            end\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps_gcznlp.lua:16: table index is nil\nstack traceback:\n\t/tmp/tmps_gcznlp.lua:16: in local 'candidate'\n\t/tmp/tmps_gcznlp.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gsub(txt, '[^a-zA-Z0-9]+', ' ') do\n        words[#words + 1] = word\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqmmq8cno.lua:13: attempt to call a string value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmpqmmq8cno.lua:13: in local 'candidate'\n\t/tmp/tmpqmmq8cno.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local t = {}\n    for i=1,#txt do\n        if t[txt[i]] then\n            t[txt[i]] = t[txt[i]] + 1\n        else\n            t[txt[i]] = 1\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprptjjmm8.lua:17: table index is nil\nstack traceback:\n\t/tmp/tmprptjjmm8.lua:17: in local 'candidate'\n\t/tmp/tmprptjjmm8.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1,#txt,1 do\n        if txt[i] ~= ' ' then\n            words[#words+1] = txt[i]\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvg7ai__3.lua:24: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpvg7ai__3.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gsub(txt, '(?<![a-zA-Z0-9])[a-zA-Z0-9]+(?![a-zA-Z0-9])', ' ') do\n        words[#words + 1] = word\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6fja9cj6.lua:13: attempt to call a string value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmp6fja9cj6.lua:13: in local 'candidate'\n\t/tmp/tmp6fja9cj6.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gsub(txt, ' ', '%s') do\n        if word ~= '' then\n            table.insert(words, word)\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9xip56i6.lua:13: invalid use of '%' in replacement string\nstack traceback:\n\t/tmp/tmp9xip56i6.lua:13: in local 'candidate'\n\t/tmp/tmp9xip56i6.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i=1,#txt do\n        if txt[i] == ' ' then\n            words[#words+1] = txt[i+1:end]\n            break\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmphdyvrcwc.lua:15: ']' expected near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1, #txt, 2 do\n        if txt[i] ~= txt[i-1] then\n            words[#words+1] = txt[i]\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8zc3rsei.lua:24: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp8zc3rsei.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gsub(txt, '[^a-zA-Z0-9]', ' ') do\n        words[word] = true\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmgtads9v.lua:13: attempt to call a string value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmpmgtads9v.lua:13: in local 'candidate'\n\t/tmp/tmpmgtads9v.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1, #txt, 2 do\n        if txt[i] ~= txt[i-1] then\n            words[#words+1] = txt[i-1]\n            words[#words+1] = txt[i]\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5y0agka9.lua:25: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp5y0agka9.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local t = {}\n    for i=1,#txt do\n        if t[txt[i]] == nil then\n            t[txt[i]] = 1\n        else\n            t[txt[i]] = t[txt[i]] + 1\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0zev3drv.lua:15: table index is nil\nstack traceback:\n\t/tmp/tmp0zev3drv.lua:15: in local 'candidate'\n\t/tmp/tmp0zev3drv.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gsub(txt, '[^a-zA-Z0-9]', '') do\n        words[word] = true\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp89wvdnib.lua:13: attempt to call a string value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmp89wvdnib.lua:13: in local 'candidate'\n\t/tmp/tmp89wvdnib.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    local word_count = 0\n    local word_index = 0\n    local word_len = 0\n    local word_index_len = 0\n    local word_index_len_len = 0\n    local word_index_len_len_len = 0\n    local word_index_len_len_len_len = 0\n    local word_index_len_len_len_len_len = 0\n    local word_index_len_len_len_len_len_len = 0\n    local word_index_len_len_len_len_len_len_len = 0\n    local word_index_len_len_len_len_len_len_len_len = 0\n    local word_index_len_len_len_len_len_len_len_len_len = 0\n    local word_index_len_len_len_len_len_len_len_len_len_len = 0\n    local word_index_len_len_len_len_len_len_len_len_len_len_len = 0\n    local word_index_len_len_len_len_len_len_len_len_len_len_len_len = 0\n    local word_index_len_len_len_len_len_len_len_len_len_len_len_len_len = 0\n    local word_index_len_len_len_len_len_len_len_len_len_len_len_len_len_len = 0\n    local word_index_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len = 0\n    local word_index_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len = 0\n    local word_index_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len = 0\n    local word_index_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_len_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmprfsk9_fm.lua:48: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gsub(txt, '(?<![a-zA-Z0-9])[a-zA-Z0-9]+(?![a-zA-Z0-9])', ' ') do\n        words[word] = true\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3j4lj4xc.lua:13: attempt to call a string value (for iterator 'for iterator')\nstack traceback:\n\t/tmp/tmp3j4lj4xc.lua:13: in local 'candidate'\n\t/tmp/tmp3j4lj4xc.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    local word = \"\"\n    for i = 1,#txt do\n        if txt[i] == \" \" then\n            if word ~= \"\" then\n                words[#words + 1] = word\n                word = \"\"\n            end\n        elseif txt[i] == \",\" then\n            if word ~= \"\" then\n                words[#words + 1] = word\n                word = \"\"\n            end\n            words[#words + 1] = txt[i + 1]\n        elseif txt[i] == \".\" then\n            if word ~= \"\" then\n                words[#words + 1] = word\n                word = \"\"\n            end\n            words[#words + 1] = txt[i + 1]\n        elseif txt[i] == \"!\" then\n            if word ~= \"\" then\n                words[#words + 1] = word\n                word = \"\"\n            end\n            words[#words + 1] = txt[i + 1]\n        elseif txt[i] == \"?\" then\n            if word ~= \"\" then\n                words[#words + 1] = word\n                word = \"\"\n            end\n            words[#words + 1] = txt[i + 1]\n        elseif txt[i] == \"(\" then\n            if word ~= \"\" then\n                words[#words + 1] = word\n                word = \"\"\n            end\n            words[#words + 1] = txt[i + 1]\n        elseif txt[i] == \")\" then\n            if word ~= \"\" then\n                words[#words + 1] = word\n                word = \"\"\n            end\n            words[#words + 1] = txt[i + 1]\n        elseif txt[i] == \"{\" then\n            if word ~= \"\" then\n                words[#words + 1] = word\n                word = \"\"\n            end\n            words[#words + 1] = txt[i + 1]\n        elseif txt[i] == \"}\" then\n            if word ~= \"\" then\n                words[#words + 1] = word\n                word = \"\"\n            end\n            words[#words + 1] = txt[\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpuklzg6ne.lua:68: ']' expected near '='\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1,#txt,2 do\n        if txt[i] ~= txt[i+1] then\n            words[#words+1] = string.sub(txt, i, i-1)\n            i = i+1\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa205f4m1.lua:25: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpa205f4m1.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gsub(txt, '(\\\\s+)', ' ') do\n        table.insert(words, word)\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppijb_95v.lua:13: attempt to call a string value\nstack traceback:\n\t/tmp/tmppijb_95v.lua:13: in local 'candidate'\n\t/tmp/tmppijb_95v.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907502
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    local word_count = 0\n    for i = 1,#txt do\n        if txt[i] == ' ' then\n            if words[#words] == nil then\n                words[#words] = txt[i+1:i-1]\n            else\n                words[#words] = words[#words] .. ' ' .. txt[i+1:i-1]\n            end\n            word_count = word_count + 1\n        elseif txt[i] == ',' then\n            if words[#words] == nil then\n                words[#words] = txt[i+1:i-1]\n            else\n                words[#words] = words[#words] .. ',' .. txt[i+1:i-1]\n            end\n            word_count = word_count + 1\n        end\n    end\n    return words, word_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "",
      "stderr": "lua: /tmp/tmpvpj_wzo1.lua:17: ']' expected near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for word in string.gsub(txt, ' ', '%s') do\n        if word ~= '' then\n            words[#words + 1] = word\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkx94y2gn.lua:13: invalid use of '%' in replacement string\nstack traceback:\n\t/tmp/tmpkx94y2gn.lua:13: in local 'candidate'\n\t/tmp/tmpkx94y2gn.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1, #txt, 2 do\n        if txt[i] ~= txt[i-1] then\n            words[#words+1] = txt[i]\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8zc3rsei.lua:24: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp8zc3rsei.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1,#txt do\n        if txt[i] ~= ' ' then\n            words[#words+1] = txt[i]\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp76mfpkei.lua:24: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp76mfpkei.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a string of words, return a table of words split on whitespace, if no whitespaces exists in the text you\n-- should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>> split_words(\"Hello world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"Hello,world!\")\n-- [\"Hello\", \"world!\"]\n-- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local words = {}\n    for i = 1,#txt,2 do\n        if txt[i] ~= ' ' then\n            words[#words+1] = txt[i]\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp12h5t67k.lua:24: expected: {\"Hello\", \"world!\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp12h5t67k.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}