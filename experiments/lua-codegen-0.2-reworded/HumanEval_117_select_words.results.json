{
  "language": "lua",
  "name": "HumanEval_117_select_words",
  "results": [
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= \" \" then\n            local word = \"\"\n            for j = i, i + n - 1, 2 do\n                if s[j] ~= \" \" then\n                    word = word .. s[j]\n                end\n            end\n            if word ~= \"\" then\n                table.insert(words, word)\n            end\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxbferhet.lua:24: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpxbferhet.lua:24: in local 'candidate'\n\t/tmp/tmpxbferhet.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907409
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        if s:sub(i, i, 1) == \" \" then\n            t = t .. {s:sub(1, i - 1)}\n            i = i + 1\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvqh0a67z.lua:21: attempt to concatenate a table value (local 't')\nstack traceback:\n\t/tmp/tmpvqh0a67z.lua:21: in local 'candidate'\n\t/tmp/tmpvqh0a67z.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907409
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            table.insert(t, s:sub(i, i))\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfujqjgab.lua:30: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpfujqjgab.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907409
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == \" \" then\n            if words[s:sub(1, i - 1)] == nil then\n                words[s:sub(1, i - 1)] = {}\n            end\n            words[s:sub(1, i - 1)] = words[s:sub(1, i - 1)] .. {s:sub(i + 1, #s)}\n        end\n    end\n    return words[s]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7k3qzcyh.lua:24: attempt to concatenate a table value (field '?')\nstack traceback:\n\t/tmp/tmp7k3qzcyh.lua:24: in local 'candidate'\n\t/tmp/tmp7k3qzcyh.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907409
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i=1,#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpe53iznjc.lua:20: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907409
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i=1,#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpe53iznjc.lua:20: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907409
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s do\n        if s[i] ~= \" \" then\n            if #t == n then\n                t[#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpf0rhqs8g.lua:23: ']' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907409
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmph5hqazx1.lua:20: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907409
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] == s[i+1] then\n            if t[s[i]] == nil then\n                t[s[i]] = 1\n            else\n                t[s[i]] = t[s[i]] + 1\n            end\n        end\n    end\n    for i = 1, #t, 2 do\n        if t[i] == n then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwgx1mt71.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmpwgx1mt71.lua:22: in local 'candidate'\n\t/tmp/tmpwgx1mt71.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907409
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            t[s:sub(i, i)] = true\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqnqx_r7y.lua:30: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpqnqx_r7y.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907409
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        for j = 1, #s, 1 do\n            if s[i] == s[j] and j - i + 1 == n then\n                t[s[i]] = 1\n                break\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_o6o7h2r.lua:22: table index is nil\nstack traceback:\n\t/tmp/tmp_o6o7h2r.lua:22: in local 'candidate'\n\t/tmp/tmp_o6o7h2r.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907409
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpo5jpv7pu.lua:20: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907409
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    local i = 1\n    while i <= #s do\n        local word = \"\"\n        local j = 1\n        while j <= #s do\n            if s[j] ~= \" \" then\n                word = word .. s[j]\n                j = j + 1\n            else\n                j = j + 1\n            end\n        end\n        if word ~= \"\" and #word == n then\n            table.insert(words, word)\n        end\n        i = i + 1\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpen_szvv8.lua:25: attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpen_szvv8.lua:25: in local 'candidate'\n\t/tmp/tmpen_szvv8.lua:42: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907409
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local table = {}\n    for i = 1, #s, 2 do\n        if s:sub(i, i) == s:sub(i, i):len() == n then\n            table[s:sub(i, i)] = true\n        end\n    end\n    return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprbouyb2d.lua:30: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmprbouyb2d.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907409
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s do\n        if s:sub(i, i) == \" \" then\n            if t[s:sub(1, i - 1)] == nil then\n                t[s:sub(1, i - 1)] = {}\n            end\n            t[s:sub(1, i - 1)] = t[s:sub(1, i - 1)] .. {s:sub(i + 1, #s)}\n        end\n    end\n    return t[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkt343i6_.lua:24: attempt to concatenate a table value (field '?')\nstack traceback:\n\t/tmp/tmpkt343i6_.lua:24: in local 'candidate'\n\t/tmp/tmpkt343i6_.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907409
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpo5jpv7pu.lua:20: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907409
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpcoo7sfgx.lua:20: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907409
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= \" \" then\n            if s[i] == s[i+1] then\n                if t[s[i]] == nil then\n                    t[s[i]] = 1\n                else\n                    t[s[i]] = t[s[i]] + 1\n            end\n        end\n    end\n    for i = 1, #t, 2 do\n        if t[i] == n then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp6xjgc32_.lua:49: 'end' expected (to close 'function' at line 17) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907409
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local t = {}\n    for i = 1, #s, 1 do\n        if s:sub(i, i, n) == n then\n            table.insert(t, s:sub(i, i, n))\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmzvc5s70.lua:30: expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpmzvc5s70.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907409
    },
    {
      "exit_code": 1,
      "program": "-- Given a string s and a natural number n, you have been tasked to implement \n-- a function that returns a table of all words from string s that contain exactly \n-- n consonants, in order these words appear in the string s.\n-- If the string s is empty then the function should return an empty table.\n-- Note: you may assume the input string contains only letters and spaces.\n-- Examples:\n-- >>> select_words(\"Mary had a little lamb\", 4)\n-- [\"little\"]\n-- >>> select_words(\"Mary had a little lamb\", 3)\n-- [\"Mary\", \"lamb\"]\n-- >>> select_words(\"simple white space\", 2)\n-- []\n-- >>> select_words(\"Hello world\", 4)\n-- [\"world\"]\n-- >>> select_words(\"Uncle sam\", 3)\n-- [\"Uncle\"]\nlocal function select_words(s, n)\n    local words = {}\n    for i = 1, #s do\n        if s:sub(i, i) == \" \" then\n            if words[s:sub(1, i)] == nil then\n                words[s:sub(1, i)] = {}\n            end\n            words[s:sub(1, i)] = words[s:sub(1, i)]\n        else\n            if words[s:sub(1, i)] == nil then\n                words[s:sub(1, i)] = {}\n            end\n            words[s:sub(1, i)] = words[s:sub(1, i)]\n        end\n    end\n    for i = 1, #words do\n        if words[i] == nil then\n            words[i] = {}\n        end\n        words[i] = words[i]\n    end\n    return words[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr495vu0j.lua:44: expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpr495vu0j.lua:44: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907409
    }
  ]
}