{
  "language": "lua",
  "name": "HumanEval_57_monotonic",
  "results": [
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    if #l == 0 then\n        return true\n    end\n    if l[1] < l[2] then\n        return true\n    end\n    if l[1] > l[2] then\n        return false\n    end\n    return monotonic(l[3:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmplj0vx_i5.lua:18: ']' expected near ':'\n",
      "stdout": "",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i, j, n = 1, 1, len(l)\n    for i = 1, n do\n        if l[i] < l[i-1] then\n            return false\n        end\n        if l[i] > l[i-1] then\n            n = i\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuzpi11rr.lua:9: attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmpuzpi11rr.lua:9: in local 'candidate'\n\t/tmp/tmpuzpi11rr.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    if #l < 2 then return true end\n    if l[1] > l[2] then return false else return true end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsontrcmy.lua:18: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpsontrcmy.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local t = {}\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpe_buqh6g.lua:11: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local n = 1\n    for k = 2, #l, 2 do\n        if l[k] < l[k-1] then\n            n = -n\n        end\n    end\n    return n == 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphlbvm_ah.lua:23: expected: false, actual: true\nstack traceback:\n\t/tmp/tmphlbvm_ah.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i, j\n    for i = 1, #l, 1 do\n        for j = i + 1, #l, 1 do\n            if l[i] > l[j] then\n                return false\n            end\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy7n_dc0w.lua:26: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpy7n_dc0w.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i, n = 1, #l\n    if n == 0 then return true end\n    if l[1] < l[n] then return true end\n    for i = 2, n do\n        if l[i] < l[i-1] then return false end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkrfy26bo.lua:23: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpkrfy26bo.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i, n = 1, #l\n    while i < n do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg7jxuyzk.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpg7jxuyzk.lua:11: in local 'candidate'\n\t/tmp/tmpg7jxuyzk.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907449
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i, j = 1, 1\n    while i < #l do\n        if l[i] < l[j] then\n            j = i\n        end\n        i = i + 1\n    end\n    return j == 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplzfy73rw.lua:24: expected: false, actual: true\nstack traceback:\n\t/tmp/tmplzfy73rw.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local n = 1\n    for i = 2, #l, 2 do\n        if l[i] < l[i-1] then\n            n = -n\n        end\n    end\n    return n == 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxzsq5ol1.lua:23: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxzsq5ol1.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local last = l[1]\n    for i = 2, #l, 1 do\n        if l[i] < last then\n            return false\n        end\n        last = l[i]\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp81qdbq44.lua:26: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp81qdbq44.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local last = l[1]\n    while i < #l do\n        if l[i] < last then\n            return false\n        end\n        last = l[i]\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4thutjwk.lua:27: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4thutjwk.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local last = l[1]\n    for i = 2, #l, 1 do\n        if l[i] < last then\n            return false\n        end\n        last = l[i]\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp81qdbq44.lua:26: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp81qdbq44.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local last = l[1]\n    while i < #l do\n        if l[i] < last then\n            return false\n        end\n        last = l[i]\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4thutjwk.lua:27: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4thutjwk.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local last = l[1]\n    for i = 2, #l, 1 do\n        if l[i] < last then\n            return false\n        end\n        last = l[i]\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp81qdbq44.lua:26: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp81qdbq44.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local last = l[1]\n    while i < #l do\n        if l[i] < last then\n            return false\n        elseif l[i] > last then\n            last = l[i]\n        else\n            return true\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmprd9_nvhz.lua:18: 'end' expected (to close 'if' at line 12) near 'i'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local last = l[1]\n    while i < #l do\n        if l[i] < last then\n            return false\n        elseif l[i] > last then\n            last = l[i]\n        else\n            i = i + 1\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsv915o9p.lua:29: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsv915o9p.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local last = l[1]\n    while i < #l do\n        if l[i] < last then\n            return false\n        end\n        last = l[i]\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4thutjwk.lua:27: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4thutjwk.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local last = l[1]\n    while i < #l do\n        if l[i] < last then\n            return false\n        end\n        last = l[i]\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4thutjwk.lua:27: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4thutjwk.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local n = 1\n    for i = 2, #l, 2 do\n        if l[i] < l[i-1] then\n            n = -n\n        end\n    end\n    return n == 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxzsq5ol1.lua:23: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxzsq5ol1.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local n = 0\n    for i = 1, #l, 1 do\n        if l[i] < l[i-1] then\n            n = n + 1\n        end\n    end\n    return n == #l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0echynjl.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp0echynjl.lua:11: in local 'candidate'\n\t/tmp/tmp0echynjl.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local j = 2\n    while j < #l do\n        if l[i] < l[j] then\n            return false\n        end\n        i = j\n        j = j + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local n = 1\n    for i = 1, #l, 2 do\n        if l[i] < l[i-1] then\n            n = -n\n        end\n    end\n    return n == 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz5tznlow.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpz5tznlow.lua:11: in local 'candidate'\n\t/tmp/tmpz5tznlow.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local last = l[1]\n    while i < #l do\n        if l[i] < last then\n            return false\n        end\n        last = l[i]\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4thutjwk.lua:27: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4thutjwk.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i - 1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp82rcav0j.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp82rcav0j.lua:11: in local 'candidate'\n\t/tmp/tmp82rcav0j.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i, j, k\n    for i = 1, #l, 1 do\n        for j = 2, #l, 2 do\n            for k = 3, #l, 3 do\n                if l[i] > l[j] and l[j] > l[k] then\n                    return false\n                end\n            end\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprr1eylf3.lua:28: expected: true, actual: false\nstack traceback:\n\t/tmp/tmprr1eylf3.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i, j\n    for i = 1, #l, 1 do\n        for j = 2, #l, 2 do\n            if l[i] > l[j] then\n                return false\n            end\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpekecpvj8.lua:23: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpekecpvj8.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i, m = 1, l[1]\n    for i = 2, #l, 1 do\n        if l[i] < m then\n            m = l[i]\n        else\n            return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmp6g4h9x6t.lua:32: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i, j\n    for i = 1, #l, 1 do\n        for j = i + 1, #l, 1 do\n            if l[i] > l[j] then\n                return false\n            end\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy7n_dc0w.lua:26: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpy7n_dc0w.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i, j\n    for i = 1, #l, 1 do\n        for j = i + 1, #l, 1 do\n            if l[i] > l[j] then\n                return false\n            end\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy7n_dc0w.lua:26: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpy7n_dc0w.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local last = l[i]\n    while i < #l do\n        if l[i] < last then\n            return false\n        end\n        last = l[i]\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjlpqw6pi.lua:27: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjlpqw6pi.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local n = 1\n    local last = l[1]\n    for i = 2, #l, 1 do\n        if l[i] < last then\n            n = -n\n        end\n        last = l[i]\n    end\n    return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local last = l[1]\n    while i < #l do\n        if l[i] < last then\n            return false\n        end\n        last = l[i]\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4thutjwk.lua:27: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4thutjwk.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i - 1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp82rcav0j.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp82rcav0j.lua:11: in local 'candidate'\n\t/tmp/tmp82rcav0j.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local n = 1\n    for i = 1, #l, 2 do\n        if l[i] > l[i+1] then\n            n = -n\n        end\n    end\n    return n == 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsv1ve9ac.lua:23: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpsv1ve9ac.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local n = 1\n    local last = l[1]\n    for i = 2, #l, 1 do\n        if l[i] < last then\n            n = -n\n        end\n        last = l[i]\n    end\n    return n == 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1z6c4q_b.lua:26: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1z6c4q_b.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local n = 0\n    local m = 0\n    for i = 1, #l, 1 do\n        if l[i] > l[i-1] then\n            n = i\n        elseif l[i] < l[i-1] then\n            m = i\n        end\n    end\n    return n > 0 and m == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local last = l[i]\n    while i < #l do\n        if l[i] < last then\n            return false\n        end\n        last = l[i]\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjlpqw6pi.lua:27: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjlpqw6pi.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local t = {}\n    for i=1,#l,1 do\n        t[l[i]] = true\n    end\n    for i=2,#l,1 do\n        if t[l[i]] and (l[i] > l[i-1] or l[i] < l[i-1]) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7w5zdj_d.lua:24: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7w5zdj_d.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local n = 1\n    local last = l[1]\n    for _, v in ipairs(l) do\n        if v < last then\n            return false\n        end\n        last = v\n        n = n + 1\n    end\n    return n > 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsfvf_t8e.lua:27: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsfvf_t8e.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local last = l[i]\n    while i < #l do\n        if l[i] < last then\n            return false\n        elseif l[i] > last then\n            last = l[i]\n        else\n            i = i + 1\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4rtysvs2.lua:29: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4rtysvs2.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local last = l[1]\n    while i < #l do\n        if l[i] < last then\n            return false\n        end\n        last = l[i]\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4thutjwk.lua:27: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4thutjwk.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i, j = 1, 1\n    while i < #l do\n        if l[i] < l[j] then\n            j = i\n        end\n        i = i + 1\n    end\n    return j == 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplzfy73rw.lua:24: expected: false, actual: true\nstack traceback:\n\t/tmp/tmplzfy73rw.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i, j, k\n    for i = 1, #l, 1 do\n        for j = 2, #l, 2 do\n            k = l[i] - l[j]\n            if k < 0 then\n                return false\n            end\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnjr7hwx.lua:24: expected: true, actual: false\nstack traceback:\n\t/tmp/tmphnjr7hwx.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local t = {}\n    for i=1,#l,1 do\n        t[l[i]] = true\n    end\n    for i=2,#l,1 do\n        if t[l[i-1]] and (l[i] < l[i-1] or l[i] > l[i-1]) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local last = l[1]\n    while i < #l do\n        if l[i] < last then\n            return false\n        elseif l[i] > last then\n            last = l[i]\n        else\n            return true\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmprd9_nvhz.lua:18: 'end' expected (to close 'if' at line 12) near 'i'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i, j, k, t\n    t = l[1]\n    for i = 2, #l, 1 do\n        if l[i] < t then t = l[i]\n        elseif l[i] > t then return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpymnj1349.lua:22: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpymnj1349.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i, j\n    for i = 1, #l, 1 do\n        for j = i + 1, #l, 1 do\n            if l[i] > l[j] then\n                return false\n            end\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy7n_dc0w.lua:26: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpy7n_dc0w.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local n = 1\n    local m = 1\n    for i = 1, #l, 1 do\n        if l[i] < l[i-1] then\n            n = -1\n        elseif l[i] > l[i-1] then\n            m = 1\n        end\n    end\n    return n == 1 or m == -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr_fpphor.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpr_fpphor.lua:12: in local 'candidate'\n\t/tmp/tmpr_fpphor.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local last = l[1]\n    while i < #l do\n        if l[i] < last then\n            return false\n        end\n        last = l[i]\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4thutjwk.lua:27: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4thutjwk.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local last = l[1]\n    while i < #l do\n        if l[i] < last then\n            return false\n        end\n        last = l[i]\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4thutjwk.lua:27: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4thutjwk.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local t = {}\n    for i = 1, #l, 1 do\n        t[l[i]] = true\n    end\n    for i = 2, #l, 1 do\n        if t[l[i]] and (l[i] > l[i - 1] or l[i - 1] > l[i]) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzg2kg8zj.lua:24: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzg2kg8zj.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local n = 1\n    for i = 1, #l, 2 do\n        if l[i] < l[i-1] then\n            n = -n\n        end\n    end\n    return n == 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz5tznlow.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpz5tznlow.lua:11: in local 'candidate'\n\t/tmp/tmpz5tznlow.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local n = 0\n    local m = 0\n    for i = 1, #l, 1 do\n        if l[i] < l[i-1] then\n            n = i\n            m = 1\n        elseif l[i] > l[i-1] then\n            n = i\n            m = -1\n        end\n    end\n    return n, m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp91tb81ae.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp91tb81ae.lua:12: in local 'candidate'\n\t/tmp/tmp91tb81ae.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local last = l[1]\n    while i < #l do\n        if l[i] < last then\n            return false\n        end\n        last = l[i]\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4thutjwk.lua:27: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4thutjwk.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local t = {}\n    for i = 1, #l, 1 do\n        t[l[i]] = true\n    end\n    for i = 2, #l, 1 do\n        if t[l[i]] and (l[i] > l[i-1] or l[i] < l[i-1]) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu3qvay16.lua:24: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpu3qvay16.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local last = l[1]\n    while i < #l and l[i] <= last\n        i = i + 1\n        last = l[i]\n    return i == #l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmpq6r3uf5e.lua:12: 'do' expected near 'i'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local n = 0\n    local m = 0\n    for i = 1, #l, 1 do\n        if l[i] < l[i-1] then\n            n = n + 1\n        elseif l[i] > l[i-1] then\n            m = m + 1\n        end\n    end\n    return m == 0 or n == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpune9eblk.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpune9eblk.lua:12: in local 'candidate'\n\t/tmp/tmpune9eblk.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local n = 1\n    for i = 2, #l, 2 do\n        if l[i] < l[i-1] then\n            n = -n\n        end\n    end\n    return n == 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxzsq5ol1.lua:23: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxzsq5ol1.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local last = l[1]\n    for i = 2, #l, 1 do\n        if l[i] < last then\n            return false\n        end\n        last = l[i]\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp81qdbq44.lua:26: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp81qdbq44.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local last = l[i]\n    while i < #l do\n        if l[i] < last then\n            return false\n        end\n        last = l[i]\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjlpqw6pi.lua:27: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjlpqw6pi.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local n = 1\n    for i = 2, #l, 2 do\n        if l[i] < l[i-1] then\n            n = -n\n        end\n    end\n    return n == 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxzsq5ol1.lua:23: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxzsq5ol1.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local last = l[1]\n    while i < #l do\n        if l[i] < last then\n            return false\n        end\n        last = l[i]\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4thutjwk.lua:27: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4thutjwk.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i, j\n    for i = 1, #l, 1 do\n        for j = i + 1, #l, 1 do\n            if l[i] > l[j] then\n                return false\n            end\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy7n_dc0w.lua:26: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpy7n_dc0w.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i, j\n    for i = 1, #l, 1 do\n        for j = 2, #l, 2 do\n            if l[i] > l[j] then\n                return false\n            end\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpekecpvj8.lua:23: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpekecpvj8.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local t = {}\n    for i = 1, #l, 1 do\n        t[l[i]] = true\n    end\n    for i = 2, #l, 1 do\n        if t[l[i]] and l[i] < l[i - 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxym8ukit.lua:27: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxym8ukit.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i, j, k\n    for i = 1, #l, 1 do\n        for j = 2, #l, 2 do\n            if l[i] > l[j] then\n                k = i\n                i = j\n                j = k\n            end\n        end\n    end\n    return i == 1 or j == 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpizjzrnn3.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpizjzrnn3.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i, j\n    for i = 1, #l, 1 do\n        for j = i + 1, #l, 1 do\n            if l[i] > l[j] then\n                return false\n            end\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy7n_dc0w.lua:26: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpy7n_dc0w.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local n = 0\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            n = n + 1\n        end\n        i = i + 1\n    end\n    return n == #l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu2lc6c7g.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpu2lc6c7g.lua:12: in local 'candidate'\n\t/tmp/tmpu2lc6c7g.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local last = l[1]\n    while i < #l do\n        if l[i] < last then\n            return false\n        end\n        last = l[i]\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4thutjwk.lua:27: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4thutjwk.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local n = 1\n    local last = l[1]\n    for i = 2, #l, 1 do\n        if l[i] < last then\n            n = -1\n            break\n        elseif l[i] > last then\n            n = 1\n            break\n        else\n            last = l[i]\n    end\n    return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmpghv4c90e.lua:37: 'end' expected (to close 'function' at line 8) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    if #l < 2 then return true end\n    if l[1] > l[2] then return false else return true end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsontrcmy.lua:18: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpsontrcmy.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local last = l[1]\n    while i < #l do\n        if l[i] < last then\n            return false\n        end\n        last = l[i]\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4thutjwk.lua:27: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4thutjwk.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local n = 1\n    for i = 2, #l, 1 do\n        if l[i] < l[i-1] then\n            n = -n\n        end\n    end\n    return n == 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0bl1gn9.lua:24: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpl0bl1gn9.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local last = l[1]\n    while i < #l do\n        if l[i] < last then\n            return false\n        end\n        last = l[i]\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4thutjwk.lua:27: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4thutjwk.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local n = 1\n    local m = 1\n    for i = 1, #l, 2 do\n        if l[i] < l[i-1] then\n            n = -n\n        end\n        if l[i] > l[i-1] then\n            m = -m\n        end\n    end\n    return m == 1 and n == 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf22xps4e.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpf22xps4e.lua:12: in local 'candidate'\n\t/tmp/tmpf22xps4e.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    if #l == 0 then return true end\n    if l[1] > l[2] then return true\n    if l[1] < l[2] then return false\n    return monotonic(l[3:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmpr3d4vkp5.lua:11: 'end' expected (to close 'if' at line 10) near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local n = 1\n    for i = 2, #l, 2 do\n        if l[i] < l[i-1] then\n            n = -n\n        end\n    end\n    return n == 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxzsq5ol1.lua:23: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxzsq5ol1.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local n = 1\n    local last = l[1]\n    for i = 2, #l, 1 do\n        if l[i] < last then\n            n = -n\n        end\n        last = l[i]\n    end\n    return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i, j, k\n    for i = 1, #l, 1 do\n        for j = 2, #l, 2 do\n            if l[i] > l[j] then\n                k = j\n                j = i\n                i = k\n            end\n        end\n    end\n    return i == 1 or i == #l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnyyq_gq9.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnyyq_gq9.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i - 1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp82rcav0j.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp82rcav0j.lua:11: in local 'candidate'\n\t/tmp/tmp82rcav0j.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i, j, k\n    for i = 1, #l, 1 do\n        for j = 2, #l, 2 do\n            if l[i] > l[j] then\n                k = j\n                break\n            end\n        end\n        if k then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe5opwhsu.lua:27: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpe5opwhsu.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i, n = 1, #l\n    if n < 2 then return true end\n    for i = 2, n, 1 do\n        if l[i] < l[i-1] then return false end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy4ilf9ew.lua:23: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpy4ilf9ew.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local t = {}\n    for i = 1, #l, 1 do\n        t[l[i]] = true\n    end\n    for i = 2, #l, 1 do\n        if t[l[i]] and l[i] ~= l[i-1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv2lwj0d7.lua:24: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpv2lwj0d7.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i, j\n    for i = 1, #l, 1 do\n        for j = i + 1, #l, 1 do\n            if l[i] > l[j] then\n                return false\n            end\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy7n_dc0w.lua:26: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpy7n_dc0w.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i, j, k\n    for i = 1, #l, 1 do\n        for j = 2, #l, 2 do\n            if l[i] > l[j] then\n                k = j\n                for k = j + 1, #l, k do\n                    if l[k] < l[i] then\n                        return false\n                    end\n                end\n            elseif l[i] < l[j] then\n                k = i\n                for k = i + 1, #l, k do\n                    if l[k] > l[j] then\n                        return false\n                    end\n                end\n            end\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdm3pmrwr.lua:35: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdm3pmrwr.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local last = l[i]\n    while i < #l do\n        if l[i] < last then\n            return false\n        end\n        last = l[i]\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjlpqw6pi.lua:27: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjlpqw6pi.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local n = 0\n    local m = 0\n    for _, v in ipairs(l) do\n        if v < l[n] then\n            n = n + 1\n        elseif v > l[m] then\n            m = m + 1\n        end\n    end\n    return m == n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpddnflzfa.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpddnflzfa.lua:12: in local 'candidate'\n\t/tmp/tmpddnflzfa.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local last = l[1]\n    while i < #l do\n        if l[i] < last then\n            return false\n        end\n        last = l[i]\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4thutjwk.lua:27: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4thutjwk.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i - 1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp82rcav0j.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp82rcav0j.lua:11: in local 'candidate'\n\t/tmp/tmp82rcav0j.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local last = l[1]\n    while i < #l do\n        if l[i] < last then\n            return false\n        elseif l[i] > last then\n            last = l[i]\n        else\n            i = i + 1\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsv915o9p.lua:29: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsv915o9p.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i - 1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp82rcav0j.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp82rcav0j.lua:11: in local 'candidate'\n\t/tmp/tmp82rcav0j.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local last = l[1]\n    while i < #l do\n        if l[i] < last then\n            return false\n        elseif l[i] > last then\n            last = l[i]\n        else\n            i = i + 1\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsv915o9p.lua:29: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsv915o9p.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local t = {}\n    for i=1,#l,1 do\n        t[l[i]] = true\n    end\n    for i=1,#l,1 do\n        if t[l[i-1]] and t[l[i]] then\n            return true\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbw_sjdhz.lua:26: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbw_sjdhz.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    if #l == 0 then\n        return true\n    end\n    if l[1] < l[2] then\n        return true\n    end\n    if l[1] > l[2] then\n        return false\n    end\n    return monotonic(l[3:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmplj0vx_i5.lua:18: ']' expected near ':'\n",
      "stdout": "",
      "timestamp": 1661907448
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local t = {}\n    for i=1,#l,1 do\n        t[l[i]] = true\n    end\n    for i=2,#l,1 do\n        if t[l[i]] and l[i] ~= l[i-1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxfz3tnkw.lua:24: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxfz3tnkw.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i, j, k\n    for i = 1, #l, 1 do\n        for j = 2, #l, 2 do\n            if l[i] > l[j] then\n                k = j\n                break\n            end\n        end\n        if k then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe5opwhsu.lua:27: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpe5opwhsu.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i, j\n    for i = 1, #l, 2 do\n        if l[i] < l[i-1] then return false end\n        if l[i] > l[i-1] then return true end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0fz8erah.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp0fz8erah.lua:11: in local 'candidate'\n\t/tmp/tmp0fz8erah.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local n = 1\n    for i = 2, #l, 2 do\n        if l[i] < l[i-1] then\n            n = -n\n        end\n    end\n    return n == 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxzsq5ol1.lua:23: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxzsq5ol1.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local last = l[1]\n    for i = 2, #l, 1 do\n        if l[i] < last then\n            return false\n        end\n        last = l[i]\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp81qdbq44.lua:26: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp81qdbq44.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i, j\n    for i = 1, #l, 1 do\n        for j = 2, #l, 2 do\n            if l[i] > l[j] then\n                return false\n            end\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpekecpvj8.lua:23: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpekecpvj8.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local last = l[1]\n    while i < #l do\n        if l[i] < last then\n            return false\n        elseif l[i] > last then\n            last = l[i]\n        else\n            i = i + 1\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsv915o9p.lua:29: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsv915o9p.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local last = l[1]\n    while i < #l do\n        if l[i] < last then\n            return false\n        end\n        last = l[i]\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4thutjwk.lua:27: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4thutjwk.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local last = l[1]\n    for i = 2, #l, 1 do\n        if l[i] < last then\n            return false\n        end\n        last = l[i]\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp81qdbq44.lua:26: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp81qdbq44.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i - 1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp82rcav0j.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp82rcav0j.lua:11: in local 'candidate'\n\t/tmp/tmp82rcav0j.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local n = 1\n    for i = 2, #l, 2 do\n        if l[i] < l[i-1] then\n            n = -n\n        end\n    end\n    return n == 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxzsq5ol1.lua:23: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxzsq5ol1.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i, j, k\n    for i = 1, #l, 1 do\n        for j = 2, #l, 2 do\n            if l[i] > l[j] then\n                k = j\n                break\n            end\n        end\n        if k then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe5opwhsu.lua:27: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpe5opwhsu.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i, j, k\n    for i = 1, #l, 1 do\n        for j = 2, #l, 2 do\n            k = l[i]\n            if k < l[j] then\n                return false\n            end\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcxox5q1z.lua:24: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpcxox5q1z.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local last = l[1]\n    while i < #l do\n        if l[i] < last then\n            return false\n        end\n        last = l[i]\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4thutjwk.lua:27: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4thutjwk.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local n = 1\n    for i = 1, #l, 2 do\n        if l[i] < l[i-1] then\n            n = -1\n            break\n        elseif l[i] > l[i-1] then\n            n = 1\n            break\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyvczm6hk.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpyvczm6hk.lua:11: in local 'candidate'\n\t/tmp/tmpyvczm6hk.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local j = 2\n    while j < #l do\n        if l[i] < l[j] then\n            return false\n        end\n        i = j\n        j = j + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local n = 0\n    local m = 0\n    for _, v in ipairs(l) do\n        if v < l[n] then\n            n = n + 1\n        elseif v > l[m] then\n            m = m + 1\n        end\n    end\n    return n == m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2boql7bf.lua:12: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp2boql7bf.lua:12: in local 'candidate'\n\t/tmp/tmp2boql7bf.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local t = {}\n    for i = 1, #l, 1 do\n        t[l[i]] = true\n    end\n    for i = 2, #l, 1 do\n        if t[l[i]] and (l[i] > l[i-1] or l[i] < l[i-1]) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu3qvay16.lua:24: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpu3qvay16.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local last = l[i]\n    while i < #l do\n        if l[i] < last then\n            return false\n        elseif l[i] > last then\n            last = l[i]\n        else\n            i = i + 1\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4rtysvs2.lua:29: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4rtysvs2.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local n = 1\n    for i = 1, #l, 2 do\n        if l[i] < l[i-1] then\n            n = -n\n        end\n    end\n    return n == 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz5tznlow.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpz5tznlow.lua:11: in local 'candidate'\n\t/tmp/tmpz5tznlow.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local last = l[1]\n    while i < #l do\n        if l[i] < last then\n            return false\n        elseif l[i] > last then\n            last = l[i]\n        else\n            i = i + 1\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsv915o9p.lua:29: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsv915o9p.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local t = {}\n    for i = 1, #l, 1 do\n        t[l[i]] = true\n    end\n    for i = 2, #l, 1 do\n        if l[i] < l[i-1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6d9_aubv.lua:27: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6d9_aubv.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local last = l[1]\n    for i = 2, #l, 1 do\n        if l[i] < last then\n            return false\n        end\n        last = l[i]\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp81qdbq44.lua:26: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp81qdbq44.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i - 1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp82rcav0j.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp82rcav0j.lua:11: in local 'candidate'\n\t/tmp/tmp82rcav0j.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local n = 1\n    for i = 1, #l, 2 do\n        if l[i] < l[i-1] then\n            n = -n\n        end\n    end\n    return n == 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz5tznlow.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpz5tznlow.lua:11: in local 'candidate'\n\t/tmp/tmpz5tznlow.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local n = 1\n    local last = l[1]\n    for i = 2, #l, 1 do\n        if l[i] < last then\n            n = -n\n        end\n        last = l[i]\n    end\n    return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i, j = 1, 1\n    while i < #l do\n        if l[i] < l[j] then\n            j = i\n        end\n        i = i + 1\n    end\n    return j == 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplzfy73rw.lua:24: expected: false, actual: true\nstack traceback:\n\t/tmp/tmplzfy73rw.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i, j\n    for i = 1, #l, 1 do\n        for j = i + 1, #l, 1 do\n            if l[i] > l[j] then\n                return false\n            end\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy7n_dc0w.lua:26: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpy7n_dc0w.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local last = l[1]\n    while i < #l do\n        if l[i] < last then\n            return false\n        end\n        last = l[i]\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4thutjwk.lua:27: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4thutjwk.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local last = l[1]\n    while i < #l do\n        if l[i] < last then\n            return false\n        end\n        last = l[i]\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4thutjwk.lua:27: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4thutjwk.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local last = l[1]\n    while i < #l do\n        if l[i] < last then\n            return false\n        end\n        last = l[i]\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4thutjwk.lua:27: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4thutjwk.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local n = 1\n    local last = l[1]\n    for i = 2, #l, 1 do\n        if l[i] < last then\n            n = -1\n            break\n        elseif l[i] > last then\n            n = 1\n        end\n        last = l[i]\n    end\n    return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnhuxh38s.lua:26: expected: true, actual: 1\nstack traceback:\n\t/tmp/tmpnhuxh38s.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i, n = 1, #l\n    if n < 2 then return true end\n    for i = 2, n do\n        if l[i] < l[i - 1] then return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplxq7xkec.lua:24: expected: true, actual: false\nstack traceback:\n\t/tmp/tmplxq7xkec.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local last = l[1]\n    for i = 2, #l, 1 do\n        if l[i] < last then\n            return false\n        end\n        last = l[i]\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp81qdbq44.lua:26: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp81qdbq44.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i - 1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp82rcav0j.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp82rcav0j.lua:11: in local 'candidate'\n\t/tmp/tmp82rcav0j.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local n = 1\n    for i = 2, #l, 2 do\n        if l[i] < l[i-1] then\n            n = -n\n        end\n    end\n    return n == 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxzsq5ol1.lua:23: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxzsq5ol1.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local last = l[1]\n    for i = 2, #l, 1 do\n        if l[i] < last then\n            return false\n        end\n        last = l[i]\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp81qdbq44.lua:26: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp81qdbq44.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i - 1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp82rcav0j.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp82rcav0j.lua:11: in local 'candidate'\n\t/tmp/tmp82rcav0j.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local last = l[1]\n    for i = 2, #l, 1 do\n        if l[i] < last then\n            return false\n        end\n        last = l[i]\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp81qdbq44.lua:26: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp81qdbq44.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i, n = 1, #l\n    while i < n and l[i] < l[i + 1] do\n        i = i + 1\n    end\n    return i == n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy28e2kti.lua:22: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpy28e2kti.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local last = l[1]\n    while i < #l do\n        if l[i] < last then\n            return false\n        end\n        last = l[i]\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4thutjwk.lua:27: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4thutjwk.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    if #l < 2 then return true end\n    if l[1] > l[2] then return true\n    if l[1] < l[2] then return false\n    for i = 3, #l, 2 do\n        if l[i] < l[i - 1] then return false\n        if l[i] > l[i - 1] then return true\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmpn8071nuk.lua:11: 'end' expected (to close 'if' at line 10) near 'if'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local last = l[i]\n    while i < #l do\n        if l[i] < last then\n            return false\n        elseif l[i] > last then\n            last = l[i]\n        else\n            i = i + 1\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4rtysvs2.lua:29: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4rtysvs2.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local last = l[1]\n    while i < #l do\n        if l[i] < last then\n            return false\n        end\n        last = l[i]\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4thutjwk.lua:27: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4thutjwk.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i - 1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp82rcav0j.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp82rcav0j.lua:11: in local 'candidate'\n\t/tmp/tmp82rcav0j.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local last = l[1]\n    while i < #l and l[i] <= last\n        i = i + 1\n        last = l[i]\n    return i == #l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmpq6r3uf5e.lua:12: 'do' expected near 'i'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local last = l[1]\n    while i < #l and l[i] <= last\n        i = i + 1\n    end\n    return i == #l or l[i] < last\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmp0p58e48s.lua:12: 'do' expected near 'i'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i, j, k\n    for i = 1, #l, 1 do\n        for j = 2, #l, 2 do\n            if l[i] > l[j] then\n                k = j\n                break\n            end\n        end\n        if k then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe5opwhsu.lua:27: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpe5opwhsu.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local n = 1\n    for i = 2, #l, 1 do\n        if l[i] < l[i-1] then\n            n = -n\n        end\n    end\n    return n == 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0bl1gn9.lua:24: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpl0bl1gn9.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local n = 1\n    for i = 2, #l, 2 do\n        if l[i] < l[i-1] then\n            n = -n\n        end\n    end\n    return n == 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxzsq5ol1.lua:23: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxzsq5ol1.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i - 1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp82rcav0j.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp82rcav0j.lua:11: in local 'candidate'\n\t/tmp/tmp82rcav0j.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    local last = l[1]\n    while i < #l do\n        if l[i] < last then\n            return false\n        end\n        last = l[i]\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4thutjwk.lua:27: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4thutjwk.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907448
    },
    {
      "exit_code": 1,
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local i = 1\n    while i < #l do\n        if l[i] < l[i-1] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjjps18ei.lua:11: attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpjjps18ei.lua:11: in local 'candidate'\n\t/tmp/tmpjjps18ei.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907448
    },
    {
      "program": "-- Return true is table elements are monotonically increasing or decreasing.\n-- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n-- False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n    local t = {}\n    for i = 1, #l, 1 do\n        t[l[i]] = true\n    end\n    for i = 2, #l, 1 do\n        if t[l[i]] and l[i] ~= l[i-1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv2lwj0d7.lua:24: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpv2lwj0d7.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}