{
  "name": "HumanEval_119_match_parens",
  "language": "lua",
  "prompt": "-- You are given a table of two strings, both strings consist of open\n-- parentheses '(' or close parentheses ')' only.\n-- Your job is to check if it is possible to concatenate the two strings in\n-- some order, that the resulting string will be good.\n-- A string S is considered to be good if and only if all parentheses in S\n-- are balanced. For example: the string '(())()' is good, while the string\n-- '())' is not.\n-- Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n-- Examples:\n-- >>> match_parens(['()(', ')'])\n-- 'Yes'\n-- >>> match_parens([')', ')'])\n-- 'No'\nlocal function match_parens(lst)\n",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = match_parens\n    lu.assertEquals(candidate({'()(', ')'}), 'Yes')\n    lu.assertEquals(candidate({')', ')'}), 'No')\n    lu.assertEquals(candidate({'(()(())', '())())'}), 'No')\n    lu.assertEquals(candidate({')())', '(()()('}), 'Yes')\n    lu.assertEquals(candidate({'(())))', '(()())(('}), 'Yes')\n    lu.assertEquals(candidate({'()', '())'}), 'No')\n    lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')\n    lu.assertEquals(candidate({'((((', '((())'}), 'No')\n    lu.assertEquals(candidate({')(()', '(()('}), 'No')\n    lu.assertEquals(candidate({')(', ')('}), 'No')\n    lu.assertEquals(candidate({'(', ')'}), 'Yes')\n    lu.assertEquals(candidate({')', '('}), 'Yes')\nend\n\nos.exit(lu.LuaUnit.run())",
  "completions": [
    "    local res = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            res
    "    local i = 1\n    local j = 1\n    local res = {}\n    for i = 1, #lst do\n        if lst[i] == '(' then\n            if lst[j] == ')' then\n                res[i] = j\n                j = j + 1\n            else\n                j = j + 1\n            end\n        else\n            if lst[j] == '(' then\n                j = j + 1\n            else\n                j = j + 1\n            end\n        end\n    end\n    return res[1]\nend",
    "    local result = true\n    for i = 1, #lst, 2 do\n        if lst[i] ~= lst[i-1] then\n            result = false\n            break\n        end\n    end\n    return result\nend",
    "    local parens = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' then\n            if not parens[lst[i-1]] then\n                parens[lst[i-1]] = 1\n            else\n                return 'No'\n        else\n            if not parens[lst[i-1]] then\n                parens[lst[i-1]] = 0\n            else\n                return 'No'\n        end\n    end\n    return 'Yes'\nend",
    "    local res = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == '(' then\n            res
    "    local i, j, parens, parens_count, parens_stack\n    for i = 1, #lst, 1 do\n        if lst[i] == '(' then\n            parens_stack = parens_stack or {}\n            parens_stack[i] = parens_count = parens_count + 1\n        elseif lst[i] == ')' then\n            if parens_count == 0 then\n                return 'No'\n            elseif parens_stack[i] == parens_count then\n                parens_count = parens_count - 1\n            else\n                return 'No'\n        end\n    end\n    return 'Yes'\nend",
    "    local res = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            res[i] = i+1\n            res[i+1] = i\n        end\n    end\n    return res\nend",
    "    local i, j, res\n    for i = 1, #lst, 1 do\n        for j = i + 1, #lst, 1 do\n            if lst[i] == '(' and lst[j] == ')' then\n                res = match_parens(lst[i+1:j-1])\n                if res == 'Yes' then\n                    return 'Yes'\n                end\n            end\n        end\n    end\n    return 'No'\nend",
    "    local parens = {'(' = 1, ')' = -1}\n    local res = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and parens[lst[i - 1]] == 1 then\n            res[i] = 1\n            parens[lst[i]] = 2\n        elseif lst[i] == ')' and parens[lst[i - 1]] == -1 then\n            res[i] = -1\n            parens[lst[i]] = -2\n        end\n    end\n    return res == {} and 'Yes' or 'No'\nend",
    "    local i, j, parens, parens_count, parens_stack\n    for i, p in ipairs(lst) do\n        if p == '(' then\n            parens_stack = parens_stack or {}\n            parens_count = parens_count + 1\n        elseif p == ')' then\n            if parens_count == 0 then\n                return 'No'\n            elseif parens_stack and parens_count == parens_stack[1] then\n                parens_stack = parens_stack[2]\n                parens_count = parens_count - 1\n            end\n        end\n        if parens_count > 0 then\n            parens_stack[1] = parens_count\n        end\n    end\n    return 'Yes'\nend",
    "    local result = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            result[i] = result[i+1] = 'Yes'\n        elseif lst[i] == '(' and lst[i+1] == ')' then\n            result[i] = 'Yes'\n        elseif lst[i] == '(' and lst[i+1] == '(' then\n            result[i] = result[i+1] = 'Yes'\n        elseif lst[i] == '(' and lst[i+1] == '(' then\n            result[i] = 'Yes'\n        elseif lst[i] == '(' and lst[i+1] == ')' then\n            result[i] = 'Yes'\n        elseif lst[i] == '(' and lst[i+1] == ')' then\n            result[i] = 'Yes'\n        elseif lst[i] == ')' and lst[i+1] == '(' then\n            result[i] = result[i+1] = 'Yes'\n        elseif lst[i] == ')' and lst[i+1] == '(' then\n            result[i] = 'Yes'\n        elseif lst[i] == ')' and lst[i+1] == ')' then\n            result[i] = 'Yes'\n        elseif lst[i] == ')' and lst[i+1] == ')' then\n            result[i] = 'Yes'\n        elseif lst[i] == ')' and lst[i+1] == '(' then\n            result[i] = 'Yes'\n        elseif lst[i] == ')' and lst[i+1] == '(' then\n            result[i] = 'Yes'\n        elseif lst[i] == ')' and lst[i+1] == ')' then\n            result[i] = 'Yes'\n        elseif lst[i] == ')' and lst[i+1] == ')' then\n            result[i] = '",
    "    local i, j, res, parens = 0, 0, {}, {}\n    for i = 1, #lst do\n        if lst[i] == '(' then\n            parens[i] = true\n            parens[i+1] = true\n        elseif lst[i] == ')' then\n            parens[i] = false\n            parens[i+1] = false\n        end\n        if parens[i] and parens[i+1] then\n            res = res .. lst[i]\n        end\n    end\n    for i = 1, #lst do\n        if lst[i] == '(' then\n            parens[i] = true\n            parens[i+1] = true\n        elseif lst[i] == ')' then\n            parens[i] = false\n            parens[i+1] = false\n        end\n        if parens[i] and parens[i+1] then\n            res = res .. lst[i]\n        end\n    end\n    return res == '' and 'Yes' or 'No'\nend",
    "    local res = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            res
    "    local result = true\n    for i = 1, #lst, 2 do\n        if lst[i] ~= lst[i-1] then\n            result = false\n            break\n        end\n    end\n    return result\nend",
    "    local i, j, res, parens, parens_left, parens_right\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' then\n            if parens_left == 0 then\n                parens_left = i\n            else\n                parens_right = i\n            end\n        else\n            if parens_left > 0 then\n                if parens_right > 0 then\n                    if parens_left == parens_right then\n                        parens = parens_left\n                    else\n                        return 'No'\n                    end\n                else\n                    return 'No'\n                end\n            else\n                parens_left = 0\n            end\n        end\n    end\n    if parens_left > 0 then\n        return 'No'\n    end\n    return 'Yes'\nend",
    "    local result = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            result
    "    local parens = {}\n    for i = 1, #lst do\n        if lst[i] == '(' then\n            if parens[#                                                                                                                                                                                                                                                ",
    "    local res = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == '(' then\n            res[#",
    "    local result = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == '(' then\n            result
    "    local result = true\n    for _, s in ipairs(lst) do\n        if s == '(' then\n            if not match_parens(lst[1:]) then\n                result = false\n            end\n        elseif s == ')' then\n            if match_parens(lst[1:]) then\n                result = false\n            end\n        end\n    end\n    return result\nend",
    "    local i, j, parens = 1, 1, 0\n    for i = 1, #lst do\n        if lst[i] == '(' then\n            parens = parens + 1\n        elseif lst[i] == ')' then\n            parens = parens - 1\n        end\n        if parens < 0 then\n            return 'No'\n        end\n    end\n    return 'Yes'\nend",
    "    local result = true\n    for i = 1, #lst, 2 do\n        if lst[i] ~= lst[i+1] then\n            result = false\n            break\n        end\n    end\n    return result\nend",
    "    local result = true\n    for i = 1, #lst, 2 do\n        if lst[i] ~= lst[i+1] then\n            result = false\n            break\n        end\n    end\n    return result\nend",
    "    local i, j, parens = 1, 1, 0\n    for i = 1, #lst do\n        if lst[i] == '(' then\n            parens = parens + 1\n        elseif lst[i] == ')' then\n            parens = parens - 1\n        end\n        if parens < 0 then\n            return 'No'\n        end\n    end\n    return 'Yes'\nend",
    "    local res = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            res[i] = i+1\n            res[i+1] = i\n        end\n    end\n    return res[1] == nil and 'Yes' or 'No'\nend",
    "    local result = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            result[i] = true\n            result[i+1] = true\n        elseif lst[i] == '(' then\n            result[i] = true\n        elseif lst[i] == ')' then\n            result[i] = true\n        end\n    end\n    return result\nend",
    "    local i, j, res, parens, parens_count\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' then\n            parens = true\n            parens_count = 0\n        elseif lst[i] == ')' then\n            parens = false\n            if parens_count == 0 then\n                res = 'No'\n                break\n            elseif parens_count == 1 then\n                res = 'Yes'\n                break\n            else\n                parens_count = parens_count - 1\n        end\n    end\n    return res\nend",
    "    local result = true\n    for _, v in ipairs(lst) do\n        if v == '(' then\n            if not match_parens(lst[1:]) then\n                result = false\n            end\n        elseif v == ')' then\n            if match_parens(lst[1:]) then\n                result = false\n            end\n        end\n    end\n    return result\nend",
    "    local i, j, parens = 1, 1, 0\n    for i = 1, #lst do\n        if lst[i] == '(' then\n            parens = parens + 1\n        elseif lst[i] == ')' then\n            parens = parens - 1\n        end\n        if parens < 0 then\n            return 'No'\n        end\n    end\n    return 'Yes'\nend",
    "    local res = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            res[#res+1] = i\n        end\n    end\n    return res[1] == #res and 'Yes' or 'No'\nend",
    "    local i, j, res, parens, parens_count\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' then\n            parens = 1\n            parens_count = 0\n        elseif lst[i] == ')' then\n            parens = 0\n            parens_count = 0\n        elseif parens == 1 then\n            if parens_count == 0 then\n                parens_count = 1\n            elseif parens_count == 1 then\n                parens_count = 0\n            else\n                return 'No'\n        else\n            return 'No'\n    end\n    return 'Yes'\nend",
    "    local res = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            res[i] = i+1\n            res[i+1] = i\n        end\n    end\n    return res[1]\nend",
    "    local result = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == '(' then\n            result[#result+1] = '('\n            i = i + 1\n        elseif lst[i] == ')' and lst[i+1] == ')' then\n            result[#result+1] = ')'\n            i = i + 1\n        else\n            result[#result+1] = lst[i]\n        end\n    end\n    return #result == 0 and 'Yes' or 'No'\nend",
    "    local i, j, parens, res\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            parens = parens + 1\n        elseif lst[i] == ')' and lst[i+1] == '(' then\n            parens = parens - 1\n        end\n        if parens < 0 then\n            return 'No'\n        end\n    end\n    for i = 2, #lst, 2 do\n        if lst[i] == '(' and lst[i-1] == ')' then\n            parens = parens + 1\n        elseif lst[i] == ')' and lst[i-1] == '(' then\n            parens = parens - 1\n        end\n        if parens < 0 then\n            return 'No'\n        end\n    end\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            parens = parens + 1\n        elseif lst[i] == ')' and lst[i+1] == '(' then\n            parens = parens - 1\n        end\n        if parens < 0 then\n            return 'No'\n        end\n    end\n    for i = 2, #lst, 2 do\n        if lst[i] == '(' and lst[i-1] == ')' then\n            parens = parens + 1\n        elseif lst[i] == ')' and lst[i-1] == '(' then\n            parens = parens - 1\n        end\n        if parens < 0 then\n            return 'No'\n        end\n    end\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            parens = parens + 1\n        elseif lst[i] == ')' and lst[i+1] == '(' then\n            parens = parens - 1\n        end\n        ",
    "    local result = true\n    for _, s in ipairs(lst) do\n        if s == '(' then\n            if not match_parens(lst[1:]) then\n                result = false\n                break\n            end\n        elseif s == ')' then\n            if match_parens(lst[1:]) then\n                result = false\n                break\n            end\n        end\n    end\n    return result\nend",
    "    local i, j, parens = 1, 1, 0\n    for i = 1, #lst do\n        if lst[i] == '(' then\n            parens = parens + 1\n        elseif lst[i] == ')' then\n            parens = parens - 1\n        end\n        if parens < 0 then\n            return 'No'\n        end\n    end\n    return 'Yes'\nend",
    "    local parens = {'(': ')', ')': '('}\n    local res = {}\n    for i = 1, #lst, 2 do\n        if lst[i] ~= '(' and lst[i] ~= ')' then\n            res[#res + 1] = lst[i]\n        else\n            if not parens[lst[i]] then\n                return 'No'\n            else\n                res[#res + 1] = parens[lst[i]]\n            end\n        end\n    end\n    return 'Yes'\nend",
    "    local res = {}\n    for i=1,#lst do\n        if lst[i] == '(' then\n            if not res[#res] then\n                res[#res] = 1\n            else\n                return 'No'\n            end\n        else\n            if not res[#res] then\n                res[#res] = 1\n            else\n                return 'No'\n            end\n        end\n    end\n    return 'Yes'\nend",
    "    local i, j, parens = 1, 1, 0\n    for i = 1, #lst do\n        if lst[i] == '(' then\n            parens = parens + 1\n        elseif lst[i] == ')' then\n            parens = parens - 1\n        end\n        if parens < 0 then\n            return 'No'\n        end\n    end\n    return 'Yes'\nend",
    "    local result = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            result[i] = i+1\n            result[i+1] = i\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == '(' then\n            result[#result+1] = '('\n        elseif lst[i] == '(' and lst[i+1] == ')' then\n            result[#result+1] = ')'\n        elseif lst[i] == ')' and lst[i+1] == '(' then\n            result[#result+1] = '('\n        elseif lst[i] == ')' and lst[i+1] == ')' then\n            result[#result+1] = ')'\n        else\n            result[#result+1] = lst[i]\n        end\n    end\n    return #result == 0 and 'Yes' or 'No'\nend",
    "    local result = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            result[#result+1] = lst[i]\n            i = i + 1\n        elseif lst[i] == ')' and lst[i+1] == '(' then\n            result[#result+1] = lst[i]\n            i = i + 1\n        else\n            result[#result+1] = lst[i]\n    end\n    if #result == 0 then\n        return 'Yes'\n    else\n        return 'No'\nend",
    "    local i, j, parens = 1, 1, {}\n    for i = 1, #lst do\n        if lst[i] == '(' then\n            parens[i] = 1\n            j = i\n        elseif lst[i] == ')' then\n            if parens[j] == 1 then\n                return 'No'\n            else\n                parens[i] = 0\n            end\n        end\n    end\n    return 'Yes'\nend",
    "    local i, j, res = 1, 1, true\n    for i = 1, #lst do\n        if lst[i] == '(' then\n            j = i\n            while j < #lst and lst[j] != ')' do\n                j = j + 1\n            if j == #lst then\n                res = false\n                break\n            else\n                j = j + 1\n        else\n            j = i\n        end\n    end\n    return res\nend",
    "    local res = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == '(' then\n            res[#res+1] = '('\n            i = i + 1\n        elseif lst[i] == '(' and lst[i+1] == ')' then\n            res[#res+1] = ')'\n            i = i + 1\n        elseif lst[i] == ')' and lst[i+1] == ')' then\n            res[#res+1] = ')'\n            i = i + 1\n        elseif lst[i] == ')' and lst[i+1] == '(' then\n            res[#res+1] = '('\n            i = i + 1\n        else\n            res[#res+1] = lst[i]\n        end\n    end\n    return res[1] == '(' and res[#res] == ')'\nend\nprint(match_parens(['(()())', '()()']) == 'Yes')\nprint(match_parens(['()(()())', '()()']) == 'No')\nprint(match_parens(['(()(()()', '()()']) == 'Yes')\nprint(match_parens(['(()(()()', '()()']) == 'No')\nprint(match_parens(['(()(()()', '()()']) == 'No')\nprint(match_parens(['(()(()()', '()()']) == 'No')\nprint(match_parens(['(()(()()', '()()']) == 'No')\nprint(match_parens(['(()(()()', '()()']) == 'No')\nprint(match_parens(['(()(()()', '()()']) == 'No')\nprint(match_parens(['(()(()()', '()()']) == 'No')\nprint(match_parens(['(()(()()', '()()']) == 'No')\nprint(match_parens(['(()(()()', '()",
    "    local i, j, parens = 1, 1, 0\n    for i = 1, #lst do\n        if lst[i] == '(' then\n            parens = parens + 1\n        elseif lst[i] == ')' then\n            parens = parens - 1\n        end\n        if parens < 0 then\n            return 'No'\n        end\n    end\n    return 'Yes'\nend",
    "    local res = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            res[#res+1] = lst[i+1]\n            i = i + 1\n        end\n    end\n    return res[1] == ')' and res[#res] == '(' and res[#res+1] == ')' and 'Yes' or 'No'\nend",
    "    local res = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == '(' then\n            res[#res+1] = '('\n        elseif lst[i] == ')' and lst[i+1] == ')' then\n            res[#res+1] = ')'\n        else\n            return 'No'\n        end\n    end\n    return 'Yes'\nend",
    "    local i, j, parens = 1, 1, 0\n    for i = 1, #lst do\n        if lst[i] == '(' then\n            parens = parens + 1\n        elseif lst[i] == ')' then\n            parens = parens - 1\n        end\n        if parens < 0 then\n            return 'No'\n        end\n    end\n    return 'Yes'\nend",
    "    local result = true\n    for _, v in ipairs(lst) do\n        if v == '(' then\n            if not match_parens(lst[1:]) then\n                result = false\n                break\n            end\n        elseif v == ')' then\n            if not match_parens(lst[1:]) then\n                result = false\n                break\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            result[i] = i+1\n            result[i+1] = i\n        end\n    end\n    return result\nend",
    "    local parens = {'(': ')', ')': '(', ')': '('}\n    local result = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == lst[i+1] then\n            result[lst[i]] = lst[i]\n        elseif parens[lst[i]] == lst[i+1] then\n            result[lst[i]] = lst[i]\n        elseif parens[lst[i+1]] == lst[i] then\n            result[lst[i+1]] = lst[i+1]\n        else\n            return 'No'\n    end\n    return 'Yes'\nend",
    "    local res = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            res[#res+1] = lst[i+1]\n            i = i + 1\n        end\n    end\n    return res[1] == ')' and res[#res] == '(' and res[#res+1] == ')' and res[#res+2] == '(' and res[#res+3] == ')' and res[#res+4] == ')' and res[#res+5] == '(' and res[#res+6] == ')' and res[#res+7] == '(' and res[#res+8] == ')' and res[#res+9] == '(' and res[#res+10] == ')' and res[#res+11] == '(' and res[#res+12] == ')' and res[#res+13] == '(' and res[#res+14] == ')' and res[#res+15] == '(' and res[#res+16] == ')' and res[#res+17] == '(' and res[#res+18] == ')' and res[#res+19] == '(' and res[#res+20] == ')' and res[#res+21] == '(' and res[#res+22] == ')' and res[#res+23] == '(' and res[#res+24] == ')' and res[#res+25] == '(' and res[#res+26] == ')' and res[#res+27] == '(' and res[#res+28] == ')' and res[#res+29] == '(' and res[#res+30] == ')' and res[#res+31] == '(' and res[#res+32] == ')' and res[#res+33] == '(' and res[#res+34] == ')' and res[#res+35] == '(' and res[#res+36] == ')' and res[#res+37] == '(' and res[#res+38] == ')' and res[#",
    "    local i, j, res, parens, parens_count\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' then\n            parens = true\n            parens_count = 0\n        elseif lst[i] == ')' then\n            parens = false\n            parens_count = 0\n        elseif parens == true then\n            if lst[i] == '(' then\n                parens_count = parens_count + 1\n            elseif lst[i] == ')' then\n                parens_count = parens_count - 1\n                if parens_count < 0 then\n                    return 'No'\n            end\n        end\n    end\n    return 'Yes'\nend",
    "    local result = true\n    for i = 1, #lst, 2 do\n        if lst[i] ~= '(' and lst[i] ~= ')' then\n            result = false\n            break\n        end\n    end\n    return result\nend",
    "    local i, j, parens = 1, 1, 0\n    for i = 1, #lst do\n        if lst[i] == '(' then\n            parens = parens + 1\n        elseif lst[i] == ')' then\n            parens = parens - 1\n        end\n        if parens < 0 then\n            return 'No'\n        end\n    end\n    return 'Yes'\nend",
    "    local res = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            res[#res+1] = lst[i+1]\n            i = i + 1\n        end\n    end\n    return res[1] == ')' and res[#res] == '(' and res[#res+1] == ')' and 'Yes' or 'No'\nend",
    "    local result = true\n    for i = 1, #lst, 2 do\n        if lst[i] ~= '(' and lst[i] ~= ')' then\n            result = false\n            break\n        end\n    end\n    return result\nend",
    "    local result = true\n    for i = 1, #lst, 2 do\n        if lst[i] ~= lst[i+1] then\n            result = false\n            break\n        end\n    end\n    return result\nend",
    "    local result = true\n    for _, s in ipairs(lst) do\n        if s == '(' then\n            if not match_parens(lst[1:]) then\n                result = false\n            end\n        elseif s == ')' then\n            if not match_parens(lst[1:]) then\n                result = false\n            end\n        end\n    end\n    return result\nend",
    "    local i, j, res, parens = 0, 0, {}, {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' then\n            if parens[lst[i]] == 0 then\n                parens[lst[i]] = 1\n                parens[lst[i+1]] = 1\n                i = i + 1\n            end\n        elseif lst[i] == ')' then\n            if parens[lst[i]] == 1 then\n                parens[lst[i]] = 0\n                parens[lst[i-1]] = 0\n                i = i - 1\n            end\n        end\n    end\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' then\n            if parens[lst[i]] == 0 then\n                return 'No'\n            end\n        elseif lst[i] == ')' then\n            if parens[lst[i]] == 1 then\n                return 'No'\n            end\n        end\n    end\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' then\n            if parens[lst[i]] == 0 then\n                res = res + 1\n            end\n        elseif lst[i] == ')' then\n            if parens[lst[i]] == 1 then\n                res = res - 1\n            end\n        end\n    end\n    return res == 0 and 'Yes' or 'No'\nend",
    "    local i, j, res, parens\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == '(' then\n            parens = 1\n            i = i + 1\n        elseif lst[i] == ')' and lst[i+1] == ')' then\n            parens = 0\n            i = i + 1\n        end\n        if parens == 1 then\n            if parens == 0 then\n                res = res .. lst[i]\n            else\n                res = res .. lst[i]\n            end\n        end\n    end\n    return res\nend",
    "    local i, j, res, parens = 1, 1, {}, {}\n    for i = 1, #lst do\n        if lst[i] == '(' then\n            if parens[lst[i]] == 0 then\n                return 'No'\n            else\n                parens[lst[i]] = parens[lst[i]] - 1\n            end\n        elseif lst[i] == ')' then\n            if parens[lst[i]] == 0 then\n                return 'No'\n            else\n                parens[lst[i]] = parens[lst[i]] + 1\n            end\n        end\n        if parens[lst[i]] < 0 then\n            return 'No'\n        end\n    end\n    for i = 1, #lst do\n        if lst[i] == '(' then\n            parens[lst[i]] = parens[lst[i]] + 1\n        elseif lst[i] == ')' then\n            parens[lst[i]] = parens[lst[i]] - 1\n        end\n    end\n    for i = 1, #lst do\n        if parens[lst[i]] < 0 then\n            return 'No'\n        end\n    end\n    for i = 1, #lst do\n        if lst[i] == '(' then\n            res = res .. lst[i]\n            j = i + 1\n            while j < #lst and lst[j] != ')' do\n                res = res .. lst[j]\n                j = j + 1\n            end\n            if j == #lst then\n                return 'No'\n            else\n                i = j\n            end\n        elseif lst[i] == ')' then\n            res = res .. lst[i]\n            j = i + 1\n            while j < #lst and lst[j] != '(' then\n                res = res .. lst[j]\n                j = j + 1\n            end\n            if j == #lst then\n                return 'No'\n            else\n                i = j\n            end\n        end",
    "    local i, j, parens = 1, 1, 0\n    for i = 1, #lst do\n        if lst[i] == '(' then\n            parens = parens + 1\n        elseif lst[i] == ')' then\n            parens = parens - 1\n        end\n        if parens < 0 then\n            return 'No'\n        end\n    end\n    return 'Yes'\nend",
    "    local res = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == '(' then\n            res[#res+1] = 1\n        elseif lst[i] == '(' and lst[i+1] == ')' then\n            res[#res+1] = 2\n        elseif lst[i] == ')' and lst[i+1] == '(' then\n            res[#res+1] = 3\n        elseif lst[i] == ')' and lst[i+1] == ')' then\n            res[#res+1] = 4\n        end\n    end\n    return res[1] == 1 and 'Yes' or 'No'\nend",
    "    local result = true\n    for i = 1, #lst, 2 do\n        if lst[i] ~= '(' and lst[i] ~= ')' then\n            result = false\n            break\n        end\n    end\n    return result\nend",
    "    local result = true\n    for i = 1, #lst, 2 do\n        if lst[i] ~= '(' and lst[i] ~= ')' then\n            result = false\n            break\n        end\n    end\n    return result\nend",
    "    local i, j, res\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == '(' then\n            res = match_parens(lst[i+2:])\n            if res == 'Yes' then\n                return 'Yes'\n            end\n            i = i + 2\n        elseif lst[i] == '(' and lst[i+1] == ')' then\n            return 'No'\n        end\n    end\n    return 'No'\nend",
    "    local result = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == '(' then\n            result[#result+1] = #result\n            i = i + 1\n        end\n    end\n    if #result == 0 then\n        return 'Yes'\n    elseif #result == 1 then\n        return 'No'\n    else\n        return 'No'\n    end\nend",
    "    local i, j, res\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i + 1] == '(' then\n            res = match_parens(lst[i + 2 .. j])\n            if res == 'Yes' then\n                return 'Yes'\n            end\n            j = j + 2\n        elseif lst[i] == '(' then\n            res = match_parens(lst[i + 1 .. j])\n            if res == 'Yes' then\n                return 'Yes'\n            end\n            j = j + 1\n        end\n    end\n    return 'No'\nend",
    "    local result = true\n    for i = 1, #lst, 2 do\n        if lst[i] ~= '(' and lst[i] ~= ')' then\n            result = false\n            break\n        end\n    end\n    return result\nend",
    "    local result = true\n    for i = 1, #lst do\n        if lst[i] ~= '(' and lst[i] ~= ')' then\n            result = false\n            break\n        end\n    end\n    return result\nend",
    "    local i, j, res, parens = 0, 0, 0, {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' then\n            if parens[lst[i]] == 0 then\n                parens[lst[i]] = 1\n                parens[lst[i-1]] = 1\n            else\n                return 'No'\n            end\n        elseif lst[i] == ')' then\n            if parens[lst[i]] == 1 then\n                parens[lst[i]] = 0\n                parens[lst[i+1]] = 0\n            else\n                return 'No'\n            end\n        end\n        if parens[lst[i]] == 1 then\n            res = res + 1\n        end\n    end\n    if res == 0 then\n        return 'Yes'\n    end\n    return 'No'\nend",
    "    local result = true\n    for _, s in ipairs(lst) do\n        if s == '(' then\n            if not match_parens(lst[1:]) then\n                result = false\n            end\n        elseif s == ')' then\n            if not match_parens(lst[1:]) then\n                result = false\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            result[#result+1] = lst[i+1]\n            i = i + 1\n        end\n    end\n    return #result == 0 and 'Yes' or 'No'\nend",
    "    local result = true\n    for i = 1, #lst, 2 do\n        if lst[i] ~= '(' and lst[i] ~= ')' then\n            result = false\n            break\n        end\n    end\n    return result\nend",
    "    local res = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            res[i] = i+1\n            res[i+1] = i\n        elseif lst[i] == ')' and lst[i+1] == '(' then\n            res[i] = i+1\n            res[i+1] = i\n        end\n    end\n    return res[1] == 1 and res[2] == 2\nend",
    "    local i, j, parens = 1, 1, 0\n    for i = 1, #lst do\n        if lst[i] == '(' then\n            parens = parens + 1\n        elseif lst[i] == ')' then\n            parens = parens - 1\n        end\n        if parens < 0 then\n            return 'No'\n        end\n    end\n    return 'Yes'\nend",
    "    local res = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == '(' then\n            res[#res+1] = '('\n        elseif lst[i] == ')' and lst[i+1] == ')' then\n            res[#res+1] = ')'\n        end\n    end\n    return #res == 0 and 'Yes' or 'No'\nend",
    "    local i, j, parens, res, parens_count\n    for i, parens in ipairs(lst) do\n        if parens == '(' then\n            parens_count = parens_count + 1\n        elseif parens == ')' then\n            parens_count = parens_count - 1\n        end\n        if parens_count < 0 then\n            return 'No'\n        end\n    end\n    for i, parens in ipairs(lst) do\n        if parens == '(' then\n            parens_count = parens_count + 1\n        elseif parens == ')' then\n            parens_count = parens_count - 1\n        end\n        if parens_count < 0 then\n            return 'No'\n        end\n    end\n    for i, parens in ipairs(lst) do\n        if parens == '(' then\n            parens_count = parens_count + 1\n        elseif parens == ')' then\n            parens_count = parens_count - 1\n        end\n        if parens_count < 0 then\n            return 'No'\n        end\n    end\n    for i, parens in ipairs(lst) do\n        if parens == '(' then\n            parens_count = parens_count + 1\n        elseif parens == ')' then\n            parens_count = parens_count - 1\n        end\n        if parens_count < 0 then\n            return 'No'\n        end\n    end\n    for i, parens in ipairs(lst) do\n        if parens == '(' then\n            parens_count = parens_count + 1\n        elseif parens == ')' then\n            parens_count = parens_count - 1\n        end\n        if parens_count < 0 then\n            return 'No'\n        end\n    end\n    for i, parens in ipairs(lst) do\n        if parens == '(' then\n            parens_count = parens_count + 1",
    "    local i, j, res\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            res = match_parens(lst[i+2:])\n            if res == 'Yes' then\n                return 'Yes'\n            end\n        end\n    end\n    return 'No'\nend",
    "    local res = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            res[i] = i+1\n            res[i+1] = i\n        end\n    end\n    return res[1]\nend",
    "    local res = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == '(' then\n            res[#res+1] = '('\n        elseif lst[i] == ')' and lst[i+1] == ')' then\n            res[#res+1] = ')'\n        end\n    end\n    return #res == 0 and 'Yes' or 'No'\nend",
    "    local res = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            res[#res+1] = lst[i+1]\n            i = i + 1\n        end\n    end\n    return #res == 0 and 'Yes' or 'No'\nend",
    "    local i, j, res, parens, parens_left, parens_right\n    for i = 1, #lst, 1 do\n        if lst[i] == '(' then\n            parens_left = i\n            parens = 0\n        elseif lst[i] == ')' then\n            parens_right = i\n            parens = 0\n        end\n        if parens == 0 then\n            if parens_left > 0 and parens_right > 0 then\n                if parens_left > parens_right then\n                    res = 'No'\n                    break\n                end\n                if parens_left < parens_right then\n                    res = 'No'\n                    break\n                end\n            end\n        end\n        parens = parens + 1\n    end\n    return res\nend",
    "    local res = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            res[i] = i+1\n            res[i+1] = i\n        end\n    end\n    return res\nend",
    "    local res = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            res[i] = '('\n            res[i+1] = ')'\n        elseif lst[i] == '(' then\n            res[i] = '('\n        elseif lst[i] == ')' then\n            res[i] = ')'\n        end\n    end\n    for i = 1, #lst, 2 do\n        if res[i] == '(' and res[i+1] == ')' then\n            return 'Yes'\n        end\n    end\n    return 'No'\nend",
    "    local result = true\n    for i = 1, #lst, 2 do\n        if lst[i] ~= '(' and lst[i] ~= ')' then\n            result = false\n            break\n        end\n    end\n    return result\nend",
    "    local result = true\n    for i = 1, #lst, 2 do\n        if lst[i] ~= '(' and lst[i] ~= ')' then\n            result = false\n            break\n        end\n    end\n    return result\nend",
    "    local res = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i + 1] == ')' then\n            res[i] = 1\n            res[i + 1] = 1\n        elseif lst[i] == '(' and lst[i + 1] == '(' then\n            res[i] = 1\n            res[i + 1] = 1\n        elseif lst[i] == ')' and lst[i + 1] == ')' then\n            res[i] = 1\n            res[i + 1] = 1\n        else\n            res[i] = 0\n            res[i + 1] = 0\n        end\n    end\n    for i = 1, #lst, 2 do\n        if res[i] == 0 or res[i + 1] == 0 then\n            return 'No'\n        end\n    end\n    return 'Yes'\nend",
    "    local res = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == '(' then\n            res[#res+1] = '('\n        elseif lst[i] == ')' and lst[i+1] == ')' then\n            res[#res+1] = ')'\n        else\n            res[#res+1] = lst[i]\n        end\n    end\n    return #res == 0 and 'Yes' or 'No'\nend",
    "    local result = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            result[#result+1] = lst[i+1]\n            i = i + 1\n        end\n    end\n    return #result == 0 and 'Yes' or 'No'\nend",
    "    local parens = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' then\n            if not parens[lst[i-1]] then\n                parens[lst[i-1]] = 1\n            else\n                return 'No'\n        else\n            if not parens[lst[i-1]] then\n                return 'No'\n            else\n                parens[lst[i-1]] = 0\n        end\n    end\n    return 'Yes'\nend",
    "    local result = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            result[#result+1] = lst[i+1]\n            i = i + 1\n        elseif lst[i] == '(' then\n            result[#result+1] = lst[i]\n        elseif lst[i] == ')' then\n            if #result > 0 and result[#result] == '(' then\n                result[#result] = lst[i]\n            else\n                return 'No'\n        end\n    end\n    return 'Yes'\nend",
    "    local i, j, res, parens = 0, 0, {}, {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' then\n            if parens[lst[i]] == 0 then\n                parens[lst[i]] = 1\n                parens[lst[i-1]] = 1\n            end\n        elseif lst[i] == ')' then\n            if parens[lst[i]] == 1 then\n                parens[lst[i]] = 0\n                parens[lst[i-1]] = 0\n            end\n        end\n        if parens[lst[i]] == 1 then\n            res = false\n            break\n        end\n    end\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' then\n            if parens[lst[i]] == 0 then\n                parens[lst[i]] = 1\n                parens[lst[i-1]] = 1\n            end\n        elseif lst[i] == ')' then\n            if parens[lst[i]] == 1 then\n                parens[lst[i]] = 0\n                parens[lst[i-1]] = 0\n            end\n        end\n        if parens[lst[i]] == 1 then\n            res = false\n            break\n        end\n    end\n    return res\nend",
    "    local result = true\n    for _, s in ipairs(lst) do\n        if s == '(' then\n            if not match_parens(lst[1:]) then\n                result = false\n            end\n        elseif s == ')' then\n            if match_parens(lst[1:]) then\n                result = false\n            end\n        end\n    end\n    return result\nend",
    "    local res = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            res[i] = i+1\n            res[i+1] = i\n        end\n    end\n    return res[1]\nend",
    "    local res = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            res[i] = i+1\n            res[i+1] = i\n        end\n    end\n    return res[1]\nend",
    "    local i, j, parens = 1, 1, 0\n    for i = 1, #lst do\n        if lst[i] == '(' then\n            parens = parens + 1\n        elseif lst[i] == ')' then\n            parens = parens - 1\n        end\n        if parens < 0 then\n            return 'No'\n        end\n    end\n    return 'Yes'\nend",
    "    local i, j, res, parens = 0, 0, {}, {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' then\n            if parens[lst[i]] == 0 then\n                parens[lst[i]] = 1\n                parens[lst[i-1]] = 1\n            end\n        elseif lst[i] == ')' then\n            if parens[lst[i]] == 1 then\n                parens[lst[i]] = 0\n                parens[lst[i-1]] = 0\n            end\n        end\n        if parens[lst[i]] == 1 then\n            res = res .. lst[i]\n        end\n    end\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' then\n            if parens[lst[i]] == 0 then\n                parens[lst[i]] = 1\n                parens[lst[i-1]] = 1\n            end\n        elseif lst[i] == ')' then\n            if parens[lst[i]] == 1 then\n                parens[lst[i]] = 0\n                parens[lst[i-1]] = 0\n            end\n        end\n        if parens[lst[i]] == 1 then\n            res = res .. lst[i]\n        end\n    end\n    return res == '' and 'Yes' or 'No'\nend",
    "    local i, j, res, parens = 1, 1, {}, {}\n    for i = 1, #lst do\n        if lst[i] == '(' then\n            if parens[lst[i]] == 0 then\n                return 'No'\n            else\n                parens[lst[i]] = parens[lst[i]] - 1\n            end\n        else\n            if parens[lst[i]] == 0 then\n                return 'No'\n            else\n                parens[lst[i]] = parens[lst[i]] + 1\n            end\n        end\n    end\n    for i = 1, #lst do\n        if lst[i] == '(' then\n            parens[lst[i]] = parens[lst[i]] + 1\n        else\n            if parens[lst[i]] == 1 then\n                return 'No'\n            else\n                parens[lst[i]] = parens[lst[i]] - 1\n            end\n        end\n    end\n    for i = 1, #lst do\n        if lst[i] == '(' then\n            parens[lst[i]] = parens[lst[i]] + 1\n        else\n            if parens[lst[i]] == 0 then\n                return 'No'\n            else\n                parens[lst[i]] = parens[lst[i]] - 1\n            end\n        end\n    end\n    for i = 1, #lst do\n        if lst[i] == '(' then\n            parens[lst[i]] = parens[lst[i]] + 1\n        else\n            if parens[lst[i]] == 0 then\n                return 'No'\n            else\n                parens[lst[i]] = parens[lst[i]] - 1\n            end\n        end\n    end\n    for i = 1, #lst do\n        if lst[i] == '(' then\n            parens[lst[i]] = parens[lst[i]] + 1\n        else\n            if parens",
    "    local result = true\n    for i = 1, #lst, 2 do\n        if lst[i] ~= '(' and lst[i+1] ~= ')' then\n            result = false\n            break\n        end\n    end\n    return result\nend",
    "    local res = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == '(' then\n            res[#res+1] = '('\n        elseif lst[i] == ')' and lst[i+1] == ')' then\n            res[#res+1] = ')'\n        end\n    end\n    return #res == 0 and 'Yes' or 'No'\nend",
    "    local i, j, res\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            res = match_parens(lst[i+2:])\n            if res == 'Yes' then\n                return 'Yes'\n            end\n            i = i + 2\n        elseif lst[i] == '(' then\n            res = match_parens(lst[1:i])\n            if res == 'Yes' then\n                return 'Yes'\n            end\n            i = i + 1\n        elseif lst[i] == ')' then\n            return 'No'\n        end\n    end\n    return 'No'\nend",
    "    local res = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            res[i] = '('\n            res[i+1] = ')'\n        elseif lst[i] == ')' and lst[i+1] == '(' then\n            res[i] = ')'\n            res[i+1] = '('\n        end\n    end\n    for i = 1, #lst, 2 do\n        if res[i] == '(' and res[i+1] == ')' then\n            return 'Yes'\n        end\n    end\n    return 'No'\nend",
    "    local i, j, parens = 1, 1, 0\n    for i = 1, #lst do\n        if lst[i] == '(' then parens = parens + 1\n        elseif lst[i] == ')' then parens = parens - 1\n        if parens < 0 then return 'No'\n    end\n    return 'Yes'\nend",
    "    local res = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            res[i] = i+1\n            res[i+1] = i\n        end\n    end\n    return res[1] == nil and 'Yes' or 'No'\nend",
    "    local i, j, parens = 0, 0, 0\n    for i = 1, #lst do\n        if lst[i] == '(' then\n            parens = parens + 1\n        elseif lst[i] == ')' then\n            parens = parens - 1\n        end\n        if parens < 0 then\n            return 'No'\n        end\n    end\n    for j = 1, #lst do\n        if lst[j] == '(' then\n            parens = parens + 1\n        elseif lst[j] == ')' then\n            parens = parens - 1\n        end\n        if parens > 0 then\n            return 'No'\n        end\n    end\n    return 'Yes'\nend",
    "    local res = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == '(' then\n            res[#res+1] = '('\n            i = i + 1\n        elseif lst[i] == ')' and lst[i+1] == ')' then\n            res[#res+1] = ')'\n            i = i + 1\n        else\n            res[#res+1] = lst[i]\n        end\n    end\n    for i = 1, #res, 2 do\n        if res[i] == '(' and res[i+1] == ')' then\n            res[i] = ')'\n            res[i+1] = '('\n        end\n    end\n    return res[1] == '(' and res[#res] == ')' and 'Yes' or 'No'\nend",
    "    local i, j, res\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            res = match_parens(lst[i+2:])\n            if res == 'Yes' then\n                return 'Yes'\n            end\n            i = i + 2\n        elseif lst[i] == '(' then\n            return 'No'\n        end\n    end\n    return 'No'\nend",
    "    local result = true\n    for i = 1, #lst, 2 do\n        if lst[i] ~= '(' and lst[i] ~= ')' then\n            result = false\n            break\n        end\n    end\n    return result\nend",
    "    local res = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == '(' then\n            res[#res+1] = '('\n        elseif lst[i] == ')' and lst[i+1] == ')' then\n            res[#res+1] = ')'\n        end\n    end\n    return #res == 0 and 'Yes' or 'No'\nend",
    "    local i, j, parens = 1, 1, 0\n    for i = 1, #lst do\n        if lst[i] == '(' then\n            parens = parens + 1\n        elseif lst[i] == ')' then\n            parens = parens - 1\n        end\n        if parens < 0 then\n            return 'No'\n        end\n    end\n    return 'Yes'\nend",
    "    local i, j, parens = 1, 1, 0\n    for i = 1, #lst do\n        if lst[i] == '(' then\n            parens = parens + 1\n        elseif lst[i] == ')' then\n            parens = parens - 1\n        end\n        if parens < 0 then\n            return 'No'\n        end\n    end\n    return 'Yes'\nend",
    "    local result = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            result[i] = i+1\n            result[i+1] = i\n        elseif lst[i] == ')' and lst[i+1] == '(' then\n            result[i] = i+1\n            result[i+1] = i\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            result[i] = i+1\n            result[i+1] = i\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            result[#result+1] = lst[i+1]\n            i = i + 1\n        end\n    end\n    return result[1] == ')' and result[2] == '(' and result[#result] == ')' and result[#result-1] == '(' and result[1] == '(' and result[2] == '(' and result[#result-2] == '(' and result[#result-3] == '(' and result[#result-4] == '(' and result[#result-5] == '(' and result[#result-6] == '(' and result[#result-7] == '(' and result[#result-8] == '(' and result[#result-9] == '(' and result[#result-10] == '(' and result[#result-11] == '(' and result[#result-12] == '(' and result[#result-13] == '(' and result[#result-14] == '(' and result[#result-15] == '(' and result[#result-16] == '(' and result[#result-17] == '(' and result[#result-18] == '(' and result[#result-19] == '(' and result[#result-20] == '(' and result[#result-21] == '(' and result[#result-22] == '(' and result[#result-23] == '(' and result[#result-24] == '(' and result[#result-25] == '(' and result[#result-26] == '(' and result[#result-27] == '(' and result[#result-28] == '(' and result[#result-29] == '(' and result[#result-30] == '(' and result[#result-31] == '(' and result[#result-32] == '(' and result[#result-33] == '(' and result[#result-34] == '(' and result[#result-35] == '(' and result[#result-36] == '(' and result",
    "    local res = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            res[i] = i+1\n            res[i+1] = i\n        end\n    end\n    return res[1]\nend",
    "    local result = true\n    for i = 1, #lst, 2 do\n        if lst[i] ~= '(' and lst[i] ~= ')' then\n            result = false\n            break\n        end\n    end\n    return result\nend",
    "    local res = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            res[i] = i+1\n            res[i+1] = i\n        end\n    end\n    return res[1] == nil and 'Yes' or 'No'\nend",
    "    local res = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            res[#res+1] = lst[i+1]\n            i = i + 1\n        elseif lst[i] == '(' then\n            res[#res+1] = lst[i]\n        elseif lst[i] == ')' then\n            if #res > 0 and res[#res] == '(' then\n                res[#res] = lst[i]\n            else\n                return 'No'\n        end\n    end\n    return 'Yes'\nend",
    "    local result = true\n    for i = 1, #lst, 2 do\n        if lst[i] ~= lst[i - 1] then\n            result = false\n            break\n        end\n    end\n    return result\nend",
    "    local result = true\n    for _, s in ipairs(lst) do\n        if s == '(' then\n            if not match_parens(lst[1:]) then\n                result = false\n            end\n        elseif s == ')' then\n            if match_parens(lst[1:]) then\n                result = false\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == '(' then\n            result[#result+1] = '('\n        elseif lst[i] == ')' and lst[i+1] == ')' then\n            result[#result+1] = ')'\n        end\n    end\n    return #result == 0 and 'Yes' or 'No'\nend",
    "    local result = true\n    for _, s in ipairs(lst) do\n        if s == '(' then\n            if not match_parens(lst[1:]) then\n                result = false\n                break\n            end\n        elseif s == ')' then\n            if not match_parens(lst[1:]) then\n                result = false\n                break\n            end\n        end\n    end\n    return result\nend",
    "    local result = true\n    for _, s in ipairs(lst) do\n        if s == '(' then\n            if not match_parens(lst[1:]) then\n                result = false\n            end\n        elseif s == ')' then\n            if match_parens(lst[1:]) then\n                result = false\n            end\n        end\n    end\n    return result\nend",
    "    local res = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            res[#res+1] = lst[i+1]\n            i = i + 1\n        end\n    end\n    return res[1] == ')' and res[#res] == '(' and res[#res+1] == ')' and 'Yes' or 'No'\nend",
    "    local result = true\n    for i = 1, #lst, 2 do\n        if lst[i] ~= lst[i+1] then\n            result = false\n            break\n        end\n    end\n    return result\nend",
    "    local result = true\n    for _, v in ipairs(lst) do\n        if v == '(' then\n            if not match_parens(lst[1:]) then\n                result = false\n            end\n        elseif v == ')' then\n            if match_parens(lst[1:]) then\n                result = false\n            end\n        end\n    end\n    return result\nend",
    "    local res = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            res[#res+1] = lst[i+1]\n            i = i + 2\n        elseif lst[i] == '(' then\n            res[#res+1] = lst[i]\n        elseif lst[i] == ')' then\n            if #res > 0 and res[#res] == '(' then\n                res[#res] = lst[i]\n            else\n                return 'No'\n        end\n    end\n    return 'Yes'\nend",
    "    local parens = {'(': 1, ')': -1}\n    for _, v in ipairs(lst) do\n        if v == '(' then parens[v] = parens[v] + 1 else parens[v] = parens[v] - 1 end\n    end\n    for k, v in pairs(parens) do\n        if v < 0 then return 'No' end\n    end\n    return 'Yes'\nend",
    "    local parens = {}\n    for i = 1, #lst do\n        if lst[i] == '(' then\n            if not parens[#parens + 1] then\n                parens[#parens + 1] = i\n            else\n                return 'No'\n            end\n        else\n            if not parens[#parens] then\n                parens[#parens] = i\n            else\n                return 'No'\n            end\n        end\n    end\n    return 'Yes'\nend",
    "    local i, j, paren_count, paren_stack, result\n    for i = 1, #lst, 1 do\n        if lst[i] == '(' then\n            paren_stack = paren_stack or {}\n            paren_stack[i] = true\n        elseif lst[i] == ')' then\n            if paren_stack and paren_stack[i] then\n                paren_stack[i] = false\n            else\n                return 'No'\n        end\n    end\n    for i = 1, #lst, 1 do\n        if lst[i] == '(' then\n            paren_count = paren_count + 1\n        elseif lst[i] == ')' then\n            paren_count = paren_count - 1\n        end\n        if paren_count < 0 then\n            return 'No'\n        end\n    end\n    for i = 1, #lst, 1 do\n        if lst[i] == '(' then\n            paren_stack = paren_stack or {}\n            paren_stack[i] = true\n        elseif lst[i] == ')' then\n            if paren_stack and paren_stack[i] then\n                paren_stack[i] = false\n            else\n                return 'No'\n            end\n        end\n    end\n    for i = 1, #lst, 1 do\n        if lst[i] == '(' then\n            paren_count = paren_count + 1\n        elseif lst[i] == ')' then\n            paren_count = paren_count - 1\n        end\n        if paren_count < 0 then\n            return 'No'\n        end\n    end\n    for i = 1, #lst, 1 do\n        if lst[i] == '(' then\n            paren_stack = paren_stack or {}\n            paren_stack[i] = true\n        elseif lst[i] == ')' then\n            if paren_stack and paren_stack[i] then\n                paren_stack[i] = false\n            else\n                return 'No'\n            end\n        end\n    end\n    for i = 1, #lst, 1",
    "    local result = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            result[#result+1] = lst[i+1]\n            i = i + 1\n        end\n    end\n    return result[1] == ')' and result[2] == '(' and result[#result] == ')' and result[#result-1] == '(' and result[1] == '(' and result[2] == '(' and result[#result-1] == ')' and result[#result-2] == ')' and result[#result-3] == ')' and result[#result-4] == '(' and result[#result-5] == ')' and result[#result-6] == '(' and result[#result-7] == ')' and result[#result-8] == '(' and result[#result-9] == ')' and result[#result-10] == '(' and result[#result-11] == ')' and result[#result-12] == '(' and result[#result-13] == ')' and result[#result-14] == '(' and result[#result-15] == ')' and result[#result-16] == '(' and result[#result-17] == ')' and result[#result-18] == '(' and result[#result-19] == ')' and result[#result-20] == '(' and result[#result-21] == ')' and result[#result-22] == '(' and result[#result-23] == ')' and result[#result-24] == '(' and result[#result-25] == ')' and result[#result-26] == '(' and result[#result-27] == ')' and result[#result-28] == '(' and result[#result-29] == ')' and result[#result-30] == '(' and result[#result-31] == ')' and result[#result-32] == '(' and result[#result-33] == ')' and result[#result-34] == '(' and result[#result-35] == ')' and result",
    "    local res = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            res[i] = i+1\n            res[i+1] = i\n        end\n    end\n    return res[1]\nend",
    "    local i, j, res, parens\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == '(' then\n            parens = 2\n        elseif lst[i] == '(' and lst[i+1] == ')' then\n            parens = 1\n        elseif lst[i] == ')' and lst[i+1] == ')' then\n            parens = 0\n        end\n        if parens == 0 then\n            if res == nil then\n                res = lst[i]\n            elseif res == lst[i] then\n                res = nil\n            end\n        elseif parens == 1 then\n            if res == nil then\n                res = lst[i]\n            elseif res == lst[i] then\n                res = nil\n            end\n        elseif parens == 2 then\n            if res == nil then\n                res = lst[i]\n            elseif res == lst[i] then\n                res = nil\n            end\n        end\n    end\n    return res == nil\nend",
    "    local i, j, res, parens, parens_count\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == '(' then\n            parens = '('\n            parens_count = 1\n        elseif lst[i] == '(' and lst[i+1] == ')' then\n            parens = '('\n            parens_count = 1\n        elseif lst[i] == ')' and lst[i+1] == ')' then\n            parens = ')'\n            parens_count = 1\n        elseif lst[i] == '(' and lst[i+1] == ')' then\n            parens = '('\n            parens_count = parens_count + 1\n        elseif lst[i] == ')' and lst[i+1] == '(' then\n            parens = ')'\n            parens_count = parens_count - 1\n        elseif lst[i] == '(' and lst[i+1] == '(' then\n            parens = '('\n            parens_count = parens_count + 1\n        elseif lst[i] == '(' and lst[i+1] == ')' then\n            parens = '('\n            parens_count = parens_count + 1\n        elseif lst[i] == ')' and lst[i+1] == '(' then\n            parens = ')'\n            parens_count = parens_count - 1\n        elseif lst[i] == ')' and lst[i+1] == ')' then\n            parens = ')'\n            parens_count = parens_count - 1\n        end\n        if parens_count == 0 then\n            res = res .. parens\n        end\n    end\n    return res == '' and 'Yes' or 'No'\nend",
    "    local res = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            res[i] = i+1\n            res[i+1] = i\n        elseif lst[i] == ')' and lst[i+1] == '(' then\n            res[i] = i+1\n            res[i+1] = i\n        end\n    end\n    return res[1]\nend",
    "    local result = true\n    for i = 1, #lst, 2 do\n        if lst[i] ~= lst[i+1] then\n            result = false\n            break\n        end\n    end\n    return result\nend",
    "    local result = true\n    for i = 1, #lst, 2 do\n        if lst[i] ~= lst[i+1] then\n            result = false\n            break\n        end\n    end\n    return result\nend",
    "    local res = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            res[i] = 1\n            res[i+1] = 1\n        elseif lst[i] == '(' and lst[i+1] == '(' then\n            res[i] = 1\n            res[i+1] = 1\n        elseif lst[i] == '(' and lst[i+1] == ')' then\n            res[i] = 1\n        elseif lst[i] == ')' and lst[i+1] == '(' then\n            res[i] = 1\n        elseif lst[i] == ')' and lst[i+1] == ')' then\n            res[i] = 1\n        elseif lst[i] == ')' and lst[i+1] == '(' then\n            res[i] = 1\n        elseif lst[i] == '(' and lst[i+1] == ')' then\n            res[i] = 1\n        elseif lst[i] == '(' and lst[i+1] == '(' then\n            res[i] = 1\n        elseif lst[i] == '(' and lst[i+1] == ')' then\n            res[i] = 1\n        elseif lst[i] == ')' and lst[i+1] == '(' then\n            res[i] = 1\n        elseif lst[i] == ')' and lst[i+1] == ')' then\n            res[i] = 1\n        elseif lst[i] == ')' and lst[i+1] == '(' then\n            res[i] = 1\n        elseif lst[i] == '(' and lst[i+1] == ')' then\n            res[i] = 1\n        elseif lst[i] == '(' and lst[i+1] == '(' then\n            res[i] = 1\n        elseif lst[i] == '(' and lst[i+1] == ')' then\n            res",
    "    local result = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == '(' then\n            result[#result+1] = '('\n        elseif lst[i] == ')' and lst[i+1] == ')' then\n            result[#result+1] = ')'\n        end\n    end\n    return #result == 0 and 'Yes' or 'No'\nend",
    "    local i, j, parens = 1, 1, 0\n    for i = 1, #lst do\n        if lst[i] == '(' then\n            parens = parens + 1\n        elseif lst[i] == ')' then\n            parens = parens - 1\n        end\n        if parens < 0 then\n            return 'No'\n        end\n    end\n    return 'Yes'\nend",
    "    local i, j, parens = 1, 1, 0\n    for i = 1, #lst do\n        if lst[i] == '(' then\n            parens = parens + 1\n        elseif lst[i] == ')' then\n            parens = parens - 1\n        end\n        if parens < 0 then\n            return 'No'\n        end\n    end\n    return 'Yes'\nend",
    "    local result = true\n    for _, v in ipairs(lst) do\n        if v == '(' then\n            if not match_parens(lst[1:]) then\n                result = false\n            end\n        elseif v == ')' then\n            if match_parens(lst[1:]) then\n                result = false\n            end\n        end\n    end\n    return result\nend",
    "    local res = true\n    for i = 1, #lst, 2 do\n        if lst[i] ~= '(' and lst[i] ~= ')' then\n            res = false\n            break\n        end\n    end\n    return res\nend",
    "    local res = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == '(' then\n            res[#res+1] = '('\n            i = i + 1\n        elseif lst[i] == '(' and lst[i+1] == ')' then\n            res[#res+1] = ')'\n            i = i + 1\n        elseif lst[i] == ')' and lst[i+1] == ')' then\n            res[#res+1] = ')'\n            i = i + 1\n        else\n            res[#res+1] = lst[i]\n        end\n    end\n    return #res == 0 and 'Yes' or 'No'\nend",
    "    local i, j, parens = 1, 1, 0\n    for i = 1, #lst do\n        if lst[i] == '(' then\n            parens = parens + 1\n        elseif lst[i] == ')' then\n            parens = parens - 1\n        end\n        if parens < 0 then\n            return 'No'\n        end\n    end\n    return 'Yes'\nend",
    "    local res = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            res[#res+1] = lst[i+1]\n            i = i + 1\n        end\n    end\n    return res[1] == ')' and res[#res] == '(' and res[#res+1] == ')' and 'Yes' or 'No'\nend",
    "    local res = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            res[#res+1] = lst[i+1]\n            i = i + 1\n        elseif lst[i] == ')' and lst[i+1] == '(' then\n            res[#res+1] = lst[i+1]\n            i = i + 1\n        end\n    end\n    return #res == 0 and 'Yes' or 'No'\nend",
    "    local res = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == '(' then\n            res[i] = res[i+1] = '('\n        elseif lst[i] == ')' and lst[i+1] == ')' then\n            res[i] = res[i+1] = ')'\n        else\n            res[i] = res[i+1] = ''\n        end\n    end\n    for i = 1, #lst, 2 do\n        if res[i] == '' and res[i+1] == '' then\n            return 'Yes'\n        end\n    end\n    return 'No'\nend",
    "    local result = true\n    for _, s in ipairs(lst) do\n        if s == '(' then\n            if not match_parens(lst[1:]) then\n                result = false\n            end\n        elseif s == ')' then\n            if not match_parens(lst[1:]) then\n                result = false\n            end\n        end\n    end\n    return result\nend",
    "    local result = true\n    for _, v in ipairs(lst) do\n        if v == '(' then\n            if not match_parens(lst[1:]) then\n                result = false\n            end\n        elseif v == ')' then\n            if match_parens(lst[1:]) then\n                result = false\n            end\n        end\n    end\n    return result\nend",
    "    local result = true\n    for _, s in ipairs(lst) do\n        if s == '(' then\n            if not match_parens(lst[1:]) then\n                result = false\n            end\n        elseif s == ')' then\n            if match_parens(lst[1:]) then\n                result = false\n            end\n        end\n    end\n    return result\nend",
    "    local res = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            res[i] = res[i+1] = 'Yes'\n        elseif lst[i] == '(' and res[i+1] == 'Yes' then\n            res[i] = 'Yes'\n        elseif lst[i] == ')' and res[i-1] == 'Yes' then\n            res[i] = 'Yes'\n        else\n            res[i] = 'No'\n    end\n    return res[1]\nend",
    "    local result = true\n    for i = 1, #lst, 2 do\n        if lst[i] ~= lst[i+1] then\n            result = false\n            break\n        end\n    end\n    return result\nend",
    "    local i, j, k, res, parens, parens_count\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' then\n            parens = true\n            parens_count = 0\n        elseif lst[i] == ')' then\n            parens = false\n        end\n        if parens then\n            if parens_count == 0 then\n                res = 'No'\n                break\n            elseif parens_count == 1 then\n                res = 'Yes'\n                break\n            elseif parens_count > 1 then\n                res = 'No'\n                break\n            end\n            parens_count = parens_count - 1\n        end\n    end\n    return res\nend",
    "    local i, j, res, parens, parens_count, parens_stack\n    for i, p in ipairs(lst) do\n        if p == '(' then\n            parens_stack = parens_stack or {}\n            parens_stack[i] = parens_count = parens_count + 1\n        elseif p == ')' then\n            if parens_count == 0 then\n                res = 'No'\n                break\n            elseif parens_stack and parens_count == parens_stack[i] then\n                res = 'Yes'\n                break\n            else\n                parens_stack = parens_stack or {}\n                parens_stack[i] = parens_count = parens_count - 1\n        end\n    end\n    return res\nend",
    "    local i, j, res, parens = 1, 1, '', 0\n    for i = 1, #lst do\n        if lst[i] == '(' then\n            parens = parens + 1\n        elseif lst[i] == ')' then\n            parens = parens - 1\n        end\n        if parens < 0 then\n            return 'No'\n        end\n    end\n    for i = 1, #lst do\n        if lst[i] == '(' then\n            res = res + lst[i]\n        elseif lst[i] == ')' then\n            res = res + lst[i]\n        else\n            for j = i + 1, #lst do\n                if lst[j] == '(' then\n                    parens = parens + 1\n                elseif lst[j] == ')' then\n                    parens = parens - 1\n                end\n                if parens < 0 then\n                    return 'No'\n                end\n            end\n            res = res + lst[i]\n        end\n    end\n    return 'Yes'\nend",
    "    local result = true\n    for _, s in ipairs(lst) do\n        if s == '(' then\n            if not match_parens(lst[1:]) then\n                result = false\n            end\n        elseif s == ')' then\n            if not match_parens(lst[1:]) then\n                result = false\n            end\n        end\n    end\n    return result\nend",
    "    local res = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            res[#res+1] = lst[i+1]\n            i = i + 2\n        elseif lst[i] == ')' and lst[i+1] == '(' then\n            res[#res+1] = lst[i+1]\n            i = i + 2\n        elseif lst[i] == '(' then\n            res[#res+1] = lst[i]\n            i = i + 1\n        elseif lst[i] == ')' then\n            res[#res+1] = lst[i]\n            i = i + 1\n        end\n    end\n    return res[1] == ')' and res[#res] == '('\nend",
    "    local result = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            result[#result+1] = i\n        end\n    end\n    return #result == 0 and 'Yes' or 'No'\nend",
    "    local parens = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' then\n            if not parens[lst[i-1]] then\n                parens[lst[i-1]] = 1\n            else\n                return 'No'\n        else\n            if not parens[lst[i-1]] then\n                return 'No'\n            else\n                parens[lst[i-1]] = 0\n        end\n    end\n    return 'Yes'\nend",
    "    local parens = {}\n    for i = 1, #lst do\n        if lst[i] == '(' then\n            if not parens[#parens + 1] then\n                parens[#parens + 1] = i\n            else\n                return 'No'\n            end\n        else\n            if not parens[#parens] then\n                parens[#parens] = i\n            else\n                return 'No'\n            end\n        end\n    end\n    if not parens[1] then\n        return 'Yes'\n    end\n    return 'No'\nend",
    "    local result = true\n    for i = 1, #lst, 2 do\n        if lst[i] ~= lst[i+1] then\n            result = false\n            break\n        end\n    end\n    return result\nend",
    "    local result = true\n    for _, s in ipairs(lst) do\n        if s == '(' then\n            if not match_parens(lst[1:]) then\n                result = false\n            end\n        elseif s == ')' then\n            if not match_parens(lst[1:]) then\n                result = false\n            end\n        end\n    end\n    return result\nend",
    "    local result = true\n    for i = 1, #lst, 2 do\n        if lst[i] ~= '(' and lst[i] ~= ')' then\n            result = false\n            break\n        end\n    end\n    return result\nend",
    "    local result = true\n    for _, v in ipairs(lst) do\n        if v == '(' then\n            if result == true then\n                result = false\n            else\n                result = true\n            end\n        elseif v == ')' then\n            if result == true then\n                result = false\n            else\n                result = true\n            end\n        end\n    end\n    return result\nend",
    "    local result = true\n    for _, v in ipairs(lst) do\n        if v == '(' then\n            if result == true then\n                result = false\n            else\n                result = true\n            end\n        elseif v == ')' then\n            if result == true then\n                result = false\n            else\n                result = true\n            end\n        end\n    end\n    return result\nend",
    "    local parens = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' then\n            if not parens[lst[i - 1]] then\n                parens[lst[i - 1]] = 1\n            else\n                return 'No'\n        else\n            if not parens[lst[i - 1]] then\n                return 'No'\n            else\n                parens[lst[i - 1]] = 0\n        end\n    end\n    return 'Yes'\nend",
    "    local result = true\n    for _, s in ipairs(lst) do\n        if s == '(' then\n            if not match_parens(lst[1:]) then\n                result = false\n            end\n        elseif s == ')' then\n            if not match_parens(lst[1:]) then\n                result = false\n            end\n        end\n    end\n    return result\nend",
    "    local i, j, parens = 0, 0, 0\n    for i = 1, #lst do\n        if lst[i] == '(' then\n            parens = parens + 1\n        elseif lst[i] == ')' then\n            parens = parens - 1\n        end\n        if parens < 0 then\n            return 'No'\n        end\n    end\n    return 'Yes'\nend",
    "    local i, j, res\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == '(' then\n            res = match_parens(lst[i+2:])\n            if res == 'Yes' then\n                return 'Yes'\n            end\n            i = i + 2\n        elseif lst[i] == '(' and lst[i+1] == ')' then\n            return 'No'\n        end\n    end\n    return 'No'\nend",
    "    local i, j, parens = 1, 1, 0\n    for i = 1, #lst do\n        if lst[i] == '(' then\n            parens = parens + 1\n        elseif lst[i] == ')' then\n            parens = parens - 1\n        end\n        if parens < 0 then\n            return 'No'\n        end\n    end\n    return 'Yes'\nend",
    "    local result = true\n    for _, s in ipairs(lst) do\n        if s == '(' then\n            if not match_parens(lst[1:]) then\n                result = false\n            end\n        elseif s == ')' then\n            if match_parens(lst[1:]) then\n                result = false\n            end\n        end\n    end\n    return result\nend",
    "    local result = true\n    for i = 1, #lst, 2 do\n        if lst[i] ~= lst[i+1] then\n            result = false\n            break\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            result[#result+1] = lst[i+1]\n            i = i + 1\n        end\n    end\n    return #result == 0 and 'Yes' or 'No'\nend",
    "    local i, j, res\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            res = match_parens(lst[i+2:])\n            if res == 'Yes' then\n                return 'Yes'\n            elseif res == 'No' then\n                return 'No'\n            end\n        end\n    end\n    return 'No'\nend",
    "    local i, j, res, parens = 0, 0, {}, {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' then\n            if parens[lst[i]] == 0 then\n                parens[lst[i]] = 1\n                parens[lst[i - 1]] = 1\n            else\n                return 'No'\n            end\n        elseif lst[i] == ')' then\n            if parens[lst[i]] == 1 then\n                parens[lst[i]] = 0\n                parens[lst[i - 1]] = 0\n            else\n                return 'No'\n            end\n        end\n        if parens[lst[i]] == 1 then\n            res = res .. lst[i]\n        end\n    end\n    return res == '' and 'Yes' or 'No'\nend",
    "    local result = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            result[i] = i+1\n            result[i+1] = i\n        end\n    end\n    return result\nend",
    "    local parens = {'(' = 1, ')' = 1}\n    local res = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and parens[lst[i-1]] == 1 then\n            parens[lst[i]] = 2\n        elseif lst[i] == ')' and parens[lst[i-1]] == 2 then\n            parens[lst[i]] = 1\n        end\n        if parens[lst[i]] == 1 then\n            res[#res + 1] = lst[i]\n        end\n    end\n    if #res == 0 then\n        return 'Yes'\n    else\n        return 'No'\n    end\nend",
    "    local result = true\n    for i = 1, #lst, 2 do\n        if lst[i] ~= lst[i-1] then\n            result = false\n            break\n        end\n    end\n    return result\nend",
    "    local i, j, parens = 1, 1, 0\n    for i = 1, #lst do\n        if lst[i] == '(' then\n            parens = parens + 1\n        elseif lst[i] == ')' then\n            parens = parens - 1\n        end\n        if parens < 0 then\n            return 'No'\n        end\n    end\n    return 'Yes'\nend",
    "    local i, j, parens = 1, 1, 0\n    for i = 1, #lst do\n        if lst[i] == '(' then parens = parens + 1\n        elseif lst[i] == ')' then parens = parens - 1\n        if parens < 0 then return 'No'\n        end\n        end\n    return 'Yes'\nend",
    "    local result = true\n    for i = 1, #lst, 2 do\n        if lst[i] ~= '(' and lst[i] ~= ')' then\n            result = false\n            break\n        end\n    end\n    return result\nend",
    "    local res = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            res[#res+1] = lst[i+1]\n            i = i + 1\n        end\n    end\n    return res[1] == ')' and res[#res] == '(' and res[#res+1] == ')' and 'Yes' or 'No'\nend",
    "    local result = true\n    for i = 1, #lst, 2 do\n        if lst[i] ~= '(' and lst[i] ~= ')' then\n            result = false\n            break\n        end\n    end\n    return result\nend",
    "    local parens = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' then\n            if not parens[lst[i-1]] then\n                parens[lst[i-1]] = 1\n            else\n                return 'No'\n        else\n            if not parens[lst[i-1]] then\n                return 'No'\n            else\n                parens[lst[i-1]] = 0\n        end\n    end\n    return 'Yes'\nend",
    "    local i, j, parens = 1, 1, 0\n    for i = 1, #lst do\n        if lst[i] == '(' then\n            parens = parens + 1\n        elseif lst[i] == ')' then\n            parens = parens - 1\n        end\n        if parens < 0 then\n            return 'No'\n        end\n    end\n    return 'Yes'\nend",
    "    local result = true\n    for i = 1, #lst, 2 do\n        if lst[i] ~= lst[i-1] then\n            result = false\n            break\n        end\n    end\n    return result\nend",
    "    local res = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            res[i] = 1\n            res[i+1] = 1\n        elseif lst[i] == '(' and lst[i+1] == '(' then\n            res[i] = 1\n            res[i+1] = 0\n        elseif lst[i] == ')' and lst[i+1] == ')' then\n            res[i] = 0\n            res[i+1] = 1\n        else\n            res[i] = 0\n            res[i+1] = 0\n        end\n    end\n    for i = 1, #lst, 2 do\n        if res[i] == 0 and res[i+1] == 0 then\n            return 'No'\n        end\n    end\n    return 'Yes'\nend",
    "    local i, j, res\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            res = match_parens(lst[i+2:])\n            if res == 'Yes' then\n                return 'Yes'\n            end\n            i = i + 2\n        elseif lst[i] == '(' then\n            res = match_parens(lst[1:i])\n            if res == 'Yes' then\n                return 'Yes'\n            end\n        end\n    end\n    return 'No'\nend",
    "    local i, j, res, parens, parens_count\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' then\n            parens = true\n            parens_count = 0\n        elseif lst[i] == ')' then\n            parens = false\n            parens_count = 0\n        elseif parens == true then\n            if lst[i] == '(' then\n                parens_count = parens_count + 1\n            elseif lst[i] == ')' then\n                parens_count = parens_count - 1\n            end\n        end\n        if parens_count < 0 then\n            return 'No'\n        end\n    end\n    return 'Yes'\nend",
    "    local result = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            result[#result+1] = i\n        end\n    end\n    return result[1] == #result and 'Yes' or 'No'\nend",
    "    local result = true\n    for i = 1, #lst, 2 do\n        if lst[i] ~= lst[i+1] then\n            result = false\n            break\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            result[#result+1] = lst[i+1]\n            i = i + 1\n        end\n    end\n    return result[1] == ')' and result[2] == '(' and result[#result] == ')'\nend",
    "    local result = true\n    for _, s in ipairs(lst) do\n        if s == '(' then\n            if not match_parens(lst[1:]) then\n                result = false\n            end\n        elseif s == ')' then\n            if not match_parens(lst[1:]) then\n                result = false\n            end\n        end\n    end\n    return result\nend",
    "    local parens = {'(': 1, ')': -1}\n    local res = {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' and lst[i+1] == ')' then\n            res[i] = parens[lst[i]]\n            res[i+1] = parens[lst[i+1]]\n            parens[lst[i]] = parens[lst[i+1]] = 0\n        end\n    end\n    return res[1] == 0 and 'Yes' or 'No'\nend",
    "    local i, j, res, parens = 0, 0, 0, {}\n    for i = 1, #lst, 2 do\n        if lst[i] == '(' then\n            parens[i] = 1\n            parens[i+1] = 0\n        elseif lst[i] == ')' then\n            parens[i] = 0\n            parens[i+1] = 1\n        end\n        if parens[i] == 1 and parens[i+1] == 1 then\n            res = 1\n            break\n        end\n    end\n    return res\nend",
    "    local result = true\n    for i = 1, #lst, 2 do\n        if lst[i] ~= lst[i+1] then\n            result = false\n            break\n        end\n    end\n    return result\nend"
  ],
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ]
}