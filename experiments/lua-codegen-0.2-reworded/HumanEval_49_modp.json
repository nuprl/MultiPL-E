{
  "name": "HumanEval_49_modp",
  "language": "lua",
  "prompt": "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n-- 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n-- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())",
  "completions": [
    "    return math.pow(2, n) % p\nend",
    "    if p == 0 then return 1 end\n    return math.mod(math.pow(2, n), p)\nend",
    "    return math.mod(n, p)\nend",
    "    local t = 1\n    while n > 0 do\n        t = (t * 2) % p\n        n = n - 1\n    end\n    return t\nend",
    "    if p == 0 then return 1 end\n    return math.pow(2, math.floor(math.log(n) / math.log(2))) mod p\nend",
    "    local t = 1\n    while n > 0 do\n        t = (t * 2) % p\n        n = n - 1\n    end\n    return t\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.mod(math.pow(2, n), p)\nend",
    "    if n == 0 then return 1 end\n    return (n % p) + modp(n / p, p)\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.mod(math.pow(2, n), p)\nend",
    "    return math.pow(2, n) % p\nend",
    "    return math.pow(2, n) % p\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.mod(math.pow(2, n), p)\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.mod(math.pow(2, n), p)\nend",
    "    return math.pow(2, n) % p\nend",
    "    if p == 0 then return 1 end\n    return math.pow(2, n) % p\nend",
    "    return math.pow(2, n) % p\nend",
    "    return math.mod(n, p)\nend",
    "    return math.mod(n, p)\nend",
    "    return math.pow(2, n) % p\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.pow(2, math.floor(math.log(n) / math.log(2))) mod p\nend",
    "    return math.pow(2, n) % p\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.mod(n, p)\nend",
    "    if p == 0 then\n        return 1\n    end\n    return math.mod(math.pow(2, n), p)\nend",
    "    if p == 0 then\n        return 1\n    end\n    return math.pow(2, math.floor(math.log(n) / math.log(2))) * p\nend",
    "    if p == 0 then\n        return 1\n    end\n    return math.pow(2, math.floor(math.log(n) / math.log(2))) mod p\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.mod(n, p)\nend",
    "    local m = math.pow(2, n)\n    return math.floor(m % p)\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.mod(math.pow(2, n), p)\nend",
    "    return math.floor(n % p)\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.mod(math.pow(2, n), p)\nend",
    "    if p == 0 then return 1 end\n    return math.pow(2, math.floor(math.log(n) / math.log(2))) mod p\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.pow(2, math.floor(math.log(n) / math.log(2))) % p\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.pow(2, math.floor(math.log(n) / math.log(2))) * p\nend",
    "    return math.mod(n, p)\nend",
    "    if p == 0 then return 1 end\n    return math.pow(2, n) % p\nend",
    "    if n == 0 then return 1 end\n    return math.mod(n, p)\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.pow(2, math.floor(math.log(n) / math.log(2))) * math.mod(n, p)\nend",
    "    local m = 1\n    while n > 0 do\n        m = m * 2\n        if m > p then m = m - p\n        n = n - 1\n    end\n    return m\nend",
    "    if p == 0 then\n        return 1\n    end\n    return math.pow(2, math.floor(math.log(n) / math.log(2))) % p\nend",
    "    return math.pow(2, n) % p\nend",
    "    if n == 0 then return 1 end\n    return math.mod(math.pow(2, n), p)\nend",
    "    local t = 1\n    while n > 0 do\n        t = (t * 2) % p\n        n = n - 1\n    end\n    return t\nend",
    "    return math.floor(math.pow(2, n) % p)\nend",
    "    if n == 0 then return 1 end\n    return math.mod(math.pow(2, n), p)\nend",
    "    local m = 1\n    while n > 0 do\n        m = m * 2\n        n = n - 1\n    end\n    return m % p\nend",
    "    if n == 0 then return 1 end\n    return math.pow(2, math.floor(math.log(n) / math.log(2))) * p - n\nend",
    "    if p == 0 then return 1 end\n    return math.mod(n, p)\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.mod(math.pow(2, n), p)\nend",
    "    return math.mod(n, p)\nend",
    "    if p == 0 then\n        return 1\n    end\n    return math.pow(2, math.floor(math.log(n) / math.log(2))) % p\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.pow(2, math.floor(math.log(n) / math.log(2))) % p\nend",
    "    if n == 0 then return 1 end\n    return math.mod(n, p)\nend",
    "    if n == 0 then return 1 end\n    return math.mod(math.pow(2, n), p)\nend",
    "    return math.pow(2, n) % p\nend",
    "    if n == 0 then return 1 end\n    return math.mod(n, p)\nend",
    "    if n == 0 then return 1 end\n    return math.mod(n, p)\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.pow(2, math.floor(math.log(n) / math.log(2))) % p\nend",
    "    if n == 0 then return 1 end\n    return math.mod(n, p)\nend",
    "    local m = 1\n    while n > 0 do\n        m = m * 2\n        n = n - 1\n    end\n    return m % p\nend",
    "    return math.floor(math.pow(2, n) % p)\nend",
    "    return math.pow(2, n) % p\nend",
    "    if p == 0 then\n        return 1\n    end\n    return math.pow(2, math.floor(math.log(n) / math.log(2))) * p\nend",
    "    return math.mod(n, p)\nend",
    "    local m = math.pow(2, n)\n    return math.mod(m, p)\nend",
    "    if n == 0 then return 1 end\n    return math.mod(n, p)\nend",
    "    if p == 0 then\n        return 1\n    end\n    return math.pow(2, math.floor(math.log(n) / math.log(2))) * p\nend",
    "    return math.mod(n, p)\nend",
    "    return math.floor(n / p) * p\nend",
    "    if p == 0 then\n        return 1\n    end\n    return math.pow(2, math.floor(math.log(n) / math.log(2))) % p\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.mod(n, p)\nend",
    "    return math.floor(math.pow(2, n) % p)\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.mod(n, p)\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.mod(n, p)\nend",
    "    if p == 0 then\n        return 1\n    end\n    return math.pow(2, n) % p\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.pow(2, math.floor(math.log(n) / math.log(2))) % p\nend",
    "    if p == 0 then\n        return 1\n    end\n    return math.pow(2, n) % p\nend",
    "    if p == 0 then\n        return 1\n    end\n    return math.pow(2, n) % p\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.mod(math.pow(2, n), p)\nend",
    "    if p == 0 then\n        return 1\n    elseif n == 0 then\n        return 0\n    else\n        return math.mod(n, p)\n    end\nend",
    "    if n == 0 then return 1 end\n    return math.mod(n, p)\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.mod(math.pow(2, n), p)\nend",
    "    if p == 0 then\n        return 1\n    end\n    return math.pow(2, n) % p\nend",
    "    if p == 0 then\n        return 1\n    end\n    return math.mod(math.pow(2, n), p)\nend",
    "    if n == 0 then return 1 end\n    return math.pow(2, math.floor(math.log(n) / math.log(2))) * p\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.mod(n, p)\nend",
    "    local m = math.pow(2, n)\n    return math.mod(m, p)\nend",
    "    local t = 1\n    while n > 0 do\n        t = (t * 2) % p\n        n = n - 1\n    end\n    return t\nend",
    "    if p == 0 then\n        return 1\n    end\n    return math.pow(2, n) % p\nend",
    "    if p == 0 then\n        return 1\n    end\n    return math.pow(2, math.floor(math.log(n) / math.log(2))) mod p\nend",
    "    if n == 0 then return 1 end\n    return math.pow(2, math.floor(math.log(n) / math.log(2))) % p\nend",
    "    if n == 0 then return 1 end\n    return math.mod(n, p)\nend",
    "    if p == 0 then return 1 end\n    return math.mod(n, p)\nend",
    "    if n == 0 then return 1 end\n    return math.pow(2, math.floor(math.log(n) / math.log(2))) * p\nend",
    "    if p == 0 then\n        return 1\n    end\n    return math.pow(2, n) % p\nend",
    "    return math.floor(n / p) * p\nend",
    "    if n == 0 then return 1 end\n    return math.mod(math.pow(2, n), p)\nend",
    "    return math.pow(2, n) % p\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.mod(math.pow(2, n), p)\nend",
    "    local t = 1\n    while n > 0 do\n        t = (t * 2) % p\n        n = n - 1\n    end\n    return t\nend",
    "    local m = math.pow(2, n)\n    return math.floor(m % p)\nend",
    "    if p == 0 then\n        return 1\n    end\n    return math.mod(math.pow(2, n), p)\nend",
    "    if n == 0 then return 1 end\n    return math.mod(n, p)\nend",
    "    if p == 0 then\n        return 1\n    end\n    return math.pow(2, n) % p\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.mod(math.pow(2, n), p)\nend",
    "    if n == 0 then return 1 end\n    return math.pow(2, n) % p\nend",
    "    return math.pow(2, n) % p\nend",
    "    if n == 0 then return 1 end\n    return math.pow(2, n) % p\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.mod(math.pow(2, n), p)\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.mod(n, p)\nend",
    "    return math.mod(n, p)\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.mod(n, p)\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.mod(n, p)\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.mod(math.pow(2, n), p)\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.mod(n, p)\nend",
    "    if n == 0 then return 1 end\n    return math.pow(2, math.floor(math.log(n) / math.log(2))) mod p\nend",
    "    if n == 0 then return 1 end\n    return math.pow(2, math.floor(math.log(n) / math.log(2))) % p\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.mod(n, p)\nend",
    "    return math.mod(n, p)\nend",
    "    return math.pow(2, n) % p\nend",
    "    if n == 0 then return 1 end\n    return math.mod(n, p)\nend",
    "    if n == 0 then return 1 end\n    return math.mod(n, p)\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.mod(n, p)\nend",
    "    if p == 0 then return 1 end\n    return math.mod(n, p)\nend",
    "    if p == 0 then\n        return 1\n    end\n    return math.pow(2, math.floor(math.log(n) / math.log(2))) % p\nend",
    "    return math.pow(2, n) % p\nend",
    "    if p == 0 then\n        return 1\n    end\n    return math.pow(2, math.floor(math.log(n) / math.log(2))) % p\nend",
    "    return math.mod(n, p)\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.mod(math.pow(2, n), p)\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.mod(n, p)\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.mod(n, p)\nend",
    "    local t = 1\n    while n > 0 do\n        t = (t * 2) % p\n        n = n - 1\n    end\n    return t\nend",
    "    return math.pow(2, n) % p\nend",
    "    return math.mod(n, p)\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.mod(n, p)\nend",
    "    if n == 0 then return 1 end\n    return math.mod(n, p)\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.mod(n, p)\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.mod(math.pow(2, n), p)\nend",
    "    return math.pow(2, n) % p\nend",
    "    return math.floor(math.pow(2, n) % p)\nend",
    "    if p == 0 then\n        return 1\n    end\n    return math.pow(2, math.floor(math.log(n) / math.log(2))) % p\nend",
    "    return math.floor(n / p) * p\nend",
    "    if p == 0 then\n        return 1\n    end\n    return math.pow(2, math.floor(math.log(n) / math.log(2))) * p\nend",
    "    if n == 0 then return 1 end\n    return math.pow(2, n) % p\nend",
    "    if n == 0 then return 1 end\n    return math.pow(2, math.floor(math.log(n) / math.log(2))) mod p\nend",
    "    local m = 1\n    while n > 0 do\n        m = m * 2\n        n = n - 1\n    end\n    return m % p\nend",
    "    if n == 0 then return 1 end\n    return math.mod(n, p)\nend",
    "    return math.mod(n, p)\nend",
    "    return math.mod(n, p)\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.mod(math.pow(2, n), p)\nend",
    "    if p == 0 then\n        return 1\n    end\n    return math.mod(math.pow(2, n), p)\nend",
    "    if p == 0 then\n        return 1\n    end\n    return math.pow(2, math.floor(math.log(n) / math.log(2))) mod p\nend",
    "    return math.floor(n * math.pow(2, math.floor(math.log(p) / math.log(2))))\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.mod(n, p)\nend",
    "    local t = 1\n    while n > 0 do\n        t = (t * 2) % p\n        n = n - 1\n    end\n    return t\nend",
    "    return math.floor(math.pow(2, n) % p)\nend",
    "    return math.pow(2, n) % p\nend",
    "    return math.mod(n, p)\nend",
    "    return math.pow(2, n) % p\nend",
    "    return math.pow(2, n) % p\nend",
    "    local t = 1\n    while n > 0 do\n        t = (t * 2) % p\n        n = n - 1\n    end\n    return t\nend",
    "    if n == 0 then return 1 end\n    return math.mod(n, p)\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.mod(math.pow(2, n), p)\nend",
    "    if p == 0 then return 1 end\n    return math.pow(2, n) % p\nend",
    "    if p == 0 then\n        return 1\n    end\n    return math.pow(2, math.floor(math.log(n) / math.log(2))) % p\nend",
    "    local m = math.pow(2, n)\n    return math.floor(m % p)\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.pow(2, math.floor(math.log(n) / math.log(2))) * p\nend",
    "    if n == 0 then return 1 end\n    return math.mod(n, p)\nend",
    "    if p == 0 then\n        return 1\n    end\n    return math.pow(2, math.floor(math.log(n) / math.log(2))) mod p\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.mod(math.pow(2, n), p)\nend",
    "    local m = 1\n    while n > 0 do\n        m = (m * 2) % p\n        n = n - 1\n    end\n    return m\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.mod(math.pow(2, n), p)\nend",
    "    return math.floor(math.pow(2, n) % p)\nend",
    "    if n == 0 then return 1 end\n    return math.pow(2, math.floor(math.log(n) / math.log(2))) mod p\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.mod(n, p)\nend",
    "    return math.pow(2, n) % p\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.mod(n, p)\nend",
    "    if p == 0 then return 1 end\n    return math.pow(2, n) % p\nend",
    "    if p == 0 then\n        return 1\n    end\n    return math.pow(2, n) % p\nend",
    "    if p == 0 then return 1 end\n    return math.pow(2, math.floor(math.log(n) / math.log(2))) mod p\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.mod(math.pow(2, n), p)\nend",
    "    return math.pow(2, n) % p\nend",
    "    return math.floor(math.pow(2, n) % p)\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.mod(math.pow(2, n), p)\nend",
    "    if p == 0 then return 1 end\n    return math.pow(2, math.floor(math.log(n) / math.log(2))) mod p\nend",
    "    local m = 1\n    while n > 0 do\n        m = (m * 2) % p\n        n = n - 1\n    end\n    return m\nend",
    "    local t = 1\n    while n > 0 do\n        t = (t * 2) % p\n        n = n - 1\n    end\n    return t\nend",
    "    return math.pow(2, n) % p\nend",
    "    if p == 0 then\n        return 1\n    end\n    return math.mod(math.pow(2, n), p)\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.mod(n, p)\nend",
    "    return math.mod(n, p)\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.mod(n, p)\nend",
    "    if p == 0 then\n        return 1\n    end\n    return math.pow(2, n) % p\nend",
    "    if p == 0 then\n        return 1\n    end\n    return math.pow(2, math.floor(math.log(n) / math.log(2))) % p\nend",
    "    return math.floor(math.pow(2, n) % p)\nend",
    "    if p == 0 then\n        return 1\n    end\n    return math.pow(2, math.floor(math.log(n) / math.log(2))) % p\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.pow(2, math.floor(math.log(n) / math.log(2))) * math.mod(n, p)\nend",
    "    return math.mod(n, p)\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.mod(n, p)\nend",
    "    local t = 1\n    while n > 0 do\n        t = (t * 2) % p\n        n = n - 1\n    end\n    return t\nend",
    "    if n == 0 then\n        return 1\n    end\n    return math.mod(n, p)\nend"
  ],
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ]
}