{
  "language": "lua",
  "name": "HumanEval_4_mean_absolute_deviation",
  "results": [
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmptfbu3ipg.lua:12: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for i = 1, #numbers, 1 do\n        sum = sum + abs(numbers[i] - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1si4nfs6.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp1si4nfs6.lua:9: in local 'candidate'\n\t/tmp/tmp1si4nfs6.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = {}\n    for i = 1, #numbers, 1 do\n        deviations[i] = abs(numbers[i] - mean)\n    end\n    return mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4fud_ef9.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp4fud_ef9.lua:9: in local 'candidate'\n\t/tmp/tmp4fud_ef9.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for _, value in pairs(numbers) do\n        result = result + abs(value - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpruseqb9r.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpruseqb9r.lua:9: in local 'candidate'\n\t/tmp/tmpruseqb9r.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = map(function(x)\n        return math.abs(x - mean)\n    end)\n    return mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb7utj9et.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpb7utj9et.lua:9: in local 'candidate'\n\t/tmp/tmpb7utj9et.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = {}\n    for i, number in ipairs(numbers) do\n        deviations[i] = math.abs(number - mean)\n    end\n    return mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphvah20p3.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmphvah20p3.lua:9: in local 'candidate'\n\t/tmp/tmphvah20p3.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers) do\n        sum = sum + abs(number - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp43dc9k7t.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp43dc9k7t.lua:9: in local 'candidate'\n\t/tmp/tmp43dc9k7t.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for i = 1, #numbers, 1 do\n        sum = sum + abs(numbers[i] - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1si4nfs6.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp1si4nfs6.lua:9: in local 'candidate'\n\t/tmp/tmp1si4nfs6.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpx8mqmueb.lua:12: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for _, v in ipairs(numbers) do\n        result = result + abs(v - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprzzyz2e6.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmprzzyz2e6.lua:9: in local 'candidate'\n\t/tmp/tmprzzyz2e6.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i = 1, #numbers, 1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw9b6ojkj.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpw9b6ojkj.lua:9: in local 'candidate'\n\t/tmp/tmpw9b6ojkj.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i=1,#                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpsw__kq6u.lua:12: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i = 1, #numbers, 1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw9b6ojkj.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpw9b6ojkj.lua:9: in local 'candidate'\n\t/tmp/tmpw9b6ojkj.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for _, x in ipairs(numbers) do\n        sum = sum + abs(x - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxo8_e44h.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpxo8_e44h.lua:9: in local 'candidate'\n\t/tmp/tmpxo8_e44h.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpx8mqmueb.lua:12: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = map(function(x)\n        return math.abs(x - mean)\n    end)\n    return math.mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpahte3u2v.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpahte3u2v.lua:9: in local 'candidate'\n\t/tmp/tmpahte3u2v.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for _, x in ipairs(numbers) do\n        result = result + abs(x - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpffcpivkh.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpffcpivkh.lua:9: in local 'candidate'\n\t/tmp/tmpffcpivkh.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = map(function(x)\n        return math.abs(x - mean)\n    end)\n    return math.mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpahte3u2v.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpahte3u2v.lua:9: in local 'candidate'\n\t/tmp/tmpahte3u2v.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for _, number in ipairs(numbers) do\n        result = result + abs(number - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ptc180q.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp9ptc180q.lua:9: in local 'candidate'\n\t/tmp/tmp9ptc180q.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = map(function(x)\n        return math.abs(x - mean)\n    end)\n    return math.mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpahte3u2v.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpahte3u2v.lua:9: in local 'candidate'\n\t/tmp/tmpahte3u2v.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i = 1, #numbers, 1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw9b6ojkj.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpw9b6ojkj.lua:9: in local 'candidate'\n\t/tmp/tmpw9b6ojkj.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = map(function(x)\n        return math.abs(x - mean)\n    end)\n    return math.mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpahte3u2v.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpahte3u2v.lua:9: in local 'candidate'\n\t/tmp/tmpahte3u2v.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i = 1, #numbers, 1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw9b6ojkj.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpw9b6ojkj.lua:9: in local 'candidate'\n\t/tmp/tmpw9b6ojkj.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i=1,#numbers,1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_9hvn3d4.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp_9hvn3d4.lua:9: in local 'candidate'\n\t/tmp/tmp_9hvn3d4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for _, value in ipairs(numbers) do\n        result = result + abs(value - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphh8gdlgb.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmphh8gdlgb.lua:9: in local 'candidate'\n\t/tmp/tmphh8gdlgb.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for _, x in ipairs(numbers) do\n        result = result + abs(x - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpffcpivkh.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpffcpivkh.lua:9: in local 'candidate'\n\t/tmp/tmpffcpivkh.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for _, x in ipairs(numbers) do\n        sum = sum + abs(x - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxo8_e44h.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpxo8_e44h.lua:9: in local 'candidate'\n\t/tmp/tmpxo8_e44h.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i = 1, #numbers, 1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw9b6ojkj.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpw9b6ojkj.lua:9: in local 'candidate'\n\t/tmp/tmpw9b6ojkj.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for _,number in ipairs(numbers) do\n        sum = sum + abs(number - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1au8am8f.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp1au8am8f.lua:9: in local 'candidate'\n\t/tmp/tmp1au8am8f.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for _, x in ipairs(numbers) do\n        result = result + abs(x - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpffcpivkh.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpffcpivkh.lua:9: in local 'candidate'\n\t/tmp/tmpffcpivkh.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = {}\n    for i, number in ipairs(numbers) do\n        deviations[i] = math.abs(number - mean)\n    end\n    return mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphvah20p3.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmphvah20p3.lua:9: in local 'candidate'\n\t/tmp/tmphvah20p3.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = map(function(x)\n        return math.abs(x - mean)\n    end)\n    return mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb7utj9et.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpb7utj9et.lua:9: in local 'candidate'\n\t/tmp/tmpb7utj9et.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = map(function(x)\n        return math.abs(x - mean)\n    end)\n    return mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb7utj9et.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpb7utj9et.lua:9: in local 'candidate'\n\t/tmp/tmpb7utj9et.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for i=1,#numbers,1 do\n        sum = sum + abs(numbers[i] - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1k8r_z98.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp1k8r_z98.lua:9: in local 'candidate'\n\t/tmp/tmp1k8r_z98.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = map(function(x)\n        return math.abs(x - mean)\n    end)\n    return math.mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpahte3u2v.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpahte3u2v.lua:9: in local 'candidate'\n\t/tmp/tmpahte3u2v.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = map(function(x)\n        return math.abs(x - mean)\n    end)\n    return math.mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpahte3u2v.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpahte3u2v.lua:9: in local 'candidate'\n\t/tmp/tmpahte3u2v.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i = 1, #numbers, 1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw9b6ojkj.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpw9b6ojkj.lua:9: in local 'candidate'\n\t/tmp/tmpw9b6ojkj.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = {}\n    for i=1,#numbers,1 do\n        deviations[i] = math.abs(numbers[i] - mean)\n    end\n    return mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpubcaqzh_.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpubcaqzh_.lua:9: in local 'candidate'\n\t/tmp/tmpubcaqzh_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = map(function(x)\n        return math.abs(x - mean)\n    end)\n    return math.mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpahte3u2v.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpahte3u2v.lua:9: in local 'candidate'\n\t/tmp/tmpahte3u2v.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for i, n in ipairs(numbers) do\n        sum = sum + abs(n - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp02hoq5sc.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp02hoq5sc.lua:9: in local 'candidate'\n\t/tmp/tmp02hoq5sc.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for i = 1, #numbers, 1 do\n        sum = sum + abs(numbers[i] - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1si4nfs6.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp1si4nfs6.lua:9: in local 'candidate'\n\t/tmp/tmp1si4nfs6.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i = 1, #numbers, 1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw9b6ojkj.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpw9b6ojkj.lua:9: in local 'candidate'\n\t/tmp/tmpw9b6ojkj.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = map(function(x)\n        return math.abs(x - mean)\n    end)\n    return math.mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpahte3u2v.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpahte3u2v.lua:9: in local 'candidate'\n\t/tmp/tmpahte3u2v.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i=1,#numbers,1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_9hvn3d4.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp_9hvn3d4.lua:9: in local 'candidate'\n\t/tmp/tmp_9hvn3d4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for i = 1, #numbers, 1 do\n        sum = sum + abs(numbers[i] - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1si4nfs6.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp1si4nfs6.lua:9: in local 'candidate'\n\t/tmp/tmp1si4nfs6.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for _, value in ipairs(numbers) do\n        sum = sum + abs(value - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq9_481u2.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpq9_481u2.lua:9: in local 'candidate'\n\t/tmp/tmpq9_481u2.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i=1,#numbers,1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_9hvn3d4.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp_9hvn3d4.lua:9: in local 'candidate'\n\t/tmp/tmp_9hvn3d4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for i=1,#numbers,1 do\n        sum = sum + abs(numbers[i] - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1k8r_z98.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp1k8r_z98.lua:9: in local 'candidate'\n\t/tmp/tmp1k8r_z98.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i = 1, #numbers, 1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw9b6ojkj.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpw9b6ojkj.lua:9: in local 'candidate'\n\t/tmp/tmpw9b6ojkj.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for _, number in ipairs(numbers) do\n        result = result + abs(number - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ptc180q.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp9ptc180q.lua:9: in local 'candidate'\n\t/tmp/tmp9ptc180q.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = {}\n    for i=1,#numbers,1 do\n        deviations[i] = math.abs(numbers[i] - mean)\n    end\n    return math.mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd0mfc3ru.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpd0mfc3ru.lua:9: in local 'candidate'\n\t/tmp/tmpd0mfc3ru.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i = 1, #numbers, 1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw9b6ojkj.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpw9b6ojkj.lua:9: in local 'candidate'\n\t/tmp/tmpw9b6ojkj.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for i = 1, #numbers, 1 do\n        sum = sum + abs(numbers[i] - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1si4nfs6.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp1si4nfs6.lua:9: in local 'candidate'\n\t/tmp/tmp1si4nfs6.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i = 1, #numbers, 1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw9b6ojkj.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpw9b6ojkj.lua:9: in local 'candidate'\n\t/tmp/tmpw9b6ojkj.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i = 1, #numbers, 1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw9b6ojkj.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpw9b6ojkj.lua:9: in local 'candidate'\n\t/tmp/tmpw9b6ojkj.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i = 1, #numbers, 1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw9b6ojkj.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpw9b6ojkj.lua:9: in local 'candidate'\n\t/tmp/tmpw9b6ojkj.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for _, number in ipairs(numbers) do\n        result = result + abs(number - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ptc180q.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp9ptc180q.lua:9: in local 'candidate'\n\t/tmp/tmp9ptc180q.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for _, value in ipairs(numbers) do\n        sum = sum + abs(value - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq9_481u2.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpq9_481u2.lua:9: in local 'candidate'\n\t/tmp/tmpq9_481u2.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = {}\n    for _, number in ipairs(numbers) do\n        deviations[number] = math.abs(number - mean)\n    end\n    return mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0rsrlo9b.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp0rsrlo9b.lua:9: in local 'candidate'\n\t/tmp/tmp0rsrlo9b.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i=1,#numbers,1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_9hvn3d4.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp_9hvn3d4.lua:9: in local 'candidate'\n\t/tmp/tmp_9hvn3d4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = map(function(x)\n        return math.abs(x - mean)\n    end)\n    return mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb7utj9et.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpb7utj9et.lua:9: in local 'candidate'\n\t/tmp/tmpb7utj9et.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = map(function(x)\n        return math.abs(x - mean)\n    end)\n    return math.mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpahte3u2v.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpahte3u2v.lua:9: in local 'candidate'\n\t/tmp/tmpahte3u2v.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = map(function(x)\n        return math.abs(x - mean)\n    end)\n    return math.mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpahte3u2v.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpahte3u2v.lua:9: in local 'candidate'\n\t/tmp/tmpahte3u2v.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i=1,#numbers,1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_9hvn3d4.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp_9hvn3d4.lua:9: in local 'candidate'\n\t/tmp/tmp_9hvn3d4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for i = 1, #numbers, 1 do\n        sum = sum + abs(numbers[i] - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1si4nfs6.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp1si4nfs6.lua:9: in local 'candidate'\n\t/tmp/tmp1si4nfs6.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = {}\n    for i = 1, #numbers, 1 do\n        deviations[i] = math.abs(numbers[i] - mean)\n    end\n    return mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc1dv875p.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpc1dv875p.lua:9: in local 'candidate'\n\t/tmp/tmpc1dv875p.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i=1,#numbers,1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_9hvn3d4.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp_9hvn3d4.lua:9: in local 'candidate'\n\t/tmp/tmp_9hvn3d4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for i=1,#numbers,1 do\n        sum = sum + abs(numbers[i] - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1k8r_z98.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp1k8r_z98.lua:9: in local 'candidate'\n\t/tmp/tmp1k8r_z98.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for i=1,#numbers,1 do\n        sum = sum + abs(numbers[i] - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1k8r_z98.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp1k8r_z98.lua:9: in local 'candidate'\n\t/tmp/tmp1k8r_z98.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for i=1,#numbers,1 do\n        sum = sum + abs(numbers[i] - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1k8r_z98.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp1k8r_z98.lua:9: in local 'candidate'\n\t/tmp/tmp1k8r_z98.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for _, value in ipairs(numbers) do\n        result = result + abs(value - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphh8gdlgb.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmphh8gdlgb.lua:9: in local 'candidate'\n\t/tmp/tmphh8gdlgb.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for i = 1, #numbers, 1 do\n        sum = sum + abs(numbers[i] - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1si4nfs6.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp1si4nfs6.lua:9: in local 'candidate'\n\t/tmp/tmp1si4nfs6.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for i = 1, #numbers, 1 do\n        sum = sum + abs(numbers[i] - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1si4nfs6.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp1si4nfs6.lua:9: in local 'candidate'\n\t/tmp/tmp1si4nfs6.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for _, number in ipairs(numbers) do\n        result = result + abs(number - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ptc180q.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp9ptc180q.lua:9: in local 'candidate'\n\t/tmp/tmp9ptc180q.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for i = 1, #numbers, 1 do\n        sum = sum + abs(numbers[i] - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1si4nfs6.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp1si4nfs6.lua:9: in local 'candidate'\n\t/tmp/tmp1si4nfs6.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i = 1, #numbers, 1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw9b6ojkj.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpw9b6ojkj.lua:9: in local 'candidate'\n\t/tmp/tmpw9b6ojkj.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = map(function(x)\n        return math.abs(x - mean)\n    end)\n    return math.mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpahte3u2v.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpahte3u2v.lua:9: in local 'candidate'\n\t/tmp/tmpahte3u2v.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i=1,#numbers,1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_9hvn3d4.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp_9hvn3d4.lua:9: in local 'candidate'\n\t/tmp/tmp_9hvn3d4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for i=1,#numbers,1 do\n        sum = sum + abs(numbers[i] - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1k8r_z98.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp1k8r_z98.lua:9: in local 'candidate'\n\t/tmp/tmp1k8r_z98.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = map(function(x)\n        return math.abs(x - mean)\n    end)\n    return math.mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpahte3u2v.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpahte3u2v.lua:9: in local 'candidate'\n\t/tmp/tmpahte3u2v.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for i = 1, #numbers, 1 do\n        sum = sum + abs(numbers[i] - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1si4nfs6.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp1si4nfs6.lua:9: in local 'candidate'\n\t/tmp/tmp1si4nfs6.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i=1,#numbers,1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_9hvn3d4.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp_9hvn3d4.lua:9: in local 'candidate'\n\t/tmp/tmp_9hvn3d4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = {}\n    for _,number in ipairs(numbers) do\n        deviations[number] = math.abs(number - mean)\n    end\n    return mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjc2k3kkg.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpjc2k3kkg.lua:9: in local 'candidate'\n\t/tmp/tmpjc2k3kkg.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for i=1,#numbers,1 do\n        sum = sum + abs(numbers[i] - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1k8r_z98.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp1k8r_z98.lua:9: in local 'candidate'\n\t/tmp/tmp1k8r_z98.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers) do\n        sum = sum + abs(number - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp43dc9k7t.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp43dc9k7t.lua:9: in local 'candidate'\n\t/tmp/tmp43dc9k7t.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i=1,#numbers,1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_9hvn3d4.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp_9hvn3d4.lua:9: in local 'candidate'\n\t/tmp/tmp_9hvn3d4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i = 1, #numbers, 1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw9b6ojkj.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpw9b6ojkj.lua:9: in local 'candidate'\n\t/tmp/tmpw9b6ojkj.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = {}\n    for i=1,#numbers,1 do\n        deviations[i] = math.abs(numbers[i] - mean)\n    end\n    return mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpubcaqzh_.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpubcaqzh_.lua:9: in local 'candidate'\n\t/tmp/tmpubcaqzh_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = map(function(x)\n        return math.abs(x - mean)\n    end)\n    return mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb7utj9et.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpb7utj9et.lua:9: in local 'candidate'\n\t/tmp/tmpb7utj9et.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i = 1, #numbers, 1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw9b6ojkj.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpw9b6ojkj.lua:9: in local 'candidate'\n\t/tmp/tmpw9b6ojkj.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = map(function(x)\n        return math.abs(x - mean)\n    end)\n    return math.mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpahte3u2v.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpahte3u2v.lua:9: in local 'candidate'\n\t/tmp/tmpahte3u2v.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i = 1, #numbers, 1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw9b6ojkj.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpw9b6ojkj.lua:9: in local 'candidate'\n\t/tmp/tmpw9b6ojkj.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = map(function(x)\n        return math.abs(x - mean)\n    end)\n    return mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb7utj9et.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpb7utj9et.lua:9: in local 'candidate'\n\t/tmp/tmpb7utj9et.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i = 1, #numbers, 1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw9b6ojkj.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpw9b6ojkj.lua:9: in local 'candidate'\n\t/tmp/tmpw9b6ojkj.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for i=1,#numbers,1 do\n        sum = sum + abs(numbers[i] - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1k8r_z98.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp1k8r_z98.lua:9: in local 'candidate'\n\t/tmp/tmp1k8r_z98.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers) do\n        sum = sum + abs(number - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp43dc9k7t.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp43dc9k7t.lua:9: in local 'candidate'\n\t/tmp/tmp43dc9k7t.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i = 1, #numbers, 1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw9b6ojkj.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpw9b6ojkj.lua:9: in local 'candidate'\n\t/tmp/tmpw9b6ojkj.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i = 1, #numbers, 1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw9b6ojkj.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpw9b6ojkj.lua:9: in local 'candidate'\n\t/tmp/tmpw9b6ojkj.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for i=1,#numbers,1 do\n        sum = sum + abs(numbers[i] - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1k8r_z98.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp1k8r_z98.lua:9: in local 'candidate'\n\t/tmp/tmp1k8r_z98.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = map(function(x)\n        return math.abs(x - mean)\n    end)\n    return math.mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpahte3u2v.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpahte3u2v.lua:9: in local 'candidate'\n\t/tmp/tmpahte3u2v.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for i=1,#numbers,1 do\n        sum = sum + abs(numbers[i] - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1k8r_z98.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp1k8r_z98.lua:9: in local 'candidate'\n\t/tmp/tmp1k8r_z98.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for i=1,#numbers,1 do\n        sum = sum + abs(numbers[i] - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1k8r_z98.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp1k8r_z98.lua:9: in local 'candidate'\n\t/tmp/tmp1k8r_z98.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i = 1, #numbers, 1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw9b6ojkj.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpw9b6ojkj.lua:9: in local 'candidate'\n\t/tmp/tmpw9b6ojkj.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = {}\n    for i, number in ipairs(numbers) do\n        deviations[i] = math.abs(number - mean)\n    end\n    return mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphvah20p3.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmphvah20p3.lua:9: in local 'candidate'\n\t/tmp/tmphvah20p3.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = map(function(x)\n        return math.abs(x - mean)\n    end)\n    return math.mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpahte3u2v.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpahte3u2v.lua:9: in local 'candidate'\n\t/tmp/tmpahte3u2v.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = {}\n    for _, number in ipairs(numbers) do\n        local deviation = math.abs(number - mean)\n        table.insert(deviations, deviation)\n    end\n    return mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvp_l7r26.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpvp_l7r26.lua:9: in local 'candidate'\n\t/tmp/tmpvp_l7r26.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for i=1,#numbers,1 do\n        sum = sum + abs(numbers[i] - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1k8r_z98.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp1k8r_z98.lua:9: in local 'candidate'\n\t/tmp/tmp1k8r_z98.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for i=1,#numbers,1 do\n        sum = sum + abs(numbers[i] - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1k8r_z98.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp1k8r_z98.lua:9: in local 'candidate'\n\t/tmp/tmp1k8r_z98.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for i = 1, #numbers, 1 do\n        sum = sum + abs(numbers[i] - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1si4nfs6.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp1si4nfs6.lua:9: in local 'candidate'\n\t/tmp/tmp1si4nfs6.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for i = 1, #numbers, 1 do\n        sum = sum + abs(numbers[i] - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1si4nfs6.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp1si4nfs6.lua:9: in local 'candidate'\n\t/tmp/tmp1si4nfs6.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i = 1, #numbers, 1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw9b6ojkj.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpw9b6ojkj.lua:9: in local 'candidate'\n\t/tmp/tmpw9b6ojkj.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i = 1, #numbers, 1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw9b6ojkj.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpw9b6ojkj.lua:9: in local 'candidate'\n\t/tmp/tmpw9b6ojkj.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i=1,#numbers,1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_9hvn3d4.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp_9hvn3d4.lua:9: in local 'candidate'\n\t/tmp/tmp_9hvn3d4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i=1,#numbers,1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_9hvn3d4.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp_9hvn3d4.lua:9: in local 'candidate'\n\t/tmp/tmp_9hvn3d4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i=1,#numbers,1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_9hvn3d4.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp_9hvn3d4.lua:9: in local 'candidate'\n\t/tmp/tmp_9hvn3d4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i = 1, #numbers, 1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw9b6ojkj.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpw9b6ojkj.lua:9: in local 'candidate'\n\t/tmp/tmpw9b6ojkj.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i = 1, #numbers, 1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw9b6ojkj.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpw9b6ojkj.lua:9: in local 'candidate'\n\t/tmp/tmpw9b6ojkj.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = map(function(x)\n        return math.abs(x - mean)\n    end)\n    return math.mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpahte3u2v.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpahte3u2v.lua:9: in local 'candidate'\n\t/tmp/tmpahte3u2v.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for _, x in ipairs(numbers) do\n        result = result + abs(x - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpffcpivkh.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpffcpivkh.lua:9: in local 'candidate'\n\t/tmp/tmpffcpivkh.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for _, number in ipairs(numbers) do\n        result = result + abs(number - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ptc180q.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp9ptc180q.lua:9: in local 'candidate'\n\t/tmp/tmp9ptc180q.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = {}\n    for _, number in ipairs(numbers) do\n        deviations[number] = math.abs(number - mean)\n    end\n    return mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0rsrlo9b.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp0rsrlo9b.lua:9: in local 'candidate'\n\t/tmp/tmp0rsrlo9b.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for i=1,#numbers,1 do\n        sum = sum + abs(numbers[i] - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1k8r_z98.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp1k8r_z98.lua:9: in local 'candidate'\n\t/tmp/tmp1k8r_z98.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for i=1,#numbers,1 do\n        sum = sum + abs(numbers[i] - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1k8r_z98.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp1k8r_z98.lua:9: in local 'candidate'\n\t/tmp/tmp1k8r_z98.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = map(function(x)\n        return math.abs(x - mean)\n    end)\n    return math.mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpahte3u2v.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpahte3u2v.lua:9: in local 'candidate'\n\t/tmp/tmpahte3u2v.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i=1,#numbers,1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_9hvn3d4.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp_9hvn3d4.lua:9: in local 'candidate'\n\t/tmp/tmp_9hvn3d4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i=1,#numbers,1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_9hvn3d4.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp_9hvn3d4.lua:9: in local 'candidate'\n\t/tmp/tmp_9hvn3d4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = {}\n    for i, number in ipairs(numbers) do\n        deviations[i] = math.abs(number - mean)\n    end\n    return mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphvah20p3.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmphvah20p3.lua:9: in local 'candidate'\n\t/tmp/tmphvah20p3.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = {}\n    for i = 1, #numbers, 1 do\n        deviations[i] = math.abs(numbers[i] - mean)\n    end\n    return mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc1dv875p.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpc1dv875p.lua:9: in local 'candidate'\n\t/tmp/tmpc1dv875p.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for _, number in ipairs(numbers) do\n        result = result + abs(number - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ptc180q.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp9ptc180q.lua:9: in local 'candidate'\n\t/tmp/tmp9ptc180q.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for i=1,#numbers,1 do\n        sum = sum + abs(numbers[i] - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1k8r_z98.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp1k8r_z98.lua:9: in local 'candidate'\n\t/tmp/tmp1k8r_z98.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i=1,#numbers,1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_9hvn3d4.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp_9hvn3d4.lua:9: in local 'candidate'\n\t/tmp/tmp_9hvn3d4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i = 1, #numbers, 1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw9b6ojkj.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpw9b6ojkj.lua:9: in local 'candidate'\n\t/tmp/tmpw9b6ojkj.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = map(function(x)\n        return math.abs(x - mean)\n    end)\n    return math.mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpahte3u2v.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpahte3u2v.lua:9: in local 'candidate'\n\t/tmp/tmpahte3u2v.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = map(function(x)\n        return math.abs(x - mean)\n    end)\n    return mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb7utj9et.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpb7utj9et.lua:9: in local 'candidate'\n\t/tmp/tmpb7utj9et.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i = 1, #numbers, 1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw9b6ojkj.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpw9b6ojkj.lua:9: in local 'candidate'\n\t/tmp/tmpw9b6ojkj.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i=1,#numbers,1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_9hvn3d4.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp_9hvn3d4.lua:9: in local 'candidate'\n\t/tmp/tmp_9hvn3d4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for i = 1, #numbers, 1 do\n        sum = sum + abs(numbers[i] - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1si4nfs6.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp1si4nfs6.lua:9: in local 'candidate'\n\t/tmp/tmp1si4nfs6.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = {}\n    for i, number in ipairs(numbers) do\n        deviations[i] = math.abs(number - mean)\n    end\n    return mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphvah20p3.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmphvah20p3.lua:9: in local 'candidate'\n\t/tmp/tmphvah20p3.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = map(function(x)\n        return math.abs(x - mean)\n    end)\n    return math.mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpahte3u2v.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpahte3u2v.lua:9: in local 'candidate'\n\t/tmp/tmpahte3u2v.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = map(function(x)\n        return math.abs(x - mean)\n    end)\n    return math.mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpahte3u2v.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpahte3u2v.lua:9: in local 'candidate'\n\t/tmp/tmpahte3u2v.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i=1,#numbers,1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_9hvn3d4.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp_9hvn3d4.lua:9: in local 'candidate'\n\t/tmp/tmp_9hvn3d4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = map(function(x)\n        return math.abs(x - mean)\n    end)\n    return math.mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpahte3u2v.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpahte3u2v.lua:9: in local 'candidate'\n\t/tmp/tmpahte3u2v.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = {}\n    for _, number in ipairs(numbers) do\n        local deviation = math.abs(number - mean)\n        table.insert(deviations, deviation)\n    end\n    return math.mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfjnku0c5.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpfjnku0c5.lua:9: in local 'candidate'\n\t/tmp/tmpfjnku0c5.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i = 1, #numbers, 1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw9b6ojkj.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpw9b6ojkj.lua:9: in local 'candidate'\n\t/tmp/tmpw9b6ojkj.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i = 1, #numbers, 1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw9b6ojkj.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpw9b6ojkj.lua:9: in local 'candidate'\n\t/tmp/tmpw9b6ojkj.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = map(function(x)\n        return math.abs(x - mean)\n    end)\n    return math.mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpahte3u2v.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpahte3u2v.lua:9: in local 'candidate'\n\t/tmp/tmpahte3u2v.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for _, x in ipairs(numbers) do\n        sum = sum + abs(x - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxo8_e44h.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpxo8_e44h.lua:9: in local 'candidate'\n\t/tmp/tmpxo8_e44h.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = {}\n    for _,number in ipairs(numbers) do\n        deviations[number] = math.abs(number - mean)\n    end\n    return mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjc2k3kkg.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpjc2k3kkg.lua:9: in local 'candidate'\n\t/tmp/tmpjc2k3kkg.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i=1,#numbers,1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_9hvn3d4.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp_9hvn3d4.lua:9: in local 'candidate'\n\t/tmp/tmp_9hvn3d4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = map(function(x)\n        return math.abs(x - mean)\n    end)\n    return mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb7utj9et.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpb7utj9et.lua:9: in local 'candidate'\n\t/tmp/tmpb7utj9et.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i = 1, #numbers, 1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw9b6ojkj.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpw9b6ojkj.lua:9: in local 'candidate'\n\t/tmp/tmpw9b6ojkj.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for i = 1, #numbers, 1 do\n        sum = sum + abs(numbers[i] - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1si4nfs6.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp1si4nfs6.lua:9: in local 'candidate'\n\t/tmp/tmp1si4nfs6.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for _,number in ipairs(numbers) do\n        sum = sum + abs(number - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1au8am8f.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp1au8am8f.lua:9: in local 'candidate'\n\t/tmp/tmp1au8am8f.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i=1,#numbers,1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_9hvn3d4.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp_9hvn3d4.lua:9: in local 'candidate'\n\t/tmp/tmp_9hvn3d4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i = 1, #numbers, 1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw9b6ojkj.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpw9b6ojkj.lua:9: in local 'candidate'\n\t/tmp/tmpw9b6ojkj.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for _, number in ipairs(numbers) do\n        result = result + abs(number - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ptc180q.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp9ptc180q.lua:9: in local 'candidate'\n\t/tmp/tmp9ptc180q.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for i=1,#numbers,1 do\n        sum = sum + abs(numbers[i] - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1k8r_z98.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp1k8r_z98.lua:9: in local 'candidate'\n\t/tmp/tmp1k8r_z98.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i=1,#numbers,1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_9hvn3d4.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp_9hvn3d4.lua:9: in local 'candidate'\n\t/tmp/tmp_9hvn3d4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i = 1, #numbers, 1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw9b6ojkj.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpw9b6ojkj.lua:9: in local 'candidate'\n\t/tmp/tmpw9b6ojkj.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i=1,#numbers,1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_9hvn3d4.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp_9hvn3d4.lua:9: in local 'candidate'\n\t/tmp/tmp_9hvn3d4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i, n in ipairs(numbers) do\n        result = result + abs(n - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdoal5gms.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpdoal5gms.lua:9: in local 'candidate'\n\t/tmp/tmpdoal5gms.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for i=1,#numbers,1 do\n        sum = sum + abs(numbers[i] - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1k8r_z98.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp1k8r_z98.lua:9: in local 'candidate'\n\t/tmp/tmp1k8r_z98.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i, n in ipairs(numbers) do\n        result = result + abs(n - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdoal5gms.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpdoal5gms.lua:9: in local 'candidate'\n\t/tmp/tmpdoal5gms.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i = 1, #numbers, 1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw9b6ojkj.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpw9b6ojkj.lua:9: in local 'candidate'\n\t/tmp/tmpw9b6ojkj.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = map(function(x)\n        return math.abs(x - mean)\n    end)\n    return math.mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpahte3u2v.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpahte3u2v.lua:9: in local 'candidate'\n\t/tmp/tmpahte3u2v.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = {}\n    for i=1,#numbers,1 do\n        deviations[i] = math.abs(numbers[i] - mean)\n    end\n    return mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpubcaqzh_.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpubcaqzh_.lua:9: in local 'candidate'\n\t/tmp/tmpubcaqzh_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = map(function(x)\n        return math.abs(x - mean)\n    end)\n    return math.mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpahte3u2v.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpahte3u2v.lua:9: in local 'candidate'\n\t/tmp/tmpahte3u2v.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for i=1,#numbers,1 do\n        sum = sum + abs(numbers[i] - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1k8r_z98.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp1k8r_z98.lua:9: in local 'candidate'\n\t/tmp/tmp1k8r_z98.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for _,x in ipairs(numbers) do\n        sum = sum + abs(x - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqepzrbco.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpqepzrbco.lua:9: in local 'candidate'\n\t/tmp/tmpqepzrbco.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for _, number in ipairs(numbers) do\n        result = result + abs(number - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ptc180q.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp9ptc180q.lua:9: in local 'candidate'\n\t/tmp/tmp9ptc180q.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for i = 1, #numbers, 1 do\n        sum = sum + abs(numbers[i] - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1si4nfs6.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp1si4nfs6.lua:9: in local 'candidate'\n\t/tmp/tmp1si4nfs6.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i=1,#numbers,1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_9hvn3d4.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp_9hvn3d4.lua:9: in local 'candidate'\n\t/tmp/tmp_9hvn3d4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i=1,#numbers,1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_9hvn3d4.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp_9hvn3d4.lua:9: in local 'candidate'\n\t/tmp/tmp_9hvn3d4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = map(function(x)\n        return math.abs(x - mean)\n    end)\n    return mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb7utj9et.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpb7utj9et.lua:9: in local 'candidate'\n\t/tmp/tmpb7utj9et.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for i = 1, #numbers, 1 do\n        sum = sum + abs(numbers[i] - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1si4nfs6.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp1si4nfs6.lua:9: in local 'candidate'\n\t/tmp/tmp1si4nfs6.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = {}\n    for i=1,#numbers,1 do\n        deviations[i] = abs(numbers[i] - mean)\n    end\n    return mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkblbeapy.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpkblbeapy.lua:9: in local 'candidate'\n\t/tmp/tmpkblbeapy.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i=1,#numbers,1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_9hvn3d4.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp_9hvn3d4.lua:9: in local 'candidate'\n\t/tmp/tmp_9hvn3d4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i = 1, #numbers, 1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw9b6ojkj.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpw9b6ojkj.lua:9: in local 'candidate'\n\t/tmp/tmpw9b6ojkj.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for i = 1, #numbers, 1 do\n        sum = sum + abs(numbers[i] - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1si4nfs6.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp1si4nfs6.lua:9: in local 'candidate'\n\t/tmp/tmp1si4nfs6.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = map(function(x)\n        return math.abs(x - mean)\n    end)\n    return math.mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpahte3u2v.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpahte3u2v.lua:9: in local 'candidate'\n\t/tmp/tmpahte3u2v.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for i=1,#numbers,1 do\n        sum = sum + abs(numbers[i] - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1k8r_z98.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp1k8r_z98.lua:9: in local 'candidate'\n\t/tmp/tmp1k8r_z98.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = {}\n    for i=1,#numbers,1 do\n        deviations[i] = math.abs(numbers[i] - mean)\n    end\n    return math.mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd0mfc3ru.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpd0mfc3ru.lua:9: in local 'candidate'\n\t/tmp/tmpd0mfc3ru.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = map(function(x)\n        return math.abs(x - mean)\n    end)\n    return math.mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpahte3u2v.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpahte3u2v.lua:9: in local 'candidate'\n\t/tmp/tmpahte3u2v.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i = 1, #numbers, 1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw9b6ojkj.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpw9b6ojkj.lua:9: in local 'candidate'\n\t/tmp/tmpw9b6ojkj.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = map(function(x)\n        return math.abs(x - mean)\n    end)\n    return mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb7utj9et.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpb7utj9et.lua:9: in local 'candidate'\n\t/tmp/tmpb7utj9et.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = map(function(x)\n        return math.abs(x - mean)\n    end)\n    return math.mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpahte3u2v.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpahte3u2v.lua:9: in local 'candidate'\n\t/tmp/tmpahte3u2v.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i=1,#numbers,1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_9hvn3d4.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp_9hvn3d4.lua:9: in local 'candidate'\n\t/tmp/tmp_9hvn3d4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for _, value in ipairs(numbers) do\n        result = result + abs(value - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphh8gdlgb.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmphh8gdlgb.lua:9: in local 'candidate'\n\t/tmp/tmphh8gdlgb.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = map(function(x)\n        return math.abs(x - mean)\n    end)\n    return mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb7utj9et.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpb7utj9et.lua:9: in local 'candidate'\n\t/tmp/tmpb7utj9et.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for _, x in ipairs(numbers) do\n        result = result + abs(x - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpffcpivkh.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpffcpivkh.lua:9: in local 'candidate'\n\t/tmp/tmpffcpivkh.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i=1,#numbers,1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_9hvn3d4.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp_9hvn3d4.lua:9: in local 'candidate'\n\t/tmp/tmp_9hvn3d4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for i=1,#numbers,1 do\n        sum = sum + abs(numbers[i] - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1k8r_z98.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp1k8r_z98.lua:9: in local 'candidate'\n\t/tmp/tmp1k8r_z98.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for i = 1, #numbers, 1 do\n        sum = sum + abs(numbers[i] - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1si4nfs6.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp1si4nfs6.lua:9: in local 'candidate'\n\t/tmp/tmp1si4nfs6.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for i = 1, #numbers, 1 do\n        sum = sum + abs(numbers[i] - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1si4nfs6.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp1si4nfs6.lua:9: in local 'candidate'\n\t/tmp/tmp1si4nfs6.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local result = 0\n    for i=1,#numbers,1 do\n        result = result + abs(numbers[i] - mean)\n    end\n    return result / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_9hvn3d4.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp_9hvn3d4.lua:9: in local 'candidate'\n\t/tmp/tmp_9hvn3d4.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = map(function(x)\n        return math.abs(x - mean)\n    end)\n    return mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb7utj9et.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpb7utj9et.lua:9: in local 'candidate'\n\t/tmp/tmpb7utj9et.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for _, x in ipairs(numbers) do\n        sum = sum + abs(x - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxo8_e44h.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpxo8_e44h.lua:9: in local 'candidate'\n\t/tmp/tmpxo8_e44h.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for i=1,#numbers,1 do\n        sum = sum + abs(numbers[i] - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1k8r_z98.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp1k8r_z98.lua:9: in local 'candidate'\n\t/tmp/tmp1k8r_z98.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local sum = 0\n    for _,number in ipairs(numbers) do\n        sum = sum + abs(number - mean)\n    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1au8am8f.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp1au8am8f.lua:9: in local 'candidate'\n\t/tmp/tmp1au8am8f.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- For a given table of input numbers, calculate Mean Absolute Deviation\n-- around the mean of this dataset.\n-- Mean Absolute Deviation is the average absolute difference between each\n-- element and a centerpoint (mean in this case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n    local mean = mean(numbers)\n    local deviations = map(function(x)\n        return math.abs(x - mean)\n    end)\n    return mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb7utj9et.lua:9: attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpb7utj9et.lua:9: in local 'candidate'\n\t/tmp/tmpb7utj9et.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907500
    }
  ]
}