name: HumanEval_58_common
language: lua
prompt: "-- Return sorted unique common elements for two tables.\n-- >>> common([1,\
  \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n-- [1, 5, 653]\n-- >>> common([5,\
  \ 3, 2, 8], [3, 2])\n-- [2, 3]\nlocal function common(l1, l2)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
  \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}),\
  \ {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n \
  \   lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4,\
  \ 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1 do\n     \
    \   t1[l1[i]] = true\n    end\n    for i = 1, #l2 do\n        t2[l2[i]] = true\n\
    \    end\n    for k, v in pairs(t1) do\n        if not t2[k] then return table.concat(t1,\
    \ k) end\n    end\n    return nil\nend", "    local t1 = {}\n    local t2 = {}\n\
    \    for i = 1, #l1, 2 do\n        if l1[i] == l2[1] then\n            table.insert(t1,\
    \ l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return\
    \ table.sort(t1)\nend", "    local t1 = {}\n    local t2 = {}\n    for i = 1,\
    \ #l1, 2 do\n        if l1[i] == l2[1] then\n            table.insert(t1, l1[i])\n\
    \            table.insert(t2, l2[i])\n        end\n    end\n    return table.sort(t1)\n\
    end", "    local t1 = {}\n    local t2 = {}\n    for i=1,#                   \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                           ", "    local t1 = {}\n    local t2\
    \ = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil and l2[i] ~= nil then\n\
    \            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n  \
    \      end\n    end\n    return table.sort(t1)\nend", "    local t1 = {}\n   \
    \ local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n    \
    \        table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2\
    \ do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n    \
    \    end\n    end\n    return table.concat(t1, t2)\nend", "    local t1 = {}\n\
    \    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] == l2[1] then\n\
    \            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n  \
    \      end\n    end\n    return table.sort(t1)\nend", "    local t1 = {}\n   \
    \ local t2 = {}\n    for i=1,#                                               \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \               ", "    local t1 = {}\n    local t2 = {}\n    for i=1,#      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                        ", "    local t1 = {}\n\
    \    for i = 1, #l1 do\n        t1[l1[i]] = true\n    end\n    local t2 = {}\n\
    \    for i = 1, #l2 do\n        t2[l2[i]] = true\n    end\n    local t3 = {}\n\
    \    for k, v in pairs(t1) do\n        if t2[k] then\n            table.insert(t3,\
    \ k)\n        end\n    end\n    return t3\nend", "    local t1 = {}\n    for i=1,#",
  "    local t1 = {}\n    for i=1,#", "    local t = {}\n    for i = 1, #l1, 2 do\n\
    \        for j = 1, #l2, 2 do\n            if l1[i] == l2[j] then\n          \
    \      table.insert(t, l1[i])\n                break\n        end\n    end\n \
    \   return t\nend", "    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1,\
    \ 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n  \
    \      end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n\
    \            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1,\
    \ t2)\nend", "    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 1 do\n\
    \        t1[l1[i]] = true\n    end\n    for i = 1, #l2, 1 do\n        t2[l2[i]]\
    \ = true\n    end\n    for k, v in pairs(t1) do\n        if not t2[k] then\n \
    \           return table.concat(t1, k)\n        end\n    end\n    return nil\n\
    end", "    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n      \
    \  if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n  \
    \  end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2,\
    \ l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend", "    local\
    \ t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil\
    \ and l2[i] ~= nil then\n            table.insert(t1, l1[i])\n            table.insert(t2,\
    \ l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend", "    local\
    \ t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] == l2[1]\
    \ then\n            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n\
    \        end\n    end\n    return table.sort(t1)\nend", "    local t = {}\n  \
    \  for i = 1, #l1, 1 do\n        for j = 1, #l2, 1 do\n            if l1[i] ==\
    \ l2[j] then\n                table.insert(t, l1[i])\n                break\n\
    \            end\n        end\n    end\n    return table.sort(t)\nend", "    local\
    \ t1 = {}\n    local t2 = {}\n    for i = 1, #l1 do\n        t1[l1[i]] = true\n\
    \    end\n    for i = 1, #l2 do\n        t2[l2[i]] = true\n    end\n    local\
    \ t = {}\n    for k, v in pairs(t1) do\n        if t2[k] then t[k] = true end\n\
    \    end\n    return t\nend", "    local t1 = {}\n    local t2 = {}\n    for i\
    \ = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n\
    \        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n\
    \            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1,\
    \ t2)\nend", "    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n     \
    \   t1[l1[i]] = true\n    end\n    for i=1,#l2 do\n        t2[l2[i]] = true\n\
    \    end\n    for k,v in pairs(t1) do\n        if not t2[k] then\n           \
    \ return k\n        end\n    end\n    return nil\nend", "    local t1 = {}\n \
    \   local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n  \
    \          table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2,\
    \ 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n  \
    \      end\n    end\n    return table.concat(t1, t2)\nend", "    local t1 = {}\n\
    \    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n \
    \           table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2,\
    \ 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n  \
    \      end\n    end\n    return table.concat(t1, t2)\nend", "    local t1 = {}\n\
    \    for i=1,#l1 do\n        if l1[i] ~= nil then\n            table.insert(t1,\
    \ l1[i])\n        end\n    end\n    local t2 = {}\n    for i=1,#l2 do\n      \
    \  if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n  \
    \  end\n    return table.concat(t1, t2)\nend", "    local t1 = {}\n    local t2\
    \ = {}\n    for i=1,#l1 do\n        if l1[i] ~= nil then\n            table.insert(t1,\
    \ l1[i])\n        end\n    end\n    for i=1,#l2 do\n        if l2[i] ~= nil then\n\
    \            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1,\
    \ t2)\nend", "    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n     \
    \   t1[l1[i]] = true\n    end\n    for i=1,#l2 do\n        t2[l2[i]] = true\n\
    \    end\n    for k in t1 do\n        if not t2[k] then\n            return table.concat(t1,\
    \ k)\n        end\n    end\n    return nil\nend", "    local t1 = {}\n    local\
    \ t2 = {}\n    for i=1,#l1 do\n        if l1[i] ~= nil then\n            table.insert(t1,\
    \ l1[i])\n        end\n    end\n    for i=1,#l2 do\n        if l2[i] ~= nil then\n\
    \            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1,\
    \ t2)\nend", "    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n\
    \        if l1[i] ~= nil and l2[i] ~= nil then\n            table.insert(t1, l1[i])\n\
    \            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1,\
    \ t2)\nend", "    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n\
    \        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n\
    \    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n           \
    \ table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\n\
    end", "    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n      \
    \  if l1[i] ~= nil and l2[i] ~= nil then\n            table.insert(t1, l1[i])\n\
    \            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1,\
    \ t2)\nend", "    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n\
    \        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n\
    \    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n           \
    \ table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\n\
    end", "    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n      \
    \  if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n  \
    \  end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2,\
    \ l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend", "    local\
    \ t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n \
    \   end\n    for i=1,#l2 do\n        t2[l2[i]] = true\n    end\n    for k in t1\
    \ do\n        if not t2[k] then\n            return table.concat(t1, k)\n    \
    \    end\n    end\n    return nil\nend", "    local t1 = {}\n    local t2 = {}\n\
    \    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1,\
    \ l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~=\
    \ nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return\
    \ table.concat(t1, t2)\nend", "    local t1 = {}\n    local t2 = {}\n    for i\
    \ = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n\
    \        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n\
    \            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1,\
    \ t2)\nend", "    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n     \
    \   t1[l1[i]] = true\n    end\n    for i=1,#l2 do\n        t2[l2[i]] = true\n\
    \    end\n    for k in t1 do\n        if not t2[k] then\n            return table.concat(t1,\
    \ k)\n        end\n    end\n    return nil\nend", "    local t1 = {}\n    local\
    \ t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n          \
    \  table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n \
    \       if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n\
    \    end\n    return table.concat(t1, t2)\nend", "    local t1 = {}\n    local\
    \ t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n          \
    \  table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n \
    \       if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n\
    \    end\n    return table.concat(t1, t2)\nend", "    local t1 = {}\n    local\
    \ t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n          \
    \  table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n \
    \       if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n\
    \    end\n    return table.concat(t1, t2)\nend", "    local t1 = {}\n    local\
    \ t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n          \
    \  table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n \
    \       if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n\
    \    end\n    return table.concat(t1, t2)\nend", "    local t1 = {}\n    local\
    \ t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil and l2[i] ~= nil\
    \ then\n            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n\
    \        end\n    end\n    return table.concat(t1, t2)\nend", "    local t1 =\
    \ {}\n    local t2 = {}\n    for i=1,#l1 do\n        if l1[i] ~= nil then\n  \
    \          table.insert(t1, l1[i])\n        end\n    end\n    for i=1,#l2 do\n\
    \        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n\
    \    end\n    return table.concat(t1, t2)\nend", "    local t1 = {}\n    local\
    \ t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] == l2[1] then\n        \
    \    table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n        end\n\
    \    end\n    return table.sort(t1)\nend", "    local t1 = {}\n    local t2 =\
    \ {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1,\
    \ l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~=\
    \ nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return\
    \ table.concat(t1, t2)\nend", "    local t1 = {}\n    local t2 = {}\n    for i\
    \ = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n\
    \        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n\
    \            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1,\
    \ t2)\nend", "    local t1 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n\
    \    end\n    local t2 = {}\n    for i=1,#l2 do\n        t2[l2[i]] = true\n  \
    \  end\n    local t3 = {}\n    for k,v in pairs(t1) do\n        if t2[k] then\n\
    \            t3[k] = true\n        end\n    end\n    return t3\nend", "    local\
    \ t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil\
    \ then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i =\
    \ 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n\
    \        end\n    end\n    return table.concat(t1, t2)\nend", "    local t1 =\
    \ {}\n    local t2 = {}\n    for i=1,#l1,2 do\n        if l1[i] ~= nil then\n\
    \            t1[l1[i]] = true\n        end\n        if l2[i] ~= nil then\n   \
    \         t2[l2[i]] = true\n        end\n    end\n    for k,v in pairs(t1) do\n\
    \        if not t2[k] then\n            return k\n        end\n    end\n    return\
    \ nil\nend", "    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n\
    \        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n\
    \    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n           \
    \ table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\n\
    end", "    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n      \
    \  if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n  \
    \  end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2,\
    \ l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend", "    local\
    \ t1 = {}\n    for i = 1, #l1 do\n        t1[l1[i]] = true\n    end\n    local\
    \ t2 = {}\n    for i = 1, #l2 do\n        t2[l2[i]] = true\n    end\n    local\
    \ t3 = {}\n    for k, v in pairs(t1) do\n        if t2[k] then\n            table.insert(t3,\
    \ k)\n        end\n    end\n    return t3\nend", "    local t1 = {}\n    local\
    \ t2 = {}\n    for i=1,#l1 do\n        if l1[i] ~= nil then\n            table.insert(t1,\
    \ l1[i])\n        end\n    end\n    for i=1,#l2 do\n        if l2[i] ~= nil then\n\
    \            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1,\
    \ t2)\nend", "    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n\
    \        if l1[i] ~= nil and l2[i] ~= nil then\n            table.insert(t1, l1[i])\n\
    \            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1,\
    \ t2)\nend", "    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n\
    \        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n\
    \        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n\
    \    end\n    return table.concat(t1, t2)\nend", "    local t1 = {}\n    local\
    \ t2 = {}\n    for i=1,#l1,2 do\n        if l1[i] == l2[1] then\n            table.insert(t1,\
    \ l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return\
    \ table.sort(t1)\nend", "    local t1 = {}\n    for i=1,#l1 do\n        if l1[i]\
    \ ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n   \
    \ local t2 = {}\n    for i=1,#l2 do\n        if l2[i] ~= nil then\n          \
    \  table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1,\
    \ t2)\nend", "    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n\
    \        if l1[i] ~= nil and l2[i] ~= nil then\n            table.insert(t1, l1[i])\n\
    \            table.insert(t2, l2[i])\n        end\n    end\n    return table.sort(t1)\n\
    end", "    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]]\
    \ = true\n    end\n    for i=1,#l2 do\n        t2[l2[i]] = true\n    end\n   \
    \ for k in t1 do\n        if not t2[k] then\n            return table.concat(t1,\
    \ k)\n        end\n    end\n    return nil\nend", "    local t1 = {}\n    local\
    \ t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n          \
    \  table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n \
    \       if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n\
    \    end\n    return table.concat(t1, t2)\nend", "    local t1 = {}\n    local\
    \ t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2\
    \ do\n        t2[l2[i]] = true\n    end\n    for k in t1 do\n        if not t2[k]\
    \ then\n            return table.concat(t1, k)\n        end\n    end\n    return\
    \ nil\nend", "    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n     \
    \   t1[l1[i]] = true\n    end\n    for i=1,#l2 do\n        t2[l2[i]] = true\n\
    \    end\n    for k in t1 do\n        if not t2[k] then\n            return table.concat(t1,\
    \ k)\n        end\n    end\n    return nil\nend", "    local t1 = {}\n    local\
    \ t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2\
    \ do\n        t2[l2[i]] = true\n    end\n    for k in t1 do\n        if not t2[k]\
    \ then\n            return table.concat(t1, k)\n        end\n    end\n    return\
    \ nil\nend", "    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n     \
    \   t1[l1[i]] = true\n    end\n    for i=1,#l2 do\n        t2[l2[i]] = true\n\
    \    end\n    for k in t1 do\n        if not t2[k] then\n            return table.concat(t1,\
    \ k)\n        end\n    end\n    return nil\nend", "    local t1 = {}\n    local\
    \ t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2\
    \ do\n        t2[l2[i]] = true\n    end\n    for k,v in pairs(t1) do\n       \
    \ if not t2[k] then\n            return k\n        end\n    end\n    return nil\n\
    end", "    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]]\
    \ = true\n    end\n    for i=1,#l2 do\n        t2[l2[i]] = true\n    end\n   \
    \ for k,v in pairs(t1) do\n        if not t2[k] then\n            return table.concat({k},\
    \ l1, l2)\n        end\n    end\n    return nil\nend", "    local t1 = {}\n  \
    \  local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n   \
    \         table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2\
    \ do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n    \
    \    end\n    end\n    return table.concat(t1, t2)\nend", "    local t1 = {}\n\
    \    local t2 = {}\n    for i=1,#l1,2 do\n        if l1[i] == l2[1] then\n   \
    \         table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n     \
    \   end\n    end\n    return table.sort(t1)\nend", "    local t1 = {}\n    local\
    \ t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n          \
    \  table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n \
    \       if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n\
    \    end\n    return table.concat(t1, t2)\nend", "    local t1 = {}\n    local\
    \ t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] == l2[1] then\n        \
    \    table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n        end\n\
    \    end\n    return table.sort(t1)\nend", "    local t1 = {}\n    local t2 =\
    \ {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1,\
    \ l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~=\
    \ nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return\
    \ table.concat(t1, t2)\nend", "    local t1 = {}\n    local t2 = {}\n    for i\
    \ = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n\
    \        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n\
    \            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1,\
    \ t2)\nend", "    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n\
    \        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n\
    \    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n           \
    \ table.insert(t2, l2[i])\n        end\n    end\n    return table.sort(table.concat(t1,\
    \ t2))\nend", "    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 1 do\n\
    \        t1[l1[i]] = true\n    end\n    for i = 1, #l2, 1 do\n        t2[l2[i]]\
    \ = true\n    end\n    for k, v in pairs(t1) do\n        if not t2[k] then return\
    \ table.concat(t1, l2) end\n    end\n    return nil\nend", "    local t1 = {}\n\
    \    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] == l2[1] then\n\
    \            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n  \
    \      end\n    end\n    return table.sort(t1)\nend", "    local t1 = {}\n   \
    \ for i = 1, #l1 do\n        t1[l1[i]] = true\n    end\n    local t2 = {}\n  \
    \  for i = 1, #l2 do\n        t2[l2[i]] = true\n    end\n    local t3 = {}\n \
    \   for k, v in pairs(t1) do\n        if t2[k] then\n            t3[k] = true\n\
    \        end\n    end\n    return t3\nend", "    local t1 = {}\n    local t2 =\
    \ {}\n    for i=1,#l1,1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2,1\
    \ do\n        t2[l2[i]] = true\n    end\n    for k,v in pairs(t1) do\n       \
    \ if not t2[k] then\n            return table.concat(t1, k)\n        end\n   \
    \ end\n    return nil\nend", "    local t1 = {}\n    for i = 1, #l1 do\n     \
    \   t1[l1[i]] = true\n    end\n    local t2 = {}\n    for i = 1, #l2 do\n    \
    \    t2[l2[i]] = true\n    end\n    local t3 = {}\n    for k, v in pairs(t1) do\n\
    \        if t2[k] then\n            table.insert(t3, k)\n        end\n    end\n\
    \    return t3\nend", "    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1,\
    \ 2 do\n        if l1[i] == l2[1] then\n            table.insert(t1, l1[i])\n\
    \            table.insert(t2, l2[i])\n        end\n    end\n    return table.sort(t1)\n\
    end", "    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n      \
    \  if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n  \
    \  end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2,\
    \ l2[i])\n        end\n    end\n    return table.sort(table.concat(t1, t2))\n\
    end", "    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]]\
    \ = true\n    end\n    for i=1,#l2 do\n        t2[l2[i]] = true\n    end\n   \
    \ for k,v in pairs(t1) do\n        if not t2[k] then\n            return table.concat(t1,\
    \ k)\n        end\n    end\n    return nil\nend", "    local t1 = {}\n    local\
    \ t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] == l2[1] then\n        \
    \    table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n        end\n\
    \    end\n    return table.sort(t1)\nend", "    local t1 = {}\n    local t2 =\
    \ {}\n    for i=1,#l1,1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2,1\
    \ do\n        t2[l2[i]] = true\n    end\n    for k,v in pairs(t1) do\n       \
    \ if not t2[k] then\n            table.insert(l1, k)\n        end\n    end\n \
    \   for k,v in pairs(t2) do\n        if not t1[k] then\n            table.insert(l2,\
    \ k)\n        end\n    end\n    return l1\nend", "    local t1 = {}\n    local\
    \ t2 = {}\n    for i = 1, #l1, 1 do\n        t1[l1[i]] = true\n    end\n    for\
    \ i = 1, #l2, 1 do\n        t2[l2[i]] = true\n    end\n    for k in t1, t2 do\n\
    \        if not t2[k] then\n            return table.unpack(k)\n        end\n\
    \    end\nend", "    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n\
    \        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n\
    \    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n           \
    \ table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\n\
    end", "    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n      \
    \  if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n  \
    \  end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2,\
    \ l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend", "    local\
    \ t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil\
    \ then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i =\
    \ 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n\
    \        end\n    end\n    return table.concat(t1, t2)\nend", "    local t1 =\
    \ {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n\
    \            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2,\
    \ 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n  \
    \      end\n    end\n    return table.concat(t1, t2)\nend", "    local t1 = {}\n\
    \    local t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n  \
    \  for i=1,#l2 do\n        t2[l2[i]] = true\n    end\n    for k,v in pairs(t1)\
    \ do\n        if not t2[k] then\n            table.insert(l1, k)\n        end\n\
    \    end\n    return l1\nend", "    local t1 = {}\n    local t2 = {}\n    for\
    \ i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1,\
    \ l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~=\
    \ nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return\
    \ table.concat(t1, t2)\nend", "    local t1 = {}\n    local t2 = {}\n    for i=1,#l1\
    \ do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2 do\n        t2[l2[i]]\
    \ = true\n    end\n    for k in t1 do\n        if not t2[k] then\n           \
    \ return table.concat(t1, k)\n        end\n    end\nend", "    local t1 = {}\n\
    \    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n \
    \           table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2,\
    \ 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n  \
    \      end\n    end\n    return table.concat(t1, t2)\nend", "    local t1 = {}\n\
    \    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] == l2[1] then\n\
    \            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n  \
    \      end\n    end\n    return table.sort(t1)\nend", "    local t1 = {}\n   \
    \ local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n    \
    \        table.insert(t1, l1[i])\n        end\n        if l2[i] ~= nil then\n\
    \            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1,\
    \ t2)\nend", "    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n\
    \        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n\
    \    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n           \
    \ table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\n\
    end", "    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        if l1[i]\
    \ ~= nil then\n            table.insert(t1, l1[i])\n        end\n    end\n   \
    \ for i=1,#l2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n\
    \        end\n    end\n    return table.concat(t1, t2)\nend", "    local t1 =\
    \ {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n\
    \            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2,\
    \ 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n  \
    \      end\n    end\n    return table.concat(t1, t2)\nend", "    local t1 = {}\n\
    \    local t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n  \
    \  for i=1,#l2 do\n        t2[l2[i]] = true\n    end\n    for k in t1 do\n   \
    \     if not t2[k] then\n            return table.concat(t1, k)\n        end\n\
    \    end\n    return nil\nend", "    local t1 = {}\n    local t2 = {}\n    for\
    \ i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1,\
    \ l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~=\
    \ nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return\
    \ table.concat(t1, t2)\nend", "    local t1 = {}\n    local t2 = {}\n    for i\
    \ = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n\
    \        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n\
    \            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1,\
    \ t2)\nend", "    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 1 do\n\
    \        t1[l1[i]] = true\n    end\n    for i = 1, #l2, 1 do\n        t2[l2[i]]\
    \ = true\n    end\n    local t = {}\n    for k, v in pairs(t1) do\n        if\
    \ t2[k] then\n            table.insert(t, k)\n        end\n    end\n    return\
    \ table.sort(t)\nend", "    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1,\
    \ 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n  \
    \      end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n\
    \            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1,\
    \ t2)\nend", "    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n\
    \        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n\
    \    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n           \
    \ table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\n\
    end", "    local t1 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n\
    \    local t2 = {}\n    for i=1,#l2 do\n        t2[l2[i]] = true\n    end\n  \
    \  local t3 = {}\n    for k,v in pairs(t1) do\n        if t2[k] then\n       \
    \     t3[k] = true\n        end\n    end\n    return t3\nend", "    local t1 =\
    \ {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] == l2[1] then\n\
    \            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n  \
    \      end\n    end\n    return table.sort(t1)\nend", "    local t1 = {}\n   \
    \ for i = 1, #l1, 2 do\n        if l1[i] == l2[1] then\n            table.insert(t1,\
    \ l1[i])\n            table.insert(t1, l2[i])\n        end\n    end\n    return\
    \ table.unpack(t1)\nend", "    local t1 = {}\n    local t2 = {}\n    for i = 1,\
    \ #l1, 2 do\n        if l1[i] ~= nil and l2[i] ~= nil then\n            table.insert(t1,\
    \ l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return\
    \ table.concat(t1, t2)\nend", "    local t1 = {}\n    local t2 = {}\n    for i=1,#l1,2\
    \ do\n        if l1[i] ~= nil then\n            t1[l1[i]] = true\n        end\n\
    \        if l2[i] ~= nil then\n            t2[l2[i]] = true\n        end\n   \
    \ end\n    for k,v in pairs(t1) do\n        if not t2[k] then\n            return\
    \ k\n        end\n    end\n    return nil\nend", "    local t1 = {}\n    local\
    \ t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n          \
    \  table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n \
    \       if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n\
    \    end\n    return table.concat(t1, t2)\nend", "    local t1 = {}\n    local\
    \ t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2\
    \ do\n        t2[l2[i]] = true\n    end\n    for k,v in pairs(t1) do\n       \
    \ if not t2[k] then\n            return table.concat(t1, l2)\n        end\n  \
    \  end\n    return nil\nend", "    local t1 = {}\n    local t2 = {}\n    for i=1,#l1,2\
    \ do\n        if l1[i] ~= nil and l2[i] ~= nil then\n            table.insert(t1,\
    \ l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return\
    \ table.concat(t1, t2)\nend", "    local t1 = {}\n    local t2 = {}\n    for i\
    \ = 1, #l1, 2 do\n        if l1[i] == l2[1] then\n            table.insert(t1,\
    \ l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return\
    \ table.sort(t1)\nend", "    local t1 = {}\n    local t2 = {}\n    for i = 1,\
    \ #l1, 2 do\n        if l1[i] ~= nil and l2[i] ~= nil then\n            table.insert(t1,\
    \ l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return\
    \ table.concat(t1, t2)\nend", "    local t1 = {}\n    local t2 = {}\n    for i\
    \ = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n\
    \        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n\
    \            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1,\
    \ t2)\nend", "    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n\
    \        if l1[i] == l2[1] then\n            table.insert(t1, l1[i])\n       \
    \     table.insert(t2, l2[i])\n        end\n    end\n    return table.sort(t1)\n\
    end", "    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n      \
    \  if l1[i] == l2[1] then\n            table.insert(t1, l1[i])\n            table.insert(t2,\
    \ l2[i])\n        end\n    end\n    return table.sort(t1)\nend", "    local t1\
    \ = {}\n    for i = 1, #l1 do\n        t1[l1[i]] = true\n    end\n    local t2\
    \ = {}\n    for i = 1, #l2 do\n        t2[l2[i]] = true\n    end\n    return table.concat(t1,\
    \ t2)\nend", "    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n     \
    \   if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n \
    \   end\n    for i=1,#l2 do\n        if l2[i] ~= nil then\n            table.insert(t2,\
    \ l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend", "    local\
    \ t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 1 do\n        t1[l1[i]] = true\n\
    \    end\n    for i = 1, #l2, 1 do\n        t2[l2[i]] = true\n    end\n    local\
    \ t = {}\n    for k, v in pairs(t1) do\n        if t2[k] then\n            t[k]\
    \ = true\n        end\n    end\n    return t\nend", "    local t1 = {}\n    local\
    \ t2 = {}\n    for i=1,#l1,2 do\n        if l1[i] == l2[1] then\n            table.insert(t1,\
    \ l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return\
    \ table.concat(t1, t2)\nend", "    local t1 = {}\n    local t2 = {}\n    for i\
    \ = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n\
    \        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n\
    \            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1,\
    \ t2)\nend", "    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n     \
    \   t1[l1[i]] = true\n    end\n    for i=1,#l2 do\n        t2[l2[i]] = true\n\
    \    end\n    for k in t1 do\n        if not t2[k] then\n            return table.concat(t1,\
    \ k)\n        end\n    end\n    return nil\nend", "    local t1 = {}\n    local\
    \ t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] == l2[1] then\n        \
    \    table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n        end\n\
    \    end\n    return table.sort(t1)\nend", "    local t1 = {}\n    local t2 =\
    \ {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1,\
    \ l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~=\
    \ nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return\
    \ table.concat(t1, t2)\nend", "    local t1 = {}\n    local t2 = {}\n    for i\
    \ = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n\
    \        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n\
    \            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1,\
    \ t2)\nend", "    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n\
    \        if l1[i] == l2[1] then\n            table.insert(t1, l1[i])\n       \
    \     table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1,\
    \ t2)\nend", "    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n     \
    \   t1[l1[i]] = true\n    end\n    for i=1,#l2 do\n        t2[l2[i]] = true\n\
    \    end\n    for k in t1 do\n        if not t2[k] then\n            return table.concat(t1,\
    \ k)\n        end\n    end\n    return nil\nend", "    local t1 = {}\n    for\
    \ i=1,#l1 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n\
    \        end\n    end\n    local t2 = {}\n    for i=1,#l2 do\n        if l2[i]\
    \ ~= nil then\n            table.insert(t2, l2[i])\n        end\n    end\n   \
    \ return table.concat(t1, t2)\nend", "    local t1 = {}\n    local t2 = {}\n \
    \   for i=1,#l1 do\n        if l1[i] ~= nil then\n            table.insert(t1,\
    \ l1[i])\n        end\n    end\n    for i=1,#l2 do\n        if l2[i] ~= nil then\n\
    \            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1,\
    \ t2)\nend", "    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n     \
    \   if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n \
    \   end\n    for i=1,#l2 do\n        if l2[i] ~= nil then\n            table.insert(t2,\
    \ l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend", "    local\
    \ t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil\
    \ then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i =\
    \ 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n\
    \        end\n    end\n    return table.concat(t1, t2)\nend", "    local t1 =\
    \ {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] == l2[1] then\n\
    \            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n  \
    \      end\n    end\n    return table.sort(t1)\nend", "    local t1 = {}\n   \
    \ local t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    for\
    \ i=1,#l2 do\n        t2[l2[i]] = true\n    end\n    for k,v in pairs(t1) do\n\
    \        if not t2[k] then\n            return table.concat({k}, l1)\n       \
    \ end\n    end\n    return nil\nend", "    local t1 = {}\n    local t2 = {}\n\
    \    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2 do\n \
    \       t2[l2[i]] = true\n    end\n    for k,v in pairs(t1) do\n        if not\
    \ t2[k] then\n            table.insert(l1, k)\n        end\n    end\n    for k,v\
    \ in pairs(t2) do\n        if not t1[k] then\n            table.insert(l2, k)\n\
    \        end\n    end\n    return l1\nend", "    local t1 = {}\n    local t2 =\
    \ {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2 do\n\
    \        t2[l2[i]] = true\n    end\n    return table.concat(t1, t2)\nend", " \
    \   local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i]\
    \ ~= nil and l2[i] ~= nil then\n            table.insert(t1, l1[i])\n        \
    \    table.insert(t2, l2[i])\n        end\n    end\n    return table.sort(table.concat(t1,\
    \ t2))\nend", "    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n    \
    \    t1[l1[i]] = true\n    end\n    for i=1,#l2 do\n        t2[l2[i]] = true\n\
    \    end\n    for k in t1 do\n        if not t2[k] then\n            return table.concat({k},\
    \ l1)\n        end\n    end\n    return nil\nend", "    local t1 = {}\n    local\
    \ t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n          \
    \  table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n \
    \       if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n\
    \    end\n    return table.concat(t1, t2)\nend", "    local t1 = {}\n    local\
    \ t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] == l2[1] then\n        \
    \    table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n        end\n\
    \    end\n    return table.sort(t1)\nend", "    local t1 = {}\n    local t2 =\
    \ {}\n    for i = 1, #l1, 2 do\n        if l1[i] == l2[1] then\n            table.insert(t1,\
    \ l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return\
    \ table.concat(t1, t2)\nend", "    local t = {}\n    for i=1,#l1 do\n        for\
    \ j=1,#l2 do\n            if l1[i] == l2[j] then\n                table.insert(t,\
    \ l1[i])\n                break\n            end\n        end\n    end\n    return\
    \ table.unpack(t)\nend", "    local t1 = {}\n    local t2 = {}\n    for i = 1,\
    \ #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n\
    \        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n\
    \            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1,\
    \ t2)\nend", "    local t1 = {}\n    local t2 = {}\n    for i=1,#l1,1 do\n   \
    \     t1[l1[i]] = true\n    end\n    for i=1,#l2,1 do\n        t2[l2[i]] = true\n\
    \    end\n    for k,v in pairs(t1) do\n        if not t2[k] then\n           \
    \ return table.concat(t1, k)\n        end\n    end\nend", "    local t = {}\n\
    \    for i = 1, #l1, 2 do\n        for j = 1, #l2, 2 do\n            if l1[i]\
    \ == l2[j] then\n                table.insert(t, l1[i])\n                break\n\
    \        end\n    end\n    return table.sort(t)\nend", "    local t1 = {}\n  \
    \  local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n   \
    \         table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2\
    \ do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n    \
    \    end\n    end\n    return table.concat(t1, t2)\nend", "    local t1 = {}\n\
    \    local t2 = {}\n    for i=1,#l1,2 do\n        if l1[i] ~= nil then\n     \
    \       t1[l1[i]] = true\n        end\n        if l2[i] ~= nil then\n        \
    \    t2[l2[i]] = true\n        end\n    end\n    for k, v in pairs(t1) do\n  \
    \      if not t2[k] then\n            table.remove(t2, k)\n        end\n    end\n\
    \    return table.keys(t2)\nend", "    local t1 = {}\n    local t2 = {}\n    for\
    \ i=1,#l1,2 do\n        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n\
    \        end\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n\
    \        end\n    end\n    return table.concat(t1, t2)\nend", "    local t1 =\
    \ {}\n    local t2 = {}\n    for i=1,#l1,1 do\n        t1[l1[i]] = true\n    end\n\
    \    for i=1,#l2,1 do\n        t2[l2[i]] = true\n    end\n    local t = {}\n \
    \   for k,v in pairs(t1) do\n        if t2[k] then\n            table.insert(t,\
    \ k)\n        end\n    end\n    return t\nend", "    local t1 = {}\n    local\
    \ t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n          \
    \  table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n \
    \       if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n\
    \    end\n    return table.concat(t1, t2)\nend", "    local t1 = {}\n    local\
    \ t2 = {}\n    for i = 1, #l1, 1 do\n        table.insert(t1, l1[i])\n    end\n\
    \    for i = 1, #l2, 1 do\n        table.insert(t2, l2[i])\n    end\n    local\
    \ t = {}\n    for k, v in pairs(t1) do\n        if table.find(t2, v) then\n  \
    \          table.insert(t, v)\n        end\n    end\n    return table.sort(t)\n\
    end", "    local t1 = {}\n    local t2 = {}\n    for i=1,#l1,2 do\n        if\
    \ l1[i] ~= nil and l2[i] ~= nil then\n            table.insert(t1, l1[i])\n  \
    \          table.insert(t2, l2[i])\n        end\n    end\n    return table.sort(t1)\n\
    end", "    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n      \
    \  if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n  \
    \  end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2,\
    \ l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend", "    local\
    \ t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] == l2[1]\
    \ then\n            table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n\
    \        end\n    end\n    return table.concat(t1, t2)\nend", "    local t1 =\
    \ {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n\
    \            table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2,\
    \ 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n  \
    \      end\n    end\n    return table.concat(t1, t2)\nend", "    local t1 = {}\n\
    \    local t2 = {}\n    for i=1,#l1,2 do\n        if l1[i] ~= nil then\n     \
    \       t1[l1[i]] = true\n        end\n        if l2[i] ~= nil then\n        \
    \    t2[l2[i]] = true\n        end\n    end\n    for k,v in pairs(t1) do\n   \
    \     if not t2[k] then\n            return k\n        end\n    end\n    return\
    \ nil\nend", "    local t1 = {}\n    local t2 = {}\n    for i=1,#l1,2 do\n   \
    \     if l1[i] ~= nil and l2[i] ~= nil then\n            table.insert(t1, l1[i])\n\
    \            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1,\
    \ t2)\nend", "    local t1 = {}\n    for i = 1, #l1 do\n        t1[l1[i]] = true\n\
    \    end\n    local t2 = {}\n    for i = 1, #l2 do\n        t2[l2[i]] = true\n\
    \    end\n    local t3 = {}\n    for k, v in pairs(t1) do\n        if t2[k] then\n\
    \            table.insert(t3, k)\n        end\n    end\n    return t3\nend", " \
    \   local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]] =\
    \ true\n    end\n    for i=1,#l2 do\n        t2[l2[i]] = true\n    end\n    for\
    \ k in t1 do\n        if not t2[k] then\n            return table.concat(t1, k)\n\
    \        end\n    end\n    return nil\nend", "    local t1 = {}\n    local t2\
    \ = {}\n    for i = 1, #l1, 1 do\n        table.insert(t1, l1[i])\n    end\n \
    \   for i = 1, #l2, 1 do\n        table.insert(t2, l2[i])\n    end\n    local\
    \ t = {}\n    for k, v in pairs(t1) do\n        if table.find(t2, v) then\n  \
    \          table.insert(t, v)\n        end\n    end\n    return table.sort(t)\n\
    end", "    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n      \
    \  if l1[i] == l2[1] then\n            table.insert(t1, l1[i])\n            table.insert(t2,\
    \ l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend", "    local\
    \ t1 = {}\n    for i=1,#l1 do\n        if l1[i] ~= nil then\n            table.insert(t1,\
    \ l1[i])\n        end\n    end\n    local t2 = {}\n    for i=1,#l2 do\n      \
    \  if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n  \
    \  end\n    return table.concat(t1, t2)\nend", "    local t1 = {}\n    local t2\
    \ = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2\
    \ do\n        t2[l2[i]] = true\n    end\n    for k in t1 do\n        if not t2[k]\
    \ then\n            return table.concat(t1, k)\n        end\n    end\n    return\
    \ nil\nend", "    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n\
    \        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n\
    \    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n           \
    \ table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\n\
    end", "    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]]\
    \ = true\n    end\n    for i=1,#l2 do\n        t2[l2[i]] = true\n    end\n   \
    \ for k in t1 do\n        if not t2[k] then\n            return table.concat(t1,\
    \ k)\n        end\n    end\n    return nil\nend", "    local t1 = {}\n    local\
    \ t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2\
    \ do\n        t2[l2[i]] = true\n    end\n    for k in t1 do\n        if not t2[k]\
    \ then\n            return table.concat({k}, l1)\n        end\n    end\n    return\
    \ nil\nend", "    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n\
    \        if l1[i] == l2[1] then\n            table.insert(t1, l1[i])\n       \
    \     table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1,\
    \ t2)\nend", "    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n\
    \        if l1[i] ~= nil and l2[i] ~= nil then\n            table.insert(t1, l1[i])\n\
    \            table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1,\
    \ t2)\nend", "    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n     \
    \   t1[l1[i]] = true\n    end\n    for i=1,#l2 do\n        t2[l2[i]] = true\n\
    \    end\n    for k in t1 do\n        if not t2[k] then\n            return table.concat(t1,\
    \ k)\n        end\n    end\n    return nil\nend", "    local t1 = {}\n    local\
    \ t2 = {}\n    for i = 1, #l1 do\n        t1[l1[i]] = true\n    end\n    for i\
    \ = 1, #l2 do\n        t2[l2[i]] = true\n    end\n    for k, v in pairs(t1) do\n\
    \        if not t2[k] then\n            return table.concat(t1, k)\n        end\n\
    \    end\n    return nil\nend", "    local t1 = {}\n    local t2 = {}\n    for\
    \ i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1,\
    \ l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~=\
    \ nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return\
    \ table.concat(t1, t2)\nend", "    local t1 = {}\n    local t2 = {}\n    for i=1,#l1\
    \ do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2 do\n        t2[l2[i]]\
    \ = true\n    end\n    for k in t1 do\n        if t2[k] then\n            table.insert(l1,\
    \ k)\n            table.insert(l2, k)\n        end\n    end\n    return l1\nend",
  "    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 1 do\n        table.insert(t1,\
    \ l1[i])\n    end\n    for i = 1, #l2, 1 do\n        table.insert(t2, l2[i])\n\
    \    end\n    return table.concat(t1, t2)\nend", "    local t1 = {}\n    local\
    \ t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2\
    \ do\n        t2[l2[i]] = true\n    end\n    return table.concat(t1, t2)\nend",
  "    local t1 = {}\n    local t2 = {}\n    for i=1,#l1 do\n        if not t1[l1[i]]\
    \ then\n            t1[l1[i]] = 1\n            t2[l2[i]] = 1\n        end\n  \
    \  end\n    return unpack(t1)\nend", "    local t1 = {}\n    local t2 = {}\n \
    \   for i = 1, #l1, 2 do\n        if l1[i] ~= nil and l2[i] ~= nil then\n    \
    \        table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n      \
    \  end\n    end\n    return table.concat(t1, t2)\nend", "    local t1 = {}\n \
    \   local t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n   \
    \ for i=1,#l2 do\n        t2[l2[i]] = true\n    end\n    for k,v in pairs(t1)\
    \ do\n        if not t2[k] then\n            table.insert(l1, k)\n        end\n\
    \    end\n    return l1\nend", "    local t1 = {}\n    local t2 = {}\n    for\
    \ i = 1, #l1, 2 do\n        if l1[i] ~= nil and l2[i] ~= nil then\n          \
    \  table.insert(t1, l1[i])\n            table.insert(t2, l2[i])\n        end\n\
    \    end\n    return table.concat(t1, t2)\nend", "    local t1 = {}\n    local\
    \ t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n          \
    \  table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n \
    \       if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n\
    \    end\n    return table.concat(t1, t2)\nend", "    local t1 = {}\n    local\
    \ t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n          \
    \  t1[l1[i]] = true\n        end\n    end\n    for i = 1, #l2, 2 do\n        if\
    \ l2[i] ~= nil then\n            t2[l2[i]] = true\n        end\n    end\n    for\
    \ k, v in pairs(t1) do\n        if not t2[k] then\n            return k\n    \
    \    end\n    end\n    return nil\nend", "    local t = {}\n    for i=1,#l1 do\n\
    \        for j=1,#l2 do\n            if l1[i] == l2[j] then\n                table.insert(t,\
    \ l1[i])\n                break\n        end\n    end\n    return table.sort(t)\n\
    end", "    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n      \
    \  if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n  \
    \  end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2,\
    \ l2[i])\n        end\n    end\n    return table.concat(t1, t2)\nend", "    local\
    \ t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil\
    \ then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i =\
    \ 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n\
    \        end\n    end\n    return table.concat(t1, t2)\nend", "    local t1 =\
    \ {}\n    local t2 = {}\n    for i=1,#l1,2 do\n        if l1[i] == l2[1] then\n\
    \            t1[l1[i]] = true\n            t2[l2[1]] = true\n        end\n   \
    \ end\n    return t1, t2\nend", "    local t1 = {}\n    local t2 = {}\n    for\
    \ i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2 do\n        t2[l2[i]]\
    \ = true\n    end\n    for k in t1 do\n        if not t2[k] then\n           \
    \ return table.concat(t1, k)\n        end\n    end\n    return nil\nend", "  \
    \  local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i]\
    \ == l2[1] then\n            table.insert(t1, l1[i])\n            table.insert(t2,\
    \ l2[i])\n        end\n    end\n    return table.sort(t1)\nend", "    local t1\
    \ = {}\n    local t2 = {}\n    for i=1,#l1 do\n        if l1[i] ~= nil then\n\
    \            table.insert(t1, l1[i])\n        end\n    end\n    for i=1,#l2 do\n\
    \        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n\
    \    end\n    return table.concat(t1, t2)\nend", "    local t1 = {}\n    local\
    \ t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2\
    \ do\n        t2[l2[i]] = true\n    end\n    for k in t1 do\n        if not t2[k]\
    \ then\n            return table.concat(t1, k)\n        end\n    end\n    return\
    \ nil\nend", "    local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n\
    \        if l1[i] ~= nil then\n            table.insert(t1, l1[i])\n        end\n\
    \    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~= nil then\n           \
    \ table.insert(t2, l2[i])\n        end\n    end\n    return table.concat(t1, t2)\n\
    end", "    local t1 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n\
    \    local t2 = {}\n    for i=1,#l2 do\n        t2[l2[i]] = true\n    end\n  \
    \  local t3 = {}\n    for k,v in pairs(t1) do\n        if t2[k] then\n       \
    \     table.insert(t3, k)\n        end\n    end\n    return t3\nend", "    local\
    \ t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil\
    \ then\n            table.insert(t1, l1[i])\n        end\n    end\n    for i =\
    \ 1, #l2, 2 do\n        if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n\
    \        end\n    end\n    return table.concat(t1, t2)\nend", "    local t1 =\
    \ {}\n    local t2 = {}\n    for i = 1, #l1, 1 do\n        t1[l1[i]] = true\n\
    \    end\n    for i = 1, #l2, 1 do\n        t2[l2[i]] = true\n    end\n    local\
    \ t = {}\n    for k, v in pairs(t1) do\n        if t2[k] then\n            t[k]\
    \ = true\n        end\n    end\n    return t\nend", "    local t1 = {}\n    local\
    \ t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n          \
    \  table.insert(t1, l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n \
    \       if l2[i] ~= nil then\n            table.insert(t2, l2[i])\n        end\n\
    \    end\n    return table.concat(t1, t2)\nend", "    local t1 = {}\n    local\
    \ t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n    for i=1,#l2\
    \ do\n        t2[l2[i]] = true\n    end\n    for k,v in pairs(t1) do\n       \
    \ if not t2[k] then\n            return table.concat(t1, k)\n        end\n   \
    \ end\n    return nil\nend", "    local t1 = {}\n    for i=1,#l1 do\n        t1[l1[i]]\
    \ = true\n    end\n    local t2 = {}\n    for i=1,#l2 do\n        t2[l2[i]] =\
    \ true\n    end\n    local t3 = {}\n    for k,v in pairs(t1) do\n        if t2[k]\
    \ then\n            t3[k] = true\n        end\n    end\n    return t3\nend", " \
    \   local t1 = {}\n    local t2 = {}\n    for i = 1, #l1, 2 do\n        if l1[i]\
    \ == l2[1] then\n            table.insert(t1, l1[i])\n            table.insert(t2,\
    \ l2[i])\n        end\n    end\n    return table.sort(t1)\nend", "    local t\
    \ = {}\n    for i = 1, #l1 do\n        for j = 1, #l2 do\n            if l1[i]\
    \ == l2[j] then\n                table.insert(t, l1[i])\n                break\n\
    \        end\n    end\n    return table.unpack(t)\nend", "    local t1 = {}\n\
    \    local t2 = {}\n    for i=1,#l1 do\n        t1[l1[i]] = true\n    end\n  \
    \  for i=1,#l2 do\n        t2[l2[i]] = true\n    end\n    return filter(function(k)\n\
    \        return t1[k] and t2[k]\n    end, t1)\nend", "    local t1 = {}\n    local\
    \ t2 = {}\n    for i = 1, #l1, 1 do\n        t1[l1[i]] = true\n    end\n    for\
    \ i = 1, #l2, 1 do\n        t2[l2[i]] = true\n    end\n    local t = {}\n    for\
    \ k, v in pairs(t1) do\n        if t2[k] then\n            table.insert(t, k)\n\
    \        end\n    end\n    return t\nend", "    local t1 = {}\n    local t2 =\
    \ {}\n    for i = 1, #l1, 2 do\n        if l1[i] ~= nil then\n            table.insert(t1,\
    \ l1[i])\n        end\n    end\n    for i = 1, #l2, 2 do\n        if l2[i] ~=\
    \ nil then\n            table.insert(t2, l2[i])\n        end\n    end\n    return\
    \ table.concat(t1, t2)\nend", "    local t1 = {}\n    local t2 = {}\n    for i\
    \ = 1, #l1, 2 do\n        if l1[i] == l2[1] then\n            table.insert(t1,\
    \ l1[i])\n            table.insert(t2, l2[i])\n        end\n    end\n    return\
    \ table.concat(t1, t2)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
