{
  "name": "HumanEval_136_largest_smallest_integers",
  "language": "lua",
  "prompt": "-- Create a function that returns a table (a, b), where 'a' is\n-- the largest of negative integers, and 'b' is the smallest\n-- of positive integers in a table.\n-- If there is no negative or positive integers, return them as None.\n-- Examples:\n-- >>> largest_smallest_integers([2, 4, 1, 3, 5, 7]) \n-- (None, 1)\n-- >>> largest_smallest_integers([]) \n-- (None, None)\n-- >>> largest_smallest_integers([0]) \n-- (None, None)\nlocal function largest_smallest_integers(lst)\n",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_smallest_integers\n    lu.assertEquals(candidate({2, 4, 1, 3, 5, 7}), {None, 1})\n    lu.assertEquals(candidate({2, 4, 1, 3, 5, 7, 0}), {None, 1})\n    lu.assertEquals(candidate({1, 3, 2, 4, 5, 6, -2}), {-2, 1})\n    lu.assertEquals(candidate({4, 5, 3, 6, 2, 7, -7}), {-7, 2})\n    lu.assertEquals(candidate({7, 3, 8, 4, 9, 2, 5, -9}), {-9, 2})\n    lu.assertEquals(candidate({}), {None, None})\n    lu.assertEquals(candidate({0}), {None, None})\n    lu.assertEquals(candidate({-1, -3, -5, -6}), {-1, None})\n    lu.assertEquals(candidate({-1, -3, -5, -6, 0}), {-1, None})\n    lu.assertEquals(candidate({-6, -4, -4, -3, 1}), {-3, 1})\n    lu.assertEquals(candidate({-6, -4, -4, -3, -100, 1}), {-3, 1})\nend\n\nos.exit(lu.LuaUnit.run())",
  "completions": [
    "    local max = -1\n    local min = 1\n    for i = 1, #lst, 2 do\n        if lst[i] > max then max = lst[i]\n        if lst[i] < min then min = lst[i]\n    end\n    if max == -1 then return (nil, nil)\n    else return (max, min)\nend",
    "    local tbl = {}\n    local max = nil\n    local min = nil\n    for i = 1, #lst do\n        if lst[i] < 0 then\n            if max == nil then\n                max = lst[i]\n            else\n                max = math.max(max, lst[i])\n        else\n            if min == nil then\n                min = lst[i]\n            else\n                min = math.min(min, lst[i])\n        end\n        tbl[i] = lst[i]\n    end\n    return tbl, max, min\nend",
    "    local max_neg, min_pos = -1, 1\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            if v > max_neg then max_neg = v\n        else\n            if v < min_pos then min_pos = v\n        end\n    end\n    return max_neg, min_pos\nend",
    "    local max, min\n    if #lst > 0 then\n        max = math.min(lst)\n        min = math.max(lst)\n    else\n        max = None\n        min = None\n    end\n    return max, min\nend",
    "    local tbl = {}\n    for i = 1, #lst, 2 do\n        if lst[i] > 0 then\n            tbl
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        elseif v > 0 then\n            tbl[i] = v\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    else\n        return (max(tbl), min(tbl))\n    end\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        end\n        if v > 0 then\n            tbl[i] = v\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (max(tbl), min(tbl))\nend",
    "    local tbl = {}\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            tbl
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        elseif v > 0 then\n            tbl[i] = v\n        end\n    end\n    if #tbl > 0 then\n        return tbl[1], tbl[#                                                                                                                                                                                                                  ",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[v] = i\n        elseif v > 0 then\n            tbl[v] = i\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[#",
    "    local tbl = {}\n    local max_neg = -1\n    local min_pos = 1e9\n    for _, v in ipairs(lst) do\n        if v < 0 then\n            if v > max_neg then\n                max_neg = v\n            end\n        else\n            if v < min_pos then\n                min_pos = v\n            end\n        end\n        tbl[v] = v\n    end\n    return (max_neg, min_pos)\nend",
    "    local tbl = {}\n    for i = 1, #lst, 1 do\n        if lst[i] < 0 then\n            tbl
    "    local max_negative, min_positive = -1, 1\n    for _, v in ipairs(lst) do\n        if v < 0 then\n            if v > max_negative then max_negative = v\n        else\n            if v < min_positive then min_positive = v\n        end\n    end\n    if max_negative < 0 then\n        return max_negative, min_positive\n    else\n        return nil, nil\n    end\nend",
    "    local tbl = {}\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            tbl
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        elseif v > 0 then\n            tbl[i] = v\n        end\n    end\n    return tbl\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        elseif v > 0 then\n            tbl[i] = v\n        end\n    end\n    if #tbl > 0 then\n        return tbl\n    else\n        return nil\n    end\nend",
    "    local max_neg = 0\n    local max_pos = 0\n    local min_neg = 0\n    local min_pos = 0\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            if v > max_neg then\n                max_neg = v\n            end\n        else\n            if v < min_neg then\n                min_neg = v\n            end\n        end\n        if v > 0 then\n            if v > max_pos then\n                max_pos = v\n            end\n        else\n            if v < min_pos then\n                min_pos = v\n            end\n        end\n    end\n    return (max_neg, min_pos)\nend",
    "    local tbl = {}\n    for i = 1, #lst, 2 do\n        if lst[i] > 0 then\n            tbl
    "    local res = {nil, nil}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            res[1] = v\n        elseif v > 0 then\n            res[2] = v\n        end\n    end\n    return res\nend",
    "    local max, min\n    if #lst == 0 then\n        return (None, None)\n    end\n    max = math.min(lst)\n    min = math.max(lst)\n    return (max, min)\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        elseif v > 0 then\n            tbl[i] = v\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (max(tbl), min(tbl))\nend",
    "    local tbl = {}\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local max_neg = -1\n    local min_pos = 1\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            if v > max_neg then\n                max_neg = v\n            end\n        else\n            if v < min_pos then\n                min_pos = v\n            end\n        end\n    end\n    return max_neg, min_pos\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[v] = i\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[#tbl], tbl[1])\nend",
    "    local max_neg = -1\n    local min_pos = 1\n    for i=1,#lst do\n        if lst[i] < 0 then\n            if max_neg < 0 then\n                max_neg = lst[i]\n            else\n                max_neg = max_neg\n        else\n            if min_pos > 0 then\n                min_pos = lst[i]\n            else\n                min_pos = min_pos\n        end\n    end\n    return max_neg, min_pos\nend",
    "    local tbl = {}\n    for i=1,#lst,2 do\n        if lst[i] < 0 then\n            tbl[#tbl+1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl+1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local tbl = {}\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local tbl = {}\n    local max_neg = nil\n    local min_pos = nil\n    for i = 1, #lst do\n        if lst[i] < 0 then\n            if max_neg == nil then\n                max_neg = lst[i]\n            else\n                max_neg = math.max(max_neg, lst[i])\n        else\n            if min_pos == nil then\n                min_pos = lst[i]\n            else\n                min_pos = math.min(min_pos, lst[i])\n        end\n    end\n    if max_neg == nil then\n        tbl[1] = min_pos\n    else\n        tbl[1] = max_neg\n    end\n    if min_pos == nil then\n        tbl[2] = max_neg\n    else\n        tbl[2] = min_pos\n    end\n    return tbl\nend",
    "    local tbl = {}\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local result = {}\n    local negative = false\n    local positive = false\n    for _, v in ipairs(lst) do\n        if v < 0 then\n            negative = true\n        elseif v > 0 then\n            positive = true\n        end\n    end\n    if negative and positive then\n        result['negative'] = -1\n        result['positive'] = 1\n    elseif negative then\n        result['negative'] = -1\n    elseif positive then\n        result['positive'] = 1\n    end\n    return result\nend",
    "    local max_negative = 0\n    local min_positive = 0\n    for i = 1, #lst, 1 do\n        if lst[i] < 0 then\n            if max_negative < lst[i] then\n                max_negative = lst[i]\n            end\n        elseif lst[i] > 0 then\n            if min_positive > lst[i] then\n                min_positive = lst[i]\n            end\n        end\n    end\n    if max_negative == 0 and min_positive == 0 then\n        return (None, None)\n    else\n        return (max_negative, min_positive)\n    end\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        elseif v > 0 then\n            tbl[i] = v\n        end\n    end\n    return tbl\nend",
    "    local max = -1\n    local min = 1\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            if v > max then max = v\n        else\n            if v < min then min = v\n        end\n    end\n    return max, min\nend",
    "    local result = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            result[1] = v\n        elseif v > 0 then\n            result[2] = v\n        end\n    end\n    return result\nend",
    "    local tbl = {}\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local tbl = {}\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (max(tbl), min(tbl))\nend",
    "    local tbl = {}\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local tbl = {}\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local max_num = 0\n    local min_num = 0\n    for i = 1, #lst, 1 do\n        if lst[i] < 0 then\n            if lst[i] > max_num then\n                max_num = lst[i]\n            end\n        else\n            if lst[i] < min_num then\n                min_num = lst[i]\n            end\n        end\n    end\n    return (max_num, min_num)\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        end\n    end\n    if #tbl > 0 then\n        return tbl[1], tbl[#tbl]\n    else\n        return nil, nil\n    end\nend",
    "    local tbl = {}\n    local max_neg = 0\n    local min_pos = 0\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            if max_neg < lst[i] then\n                max_neg = lst[i]\n            end\n        elseif lst[i] > 0 then\n            if min_pos > lst[i] then\n                min_pos = lst[i]\n            end\n        end\n    end\n    if max_neg == 0 then\n        return (None, None)\n    else\n        return (max_neg, min_pos)\n    end\nend",
    "    local tbl = {}\n    for i=1,#lst,2 do\n        if lst[i] < 0 then\n            tbl[#tbl+1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl+1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local tbl = {}\n    local n = 0\n    local m = 0\n    for i = 1, #lst do\n        if lst[i] < 0 then\n            tbl[n + 1] = lst[i]\n            n = n + 1\n        elseif lst[i] > 0 then\n            tbl[m + 1] = lst[i]\n            m = m + 1\n        end\n    end\n    if n > 0 then\n        tbl[n + 1] = 0\n    end\n    if m > 0 then\n        tbl[m + 1] = 0\n    end\n    return tbl\nend",
    "    local tbl = {}\n    local max_neg = 0\n    local max_pos = 0\n    local min_neg = 0\n    local min_pos = 0\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            if v > max_neg then\n                max_neg = v\n            end\n        else\n            if v < min_neg then\n                min_neg = v\n            end\n        end\n        if v > 0 then\n            if v > max_pos then\n                max_pos = v\n            end\n        else\n            if v < min_pos then\n                min_pos = v\n            end\n        end\n        tbl[i] = v\n    end\n    return {max_neg, min_neg, max_pos, min_pos, tbl}\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        elseif v > 0 then\n            tbl[i] = v\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (max(tbl), min(tbl))\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        elseif v > 0 then\n            tbl[i] = v\n        end\n    end\n    if #tbl > 0 then\n        return tbl[1], tbl[#tbl]\n    else\n        return nil, nil\n    end\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        elseif v > 0 then\n            tbl[i] = v\n        end\n    end\n    if #tbl > 0 then\n        return tbl[1], tbl[#tbl]\n    else\n        return nil, nil\n    end\nend",
    "    local max_neg = 0\n    local min_pos = 0\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            if max_neg < lst[i] then\n                max_neg = lst[i]\n            end\n        elseif lst[i] > 0 then\n            if min_pos > lst[i] then\n                min_pos = lst[i]\n            end\n        end\n    end\n    if max_neg == 0 and min_pos == 0 then\n        return (None, None)\n    else\n        return (max_neg, min_pos)\n    end\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        elseif v > 0 then\n            tbl[i] = v\n        end\n    end\n    if #tbl > 0 then\n        return tbl[tbl.keys()[1]]\n    else\n        return nil\n    end\nend",
    "    local res = {nil, nil}\n    for i = 1, #lst, 2 do\n        if lst[i] > 0 then\n            if res[1] == nil then\n                res[1] = lst[i]\n            else\n                res[1] = math.min(res[1], lst[i])\n        else\n            if res[2] == nil then\n                res[2] = lst[i]\n            else\n                res[2] = math.max(res[2], lst[i])\n        end\n    end\n    return res\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        elseif v > 0 then\n            tbl[i] = v\n        end\n    end\n    return tbl\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        elseif v > 0 then\n            tbl[i] = v\n        end\n    end\n    if #tbl > 0 then\n        return tbl[1], tbl[#tbl]\n    else\n        return nil, nil\n    end\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        elseif v > 0 then\n            tbl[i] = v\n        end\n    end\n    if #tbl > 0 then\n        return tbl[1], tbl[#tbl]\n    else\n        return nil, nil\n    end\nend",
    "    local tbl = {}\n    for i=1,#lst do\n        if lst[i] < 0 then\n            tbl[#tbl+1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl+1] = lst[i]\n        end\n    end\n    if #tbl > 0 then\n        return tbl[1], tbl[#tbl]\n    else\n        return nil, nil\n    end\nend",
    "    local tbl = {}\n    for i = 1, #lst do\n        if lst[i] < 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        elseif v > 0 then\n            tbl[i] = v\n        end\n    end\n    if #tbl > 0 then\n        return tbl[1], tbl[#tbl]\n    else\n        return nil, nil\n    end\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        end\n    end\n    if #tbl > 0 then\n        return tbl[1], tbl[#tbl]\n    else\n        return nil, nil\n    end\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        elseif v > 0 then\n            tbl[i] = v\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    else\n        return (max(tbl), min(tbl))\n    end\nend",
    "    local tbl = {}\n    local max_neg = 0\n    local max_pos = 0\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            if v > max_neg then\n                max_neg = v\n            end\n        else\n            if v > max_pos then\n                max_pos = v\n            end\n        end\n        tbl[i] = v\n    end\n    if max_neg == 0 and max_pos == 0 then\n        return (None, None)\n    else\n        return (max_neg, max_pos)\n    end\nend",
    "    local tbl = {}\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local tbl = {}\n    for i = 1, #lst do\n        if lst[i] < 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local tbl = {}\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n    end\n    if #tbl > 0 then\n        return tbl[1], tbl[#tbl]\n    else\n        return nil, nil\n    end\nend",
    "    local tbl = {}\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        elseif v > 0 then\n            tbl[i] = v\n        end\n    end\n    if #tbl > 0 then\n        return tbl[1], tbl[#tbl]\n    else\n        return nil, nil\n    end\nend",
    "    local tbl = {}\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n    end\n    if #tbl > 0 then\n        return tbl[1], tbl[#tbl]\n    else\n        return nil, nil\n    end\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        elseif v > 0 then\n            tbl[i] = v\n        end\n    end\n    if #tbl > 0 then\n        return tbl[#tbl]\n    else\n        return nil\n    end\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        elseif v > 0 then\n            tbl[i] = v\n        end\n    end\n    if #tbl > 0 then\n        return tbl[#tbl]\n    else\n        return nil\n    end\nend",
    "    local max_negative = 0\n    local min_positive = 0\n    for i=1,#lst do\n        if lst[i] < 0 then\n            if lst[i] > max_negative then\n                max_negative = lst[i]\n            end\n        else\n            if lst[i] < min_positive then\n                min_positive = lst[i]\n            end\n        end\n    end\n    return (max_negative, min_positive)\nend",
    "    local tbl = {}\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local max, min\n    if #lst == 0 then\n        return (None, None)\n    end\n    max = math.min(lst)\n    min = math.max(lst)\n    return (max, min)\nend",
    "    local max_negative = -1\n    local min_positive = 1\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            if v > max_negative then\n                max_negative = v\n            end\n        else\n            if v < min_positive then\n                min_positive = v\n            end\n        end\n    end\n    return (max_negative, min_positive)\nend",
    "    local max, min = -1, 1\n    for i = 1, #lst, 2 do\n        if lst[i] > max then max = lst[i]\n        if lst[i] < min then min = lst[i]\n    end\n    if max == -1 then return (None, None)\n    return (max, min)\nend",
    "    local tbl = {}\n    for i = 1, #lst, 2 do\n        if lst[i] > 0 then\n            tbl[#tbl + 1] = lst[i]\n        elseif lst[i] < 0 then\n            tbl[#tbl + 1] = -lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    else\n        return (tbl[1], tbl[#tbl])\n    end\nend",
    "    local tbl = {}\n    for i = 1, #lst do\n        if lst[i] < 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        elseif v > 0 then\n            tbl[i] = v\n        end\n    end\n    if #tbl > 0 then\n        return tbl[1], tbl[#tbl]\n    else\n        return nil, nil\n    end\nend",
    "    local max, min = -1, 1\n    for i = 1, #lst, 2 do\n        if lst[i] > max then max = lst[i]\n        if lst[i] < min then min = lst[i]\n    end\n    if max == -1 then return nil, nil\n    else return max, min\nend",
    "    local tbl = {}\n    for i=1,#lst,2 do\n        if lst[i] < 0 then\n            tbl[#tbl+1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl+1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local tbl = {}\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local tbl = {}\n    local max = -1\n    local min = 1\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = -v\n            if v > max then max = v\n        else\n            tbl[i] = v\n            if v < min then min = v\n        end\n    end\n    if max > 0 then\n        tbl[max] = min\n    end\n    return tbl\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        elseif v > 0 then\n            tbl[i] = v\n        end\n    end\n    if #tbl > 0 then\n        return tbl[#tbl]\n    else\n        return nil\n    end\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        elseif v > 0 then\n            tbl[i] = v\n        end\n    end\n    return tbl\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        elseif v > 0 then\n            tbl[i] = v\n        end\n    end\n    return tbl\nend",
    "    local tbl = {}\n    local max = -1\n    local min = 1\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n            if v > max then\n                max = v\n            end\n        else\n            tbl[i] = v\n            if v < min then\n                min = v\n            end\n        end\n    end\n    return tbl, max, min\nend",
    "    local result = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            result[1] = v\n        elseif v > 0 then\n            result[2] = v\n        end\n    end\n    if #result == 0 then\n        return result\n    end\n    return result[1], result[2]\nend",
    "    local tbl = {}\n    for i=1,#lst do\n        if lst[i] < 0 then\n            tbl[#tbl+1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl+1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local tbl = {}\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local tbl = {}\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local max_negative = nil\n    local min_positive = nil\n    for _, v in ipairs(lst) do\n        if v < 0 then\n            if max_negative == nil then\n                max_negative = v\n            else\n                max_negative = max(max_negative, v)\n        else\n            if min_positive == nil then\n                min_positive = v\n            else\n                min_positive = min(min_positive, v)\n        end\n    end\n    return max_negative, min_positive\nend",
    "    local tbl = {}\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local tbl = {}\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local tbl = {}\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local tbl = {}\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local tbl = {}\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local tbl = {}\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local tbl = {}\n    for i=1,#lst do\n        if lst[i] < 0 then\n            tbl[#tbl+1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl+1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local result = {}\n    local max_negative = 0\n    local min_positive = 0\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            if v > max_negative then\n                max_negative = v\n            end\n        else\n            if v < min_positive then\n                min_positive = v\n            end\n        end\n    end\n    if max_negative > 0 then\n        result['negative'] = max_negative\n    else\n        result['negative'] = None\n    end\n    if min_positive > 0 then\n        result['positive'] = min_positive\n    else\n        result['positive'] = None\n    end\n    return result\nend",
    "    local tbl = {}\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (max(tbl), min(tbl))\nend",
    "    local result = {}\n    local max_negative = -1\n    local min_positive = 1e9\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            if v > max_negative then\n                max_negative = v\n                result['negative'] = i\n            end\n        else\n            if v < min_positive then\n                min_positive = v\n                result['positive'] = i\n            end\n        end\n    end\n    return result\nend",
    "    local max_int = -1\n    local min_int = 1\n    for i = 1, #lst, 1 do\n        if lst[i] < 0 then\n            if max_int < 0 then\n                max_int = lst[i]\n            else\n                max_int = max_int\n        else\n            if min_int > 0 then\n                min_int = lst[i]\n            else\n                min_int = min_int\n        end\n    end\n    if max_int < 0 then\n        return (None, min_int)\n    else\n        return (max_int, None)\n    end\nend",
    "    local tbl = {}\n    local max_neg = nil\n    local min_pos = nil\n    for _, v in ipairs(lst) do\n        if v < 0 then\n            if max_neg == nil then\n                max_neg = v\n            else\n                max_neg = max(max_neg, v)\n        else\n            if min_pos == nil then\n                min_pos = v\n            else\n                min_pos = min(min_pos, v)\n        end\n        tbl[v] = true\n    end\n    return max_neg, min_pos\nend",
    "    local tbl = {}\n    local max_neg = 0\n    local min_pos = 0\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            if v > max_neg then\n                max_neg = v\n            end\n        else\n            if v < min_pos then\n                min_pos = v\n            end\n        end\n        tbl[i] = v\n    end\n    return (max_neg, min_pos)\nend",
    "    local tbl = {}\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        elseif v > 0 then\n            tbl[i] = v\n        end\n    end\n    return tbl\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        elseif v > 0 then\n            tbl[i] = v\n        end\n    end\n    if #tbl > 0 then\n        return tbl[1], tbl[#tbl]\n    else\n        return nil, nil\n    end\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        elseif v > 0 then\n            tbl[i] = v\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (max(tbl), min(tbl))\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        elseif v > 0 then\n            tbl[i] = v\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (max(tbl), min(tbl))\nend",
    "    local tbl = {}\n    for i=1,#lst,2 do\n        if lst[i] < 0 then\n            tbl[#tbl+1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl+1] = lst[i]\n        end\n    end\n    if #tbl > 0 then\n        return tbl[1], tbl[#tbl]\n    else\n        return nil, nil\n    end\nend",
    "    local tbl = {}\n    for i = 1, #lst, 2 do\n        if lst[i] > 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local result = {}\n    local max_negative = 0\n    local min_positive = 0\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            if v > max_negative then\n                max_negative = v\n            end\n        else\n            if v < min_positive then\n                min_positive = v\n            end\n        end\n    end\n    if max_negative > 0 then\n        result['a'] = max_negative\n    else\n        result['a'] = None\n    end\n    if min_positive > 0 then\n        result['b'] = min_positive\n    else\n        result['b'] = None\n    end\n    return result\nend",
    "    local result = {}\n    local negative = {}\n    local positive = {}\n    for i, v in pairs(lst) do\n        if v < 0 then\n            negative[i] = v\n        elseif v > 0 then\n            positive[i] = v\n        end\n    end\n    if #negative > 0 then\n        result[1] = negative[1]\n    end\n    if #positive > 0 then\n        result[2] = positive[1]\n    end\n    return result\nend",
    "    local result = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            result[1] = v\n        elseif v > 0 then\n            result[2] = v\n        end\n    end\n    if #result == 0 then\n        return result\n    end\n    return result[1], result[2]\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        elseif v > 0 then\n            tbl[i] = v\n        end\n    end\n    if #tbl > 0 then\n        return tbl[1], tbl[#tbl]\n    else\n        return nil, nil\n    end\nend",
    "    local tbl = {}\n    local n = 0\n    local m = 0\n    for i = 1, #lst do\n        if lst[i] < 0 then\n            if tbl[-lst[i]] then\n                tbl[-lst[i]] = -tbl[-lst[i]]\n            else\n                tbl[-lst[i]] = -lst[i]\n            end\n        else\n            if tbl[lst[i]] then\n                tbl[lst[i]] = lst[i]\n            else\n                tbl[lst[i]] = lst[i]\n            end\n        end\n        if tbl[-lst[i]] then\n            n = n + 1\n        else\n            m = m + 1\n        end\n    end\n    if n > 0 then\n        return (tbl[-n], tbl[m])\n    else\n        return (None, None)\n    end\nend",
    "    local tbl = {}\n    for i=1,#lst do\n        if lst[i] < 0 then\n            tbl[#tbl+1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl+1] = lst[i]\n        end\n    end\n    if #tbl > 0 then\n        return tbl[1], tbl[#tbl]\n    else\n        return nil, nil\n    end\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        elseif v > 0 then\n            tbl[i] = v\n        end\n    end\n    if #tbl > 0 then\n        return tbl[1], tbl[#tbl]\n    else\n        return nil, nil\n    end\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        elseif v > 0 then\n            tbl[i] = v\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (max(tbl), min(tbl))\nend",
    "    local tbl = {}\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local tbl = {}\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (max(tbl), min(tbl))\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        elseif v > 0 then\n            tbl[i] = v\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (max(tbl), min(tbl))\nend",
    "    local max, min = -1, 1\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            if max < 0 then\n                max = lst[i]\n            else\n                max = max\n        else\n            if min > 0 then\n                min = lst[i]\n            else\n                min = min\n        end\n    end\n    return max, min\nend",
    "    local tbl = {}\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local tbl = {}\n    local max_neg = 0\n    local min_pos = 0\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            if v > max_neg then\n                max_neg = v\n            end\n        else\n            if v < min_pos then\n                min_pos = v\n            end\n        end\n        tbl[i] = v\n    end\n    return (max_neg, min_pos)\nend",
    "    local tbl = {}\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            tbl[#tbl+1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl+1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local max_int, min_int = -1, 1\n    local max_neg, min_neg = -1, 1\n    local max_pos, min_pos = -1, 1\n    for _, v in ipairs(lst) do\n        if v < 0 then\n            if v > max_neg then\n                max_neg = v\n                min_neg = 1\n            end\n        else\n            if v < min_pos then\n                min_pos = v\n                max_pos = 1\n            end\n        end\n    end\n    if max_neg > 0 then\n        if max_neg > max_pos then\n            max_int, min_int = max_neg, min_neg\n        else\n            max_int, min_int = max_pos, min_pos\n        end\n    else\n        max_int, min_int = max_pos, min_pos\n    end\n    return max_int, min_int\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        elseif v > 0 then\n            tbl[i] = v\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (max(tbl), min(tbl))\nend",
    "    local tbl = {}\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local tbl = {}\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local tbl = {}\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local tbl = {}\n    for i=1,#lst,2 do\n        if lst[i] < 0 then\n            tbl[#tbl+1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl+1] = lst[i]\n        end\n    end\n    if #tbl > 0 then\n        return tbl[1], tbl[#tbl]\n    else\n        return nil, nil\n    end\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[v] = i\n        elseif v > 0 then\n            tbl[v] = i\n        end\n    end\n    return tbl[max(tbl)]\nend",
    "    local result = {}\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            if result[1] ~= nil then\n                result[1] = math.min(result[1], lst[i])\n            else\n                result[1] = lst[i]\n            end\n        elseif lst[i] > 0 then\n            if result[2] ~= nil then\n                result[2] = math.max(result[2], lst[i])\n            else\n                result[2] = lst[i]\n            end\n        end\n    end\n    return result\nend",
    "    local tbl = {}\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[v] = i\n        elseif v > 0 then\n            tbl[v] = i\n        end\n    end\n    return tbl\nend",
    "    local max_negative = 0\n    local min_positive = 0\n    local max_positive = 0\n    local min_negative = 0\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            if max_negative < lst[i] then\n                max_negative = lst[i]\n            end\n        elseif lst[i] > 0 then\n            if max_positive < lst[i] then\n                max_positive = lst[i]\n            end\n        elseif lst[i] == 0 then\n            if max_positive < min_negative then\n                max_positive = min_negative\n            end\n            if max_negative < min_positive then\n                max_negative = min_positive\n            end\n        end\n    end\n    return (max_negative, min_positive)\nend",
    "    local result = {}\n    local max = -1\n    local min = 1\n    for i = 1, #lst, 2 do\n        if lst[i] > 0 then\n            if lst[i] > max then\n                max = lst[i]\n            end\n            if lst[i] < min then\n                min = lst[i]\n            end\n        end\n    end\n    if max > 0 then\n        result[\"max\"] = max\n    end\n    if min < 0 then\n        result[\"min\"] = min\n    end\n    return result\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (max(tbl), min(tbl))\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        elseif v > 0 then\n            tbl[i] = v\n        end\n    end\n    return tbl\nend",
    "    local max_negative = 0\n    local min_positive = 0\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            if v > max_negative then\n                max_negative = v\n            end\n        else\n            if v < min_positive then\n                min_positive = v\n            end\n        end\n    end\n    return (max_negative, min_positive)\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        elseif v > 0 then\n            tbl[i] = v\n        end\n    end\n    if #tbl > 0 then\n        return tbl[1], tbl[#tbl]\n    else\n        return nil, nil\n    end\nend",
    "    local tbl = {}\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        elseif v > 0 then\n            tbl[i] = v\n        end\n    end\n    if #tbl > 0 then\n        return tbl[tbl.keys()[1]]\n    else\n        return nil\n    end\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        elseif v > 0 then\n            tbl[i] = v\n        end\n    end\n    if #tbl > 0 then\n        return tbl[#tbl]\n    else\n        return nil\n    end\nend",
    "    local tbl = {}\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            tbl[#tbl+1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl+1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local tbl = {}\n    local max = -1\n    local min = 1\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            tbl[i] = -1\n            if max < -1 then\n                max = -1\n            end\n        elseif lst[i] > 0 then\n            tbl[i] = 1\n            if min > 1 then\n                min = 1\n            end\n        end\n    end\n    return tbl\nend",
    "    local tbl = {}\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local max_neg = -1\n    local min_pos = 1\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            if v > max_neg then\n                max_neg = v\n            end\n        else\n            if v < min_pos then\n                min_pos = v\n            end\n        end\n    end\n    return (max_neg, min_pos)\nend",
    "    local result = {}\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            if result[1] ~= nil then\n                result[1] = math.min(result[1], lst[i])\n            else\n                result[1] = lst[i]\n            end\n        elseif lst[i] > 0 then\n            if result[2] ~= nil then\n                result[2] = math.max(result[2], lst[i])\n            else\n                result[2] = lst[i]\n            end\n        end\n    end\n    return result\nend",
    "    local res = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            res[1] = v\n        elseif v > 0 then\n            res[2] = v\n        end\n    end\n    if #res == 0 then\n        return (None, None)\n    else\n        return (res[1], res[2])\n    end\nend",
    "    local result = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            if result[1] ~= nil then\n                result[1] = v\n            else\n                result[1] = v\n            end\n        else\n            if result[2] ~= nil then\n                result[2] = v\n            else\n                result[2] = v\n            end\n        end\n    end\n    return result\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[v] = i\n        elseif v > 0 then\n            tbl[v] = i\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[#tbl], tbl[1])\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        elseif v > 0 then\n            tbl[i] = v\n        end\n    end\n    if #tbl > 0 then\n        return tbl[1], tbl[#tbl]\n    else\n        return nil, nil\n    end\nend",
    "    local tbl = {}\n    local res = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[v] = i\n        elseif v > 0 then\n            tbl[v] = i\n        end\n    end\n    for k, v in ipairs(tbl) do\n        if not res[k] then\n            res[k] = v\n        end\n    end\n    return res\nend",
    "    local tbl = {}\n    for i = 1, #lst do\n        if lst[i] < 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local max = -1\n    local min = 1\n    for i = 1, #lst, 2 do\n        if lst[i] > max then max = lst[i]\n        if lst[i] < min then min = lst[i]\n    end\n    if max == -1 then\n        return (None, None)\n    elseif min == 1 then\n        return (max, min)\n    else\n        return (max, min)\n    end\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        elseif v > 0 then\n            tbl[i] = v\n        end\n    end\n    if #tbl > 0 then\n        return tbl[1], tbl[#tbl]\n    else\n        return nil, nil\n    end\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        elseif v > 0 then\n            tbl[i] = v\n        end\n    end\n    if #tbl > 0 then\n        return tbl[1], tbl[#tbl]\n    else\n        return nil, nil\n    end\nend",
    "    local tbl = {}\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        elseif v > 0 then\n            tbl[i] = v\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (max(tbl), min(tbl))\nend",
    "    local max_negative, min_positive = -1, 1\n    local max_positive, min_negative = 1, -1\n    for _, v in ipairs(lst) do\n        if v < 0 then\n            if v > max_negative then max_negative = v\n        else\n            if v < min_positive then min_positive = v\n        end\n    end\n    if max_negative > 0 then\n        return max_negative, min_positive\n    else\n        return max_positive, min_negative\n    end\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        elseif v > 0 then\n            tbl[i] = v\n        end\n    end\n    if #tbl > 0 then\n        return tbl[1], tbl[#tbl]\n    else\n        return nil, nil\n    end\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        elseif v > 0 then\n            tbl[i] = v\n        end\n    end\n    if #tbl > 0 then\n        return tbl[1], tbl[#tbl]\n    else\n        return nil, nil\n    end\nend",
    "    local tbl = {}\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        elseif v > 0 then\n            tbl[i] = v\n        end\n    end\n    if #tbl > 0 then\n        return tbl[1], tbl[#tbl]\n    else\n        return nil, nil\n    end\nend",
    "    local tbl = {}\n    local max_neg = 0\n    local min_pos = 0\n    for i = 1, #lst, 1 do\n        if lst[i] < 0 then\n            if max_neg < lst[i] then\n                max_neg = lst[i]\n            end\n        elseif lst[i] > 0 then\n            if min_pos > lst[i] then\n                min_pos = lst[i]\n            end\n        end\n    end\n    if max_neg > 0 then\n        tbl[1] = max_neg\n    elseif min_pos > 0 then\n        tbl[1] = min_pos\n    end\n    if max_neg > 0 and min_pos > 0 then\n        tbl[2] = min_pos\n    end\n    return tbl\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        elseif v > 0 then\n            tbl[i] = v\n        end\n    end\n    return tbl\nend",
    "    local tbl = {}\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            tbl[#tbl+1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl+1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        elseif v > 0 then\n            tbl[i] = v\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (max(tbl), min(tbl))\nend",
    "    local max_neg = -1\n    local min_pos = 1\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            if max_neg < lst[i] then\n                max_neg = lst[i]\n            end\n        elseif lst[i] > 0 then\n            if min_pos > lst[i] then\n                min_pos = lst[i]\n            end\n        end\n    end\n    if max_neg == -1 then\n        return (None, None)\n    else\n        return (max_neg, min_pos)\n    end\nend",
    "    local tbl = {}\n    for i=1,#lst do\n        if lst[i] < 0 then\n            tbl[#tbl+1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local max_neg = -1\n    local min_pos = 1\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            if max_neg < 0 then\n                max_neg = lst[i]\n            else\n                max_neg = max_neg\n        else\n            if min_pos > 0 then\n                min_pos = lst[i]\n            else\n                min_pos = min_pos\n        end\n    end\n    return max_neg, min_pos\nend",
    "    local max_neg = -1\n    local min_pos = 1\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            if v > max_neg then\n                max_neg = v\n            end\n        else\n            if v < min_pos then\n                min_pos = v\n            end\n        end\n    end\n    return (max_neg, min_pos)\nend",
    "    local tbl = {}\n    local max_neg = 0\n    local min_pos = 0\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            if v > max_neg then\n                max_neg = v\n            end\n        else\n            if v < min_pos then\n                min_pos = v\n            end\n        end\n        tbl[i] = v\n    end\n    return (max_neg, min_pos)\nend",
    "    local tbl = {}\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local tbl = {}\n    for i=1,#lst do\n        if lst[i] < 0 then\n            tbl[#tbl+1] = lst[i]\n        end\n    end\n    if #tbl > 0 then\n        tbl[1], tbl[#tbl] = math.maxn(tbl[1], tbl[#tbl]), math.minn(tbl[1], tbl[#tbl])\n    end\n    return tbl\nend",
    "    local max_negative = 0\n    local min_positive = 0\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            if v > max_negative then\n                max_negative = v\n            end\n        else\n            if v < min_positive then\n                min_positive = v\n            end\n        end\n    end\n    return (max_negative, min_positive)\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        elseif v > 0 then\n            tbl[i] = v\n        end\n    end\n    if #tbl > 0 then\n        return tbl[1], tbl[#tbl]\n    else\n        return nil, nil\n    end\nend",
    "    local max, min = -1, 1\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            if v > max then max = v\n        else\n            if v < min then min = v\n        end\n    end\n    return max, min\nend",
    "    local tbl = {}\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        elseif v > 0 then\n            tbl[i] = v\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (max(tbl), min(tbl))\nend",
    "    local tbl = {}\n    for i=1,#lst,2 do\n        if lst[i] < 0 then\n            tbl[#tbl+1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl+1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local tbl = {}\n    for i=1,#lst,2 do\n        if lst[i] < 0 then\n            tbl[#tbl+1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl+1] = lst[i]\n        end\n    end\n    if #tbl > 0 then\n        return tbl[1], tbl[#tbl]\n    else\n        return nil, nil\n    end\nend",
    "    local tbl = {}\n    local max_neg = 0\n    local min_pos = math.inf\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            if v > max_neg then\n                max_neg = v\n            end\n        else\n            if v < min_pos then\n                min_pos = v\n            end\n        end\n        tbl[i] = v\n    end\n    return (max_neg, min_pos)\nend",
    "    local tbl = {}\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local tbl = {}\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n    end\n    if #tbl > 0 then\n        return tbl[1], tbl[#tbl]\n    else\n        return nil, nil\n    end\nend",
    "    local tbl = {}\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local tbl = {}\n    for i = 1, #lst, 2 do\n        if lst[i] > 0 then\n            tbl[#tbl+1] = lst[i]\n        elseif lst[i] < 0 then\n            tbl[#tbl+1] = -lst[i]\n        end\n    end\n    if #tbl > 0 then\n        return tbl[1], tbl[#tbl]\n    else\n        return nil, nil\n    end\nend",
    "    local res = {0, 0}\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            if res[1] < 0 then\n                res[1] = lst[i]\n            else\n                res[0] = lst[i]\n        elseif lst[i] > 0 then\n            if res[0] > 0 then\n                res[0] = lst[i]\n            else\n                res[1] = lst[i]\n        end\n    end\n    return res\nend",
    "    local max, min = math.min, math.max\n    local result = {}\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            if max(lst[i], -lst[i]) > max(result[1], result[2]) then\n                result[1], result[2] = lst[i], -lst[i]\n            end\n        elseif lst[i] > 0 then\n            if min(lst[i], -lst[i]) < min(result[1], result[2]) then\n                result[1], result[2] = lst[i], -lst[i]\n            end\n        end\n    end\n    return result[1], result[2]\nend",
    "    local result = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            if result[1] ~= nil then\n                result[1] = v\n            else\n                result[1] = v\n            end\n        else\n            if result[2] ~= nil then\n                result[2] = v\n            else\n                result[2] = v\n            end\n        end\n    end\n    return result\nend",
    "    local tbl = {}\n    local max_neg = 0\n    local min_pos = 0\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            if v > max_neg then\n                max_neg = v\n            end\n        else\n            if v < min_pos then\n                min_pos = v\n            end\n        end\n        tbl[i] = v\n    end\n    return (max_neg, min_pos)\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        elseif v > 0 then\n            tbl[i] = v\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    else\n        return (max(tbl), min(tbl))\n    end\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        elseif v > 0 then\n            tbl[i] = v\n        end\n    end\n    if #tbl > 0 then\n        return tbl[1], tbl[#tbl]\n    else\n        return nil, nil\n    end\nend",
    "    local tbl = {}\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n        if lst[i] > 0 then\n            tbl[#tbl + 1] = lst[i]\n        end\n    end\n    if #tbl == 0 then\n        return (None, None)\n    end\n    return (tbl[1], tbl[#tbl])\nend",
    "    local tbl = {}\n    local max_neg = 0\n    local min_pos = 0\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            if v > max_neg then\n                max_neg = v\n            end\n        else\n            if v < min_pos then\n                min_pos = v\n            end\n        end\n        tbl[i] = v\n    end\n    return (max_neg, min_pos)\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        elseif v > 0 then\n            tbl[i] = v\n        end\n    end\n    if #tbl > 0 then\n        return tbl[1], tbl[#tbl]\n    else\n        return nil, nil\n    end\nend",
    "    local res = {0, 0}\n    for i = 1, #lst, 2 do\n        if lst[i] < 0 then\n            if res[1] < 0 then\n                res[1] = lst[i]\n            else\n                res[0] = lst[i]\n        else\n            if res[0] > 0 then\n                res[0] = lst[i]\n            else\n                res[1] = lst[i]\n        end\n    end\n    return res\nend",
    "    local tbl = {}\n    for i, v in ipairs(lst) do\n        if v < 0 then\n            tbl[i] = v\n        end\n    end\n    if #tbl > 0 then\n        return tbl[1], tbl[#tbl]\n    else\n        return nil, nil\n    end\nend"
  ],
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ]
}