name: HumanEval_72_will_it_fly
language: lua
prompt: "-- Write a function that returns true if the object q will fly, and false\
  \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
  \ and the sum of its elements is less than or equal the maximum possible weight\
  \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less than\
  \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly([3, 2, 3],\
  \ 1)\n-- False\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
  \ weight.\n-- >>> will_it_fly([3, 2, 3], 9)\n-- True\n-- # 3+2+3 is less than the\
  \ maximum possible weight, and it's balanced.\n-- >>> will_it_fly([3], 5)\n-- True\n\
  -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
  \ will_it_fly(q, w)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
  \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
  \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
  \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n    lu.assertEquals(candidate({5},\
  \ 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local function is_balanced(q)\n        local i, j, sum = 1, 1,\
    \ 0\n        for i = 1, #q do\n            sum = sum + q[i]\n            if sum\
    \ > w then\n                return false\n            elseif sum < 0 then\n  \
    \              return false\n            else\n                sum = sum - q[j]\n\
    \                j = j + 1\n            end\n        end\n        return true\n\
    \    end\n    return is_balanced(q)\nend", "    local max_weight = w\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ > max_weight then\n        return false\n    end\n    return true\nend", " \
    \   local max = math.pow(10, w)\n    local sum = 0\n    for i = 1, #q do\n   \
    \     sum = sum + q[i]\n    end\n    return sum <= max and sum == sum[1, #q]\n\
    end", "    local max = math.pow(10, w)\n    local sum = 0\n    for i = 1, #q do\n\
    \        sum = sum + q[i]\n    end\n    if sum <= max then\n        return true\n\
    \    else\n        return false\n    end\nend", "    local max = math.pow(10,\
    \ w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n\
    \    return sum <= max and sum % 2 == 0\nend", "    local max = math.pow(10, w)\n\
    \    for i = 1, #q do\n        if q[i] > max then\n            return false\n\
    \        end\n    end\n    return true\nend", "    local max = math.pow(10, w)\n\
    \    local sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n\
    \    return sum <= max and sum == sum:sub(1, #q)\nend", "    local max = math.pow(10,\
    \ w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n\
    \    return sum <= max and sum == sum[1, #q]\nend", "    local max = math.pow(10,\
    \ w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n\
    \    return sum <= max and sum == sum[1, #q]\nend", "    local i, j, sum = 1,\
    \ 1, 0\n    for i = 1, #q do\n        sum = sum + q[i]\n        j = i\n      \
    \  while j > 0 and q[j] == q[j-1] and sum <= w do\n            sum = sum + q[j]\n\
    \            j = j - 1\n        if sum > w then\n            return false\n  \
    \      elseif sum < w then\n            return true\n        end\n    end\n  \
    \  return true\nend", "    local max = math.pow(10, w)\n    for i = 1, #q do\n\
    \        if q[i] > max then\n            return false\n        end\n    end\n\
    \    return true\nend", "    local max_weight = math.pow(10, w)\n    local sum\
    \ = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    return sum\
    \ <= max_weight and sum == sum:sub(1, #q)\nend", "    local max = math.pow(10,\
    \ w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n\
    \    return sum <= max and sum == sum:sub(1, #q)\nend", "    local max = math.pow(10,\
    \ w)\n    local sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n\
    \    if sum <= max then\n        return true\n    end\n    return false\nend",
  "    local max = math.pow(10, w)\n    local sum = 0\n    for i = 1, #q do\n    \
    \    sum = sum + q[i]\n    end\n    return sum <= max and sum == sum:sub(1, #q)\n\
    end", "    local max = math.pow(10, w)\n    local sum = 0\n    for i = 1, #q do\n\
    \        sum = sum + q[i]\n    end\n    return sum <= max and sum == sum:sub(1,\
    \ #q)\nend", "    local max = math.pow(10, w)\n    local sum = 0\n    for i =\
    \ 1, #q do\n        sum = sum + q[i]\n    end\n    return sum <= max and sum ==\
    \ sum:sub(1, #q)\nend", "    local max = math.pow(10, w)\n    local sum = 0\n\
    \    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    return sum <= max\
    \ and sum == sum[1, #q]\nend", "    local function is_balanced(q)\n        local\
    \ i, j, sum = 1, 1, 0\n        for i = 1, #q do\n            sum = sum + q[i]\n\
    \            if sum > w then\n                return false\n            elseif\
    \ sum < 0 then\n                return false\n            else\n             \
    \   sum = sum + q[j]\n                j = j + 1\n                if j > i then\n\
    \                    j = 1\n                end\n            end\n        end\n\
    \        return true\n    end\n    return is_balanced(q)\nend", "    local max\
    \ = math.pow(10, w)\n    for i=1, #q do\n        if q[i] > max then\n        \
    \    return false\n        end\n    end\n    return true\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
