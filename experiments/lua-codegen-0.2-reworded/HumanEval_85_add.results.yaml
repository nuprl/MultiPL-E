language: lua
name: HumanEval_85_add
results:
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function\
    \ add(lst)\n    local i, j, sum = 1, 1, 0\n    for i = 2, #lst, 2 do\n       \
    \ sum = sum + lst[i]\n        j = i + 1\n        while j < #lst and lst[j] % 2\
    \ == 0 do\n            sum = sum + lst[j]\n            j = j + 1\n        if j\
    \ < #lst then\n            sum = sum + lst[j]\n            j = j + 1\n       \
    \ end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp51hujqsc.lua:30: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1661938073
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function\
    \ add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum =\
    \ sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1661938073
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function\
    \ add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum =\
    \ sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1661938073
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function\
    \ add(lst)\n    local i, j, k, sum\n    for i = 1, #lst, 2 do\n        sum = 0\n\
    \        for j = i, #lst, 2 do\n            sum = sum + lst[j]\n        end\n\
    \        if sum % 2 == 0 then\n            lst[i] = sum\n        end\n    end\n\
    \    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_vu6cawt.lua:22:\
    \ expected: 88, actual: {4, 88}\nstack traceback:\n\t/tmp/tmp_vu6cawt.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661938073
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function\
    \ add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum =\
    \ sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1661938073
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function\
    \ add(lst)\n    local i, j, sum = 1, 1, 0\n    for i = 1, #lst, 2 do\n       \
    \ sum = sum + lst[i]\n        if i % 2 == 0 then\n            lst[j] = sum\n \
    \           j = j + 1\n            sum = 0\n        end\n    end\n    return lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwaf8pyze.lua:21:\
    \ expected: 88, actual: {4, 88}\nstack traceback:\n\t/tmp/tmpwaf8pyze.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661938073
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function\
    \ add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i]\
    \ + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n     \
    \   end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19:\
    \ expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661938073
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function\
    \ add(lst)\n    local i, j, sum = 1, 1, 0\n    for i = 1, #lst, 2 do\n       \
    \ sum = sum + lst[i]\n        if i % 2 == 0 then\n            lst[j] = sum\n \
    \           j = j + 1\n            sum = 0\n        end\n    end\n    return lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwaf8pyze.lua:21:\
    \ expected: 88, actual: {4, 88}\nstack traceback:\n\t/tmp/tmpwaf8pyze.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661938073
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function\
    \ add(lst)\n    local i, j, sum = 1, 1, 0\n    for i = 2, #lst, 2 do\n       \
    \ sum = sum + lst[i]\n        j = i + 1\n        while j < #lst and lst[j] % 2\
    \ == 0 do\n            sum = sum + lst[j]\n            j = j + 1\n        if j\
    \ < #lst then\n            sum = sum + lst[j]\n            j = j + 1\n       \
    \ end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp51hujqsc.lua:30: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1661938073
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function\
    \ add(lst)\n    local i, sum = 1, 0\n    for i = 2, #lst, 2 do\n        sum =\
    \ sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65kb3e_l.lua:17:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp65kb3e_l.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1661938073
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function\
    \ add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i]\
    \ + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n     \
    \   end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19:\
    \ expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661938073
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function\
    \ add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i]\
    \ + lst[i+1]\n        lst[i+1] = sum\n    end\n    return lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt87ktmmt.lua:17:\
    \ expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpt87ktmmt.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661938073
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function\
    \ add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i]\
    \ + lst[i+1]\n        if sum % 2 == 0 then\n            lst[i+1] = sum\n     \
    \   end\n    end\n    return lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgrl0ahf.lua:19:\
    \ expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpzgrl0ahf.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661938073
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function\
    \ add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum =\
    \ sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1661938073
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function\
    \ add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum =\
    \ sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1661938073
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function\
    \ add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum =\
    \ sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1661938073
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function\
    \ add(lst)\n    local i, sum = 1, 0\n    for i = 2, #lst, 2 do\n        sum =\
    \ sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp65kb3e_l.lua:17:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp65kb3e_l.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1661938073
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function\
    \ add(lst)\n    local i, j\n    for i = 1, #lst, 2 do\n        if lst[i] % 2 ==\
    \ 0 then\n            lst[i+1] = lst[i]\n        end\n    end\n    return lst\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8u0m1urs.lua:18:\
    \ expected: 88, actual: {4, 4}\nstack traceback:\n\t/tmp/tmp8u0m1urs.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1661938073
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function\
    \ add(lst)\n    local i, j, sum\n    for i = 1, #lst, 2 do\n        sum = lst[i]\
    \ + lst[i+1]\n        lst[i+1] = sum\n    end\n    return lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt87ktmmt.lua:17:\
    \ expected: 88, actual: {4, 92}\nstack traceback:\n\t/tmp/tmpt87ktmmt.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1661938073
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add([4, 2, 6, 7])\n-- 2\nlocal function\
    \ add(lst)\n    local i, sum = 1, 0\n    for i = 1, #lst, 2 do\n        sum =\
    \ sum + lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08b13_49.lua:16:\
    \ expected: 88, actual: 4\nstack traceback:\n\t/tmp/tmp08b13_49.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1661938073
