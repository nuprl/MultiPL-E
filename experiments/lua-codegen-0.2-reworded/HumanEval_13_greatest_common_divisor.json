{
  "name": "HumanEval_13_greatest_common_divisor",
  "language": "lua",
  "prompt": "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3, 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a, b)\n",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())",
  "completions": [
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    return math.floor(a / b)\nend",
    "    local gcd = math.gcd(a, b)\n    return gcd\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    return math.floor(a / b)\nend",
    "    if a == 0 then return b\n    if b == 0 then return a\n    return greatest_common_divisor(b, a % b)\nend",
    "    local gcd = math.gcd(a, b)\n    return gcd\nend",
    "    if a == 0 then return b\n    elseif b == 0 then return a\n    else return greatest_common_divisor(b, a % b)\nend\n\"\"\"",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then return greatest_common_divisor(b, a)\n    if b == 0 then return a\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    return math.floor(math.sqrt(a * a - b * b))\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then return greatest_common_divisor(b, a)\n    if b == 0 then return a\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then return greatest_common_divisor(b, a)\n    if b == 0 then return a\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    return math.floor(math.sqrt(a * a - b * b))\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    return math.floor(a / b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a == 0 then return b\n    elseif b == 0 then return a\n    else return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then return greatest_common_divisor(b, a)\n    if b == 0 then return a\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    return math.floor(math.sqrt(a * a - b * b))\nend",
    "    if a < b then return greatest_common_divisor(b, a)\n    if b == 0 then return a\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    return math.floor(math.sqrt(a * a - b * b))\nend",
    "    if a == 0 or b == 0 then\n        return a or b\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a == 0 then return b\n    elseif b == 0 then return a\n    else return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    return math.floor(math.sqrt(a * a - b * b))\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    return math.floor(math.sqrt(a * a - b * b))\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    return math.floor(math.sqrt(a * a - b * b))\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a == 0 then return b\n    elseif b == 0 then return a\n    else return greatest_common_divisor(b, a % b)\nend",
    "    local gcd = math.gcd(a, b)\n    return gcd\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a == 0 then return b\n    elseif b == 0 then return a\n    else return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then return greatest_common_divisor(b, a)\n    if b == 0 then return a\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then return greatest_common_divisor(b, a)\n    if b == 0 then return a\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    return math.floor(math.sqrt(a * a - b * b))\nend",
    "    local gcd = math.gcd(a, b)\n    return gcd\nend",
    "    if a < b then return greatest_common_divisor(b, a)\n    if b == 0 then return a\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then return greatest_common_divisor(b, a)\n    if b == 0 then return a\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then return greatest_common_divisor(b, a)\n    if b == 0 then return a\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a == 0 then return b\n    elseif b == 0 then return a\n    else return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    return math.floor(math.sqrt(a * a - b * b))\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    return math.floor(math.sqrt(a * a + b * b))\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    return math.floor(math.sqrt(a * a - b * b))\nend",
    "    if a < b then return greatest_common_divisor(b, a)\n    if b == 0 then return a\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then return greatest_common_divisor(b, a)\n    if b == 0 then return a\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then return greatest_common_divisor(b, a)\n    if b == 0 then return a\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    return math.floor(math.sqrt(a * a + b * b))\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a == 0 then return b\n    elseif b == 0 then return a\n    else return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    return math.floor(math.sqrt(a * a - b * b))\nend",
    "    if a < b then return greatest_common_divisor(b, a)\n    if b == 0 then return a\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a == 0 then return b\n    elseif b == 0 then return a\n    else return greatest_common_divisor(b, a % b)\nend\n\"\"\"",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    return math.floor(math.sqrt(a * a - b * b))\nend",
    "    if a == 0 then return b\n    if b == 0 then return a\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then return greatest_common_divisor(b, a)\n    if b == 0 then return a\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    return math.floor(math.sqrt(a * a - b * b))\nend",
    "    if a < b then return greatest_common_divisor(b, a)\n    if b == 0 then return a\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a == 0 then return b\n    if b == 0 then return a\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a == 0 then return b\n    if b == 0 then return a\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a == 0 then return b\n    elseif b == 0 then return a\n    else return greatest_common_divisor(b, a % b)\nend\n\"\"\"",
    "    if a < b then return greatest_common_divisor(b, a)\n    if b == 0 then return a\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a == 0 then return b\n    elseif b == 0 then return a\n    else return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    return math.floor(a / b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    return math.floor(a / b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    return math.floor(a / b)\nend",
    "    if a < b then return greatest_common_divisor(b, a)\n    if b == 0 then return a\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    return math.floor(math.sqrt(a * a - b * b))\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then return greatest_common_divisor(b, a)\n    if b == 0 then return a\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    return math.floor(a / b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    return math.floor(math.sqrt(a * a + b * b))\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    return math.floor(math.sqrt(a * a - b * b))\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    return math.floor(math.sqrt(a * a - b * b))\nend",
    "    if a == 0 then return b\n    if b == 0 then return a\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a == 0 then return b\n    elseif b == 0 then return a\n    else return greatest_common_divisor(b, a % b)\nend",
    "    if a == 0 then return b\n    elseif b == 0 then return a\n    else return greatest_common_divisor(b, a % b)\nend\n\"\"\"",
    "    if a == 0 then return b\n    if b == 0 then return a\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    return math.floor(math.sqrt(a * a - b * b))\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a == 0 then return b\n    if b == 0 then return a\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    return math.floor(math.sqrt(a * a - b * b))\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a == 0 then return b\n    elseif b == 0 then return a\n    else return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then return greatest_common_divisor(b, a)\n    if b == 0 then return a\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then return greatest_common_divisor(b, a)\n    if b == 0 then return a\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    return math.floor(math.sqrt(a * a - b * b))\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then return greatest_common_divisor(b, a)\n    if b == 0 then return a\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    return math.floor(math.sqrt(a * a - b * b))\nend",
    "    if a == 0 then return b\n    if b == 0 then return a\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then return greatest_common_divisor(b, a)\n    if b == 0 then return a\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    return math.floor(math.sqrt(a * a - b * b))\nend",
    "    if a < b then return greatest_common_divisor(b, a)\n    if b == 0 then return a\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then return greatest_common_divisor(b, a)\n    if b == 0 then return a\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    return math.floor(math.sqrt(a * a + b * b))\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    return math.floor(math.sqrt(a * a - b * b))\nend",
    "    if a == 0 then return b\n    elseif b == 0 then return a\n    else return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then return greatest_common_divisor(b, a)\n    if b == 0 then return a\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then return greatest_common_divisor(b, a)\n    if b == 0 then return a\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    return math.gcd(a, b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    return math.floor(math.sqrt(a * a + b * b))\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a == 0 then return b\n    if b == 0 then return a\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a == 0 then return b\n    elseif b == 0 then return a\n    else return greatest_common_divisor(b, a % b)\nend\n\"\"\"",
    "    if a == 0 then return b\n    elseif b == 0 then return a\n    else return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    return math.floor(math.sqrt(a * a - b * b))\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    return math.floor(math.sqrt(a * a - b * b))\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a == 0 or b == 0 then\n        return a or b\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    return math.floor(math.sqrt(a * a - b * b))\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a == 0 then return b\n    elseif b == 0 then return a\n    else return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then return greatest_common_divisor(b, a)\n    if b == 0 then return a\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    return math.floor(math.sqrt(a * a - b * b))\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a == 0 then return b\n    elseif b == 0 then return a\n    else return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    return math.floor(math.sqrt(a * a - b * b))\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a == 0 then return b\n    elseif b == 0 then return a\n    else return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    return math.floor(math.sqrt(a * a - b * b))\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a == 0 or b == 0 then\n        return 0\n    end\n    return math.floor(math.sqrt(a * b))\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a == 0 then return b\n    elseif b == 0 then return a\n    else return greatest_common_divisor(b, a % b)\nend\n\"\"\"",
    "    if a == 0 then return b\n    elseif b == 0 then return a\n    else return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    return math.floor(math.sqrt(a * a - b * b))\nend",
    "    if a < b then\n        return greatest_common_divisor(b, a)\n    end\n    if b == 0 then\n        return a\n    end\n    return greatest_common_divisor(b, a % b)\nend",
    "    if a == 0 then return b\n    elseif b == 0 then return a\n    else return greatest_common_divisor(b, a % b)\nend",
    "    local gcd = math.gcd(a, b)\n    return gcd\nend"
  ],
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ]
}