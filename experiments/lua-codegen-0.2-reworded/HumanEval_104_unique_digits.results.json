{
  "language": "lua",
  "name": "HumanEval_104_unique_digits",
  "results": [
    {
      "exit_code": 1,
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n            return nil\n        else\n            t[x[i]] = 1\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprv2qt0sv.lua:24: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmprv2qt0sv.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907414
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpfa5hsq7b.lua:12: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907414
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpfa5hsq7b.lua:12: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907414
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i, v in ipairs(x) do\n        if v % 2 == 0 then\n            return\n        end\n        table.insert(t, v)\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx5cwop2f.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpx5cwop2f.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907414
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpfa5hsq7b.lua:12: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907414
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n            return nil\n        end\n        t[x[i]] = 1\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_g0484h.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpw_g0484h.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907414
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp2prbownl.lua:12: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907414
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp2prbownl.lua:12: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907414
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n            return nil\n        end\n        t[x[i]] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpebv3zay_.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpebv3zay_.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907414
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpfa5hsq7b.lua:12: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907414
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpfa5hsq7b.lua:12: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907414
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i, v in ipairs(x) do\n        if v % 2 == 0 then\n            return\n        else\n            t[v] = true\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29hr5x4r.lua:24: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmp29hr5x4r.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907414
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpfa5hsq7b.lua:12: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907414
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n            return nil\n        end\n        t[x[i]] = 1\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_g0484h.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpw_g0484h.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907414
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i, v in ipairs(x) do\n        if v % 2 == 0 then\n            return\n        end\n        t[v] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpod2hei0i.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpod2hei0i.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907414
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpfa5hsq7b.lua:12: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907414
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp2prbownl.lua:12: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907414
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp2prbownl.lua:12: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907414
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp2prbownl.lua:12: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907414
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp2prbownl.lua:12: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907414
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n            t[x[i]] = nil\n        end\n    end\n    for i = 1, #x do\n        if t[x[i]] ~= nil then\n            t[x[i]] = nil\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_9gxhpk_.lua:21: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmp_9gxhpk_.lua:21: in local 'candidate'\n\t/tmp/tmp_9gxhpk_.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n            return nil\n        else\n            t[x[i]] = true\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk_qkr3jh.lua:24: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpk_qkr3jh.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        end\n        t[x[i]] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprspfrpnz.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmprspfrpnz.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            t[x[i]] = nil\n        end\n    end\n    for i=1,#x do\n        if t[x[i]] ~= nil then\n            t[x[i]] = nil\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3woqieb6.lua:21: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmp3woqieb6.lua:21: in local 'candidate'\n\t/tmp/tmp3woqieb6.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return nil\n        end\n        t[x[i]] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu26vbraz.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpu26vbraz.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n            t[x[i]] = nil\n        end\n    end\n    for i = 1, #x do\n        if t[x[i]] ~= nil then\n            t[x[i]] = nil\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_9gxhpk_.lua:21: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmp_9gxhpk_.lua:21: in local 'candidate'\n\t/tmp/tmp_9gxhpk_.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        end\n        t[x[i]] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprspfrpnz.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmprspfrpnz.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n            return\n        else\n            t[x[i]] = true\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcyj75oma.lua:24: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpcyj75oma.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        else\n            t[x[i]] = 1\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo2ddec57.lua:24: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpo2ddec57.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n            return nil\n        end\n        t[x[i]] = 1\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_g0484h.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpw_g0484h.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907414
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n            return nil\n        else\n            t[x[i]] = true\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzjackvi3.lua:24: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpzjackvi3.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return nil\n        end\n        t[x[i]] = 1\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2pobss3o.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmp2pobss3o.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n            return nil\n        end\n        t[x[i]] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpebv3zay_.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpebv3zay_.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907414
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return nil\n        end\n        t[x[i]] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu26vbraz.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpu26vbraz.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        else\n            t[x[i]] = true\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd3kv33od.lua:24: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpd3kv33od.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return nil\n        end\n        t[x[i]] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu26vbraz.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpu26vbraz.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            t[x[i]] = nil\n        end\n    end\n    for i=1,#x do\n        if t[x[i]] ~= nil then\n            t[x[i]] = nil\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3woqieb6.lua:21: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmp3woqieb6.lua:21: in local 'candidate'\n\t/tmp/tmp3woqieb6.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            t[x[i]] = nil\n        end\n    end\n    for i=1,#x do\n        if t[x[i]] ~= nil then\n            t[x[i]] = nil\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3woqieb6.lua:21: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmp3woqieb6.lua:21: in local 'candidate'\n\t/tmp/tmp3woqieb6.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            t[x[i]] = nil\n        end\n    end\n    for i=1,#x do\n        if t[x[i]] ~= nil then\n            t[x[i]] = nil\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3woqieb6.lua:21: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmp3woqieb6.lua:21: in local 'candidate'\n\t/tmp/tmp3woqieb6.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        end\n        t[x[i]] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprspfrpnz.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmprspfrpnz.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i] % 2 == 0 then\n            return nil\n        end\n        t[x[i]] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpds4d2k19.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpds4d2k19.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n            return nil\n        else\n            t[x[i]] = true\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzjackvi3.lua:24: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpzjackvi3.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        else\n            t[x[i]] = true\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzigjfmcj.lua:24: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpzigjfmcj.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        end\n        t[x[i]] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprspfrpnz.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmprspfrpnz.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        end\n        t[x[i]] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprspfrpnz.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmprspfrpnz.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n            return nil\n        end\n        t[x[i]] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpebv3zay_.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpebv3zay_.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907414
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            t[x[i]] = nil\n        end\n    end\n    for i=1,#x do\n        if t[x[i]] == nil then\n            t[x[i]] = x[i]\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz3xwekh5.lua:27: expected: {1, 15, 33}\nactual: {1, 15=15, 33=33, 1422=1422}\nstack traceback:\n\t/tmp/tmpz3xwekh5.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            t[x[i]] = nil\n        end\n    end\n    for i=1,#x do\n        if t[x[i]] == nil then\n            t[x[i]] = x[i]\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplplnp34t.lua:21: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmplplnp34t.lua:21: in local 'candidate'\n\t/tmp/tmplplnp34t.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i, v in ipairs(x) do\n        if v % 2 == 0 then\n            table.insert(t, v)\n        end\n    end\n    return table.sort(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1s5ag8z0.lua:22: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmp1s5ag8z0.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            t[x[i]] = nil\n        end\n    end\n    for i=1,#x do\n        if t[x[i]] == nil then\n            t[x[i]] = x[i]\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplplnp34t.lua:21: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmplplnp34t.lua:21: in local 'candidate'\n\t/tmp/tmplplnp34t.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return nil\n        end\n        t[x[i]] = 1\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2pobss3o.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmp2pobss3o.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        else\n            t[x[i]] = 1\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo2ddec57.lua:24: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpo2ddec57.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        else\n            t[x[i]] = true\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzigjfmcj.lua:24: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpzigjfmcj.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n            return\n        end\n        t[x[i]] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqs5d6i3h.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpqs5d6i3h.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n            t[#t + 1] = x[i]\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzdhlcl1s.lua:22: expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpzdhlcl1s.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        end\n        t[x[i]] = 1\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphbdu25s6.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmphbdu25s6.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            t[x[i]] = nil\n        end\n    end\n    for i=1,#x do\n        t[x[i]] = nil\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe3ewkvdr.lua:19: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpe3ewkvdr.lua:19: in local 'candidate'\n\t/tmp/tmpe3ewkvdr.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        else\n            t[x[i]] = true\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd3kv33od.lua:24: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpd3kv33od.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i] % 2 == 0 then\n            return\n        end\n        t[x[i]] = 1\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeyf_uu27.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpeyf_uu27.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        end\n        t[x[i]] = 1\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1xux8y7p.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmp1xux8y7p.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        else\n            t[x[i]] = true\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd3kv33od.lua:24: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpd3kv33od.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n            t[x[i]] = nil\n        end\n    end\n    for i = 1, #x do\n        if t[x[i]] ~= nil then\n            t[x[i]] = nil\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_9gxhpk_.lua:21: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmp_9gxhpk_.lua:21: in local 'candidate'\n\t/tmp/tmp_9gxhpk_.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i] % 2 == 0 then\n            t[x[i]] = nil\n        end\n    end\n    for i=1,#x do\n        if t[x[i]] == nil then\n            t[x[i]] = x[i]\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd_hyorin.lua:21: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpd_hyorin.lua:21: in local 'candidate'\n\t/tmp/tmpd_hyorin.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        end\n        t[x[i]] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprspfrpnz.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmprspfrpnz.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        else\n            t[x[i]] = 1\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo2ddec57.lua:24: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpo2ddec57.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return nil\n        end\n        t[x[i]] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu26vbraz.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpu26vbraz.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n            t[x[i]] = nil\n        end\n    end\n    for i = 1, #x do\n        if t[x[i]] ~= nil then\n            t[x[i]] = nil\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_9gxhpk_.lua:21: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmp_9gxhpk_.lua:21: in local 'candidate'\n\t/tmp/tmp_9gxhpk_.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n            return\n        end\n        t[x[i]] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqs5d6i3h.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpqs5d6i3h.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        else\n            t[x[i]] = 1\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo2ddec57.lua:24: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpo2ddec57.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        else\n            t[x[i]] = true\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd3kv33od.lua:24: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpd3kv33od.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            t[x[i]] = nil\n        end\n    end\n    for i=1,#x do\n        if t[x[i]] == nil then\n            t[x[i]] = x[i]\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz3xwekh5.lua:27: expected: {1, 15, 33}\nactual: {1, 15=15, 33=33, 1422=1422}\nstack traceback:\n\t/tmp/tmpz3xwekh5.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        end\n        t[x[i]] = 1\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1xux8y7p.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmp1xux8y7p.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return nil\n        end\n        t[x[i]] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu26vbraz.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpu26vbraz.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            t[x[i]] = nil\n        end\n    end\n    for i=1,#x do\n        if t[x[i]] ~= nil then\n            t[x[i]] = nil\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3woqieb6.lua:21: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmp3woqieb6.lua:21: in local 'candidate'\n\t/tmp/tmp3woqieb6.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        end\n        t[x[i]] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprspfrpnz.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmprspfrpnz.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        else\n            t[x[i]] = true\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd3kv33od.lua:24: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpd3kv33od.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n            return nil\n        end\n        t[x[i]] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpebv3zay_.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpebv3zay_.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907414
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            t[x[i]] = nil\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpejqftv5j.lua:22: expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpejqftv5j.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i, v in ipairs(x) do\n        if v % 2 == 0 then\n            t[v] = nil\n        end\n    end\n    for i, v in ipairs(x) do\n        if t[v] == nil then\n            t[v] = i\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9rme37k1.lua:21: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmp9rme37k1.lua:21: in local 'candidate'\n\t/tmp/tmp9rme37k1.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        end\n        t[x[i]] = 1\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1xux8y7p.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmp1xux8y7p.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n            return nil\n        end\n        t[x[i]] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpebv3zay_.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpebv3zay_.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907414
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return nil\n        else\n            t[x[i]] = true\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkwu_m4l9.lua:24: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpkwu_m4l9.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n            return\n        end\n        t[x[i]] = 1\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7qad6rbx.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmp7qad6rbx.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n            return nil\n        else\n            t[x[i]] = true\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzjackvi3.lua:24: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpzjackvi3.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i] % 2 == 0 then\n            return nil\n        end\n        t[x[i]] = 1\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb_saukkr.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpb_saukkr.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            t[x[i]] = nil\n        end\n    end\n    for i=1,#x do\n        if t[x[i]] ~= nil then\n            t[x[i]] = nil\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3woqieb6.lua:21: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmp3woqieb6.lua:21: in local 'candidate'\n\t/tmp/tmp3woqieb6.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        else\n            t[x[i]] = true\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd3kv33od.lua:24: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpd3kv33od.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            t[x[i]] = nil\n        end\n    end\n    for i=1,#x do\n        if t[x[i]] ~= nil then\n            t[x[i]] = nil\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3woqieb6.lua:21: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmp3woqieb6.lua:21: in local 'candidate'\n\t/tmp/tmp3woqieb6.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return nil\n        else\n            t[x[i]] = true\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkwu_m4l9.lua:24: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpkwu_m4l9.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n            t[x[i]] = nil\n        end\n    end\n    for i = 1, #x do\n        if t[x[i]] ~= nil then\n            t[x[i]] = nil\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_9gxhpk_.lua:21: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmp_9gxhpk_.lua:21: in local 'candidate'\n\t/tmp/tmp_9gxhpk_.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n            t[x[i]] = nil\n        end\n    end\n    for i = 1, #x do\n        if t[x[i]] ~= nil then\n            t[x[i]] = nil\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_9gxhpk_.lua:21: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmp_9gxhpk_.lua:21: in local 'candidate'\n\t/tmp/tmp_9gxhpk_.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        else\n            t[x[i]] = true\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd3kv33od.lua:24: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpd3kv33od.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local result = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n            return\n        end\n        result[x[i]] = true\n    end\n    return result.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo0xkfk3e.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpo0xkfk3e.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i, v in ipairs(x) do\n        if v % 2 == 0 then\n            t[v] = nil\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2rdd26e_.lua:22: expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmp2rdd26e_.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        end\n        t[x[i]] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprspfrpnz.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmprspfrpnz.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        end\n        t[x[i]] = 1\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1xux8y7p.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmp1xux8y7p.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            t[x[i]] = nil\n        end\n    end\n    for i=1,#x do\n        if t[x[i]] ~= nil then\n            t[x[i]] = nil\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3woqieb6.lua:21: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmp3woqieb6.lua:21: in local 'candidate'\n\t/tmp/tmp3woqieb6.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i] % 2 == 0 then\n            return\n        end\n        t[x[i]] = 1\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeyf_uu27.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpeyf_uu27.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n            t[x[i]] = nil\n        end\n    end\n    for i = 1, #x do\n        if t[x[i]] ~= nil then\n            t[x[i]] = nil\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_9gxhpk_.lua:21: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmp_9gxhpk_.lua:21: in local 'candidate'\n\t/tmp/tmp_9gxhpk_.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i, v in ipairs(x) do\n        if v % 2 == 0 then\n            table.insert(t, v)\n        end\n    end\n    return table.sort(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1s5ag8z0.lua:22: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmp1s5ag8z0.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            t[x[i]] = nil\n        end\n    end\n    for i=1,#x do\n        if t[x[i]] == nil then\n            t[x[i]] = x[i]\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplplnp34t.lua:21: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmplplnp34t.lua:21: in local 'candidate'\n\t/tmp/tmplplnp34t.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            t[x[i]] = nil\n        end\n    end\n    for i=1,#x do\n        if t[x[i]] == nil then\n            t[x[i]] = x[i]\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz3xwekh5.lua:27: expected: {1, 15, 33}\nactual: {1, 15=15, 33=33, 1422=1422}\nstack traceback:\n\t/tmp/tmpz3xwekh5.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n            return\n        end\n        t[x[i]] = 1\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7qad6rbx.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmp7qad6rbx.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n            t[x[i]] = true\n        end\n    end\n    for i = 1, #x do\n        if not t[x[i]] then\n            t[x[i]] = true\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplfbjj1h2.lua:21: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmplfbjj1h2.lua:21: in local 'candidate'\n\t/tmp/tmplfbjj1h2.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            t[x[i]] = nil\n        end\n    end\n    for i=1,#x do\n        if t[x[i]] ~= nil then\n            t[x[i]] = nil\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3woqieb6.lua:21: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmp3woqieb6.lua:21: in local 'candidate'\n\t/tmp/tmp3woqieb6.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        end\n        t[x[i]] = 1\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphbdu25s6.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmphbdu25s6.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            t[x[i]] = nil\n        end\n    end\n    for i=1,#x do\n        if t[x[i]] ~= nil then\n            t[x[i]] = nil\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3woqieb6.lua:21: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmp3woqieb6.lua:21: in local 'candidate'\n\t/tmp/tmp3woqieb6.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local result = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n            result[#result + 1] = x[i]\n        end\n    end\n    return table.sort(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3d4a_u4q.lua:22: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmp3d4a_u4q.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            t[x[i]] = nil\n        end\n    end\n    for i=1,#x do\n        if t[x[i]] ~= nil then\n            t[x[i]] = nil\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3woqieb6.lua:21: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmp3woqieb6.lua:21: in local 'candidate'\n\t/tmp/tmp3woqieb6.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        end\n        t[x[i]] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprspfrpnz.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmprspfrpnz.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        else\n            t[x[i]] = true\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzigjfmcj.lua:24: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpzigjfmcj.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n            return nil\n        end\n        t[x[i]] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpebv3zay_.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpebv3zay_.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907414
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i, v in ipairs(x) do\n        if v % 2 == 0 then\n            table.insert(t, v)\n        end\n    end\n    return table.sort(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1s5ag8z0.lua:22: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmp1s5ag8z0.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return nil\n        else\n            t[x[i]] = true\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkwu_m4l9.lua:24: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpkwu_m4l9.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        end\n        t[x[i]] = 1\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1xux8y7p.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmp1xux8y7p.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return nil\n        else\n            t[x[i]] = true\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkwu_m4l9.lua:24: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpkwu_m4l9.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        else\n            t[x[i]] = true\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd3kv33od.lua:24: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpd3kv33od.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n            t[x[i]] = nil\n        end\n    end\n    for i = 1, #x do\n        if t[x[i]] == nil then\n            t[x[i]] = x[i]\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpteilcif7.lua:21: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpteilcif7.lua:21: in local 'candidate'\n\t/tmp/tmpteilcif7.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        end\n        t[x[i]] = 1\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1xux8y7p.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmp1xux8y7p.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return nil\n        end\n        t[x[i]] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu26vbraz.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpu26vbraz.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            t[x[i]] = nil\n        end\n    end\n    for i=1,#x do\n        if t[x[i]] ~= nil then\n            t[x[i]] = nil\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3woqieb6.lua:21: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmp3woqieb6.lua:21: in local 'candidate'\n\t/tmp/tmp3woqieb6.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i] % 2 == 0 then\n            return nil\n        end\n        t[x[i]] = 1\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb_saukkr.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpb_saukkr.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n            return nil\n        else\n            t[x[i]] = true\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzjackvi3.lua:24: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpzjackvi3.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i] % 2 == 0 then\n            return\n        end\n        t[x[i]] = 1\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpue5gv31g.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpue5gv31g.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n            return\n        end\n        t[x[i]] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqs5d6i3h.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpqs5d6i3h.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        else\n            t[x[i]] = true\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzigjfmcj.lua:24: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpzigjfmcj.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            t[x[i]] = nil\n        end\n    end\n    for i=1,#x do\n        if t[x[i]] ~= nil then\n            t[x[i]] = nil\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3woqieb6.lua:21: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmp3woqieb6.lua:21: in local 'candidate'\n\t/tmp/tmp3woqieb6.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return nil\n        end\n        t[x[i]] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu26vbraz.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpu26vbraz.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        else\n            t[x[i]] = true\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzigjfmcj.lua:24: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpzigjfmcj.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n            return\n        end\n        t[x[i]] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqs5d6i3h.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpqs5d6i3h.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        else\n            t[x[i]] = true\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd3kv33od.lua:24: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpd3kv33od.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            t[x[i]] = nil\n        end\n    end\n    for i=1,#x do\n        if t[x[i]] ~= nil then\n            t[x[i]] = nil\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3woqieb6.lua:21: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmp3woqieb6.lua:21: in local 'candidate'\n\t/tmp/tmp3woqieb6.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return nil\n        end\n        t[x[i]] = 1\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2pobss3o.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmp2pobss3o.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return nil\n        end\n        t[x[i]] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu26vbraz.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpu26vbraz.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        else\n            t[x[i]] = true\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd3kv33od.lua:24: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpd3kv33od.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            t[x[i]] = nil\n        end\n    end\n    for i=1,#x do\n        if t[x[i]] == nil then\n            t[x[i]] = x[i]\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplplnp34t.lua:21: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmplplnp34t.lua:21: in local 'candidate'\n\t/tmp/tmplplnp34t.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        end\n        t[x[i]] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprspfrpnz.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmprspfrpnz.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        end\n        t[x[i]] = 1\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphbdu25s6.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmphbdu25s6.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i,v in ipairs(x) do\n        if v % 2 == 0 then\n            t[v] = nil\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvxzvy8sj.lua:22: expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpvxzvy8sj.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        end\n        t[x[i]] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprspfrpnz.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmprspfrpnz.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        else\n            t[x[i]] = true\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd3kv33od.lua:24: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpd3kv33od.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n            return nil\n        else\n            t[x[i]] = true\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzjackvi3.lua:24: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpzjackvi3.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        else\n            t[x[i]] = true\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd3kv33od.lua:24: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpd3kv33od.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return nil\n        else\n            t[x[i]] = true\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkwu_m4l9.lua:24: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpkwu_m4l9.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        else\n            t[x[i]] = true\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd3kv33od.lua:24: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpd3kv33od.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local result = {}\n    for i=1,#x do\n        if x[i] % 2 == 0 then\n            return\n        end\n        result[x[i]] = 1\n    end\n    return result.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd9whq35c.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpd9whq35c.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        else\n            t[x[i]] = true\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzigjfmcj.lua:24: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpzigjfmcj.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return nil\n        end\n        t[x[i]] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu26vbraz.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpu26vbraz.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            t[x[i]] = nil\n        end\n    end\n    for i=1,#x do\n        if t[x[i]] ~= nil then\n            t[x[i]] = nil\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3woqieb6.lua:21: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmp3woqieb6.lua:21: in local 'candidate'\n\t/tmp/tmp3woqieb6.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n            return nil\n        else\n            t[x[i]] = true\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk_qkr3jh.lua:24: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpk_qkr3jh.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        end\n        t[x[i]] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprspfrpnz.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmprspfrpnz.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n            return\n        end\n        t[x[i]] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqs5d6i3h.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpqs5d6i3h.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        end\n        t[x[i]] = 1\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphbdu25s6.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmphbdu25s6.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        end\n        t[x[i]] = 1\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphbdu25s6.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmphbdu25s6.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return nil\n        end\n        t[x[i]] = 1\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2pobss3o.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmp2pobss3o.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        else\n            t[x[i]] = true\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzigjfmcj.lua:24: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpzigjfmcj.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            t[x[i]] = nil\n        end\n    end\n    for i=1,#x do\n        if t[x[i]] ~= nil then\n            t[x[i]] = nil\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3woqieb6.lua:21: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmp3woqieb6.lua:21: in local 'candidate'\n\t/tmp/tmp3woqieb6.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i, v in ipairs(x) do\n        if v % 2 == 0 then\n            table.insert(t, v)\n        end\n    end\n    return table.sort(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1s5ag8z0.lua:22: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmp1s5ag8z0.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n            return\n        end\n        t[x[i]] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqs5d6i3h.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpqs5d6i3h.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        else\n            t[x[i]] = 1\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo2ddec57.lua:24: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpo2ddec57.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        end\n        t[x[i]] = 1\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1xux8y7p.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmp1xux8y7p.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        end\n        t[x[i]] = 1\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1xux8y7p.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmp1xux8y7p.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return nil\n        end\n        t[x[i]] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu26vbraz.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpu26vbraz.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        else\n            t[x[i]] = true\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd3kv33od.lua:24: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpd3kv33od.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n            return\n        end\n        t[x[i]] = 1\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7qad6rbx.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmp7qad6rbx.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return nil\n        end\n        t[x[i]] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu26vbraz.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpu26vbraz.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            t[x[i]] = nil\n        end\n    end\n    for i=1,#x do\n        if t[x[i]] ~= nil then\n            t[x[i]] = nil\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnyrx4iot.lua:27: expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpnyrx4iot.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n            return\n        end\n        t[x[i]] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqs5d6i3h.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpqs5d6i3h.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            t[x[i]] = nil\n        end\n    end\n    for i=1,#x do\n        if t[x[i]] ~= nil then\n            t[x[i]] = nil\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3woqieb6.lua:21: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmp3woqieb6.lua:21: in local 'candidate'\n\t/tmp/tmp3woqieb6.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n            t[x[i]] = true\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe95svfcc.lua:16: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpe95svfcc.lua:16: in local 'candidate'\n\t/tmp/tmpe95svfcc.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        end\n        t[x[i]] = 1\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphbdu25s6.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmphbdu25s6.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i] % 2 == 0 then\n            return nil\n        else\n            t[x[i]] = true\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb_1d2up4.lua:24: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpb_1d2up4.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        end\n        t[x[i]] = 1\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1xux8y7p.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmp1xux8y7p.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i, v in ipairs(x) do\n        if v % 2 == 0 then\n            t[v] = nil\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2rdd26e_.lua:22: expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmp2rdd26e_.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return nil\n        else\n            t[x[i]] = true\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkwu_m4l9.lua:24: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpkwu_m4l9.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        end\n        t[x[i]] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprspfrpnz.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmprspfrpnz.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        end\n        t[x[i]] = 1\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1xux8y7p.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmp1xux8y7p.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n            return nil\n        else\n            t[x[i]] = true\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzjackvi3.lua:24: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpzjackvi3.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i, v in ipairs(x) do\n        if v % 2 == 0 then\n            table.insert(t, v)\n        end\n    end\n    return table.sort(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1s5ag8z0.lua:22: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmp1s5ag8z0.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n            return nil\n        else\n            t[x[i]] = true\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzjackvi3.lua:24: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpzjackvi3.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        end\n        t[x[i]] = 1\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1xux8y7p.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmp1xux8y7p.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local result = {}\n    for i, v in ipairs(x) do\n        if v % 2 == 0 then\n            result[v] = nil\n        end\n    end\n    return table.sort(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsfbqvyse.lua:22: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpsfbqvyse.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i, v in ipairs(x) do\n        if v % 2 == 0 then\n            t[v] = true\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp60pcgy23.lua:22: expected: {1, 15, 33}\nactual: {1422=true}\nstack traceback:\n\t/tmp/tmp60pcgy23.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        else\n            t[x[i]] = true\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd3kv33od.lua:24: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpd3kv33od.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return nil\n        else\n            t[x[i]] = 1\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp71btep87.lua:24: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmp71btep87.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local result = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        end\n        result[x[i]] = true\n    end\n    return result.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa1v4g58_.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpa1v4g58_.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            t[x[i]] = 1\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj9q_zwrr.lua:22: expected: {1, 15, 33}\nactual: {1422=1}\nstack traceback:\n\t/tmp/tmpj9q_zwrr.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            t[x[i]] = nil\n        end\n    end\n    for i=1,#x do\n        if t[x[i]] ~= nil then\n            t[x[i]] = nil\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3woqieb6.lua:21: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmp3woqieb6.lua:21: in local 'candidate'\n\t/tmp/tmp3woqieb6.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        else\n            t[x[i]] = true\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd3kv33od.lua:24: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpd3kv33od.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        end\n        t[x[i]] = 1\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1xux8y7p.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmp1xux8y7p.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return nil\n        end\n        t[x[i]] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu26vbraz.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpu26vbraz.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i, v in ipairs(x) do\n        if v % 2 == 0 then\n            t[v] = true\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp60pcgy23.lua:22: expected: {1, 15, 33}\nactual: {1422=true}\nstack traceback:\n\t/tmp/tmp60pcgy23.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n            return nil\n        else\n            t[x[i]] = true\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzjackvi3.lua:24: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpzjackvi3.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return nil\n        else\n            t[x[i]] = true\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkwu_m4l9.lua:24: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpkwu_m4l9.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            t[x[i]] = nil\n        end\n    end\n    for i=1,#x do\n        if t[x[i]] ~= nil then\n            t[x[i]] = nil\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnyrx4iot.lua:27: expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpnyrx4iot.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            return\n        end\n        t[x[i]] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprspfrpnz.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmprspfrpnz.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i, v in ipairs(x) do\n        if v % 2 == 0 then\n            t[v] = nil\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2rdd26e_.lua:22: expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmp2rdd26e_.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            t[x[i]] = nil\n        end\n    end\n    for i=1,#x do\n        if t[x[i]] == nil then\n            t[x[i]] = x[i]\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplplnp34t.lua:21: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmplplnp34t.lua:21: in local 'candidate'\n\t/tmp/tmplplnp34t.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local t = {}\n    for i=1,#x do\n        if x[i]%2 == 0 then\n            t[x[i]] = nil\n        end\n    end\n    for i=1,#x do\n        if t[x[i]] ~= nil then\n            t[x[i]] = nil\n        end\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3woqieb6.lua:21: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmp3woqieb6.lua:21: in local 'candidate'\n\t/tmp/tmp3woqieb6.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of positive integers x. return a sorted table of all \n-- elements that hasn't any even digit.\n-- Note: Returned table should be sorted in increasing order.\n-- For example:\n-- >>> unique_digits([15, 33, 1422, 1])\n-- [1, 15, 33]\n-- >>> unique_digits([152, 323, 1422, 10])\n-- []\nlocal function unique_digits(x)\n    local result = {}\n    for i = 1, #x do\n        if x[i] % 2 == 0 then\n            return\n        end\n        result[x[i]] = true\n    end\n    return result.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292455,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo0xkfk3e.lua:23: expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpo0xkfk3e.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}