name: HumanEval_153_Strongest_Extension
language: lua
prompt: "-- You will be given the name of a class (a string) and a table of extensions.\n\
  -- The extensions are to be used to load additional classes to the class. The\n\
  -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  -- letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n-- You should find the strongest extension and return a string in this \n--\
  \ format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
  \ with the same strength, you should\n-- choose the one that comes first in the\
  \ table.\n-- For example, if you are given \"Slices\" as the class and a table of\
  \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n--\
  \ return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n-- (its strength is -1).\n-- Example:\n-- >>> Strongest_Extension('my_class',\
  \ ['AA', 'Be', 'CC'])\n-- 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
  \ extensions)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
  \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
  \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
  \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
  \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n    lu.assertEquals(candidate('K',\
  \ {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n    lu.assertEquals(candidate('__HAHA',\
  \ {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n    lu.assertEquals(candidate('YameRore',\
  \ {'HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-'}), 'YameRore.okIWILL123')\n\
  \    lu.assertEquals(candidate('finNNalLLly', {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n\
  \    lu.assertEquals(candidate('_', {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp',\
  \ {'671235', 'Bb'}), 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local class_name = class_name\n    local extensions = extensions\n\
    \    local strong_extension = ''\n    local strong_extension_name = ''\n    local\
    \ strong_extension_strength = 0\n    for _, extension in ipairs(extensions) do\n\
    \        local extension_name = extension.sub(1, extension.length - 1)\n     \
    \   local extension_strength = 0\n        for _, char in ipairs(extension_name)\
    \ do\n            if char.upper() > 0 then\n                extension_strength\
    \ = extension_strength + 1\n            end\n        end\n        if extension_strength\
    \ > strong_extension_strength then\n            strong_extension_name = extension_name\n\
    \            strong_extension_strength = extension_strength\n        end\n   \
    \ end\n    if strong_extension_strength > 0 then\n        strong_extension = class_name\
    \ .. '.' .. strong_extension_name\n    end\n    return strong_extension\nend",
  "    local class_name = class_name\n    local extensions = extensions\n    local\
    \ strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength\
    \ = 0\n    local i = 1\n    while i <= #extensions do\n        local extension_name\
    \ = extensions[i]\n        local extension_strength = 0\n        local extension_name_upper\
    \ = string.upper(extension_name)\n        local extension_name_lower = string.lower(extension_name)\n\
    \        local extension_name_upper_count = #extension_name_upper\n        local\
    \ extension_name_lower_count = #extension_name_lower\n        local extension_name_count\
    \ = extension_name_upper_count + extension_name_lower_count\n        local extension_name_count_count\
    \ = #extension_name_count\n        local extension_name_count_count_count = #extension_name_count_count\n\
    \        local extension_name_count_count_count_count = #extension_name_count_count_count\n\
    \        local extension_name_count_count_count_count_count = #extension_name_count_count_count_count\n\
    \        local extension_name_count_count_count_count_count_count = #extension_name_count_count_count_count_count\n\
    \        local extension_name_count_count_count_count_count_count_count = #extension_name_count_count_count_count_count_count\n\
    \        local extension_name_count_count_count_count_count_count_count_count\
    \ = #extension_name_count_count_count_count_count_count_count\n        local extension_name_count_count_count_count_count_count_count_count_count\
    \ = #extension_name_count_count_count_count_count_count_count_count\n        local\
    \ extension_name_count_count_count_count_count_count_count_count_count_count =\
    \ #extension_name_count_count_count_count_count_count_count_count_count\n    \
    \    local extension_name_count_count_count_count_count_count_count_count_count_count_count\
    \ = #", "    local class_name = class_name\n    local extensions = extensions\n\
    \    local strong_extension = ''\n    local strong_extension_name = ''\n    local\
    \ strong_extension_strength = 0\n    for _, extension in ipairs(extensions) do\n\
    \        local extension_name = extension\n        local extension_strength =\
    \ 0\n        for _, char in ipairs(extension_name) do\n            if char.upper()\
    \ > 0 then\n                extension_strength = extension_strength + 1\n    \
    \        end\n        end\n        if extension_strength > strong_extension_strength\
    \ then\n            strong_extension_name = extension_name\n            strong_extension_strength\
    \ = extension_strength\n        end\n    end\n    if strong_extension_strength\
    \ > 0 then\n        strong_extension = class_name .. '.' .. strong_extension_name\n\
    \    end\n    return strong_extension\nend", "    local class_table = {}\n   \
    \ for _, extension in ipairs(extensions) do\n        table.insert(class_table,\
    \ extension)\n    end\n    local strong_extension = ''\n    for _, extension in\
    \ ipairs(extensions) do\n        local strength = table.count(class_table, extension)\
    \ - table.count(class_table, string.lower(extension))\n        if strength > strong_extension\
    \ then\n            strong_extension = extension\n        end\n    end\n    return\
    \ class_name .. '.' .. strong_extension\nend", "    local class_table = {}\n \
    \   for _, extension in ipairs(extensions) do\n        table.insert(class_table,\
    \ extension)\n    end\n    local class_table_sorted = table.sort(class_table)\n\
    \    local strongest_extension = class_name\n    for _, extension in ipairs(class_table_sorted)\
    \ do\n        if class_table[extension] == class_table_sorted[extension] then\n\
    \            strongest_extension = class_name .. \".\" .. extension\n        \
    \    break\n        end\n    end\n    return strongest_extension\nend", "    local\
    \ class_name = class_name\n    local extensions = extensions\n    local strong_ext\
    \ = ''\n    local strong_ext_name = ''\n    local strong_ext_strength = 0\n  \
    \  local i = 1\n    while i <= #extensions do\n        local ext_name = extensions[i]\n\
    \        local ext_strength = 0\n        local ext_cap = 0\n        local ext_sm\
    \ = 0\n        local j = 1\n        while j <= #ext_name do\n            if ext_name[j]\
    \ == 'A' or ext_name[j] == 'a' then\n                ext_cap = ext_cap + 1\n \
    \           end\n            if ext_name[j] == 'a' or ext_name[j] == 'A' then\n\
    \                ext_sm = ext_sm + 1\n            end\n            j = j + 1\n\
    \        end\n        ext_strength = ext_cap - ext_sm\n        if ext_strength\
    \ > strong_ext_strength then\n            strong_ext_strength = ext_strength\n\
    \            strong_ext_name = ext_name\n        end\n        i = i + 1\n    end\n\
    \    strong_ext = class_name .. '.' .. strong_ext_name\n    return strong_ext\n\
    end", "    local class_table = {}\n    for _, extension in ipairs(extensions)\
    \ do\n        class_table[extension] = class_table[extension] or 0\n        class_table[extension]\
    \ = class_table[extension] + 1\n    end\n    local strong_extension = ''\n   \
    \ for extension, count in class_table do\n        if count > 1 then\n        \
    \    strong_extension = strong_extension .. '.' .. extension\n        end\n  \
    \  end\n    return class_name .. '.' .. strong_extension\nend", "    local class_table\
    \ = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table,\
    \ extension)\n    end\n    local class_table_sorted = class_table:sort()\n   \
    \ local strongest_extension = class_table_sorted[1]\n    return class_name ..\
    \ '.' .. strongest_extension\nend", "    local class_name = class_name\n    local\
    \ extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name\
    \ = ''\n    local strong_extension_strength = 0\n    for _, extension in ipairs(extensions)\
    \ do\n        local extension_name = extension.lower()\n        local extension_strength\
    \ = 0\n        for _, char in ipairs(extension_name) do\n            if char.upper()\
    \ == char then\n                extension_strength = extension_strength + 1\n\
    \            end\n        end\n        if extension_strength > strong_extension_strength\
    \ then\n            strong_extension_name = extension_name\n            strong_extension_strength\
    \ = extension_strength\n        end\n    end\n    if strong_extension_strength\
    \ > 0 then\n        strong_extension = class_name .. '.' .. strong_extension_name\n\
    \    end\n    return strong_extension\nend", "    local class_name = class_name\n\
    \    local extensions = extensions\n    local strong_extension = ''\n    local\
    \ i = 1\n    while i <= #extensions do\n        local extension = extensions[i]\n\
    \        local strength = 0\n        local cap = 0\n        local sm = 0\n   \
    \     local extension_name = string.lower(extension)\n        for j = 1, #extension_name\
    \ do\n            if extension_name[j] == '_' then\n                cap = cap\
    \ + 1\n            else\n                sm = sm + 1\n            end\n      \
    \  end\n        strength = cap - sm\n        if strength > strong_extension then\n\
    \            strong_extension = strength\n            strong_extension_name =\
    \ extension\n        end\n        i = i + 1\n    end\n    return class_name ..\
    \ '.' .. strong_extension_name\nend", "    local class_table = {}\n    for _,\
    \ extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n\
    \    end\n    local class_table_sorted = class_table:sort()\n    local strongest_extension\
    \ = class_table_sorted[1]\n    return class_name .. '.' .. strongest_extension\n\
    end", "    local class_name = class_name\n    local extensions = extensions\n\
    \    local strong_extension = ''\n    local i = 1\n    while i <= #extensions\
    \ do\n        local extension = extensions[i]\n        local strength = 0\n  \
    \      local cap = 0\n        local sm = 0\n        local extension_name = extension\n\
    \        local extension_name_len = #extension_name\n        while extension_name_len\
    \ > 0 do\n            local c = string.char(extension_name, extension_name_len)\n\
    \            if c == 'A' or c == 'a' then\n                cap = cap + 1\n   \
    \         else\n                sm = sm + 1\n            end\n            extension_name_len\
    \ = extension_name_len - 1\n        end\n        strength = cap - sm\n       \
    \ if strength > strong_extension then\n            strong_extension = strength\n\
    \            strong_extension_name = extension\n        end\n        i = i + 1\n\
    \    end\n    return class_name .. '.' .. strong_extension_name\nend", "    local\
    \ class_table = {}\n    for _, extension in ipairs(extensions) do\n        local\
    \ strength = #extension - #extension:lower()\n        table.insert(class_table,\
    \ {extension, strength})\n    end\n    local max_strength = 0\n    for _, extension\
    \ in ipairs(extensions) do\n        if strength > max_strength then\n        \
    \    max_strength = strength\n            max_extension = extension\n        end\n\
    \    end\n    return class_name .. '.' .. max_extension\nend", "    local class_name\
    \ = class_name\n    local extensions = extensions\n    local strong_extension\
    \ = ''\n    local strong_extension_name = ''\n    local strong_extension_strength\
    \ = 0\n    local i = 1\n    while i <= #extensions do\n        local extension_name\
    \ = extensions[i]\n        local extension_strength = 0\n        local extension_name_upper\
    \ = string.upper(extension_name)\n        local extension_name_lower = string.lower(extension_name)\n\
    \        local extension_name_upper_count = #extension_name_upper\n        local\
    \ extension_name_lower_count = #extension_name_lower\n        local extension_name_count\
    \ = extension_name_upper_count + extension_name_lower_count\n        local extension_name_strength\
    \ = extension_name_upper_count - extension_name_lower_count\n        if extension_name_strength\
    \ > strong_extension_strength then\n            strong_extension_strength = extension_name_strength\n\
    \            strong_extension_name = extension_name\n        end\n        i =\
    \ i + 1\n    end\n    if strong_extension_strength > 0 then\n        strong_extension\
    \ = class_name .. '.' .. strong_extension_name\n    end\n    return strong_extension\n\
    end", "    local class_name = class_name\n    local extensions = extensions\n\
    \    local strong_extension = ''\n    local strong_extension_name = ''\n    local\
    \ strong_extension_strength = 0\n    for _, ext in ipairs(extensions) do\n   \
    \     local ext_strength = 0\n        local ext_name = ext\n        for _, char\
    \ in ipairs(ext_name) do\n            if char.upper() == char then\n         \
    \       ext_strength = ext_strength + 1\n            end\n        end\n      \
    \  if ext_strength > strong_extension_strength then\n            strong_extension_strength\
    \ = ext_strength\n            strong_extension_name = ext_name\n            strong_extension\
    \ = ext\n        end\n    end\n    return class_name .. '.' .. strong_extension_name\
    \ .. '.' .. strong_extension\nend", "    local class_table = {}\n    for _, extension\
    \ in ipairs(extensions) do\n        class_table[extension] = class_table[extension]\
    \ or 0\n        class_table[extension] = class_table[extension] + 1\n    end\n\
    \    local class_name_upper = string.upper(class_name)\n    local class_name_lower\
    \ = string.lower(class_name)\n    local class_name_cap = string.upper(class_name)\n\
    \    local class_name_sm = string.lower(class_name)\n    local strongest_extension\
    \ = class_name\n    for extension, strength in class_table do\n        if strength\
    \ > class_table[strongest_extension] then\n            strongest_extension = extension\n\
    \        end\n    end\n    if class_table[strongest_extension] > 1 then\n    \
    \    strongest_extension = '.' .. strongest_extension\n    end\n    return class_name\
    \ .. '.' .. strongest_extension\nend", "    local class_name = class_name\n  \
    \  local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name\
    \ = ''\n    local i = 1\n    for _,extension in ipairs(extensions) do\n      \
    \  local ext_strength = math.floor((string.upper(extension) - string.lower(extension))\
    \ / 2)\n        if ext_strength > strong_extension then\n            strong_extension\
    \ = ext_strength\n            strong_extension_name = extension\n        end\n\
    \    end\n    return class_name .. '.' .. strong_extension_name\nend", "    local\
    \ class_name = class_name\n    local extensions = extensions\n    local strong_ext\
    \ = ''\n    local strong_ext_name = ''\n    local i = 1\n    local j = 1\n   \
    \ for i = 1, #extensions, 2 do\n        if extensions[i] ~= extensions[i+1] then\n\
    \            if strong_ext_name ~= '' then\n                strong_ext = strong_ext\
    \ .. '.' .. strong_ext_name\n                strong_ext_name = ''\n          \
    \  end\n            strong_ext_name = extensions[i]\n            strong_ext =\
    \ strong_ext .. '.' .. strong_ext_name\n            strong_ext_name = ''\n   \
    \         strong_ext = strong_ext .. '.' .. strong_ext_name\n            strong_ext_name\
    \ = ''\n        end\n    end\n    return class_name .. '.' .. strong_ext_name\
    \ .. '.' .. strong_ext\nend", "    local class_table = {}\n    for _, extension\
    \ in ipairs(extensions) do\n        table.insert(class_table, extension)\n   \
    \ end\n    local strong_extension = ''\n    for _, extension in ipairs(extensions)\
    \ do\n        local strength = 0\n        for _, char in ipairs(extension) do\n\
    \            if char.isupper() then\n                strength = strength + 1\n\
    \            end\n        end\n        if strength > strong_extension then\n \
    \           strong_extension = extension\n        end\n    end\n    return class_name\
    \ .. '.' .. strong_extension\nend", "    local class_table = {}\n    for _, extension\
    \ in ipairs(extensions) do\n        local strength = #extension - #extension:lower()\n\
    \        table.insert(class_table, {extension, strength})\n    end\n    local\
    \ max_strength = 0\n    for _, extension in ipairs(extensions) do\n        if\
    \ strength > max_strength then\n            max_strength = strength\n        \
    \    max_extension = extension\n        end\n    end\n    return class_name ..\
    \ '.' .. max_extension\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
