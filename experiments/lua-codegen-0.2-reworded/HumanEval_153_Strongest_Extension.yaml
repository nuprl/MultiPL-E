name: HumanEval_153_Strongest_Extension
language: lua
prompt: "-- You will be given the name of a class (a string) and a table of extensions.\n\
  -- The extensions are to be used to load additional classes to the class. The\n\
  -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  -- letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n-- You should find the strongest extension and return a string in this \n--\
  \ format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
  \ with the same strength, you should\n-- choose the one that comes first in the\
  \ table.\n-- For example, if you are given \"Slices\" as the class and a table of\
  \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n--\
  \ return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n-- (its strength is -1).\n-- Example:\n-- >>> Strongest_Extension('my_class',\
  \ ['AA', 'Be', 'CC'])\n-- 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
  \ extensions)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
  \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
  \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
  \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
  \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n    lu.assertEquals(candidate('K',\
  \ {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n    lu.assertEquals(candidate('__HAHA',\
  \ {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n    lu.assertEquals(candidate('YameRore',\
  \ {'HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-'}), 'YameRore.okIWILL123')\n\
  \    lu.assertEquals(candidate('finNNalLLly', {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n\
  \    lu.assertEquals(candidate('_', {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp',\
  \ {'671235', 'Bb'}), 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local class_name = class_name\n    local extensions = extensions\n\
    \    local strong_extension = ''\n    local strong_extension_name = ''\n    local\
    \ strong_extension_strength = 0\n    for _, extension in ipairs(extensions) do\n\
    \        local extension_name = extension.sub(1, extension.length - 1)\n     \
    \   local extension_strength = 0\n        for _, char in ipairs(extension_name)\
    \ do\n            if char.upper() > 0 then\n                extension_strength\
    \ = extension_strength + 1\n            end\n        end\n        if extension_strength\
    \ > strong_extension_strength then\n            strong_extension_name = extension_name\n\
    \            strong_extension_strength = extension_strength\n        end\n   \
    \ end\n    if strong_extension_strength > 0 then\n        strong_extension = class_name\
    \ .. '.' .. strong_extension_name\n    end\n    return strong_extension\nend",
  "    local class_name = class_name\n    local extensions = extensions\n    local\
    \ strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength\
    \ = 0\n    local i = 1\n    while i <= #extensions do\n        local extension_name\
    \ = extensions[i]\n        local extension_strength = 0\n        local extension_name_upper\
    \ = string.upper(extension_name)\n        local extension_name_lower = string.lower(extension_name)\n\
    \        local extension_name_upper_count = #extension_name_upper\n        local\
    \ extension_name_lower_count = #extension_name_lower\n        local extension_name_count\
    \ = extension_name_upper_count + extension_name_lower_count\n        local extension_name_count_count\
    \ = #extension_name_count\n        local extension_name_count_count_count = #extension_name_count_count\n\
    \        local extension_name_count_count_count_count = #extension_name_count_count_count\n\
    \        local extension_name_count_count_count_count_count = #extension_name_count_count_count_count\n\
    \        local extension_name_count_count_count_count_count_count = #extension_name_count_count_count_count_count\n\
    \        local extension_name_count_count_count_count_count_count_count = #extension_name_count_count_count_count_count_count\n\
    \        local extension_name_count_count_count_count_count_count_count_count\
    \ = #extension_name_count_count_count_count_count_count_count\n        local extension_name_count_count_count_count_count_count_count_count_count\
    \ = #extension_name_count_count_count_count_count_count_count_count\n        local\
    \ extension_name_count_count_count_count_count_count_count_count_count_count =\
    \ #extension_name_count_count_count_count_count_count_count_count_count\n    \
    \    local extension_name_count_count_count_count_count_count_count_count_count_count_count\
    \ = #", "    local class_name = class_name\n    local extensions = extensions\n\
    \    local strong_extension = ''\n    local strong_extension_name = ''\n    local\
    \ strong_extension_strength = 0\n    for _, extension in ipairs(extensions) do\n\
    \        local extension_name = extension\n        local extension_strength =\
    \ 0\n        for _, char in ipairs(extension_name) do\n            if char.upper()\
    \ > 0 then\n                extension_strength = extension_strength + 1\n    \
    \        end\n        end\n        if extension_strength > strong_extension_strength\
    \ then\n            strong_extension_name = extension_name\n            strong_extension_strength\
    \ = extension_strength\n        end\n    end\n    if strong_extension_strength\
    \ > 0 then\n        strong_extension = class_name .. '.' .. strong_extension_name\n\
    \    end\n    return strong_extension\nend", "    local class_table = {}\n   \
    \ for _, extension in ipairs(extensions) do\n        table.insert(class_table,\
    \ extension)\n    end\n    local strong_extension = ''\n    for _, extension in\
    \ ipairs(extensions) do\n        local strength = table.count(class_table, extension)\
    \ - table.count(class_table, string.lower(extension))\n        if strength > strong_extension\
    \ then\n            strong_extension = extension\n        end\n    end\n    return\
    \ class_name .. '.' .. strong_extension\nend", "    local class_table = {}\n \
    \   for _, extension in ipairs(extensions) do\n        table.insert(class_table,\
    \ extension)\n    end\n    local class_table_sorted = table.sort(class_table)\n\
    \    local strongest_extension = class_name\n    for _, extension in ipairs(class_table_sorted)\
    \ do\n        if class_table[extension] == class_table_sorted[extension] then\n\
    \            strongest_extension = class_name .. \".\" .. extension\n        \
    \    break\n        end\n    end\n    return strongest_extension\nend", "    local\
    \ class_name = class_name\n    local extensions = extensions\n    local strong_ext\
    \ = ''\n    local strong_ext_name = ''\n    local strong_ext_strength = 0\n  \
    \  local i = 1\n    while i <= #extensions do\n        local ext_name = extensions[i]\n\
    \        local ext_strength = 0\n        local ext_cap = 0\n        local ext_sm\
    \ = 0\n        local j = 1\n        while j <= #ext_name do\n            if ext_name[j]\
    \ == 'A' or ext_name[j] == 'a' then\n                ext_cap = ext_cap + 1\n \
    \           end\n            if ext_name[j] == 'a' or ext_name[j] == 'A' then\n\
    \                ext_sm = ext_sm + 1\n            end\n            j = j + 1\n\
    \        end\n        ext_strength = ext_cap - ext_sm\n        if ext_strength\
    \ > strong_ext_strength then\n            strong_ext_strength = ext_strength\n\
    \            strong_ext_name = ext_name\n        end\n        i = i + 1\n    end\n\
    \    strong_ext = class_name .. '.' .. strong_ext_name\n    return strong_ext\n\
    end", "    local class_table = {}\n    for _, extension in ipairs(extensions)\
    \ do\n        class_table[extension] = class_table[extension] or 0\n        class_table[extension]\
    \ = class_table[extension] + 1\n    end\n    local strong_extension = ''\n   \
    \ for extension, count in class_table do\n        if count > 1 then\n        \
    \    strong_extension = strong_extension .. '.' .. extension\n        end\n  \
    \  end\n    return class_name .. '.' .. strong_extension\nend", "    local class_table\
    \ = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table,\
    \ extension)\n    end\n    local class_table_sorted = class_table:sort()\n   \
    \ local strongest_extension = class_table_sorted[1]\n    return class_name ..\
    \ '.' .. strongest_extension\nend", "    local class_name = class_name\n    local\
    \ extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name\
    \ = ''\n    local strong_extension_strength = 0\n    for _, extension in ipairs(extensions)\
    \ do\n        local extension_name = extension.lower()\n        local extension_strength\
    \ = 0\n        for _, char in ipairs(extension_name) do\n            if char.upper()\
    \ == char then\n                extension_strength = extension_strength + 1\n\
    \            end\n        end\n        if extension_strength > strong_extension_strength\
    \ then\n            strong_extension_name = extension_name\n            strong_extension_strength\
    \ = extension_strength\n        end\n    end\n    if strong_extension_strength\
    \ > 0 then\n        strong_extension = class_name .. '.' .. strong_extension_name\n\
    \    end\n    return strong_extension\nend", "    local class_name = class_name\n\
    \    local extensions = extensions\n    local strong_extension = ''\n    local\
    \ i = 1\n    while i <= #extensions do\n        local extension = extensions[i]\n\
    \        local strength = 0\n        local cap = 0\n        local sm = 0\n   \
    \     local extension_name = string.lower(extension)\n        for j = 1, #extension_name\
    \ do\n            if extension_name[j] == '_' then\n                cap = cap\
    \ + 1\n            else\n                sm = sm + 1\n            end\n      \
    \  end\n        strength = cap - sm\n        if strength > strong_extension then\n\
    \            strong_extension = strength\n            strong_extension_name =\
    \ extension\n        end\n        i = i + 1\n    end\n    return class_name ..\
    \ '.' .. strong_extension_name\nend", "    local class_table = {}\n    for _,\
    \ extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n\
    \    end\n    local class_table_sorted = class_table:sort()\n    local strongest_extension\
    \ = class_table_sorted[1]\n    return class_name .. '.' .. strongest_extension\n\
    end", "    local class_name = class_name\n    local extensions = extensions\n\
    \    local strong_extension = ''\n    local i = 1\n    while i <= #extensions\
    \ do\n        local extension = extensions[i]\n        local strength = 0\n  \
    \      local cap = 0\n        local sm = 0\n        local extension_name = extension\n\
    \        local extension_name_len = #extension_name\n        while extension_name_len\
    \ > 0 do\n            local c = string.char(extension_name, extension_name_len)\n\
    \            if c == 'A' or c == 'a' then\n                cap = cap + 1\n   \
    \         else\n                sm = sm + 1\n            end\n            extension_name_len\
    \ = extension_name_len - 1\n        end\n        strength = cap - sm\n       \
    \ if strength > strong_extension then\n            strong_extension = strength\n\
    \            strong_extension_name = extension\n        end\n        i = i + 1\n\
    \    end\n    return class_name .. '.' .. strong_extension_name\nend", "    local\
    \ class_table = {}\n    for _, extension in ipairs(extensions) do\n        local\
    \ strength = #extension - #extension:lower()\n        table.insert(class_table,\
    \ {extension, strength})\n    end\n    local max_strength = 0\n    for _, extension\
    \ in ipairs(extensions) do\n        if strength > max_strength then\n        \
    \    max_strength = strength\n            max_extension = extension\n        end\n\
    \    end\n    return class_name .. '.' .. max_extension\nend", "    local class_name\
    \ = class_name\n    local extensions = extensions\n    local strong_extension\
    \ = ''\n    local strong_extension_name = ''\n    local strong_extension_strength\
    \ = 0\n    local i = 1\n    while i <= #extensions do\n        local extension_name\
    \ = extensions[i]\n        local extension_strength = 0\n        local extension_name_upper\
    \ = string.upper(extension_name)\n        local extension_name_lower = string.lower(extension_name)\n\
    \        local extension_name_upper_count = #extension_name_upper\n        local\
    \ extension_name_lower_count = #extension_name_lower\n        local extension_name_count\
    \ = extension_name_upper_count + extension_name_lower_count\n        local extension_name_strength\
    \ = extension_name_upper_count - extension_name_lower_count\n        if extension_name_strength\
    \ > strong_extension_strength then\n            strong_extension_strength = extension_name_strength\n\
    \            strong_extension_name = extension_name\n        end\n        i =\
    \ i + 1\n    end\n    if strong_extension_strength > 0 then\n        strong_extension\
    \ = class_name .. '.' .. strong_extension_name\n    end\n    return strong_extension\n\
    end", "    local class_name = class_name\n    local extensions = extensions\n\
    \    local strong_extension = ''\n    local strong_extension_name = ''\n    local\
    \ strong_extension_strength = 0\n    for _, ext in ipairs(extensions) do\n   \
    \     local ext_strength = 0\n        local ext_name = ext\n        for _, char\
    \ in ipairs(ext_name) do\n            if char.upper() == char then\n         \
    \       ext_strength = ext_strength + 1\n            end\n        end\n      \
    \  if ext_strength > strong_extension_strength then\n            strong_extension_strength\
    \ = ext_strength\n            strong_extension_name = ext_name\n            strong_extension\
    \ = ext\n        end\n    end\n    return class_name .. '.' .. strong_extension_name\
    \ .. '.' .. strong_extension\nend", "    local class_table = {}\n    for _, extension\
    \ in ipairs(extensions) do\n        class_table[extension] = class_table[extension]\
    \ or 0\n        class_table[extension] = class_table[extension] + 1\n    end\n\
    \    local class_name_upper = string.upper(class_name)\n    local class_name_lower\
    \ = string.lower(class_name)\n    local class_name_cap = string.upper(class_name)\n\
    \    local class_name_sm = string.lower(class_name)\n    local strongest_extension\
    \ = class_name\n    for extension, strength in class_table do\n        if strength\
    \ > class_table[strongest_extension] then\n            strongest_extension = extension\n\
    \        end\n    end\n    if class_table[strongest_extension] > 1 then\n    \
    \    strongest_extension = '.' .. strongest_extension\n    end\n    return class_name\
    \ .. '.' .. strongest_extension\nend", "    local class_name = class_name\n  \
    \  local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name\
    \ = ''\n    local i = 1\n    for _,extension in ipairs(extensions) do\n      \
    \  local ext_strength = math.floor((string.upper(extension) - string.lower(extension))\
    \ / 2)\n        if ext_strength > strong_extension then\n            strong_extension\
    \ = ext_strength\n            strong_extension_name = extension\n        end\n\
    \    end\n    return class_name .. '.' .. strong_extension_name\nend", "    local\
    \ class_name = class_name\n    local extensions = extensions\n    local strong_ext\
    \ = ''\n    local strong_ext_name = ''\n    local i = 1\n    local j = 1\n   \
    \ for i = 1, #extensions, 2 do\n        if extensions[i] ~= extensions[i+1] then\n\
    \            if strong_ext_name ~= '' then\n                strong_ext = strong_ext\
    \ .. '.' .. strong_ext_name\n                strong_ext_name = ''\n          \
    \  end\n            strong_ext_name = extensions[i]\n            strong_ext =\
    \ strong_ext .. '.' .. strong_ext_name\n            strong_ext_name = ''\n   \
    \         strong_ext = strong_ext .. '.' .. strong_ext_name\n            strong_ext_name\
    \ = ''\n        end\n    end\n    return class_name .. '.' .. strong_ext_name\
    \ .. '.' .. strong_ext\nend", "    local class_table = {}\n    for _, extension\
    \ in ipairs(extensions) do\n        table.insert(class_table, extension)\n   \
    \ end\n    local strong_extension = ''\n    for _, extension in ipairs(extensions)\
    \ do\n        local strength = 0\n        for _, char in ipairs(extension) do\n\
    \            if char.isupper() then\n                strength = strength + 1\n\
    \            end\n        end\n        if strength > strong_extension then\n \
    \           strong_extension = extension\n        end\n    end\n    return class_name\
    \ .. '.' .. strong_extension\nend", "    local class_table = {}\n    for _, extension\
    \ in ipairs(extensions) do\n        local strength = #extension - #extension:lower()\n\
    \        table.insert(class_table, {extension, strength})\n    end\n    local\
    \ max_strength = 0\n    for _, extension in ipairs(extensions) do\n        if\
    \ strength > max_strength then\n            max_strength = strength\n        \
    \    max_extension = extension\n        end\n    end\n    return class_name ..\
    \ '.' .. max_extension\nend", "    local class_name = class_name\n    local extensions\
    \ = extensions\n    local strong_extension = ''\n    local strong_extension_name\
    \ = ''\n    local strong_extension_strength = 0\n    local i = 1\n    while i\
    \ <= #extensions do\n        local extension_name = extensions[i]\n        local\
    \ extension_strength = 0\n        local extension_name_upper = string.upper(extension_name)\n\
    \        local extension_name_lower = string.lower(extension_name)\n        local\
    \ extension_name_upper_count = #extension_name_upper\n        local extension_name_lower_count\
    \ = #extension_name_lower\n        local extension_name_count = extension_name_upper_count\
    \ + extension_name_lower_count\n        local extension_name_strength = extension_name_upper_count\
    \ - extension_name_lower_count\n        if extension_name_strength > strong_extension_strength\
    \ then\n            strong_extension_strength = extension_name_strength\n    \
    \        strong_extension_name = extension_name\n        end\n        i = i +\
    \ 1\n    end\n    if strong_extension_strength > 0 then\n        strong_extension\
    \ = class_name .. '.' .. strong_extension_name\n    end\n    return strong_extension\n\
    end", "    local class_table = {}\n    for _, extension in ipairs(extensions)\
    \ do\n        local strength = 0\n        for _, c in ipairs(extension) do\n \
    \           if string.char(c) ~= string.char(tostring(c)) then\n             \
    \   strength = strength + 1\n            end\n        end\n        table.insert(class_table,\
    \ {extension, strength})\n    end\n    local max_strength = 0\n    for _, extension\
    \ in ipairs(class_table) do\n        if extension[1] > max_strength then\n   \
    \         max_strength = extension[1]\n            max_extension = extension[2]\n\
    \        end\n    end\n    return class_name .. '.' .. max_extension\nend", " \
    \   local class_table = {}\n    for _, extension in ipairs(extensions) do\n  \
    \      local strength = 0\n        for _, c in ipairs(extension) do\n        \
    \    strength = strength + (c.upper() - c.lower())\n        end\n        table.insert(class_table,\
    \ {extension, strength})\n    end\n    local max_strength = 0\n    local max_extension\
    \ = nil\n    for _, extension in ipairs(extensions) do\n        if class_table[extension][1]\
    \ > max_strength then\n            max_strength = class_table[extension][1]\n\
    \            max_extension = extension\n        end\n    end\n    return class_name\
    \ .. '.' .. max_extension\nend", "    local class_name = class_name\n    local\
    \ extensions = extensions\n    local result = class_name\n    local strength =\
    \ 0\n    for _, extension in ipairs(extensions) do\n        local strength = strength\
    \ + tonumber(extension) - tonumber(extension:lower())\n        if strength > 0\
    \ then\n            result = result .. '.' .. extension\n        end\n    end\n\
    \    return result\nend", "    local table = {}\n    for _, extension in ipairs(extensions)\
    \ do\n        table[extension] = table[extension] or 0\n        table[extension]\
    \ = table[extension] + tonumber(string.upper(extension))\n    end\n    local max\
    \ = 0\n    local max_extension = nil\n    for _, extension in ipairs(extensions)\
    \ do\n        if table[extension] > max then\n            max = table[extension]\n\
    \            max_extension = extension\n        end\n    end\n    return class_name\
    \ .. '.' .. max_extension\nend", "    local class_table = {}\n    for _, extension\
    \ in ipairs(extensions) do\n        table.insert(class_table, extension)\n   \
    \ end\n    local strong_extension = ''\n    for _, extension in ipairs(extensions)\
    \ do\n        local strength = 0\n        for _, char in ipairs(extension) do\n\
    \            strength = strength + (string.charCodeAt(char) - 64)\n        end\n\
    \        if strength > strong_extension then\n            strong_extension = extension\n\
    \        end\n    end\n    return class_name .. '.' .. strong_extension\nend",
  "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n   \
    \     class_table[extension] = 0\n    end\n    for _, extension in ipairs(extensions)\
    \ do\n        local strength = #extension - #extension:lower()\n        class_table[extension]\
    \ = strength\n    end\n    local max_strength = 0\n    local max_extension = ''\n\
    \    for extension, strength in pairs(class_table) do\n        if strength > max_strength\
    \ then\n            max_strength = strength\n            max_extension = extension\n\
    \        end\n    end\n    return class_name .. '.' .. max_extension\nend", " \
    \   local class_table = {}\n    for _, extension in ipairs(extensions) do\n  \
    \      table.insert(class_table, extension)\n    end\n    local max_strength =\
    \ 0\n    for _, extension in ipairs(extensions) do\n        local strength = 0\n\
    \        for _, char in ipairs(extension) do\n            strength = strength\
    \ + tostring(toupper(char) - tostring(tolower(char)))\n        end\n        if\
    \ strength > max_strength then\n            max_strength = strength\n        \
    \    class_table.strongest_extension = extension\n        end\n    end\n    return\
    \ class_name .. '.' .. class_table.strongest_extension\nend", "    local class_table\
    \ = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table,\
    \ extension)\n    end\n    local class_table_sorted = class_table:sort()\n   \
    \ local strongest_extension = class_table_sorted[1]\n    return class_name..'.'..strongest_extension\n\
    end", "    local class_name = class_name\n    local extensions = extensions\n\
    \    local strong_extension = ''\n    local strong_extension_name = ''\n    local\
    \ strong_extension_strength = 0\n    local i = 1\n    while i <= #extensions do\n\
    \        local extension = extensions[i]\n        local extension_name = string.lower(extension)\n\
    \        local extension_strength = 0\n        local j = 1\n        while j <=\
    \ #extension_name do\n            local letter = string.lower(extension_name[j])\n\
    \            if letter == 'a' or letter == 'e' or letter == 'i' or letter == 'o'\
    \ or letter == 'u' then\n                extension_strength = extension_strength\
    \ + 1\n            end\n            j = j + 1\n        end\n        if extension_strength\
    \ > strong_extension_strength then\n            strong_extension = class_name\n\
    \            strong_extension_name = extension\n            strong_extension_strength\
    \ = extension_strength\n        end\n        i = i + 1\n    end\n    return strong_extension\
    \ .. '.' .. strong_extension_name\nend", "    local class_table = {}\n    for\
    \ _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n\
    \    end\n    local strength = 0\n    local strongest_extension = ''\n    for\
    \ _, extension in ipairs(extensions) do\n        local strength = 0\n        for\
    \ _, extension2 in ipairs(extensions) do\n            if extension2 == extension\
    \ then\n                strength = strength + 1\n            end\n        end\n\
    \        if strength > strength then\n            strongest_extension = extension\n\
    \        end\n    end\n    return class_name .. '.' .. strongest_extension\nend",
  "    local class_name = class_name\n    local extensions = extensions\n    local\
    \ max_strength = -1\n    local max_extension = nil\n    for _, extension in ipairs(extensions)\
    \ do\n        local strength = #extension - #extension:lower()\n        if strength\
    \ > max_strength then\n            max_strength = strength\n            max_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. max_extension\n\
    end", "    local class_name = class_name\n    local extensions = extensions\n\
    \    local strong_extension = nil\n    local strong_extension_name = nil\n   \
    \ local i = 1\n    while i <= #extensions do\n        local extension_name = extensions[i]\n\
    \        local extension_strength = 0\n        local extension_name_upper = string.upper(extension_name)\n\
    \        local extension_name_lower = string.lower(extension_name)\n        local\
    \ extension_name_upper_count = #extension_name_upper\n        local extension_name_lower_count\
    \ = #extension_name_lower\n        local extension_name_count = extension_name_upper_count\
    \ + extension_name_lower_count\n        local extension_name_count_upper = extension_name_upper_count\n\
    \        local extension_name_count_lower = extension_name_lower_count\n     \
    \   while i <= #extensions do\n            local next_extension_name = extensions[i]\n\
    \            local next_extension_name_upper = string.upper(next_extension_name)\n\
    \            local next_extension_name_lower = string.lower(next_extension_name)\n\
    \            local next_extension_name_count = #next_extension_name_upper + #next_extension_name_lower\n\
    \            local next_extension_name_count_upper = #next_extension_name_upper\n\
    \            local next_extension_name_count_lower = #next_extension_name_lower\n\
    \            if extension_name_count_upper == next_extension_name_count_upper\
    \ and extension_name_count_lower == next_extension_name_count_lower then\n   \
    \             extension_strength = extension_strength + 1\n            end\n \
    \           i = i + 1\n        end\n        if extension_strength > strong_extension\
    \ then\n            strong_extension = extension_strength\n            strong_extension_name\
    \ = extension_name\n        end\n        i = i + 1\n    end\n    return class_name\
    \ .. '.' .. strong_extension_name\nend", "    local class_name = class_name\n\
    \    local extensions = extensions\n    local strong_ext = ''\n    local strong_ext_name\
    \ = ''\n    local strong_ext_strength = 0\n    for _, ext in ipairs(extensions)\
    \ do\n        local ext_strength = #ext - #ext:lower()\n        if ext_strength\
    \ > strong_ext_strength then\n            strong_ext_strength = ext_strength\n\
    \            strong_ext_name = ext\n        end\n    end\n    strong_ext = class_name\
    \ .. '.' .. strong_ext_name\n    return strong_ext\nend", "    local class_name\
    \ = class_name\n    local extensions = extensions\n    local strong_extension\
    \ = ''\n    local strong_extension_name = ''\n    local strong_extension_strength\
    \ = 0\n    local i = 1\n    while i <= #extensions do\n        local extension_name\
    \ = extensions[i]\n        local extension_strength = 0\n        local extension_cap\
    \ = 0\n        local extension_sm = 0\n        local extension_name_upper = string.upper(extension_name)\n\
    \        local extension_name_lower = string.lower(extension_name)\n        local\
    \ extension_cap_upper = #extension_name_upper\n        local extension_cap_lower\
    \ = #extension_name_lower\n        local extension_sm_upper = 0\n        local\
    \ extension_sm_lower = 0\n        while extension_cap_upper >= 1 do\n        \
    \    extension_cap_upper = extension_cap_upper - 1\n            extension_cap_lower\
    \ = extension_cap_lower + 1\n        end\n        while extension_cap_lower >=\
    \ 1 do\n            extension_cap_lower = extension_cap_lower - 1\n          \
    \  extension_sm_upper = extension_sm_upper + 1\n        end\n        while extension_sm_lower\
    \ >= 1 do\n            extension_sm_lower = extension_sm_lower - 1\n         \
    \   extension_sm_upper = extension_sm_upper + 1\n        end\n        extension_strength\
    \ = extension_cap - extension_sm\n        if extension_strength > strong_extension_strength\
    \ then\n            strong_extension_strength = extension_strength\n         \
    \   strong_extension_name = extension_name\n            strong_extension = class_name\
    \ .. '.' .. extension_name\n        end\n        i = i + 1\n    end\n    return\
    \ strong_extension\nend", "    local class_name = class_name\n    local extensions\
    \ = extensions\n    local strong_extension = ''\n    local i = 1\n    while i\
    \ <= #extensions do\n        local extension = extensions[i]\n        local strength\
    \ = #extension - #extension:lower()\n        if strength > strong_extension then\n\
    \            strong_extension = strength\n            strong_extension_name =\
    \ extension\n        end\n        i = i + 1\n    end\n    return class_name ..\
    \ '.' .. strong_extension_name\nend", "    local class_table = {}\n    for _,\
    \ extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n\
    \    end\n    local strong_extension = nil\n    for _, extension in ipairs(extensions)\
    \ do\n        local strength = 0\n        for _, char in ipairs(extension) do\n\
    \            if char.upper() > strength then\n                strength = char.upper()\n\
    \            end\n        end\n        if strength > strong_extension then\n \
    \           strong_extension = extension\n        end\n    end\n    return class_name\
    \ .. '.' .. strong_extension\nend", "    local class_table = {}\n    for _, extension\
    \ in ipairs(extensions) do\n        local strength = #extension - #extension:lower()\n\
    \        class_table[extension] = strength\n    end\n    local strong_extension\
    \ = ''\n    for _, extension in ipairs(extensions) do\n        if class_table[extension]\
    \ > strong_extension then\n            strong_extension = extension\n        end\n\
    \    end\n    return class_name .. '.' .. strong_extension\nend", "    local class_name\
    \ = class_name\n    local extensions = extensions\n    local strong_ext = ''\n\
    \    local strong_ext_name = ''\n    local strong_ext_strength = 0\n    for _,\
    \ ext in ipairs(extensions) do\n        local ext_strength = #ext - #ext:find('[a-z]')\n\
    \        if ext_strength > strong_ext_strength then\n            strong_ext_strength\
    \ = ext_strength\n            strong_ext_name = ext\n        end\n    end\n  \
    \  strong_ext = class_name .. '.' .. strong_ext_name\n    return strong_ext\n\
    end", "    local class_name = class_name\n    local extensions = extensions\n\
    \    local strong_extension = ''\n    local strong_extension_name = ''\n    local\
    \ strong_extension_strength = 0\n    local i = 1\n    while i <= #extensions do\n\
    \        local extension = extensions[i]\n        local extension_name = extension\n\
    \        local extension_strength = 0\n        local j = 1\n        while j <=\
    \ #extension do\n            if string.char(extension[j]) ~= string.char(extension_name[j])\
    \ then\n                extension_strength = extension_strength + 1\n        \
    \    end\n            j = j + 1\n        end\n        if extension_strength >\
    \ strong_extension_strength then\n            strong_extension_name = extension_name\n\
    \            strong_extension_strength = extension_strength\n            strong_extension\
    \ = extension\n        end\n        i = i + 1\n    end\n    return class_name\
    \ .. '.' .. strong_extension_name .. '.' .. strong_extension\nend", "    local\
    \ class_name = class_name\n    local extensions = extensions\n    local strong_extension\
    \ = ''\n    local strong_extension_name = ''\n    local i = 1\n    while i <=\
    \ #extensions do\n        local extension = extensions[i]\n        local strength\
    \ = #extension - #extension:lower()\n        if strength > strong_extension then\n\
    \            strong_extension = strength\n            strong_extension_name =\
    \ extension\n        end\n        i = i + 1\n    end\n    return class_name ..\
    \ '.' .. strong_extension_name\nend", "    local class_name = class_name\n   \
    \ local extensions = extensions\n    local strong_extension = ''\n    local i\
    \ = 1\n    while i <= #extensions do\n        local extension = extensions[i]\n\
    \        local strength = #extension - #extension:lower()\n        if strength\
    \ > strong_extension then\n            strong_extension = strength\n         \
    \   strong_extension_name = extension\n        end\n        i = i + 1\n    end\n\
    \    return class_name .. '.' .. strong_extension_name\nend", "    local class_table\
    \ = {}\n    for _, extension in ipairs(extensions) do\n        local strength\
    \ = #extension - #extension:lower()\n        table.insert(class_table, {extension,\
    \ strength})\n    end\n    local max_strength = 0\n    for _, extension in ipairs(class_table)\
    \ do\n        if max_strength < extension.strength then\n            max_strength\
    \ = extension.strength\n            local strong_extension = extension.extension\n\
    \        end\n    end\n    return class_name .. '.' .. strong_extension\nend",
  "    local class_name = class_name\n    local extensions = extensions\n    local\
    \ strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength\
    \ = 0\n    local i = 1\n    while i <= #extensions do\n        local extension_name\
    \ = extensions[i]\n        local extension_strength = 0\n        local extension_name_upper\
    \ = string.upper(extension_name)\n        local extension_name_lower = string.lower(extension_name)\n\
    \        local extension_name_upper_count = #extension_name_upper\n        local\
    \ extension_name_lower_count = #extension_name_lower\n        local extension_name_count\
    \ = extension_name_upper_count + extension_name_lower_count\n        local extension_name_strength\
    \ = extension_name_upper_count - extension_name_lower_count\n        if extension_name_strength\
    \ > strong_extension_strength then\n            strong_extension_name = extension_name\n\
    \            strong_extension_strength = extension_name_strength\n           \
    \ strong_extension = class_name .. '.' .. extension_name\n        end\n      \
    \  i = i + 1\n    end\n    return strong_extension\nend", "    local class_name\
    \ = class_name\n    local extensions = extensions\n    local result = class_name\n\
    \    local strength = 0\n    for _, extension in ipairs(extensions) do\n     \
    \   local ext_strength = 0\n        local ext_cap = 0\n        local ext_sm =\
    \ 0\n        local ext_name = extension\n        local ext_name_upper = string.upper(extension)\n\
    \        local ext_name_lower = string.lower(extension)\n        for _, char in\
    \ ipairs(ext_name_upper) do\n            if char == 'A' then\n               \
    \ ext_cap = ext_cap + 1\n            end\n        end\n        for _, char in\
    \ ipairs(ext_name_lower) do\n            if char == 'a' then\n               \
    \ ext_sm = ext_sm + 1\n            end\n        end\n        ext_strength = ext_cap\
    \ - ext_sm\n        if ext_strength > strength then\n            strength = ext_strength\n\
    \            result = class_name .. '.' .. extension\n        end\n    end\n \
    \   return result\nend", "    local class_table = {}\n    for _, extension in\
    \ ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n\
    \    local strong_extension = ''\n    for _, extension in ipairs(extensions) do\n\
    \        local strength = 0\n        for _, char in ipairs(extension) do\n   \
    \         if char.upper() > strength then strength = char.upper()\n        end\n\
    \        if strength > strong_extension then strong_extension = extension\n  \
    \  end\n    return class_name .. '.' .. strong_extension\nend", "    local class_table\
    \ = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table,\
    \ extension)\n    end\n    local strong_extension = nil\n    for _, extension\
    \ in ipairs(extensions) do\n        local strength = 0\n        for _, char in\
    \ ipairs(extension) do\n            strength = strength + (string.upper(char)\
    \ - string.lower(char))\n        end\n        if strength > strong_extension or\
    \ strength == strong_extension and class_table[extension] < class_table[strong_extension]\
    \ then\n            strong_extension = extension\n        end\n    end\n    return\
    \ class_name .. '.' .. strong_extension\nend", "    local class_table = {}\n \
    \   for _, extension in ipairs(extensions) do\n        table.insert(class_table,\
    \ extension)\n    end\n    local class_table_sorted = table.sort(class_table)\n\
    \    local strongest_extension = class_name\n    for _, extension in ipairs(class_table_sorted)\
    \ do\n        if class_name ~= extension then\n            strongest_extension\
    \ = extension\n            break\n        end\n    end\n    return class_name\
    \ .. '.' .. strongest_extension\nend", "    local class_name = class_name\n  \
    \  local extensions = extensions\n    local strong_extension = ''\n    local i\
    \ = 1\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ #extension - #extension:lower()\n        if strength > strong_extension then\n\
    \            strong_extension = extension\n        end\n        i = i + 1\n  \
    \  end\n    return class_name .. '.' .. strong_extension\nend", "    local class_name\
    \ = class_name\n    local extensions = extensions\n    local strong_extension\
    \ = ''\n    local strong_extension_name = ''\n    local strong_extension_strength\
    \ = 0\n    local i = 1\n    while i <= #extensions do\n        local extension_name\
    \ = extensions[i]\n        local extension_strength = 0\n        local extension_name_upper\
    \ = string.upper(extension_name)\n        local extension_name_lower = string.lower(extension_name)\n\
    \        local extension_name_upper_count = #extension_name_upper\n        local\
    \ extension_name_lower_count = #extension_name_lower\n        local extension_name_count\
    \ = extension_name_upper_count + extension_name_lower_count\n        local extension_name_strength\
    \ = extension_name_upper_count - extension_name_lower_count\n        if extension_name_strength\
    \ > strong_extension_strength then\n            strong_extension_strength = extension_name_strength\n\
    \            strong_extension_name = extension_name\n        end\n        i =\
    \ i + 1\n    end\n    if strong_extension_strength > 0 then\n        strong_extension\
    \ = class_name .. '.' .. strong_extension_name\n    end\n    return strong_extension\n\
    end", "    local class_table = {}\n    for _, extension in ipairs(extensions)\
    \ do\n        class_table[extension] = 0\n    end\n    for _, extension in ipairs(extensions)\
    \ do\n        class_table[extension] = class_table[extension] + 1\n    end\n \
    \   local max_strength = 0\n    for _, strength in ipairs(class_table) do\n  \
    \      if strength > max_strength then\n            max_strength = strength\n\
    \            local strongest_extension = class_name .. '.' .. _G.string.lower(extensions[class_table[strength]])\n\
    \        end\n    end\n    return strongest_extension\nend", "    local class_table\
    \ = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table,\
    \ extension)\n    end\n    local class_table_sorted = table.sort(class_table)\n\
    \    local strongest_extension = class_name\n    for _, extension in ipairs(class_table_sorted)\
    \ do\n        if table.count(class_table, extension) == 1 then\n            strongest_extension\
    \ = extension\n            break\n        end\n    end\n    return class_name\
    \ .. '.' .. strongest_extension\nend", "    local class_name = class_name\n  \
    \  local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name\
    \ = ''\n    local strong_extension_strength = 0\n    for i, extension in ipairs(extensions)\
    \ do\n        local extension_name = string.lower(extension)\n        local extension_strength\
    \ = 0\n        for j, c in ipairs(extension_name) do\n            if string.isupper(c)\
    \ then\n                extension_strength = extension_strength + 1\n        \
    \    end\n        end\n        if extension_strength > strong_extension_strength\
    \ then\n            strong_extension_name = extension\n            strong_extension_strength\
    \ = extension_strength\n        end\n    end\n    strong_extension = class_name\
    \ .. '.' .. strong_extension_name\n    return strong_extension\nend", "    local\
    \ class_table = {}\n    for _, extension in ipairs(extensions) do\n        class_table[extension]\
    \ = class_table[extension] or 0\n        class_table[extension] = class_table[extension]\
    \ + 1\n    end\n    local strong_extension = ''\n    for _, extension in ipairs(extensions)\
    \ do\n        if class_table[extension] > class_table[strong_extension] then\n\
    \            strong_extension = extension\n        end\n    end\n    return class_name\
    \ .. '.' .. strong_extension\nend", "    local class_table = {}\n    for _, extension\
    \ in ipairs(extensions) do\n        table.insert(class_table, extension)\n   \
    \ end\n    local class_table_sorted = table.sort(class_table)\n    local strongest_extension\
    \ = class_name\n    for _, extension in ipairs(class_table_sorted) do\n      \
    \  if table.count(class_table, extension) == 1 then\n            strongest_extension\
    \ = class_name .. '.' .. extension\n            break\n        end\n    end\n\
    \    return strongest_extension\nend", "    local class_name = class_name\n  \
    \  local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name\
    \ = ''\n    local strong_extension_strength = 0\n    local i = 1\n    while i\
    \ <= #extensions do\n        local extension = extensions[i]\n        local extension_name\
    \ = string.sub(extension, 1, -1)\n        local extension_strength = #extension_name\
    \ - #extension_name:find('[a-z]')\n        if extension_strength > strong_extension_strength\
    \ then\n            strong_extension_strength = extension_strength\n         \
    \   strong_extension_name = extension_name\n            strong_extension = extension\n\
    \        end\n        i = i + 1\n    end\n    return class_name .. '.' .. strong_extension_name\
    \ .. '.' .. strong_extension\nend", "    local class_table = {}\n    for _, extension\
    \ in ipairs(extensions) do\n        table.insert(class_table, extension)\n   \
    \ end\n    local strong_extension = ''\n    for _, extension in ipairs(extensions)\
    \ do\n        local strength = 0\n        for _, letter in ipairs(extension) do\n\
    \            strength = strength + string.upper(letter)\n        end\n       \
    \ strength = strength - string.lower(extension)\n        if strength > strong_extension\
    \ then\n            strong_extension = extension\n        end\n    end\n    return\
    \ class_name .. '.' .. strong_extension\nend", "    local class_table = {}\n \
    \   for _, extension in ipairs(extensions) do\n        local strength = 0\n  \
    \      for _, c in ipairs(extension) do\n            if string.upper(c) > strength\
    \ then strength = string.upper(c)\n        end\n        table.insert(class_table,\
    \ {extension, strength})\n    end\n    local max_strength = 0\n    for _, entry\
    \ in ipairs(class_table) do\n        if entry[1] > max_strength then max_strength\
    \ = entry[1]\n    end\n    for _, entry in ipairs(class_table) do\n        if\
    \ entry[1] == max_strength then return class_name .. '.' .. entry[0]\n    end\n\
    end", "    local class_table = {}\n    for _, extension in ipairs(extensions)\
    \ do\n        class_table[extension] = 0\n    end\n    for _, extension in ipairs(extensions)\
    \ do\n        local strength = 0\n        for _, char in ipairs(extension) do\n\
    \            strength = strength + class_table[char]\n        end\n        class_table[extension]\
    \ = strength\n    end\n    local max_strength = 0\n    for _, extension in ipairs(extensions)\
    \ do\n        if class_table[extension] > max_strength then\n            max_strength\
    \ = class_table[extension]\n            strongest_extension = extension\n    \
    \    end\n    end\n    return class_name .. '.' .. strongest_extension\nend",
  "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n   \
    \     local strength = 0\n        for _, c in ipairs(extension) do\n         \
    \   if c ~= '.' then strength = strength + 1\n        end\n        table.insert(class_table,\
    \ {extension, strength})\n    end\n    local max_strength = 0\n    for _, extension\
    \ in ipairs(class_table) do\n        if extension[1] > max_strength then max_strength\
    \ = extension[1]\n    end\n    for _, extension in ipairs(class_table) do\n  \
    \      if extension[1] == max_strength then return class_name .. '.' .. extension[0]\n\
    \    end\nend", "    local class_name = class_name\n    local extensions = extensions\n\
    \    local strong_ext = ''\n    local strong_ext_name = ''\n    local strong_ext_strength\
    \ = 0\n    for _, ext in ipairs(extensions) do\n        local ext_name = string.lower(ext)\n\
    \        local ext_strength = 0\n        for _, c in ipairs(ext_name) do\n   \
    \         if string.upper(c) > 0 then\n                ext_strength = ext_strength\
    \ + 1\n            end\n        end\n        if ext_strength > strong_ext_strength\
    \ then\n            strong_ext_strength = ext_strength\n            strong_ext_name\
    \ = ext_name\n            strong_ext = ext\n        end\n    end\n    return class_name\
    \ .. '.' .. strong_ext_name .. '.' .. strong_ext\nend", "    local class_table\
    \ = {}\n    for _, extension in ipairs(extensions) do\n        class_table[extension]\
    \ = class_table[extension] or 0\n        class_table[extension] = class_table[extension]\
    \ + 1\n    end\n    local max_strength = 0\n    local max_extension = nil\n  \
    \  for extension, strength in pairs(class_table) do\n        if strength > max_strength\
    \ then\n            max_strength = strength\n            max_extension = extension\n\
    \        end\n    end\n    return class_name .. '.' .. max_extension\nend", " \
    \   local class_name = class_name\n    local extensions = extensions\n    local\
    \ strong_extension = ''\n    local strong_extension_name = ''\n    local i = 1\n\
    \    local j = 1\n    for i = 1, #extensions, 2 do\n        if string.sub(extensions[i],\
    \ 1, 1) ~= string.sub(extensions[i], 2, 2) then\n            strong_extension\
    \ = class_name .. '.' .. extensions[i]\n            strong_extension_name = extensions[i]\n\
    \            break\n        end\n    end\n    return strong_extension\nend", " \
    \   local class_table = {}\n    for _, extension in ipairs(extensions) do\n  \
    \      table.insert(class_table, extension)\n    end\n    local max_strength =\
    \ 0\n    for _, extension in ipairs(extensions) do\n        local strength = 0\n\
    \        for _, char in ipairs(extension) do\n            strength = strength\
    \ + (string.char_upper(char) - string.char_lower(char))\n        end\n       \
    \ if strength > max_strength then\n            max_strength = strength\n     \
    \       class_table.strongest_extension = extension\n        end\n    end\n  \
    \  return class_name .. '.' .. class_table.strongest_extension\nend", "    local\
    \ class_name = class_name\n    local extensions = extensions\n    local strong_extension\
    \ = ''\n    local strong_extension_name = ''\n    local i = 1\n    local j = 1\n\
    \    local k = 1\n    local l = 1\n    local m = 1\n    local n = 1\n    local\
    \ o = 1\n    local p = 1\n    local q = 1\n    local r = 1\n    local s = 1\n\
    \    local t = 1\n    local u = 1\n    local v = 1\n    local w = 1\n    local\
    \ x = 1\n    local y = 1\n    local z = 1\n    local a = 1\n    local b = 1\n\
    \    local c = 1\n    local d = 1\n    local e = 1\n    local f = 1\n    local\
    \ g = 1\n    local h = 1\n    local i = 1\n    local j = 1\n    local k = 1\n\
    \    local l = 1\n    local m = 1\n    local n = 1\n    local o = 1\n    local\
    \ p = 1\n    local q = 1\n    local r = 1\n    local s = 1\n    local t = 1\n\
    \    local u = 1\n    local v = 1\n    local w = 1\n    local x = 1\n    local\
    \ y = 1\n    local z = 1\n    local a = 1\n    local b = 1\n    local c = 1\n\
    \    local d = 1\n    local e = 1\n    local f = 1\n    local g = 1\n    local\
    \ h = 1\n    local i = 1\n    local j = 1\n    local k = 1\n    local l = 1\n\
    \    local m = 1\n    local n = 1\n    local o = 1\n    local p = 1\n    local\
    \ q = 1\n    local r = 1\n    local s = 1\n    local t = 1\n    local u = 1\n\
    \    local v = 1\n    local w = 1\n    local x = 1\n    local y = 1\n    local\
    \ z = 1\n    local a = 1\n    local b = 1\n    local c = 1\n    local d = 1\n\
    \    local e = 1\n    local f = 1\n    local g = 1\n    local h = 1\n    local\
    \ i = 1\n    local", "    local class_name = class_name\n    local extensions\
    \ = extensions\n    local strong_extension = ''\n    local strong_extension_name\
    \ = ''\n    local strong_extension_strength = 0\n    for _, extension in ipairs(extensions)\
    \ do\n        local extension_name = string.lower(extension)\n        local extension_strength\
    \ = #extension_name - #string.lower(extension_name)\n        if extension_strength\
    \ > strong_extension_strength then\n            strong_extension_strength = extension_strength\n\
    \            strong_extension_name = extension_name\n            strong_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strong_extension_name\
    \ .. '.' .. strong_extension\nend", "    local class_table = {}\n    for _, extension\
    \ in ipairs(extensions) do\n        table.insert(class_table, extension)\n   \
    \ end\n    local strength = 0\n    for _, extension in ipairs(extensions) do\n\
    \        local cap = 0\n        local sm = 0\n        for _, c in ipairs(extension)\
    \ do\n            if c == 'A' or c == 'a' then\n                cap = cap + 1\n\
    \            end\n            if c == 'a' or c == 'A' then\n                sm\
    \ = sm + 1\n            end\n        end\n        strength = strength + (cap -\
    \ sm)\n    end\n    for _, extension in ipairs(extensions) do\n        if strength\
    \ == class_table[extension] then\n            return class_name .. '.' .. extension\n\
    \        end\n    end\nend", "    local class_name = class_name\n    local extensions\
    \ = extensions\n    local strong_extension = ''\n    local strong_extension_name\
    \ = ''\n    local strong_extension_strength = 0\n    for _, extension in ipairs(extensions)\
    \ do\n        local extension_name = string.lower(extension)\n        local extension_strength\
    \ = #extension_name - #extension_name:find('[a-z]')\n        if extension_strength\
    \ > strong_extension_strength then\n            strong_extension_name = extension_name\n\
    \            strong_extension_strength = extension_strength\n            strong_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strong_extension_name\
    \ .. '.' .. strong_extension\nend", "    local class_table = {}\n    for _, extension\
    \ in ipairs(extensions) do\n        local strength = #extension - #extension:lower()\n\
    \        table.insert(class_table, {extension, strength})\n    end\n    local\
    \ max_strength = 0\n    for _, extension in ipairs(extensions) do\n        if\
    \ strength > max_strength then\n            max_strength = strength\n        \
    \    local max_extension = extension\n        end\n    end\n    return class_name\
    \ .. '.' .. max_extension\nend", "    local class_table = {}\n    for _, extension\
    \ in ipairs(extensions) do\n        local strength = 0\n        for _, c in ipairs(extension)\
    \ do\n            strength = strength + c.upper() - c.lower()\n        end\n \
    \       table.insert(class_table, {extension, strength})\n    end\n    local max_strength\
    \ = 0\n    local max_extension = nil\n    for _, extension in ipairs(class_table)\
    \ do\n        if extension.strength > max_strength then\n            max_strength\
    \ = extension.strength\n            max_extension = extension.extension\n    \
    \    end\n    end\n    return class_name .. '.' .. max_extension\nend", "    local\
    \ class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table,\
    \ extension)\n    end\n    local max_strength = 0\n    for _, extension in ipairs(extensions)\
    \ do\n        local strength = 0\n        for _, letter in ipairs(extension) do\n\
    \            strength = strength + (string.upper(letter) - string.lower(letter))\n\
    \        end\n        if strength > max_strength then\n            max_strength\
    \ = strength\n            max_extension = extension\n        end\n    end\n  \
    \  return class_name .. '.' .. max_extension\nend", "    local class_name = class_name\n\
    \    local extensions = extensions\n    local strong_extension = ''\n    local\
    \ i = 1\n    while i <= #extensions do\n        local extension = extensions[i]\n\
    \        local strength = #extension - #extension:lower()\n        if strength\
    \ > strong_extension then\n            strong_extension = strength\n         \
    \   strong_extension_name = extension\n        end\n        i = i + 1\n    end\n\
    \    return class_name .. '.' .. strong_extension_name\nend", "    local class_name\
    \ = class_name\n    local extensions = extensions\n    local strong_extension\
    \ = ''\n    local strong_extension_name = ''\n    local strong_extension_strength\
    \ = 0\n    local i = 1\n    while i <= #extensions do\n        local extension\
    \ = extensions[i]\n        local extension_name = string.lower(extension)\n  \
    \      local extension_strength = #extension_name - #extension_name:find('[a-z]')\n\
    \        if extension_strength > strong_extension_strength then\n            strong_extension\
    \ = class_name\n            strong_extension_name = extension\n            strong_extension_strength\
    \ = extension_strength\n        end\n        i = i + 1\n    end\n    return strong_extension\
    \ .. '.' .. strong_extension_name\nend", "    local class_table = {}\n    for\
    \ _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n\
    \    end\n    local class_table_sorted = table.sort(class_table, function(a, b)\
    \ return a[1] - b[1] end)\n    local strongest_extension = class_table_sorted[1][1]\n\
    \    return class_name..'.'..strongest_extension\nend", "    local class_name\
    \ = class_name\n    local extensions = extensions\n    local strong_extension\
    \ = ''\n    local strong_extension_name = ''\n    local strong_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        local extension_name = extension\n        local extension_name_upper\
    \ = string.upper(extension_name)\n        local extension_name_lower = string.lower(extension_name)\n\
    \        for _, char in ipairs(extension_name_upper) do\n            if char ==\
    \ char then\n                extension_strength = extension_strength + 1\n   \
    \         end\n        end\n        for _, char in ipairs(extension_name_lower)\
    \ do\n            if char == char then\n                extension_strength = extension_strength\
    \ + 1\n            end\n        end\n        if extension_strength > strong_extension_strength\
    \ then\n            strong_extension_strength = extension_strength\n         \
    \   strong_extension_name = extension_name\n            strong_extension = class_name\
    \ .. '.' .. extension_name\n        end\n    end\n    return strong_extension\n\
    end", "    local class_table = {}\n    for _, extension in ipairs(extensions)\
    \ do\n        table.insert(class_table, extension)\n    end\n    local class_table_sorted\
    \ = table.sort(class_table, function(a, b)\n        return table.sub(a, 1, 1)\
    \ - table.sub(b, 1, 1)\n    end)\n    local strongest_extension = class_name\n\
    \    for _, extension in ipairs(class_table_sorted) do\n        if table.sub(extension,\
    \ 1, 1) > table.sub(strongest_extension, 1, 1) then\n            strongest_extension\
    \ = extension\n        end\n    end\n    return table.concat(strongest_extension,\
    \ '.', 1, 1)\nend", "    local class_table = {}\n    for _, extension in ipairs(extensions)\
    \ do\n        local strength = #extension - #extension:lower()\n        table.insert(class_table,\
    \ {extension, strength})\n    end\n    local max_strength = 0\n    local max_extension\
    \ = ''\n    for _, extension in ipairs(extensions) do\n        local strength\
    \ = #extension - #extension:lower()\n        if strength > max_strength then\n\
    \            max_strength = strength\n            max_extension = extension\n\
    \        end\n    end\n    return class_name .. '.' .. max_extension\nend", " \
    \   local class_name = class_name\n    local extensions = extensions\n    local\
    \ strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength\
    \ = 0\n    local i = 1\n    while i <= #extensions do\n        local extension_name\
    \ = extensions[i]\n        local extension_strength = 0\n        local extension_name_upper\
    \ = string.upper(extension_name)\n        local extension_name_lower = string.lower(extension_name)\n\
    \        local extension_name_upper_count = 0\n        local extension_name_lower_count\
    \ = 0\n        while i <= #extensions do\n            if string.upper(extensions[i])\
    \ == extension_name_upper then\n                extension_name_upper_count = extension_name_upper_count\
    \ + 1\n            end\n            if string.lower(extensions[i]) == extension_name_lower\
    \ then\n                extension_name_lower_count = extension_name_lower_count\
    \ + 1\n            end\n            i = i + 1\n        end\n        extension_strength\
    \ = extension_name_upper_count - extension_name_lower_count\n        if extension_strength\
    \ > strong_extension_strength then\n            strong_extension_strength = extension_strength\n\
    \            strong_extension_name = extension_name\n        end\n        i =\
    \ i + 1\n    end\n    strong_extension = class_name .. '.' .. strong_extension_name\n\
    \    return strong_extension\nend", "    local class_name = class_name\n    local\
    \ extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name\
    \ = ''\n    local strong_extension_strength = 0\n    local i = 1\n    while i\
    \ <= #extensions do\n        local extension_name = extensions[i]\n        local\
    \ extension_strength = 0\n        local extension_name_upper = string.upper(extension_name)\n\
    \        local extension_name_lower = string.lower(extension_name)\n        local\
    \ extension_name_upper_count = 0\n        local extension_name_lower_count = 0\n\
    \        while i <= #extensions do\n            local extension_name_upper_count\
    \ = extension_name_upper_count + string.upper(extensions[i])\n            local\
    \ extension_name_lower_count = extension_name_lower_count + string.lower(extensions[i])\n\
    \            i = i + 1\n        extension_strength = extension_name_upper_count\
    \ - extension_name_lower_count\n        if extension_strength > strong_extension_strength\
    \ then\n            strong_extension_strength = extension_strength\n         \
    \   strong_extension_name = extension_name\n        end\n        i = i + 1\n \
    \   end\n    strong_extension = class_name .. '.' .. strong_extension_name\n \
    \   return strong_extension\nend", "    local class_name = class_name\n    local\
    \ extensions = extensions\n    local strong_extension = class_name\n    local\
    \ strength = 0\n    for _, ext in ipairs(extensions) do\n        local ext_strength\
    \ = math.floor(string.find(ext, 'A') - string.find(ext, 'a'))\n        if ext_strength\
    \ > strength then\n            strength = ext_strength\n            strong_extension\
    \ = ext\n        end\n    end\n    return strong_extension\nend", "    local class_table\
    \ = {}\n    for _, extension in ipairs(extensions) do\n        class_table[extension]\
    \ = class_table[extension] or 0\n        class_table[extension] = class_table[extension]\
    \ + 1\n    end\n    local strongest_extension = nil\n    for extension, strength\
    \ in ipairs(class_table) do\n        if strength > 0 and strength > class_table[strongest_extension]\
    \ then\n            strongest_extension = extension\n        end\n    end\n  \
    \  return class_name .. '.' .. strongest_extension\nend", "    local class_table\
    \ = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table,\
    \ extension)\n    end\n    local strong_extension = ''\n    for _, extension in\
    \ ipairs(extensions) do\n        local strength = 0\n        for _, char in ipairs(extension)\
    \ do\n            strength = strength + (string.upper(char) - string.lower(char))\n\
    \        end\n        if strength > strong_extension then\n            strong_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strong_extension\n\
    end", "    local class_table = {}\n    for _, extension in ipairs(extensions)\
    \ do\n        table.insert(class_table, extension)\n    end\n    local strong_extension\
    \ = nil\n    for _, extension in ipairs(extensions) do\n        local strength\
    \ = 0\n        for _, char in ipairs(extension) do\n            if char.upper()\
    \ > strength then\n                strength = char.upper()\n            end\n\
    \        end\n        if strength > strong_extension then\n            strong_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strong_extension\n\
    end", "    local class_table = {}\n    for _, extension in ipairs(extensions)\
    \ do\n        local strength = #extension - #extension:lower()\n        table.insert(class_table,\
    \ {extension, strength})\n    end\n    local strongest_extension = class_table[1][1]\n\
    \    for _, extension in ipairs(extensions) do\n        if strength < class_table[#\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                              ", "    local class_table = {}\n\
    \    for _, extension in ipairs(extensions) do\n        local strength = #extension\
    \ - #extension:lower()\n        table.insert(class_table, {extension, strength})\n\
    \    end\n    local max_strength = 0\n    for _, extension in ipairs(extensions)\
    \ do\n        local strength = #extension - #extension:lower()\n        if strength\
    \ > max_strength then\n            max_strength = strength\n            max_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. max_extension\n\
    end", "    local class_name = class_name\n    local extensions = extensions\n\
    \    local result = class_name\n    local strength = 0\n    for _, extension in\
    \ ipairs(extensions) do\n        local strength = strength + tonumber(extension[1])\
    \ - tonumber(extension[2])\n        if strength > 0 then\n            result =\
    \ result .. '.' .. extension[1]\n        end\n    end\n    return result\nend",
  "    local class_name = class_name\n    local extensions = extensions\n    local\
    \ strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_name\
    \ = string.lower(extension)\n        local extension_name_length = #extension_name\n\
    \        local extension_strength = 0\n        for i=1, extension_name_length\
    \ do\n            if string.upper(extension_name[i]) ~= string.upper(extension_name[i-1])\
    \ then\n                extension_strength = extension_strength + 1\n        \
    \    end\n        end\n        if extension_strength > strong_extension_strength\
    \ then\n            strong_extension_name = extension\n            strong_extension_strength\
    \ = extension_strength\n        end\n    end\n    if strong_extension_strength\
    \ > 0 then\n        strong_extension = class_name .. '.' .. strong_extension_name\n\
    \    end\n    return strong_extension\nend", "    local class_table = {}\n   \
    \ for _, extension in ipairs(extensions) do\n        table.insert(class_table,\
    \ extension)\n    end\n    local class_table_sorted = class_table:sort()\n   \
    \ local class_name_sorted = class_name:lower()\n    local strength = 0\n    for\
    \ _, extension in ipairs(class_table_sorted) do\n        local extension_sorted\
    \ = extension:lower()\n        local extension_strength = 0\n        for _, letter\
    \ in ipairs(extension_sorted) do\n            if string.char(letter) == string.char(class_name_sorted[string.charindex(class_name_sorted,\
    \ letter)]) then\n                extension_strength = extension_strength + 1\n\
    \            end\n        end\n        if extension_strength > strength then\n\
    \            strength = extension_strength\n            local strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end", "    local class_table = {}\n    for _, extension in ipairs(extensions)\
    \ do\n        local strength = #extension - #extension:lower()\n        table.insert(class_table,\
    \ {extension, strength})\n    end\n    local max_strength = 0\n    for _, extension\
    \ in ipairs(extensions) do\n        if strength > max_strength then\n        \
    \    max_strength = strength\n            max_extension = extension\n        end\n\
    \    end\n    return class_name .. '.' .. max_extension\nend", "    local class_table\
    \ = {}\n    for _, extension in ipairs(extensions) do\n        local strength\
    \ = #extension - #extension:lower()\n        table.insert(class_table, {extension,\
    \ strength})\n    end\n    local max_strength = 0\n    for _, extension in ipairs(extensions)\
    \ do\n        if strength > max_strength then\n            max_strength = strength\n\
    \            class_table.extension = extension\n        end\n    end\n    return\
    \ class_name .. '.' .. class_table.extension\nend", "    local class_name = class_name\n\
    \    local extensions = extensions\n    local result = class_name\n    local strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local ext_strength\
    \ = 0\n        for _, char in ipairs(extension) do\n            if char.upper()\
    \ > 0 then\n                ext_strength = ext_strength + 1\n            end\n\
    \        end\n        if ext_strength > strength then\n            strength =\
    \ ext_strength\n            result = class_name .. '.' .. extension\n        end\n\
    \    end\n    return result\nend", "    local class_name = class_name\n    local\
    \ extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name\
    \ = ''\n    local i = 1\n    local j = 1\n    local k = 1\n    for i = 1, #extensions,\
    \ 2 do\n        if #extensions[i] == #extensions[i+1] then\n            if #extensions[i]\
    \ > #extensions[k] then\n                k = i\n            end\n        end\n\
    \    end\n    for i = 1, #extensions, 2 do\n        if #extensions[i] == #extensions[k]\
    \ then\n            if #extensions[i] > #extensions[j] then\n                j\
    \ = i\n            end\n        end\n    end\n    for i = 1, #extensions, 2 do\n\
    \        if #extensions[i] == #extensions[j] then\n            if #extensions[i]\
    \ > #extensions[k] then\n                k = i\n            end\n        end\n\
    \    end\n    for i = 1, #extensions, 2 do\n        if #extensions[i] == #extensions[k]\
    \ then\n            if #extensions[i] > #extensions[j] then\n                j\
    \ = i\n            end\n        end\n    end\n    for i = 1, #extensions, 2 do\n\
    \        if #extensions[i] == #extensions[j] then\n            if #extensions[i]\
    \ > #extensions[k] then\n                k = i\n            end\n        end\n\
    \    end\n    for i = 1, #extensions, 2 do\n        if #extensions[i] == #extensions[k]\
    \ then\n            if #extensions[i] > #extensions[j] then\n                j\
    \ = i\n            end\n        end\n    end\n    for i = 1, #extensions, 2 do\n\
    \        if #extensions[i] == #extensions[j] then\n            if #extensions[i]\
    \ > #extensions[k] then\n                k = i\n            end\n        end\n\
    \    end\n    for i = 1, #extensions, 2 do\n        if #extensions[i] == #extensions[k]\
    \ then", "    local class_table = {}\n    for _, extension in ipairs(extensions)\
    \ do\n        local strength = #extension - #extension:lower()\n        table.insert(class_table,\
    \ {extension, strength})\n    end\n    local max_strength = 0\n    for _, extension\
    \ in ipairs(extensions) do\n        if strength > max_strength then\n        \
    \    max_strength = strength\n            max_extension = extension\n        end\n\
    \    end\n    return class_name .. '.' .. max_extension\nend", "    local class_table\
    \ = {}\n    for _, extension in ipairs(extensions) do\n        local strength\
    \ = #extension - #extension:lower()\n        table.insert(class_table, {extension,\
    \ strength})\n    end\n    local max_strength = 0\n    for _, extension in ipairs(class_table)\
    \ do\n        if extension[1] > max_strength then\n            max_strength =\
    \ extension[1]\n            max_extension = extension[2]\n        end\n    end\n\
    \    return class_name .. '.' .. max_extension\nend", "    local class_table =\
    \ {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table,\
    \ extension)\n    end\n    local strength = 0\n    for _, extension in ipairs(extensions)\
    \ do\n        local cap = 0\n        local sm = 0\n        for _, c in ipairs(extension)\
    \ do\n            if c == 'A' then\n                cap = cap + 1\n          \
    \  elseif c == 'a' then\n                cap = cap + 1\n            end\n    \
    \        if c == 'A' then\n                sm = sm + 1\n            elseif c ==\
    \ 'a' then\n                sm = sm + 1\n            end\n        end\n      \
    \  strength = strength + (cap - sm)\n    end\n    local max_strength = 0\n   \
    \ for _, extension in ipairs(extensions) do\n        if strength < max_strength\
    \ then\n            max_strength = strength\n            local max_extension =\
    \ extension\n        end\n    end\n    return class_name .. '.' .. max_extension\n\
    end", "    local class_name = class_name\n    local extensions = extensions\n\
    \    local strong_extension = ''\n    local strong_extension_name = ''\n    local\
    \ strong_extension_strength = 0\n    for i, extension in ipairs(extensions) do\n\
    \        local extension_name = string.lower(extension)\n        local extension_strength\
    \ = 0\n        for j, letter in ipairs(extension_name) do\n            if string.upper(letter)\
    \ == string.upper(class_name[j]) then\n                extension_strength = extension_strength\
    \ + 1\n            end\n        end\n        if extension_strength > strong_extension_strength\
    \ then\n            strong_extension_name = extension_name\n            strong_extension_strength\
    \ = extension_strength\n        end\n    end\n    if strong_extension_strength\
    \ > 0 then\n        strong_extension = class_name .. '.' .. strong_extension_name\n\
    \    end\n    return strong_extension\nend", "    local class_table = {}\n   \
    \ for _, extension in ipairs(extensions) do\n        table.insert(class_table,\
    \ extension)\n    end\n    local strength = 0\n    for _, extension in ipairs(extensions)\
    \ do\n        local cap = string.find(extension, 'A')\n        local sm = string.find(extension,\
    \ 'a')\n        strength = strength + (cap - sm)\n    end\n    local result =\
    \ class_name\n    for _, extension in ipairs(extensions) do\n        if strength\
    \ == table.count(class_table) then\n            result = result .. '.' .. extension\n\
    \            break\n        end\n    end\n    return result\nend", "    local\
    \ class_name = class_name\n    local extensions = extensions\n    local strong_extension\
    \ = ''\n    local strong_extension_name = ''\n    local i = 1\n    for _, extension\
    \ in ipairs(extensions) do\n        local strength = #extension - #extension:lower()\n\
    \        if strength > strong_extension then\n            strong_extension = strength\n\
    \            strong_extension_name = extension\n        end\n    end\n    return\
    \ class_name .. '.' .. strong_extension_name\nend", "    local class_name = class_name\n\
    \    local extensions = extensions\n    local strong_extension = nil\n    local\
    \ strong_extension_name = nil\n    local strong_extension_strength = nil\n   \
    \ for _, extension in ipairs(extensions) do\n        local extension_name = string.lower(extension)\n\
    \        local extension_strength = 0\n        for _, char in ipairs(extension_name)\
    \ do\n            if char == 'a' or char == 'A' then\n                extension_strength\
    \ = extension_strength + 1\n            end\n        end\n        if extension_strength\
    \ > strong_extension_strength then\n            strong_extension = extension\n\
    \            strong_extension_name = extension_name\n            strong_extension_strength\
    \ = extension_strength\n        end\n    end\n    return class_name .. '.' ..\
    \ strong_extension_name\nend", "    local class_name = class_name\n    local extensions\
    \ = extensions\n    local strong_extension = ''\n    local strong_extension_name\
    \ = ''\n    local strong_extension_strength = 0\n    for _, ext in ipairs(extensions)\
    \ do\n        local ext_strength = 0\n        local ext_name = ext\n        for\
    \ _, char in ipairs(ext_name) do\n            if char.upper() > 0 then\n     \
    \           ext_strength = ext_strength + 1\n            end\n        end\n  \
    \      if ext_strength > strong_extension_strength then\n            strong_extension_strength\
    \ = ext_strength\n            strong_extension_name = ext_name\n            strong_extension\
    \ = class_name .. '.' .. ext_name\n        end\n    end\n    return strong_extension\n\
    end", "    local class_name = class_name\n    local extensions = extensions\n\
    \    local result = class_name\n    for _, extension in ipairs(extensions) do\n\
    \        local strength = #extension - #extension:lower()\n        if strength\
    \ > result:\n            result = extension\n    end\n    return result\nend",
  "    local class_name = class_name\n    local extensions = extensions\n    local\
    \ strong_ext = ''\n    local i = 1\n    for _, ext in ipairs(extensions) do\n\
    \        local ext_name = string.lower(ext)\n        local ext_cap = #ext_name\n\
    \        local ext_sm = #ext_name\n        for _, char in ipairs(ext_name) do\n\
    \            if char.upper() then ext_cap = ext_cap + 1 end\n            if char.lower()\
    \ then ext_sm = ext_sm + 1 end\n        local strength = ext_cap - ext_sm\n  \
    \      if strength > strong_ext then strong_ext = strength end\n        i = i\
    \ + 1\n    end\n    return class_name .. '.' .. strong_ext\nend", "    local class_name\
    \ = class_name\n    local extensions = extensions\n    local strong_extension\
    \ = ''\n    local i = 1\n    for _, extension in ipairs(extensions) do\n     \
    \   local strength = #extension - #extension:lower()\n        if strength > strong_extension\
    \ then\n            strong_extension = strength\n            strong_extension_name\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strong_extension_name\n\
    end", "    local class_name = class_name\n    local extensions = extensions\n\
    \    local strong_extension = ''\n    local strong_extension_name = ''\n    local\
    \ i = 1\n    for _, extension in ipairs(extensions) do\n        local strength\
    \ = #extension - #extension:lower()\n        if strength > strong_extension then\n\
    \            strong_extension = strength\n            strong_extension_name =\
    \ extension\n        end\n        i = i + 1\n    end\n    return class_name ..\
    \ '.' .. strong_extension_name\nend", "    local class_name = class_name\n   \
    \ local extensions = extensions\n    local strong_ext = ''\n    local strong_ext_name\
    \ = ''\n    local strong_ext_strength = 0\n    for _, ext in ipairs(extensions)\
    \ do\n        local ext_strength = 0\n        local ext_name = ext\n        for\
    \ _, char in ipairs(ext_name) do\n            if char.upper() == char then\n \
    \               ext_strength = ext_strength + 1\n            end\n        end\n\
    \        if ext_strength > strong_ext_strength then\n            strong_ext_name\
    \ = ext_name\n            strong_ext_strength = ext_strength\n        end\n  \
    \  end\n    strong_ext = class_name .. '.' .. strong_ext_name\n    return strong_ext\n\
    end", "    local class_name = class_name\n    local extensions = extensions\n\
    \    local strong_ext = ''\n    local strong_ext_name = ''\n    local i = 1\n\
    \    for _, ext in ipairs(extensions) do\n        local ext_name = string.lower(ext)\n\
    \        local ext_cap = #ext_name\n        local ext_sm = #ext_name\n       \
    \ for i=1, ext_cap do\n            if ext_name[i] == 'A' then\n              \
    \  ext_sm = ext_sm + 1\n            end\n        end\n        if ext_sm > strong_ext_name\
    \ then\n            strong_ext_name = ext_name\n            strong_ext = ext\n\
    \        end\n    end\n    return class_name .. '.' .. strong_ext_name .. '.'\
    \ .. strong_ext\nend", "    local class_name = class_name\n    local extensions\
    \ = extensions\n    local strong_ext = ''\n    local strong_ext_name = ''\n  \
    \  local strong_ext_strength = 0\n    for _, ext in ipairs(extensions) do\n  \
    \      local ext_strength = #ext - #ext:find('[a-z]')\n        if ext_strength\
    \ > strong_ext_strength then\n            strong_ext_strength = ext_strength\n\
    \            strong_ext_name = ext\n        end\n    end\n    strong_ext = class_name\
    \ .. '.' .. strong_ext_name\n    return strong_ext\nend", "    local class_name\
    \ = class_name\n    local extensions = extensions\n    local strong_extension\
    \ = ''\n    local strong_extension_name = ''\n    local strong_extension_strength\
    \ = 0\n    local i = 1\n    for _, extension in ipairs(extensions) do\n      \
    \  local extension_strength = 0\n        local extension_name = extension\n  \
    \      local extension_name_length = #extension_name\n        for _, char in ipairs(extension_name)\
    \ do\n            if char == 'A' or char == 'a' then\n                extension_strength\
    \ = extension_strength + 1\n            end\n        end\n        if extension_strength\
    \ > strong_extension_strength then\n            strong_extension_name = extension_name\n\
    \            strong_extension_strength = extension_strength\n            strong_extension\
    \ = extension\n        end\n        i = i + 1\n    end\n    return class_name\
    \ .. '.' .. strong_extension_name\nend", "    local class_table = {}\n    for\
    \ _, extension in ipairs(extensions) do\n        local strength = #extension -\
    \ #extension:lower()\n        table.insert(class_table, {extension, strength})\n\
    \    end\n    local max_strength = 0\n    for _, extension in ipairs(class_table)\
    \ do\n        if extension[1] > max_strength then\n            max_strength =\
    \ extension[1]\n            max_extension = extension[2]\n        end\n    end\n\
    \    return class_name .. '.' .. max_extension\nend", "    local class_table =\
    \ {}\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ #extension - #extension:lower()\n        table.insert(class_table, {extension,\
    \ strength})\n    end\n    local max_strength = 0\n    local max_extension = ''\n\
    \    for _, extension in ipairs(class_table) do\n        if strength > max_strength\
    \ then\n            max_strength = strength\n            max_extension = extension\n\
    \        end\n    end\n    return class_name .. '.' .. max_extension\nend", " \
    \   local class_name = class_name\n    local extensions = extensions\n    local\
    \ strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength\
    \ = 0\n    local i = 1\n    while i <= #extensions do\n        local extension_name\
    \ = extensions[i]\n        local extension_strength = 0\n        local extension_name_length\
    \ = #extension_name\n        local j = 1\n        while j <= extension_name_length\
    \ do\n            if string.char(extension_name[j]) ~= string.char(extension_name[j-1])\
    \ then\n                extension_strength = extension_strength + 1\n        \
    \    end\n            j = j + 1\n        end\n        if extension_strength >\
    \ strong_extension_strength then\n            strong_extension_strength = extension_strength\n\
    \            strong_extension_name = extension_name\n        end\n        i =\
    \ i + 1\n    end\n    if strong_extension_strength > 0 then\n        strong_extension\
    \ = class_name .. '.' .. strong_extension_name\n    end\n    return strong_extension\n\
    end", "    local table = {}\n    for _, extension in ipairs(extensions) do\n \
    \       table[extension] = table[extension] or 0\n        table[extension] = table[extension]\
    \ + tonumber(string.upper(extension))\n    end\n    local max = 0\n    local max_extension\
    \ = nil\n    for extension, strength in pairs(table) do\n        if strength >\
    \ max then\n            max = strength\n            max_extension = extension\n\
    \        end\n    end\n    return class_name .. '.' .. max_extension\nend", " \
    \   local class_name = class_name\n    local extensions = extensions\n    local\
    \ strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength\
    \ = 0\n    local i = 1\n    while i <= #extensions do\n        local extension\
    \ = extensions[i]\n        local extension_name = string.sub(extension, 1, -1)\n\
    \        local extension_strength = #extension_name - #extension_name:find('[a-z]')\n\
    \        if extension_strength > strong_extension_strength then\n            strong_extension_strength\
    \ = extension_strength\n            strong_extension_name = extension_name\n \
    \           strong_extension = class_name .. '.' .. strong_extension_name\n  \
    \      end\n        i = i + 1\n    end\n    return strong_extension\nend", " \
    \   local class_name = class_name\n    local extensions = extensions\n    local\
    \ strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_name\
    \ = string.lower(extension)\n        local extension_name_length = #extension_name\n\
    \        local extension_strength = 0\n        for i = 1, extension_name_length\
    \ do\n            if string.upper(extension_name[i]) ~= string.upper(extension_name[i-1])\
    \ then\n                extension_strength = extension_strength + 1\n        \
    \    end\n        end\n        if extension_strength > strong_extension_strength\
    \ then\n            strong_extension_name = extension\n            strong_extension_strength\
    \ = extension_strength\n        end\n    end\n    if strong_extension_strength\
    \ > 0 then\n        strong_extension = class_name .. '.' .. strong_extension_name\n\
    \    end\n    return strong_extension\nend", "    local class_name = class_name\n\
    \    local extensions = extensions\n    local strong_extension = ''\n    local\
    \ i = 1\n    while i <= #extensions do\n        local extension = extensions[i]\n\
    \        local strength = #extension - #extension:lower()\n        if strength\
    \ > strong_extension then\n            strong_extension = strength\n         \
    \   strong_extension_name = extension\n        end\n        i = i + 1\n    end\n\
    \    return class_name .. '.' .. strong_extension_name\nend", "    local class_name\
    \ = class_name\n    local extensions = extensions\n    local strong_extension\
    \ = ''\n    local strong_extension_name = ''\n    local strong_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_name\
    \ = string.lower(extension)\n        local extension_strength = 0\n        for\
    \ _, c in ipairs(extension_name) do\n            if c >= 'A' and c <= 'Z' then\n\
    \                extension_strength = extension_strength + 1\n            end\n\
    \        end\n        if extension_strength > strong_extension_strength then\n\
    \            strong_extension_name = extension\n            strong_extension_strength\
    \ = extension_strength\n        end\n    end\n    if strong_extension_strength\
    \ > 0 then\n        strong_extension = class_name .. '.' .. strong_extension_name\n\
    \    end\n    return strong_extension\nend", "    local class_name = class_name\n\
    \    local extensions = extensions\n    local strong_extension = ''\n    local\
    \ strong_extension_name = ''\n    local i = 1\n    local j = 1\n    for i = 1,\
    \ #extensions, 2 do\n        if #extensions[i] == #extensions[i - 1] then\n  \
    \          if #extensions[i] > #extensions[j] then\n                strong_extension_name\
    \ = extensions[i]\n                strong_extension = class_name .. '.' .. strong_extension_name\n\
    \                j = i\n            end\n        end\n    end\n    return strong_extension\n\
    end", "    local class_name = class_name\n    local extensions = extensions\n\
    \    local strong_extension = ''\n    local strong_extension_name = ''\n    local\
    \ strong_extension_strength = 0\n    local i = 1\n    while i <= #extensions do\n\
    \        local extension_name = extensions[i]\n        local extension_strength\
    \ = 0\n        local extension_cap = 0\n        local extension_sm = 0\n     \
    \   local extension_name_upper = string.upper(extension_name)\n        local extension_name_lower\
    \ = string.lower(extension_name)\n        local extension_cap_upper = #extension_name_upper\n\
    \        local extension_cap_lower = #extension_name_lower\n        local extension_sm_upper\
    \ = #extension_name_upper - extension_cap_upper\n        local extension_sm_lower\
    \ = #extension_name_lower - extension_cap_lower\n        extension_strength =\
    \ extension_sm_upper - extension_sm_lower\n        extension_cap = extension_cap_upper\n\
    \        extension_sm = extension_sm_upper\n        if extension_strength > strong_extension_strength\
    \ then\n            strong_extension_strength = extension_strength\n         \
    \   strong_extension_name = extension_name\n            strong_extension = class_name\
    \ .. '.' .. extension_name\n        end\n        i = i + 1\n    end\n    return\
    \ strong_extension\nend", "    local class_table = {}\n    for _, extension in\
    \ ipairs(extensions) do\n        table.insert(class_table, extension)\n    end\n\
    \    local class_table_sorted = class_table:sort()\n    local strongest_extension\
    \ = class_table_sorted[1]\n    return class_name..'.'..strongest_extension\nend",
  "    local class_name = class_name\n    local extensions = extensions\n    local\
    \ strong_extension = ''\n    local strong_extension_name = ''\n    local i = 1\n\
    \    local j = 1\n    local k = 1\n    local l = 1\n    local m = 1\n    local\
    \ n = 1\n    local o = 1\n    local p = 1\n    local q = 1\n    local r = 1\n\
    \    local s = 1\n    local t = 1\n    local u = 1\n    local v = 1\n    local\
    \ w = 1\n    local x = 1\n    local y = 1\n    local z = 1\n    local a = 1\n\
    \    local b = 1\n    local c = 1\n    local d = 1\n    local e = 1\n    local\
    \ f = 1\n    local g = 1\n    local h = 1\n    local i = 1\n    local j = 1\n\
    \    local k = 1\n    local l = 1\n    local m = 1\n    local n = 1\n    local\
    \ o = 1\n    local p = 1\n    local q = 1\n    local r = 1\n    local s = 1\n\
    \    local t = 1\n    local u = 1\n    local v = 1\n    local w = 1\n    local\
    \ x = 1\n    local y = 1\n    local z = 1\n    local a = 1\n    local b = 1\n\
    \    local c = 1\n    local d = 1\n    local e = 1\n    local f = 1\n    local\
    \ g = 1\n    local h = 1\n    local i = 1\n    local j = 1\n    local k = 1\n\
    \    local l = 1\n    local m = 1\n    local n = 1\n    local o = 1\n    local\
    \ p = 1\n    local q = 1\n    local r = 1\n    local s = 1\n    local t = 1\n\
    \    local u = 1\n    local v = 1\n    local w = 1\n    local x = 1\n    local\
    \ y = 1\n    local z = 1\n    local a = 1\n    local b = 1\n    local c = 1\n\
    \    local d = 1\n    local e = 1\n    local f = 1\n    local g = 1\n    local\
    \ h = 1\n    local i = 1\n    local", "    local class_name = class_name\n   \
    \ local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name\
    \ = ''\n    local strong_extension_strength = 0\n    for _, extension in ipairs(extensions)\
    \ do\n        local extension_name = string.lower(extension)\n        local extension_strength\
    \ = 0\n        for _, char in ipairs(extension_name) do\n            if char.upper()\
    \ > 0 then\n                extension_strength = extension_strength + 1\n    \
    \        end\n        end\n        if extension_strength > strong_extension_strength\
    \ then\n            strong_extension_name = extension\n            strong_extension_strength\
    \ = extension_strength\n        end\n    end\n    strong_extension = class_name\
    \ .. '.' .. strong_extension_name\n    return strong_extension\nend", "    local\
    \ class_name = class_name\n    local extensions = extensions\n    local strong_extension\
    \ = ''\n    local strong_extension_name = ''\n    local strong_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_name\
    \ = string.lower(extension)\n        local extension_strength = 0\n        for\
    \ _, c in ipairs(extension_name) do\n            if c ~= 'a' and c ~= 'e' and\
    \ c ~= 'i' and c ~= 'o' and c ~= 'u' then\n                extension_strength\
    \ = extension_strength + 1\n            end\n        end\n        if extension_strength\
    \ > strong_extension_strength then\n            strong_extension_name = extension\n\
    \            strong_extension_strength = extension_strength\n        end\n   \
    \ end\n    if strong_extension_strength > 0 then\n        strong_extension = class_name\
    \ .. '.' .. strong_extension_name\n    end\n    return strong_extension\nend",
  "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n   \
    \     local strength = #extension - #extension:lower()\n        table.insert(class_table,\
    \ {extension, strength})\n    end\n    local max_strength = 0\n    local max_extension\
    \ = nil\n    for _, extension in ipairs(extensions) do\n        if strength >\
    \ max_strength then\n            max_strength = strength\n            max_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. max_extension\n\
    end", "    local class_name = class_name\n    local extensions = extensions\n\
    \    local strong_extension = ''\n    local i = 1\n    while i <= #extensions\
    \ do\n        local extension = extensions[i]\n        local strength = #extension\
    \ - #extension:lower()\n        if strength > strong_extension then\n        \
    \    strong_extension = strength\n            strong_extension_name = extension\n\
    \        end\n        i = i + 1\n    end\n    return class_name .. '.' .. strong_extension_name\n\
    end", "    local table = {}\n    for _, extension in ipairs(extensions) do\n \
    \       table[extension] = table[extension] or 0\n        table[extension] = table[extension]\
    \ + tonumber(string.upper(extension))\n    end\n    local max = math.min(table)\n\
    \    for _, extension in ipairs(table) do\n        if table[extension] == max\
    \ then\n            return class_name .. '.' .. extension\n        end\n    end\n\
    end", "    local class_table = {}\n    for _, extension in ipairs(extensions)\
    \ do\n        local strength = #extension - #extension:lower()\n        table.insert(class_table,\
    \ {extension, strength})\n    end\n    local max_strength = 0\n    local max_extension\
    \ = nil\n    for _, extension in ipairs(extensions) do\n        if strength =\
    \ #extension - #extension:lower() then\n            if strength > max_strength\
    \ then\n                max_strength = strength\n                max_extension\
    \ = extension\n            end\n        end\n    end\n    return class_name ..\
    \ '.' .. max_extension\nend", "    local table = {}\n    for _, extension in ipairs(extensions)\
    \ do\n        table[extension] = table[extension] or 0\n        table[extension]\
    \ = table[extension] + tonumber(string.upper(extension))\n    end\n    local max\
    \ = math.min(table)\n    for _, extension in ipairs(table) do\n        if table[extension]\
    \ == max then\n            return class_name .. '.' .. extension\n        end\n\
    \    end\nend", "    local class_name = class_name\n    local extensions = extensions\n\
    \    local strong_extension = ''\n    local strong_extension_name = ''\n    local\
    \ i = 1\n    for _, extension in ipairs(extensions) do\n        local strength\
    \ = #extension - #extension:lower()\n        if strength > strong_extension then\n\
    \            strong_extension = strength\n            strong_extension_name =\
    \ extension\n        end\n        i = i + 1\n    end\n    return class_name ..\
    \ '.' .. strong_extension_name\nend", "    local class_name = class_name\n   \
    \ local extensions = extensions\n    local strong_extension = class_name\n   \
    \ local strong_extension_name = ''\n    local strong_extension_strength = 0\n\
    \    for i, extension in ipairs(extensions) do\n        local extension_name =\
    \ extension\n        local extension_strength = 0\n        for j, c in ipairs(extension_name)\
    \ do\n            if string.char(c) ~= string.char(class_name[j]) then\n     \
    \           extension_strength = extension_strength + 1\n            end\n   \
    \     end\n        if extension_strength > strong_extension_strength then\n  \
    \          strong_extension = extension\n            strong_extension_name = extension_name\n\
    \            strong_extension_strength = extension_strength\n        end\n   \
    \ end\n    return strong_extension .. '.' .. strong_extension_name\nend", "  \
    \  local class_table = {}\n    for _, extension in ipairs(extensions) do\n   \
    \     table.insert(class_table, extension)\n    end\n    local class_table_sorted\
    \ = class_table:sort()\n    local strongest_extension = class_table_sorted:next()\n\
    \    for _, extension in ipairs(class_table_sorted) do\n        if class_name:sub(1,\
    \ #strongest_extension) == extension:strongest_extension = class_name .. '.' ..\
    \ extension\n    end\n    return strongest_extension\nend", "    local class_name\
    \ = class_name\n    local extensions = extensions\n    local strong_extension\
    \ = ''\n    local i = 1\n    local j = 1\n    local k = 1\n    local l = 1\n \
    \   local m = 1\n    local n = 1\n    local o = 1\n    local p = 1\n    local\
    \ q = 1\n    local r = 1\n    local s = 1\n    local t = 1\n    local u = 1\n\
    \    local v = 1\n    local w = 1\n    local x = 1\n    local y = 1\n    local\
    \ z = 1\n    local a = 1\n    local b = 1\n    local c = 1\n    local d = 1\n\
    \    local e = 1\n    local f = 1\n    local g = 1\n    local h = 1\n    local\
    \ i = 1\n    local j = 1\n    local k = 1\n    local l = 1\n    local m = 1\n\
    \    local n = 1\n    local o = 1\n    local p = 1\n    local q = 1\n    local\
    \ r = 1\n    local s = 1\n    local t = 1\n    local u = 1\n    local v = 1\n\
    \    local w = 1\n    local x = 1\n    local y = 1\n    local z = 1\n    local\
    \ a = 1\n    local b = 1\n    local c = 1\n    local d = 1\n    local e = 1\n\
    \    local f = 1\n    local g = 1\n    local h = 1\n    local i = 1\n    local\
    \ j = 1\n    local k = 1\n    local l = 1\n    local m = 1\n    local n = 1\n\
    \    local o = 1\n    local p = 1\n    local q = 1\n    local r = 1\n    local\
    \ s = 1\n    local t = 1\n    local u = 1\n    local v = 1\n    local w = 1\n\
    \    local x = 1\n    local y = 1\n    local z = 1\n    local a = 1\n    local\
    \ b = 1\n    local c = 1\n    local d = 1\n    local e = 1\n    local f = 1\n\
    \    local g = 1\n    local h = 1\n    local i = 1\n    local j = 1\n    local\
    \ k = 1\n    ", "    local class_table = {}\n    for _, extension in ipairs(extensions)\
    \ do\n        table.insert(class_table, extension)\n    end\n    local strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local cap = 0\n\
    \        local sm = 0\n        for _, c in ipairs(extension) do\n            if\
    \ c == 'A' or c == 'a' then\n                cap = cap + 1\n            end\n\
    \            if c == 'a' or c == 'A' then\n                sm = sm + 1\n     \
    \       end\n        end\n        strength = strength + (cap - sm)\n    end\n\
    \    local best_extension = nil\n    for _, extension in ipairs(extensions) do\n\
    \        if strength == class_table[extension] then\n            best_extension\
    \ = extension\n            break\n        end\n    end\n    return class_name\
    \ .. '.' .. best_extension\nend", "    local class_name = class_name\n    local\
    \ extensions = extensions\n    local strong_extension = class_name\n    local\
    \ strong_extension_name = ''\n    local strong_extension_strength = 0\n    for\
    \ _, extension in ipairs(extensions) do\n        local extension_name = string.lower(extension)\n\
    \        local extension_strength = 0\n        for _, char in ipairs(extension_name)\
    \ do\n            if char.upper() == char then\n                extension_strength\
    \ = extension_strength + 1\n            end\n        end\n        if extension_strength\
    \ > strong_extension_strength then\n            strong_extension_name = extension\n\
    \            strong_extension_strength = extension_strength\n        end\n   \
    \ end\n    return strong_extension .. '.' .. strong_extension_name\nend", "  \
    \  local class_table = {}\n    for _, extension in ipairs(extensions) do\n   \
    \     table.insert(class_table, extension)\n    end\n    local strong_extension\
    \ = nil\n    for _, extension in ipairs(extensions) do\n        local strength\
    \ = 0\n        for _, char in ipairs(extension) do\n            if char.upper()\
    \ > strength then\n                strength = char.upper()\n            end\n\
    \        end\n        if strength > strong_extension then\n            strong_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strong_extension\n\
    end", "    local class_name = class_name\n    local extensions = extensions\n\
    \    local strong_extension = nil\n    local strong_extension_name = nil\n   \
    \ local i = 1\n    for i, extension in ipairs(extensions) do\n        local extension_name\
    \ = extension\n        local extension_strength = 0\n        local extension_cap\
    \ = 0\n        local extension_sm = 0\n        local extension_name_upper = string.upper(extension_name)\n\
    \        local extension_name_lower = string.lower(extension_name)\n        for\
    \ c in string.lower(extension_name_upper) do\n            extension_cap = extension_cap\
    \ + 1\n        for c in string.lower(extension_name_lower) do\n            extension_sm\
    \ = extension_sm + 1\n        extension_strength = (extension_cap - extension_sm)\n\
    \        if not strong_extension or strong_extension_name < extension_name then\n\
    \            strong_extension = extension\n            strong_extension_name =\
    \ extension_name\n        end\n    end\n    return class_name .. '.' .. strong_extension\n\
    end", "    local class_name = class_name\n    local extensions = extensions\n\
    \    local strong_extension = ''\n    local strong_extension_name = ''\n    local\
    \ strong_extension_strength = 0\n    local i = 1\n    while i <= #extensions do\n\
    \        local extension_name = extensions[i]\n        local extension_strength\
    \ = 0\n        local extension_cap = 0\n        local extension_sm = 0\n     \
    \   local extension_name_upper = string.upper(extension_name)\n        local extension_name_lower\
    \ = string.lower(extension_name)\n        local extension_cap = #extension_name_upper\n\
    \        local extension_sm = #extension_name_lower\n        extension_strength\
    \ = extension_cap - extension_sm\n        if extension_strength > strong_extension_strength\
    \ then\n            strong_extension_strength = extension_strength\n         \
    \   strong_extension_name = extension_name\n            strong_extension = class_name\
    \ .. '.' .. extension_name\n        end\n        i = i + 1\n    end\n    return\
    \ strong_extension\nend", "    local class_name = class_name\n    local extensions\
    \ = extensions\n    local strong_ext = nil\n    local strong_ext_name = nil\n\
    \    local strong_ext_strength = nil\n    for _, ext in ipairs(extensions) do\n\
    \        local ext_strength = 0\n        local ext_name = ext\n        local ext_caps\
    \ = 0\n        local ext_sm = 0\n        for _, c in ipairs(ext) do\n        \
    \    if c == 'A' or c == 'a' then\n                ext_caps = ext_caps + 1\n \
    \           else\n                ext_sm = ext_sm + 1\n        end\n        ext_strength\
    \ = ext_caps - ext_sm\n        if not strong_ext or strong_ext_strength < ext_strength\
    \ then\n            strong_ext = ext\n            strong_ext_name = ext_name\n\
    \            strong_ext_strength = ext_strength\n        end\n    end\n    return\
    \ class_name .. '.' .. strong_ext_name\nend", "    local class_name = class_name\n\
    \    local extensions = extensions\n    local strong_extension = ''\n    local\
    \ strong_extension_name = ''\n    local strong_extension_strength = 0\n    local\
    \ i = 1\n    while i <= #extensions do\n        local extension_name = extensions[i]\n\
    \        local extension_strength = 0\n        local extension_cap = 0\n     \
    \   local extension_sm = 0\n        local extension_name_lower = string.lower(extension_name)\n\
    \        local extension_name_upper = string.upper(extension_name)\n        local\
    \ extension_cap_upper = string.upper(extension_name)\n        local extension_cap_lower\
    \ = string.lower(extension_name)\n        local extension_sm_upper = string.upper(extension_name)\n\
    \        local extension_sm_lower = string.lower(extension_name)\n        if extension_name_lower\
    \ == extension_name_upper then\n            extension_cap = #extension_name\n\
    \            extension_sm = 0\n        else\n            extension_cap = #extension_name_lower\n\
    \            extension_sm = #extension_name_lower\n        end\n        extension_strength\
    \ = extension_cap - extension_sm\n        if extension_strength > strong_extension_strength\
    \ then\n            strong_extension_strength = extension_strength\n         \
    \   strong_extension_name = extension_name\n        end\n        i = i + 1\n \
    \   end\n    if strong_extension_strength > 0 then\n        strong_extension =\
    \ class_name .. '.' .. strong_extension_name\n    end\n    return strong_extension\n\
    end", "    local class_name = class_name\n    local extensions = extensions\n\
    \    local strong_extension = ''\n    local strong_extension_name = ''\n    local\
    \ strong_extension_strength = 0\n    local i = 1\n    while i <= #extensions do\n\
    \        local extension_name = extensions[i]\n        local extension_strength\
    \ = 0\n        local extension_name_upper = string.upper(extension_name)\n   \
    \     local extension_name_lower = string.lower(extension_name)\n        local\
    \ extension_name_length = #extension_name\n        local extension_name_upper_length\
    \ = #extension_name_upper\n        local extension_name_lower_length = #extension_name_lower\n\
    \        local j = 1\n        while j <= extension_name_length do\n          \
    \  if string.sub(extension_name, j, j) == extension_name_upper then\n        \
    \        extension_strength = extension_strength + 1\n            end\n      \
    \      j = j + 1\n        end\n        if extension_strength > strong_extension_strength\
    \ then\n            strong_extension_strength = extension_strength\n         \
    \   strong_extension_name = extension_name\n        end\n        i = i + 1\n \
    \   end\n    if strong_extension_strength > 0 then\n        strong_extension =\
    \ class_name .. '.' .. strong_extension_name\n    end\n    return strong_extension\n\
    end", "    local class_name = class_name\n    local extensions = extensions\n\
    \    local strong_extension = ''\n    local strong_extension_name = ''\n    local\
    \ i = 1\n    while i <= #extensions do\n        local extension = extensions[i]\n\
    \        local strength = 0\n        local extension_name = string.lower(extension)\n\
    \        local extension_cap = #extension_name\n        local extension_sm = #extension_name\n\
    \        while i <= #extensions do\n            local extension_name = string.lower(extensions[i])\n\
    \            local extension_cap = #extension_name\n            local extension_sm\
    \ = #extension_name\n            if extension_cap > extension_sm then\n      \
    \          extension_cap = extension_cap - extension_sm\n            end\n   \
    \         if strength < extension_cap then\n                strength = extension_cap\n\
    \                strong_extension_name = extension\n            end\n        \
    \    i = i + 1\n        end\n        if strength > 0 then\n            strong_extension\
    \ = class_name .. '.' .. strong_extension_name\n            strong_extension =\
    \ strong_extension .. '.' .. extension\n            strong_extension = strong_extension\
    \ .. '.' .. class_name\n            strong_extension = strong_extension .. '.'\
    \ .. strong_extension_name\n            strong_extension = strong_extension ..\
    \ '.' .. extension\n            strong_extension = strong_extension .. '.' ..\
    \ class_name\n            strong_extension = strong_extension .. '.' .. strong_extension_name\n\
    \            strong_extension = strong_extension .. '.' .. extension\n       \
    \     strong_extension = strong_extension .. '.' .. class_name\n            strong_extension\
    \ = strong_extension .. '.' .. strong_extension_name\n            strong_extension\
    \ = strong_extension .. '.' .. extension\n            strong_extension = strong_extension\
    \ .. '.' .. class_name\n            strong_extension = strong_extension .. '.'\
    \ .. strong_extension_name\n            strong_extension = strong_extension ..\
    \ '.' .. extension\n            strong_extension = strong_extension .. '.' ..\
    \ class_name\n            strong_extension = strong_extension ..", "    local\
    \ class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table,\
    \ extension)\n    end\n    local strength = 0\n    for _, extension in ipairs(extensions)\
    \ do\n        local cap = 0\n        local sm = 0\n        for _, c in ipairs(extension)\
    \ do\n            if c == 'A' or c == 'a' then\n                cap = cap + 1\n\
    \            end\n            if c == 'a' or c == 'A' then\n                sm\
    \ = sm + 1\n            end\n        end\n        strength = strength + (cap -\
    \ sm)\n    end\n    local strongest_extension = class_name\n    for _, extension\
    \ in ipairs(extensions) do\n        if strength == strength then\n           \
    \ strongest_extension = class_name .. '.' .. extension\n            break\n  \
    \      end\n    end\n    return strongest_extension\nend", "    local class_name\
    \ = class_name\n    local extensions = extensions\n    local strong_extension\
    \ = ''\n    local strong_extension_name = ''\n    local strong_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_name\
    \ = string.lower(extension)\n        local extension_strength = 0\n        for\
    \ _, letter in ipairs(extension_name) do\n            if string.upper(letter)\
    \ == string.upper(class_name) then\n                extension_strength = extension_strength\
    \ + 1\n            end\n        end\n        if extension_strength > strong_extension_strength\
    \ then\n            strong_extension_name = extension\n            strong_extension_strength\
    \ = extension_strength\n        end\n    end\n    return class_name .. '.' ..\
    \ strong_extension_name\nend", "    local class_name = class_name\n    local extensions\
    \ = extensions\n    local strong_extension = ''\n    local strong_extension_name\
    \ = ''\n    local strong_extension_strength = 0\n    local i = 1\n    while i\
    \ <= #extensions do\n        local extension_name = extensions[i]\n        local\
    \ extension_strength = 0\n        local extension_name_upper = string.upper(extension_name)\n\
    \        local extension_name_lower = string.lower(extension_name)\n        local\
    \ extension_name_upper_count = 0\n        local extension_name_lower_count = 0\n\
    \        while i <= #extensions do\n            local extension_name_upper = string.upper(extensions[i])\n\
    \            local extension_name_lower = string.lower(extensions[i])\n      \
    \      if extension_name_upper == extension_name_upper_count then\n          \
    \      extension_name_upper_count = extension_name_upper_count + 1\n         \
    \   else\n                extension_name_upper_count = extension_name_upper_count\
    \ + 1\n            if extension_name_lower == extension_name_lower_count then\n\
    \                extension_name_lower_count = extension_name_lower_count + 1\n\
    \            else\n                extension_name_lower_count = extension_name_lower_count\
    \ + 1\n            end\n            i = i + 1\n        end\n        extension_strength\
    \ = extension_name_upper_count - extension_name_lower_count\n        if extension_strength\
    \ > strong_extension_strength then\n            strong_extension_strength = extension_strength\n\
    \            strong_extension_name = extension_name\n        end\n        i =\
    \ i + 1\n    end\n    strong_extension = class_name .. '.' .. strong_extension_name\n\
    \    return strong_extension\nend", "    local class_table = {}\n    for _, extension\
    \ in ipairs(extensions) do\n        table.insert(class_table, extension)\n   \
    \ end\n    local strong_extension = ''\n    for _, extension in ipairs(extensions)\
    \ do\n        local strength = 0\n        for _, char in ipairs(extension) do\n\
    \            if char.upper() > char then strength = strength + 1\n           \
    \ end\n        end\n        if strength > strong_extension then strong_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strong_extension\n\
    end", "    local class_table = {}\n    for _, extension in ipairs(extensions)\
    \ do\n        table.insert(class_table, extension)\n    end\n    local class_table_sorted\
    \ = class_table:sort()\n    local strongest_extension = class_table_sorted[1]\n\
    \    return class_name..strongest_extension\nend", "    local class_name = class_name\n\
    \    local extensions = extensions\n    local strong_extension = ''\n    local\
    \ strong_extension_name = ''\n    local i = 1\n    for _, extension in ipairs(extensions)\
    \ do\n        local strength = #extension - #extension:lower()\n        if strength\
    \ > strong_extension then\n            strong_extension = strength\n         \
    \   strong_extension_name = extension\n        end\n    end\n    return class_name\
    \ .. '.' .. strong_extension_name\nend", "    local class_table = {}\n    for\
    \ _, extension in ipairs(extensions) do\n        table.insert(class_table, extension)\n\
    \    end\n    local class_table_sorted = table.sort(class_table)\n    local strongest_extension\
    \ = class_name\n    for _, extension in ipairs(class_table_sorted) do\n      \
    \  if class_name ~= extension then\n            strongest_extension = extension\n\
    \            break\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end", "    local class_table = {}\n    for _, extension in ipairs(extensions)\
    \ do\n        table.insert(class_table, extension)\n    end\n    local max_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char.upper()\
    \ then strength = strength + 1 else strength = strength + 2\n        end\n   \
    \     if strength > max_strength then max_strength = strength end\n    end\n \
    \   for _, extension in ipairs(extensions) do\n        if strength == max_strength\
    \ then\n            return class_name .. '.' .. extension\n        end\n    end\n\
    end", "    local class_name = class_name\n    local extensions = extensions\n\
    \    local strong_extension = ''\n    local strong_extension_name = ''\n    local\
    \ strong_extension_strength = 0\n    local i = 1\n    while i <= #extensions do\n\
    \        local extension_name = extensions[i]\n        local extension_strength\
    \ = 0\n        local extension_cap = 0\n        local extension_sm = 0\n     \
    \   local extension_name_upper = extension_name\n        local extension_name_lower\
    \ = string.lower(extension_name)\n        while #extension_name_upper > 0 do\n\
    \            extension_name_upper = string.sub(extension_name_upper, 1, #extension_name_upper)\n\
    \            extension_cap = extension_cap + 1\n        while #extension_name_lower\
    \ > 0 do\n            extension_name_lower = string.sub(extension_name_lower,\
    \ 1, #extension_name_lower)\n            extension_sm = extension_sm + 1\n   \
    \     extension_strength = extension_cap - extension_sm\n        if extension_strength\
    \ > strong_extension_strength then\n            strong_extension_strength = extension_strength\n\
    \            strong_extension_name = extension_name\n            strong_extension\
    \ = class_name .. '.' .. extension_name\n        end\n        i = i + 1\n    end\n\
    \    return strong_extension\nend", "    local class_table = {}\n    for _, extension\
    \ in ipairs(extensions) do\n        table.insert(class_table, extension)\n   \
    \ end\n    local strong_extension = ''\n    for _, extension in ipairs(extensions)\
    \ do\n        local strength = #extension - #extension:lower()\n        if strength\
    \ > strong_extension then\n            strong_extension = extension\n        end\n\
    \    end\n    return class_name .. '.' .. strong_extension\nend", "    local class_name\
    \ = class_name\n    local extensions = extensions\n    local strong_extension\
    \ = ''\n    local strong_extension_name = ''\n    local strong_extension_strength\
    \ = 0\n    local i = 1\n    while i <= #extensions do\n        local extension_name\
    \ = extensions[i]\n        local extension_strength = 0\n        local extension_name_upper\
    \ = string.upper(extension_name)\n        local extension_name_lower = string.lower(extension_name)\n\
    \        local extension_name_upper_count = 0\n        local extension_name_lower_count\
    \ = 0\n        while i <= #extensions do\n            local extension_name_upper\
    \ = string.upper(extensions[i])\n            local extension_name_lower = string.lower(extensions[i])\n\
    \            if extension_name_upper == extension_name_upper_count then\n    \
    \            extension_name_upper_count = extension_name_upper_count + 1\n   \
    \         else\n                extension_name_upper_count = extension_name_upper_count\
    \ + 1\n            if extension_name_lower == extension_name_lower_count then\n\
    \                extension_name_lower_count = extension_name_lower_count + 1\n\
    \            else\n                extension_name_lower_count = extension_name_lower_count\
    \ + 1\n            end\n            i = i + 1\n        end\n        extension_strength\
    \ = extension_name_upper_count - extension_name_lower_count\n        if extension_strength\
    \ > strong_extension_strength then\n            strong_extension_strength = extension_strength\n\
    \            strong_extension_name = extension_name\n        end\n        i =\
    \ i + 1\n    end\n    strong_extension = class_name .. '.' .. strong_extension_name\n\
    \    return strong_extension\nend", "    local class_name = class_name\n    local\
    \ extensions = extensions\n    local strong_extension = ''\n    local i = 1\n\
    \    for _, extension in ipairs(extensions) do\n        local strength = #extension\
    \ - #extension:lower()\n        if strength > strong_extension then\n        \
    \    strong_extension = strength\n            strong_extension_name = extension\n\
    \        end\n    end\n    return class_name .. '.' .. strong_extension_name\n\
    end", "    local class_name = class_name\n    local extensions = extensions\n\
    \    local strong_extension = ''\n    local strong_extension_name = ''\n    local\
    \ i = 1\n    for _, extension in ipairs(extensions) do\n        local strength\
    \ = #extension - #extension:lower()\n        if strength > strong_extension then\n\
    \            strong_extension = strength\n            strong_extension_name =\
    \ extension\n        end\n    end\n    return class_name .. '.' .. strong_extension_name\n\
    end", "    local class_name = class_name\n    local extensions = extensions\n\
    \    local strong_extension = ''\n    local i = 1\n    while i <= #extensions\
    \ do\n        local extension = extensions[i]\n        local strength = #extension\
    \ - #extension:lower()\n        if strength > strong_extension then\n        \
    \    strong_extension = strength\n            strong_extension_name = extension\n\
    \        end\n        i = i + 1\n    end\n    return class_name .. '.' .. strong_extension_name\n\
    end", "    local class_name = class_name\n    local extensions = extensions\n\
    \    local strong_extension = ''\n    local strong_extension_name = ''\n    local\
    \ strong_extension_strength = 0\n    local i = 1\n    while i <= #extensions do\n\
    \        local extension = extensions[i]\n        local extension_name = string.sub(extension,\
    \ 1, -1)\n        local extension_strength = #extension_name - #extension_name:find('[a-z]')\n\
    \        if extension_strength > strong_extension_strength then\n            strong_extension_name\
    \ = extension_name\n            strong_extension_strength = extension_strength\n\
    \            strong_extension = class_name .. '.' .. strong_extension_name\n \
    \       end\n        i = i + 1\n    end\n    return strong_extension\nend", " \
    \   local class_name = class_name\n    local extensions = extensions\n    local\
    \ strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength\
    \ = 0\n    local i = 1\n    while i <= #extensions do\n        local extension_name\
    \ = extensions[i]\n        local extension_strength = 0\n        local extension_name_length\
    \ = #extension_name\n        local j = 1\n        while j <= extension_name_length\
    \ do\n            if string.char(extension_name[j]) ~= string.char(extension_name[j])\
    \ then\n                extension_strength = extension_strength + 1\n        \
    \    end\n            j = j + 1\n        end\n        if extension_strength >\
    \ strong_extension_strength then\n            strong_extension_strength = extension_strength\n\
    \            strong_extension_name = extension_name\n        end\n        i =\
    \ i + 1\n    end\n    strong_extension = class_name .. '.' .. strong_extension_name\n\
    \    return strong_extension\nend", "    local class_name = class_name\n    local\
    \ extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name\
    \ = ''\n    local strong_extension_strength = 0\n    for _, extension in ipairs(extensions)\
    \ do\n        local extension_name = string.lower(extension)\n        local extension_strength\
    \ = 0\n        for _, char in ipairs(extension_name) do\n            if char.upper()\
    \ > 0 then\n                extension_strength = extension_strength + 1\n    \
    \        end\n        end\n        if extension_strength > strong_extension_strength\
    \ then\n            strong_extension_name = extension\n            strong_extension_strength\
    \ = extension_strength\n        end\n    end\n    strong_extension = class_name\
    \ .. '.' .. strong_extension_name\n    return strong_extension\nend", "    local\
    \ class_name = class_name\n    local extensions = extensions\n    local strong_extension\
    \ = ''\n    local strong_extension_name = ''\n    local strong_extension_strength\
    \ = 0\n    local i = 1\n    for i, extension in ipairs(extensions) do\n      \
    \  local extension_strength = 0\n        local extension_name = extension\n  \
    \      local extension_cap = 0\n        local extension_sm = 0\n        local\
    \ extension_name_upper = extension_name\n        for j, c in ipairs(extension_name_upper)\
    \ do\n            if c == 'A' or c == 'a' then\n                extension_cap\
    \ = extension_cap + 1\n            else\n                extension_sm = extension_sm\
    \ + 1\n        end\n        extension_strength = extension_cap - extension_sm\n\
    \        if extension_strength > strong_extension_strength then\n            strong_extension_name\
    \ = extension_name\n            strong_extension_strength = extension_strength\n\
    \        end\n    end\n    if strong_extension_strength > 0 then\n        strong_extension\
    \ = class_name .. '.' .. strong_extension_name\n    end\n    return strong_extension\n\
    end", "    local class_name = class_name\n    local extensions = extensions\n\
    \    local strong_ext = ''\n    local strong_ext_name = ''\n    local strong_ext_strength\
    \ = 0\n    for _, ext in ipairs(extensions) do\n        local ext_strength = #ext\
    \ - #ext:lower()\n        if ext_strength > strong_ext_strength then\n       \
    \     strong_ext_name = ext\n            strong_ext_strength = ext_strength\n\
    \        end\n    end\n    strong_ext = class_name .. '.' .. strong_ext_name\n\
    \    return strong_ext\nend", "    local class_table = {}\n    for _, extension\
    \ in ipairs(extensions) do\n        local strength = 0\n        for _, c in ipairs(extension)\
    \ do\n            if string.char(c) ~= string.char(class_name) then\n        \
    \        strength = strength + 1\n            end\n        end\n        table.insert(class_table,\
    \ {extension, strength})\n    end\n    local strongest = nil\n    for _, extension\
    \ in ipairs(class_table) do\n        if not strongest or strength > class_table[strongest][1]\
    \ then\n            strongest = extension\n        end\n    end\n    return class_name\
    \ .. '.' .. strongest[1]\nend", "    local class_name = class_name\n    local\
    \ extensions = extensions\n    local strong_extension = nil\n    local strong_extension_name\
    \ = nil\n    local strong_extension_strength = nil\n    for _, extension in ipairs(extensions)\
    \ do\n        local extension_name = extension\n        local extension_strength\
    \ = 0\n        for _, char in ipairs(extension_name) do\n            if char.upper()\
    \ == char then\n                extension_strength = extension_strength + 1\n\
    \            end\n        end\n        if extension_strength > strong_extension_strength\
    \ then\n            strong_extension_name = extension_name\n            strong_extension_strength\
    \ = extension_strength\n        end\n    end\n    if strong_extension_strength\
    \ > 0 then\n        strong_extension = class_name .. '.' .. strong_extension_name\n\
    \    end\n    return strong_extension\nend", "    local class_name = class_name\n\
    \    local extensions = extensions\n    local strong_ext = nil\n    local i =\
    \ 1\n    while i <= #extensions do\n        local ext = extensions[i]\n      \
    \  local ext_name = string.sub(ext, 1, string.len(ext)-1)\n        local ext_cap\
    \ = 0\n        local ext_sm = 0\n        for c in ext_name do\n            if\
    \ c == 'A' or c == 'a' then\n                ext_cap = ext_cap + 1\n         \
    \   else\n                ext_sm = ext_sm + 1\n        end\n        local strength\
    \ = ext_cap - ext_sm\n        if strength > strong_ext then\n            strong_ext\
    \ = strength\n            strong_ext_name = ext_name\n        end\n        i =\
    \ i + 1\n    end\n    return class_name .. '.' .. strong_ext_name\nend", "   \
    \ local class_name = class_name\n    local extensions = extensions\n    local\
    \ strong_extension = ''\n    local i = 1\n    while i <= #extensions do\n    \
    \    local extension = extensions[i]\n        local strength = #extension - #extension:lower()\n\
    \        if strength > strong_extension then\n            strong_extension = strength\n\
    \            strong_extension_name = extension\n        end\n        i = i + 1\n\
    \    end\n    return class_name .. '.' .. strong_extension_name\nend", "    local\
    \ class_name = class_name\n    local extensions = extensions\n    local strong_extension\
    \ = ''\n    local strong_extension_name = ''\n    local strong_extension_strength\
    \ = 0\n    local i = 1\n    while i <= #extensions do\n        local extension\
    \ = extensions[i]\n        local extension_name = string.lower(extension)\n  \
    \      local extension_cap = #extension_name\n        local extension_sm = #extension_name\n\
    \        while i <= #extensions do\n            local extension_name = string.lower(extensions[i])\n\
    \            local extension_cap = #extension_name\n            local extension_sm\
    \ = #extension_name\n            if extension_cap > extension_sm then\n      \
    \          extension_cap = extension_cap - extension_sm\n            end\n   \
    \         if extension_cap > strong_extension_strength then\n                strong_extension_strength\
    \ = extension_cap - extension_sm\n                strong_extension_name = extension\n\
    \            end\n            i = i + 1\n        end\n        i = i + 1\n    end\n\
    \    if strong_extension_strength > 0 then\n        strong_extension = class_name\
    \ .. '.' .. strong_extension_name\n    end\n    return strong_extension\nend",
  "    local class_table = {}\n    for _, extension in ipairs(extensions) do\n   \
    \     table.insert(class_table, extension)\n    end\n    local strong_extension\
    \ = ''\n    for _, extension in ipairs(extensions) do\n        local strength\
    \ = 0\n        for _, letter in ipairs(extension) do\n            strength = strength\
    \ + string.upper(letter)\n        end\n        strength = strength - string.lower(extension)\n\
    \        if strength > strong_extension then\n            strong_extension = extension\n\
    \        end\n    end\n    return class_name .. '.' .. strong_extension\nend",
  "    local class_name = class_name\n    local extensions = extensions\n    local\
    \ strong_extension = ''\n    local strong_extension_name = ''\n    local strong_extension_strength\
    \ = 0\n    for i, ext in ipairs(extensions) do\n        local ext_strength = 0\n\
    \        local ext_name = ext\n        local ext_caps = 0\n        local ext_sm\
    \ = 0\n        for c in ext_name do\n            if c == 'A' or c == 'a' then\n\
    \                ext_caps = ext_caps + 1\n            else\n                ext_sm\
    \ = ext_sm + 1\n        end\n        ext_strength = ext_caps - ext_sm\n      \
    \  if ext_strength > strong_extension_strength then\n            strong_extension_name\
    \ = ext_name\n            strong_extension_strength = ext_strength\n        end\n\
    \    end\n    if strong_extension_strength > 0 then\n        strong_extension\
    \ = class_name .. '.' .. strong_extension_name\n    end\n    return strong_extension\n\
    end", "    local class_name = class_name\n    local extensions = extensions\n\
    \    local strong_extension = ''\n    local strong_extension_name = ''\n    local\
    \ strong_extension_strength = 0\n    for _,extension in pairs(extensions) do\n\
    \        local ext_strength = #extension:upper() - #extension:lower()\n      \
    \  if ext_strength > strong_extension_strength then\n            strong_extension_strength\
    \ = ext_strength\n            strong_extension_name = extension\n        end\n\
    \    end\n    strong_extension = class_name .. '.' .. strong_extension_name\n\
    \    return strong_extension\nend", "    local class_table = {}\n    for _, extension\
    \ in ipairs(extensions) do\n        local strength = #extension - #extension:lower()\n\
    \        table.insert(class_table, {extension, strength})\n    end\n    local\
    \ strongest_extension = class_table[1][1]\n    for _, extension in ipairs(extensions)\
    \ do\n        if strength == class_table[extension][1] then\n            strongest_extension\
    \ = extension\n            break\n        end\n    end\n    return class_name\
    \ .. '.' .. strongest_extension\nend", "    local class_name = class_name\n  \
    \  local extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name\
    \ = ''\n    local strong_extension_strength = 0\n    for _, extension in ipairs(extensions)\
    \ do\n        local extension_name = string.lower(extension)\n        local extension_strength\
    \ = 0\n        for _, char in ipairs(extension_name) do\n            if char ==\
    \ 'a' or char == 'A' then\n                extension_strength = extension_strength\
    \ + 1\n            end\n        end\n        if extension_strength > strong_extension_strength\
    \ then\n            strong_extension_name = extension\n            strong_extension_strength\
    \ = extension_strength\n        end\n    end\n    strong_extension = class_name\
    \ .. '.' .. strong_extension_name\n    return strong_extension\nend", "    local\
    \ class_table = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table,\
    \ extension)\n    end\n    local strong_extension = ''\n    for _, extension in\
    \ ipairs(extensions) do\n        local strength = 0\n        for _, char in ipairs(extension)\
    \ do\n            if char.isupper() then\n                strength = strength\
    \ + 1\n            end\n        end\n        if strength > strong_extension then\n\
    \            strong_extension = extension\n        end\n    end\n    return class_name\
    \ .. '.' .. strong_extension\nend", "    local class_table = {}\n    for _, extension\
    \ in ipairs(extensions) do\n        table.insert(class_table, extension)\n   \
    \ end\n    local strong_extension = ''\n    for _, extension in ipairs(extensions)\
    \ do\n        local strength = 0\n        for _, char in ipairs(extension) do\n\
    \            if char.upper() == char then\n                strength = strength\
    \ + 1\n            end\n        end\n        if strength > strong_extension then\n\
    \            strong_extension = extension\n        end\n    end\n    return class_name\
    \ .. '.' .. strong_extension\nend", "    local class_name = class_name\n    local\
    \ extensions = extensions\n    local max_strength = 0\n    local max_extension\
    \ = ''\n    for _, extension in ipairs(extensions) do\n        local strength\
    \ = #extension - #extension:lower()\n        if strength > max_strength then\n\
    \            max_strength = strength\n            max_extension = extension\n\
    \        end\n    end\n    return class_name .. '.' .. max_extension\nend", " \
    \   local class_name = class_name\n    local extensions = extensions\n    local\
    \ max_strength = 0\n    local max_extension = nil\n    for _, extension in ipairs(extensions)\
    \ do\n        local strength = #extension - #extension:lower()\n        if strength\
    \ > max_strength then\n            max_strength = strength\n            max_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. max_extension\n\
    end", "    local class_name = class_name\n    local extensions = extensions\n\
    \    local strong_extension = ''\n    local strong_extension_name = ''\n    local\
    \ strong_extension_strength = 0\n    for _, extension in ipairs(extensions) do\n\
    \        local extension_name = string.lower(extension)\n        local extension_strength\
    \ = 0\n        for _, char in ipairs(extension_name) do\n            if char.upper()\
    \ == char then\n                extension_strength = extension_strength + 1\n\
    \            end\n        end\n        if extension_strength > strong_extension_strength\
    \ then\n            strong_extension_name = extension\n            strong_extension_strength\
    \ = extension_strength\n        end\n    end\n    if strong_extension_strength\
    \ > 0 then\n        strong_extension = class_name .. '.' .. strong_extension_name\n\
    \    end\n    return strong_extension\nend", "    local class_name = class_name\n\
    \    local extensions = extensions\n    local strong_extension = ''\n    local\
    \ strong_extension_name = ''\n    local i = 1\n    while i <= #extensions do\n\
    \        local extension_name = extensions[i]\n        local extension_strength\
    \ = 0\n        local extension_name_upper = string.upper(extension_name)\n   \
    \     local extension_name_lower = string.lower(extension_name)\n        local\
    \ extension_name_upper_count = #extension_name_upper\n        local extension_name_lower_count\
    \ = #extension_name_lower\n        local extension_name_count = extension_name_upper_count\
    \ + extension_name_lower_count\n        local extension_name_count_count = #extension_name_count\n\
    \        local extension_name_count_count_count = #extension_name_count_count\n\
    \        local extension_name_count_count_count_count = #extension_name_count_count_count\n\
    \        for i = 1, extension_name_count_count_count do\n            if string.sub(extension_name,\
    \ i, i) == extension_name_upper then\n                extension_strength = extension_strength\
    \ + 1\n            elseif string.sub(extension_name, i, i) == extension_name_lower\
    \ then\n                extension_strength = extension_strength + 1\n        \
    \    end\n        end\n        if extension_strength > strong_extension_strength\
    \ then\n            strong_extension_name = extension_name\n            strong_extension_strength\
    \ = extension_strength\n        end\n        i = i + 1\n    end\n    strong_extension\
    \ = class_name .. '.' .. strong_extension_name\n    return strong_extension\n\
    end", "    local class_name = class_name\n    local extensions = extensions\n\
    \    local strong_extension = ''\n    local strong_extension_name = ''\n    local\
    \ strong_extension_strength = 0\n    local i = 1\n    while i <= #extensions do\n\
    \        local extension_name = extensions[i]\n        local extension_strength\
    \ = 0\n        local extension_name_upper = string.upper(extension_name)\n   \
    \     local extension_name_lower = string.lower(extension_name)\n        local\
    \ extension_name_upper_count = #extension_name_upper\n        local extension_name_lower_count\
    \ = #extension_name_lower\n        local j = 1\n        while j <= extension_name_upper_count\
    \ do\n            local extension_name_upper_letter = extension_name_upper[j]\n\
    \            local extension_name_lower_letter = extension_name_lower[j]\n   \
    \         if extension_name_upper_letter == extension_name_lower_letter then\n\
    \                extension_strength = extension_strength + 1\n            end\n\
    \            j = j + 1\n        end\n        local extension_strength = extension_strength\
    \ - extension_name_lower_count\n        if extension_strength > strong_extension_strength\
    \ then\n            strong_extension_strength = extension_strength\n         \
    \   strong_extension_name = extension_name\n        end\n        i = i + 1\n \
    \   end\n    strong_extension = class_name .. '.' .. strong_extension_name\n \
    \   return strong_extension\nend", "    local class_table = {}\n    for _, extension\
    \ in ipairs(extensions) do\n        table.insert(class_table, extension)\n   \
    \ end\n    local class_table_sorted = class_table:sort()\n    local strongest_extension\
    \ = class_table_sorted[1]\n    return class_name .. '.' .. strongest_extension\n\
    end", "    local class_name = class_name\n    local extensions = extensions\n\
    \    local strong_extension = ''\n    local i = 1\n    while i <= #extensions\
    \ do\n        local extension = extensions[i]\n        local strength = 0\n  \
    \      local cap = 0\n        local sm = 0\n        local extension_name = string.lower(extension)\n\
    \        for c in extension_name do\n            if c == '_' then\n          \
    \      cap = cap + 1\n            else\n                sm = sm + 1\n        \
    \    end\n        end\n        strength = cap - sm\n        if strength > strong_extension\
    \ then\n            strong_extension = strength\n            strong_extension_name\
    \ = extension\n        end\n        i = i + 1\n    end\n    return class_name\
    \ .. '.' .. strong_extension_name\nend", "    local class_name = class_name\n\
    \    local extensions = extensions\n    local strong_extension = ''\n    local\
    \ strong_extension_name = ''\n    local strong_extension_strength = 0\n    local\
    \ i = 1\n    while i <= #extensions do\n        local extension = extensions[i]\n\
    \        local extension_name = extension\n        local extension_strength =\
    \ 0\n        local j = 1\n        while j <= #extension do\n            if string.sub(extension,\
    \ j, j) ~= string.sub(extension_name, j, j) then\n                extension_strength\
    \ = extension_strength + 1\n            end\n            j = j + 1\n        end\n\
    \        if extension_strength > strong_extension_strength then\n            strong_extension_name\
    \ = extension_name\n            strong_extension_strength = extension_strength\n\
    \        end\n        i = i + 1\n    end\n    strong_extension = class_name ..\
    \ '.' .. strong_extension_name\n    return strong_extension\nend", "    local\
    \ class_name = class_name\n    local extensions = extensions\n    local strong_extension\
    \ = ''\n    local strong_extension_name = ''\n    local strong_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_name\
    \ = string.lower(extension)\n        local extension_strength = 0\n        for\
    \ _, char in ipairs(extension_name) do\n            if char == 'a' or char ==\
    \ 'A' then\n                extension_strength = extension_strength + 1\n    \
    \        end\n        end\n        if extension_strength > strong_extension_strength\
    \ then\n            strong_extension_name = extension\n            strong_extension_strength\
    \ = extension_strength\n        end\n    end\n    if strong_extension_strength\
    \ > 0 then\n        strong_extension = class_name .. '.' .. strong_extension_name\n\
    \    end\n    return strong_extension\nend", "    local class_name = class_name\n\
    \    local extensions = extensions\n    local strong_extension = ''\n    local\
    \ strong_extension_name = ''\n    local strong_extension_strength = 0\n    local\
    \ i = 1\n    while i <= #extensions do\n        local extension = extensions[i]\n\
    \        local extension_name = string.sub(extension, 1, -1)\n        local extension_strength\
    \ = #extension_name - #extension_name:find('[a-z]')\n        if extension_strength\
    \ > strong_extension_strength then\n            strong_extension_name = extension_name\n\
    \            strong_extension_strength = extension_strength\n            strong_extension\
    \ = class_name .. '.' .. strong_extension_name\n        end\n        i = i + 1\n\
    \    end\n    return strong_extension\nend", "    local class_table = {}\n   \
    \ for _, extension in ipairs(extensions) do\n        local strength = #extension\
    \ - #extension:lower()\n        table.insert(class_table, {extension, strength})\n\
    \    end\n    local max_strength = 0\n    for _, extension in ipairs(class_table)\
    \ do\n        if strength > max_strength then\n            max_strength = strength\n\
    \            max_extension = extension\n        end\n    end\n    return class_name\
    \ .. '.' .. max_extension\nend", "    local class_table = {}\n    for _, extension\
    \ in ipairs(extensions) do\n        local strength = 0\n        for _, c in ipairs(extension)\
    \ do\n            if c.isupper() then strength = strength + 1 end\n          \
    \  if c.islower() then strength = strength + 1 end\n        table.insert(class_table,\
    \ {extension, strength})\n    end\n    local max_strength = 0\n    for _, extension\
    \ in ipairs(extensions) do\n        if class_table[extension][1] > max_strength\
    \ then\n            max_strength = class_table[extension][1]\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end", "    local class_name = class_name\n    local extensions = extensions\n\
    \    local strong_extension = ''\n    local strong_extension_name = ''\n    local\
    \ strong_extension_strength = 0\n    local i = 1\n    while i <= #extensions do\n\
    \        local extension_name = extensions[i]\n        local extension_strength\
    \ = 0\n        local extension_cap = 0\n        local extension_sm = 0\n     \
    \   local extension_name = extension_name\n        local extension_name_upper\
    \ = string.upper(extension_name)\n        local extension_name_lower = string.lower(extension_name)\n\
    \        local extension_cap = #extension_name_upper\n        local extension_sm\
    \ = #extension_name_lower\n        local extension_strength = extension_cap -\
    \ extension_sm\n        if extension_strength > strong_extension_strength then\n\
    \            strong_extension_name = extension_name\n            strong_extension_strength\
    \ = extension_strength\n        end\n        i = i + 1\n    end\n    return class_name\
    \ .. '.' .. strong_extension_name\nend", "    local table = {}\n    for _, extension\
    \ in ipairs(extensions) do\n        table[extension] = table[extension] or 0\n\
    \        table[extension] = table[extension] + tonumber(string.upper(extension))\n\
    \    end\n    local max = 0\n    local max_extension = nil\n    for _, extension\
    \ in ipairs(extensions) do\n        if table[extension] > max then\n         \
    \   max = table[extension]\n            max_extension = extension\n        end\n\
    \    end\n    return class_name .. '.' .. max_extension\nend", "    local class_table\
    \ = {}\n    for _, extension in ipairs(extensions) do\n        local strength\
    \ = 0\n        for i = 1, #extension do\n            if string.char(extension,\
    \ i) ~= string.char(extension, i + 1) then\n                strength = strength\
    \ + 1\n            end\n        end\n        table.insert(class_table, {extension,\
    \ strength})\n    end\n    local max_strength = 0\n    for _, extension in ipairs(class_table)\
    \ do\n        if extension.strength > max_strength then\n            max_strength\
    \ = extension.strength\n            max_extension = extension.extension\n    \
    \    end\n    end\n    return class_name .. '.' .. max_extension\nend", "    local\
    \ class_name = class_name\n    local extensions = extensions\n    local strong_extension\
    \ = ''\n    local strong_extension_name = ''\n    local strong_extension_strength\
    \ = 0\n    local i = 1\n    for i, extension in ipairs(extensions) do\n      \
    \  local extension_name = extension\n        local extension_strength = 0\n  \
    \      local extension_cap = 0\n        local extension_sm = 0\n        local\
    \ extension_cap_sm = 0\n        local extension_cap_sm_sum = 0\n        local\
    \ extension_cap_sm_sum_sum = 0\n        local extension_cap_sm_sum_sum_sum = 0\n\
    \        local extension_cap_sm_sum_sum_sum_sum = 0\n        local extension_cap_sm_sum_sum_sum_sum_sum\
    \ = 0\n        local extension_cap_sm_sum_sum_sum_sum_sum_sum = 0\n        local\
    \ extension_cap_sm_sum_sum_sum_sum_sum_sum_sum = 0\n        local extension_cap_sm_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = 0\n        local extension_cap_sm_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0\n\
    \        local extension_cap_sm_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum = 0\n\
    \        local extension_cap_sm_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum =\
    \ 0\n        local extension_cap_sm_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = 0\n        local extension_cap_sm_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = 0\n        local extension_cap_sm_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = 0\n        local extension_cap_sm_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum_sum\
    \ = 0\n        local extension_cap_sm_sum_sum_sum", "    local class_name = class_name\n\
    \    local extensions = extensions\n    local strong_extension = ''\n    local\
    \ i = 1\n    while i <= #extensions do\n        local extension = extensions[i]\n\
    \        local strength = #extension - #extension:lower()\n        if strength\
    \ > strong_extension then\n            strong_extension = strength\n         \
    \   strong_extension_name = extension\n        end\n        i = i + 1\n    end\n\
    \    return class_name .. '.' .. strong_extension_name\nend", "    local class_name\
    \ = class_name\n    local extensions = extensions\n    local strong_extension\
    \ = ''\n    local strong_extension_name = ''\n    local i = 1\n    while i <=\
    \ #extensions do\n        local extension = extensions[i]\n        local extension_name\
    \ = string.lower(extension)\n        local extension_cap = #extension_name\n \
    \       local extension_sm = #extension_name\n        local j = 1\n        while\
    \ j <= extension_cap do\n            if string.upper(extension_name[j]) ~= string.upper(extension_name[j])\
    \ then\n                extension_sm = extension_sm + 1\n            end\n   \
    \         j = j + 1\n        end\n        local strength = (extension_cap - extension_sm)\n\
    \        if strength > strong_extension then\n            strong_extension = strength\n\
    \            strong_extension_name = extension\n        end\n        i = i + 1\n\
    \    end\n    return class_name .. '.' .. strong_extension_name\nend", "    local\
    \ class_name = class_name\n    local extensions = extensions\n    local strong_extension\
    \ = ''\n    local i = 1\n    while i <= #extensions do\n        local extension\
    \ = extensions[i]\n        local strength = #extension - #extension:lower()\n\
    \        if strength > strong_extension then\n            strong_extension = strength\n\
    \            strong_extension_name = extension\n        end\n        i = i + 1\n\
    \    end\n    return class_name .. '.' .. strong_extension_name\nend", "    local\
    \ class_name = class_name\n    local extensions = extensions\n    local strong_extension\
    \ = ''\n    local strong_extension_name = ''\n    local strong_extension_strength\
    \ = 0\n    local i = 1\n    while i <= #extensions do\n        local extension_name\
    \ = extensions[i]\n        local extension_strength = 0\n        local extension_name_upper\
    \ = string.upper(extension_name)\n        local extension_name_lower = string.lower(extension_name)\n\
    \        local extension_name_upper_count = 0\n        local extension_name_lower_count\
    \ = 0\n        while i <= #extensions do\n            if string.upper(extensions[i])\
    \ == extension_name_upper then\n                extension_name_upper_count = extension_name_upper_count\
    \ + 1\n            end\n            if string.lower(extensions[i]) == extension_name_lower\
    \ then\n                extension_name_lower_count = extension_name_lower_count\
    \ + 1\n            end\n            i = i + 1\n        end\n        extension_strength\
    \ = extension_name_upper_count - extension_name_lower_count\n        if extension_strength\
    \ > strong_extension_strength then\n            strong_extension_strength = extension_strength\n\
    \            strong_extension_name = extension_name\n        end\n        i =\
    \ i + 1\n    end\n    strong_extension = class_name .. '.' .. strong_extension_name\n\
    \    return strong_extension\nend", "    local class_name = class_name\n    local\
    \ extensions = extensions\n    local strong_extension = ''\n    local strong_extension_name\
    \ = ''\n    local strong_extension_strength = 0\n    local i = 1\n    while i\
    \ <= #extensions do\n        local extension_name = extensions[i]\n        local\
    \ extension_strength = 0\n        local extension_cap = 0\n        local extension_sm\
    \ = 0\n        local extension_name_upper = string.upper(extension_name)\n   \
    \     local extension_name_lower = string.lower(extension_name)\n        local\
    \ extension_cap_upper = #extension_name_upper\n        local extension_cap_lower\
    \ = #extension_name_lower\n        local extension_sm_upper = #extension_name_upper\
    \ - #extension_name_lower\n        local extension_sm_lower = #extension_name_lower\n\
    \        if extension_name_upper == extension_name_lower then\n            extension_cap\
    \ = extension_cap_upper\n            extension_sm = extension_sm_upper\n     \
    \   else\n            extension_cap = extension_cap_lower\n            extension_sm\
    \ = extension_sm_lower\n        extension_strength = extension_cap - extension_sm\n\
    \        if extension_strength > strong_extension_strength then\n            strong_extension_strength\
    \ = extension_strength\n            strong_extension_name = extension_name\n \
    \           strong_extension = class_name .. '.' .. extension_name\n        end\n\
    \        i = i + 1\n    end\n    return strong_extension\nend", "    local class_table\
    \ = {}\n    for _, extension in ipairs(extensions) do\n        table.insert(class_table,\
    \ extension)\n    end\n    local strength = 0\n    for _, extension in ipairs(extensions)\
    \ do\n        local cap = 0\n        local sm = 0\n        for _, c in ipairs(extension)\
    \ do\n            if c == 'A' or c == 'a' then\n                cap = cap + 1\n\
    \            end\n            if c == 'a' or c == 'A' then\n                sm\
    \ = sm + 1\n            end\n        end\n        strength = strength + (cap -\
    \ sm)\n    end\n    local max_strength = 0\n    local max_extension = nil\n  \
    \  for _, extension in ipairs(extensions) do\n        if strength == max_strength\
    \ then\n            if class_table[extension] < class_table[max_extension] then\n\
    \                max_extension = extension\n            end\n        end\n   \
    \     strength = strength - 1\n    end\n    return class_name .. '.' .. max_extension\n\
    end", "    local class_table = {}\n    for _, extension in ipairs(extensions)\
    \ do\n        table.insert(class_table, extension)\n    end\n    local strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local cap = 0\n\
    \        local sm = 0\n        for _, c in ipairs(extension) do\n            if\
    \ c == 'A' then\n                cap = cap + 1\n            else\n           \
    \     sm = sm + 1\n            end\n        end\n        strength = strength +\
    \ (cap - sm)\n    end\n    for _, extension in ipairs(extensions) do\n       \
    \ if strength == strength then\n            return class_name .. '.' .. extension\n\
    \        end\n    end\nend", "    local class_name = class_name\n    local extensions\
    \ = extensions\n    local max_strength = 0\n    local max_extension = nil\n  \
    \  for _, extension in ipairs(extensions) do\n        local strength = #extension\
    \ - #extension:lower()\n        if strength > max_strength then\n            max_strength\
    \ = strength\n            max_extension = extension\n        end\n    end\n  \
    \  return class_name .. '.' .. max_extension\nend", "    local class_name = class_name\n\
    \    local extensions = extensions\n    local strong_extension = class_name\n\
    \    for _, ext in ipairs(extensions) do\n        local ext_name = string.lower(ext)\n\
    \        local ext_cap = #ext_name\n        local ext_sm = #ext_name\n       \
    \ local strength = ext_cap - ext_sm\n        if strength > strong_extension then\n\
    \            strong_extension = ext_name\n        end\n    end\n    return strong_extension\n\
    end", "    local class_name = class_name\n    local extensions = extensions\n\
    \    local strong_extension = class_name\n    local strong_extension_name = ''\n\
    \    local strong_extension_strength = 0\n    for _, extension in ipairs(extensions)\
    \ do\n        local extension_name = extension\n        local extension_strength\
    \ = 0\n        for _, char in ipairs(extension_name) do\n            if char.upper()\
    \ > 0 then\n                extension_strength = extension_strength + 1\n    \
    \        end\n        end\n        if extension_strength > strong_extension_strength\
    \ then\n            strong_extension = extension\n            strong_extension_name\
    \ = extension_name\n            strong_extension_strength = extension_strength\n\
    \        end\n    end\n    return strong_extension .. '.' .. strong_extension_name\n\
    end", "    local class_table = {}\n    for _, extension in ipairs(extensions)\
    \ do\n        table.insert(class_table, extension)\n    end\n    local class_table_sorted\
    \ = class_table:sort()\n    local strongest_extension = class_table_sorted[1]\n\
    \    return class_name..'.'..strongest_extension\nend", "    local class_name\
    \ = class_name\n    local extensions = extensions\n    local strong_extension\
    \ = ''\n    local strong_extension_name = ''\n    local strong_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_name\
    \ = string.lower(extension)\n        local extension_strength = #extension_name\
    \ - #extension_name:find('[a-z]')\n        if extension_strength > strong_extension_strength\
    \ then\n            strong_extension_name = extension_name\n            strong_extension_strength\
    \ = extension_strength\n        end\n    end\n    strong_extension = class_name\
    \ .. '.' .. strong_extension_name\n    return strong_extension\nend", "    local\
    \ class_name = class_name\n    local extensions = extensions\n    local strong_extension\
    \ = class_name .. '.' .. extensions[1]\n    local strong_extension_strength =\
    \ 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = #extension - #extension:lower()\n        if extension_strength > strong_extension_strength\
    \ then\n            strong_extension = extension\n            strong_extension_strength\
    \ = extension_strength\n        end\n    end\n    return strong_extension\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
