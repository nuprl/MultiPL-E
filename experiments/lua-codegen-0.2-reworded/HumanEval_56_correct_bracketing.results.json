{
  "language": "lua",
  "name": "HumanEval_56_correct_bracketing",
  "results": [
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = {'<', '>'}\n    local close_brackets = {'<', '>'}\n    local i = 1\n    while i <= #brackets do\n        if brackets[i] == '<' then\n            if not (i+1) in open_brackets then\n                return false\n            end\n            open_brackets[i+1] = true\n        elseif brackets[i] == '>' then\n            if not (i-1) in close_brackets then\n                return false\n            end\n            close_brackets[i-1] = true\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpshewf7uj.lua:17: 'then' expected near 'in'\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" or brackets[i+1] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3t7phkcq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3t7phkcq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" or brackets[i+1] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3t7phkcq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3t7phkcq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local function is_open_bracket(char)\n        return char == \"(\" or char == \"[\" or char == \"{\"\n    end\n    local function is_close_bracket(char)\n        return char == \")\" or char == \"]\" or char == \"}\"\n    end\n    local function is_balanced(brackets)\n        local i = 1\n        while i <= #brackets do\n            if not is_open_bracket(brackets[i]) and not is_close_bracket(brackets[i]) then\n                return false\n            end\n            i = i + 1\n        end\n        return true\n    end\n    return is_balanced(brackets)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppa7wl4tb.lua:34: expected: true, actual: false\nstack traceback:\n\t/tmp/tmppa7wl4tb.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = {'<', '>'}\n    local close_brackets = {'<', '>'}\n    local i = 1\n    while i <= #brackets do\n        if brackets[i] == '<' then\n            if not (i + 1) in open_brackets then\n                return false\n            else\n                open_brackets[i + 1] = true\n            end\n        else\n            if not (i - 1) in close_brackets then\n                return false\n            else\n                close_brackets[i - 1] = true\n            end\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp9rlnqk90.lua:17: 'then' expected near 'in'\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local function is_opening_bracket(char)\n        return char == \"<\"\n    end\n    local function is_closing_bracket(char)\n        return char == \">\"\n    end\n    local function is_opening_bracket_or_closing_bracket(char)\n        return is_opening_bracket(char) or is_closing_bracket(char)\n    end\n    local function is_closing_bracket_or_opening_bracket(char)\n        return is_closing_bracket(char) or is_opening_bracket(char)\n    end\n    local function is_balanced(brackets)\n        local i = 1\n        while i <= #brackets do\n            if not is_opening_bracket_or_closing_bracket(brackets[i]) then\n                return false\n            end\n            i = i + 1\n        end\n        return true\n    end\n    return is_balanced(brackets)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpruq8x5ek.lua:40: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpruq8x5ek.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = {'<', '<>'}\n    local close_brackets = {'>', '<>'}\n    local bracket_stack = {}\n    for _, char in pairs(brackets) do\n        if char == '<' then\n            if bracket_stack.count('<') == 0 then\n                bracket_stack['<'] = true\n            else\n                bracket_stack['<'] = false\n            end\n        elseif char == '>' then\n            if bracket_stack.count('>') == 0 then\n                bracket_stack['>'] = true\n            else\n                bracket_stack['>'] = false\n            end\n        end\n    end\n    for _, open_bracket in pairs(open_brackets) do\n        if not bracket_stack[open_bracket] then\n            return false\n        end\n    end\n    for _, close_bracket in pairs(close_brackets) do\n        if not bracket_stack[close_bracket] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9hki5pfy.lua:15: bad argument #1 to 'pairs' (table expected, got string)\nstack traceback:\n\t/tmp/tmp9hki5pfy.lua:15: in local 'candidate'\n\t/tmp/tmp9hki5pfy.lua:46: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = {'<', '>'}\n    local close_brackets = {'<', '>'}\n    local i = 1\n    while i <= #brackets do\n        if brackets[i] == '<' then\n            if not (i + 1) <= #brackets and brackets[i + 1] == '>' then\n                return false\n            else\n                open_brackets = {brackets[i], brackets[i + 1]}\n            end\n        else\n            if not (i - 1) >= 1 and open_brackets[1] == brackets[i - 1] then\n                close_brackets = {brackets[i - 1], brackets[i]}\n            end\n        end\n        i = i + 1\n    end\n    return #open_brackets == #close_brackets\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphko6rmgd.lua:23: attempt to compare number with boolean\nstack traceback:\n\t/tmp/tmphko6rmgd.lua:23: in local 'candidate'\n\t/tmp/tmphko6rmgd.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = {'<', '<>'}\n    local close_brackets = {'>', '<>'}\n    local open_bracket_count = 0\n    local close_bracket_count = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == '<' then\n            open_bracket_count = open_bracket_count + 1\n        elseif brackets[i] == '>' then\n            close_bracket_count = close_bracket_count + 1\n        end\n    end\n    if open_bracket_count == close_bracket_count then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3svmps_z.lua:37: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3svmps_z.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = {'<', '<>'}\n    local close_brackets = {'>', '<>'}\n    local result = true\n    for _, open_bracket in pairs(open_brackets) do\n        for _, close_bracket in pairs(close_brackets) do\n            if not (open_bracket == close_bracket) then\n                result = false\n                break\n            end\n        end\n        if not result then\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb2s5obqy.lua:32: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpb2s5obqy.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = {}\n    local close_brackets = {}\n    for i = 1, #brackets, 2 do\n        open_brackets[brackets[i]] = brackets[i+1]\n        close_brackets[brackets[i+1]] = brackets[i]\n    end\n    for i = 1, #open_brackets, 2 do\n        if open_brackets[i] ~= close_brackets[i] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg9aqteas.lua:15: table index is nil\nstack traceback:\n\t/tmp/tmpg9aqteas.lua:15: in local 'candidate'\n\t/tmp/tmpg9aqteas.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = {'<', '<>'}\n    local close_brackets = {'>', '<>'}\n    local result = true\n    for _, open_bracket in ipairs(open_brackets) do\n        for _, close_bracket in ipairs(close_brackets) do\n            if not (open_bracket == close_bracket) then\n                result = false\n                break\n            end\n        end\n        if not result then\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd590pcxu.lua:32: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpd590pcxu.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" or brackets[i+1] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3t7phkcq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3t7phkcq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = {}\n    local close_brackets = {}\n    for i = 1, #brackets, 2 do\n        open_brackets[brackets[i]] = brackets[i+1]\n        close_brackets[brackets[i+1]] = brackets[i]\n    end\n    for k, v in pairs(open_brackets) do\n        if v ~= close_brackets[k] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdab7c0dh.lua:15: table index is nil\nstack traceback:\n\t/tmp/tmpdab7c0dh.lua:15: in local 'candidate'\n\t/tmp/tmpdab7c0dh.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local i = 1\n    while i <= #brackets do\n        if brackets[i] ~= \">\" and brackets[i] ~= \"<\" then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl6ch9jpy.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpl6ch9jpy.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local function is_opening_bracket(char)\n        return char == \"<\"\n    end\n    local function is_closing_bracket(char)\n        return char == \">\"\n    end\n    local function is_bracket(char)\n        return is_opening_bracket(char) or is_closing_bracket(char)\n    end\n    local function is_balanced(string)\n        local i = 1\n        while i <= #string do\n            if not is_bracket(string[i]) then\n                return false\n            end\n            i = i + 1\n        end\n        return true\n    end\n    return is_balanced(brackets)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2135qbd2.lua:37: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2135qbd2.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = {}\n    local close_brackets = {}\n    for i = 1, #brackets, 2 do\n        open_brackets[brackets[i]] = brackets[i+1]\n        close_brackets[brackets[i+1]] = brackets[i]\n    end\n    for i = 1, #brackets, 2 do\n        if not (open_brackets[brackets[i]] == \">\" and close_brackets[brackets[i+1]] == \"<\") then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpse8ymjv4.lua:15: table index is nil\nstack traceback:\n\t/tmp/tmpse8ymjv4.lua:15: in local 'candidate'\n\t/tmp/tmpse8ymjv4.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = {'<', '>'}\n    local close_brackets = {'<', '>'}\n    local bracket_stack = {'<', '>'}\n    for i = 1, #brackets, 2 do\n        if brackets[i] == '<' then\n            open_brackets = {brackets[i], open_brackets}\n        elseif brackets[i] == '>' then\n            close_brackets = {brackets[i], close_brackets}\n        end\n    end\n    for i = 1, #brackets, 2 do\n        if brackets[i] == '<' then\n            bracket_stack = {brackets[i], bracket_stack}\n        elseif brackets[i] == '>' then\n            if bracket_stack[1] == '<' then\n                return false\n            end\n            bracket_stack = {brackets[i], bracket_stack}\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3osu1wfr.lua:42: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3osu1wfr.lua:42: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = {'<', '{', '(', '['}\n    local close_brackets = {'>', '}', ')', ']'}\n    local open_bracket_count = 0\n    local close_bracket_count = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == '<' then\n            open_bracket_count = open_bracket_count + 1\n        elseif brackets[i] == '>' then\n            close_bracket_count = close_bracket_count + 1\n        end\n    end\n    return open_bracket_count == close_bracket_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxqg7mkd4.lua:33: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxqg7mkd4.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" or brackets[i+1] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3t7phkcq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3t7phkcq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = {}\n    local close_brackets = {}\n    for i = 1, #brackets, 2 do\n        open_brackets[brackets[i]] = brackets[i+1]\n        close_brackets[brackets[i+1]] = brackets[i]\n    end\n    for k, v in pairs(open_brackets) do\n        if v ~= close_brackets[k] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdab7c0dh.lua:15: table index is nil\nstack traceback:\n\t/tmp/tmpdab7c0dh.lua:15: in local 'candidate'\n\t/tmp/tmpdab7c0dh.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local function is_open(index)\n        return brackets[index] == \"<\"\n    end\n    local function is_close(index)\n        return brackets[index] == \">\"\n    end\n    local function is_balanced(index)\n        return is_open(index) == is_close(index - 1)\n    end\n    local function is_balanced_recursive(index)\n        if index < 0 then return true end\n        return is_balanced(index) and is_balanced_recursive(index - 1)\n    end\n    return is_balanced_recursive(len(brackets) - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp37ptdbeb.lua:25: attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmp37ptdbeb.lua:25: in local 'candidate'\n\t/tmp/tmp37ptdbeb.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = {'<', '<>', '<<><>>', '><<>'}\n    local close_brackets = {'<>', '<<><>>', '><<>'}\n    for _, open_bracket in ipairs(open_brackets) do\n        for _, close_bracket in ipairs(close_brackets) do\n            if open_bracket == close_bracket then\n                return true\n            end\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp359urbca.lua:31: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp359urbca.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = {'<', '<>', '<<>', '<><>'}\n    local close_brackets = {'<>', '<><>', '<<><>', '<><><>'}\n    local result = true\n    for _, open_bracket in ipairs(open_brackets) do\n        if not (open_bracket in brackets) or not (brackets[open_bracket] in close_brackets) then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmps2ooeulj.lua:16: ')' expected near 'in'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = {'<', '<>', '<<><>>', '><<>'}\n    local close_brackets = {'<>', '<<><>>', '><<>'}\n    local open_count = 0\n    local close_count = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == '<' then\n            open_count = open_count + 1\n        elseif brackets[i] == '>' then\n            close_count = close_count + 1\n        end\n    end\n    if open_count == close_count then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8niwje9_.lua:37: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8niwje9_.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local function is_open(i)\n        return brackets[i] == \"<\"\n    end\n    local function is_close(i)\n        return brackets[i] == \">\"\n    end\n    local function is_balanced(i)\n        return is_open(i) == is_close(i+1)\n    end\n    for i = 1, #brackets, 2 do\n        if not is_balanced(i) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn5u_zayd.lua:36: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpn5u_zayd.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local function is_open_bracket(char)\n        return char == \"(\" or char == \"[\" or char == \"{\"\n    end\n    local function is_close_bracket(char)\n        return char == \")\" or char == \"]\" or char == \"}\"\n    end\n    local function is_balanced(brackets)\n        local function is_open_bracket(char)\n            return char == \"(\" or char == \"[\" or char == \"{\"\n        end\n        local function is_close_bracket(char)\n            return char == \")\" or char == \"]\" or char == \"}\"\n        end\n        local function is_balanced(brackets)\n            local function is_open_bracket(char)\n                return char == \"(\" or char == \"[\" or char == \"{\"\n            end\n            local function is_close_bracket(char)\n                return char == \")\" or char == \"]\" or char == \"}\"\n            end\n            return is_balanced(brackets) and\n                all(is_balanced(brackets)) and\n                all(is_balanced(brackets))\n    end\n    return is_balanced(brackets)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmpdb28v2el.lua:56: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = {}\n    local close_brackets = {}\n    for i = 1, #brackets, 2 do\n        if brackets[i] == \"<\" then\n            open_brackets[#open_brackets + 1] = i\n        else\n            close_brackets[#close_brackets + 1] = i\n    end\n    for i = 1, #open_brackets, 2 do\n        if open_brackets[i] ~= close_brackets[i] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmpsib8mc2c.lua:45: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = {'<', '>'}\n    local close_brackets = {'<', '>'}\n    for _, c in ipairs(brackets) do\n        if c in open_brackets then\n            close_brackets[open_brackets.index(c)] = c\n        end\n    end\n    for _, c in ipairs(close_brackets) do\n        if c not in open_brackets then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmpxw1q1vrs.lua:15: 'then' expected near 'in'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local function is_open_bracket(c)\n        return c == \"<\" or c == \"{\" or c == \"[\" or c == \"(\"\n    end\n    local function is_close_bracket(c)\n        return c == \">\" or c == \"}\" or c == \"]\" or c == \")\"\n    end\n    local function is_balanced(brackets)\n        local i = 1\n        while i <= #brackets do\n            if not is_open_bracket(brackets[i]) and not is_close_bracket(brackets[i]) then\n                return false\n            end\n            i = i + 1\n        end\n        return true\n    end\n    return is_balanced(brackets)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjaglbzur.lua:34: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjaglbzur.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" or brackets[i+1] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3t7phkcq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3t7phkcq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" or brackets[i+1] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3t7phkcq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3t7phkcq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local i = 1\n    while i <= #brackets do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy4y_9_2c.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpy4y_9_2c.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n    local bracket_count = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == \"<\" and brackets[i+1] == \">\" then\n            bracket_count = bracket_count + 1\n        end\n    end\n    if bracket_count == 0 then return true end\n    return bracket_count == #brackets\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxe02olay.lua:30: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxe02olay.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = {'<', '{', '(', '['}\n    local close_brackets = {'>', '}', ')', ']'}\n    local result = true\n    for _, char in ipairs(brackets) do\n        if char in open_brackets then\n            if not (char in close_brackets and\n                open_brackets[char] == close_brackets[char]) then\n                result = false\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmp8l7io4q3.lua:16: 'then' expected near 'in'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = {}\n    local close_brackets = {}\n    for i = 1, #brackets, 2 do\n        open_brackets[brackets[i]] = brackets[i+1]\n        close_brackets[brackets[i+1]] = brackets[i]\n    end\n    for i = 1, #brackets, 2 do\n        if not (open_brackets[brackets[i]] == \">\" and close_brackets[brackets[i+1]] == \"<\") then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpse8ymjv4.lua:15: table index is nil\nstack traceback:\n\t/tmp/tmpse8ymjv4.lua:15: in local 'candidate'\n\t/tmp/tmpse8ymjv4.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = {'<', '>'}\n    local close_brackets = {'<', '>'}\n    local i = 1\n    while i <= #brackets do\n        if brackets[i] == '<' then\n            if not (i+1) < #brackets and brackets[i+1] == '>' then\n                return false\n            end\n            open_brackets[#open_brackets+1] = brackets[i]\n        elseif brackets[i] == '>' then\n            if not (i-1) >= 1 and open_brackets[#open_brackets] == brackets[i-1] then\n                return false\n            end\n            close_brackets[#close_brackets+1] = brackets[i]\n        end\n        i = i + 1\n    end\n    return #open_brackets == #close_brackets\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl7n2iycf.lua:39: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpl7n2iycf.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = {'<', '{', '(', '['}\n    local close_brackets = {'>', '}', ')', ']'}\n    local result = true\n    for _, char in pairs(brackets) do\n        if char in open_brackets then\n            result = result and (char not in close_brackets)\n        elseif char in close_brackets then\n            result = result and (char not in open_brackets)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmp51sqxax6.lua:16: 'then' expected near 'in'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = {}\n    local close_brackets = {}\n    for i = 1, #brackets, 2 do\n        open_brackets[brackets[i]] = brackets[i+1]\n        close_brackets[brackets[i+1]] = brackets[i]\n    end\n    for k, v in pairs(open_brackets) do\n        if not v in close_brackets then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmpd5uj3xd7.lua:19: 'then' expected near 'in'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local function is_open_bracket(char)\n        return char == \"<\"\n    end\n    local function is_close_bracket(char)\n        return char == \">\"\n    end\n    local function is_bracket(char)\n        return is_open_bracket(char) or is_close_bracket(char)\n    end\n    local function is_balanced(string)\n        local i = 1\n        while i <= #string do\n            if not is_bracket(string[i]) then\n                return false\n            end\n            i = i + 1\n        end\n        return true\n    end\n    return is_balanced(brackets)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe4yeo40i.lua:37: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpe4yeo40i.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n    local bracket_count = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == \"<\" and brackets[i+1] == \">\" then\n            bracket_count = bracket_count + 1\n        end\n    end\n    if bracket_count == 0 then return true end\n    return bracket_count == #brackets\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxe02olay.lua:30: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxe02olay.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = {'<', '{', '(', '['}\n    local close_brackets = {'>', '}', ')', ']'}\n    local result = true\n    for _, c in ipairs(brackets) do\n        if not (c in open_brackets) or not (open_brackets[c] == close_brackets[c]) then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmpwlg_islb.lua:16: ')' expected near 'in'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local function is_open_bracket(c)\n        return c == \"<\" or c == \"{\" or c == \"[\" or c == \"(\"\n    end\n    local function is_close_bracket(c)\n        return c == \">\" or c == \"}\" or c == \"]\" or c == \")\"\n    end\n    local function is_balanced(brackets)\n        local i = 1\n        while i <= #brackets do\n            if not is_open_bracket(brackets[i]) and not is_close_bracket(brackets[i]) then\n                return false\n            end\n            i = i + 1\n        end\n        return true\n    end\n    return is_balanced(brackets)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjaglbzur.lua:34: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjaglbzur.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n    local opening_bracket = brackets[1]\n    local closing_bracket = brackets[2]\n    if opening_bracket == \">\" and closing_bracket == \"<\" then return true end\n    if opening_bracket == \"<\" and closing_bracket == \">\" then return true end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3nam7pkx.lua:23: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3nam7pkx.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = {'<', '{', '(', '['}\n    local close_brackets = {'>', '}', ')', ']'}\n    local result = true\n    for _, v in ipairs(open_brackets) do\n        if not (v in brackets) then\n            result = false\n            break\n        end\n    end\n    for _, v in ipairs(close_brackets) do\n        if not (v in brackets) then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmpt37u4q2i.lua:16: ')' expected near 'in'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local function is_open_bracket(char)\n        return char == \"<\"\n    end\n    local function is_close_bracket(char)\n        return char == \">\"\n    end\n    local function is_bracket(char)\n        return is_open_bracket(char) or is_close_bracket(char)\n    end\n    local function is_balanced(brackets)\n        local i = 1\n        while i <= #brackets do\n            if not is_bracket(brackets[i]) then\n                return false\n            end\n            i = i + 1\n        end\n        return true\n    end\n    return is_balanced(brackets)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjfe3qt7e.lua:37: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjfe3qt7e.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" or brackets[i+1] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3t7phkcq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3t7phkcq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = {'<', '{', '(', '['}\n    local close_brackets = {'>', '}', ')', ']'}\n    local result = true\n    for _, b in ipairs(brackets) do\n        if not (b in open_brackets) or not (open_brackets[b] == b) then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmpcp7dl1qb.lua:16: ')' expected near 'in'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local i, j\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" or brackets[i+1] ~= \">\" then\n            j = i - 1\n            while j >= 1 and brackets[j] ~= \"<\" do\n                j = j - 1\n            if j == 0 then\n                return false\n            else\n                j = j + 1\n            end\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmppdk_f8_2.lua:45: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = {'<', '<>', '<<>', '<><>'}\n    local close_brackets = {'>', '><', '>>', '<<'}\n    for _, open_bracket in ipairs(open_brackets) do\n        for _, close_bracket in ipairs(close_brackets) do\n            if not (open_bracket == close_bracket) then\n                if not (brackets.sub(1, 1) == open_bracket) or not (brackets.sub(-2, 1) == close_bracket) then\n                    return false\n                end\n            end\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp81hw9ujw.lua:29: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp81hw9ujw.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" or brackets[i+1] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3t7phkcq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3t7phkcq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" or brackets[i+1] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3t7phkcq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3t7phkcq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = {}\n    local close_brackets = {}\n    for i = 1, #brackets, 2 do\n        open_brackets[brackets[i]] = brackets[i+1]\n        close_brackets[brackets[i+1]] = brackets[i]\n    end\n    for i = 1, #open_brackets, 2 do\n        if open_brackets[i] ~= close_brackets[i] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg9aqteas.lua:15: table index is nil\nstack traceback:\n\t/tmp/tmpg9aqteas.lua:15: in local 'candidate'\n\t/tmp/tmpg9aqteas.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = {'<', '{', '(', '['}\n    local close_brackets = {'>', '}', ')', ']'}\n    local result = true\n    for _, char in pairs(brackets) do\n        if char in open_brackets then\n            if not (char in close_brackets) then\n                result = false\n            end\n        elseif char in close_brackets then\n            result = false\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmpvldg3zgp.lua:16: 'then' expected near 'in'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = {'<', '('}\n    local close_brackets = {'>', ')'}\n    local result = true\n    for _, c in ipairs(brackets) do\n        if not (open_brackets[c] or close_brackets[c]) then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4hvvzps2.lua:31: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4hvvzps2.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local function is_open(index)\n        return brackets[index] == \"<\"\n    end\n    local function is_close(index)\n        return brackets[index] == \">\"\n    end\n    local function is_balanced(index)\n        return is_open(index) == is_close(index + 1)\n    end\n    for i = 1, #brackets, 2 do\n        if not is_balanced(i) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0opbp2ad.lua:36: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0opbp2ad.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = {'<', '{', '(', '['}\n    local close_brackets = {'>', '}', ')', ']'}\n    local result = true\n    for _, b in ipairs(brackets) do\n        if not (b in open_brackets) or not (open_brackets[b] == b) then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmpcp7dl1qb.lua:16: ')' expected near 'in'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" or brackets[i+1] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3t7phkcq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3t7phkcq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local function is_open(index)\n        return brackets[index] == \"<\"\n    end\n    local function is_close(index)\n        return brackets[index] == \">\"\n    end\n    local function is_open_or_close(index)\n        return is_open(index) or is_close(index)\n    end\n    local function is_open_or_close_pair(index)\n        return is_open(index) and is_close(index + 1)\n    end\n    local function is_open_pair(index)\n        return is_open(index) and is_open(index + 1)\n    end\n    local function is_close_pair(index)\n        return is_close(index) and is_close(index + 1)\n    end\n    local function is_open_or_close_pair_or_empty(index)\n        return is_open_or_close(index) or is_open_or_close(index + 1) or brackets[index] == \"\"\n    end\n    local function is_open_or_close_pair_or_empty_pair(index)\n        return is_open_or_close_pair(index) or is_open_or_close_pair(index + 1) or brackets[index] == \"\"\n    end\n    local function is_open_or_close_pair_or_empty_pair_or_empty(index)\n        return is_open_or_close_pair_or_empty(index) or is_open_or_close_pair_or_empty(index + 1) or brackets[index] == \"\"\n    end\n    local function is_open_or_close_pair_or_empty_pair_or_empty_pair(index)\n        return is_open_or_close_pair_or_empty_pair(index) or is_open_or_close_pair_or_empty_pair(index + 1) or brackets[index] == \"\"\n    end\n    local function is_open_or_close_pair_or_empty_pair_or_empty_pair_or_empty(index)\n        return is_open_or_close_pair_or_empty_pair_or_empty(index) or is\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmpso49z_h7.lua:44: 'end' expected (to close 'function' at line 42) near 'lu'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local i, j, bracket_count = 1, 1, 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == \"<\" then\n            bracket_count = bracket_count + 1\n        elseif brackets[i] == \">\" then\n            bracket_count = bracket_count - 1\n        end\n        if bracket_count < 0 then\n            return false\n        end\n    end\n    for i = 2, #brackets, 2 do\n        if brackets[i] == \"<\" then\n            bracket_count = bracket_count + 1\n        elseif brackets[i] == \">\" then\n            bracket_count = bracket_count - 1\n        end\n        if bracket_count > 0 then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmy5kq5s5.lua:43: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmy5kq5s5.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = {}\n    local close_brackets = {}\n    for i = 1, #brackets, 2 do\n        open_brackets[brackets[i]] = brackets[i+1]\n        close_brackets[brackets[i+1]] = brackets[i]\n    end\n    for i = 1, #brackets, 2 do\n        if not (open_brackets[brackets[i]] == \">\" and close_brackets[brackets[i+1]] == \"<\") then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpse8ymjv4.lua:15: table index is nil\nstack traceback:\n\t/tmp/tmpse8ymjv4.lua:15: in local 'candidate'\n\t/tmp/tmpse8ymjv4.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local function is_open_bracket(char)\n        return char == \"<\"\n    end\n    local function is_close_bracket(char)\n        return char == \">\"\n    end\n    local function is_opening_bracket(char)\n        return char == \"<\" or char == \"(\"\n    end\n    local function is_closing_bracket(char)\n        return char == \">\" or char == \")\"\n    end\n    local function is_bracket(char)\n        return is_opening_bracket(char) or is_closing_bracket(char)\n    end\n    local function is_balanced(string)\n        local i = 1\n        while i <= #string do\n            if not is_bracket(string[i]) then\n                return false\n            end\n            i = i + 1\n        end\n        return true\n    end\n    local function is_balanced_brackets(string)\n        local i = 1\n        while i <= #string do\n            if not is_balanced(string[i]) then\n                return false\n            end\n            i = i + 1\n        end\n        return true\n    end\n    return is_balanced_brackets(brackets)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg_rb79bn.lua:29: attempt to get length of a nil value (local 'string')\nstack traceback:\n\t/tmp/tmpg_rb79bn.lua:29: in upvalue 'is_balanced'\n\t/tmp/tmpg_rb79bn.lua:40: in function </tmp/tmpg_rb79bn.lua:37>\n\t(...tail calls...)\n\t/tmp/tmpg_rb79bn.lua:53: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    if brackets == \"\" then return true end\n    local bracket_count = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == \"<\" and brackets[i+1] == \">\" then\n            bracket_count = bracket_count + 1\n        end\n    end\n    if bracket_count == 0 then return true end\n    return bracket_count == #brackets\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxe02olay.lua:30: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxe02olay.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = {'<', '{', '(', '['}\n    local close_brackets = {'>', '}', ')', ']'}\n    for _, char in ipairs(brackets) do\n        if char in open_brackets then\n            if not (char in close_brackets and open_brackets[char] == close_brackets[char]) then\n                return false\n            end\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmpdvd6bflq.lua:15: 'then' expected near 'in'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = {'<', '<>', '<<>', '<><>'}\n    local close_brackets = {'>', '>><', '><>', '<><><>'}\n    local open_count = 0\n    for _, c in ipairs(brackets) do\n        if c == '<' then\n            open_count = open_count + 1\n        elseif c == '>' then\n            open_count = open_count - 1\n        end\n    end\n    return open_count == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfkt4_35l.lua:32: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfkt4_35l.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = {}\n    for i = 1, #brackets, 2 do\n        if brackets[i] == \"<\" then\n            open_brackets[#open_brackets + 1] = i\n        end\n    end\n    for i = 1, #open_brackets, 2 do\n        if open_brackets[i] == open_brackets[i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms3q8_uy.lua:33: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpms3q8_uy.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = {'<', '{', '(', '['}\n    local close_brackets = {'>', '}', ')', ']'}\n    for _, c in ipairs(brackets) do\n        if c in open_brackets then\n            if not (c in close_brackets) then\n                return false\n            end\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmp1ml6u189.lua:15: 'then' expected near 'in'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local function is_open(index)\n        return brackets[index] == \"<\"\n    end\n    local function is_close(index)\n        return brackets[index] == \">\"\n    end\n    local function is_balanced(index)\n        return is_open(index) == is_close(index + 1)\n    end\n    local function is_balanced_recursive(index)\n        if index == 0 then\n            return true\n        elseif is_open(index) then\n            return is_balanced_recursive(index - 1) and is_balanced_recursive(index + 1)\n        else\n            return is_balanced_recursive(index - 1)\n        end\n    end\n    return is_balanced_recursive(#brackets)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6c8gclzp.lua:40: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp6c8gclzp.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" or brackets[i+1] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3t7phkcq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3t7phkcq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" or brackets[i+1] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3t7phkcq.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3t7phkcq.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = {'<', '{', '(', '['}\n    local close_brackets = {'>', '}', ')', ']'}\n    for i = 1, #open_brackets do\n        if not (open_brackets[i] == brackets[1] and close_brackets[i] == brackets[2]) then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjz73y9xi.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjz73y9xi.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local function is_open(index)\n        return brackets[index] == \"<\"\n    end\n    local function is_close(index)\n        return brackets[index] == \">\"\n    end\n    local function is_balanced(index)\n        return is_open(index) == is_close(index - 1)\n    end\n    local function is_balanced_recursive(index)\n        if index < 0 then return true end\n        return is_balanced(index) and is_balanced_recursive(index - 1)\n    end\n    return is_balanced_recursive(len(brackets) - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp37ptdbeb.lua:25: attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmp37ptdbeb.lua:25: in local 'candidate'\n\t/tmp/tmp37ptdbeb.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = {'<', '{', '(', '['}\n    local close_brackets = {'>', '}', ')', ']'}\n    local result = true\n    for _, char in pairs(brackets) do\n        if char in open_brackets then\n            if not (char in close_brackets and\n                open_brackets[char] == close_brackets[char]) then\n                result = false\n                break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmprnkuw1y_.lua:16: 'then' expected near 'in'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = {}\n    local close_brackets = {}\n    for i=1,#brackets do\n        if brackets[i] == \"<\" then\n            open_brackets[i] = true\n        else\n            open_brackets[i] = false\n        end\n        if brackets[i] == \">\" then\n            close_brackets[i] = true\n        else\n            close_brackets[i] = false\n        end\n    end\n    for i=1,#brackets do\n        if open_brackets[i] and not close_brackets[i] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpilimnrji.lua:41: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpilimnrji.lua:41: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = {'<', '{', '(', '['}\n    local close_brackets = {'>', '}', ')', ']'}\n    local bracket_count = 0\n    for _, char in pairs(brackets) do\n        if char in open_brackets then\n            bracket_count = bracket_count + 1\n        end\n    end\n    return bracket_count == len(close_brackets)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmp69albkmu.lua:16: 'then' expected near 'in'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = {'<', '<>'}\n    local close_brackets = {'>', '<>'}\n    local result = true\n    for _, open_bracket in pairs(open_brackets) do\n        for _, close_bracket in pairs(close_brackets) do\n            if not (open_bracket == close_bracket) then\n                result = false\n                break\n            end\n        end\n        if not result then\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb2s5obqy.lua:32: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpb2s5obqy.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = {'<', '<>', '<<><>>', '><<>'}\n    local close_brackets = {'<>', '<<><>>', '><<>'}\n    local open_count = 0\n    local close_count = 0\n    for i = 1, #brackets, 2 do\n        if brackets[i] == '<' then\n            open_count = open_count + 1\n        elseif brackets[i] == '>' then\n            close_count = close_count + 1\n        end\n    end\n    if open_count == close_count then\n        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8niwje9_.lua:37: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8niwje9_.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = {'<', '>'}\n    local close_brackets = {'<', '>'}\n    local result = true\n    for _, char in pairs(brackets) do\n        if char == '<' then\n            open_brackets = set.union(open_brackets, {'<'})\n        elseif char == '>' then\n            close_brackets = set.union(close_brackets, {'>'})\n        end\n        if open_brackets ~= close_brackets then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsy3_k_3h.lua:15: bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\t/tmp/tmpsy3_k_3h.lua:15: in local 'candidate'\n\t/tmp/tmpsy3_k_3h.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = {'<', '('}\n    local close_brackets = {'>', ')'}\n    local i = 1\n    while i <= #brackets do\n        if brackets[i] ~= open_brackets[#open_brackets] then\n            return false\n        end\n        if brackets[i] ~= close_brackets[#close_brackets] then\n            return false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7s1hpi2l.lua:30: expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7s1hpi2l.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpvyofec69.lua:38: 'end' expected (to close 'function' at line 11) near <eof>\n",
      "stdout": "",
      "timestamp": 1661907438
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = {}\n    for i = 1, #brackets, 2 do\n        if brackets[i] == \"<\" then\n            open_brackets[#open_brackets + 1] = i\n        end\n    end\n    for i = 1, #open_brackets, 2 do\n        if open_brackets[i] == open_brackets[i + 1] then\n            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms3q8_uy.lua:33: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpms3q8_uy.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local open_brackets = {'<', '{', '(', '['}\n    local close_brackets = {'>', '}', ')', ']'}\n    local result = true\n    for _, c in ipairs(brackets) do\n        if not (c in open_brackets) or not (open_brackets[c] == close_brackets[c]) then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292529,
      "stdout": "",
      "stderr": "lua: /tmp/tmpwlg_islb.lua:16: ')' expected near 'in'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening bracket has a corresponding closing bracket.\n-- >>> correct_bracketing(\"<\")\n-- False\n-- >>> correct_bracketing(\"<>\")\n-- True\n-- >>> correct_bracketing(\"<<><>>\")\n-- True\n-- >>> correct_bracketing(\"><<>\")\n-- False\nlocal function correct_bracketing(brackets)\n    local result = true\n    for i = 1, #brackets, 2 do\n        if brackets[i] ~= \"<\" and brackets[i] ~= \">\" then\n            result = false\n            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'), false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'), false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'), false)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw5o40edh.lua:25: expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw5o40edh.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907438
    }
  ]
}