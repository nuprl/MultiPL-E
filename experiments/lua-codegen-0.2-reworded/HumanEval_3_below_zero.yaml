name: HumanEval_3_below_zero
language: lua
prompt: "-- You're given a table of deposit and withdrawal operations on a bank account\
  \ that starts with\n-- zero balance. Your task is to detect if at any point the\
  \ balance of account fallls below zero, and\n-- at that point function should return\
  \ true. Otherwise it should return false.\n-- >>> below_zero([1, 2, 3])\n-- False\n\
  -- >>> below_zero([1, 2, -4, 5])\n-- True\nlocal function below_zero(operations)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = below_zero\n\
  \    lu.assertEquals(candidate({}), false)\n    lu.assertEquals(candidate({1, 2,\
  \ -3, 1, 2, -3}), false)\n    lu.assertEquals(candidate({1, 2, -4, 5, 6}), true)\n\
  \    lu.assertEquals(candidate({1, -1, 2, -2, 5, -5, 4, -4}), false)\n    lu.assertEquals(candidate({1,\
  \ -1, 2, -2, 5, -5, 4, -5}), true)\n    lu.assertEquals(candidate({1, -2, 2, -2,\
  \ 5, -5, 4, -4}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local balance = 0\n    for i = 1, #operations, 2 do\n        balance\
    \ = balance + operations[i]\n        balance = balance - operations[i + 1]\n \
    \   end\n    return balance < 0\nend", "    local balance = 0\n    for i = 1,\
    \ #operations, 2 do\n        balance = balance + operations[i]\n        if balance\
    \ < 0 then\n            return true\n        end\n    end\n    return false\n\
    end", "    local balance = 0\n    for i = 1, #operations, 2 do\n        balance\
    \ = balance + operations[i]\n        if balance < 0 then\n            return true\n\
    \        end\n    end\n    return false\nend", "    local balance = 0\n    for\
    \ i = 1, #operations, 2 do\n        balance = balance + operations[i]\n      \
    \  balance = balance - operations[i + 1]\n    end\n    return balance < 0\nend",
  "    local balance = 0\n    for _, value in ipairs(operations) do\n        balance\
    \ = balance + value\n    end\n    return balance < 0\nend", "    local balance\
    \ = 0\n    for _, value in ipairs(operations) do\n        balance = balance +\
    \ value\n        if balance < 0 then\n            return true\n        end\n \
    \   end\n    return false\nend", "    local balance = 0\n    for i = 1, #operations,\
    \ 2 do\n        balance = balance + operations[i]\n        balance = balance -\
    \ operations[i + 1]\n        if balance < 0 then\n            return true\n  \
    \      end\n    end\n    return false\nend", "    local balance = 0\n    for i\
    \ = 1, #operations, 2 do\n        balance = balance + operations[i]\n        if\
    \ balance < 0 then\n            return true\n        end\n    end\n    return\
    \ false\nend", "    local balance = 0\n    for i = 1, #operations, 2 do\n    \
    \    balance = balance + operations[i]\n        balance = balance - operations[i\
    \ + 1]\n        if balance < 0 then\n            return true\n        end\n  \
    \  end\n    return false\nend", "    local balance = 0\n    for _, operation in\
    \ ipairs(operations) do\n        balance = balance + operation\n        if balance\
    \ < 0 then\n            return true\n        end\n    end\n    return false\n\
    end", "    local balance = 0\n    for i = 1, #operations, 2 do\n        balance\
    \ = balance + operations[i]\n        balance = balance - operations[i + 1]\n \
    \       if balance < 0 then\n            return true\n        end\n    end\n \
    \   return false\nend", "    local balance = 0\n    for i = 1, #operations, 2\
    \ do\n        balance = balance + operations[i]\n        balance = balance - operations[i\
    \ + 1]\n    end\n    return balance < 0\nend", "    local balance = 0\n    for\
    \ i = 1, #operations, 2 do\n        if operations[i] > 0 then\n            balance\
    \ = balance + operations[i]\n        else\n            balance = balance - operations[i]\n\
    \        end\n    end\n    return balance < 0\nend", "    for i = 1, #operations,\
    \ 2 do\n        if operations[i] < 0 then\n            return true\n        end\n\
    \    end\n    return false\nend", "    for i = 1, #operations, 2 do\n        if\
    \ operations[i] < 0 then\n            return true\n        end\n    end\n    return\
    \ false\nend", "    local balance = 0\n    for i = 1, #operations, 2 do\n    \
    \    balance = balance + operations[i]\n        if balance < 0 then\n        \
    \    return true\n        end\n    end\n    return false\nend", "    for i = 1,\
    \ #operations, 2 do\n        if operations[i] < 0 then\n            return true\n\
    \        end\n    end\n    return false\nend", "    local balance = 0\n    for\
    \ i = 1, #operations, 2 do\n        if operations[i] > 0 then\n            balance\
    \ = balance + operations[i]\n        else\n            balance = balance - operations[i]\n\
    \        end\n    end\n    return balance < 0\nend", "    for i = 1, #operations,\
    \ 2 do\n        if operations[i] > operations[i + 1] then\n            return\
    \ true\n        end\n    end\n    return false\nend", "    local balance = 0\n\
    \    for i = 1, #operations, 2 do\n        if operations[i] > 0 then\n       \
    \     balance = balance + operations[i]\n        else\n            balance = balance\
    \ - operations[i]\n        end\n    end\n    return balance < 0\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
