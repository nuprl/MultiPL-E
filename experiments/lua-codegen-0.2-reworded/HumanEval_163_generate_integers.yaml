name: HumanEval_163_generate_integers
language: lua
prompt: "-- Given two positive integers a and b, return the even digits between a\n\
  -- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n\
  -- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10,\
  \ 14) \n-- []\nlocal function generate_integers(a, b)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n\
  \    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10,\
  \ 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17,\
  \ 89), {})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local t = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n\
    \            table.insert(t, i)\n        end\n    end\n    return t\nend", " \
    \   local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n       \
    \     result[i] = i\n        end\n    end\n    return result\nend", "    local\
    \ result = {}\n    for i = a, b, 2 do\n        result[i] = i\n    end\n    return\
    \ result\nend", "    local t = {}\n    for i = a, b, 2 do\n        t[i] = true\n\
    \    end\n    return t.keys()\nend", "    local result = {}\n    for i = a, b,\
    \ 2 do\n        if i > 0 then\n            table.insert(result, i)\n        end\n\
    \    end\n    return result\nend", "    local t = {}\n    for i = a, b, 2 do\n\
    \        if i > 0 then\n            table.insert(t, i)\n        end\n    end\n\
    \    return t\nend", "    local result = {}\n    for i = a, b, 2 do\n        if\
    \ i > b then break end\n        if i % 2 == 0 then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend", "    local t = {}\n    for\
    \ i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(t, i)\n\
    \        end\n    end\n    return t\nend", "    local result = {}\n    for i =\
    \ a, b, 2 do\n        result[i] = i\n    end\n    return result\nend", "    local\
    \ t = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(t,\
    \ i)\n        end\n    end\n    return t\nend", "    local t = {}\n    for i =\
    \ a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(t, i)\n   \
    \     end\n    end\n    return t\nend", "    local result = {}\n    for i = a,\
    \ b, 2 do\n        if i > 0 then\n            result[i] = i\n        end\n   \
    \ end\n    return result\nend", "    local result = {}\n    for i = a, b, 2 do\n\
    \        if i > 0 then\n            result[i] = i\n        end\n    end\n    return\
    \ result\nend", "    local result = {}\n    for i = a, b, 2 do\n        result[i]\
    \ = i\n    end\n    return result\nend", "    local result = {}\n    for i = a,\
    \ b, 2 do\n        if i % 2 == 0 then\n            table.insert(result, i)\n \
    \       end\n    end\n    return result\nend", "    local result = {}\n    for\
    \ i = a, b, 2 do\n        result[i] = i\n    end\n    return result\nend", " \
    \   local t = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n       \
    \     table.insert(t, i)\n        end\n    end\n    return t\nend", "    local\
    \ result = {}\n    for i = a, b, 2 do\n        result[i] = i\n    end\n    return\
    \ result\nend", "    local t = {}\n    for i = a, b, 2 do\n        table.insert(t,\
    \ i)\n    end\n    return t\nend", "    local result = {}\n    for i = a, b, 2\
    \ do\n        if i % 2 == 0 then\n            table.insert(result, i)\n      \
    \  end\n    end\n    return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
