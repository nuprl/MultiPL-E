{
  "name": "HumanEval_6_parse_nested_parens",
  "language": "lua",
  "prompt": "-- Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n-- For each of the group, output the deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((())) () ((())()())')\n-- [2, 3, 1, 3]\nlocal function parse_nested_parens(paren_string)\n",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())",
  "completions": [
    "    local paren_count = 0\n    local paren_stack = {}\n    local paren_stack_count = 0\n    local paren_stack_count_max = 0\n    local paren_stack_count_min = math.inf\n    local paren_stack_count_min_max = math.inf\n    local paren_stack_count_min_min = math.inf\n    local paren_stack_count_min_min_max = math.inf\n    local paren_stack_count_min_min_min = math.inf\n    local paren_stack_count_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_min_min_min = math.inf\n    local paren_",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_index = 1\n    local paren_char = ''\n    local paren_char_count = 0\n    local paren_char_index = 1\n    local paren_char_count_stack = {}\n    local paren_char_index_stack = {}\n    local paren_char_stack = {}\n    local paren_char_stack_count = {}\n    local paren_char_stack_index = {}\n    local paren_char_stack_count_stack = {}\n    local paren_char_stack_index_stack = {}\n    local paren_char_stack_stack = {}\n    local paren_char_stack_stack_count = {}\n    local paren_char_stack_stack_index = {}\n    local paren_char_stack_stack_count_stack = {}\n    local paren_char_stack_stack_index_stack = {}\n    local paren_char_stack_stack_stack = {}\n    local paren_char_stack_stack_stack_count = {}\n    local paren_char_stack_stack_stack_index = {}\n    local paren_char_stack_stack_stack_count_stack = {}\n    local paren_char_stack_stack_stack_index_stack = {}\n    local paren_char_stack_stack_stack_stack = {}\n    local paren_char_stack_stack_stack_stack_count = {}\n    local paren_char_stack_stack_stack_stack_index = {}\n    local paren_char_stack_stack_stack_stack_stack = {}\n    local paren_char_stack_stack_stack_stack_stack_count = {}\n    local paren_char_stack_stack_stack_stack_stack_index = {}\n    local paren_char_stack_stack_stack_stack_stack_stack = {}\n    local paren_char_stack_stack_stack_stack_stack_stack_count = {}\n    local paren_char_stack_stack_stack_stack_stack_stack_index = {}\n    local paren_",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_string_index = 1\n    local paren_string_len = len(paren_string)\n    local paren_string_index_end = paren_string_len\n    local paren_string_index_start = 0\n    local paren_string_index_end_start = 0\n    local paren_string_index_start_end = 0\n    local paren_string_index_start_end_end = 0\n    local paren_string_index_start_end_end_end = 0\n    local paren_string_index_start_end_end_end_end = 0\n    local paren_string_index_start_end_end_end_end_end = 0\n    local paren_string_index_start_end_end_end_end_end_end = 0\n    local paren_string_index_start_end_end_end_end_end_end_end = 0\n    local paren_string_index_start_end_end_end_end_end_end_end_end = 0\n    local paren_string_index_start_end_end_end_end_end_end_end_end_end = 0\n    local paren_string_index_start_end_end_end_end_end_end_end_end_end_end = 0\n    local paren_string_index_start_end_end_end_end_end_end_end_end_end_end_end = 0\n    local paren_string_index_start_end_end_end_end_end_end_end_end_end_end_end_end = 0\n    local paren_string_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end = 0\n    local paren_string_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end = 0\n    local paren_string_index_start_",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 1\n    local paren_stack_size = 0\n    local paren_stack_max = 0\n    local paren_stack_max_index = 0\n    local paren_stack_max_size = 0\n    local paren_stack_max_max = 0\n    local paren_stack_max_max_index = 0\n    local paren_stack_max_max_size = 0\n    local paren_stack_max_max_max = 0\n    local paren_stack_max_max_max_index = 0\n    local paren_stack_max_max_max_size = 0\n    local paren_stack_max_max_max_max = 0\n    local paren_stack_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max = 0\n    local paren_stack_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max = 0\n    local paren_stack_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max_max = 0\n    local paren_stack_max_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max_max_max = 0\n    local paren_stack_max_max_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_max_max_size = 0",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_stack_index = 0\n    local paren_stack_count = 0\n    local paren_stack_depth = 0\n    local paren_stack_index_count = 0\n    local paren_stack_depth_count = 0\n    local paren_stack_depth_index = 0\n    local paren_stack_depth_index_count = 0\n    local paren_stack_depth_index_count_count = 0\n    local paren_stack_depth_index_count_count_count = 0\n    local paren_stack_depth_index_count_count_count_count = 0\n    local paren_stack_depth_index_count_count_count_count_count = 0\n    local paren_stack_depth_index_count_count_count_count_count_count = 0\n    local paren_stack_depth_index_count_count_count_count_count_count_count = 0\n    local paren_stack_depth_index_count_count_count_count_count_count_count_count = 0\n    local paren_stack_depth_index_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_depth_index_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_depth_index_count_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_depth_index_count_count_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_depth_index_count_count_count_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_depth_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_depth_index_count_count_count_count_count_",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n            paren_count = paren_count + 1\n            if paren_stack
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_count = 0\n    local paren_stack_max = 0\n    local paren_stack_max_index = 0\n    local paren_stack_max_count = 0\n    local paren_stack_max_count_index = 0\n    local paren_stack_max_count_count = 0\n    local paren_stack_max_count_count_index = 0\n    local paren_stack_max_count_count_count = 0\n    local paren_stack_max_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n            if paren_stack[#",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    for i = 1,#",
    "    local result = {}\n    local paren_stack = {}\n    for i
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?)')) do\n        result[#                                                                                                                                                      ",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_size = 0\n    local paren_stack_max = 0\n    local paren_stack_max_index = 0\n    local paren_stack_max_size = 0\n    local paren_stack_max_max = 0\n    local paren_stack_max_max_index = 0\n    local paren_stack_max_max_size = 0\n    local paren_stack_max_max_max = 0\n    local paren_stack_max_max_max_index = 0\n    local paren_stack_max_max_max_size = 0\n    local paren_stack_max_max_max_max = 0\n    local paren_stack_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max = 0\n    local paren_stack_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max = 0\n    local paren_stack_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max_max = 0\n    local paren_stack_max_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max_max_max = 0\n    local paren_stack_max_max_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_max_max_size = 0",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_count = 0\n    local paren_stack_index_count = 0\n    local paren_stack_count_count = 0\n    local paren_stack_count_index = 0\n    local paren_stack_count_index_count = 0\n    local paren_stack_count_index_count_count = 0\n    local paren_stack_count_index_count_index = 0\n    local paren_stack_count_index_count_index_count = 0\n    local paren_stack_count_index_count_index_count_count = 0\n    local paren_stack_count_index_count_index_count_index = 0\n    local paren_stack_count_index_count_index_count_index_count = 0\n    local paren_stack_count_index_count_index_count_index_count_count = 0\n    local paren_stack_count_index_count_index_count_index_count_index = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count_count = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count_index = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count_index_count = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count_index_count_count = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count_index_count_index = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count_index_count_index_count = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    for i = 1,#paren_string,1 do\n        if paren_string[i] == '(' then\n            if paren_stack_index == paren_count then\n                paren_stack[paren_count] = paren_level\n                paren_count = paren_count + 1\n            end\n            paren_level = paren_level + 1\n            paren_stack_index = paren_stack_index + 1\n        elseif paren_string[i] == ')' then\n            if paren_stack_index == paren_count then\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[paren_count])\n                print(paren_stack[",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_count = 0\n    local paren_stack_level = 0\n    local paren_stack_string = ''\n    local paren_stack_string_count = 0\n    local paren_stack_string_level = 0\n    local paren_stack_string_string = ''\n    local paren_stack_string_string_count = 0\n    local paren_stack_string_string_level = 0\n    local paren_stack_string_string_string = ''\n    local paren_stack_string_string_string_count = 0\n    local paren_stack_string_string_string_level = 0\n    local paren_stack_string_string_string_string = ''\n    local paren_stack_string_string_string_string_count = 0\n    local paren_stack_string_string_string_string_level = 0\n    local paren_stack_string_string_string_string_string = ''\n    local paren_stack_string_string_string_string_string_count = 0\n    local paren_stack_string_string_string_string_string_level = 0\n    local paren_stack_string_string_string_string_string_string = ''\n    local paren_stack_string_string_string_string_string_string_count = 0\n    local paren_stack_string_string_string_string_string_string_level = 0\n    local paren_stack_string_string_string_string_string_string_string = ''\n    local paren_stack_string_string_string_string_string_string_string_count = 0\n    local paren_stack_string_string_string_string_string_string_string_level = 0\n    local paren_stack_string_string_string_string_string_string_string_string = ''\n    local paren_stack_string_string_string_string_string_string_string_string_count = 0\n    local paren_stack_string_string_string_string_string_string_string_string_level = 0",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_size = 0\n    local paren_stack_max = 0\n    local paren_stack_max_index = 0\n    local paren_stack_max_size = 0\n    local paren_stack_max_max = 0\n    local paren_stack_max_max_index = 0\n    local paren_stack_max_max_size = 0\n    local paren_stack_max_max_max = 0\n    local paren_stack_max_max_max_index = 0\n    local paren_stack_max_max_max_size = 0\n    local paren_stack_max_max_max_max = 0\n    local paren_stack_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max = 0\n    local paren_stack_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max = 0\n    local paren_stack_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max_max = 0\n    local paren_stack_max_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max_max_max = 0\n    local paren_stack_max_max_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_max_max_size = 0",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_size = 0",
    "    local result = {}\n    local paren_stack = {}\n    for i=1,#paren_string,2 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack] == 0 then\n                result[#result+1] = i\n            end\n            paren_stack[#paren_stack+1] = i\n        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack] > 0 then\n                paren_stack[#paren_stack] = paren_stack[#paren_stack]-1\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_string_index = 1\n    local paren_string_length = len(paren_string)\n    local paren_string_length_index = 1\n    local paren_string_length_length = len(paren_string_length)\n    local paren_string_length_length_index = 1\n    local paren_string_length_length_length = len(paren_string_length_length)\n    local paren_string_length_length_length_index = 1\n    local paren_string_length_length_length_length = len(paren_string_length_length_length)\n    local paren_string_length_length_length_length_index = 1\n    local paren_string_length_length_length_length_length = len(paren_string_length_length_length_length)\n    local paren_string_length_length_length_length_length_index = 1\n    local paren_string_length_length_length_length_length_length = len(paren_string_length_length_length_length_length)\n    local paren_string_length_length_length_length_length_length_index = 1\n    local paren_string_length_length_length_length_length_length_length = len(paren_string_length_length_length_length_length_length)\n    local paren_string_length_length_length_length_length_length_length_index = 1\n    local paren_string_length_length_length_length_length_length_length_length = len(paren_string_length_length_length_length_length_length_length)\n    local paren_string_length_length_length_length_length_length_length_length_index = 1\n    local paren_string_length_length_length_length_length_length_length_length_length = len(paren_string_length_length_length_length_length_length_length_length)\n    local paren_string_length",
    "    local result = {}\n    for i = 1, #paren_string, 2 do\n        local paren_count = 0\n        for j = i, #paren_string, 2 do\n            if paren_string[j] == '(' then\n                paren_count = paren_count + 1\n            elseif paren_string[j] == ')' then\n                paren_count = paren_count - 1\n            end\n            if paren_count == 0 then\n                break\n        end\n        if paren_count > 0 then\n            result[#result + 1] = paren_count\n        end\n    end\n    return result\nend",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_size = 0\n    local paren_stack_max = 0\n    local paren_stack_min = 0\n    local paren_stack_max_index = 0\n    local paren_stack_min_index = 0\n    local paren_stack_max_size = 0\n    local paren_stack_min_size = 0\n    local paren_stack_max_size_index = 0\n    local paren_stack_min_size_index = 0\n    local paren_stack_max_size_size = 0\n    local paren_stack_min_size_size = 0\n    local paren_stack_max_size_size_index = 0\n    local paren_stack_min_size_size_index = 0\n    local paren_stack_max_size_size_size = 0\n    local paren_stack_min_size_size_size = 0\n    local paren_stack_max_size_size_size_index = 0\n    local paren_stack_min_size_size_size_index = 0\n    local paren_stack_max_size_size_size_size = 0\n    local paren_stack_min_size_size_size_size = 0\n    local paren_stack_max_size_size_size_size_index = 0\n    local paren_stack_min_size_size_size_size_index = 0\n    local paren_stack_max_size_size_size_size_size = 0\n    local paren_stack_min_size_size_size_size_size = 0\n    local paren_stack_max_size_size_size_size_size_index = 0\n    local paren_stack_min_size_size_size_size_size_index = 0\n    local paren_stack_max_size_size_size_size_size_size = 0\n    local paren_stack_min_size_size_size_size_size_size = 0\n    local paren_stack_max_",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_index = 1\n    local paren_char = ''\n    local paren_char_count = 0\n    local paren_char_index = 1\n    local paren_char_count_stack = {}\n    local paren_char_index_stack = {}\n    local paren_char_stack = {}\n    local paren_char_stack_index = 0\n    local paren_char_stack_count = 0\n    local paren_char_stack_index_stack = {}\n    local paren_char_stack_count_stack = {}\n    local paren_char_stack_stack = {}\n    local paren_char_stack_stack_index = 0\n    local paren_char_stack_stack_count = 0\n    local paren_char_stack_stack_index_stack = {}\n    local paren_char_stack_stack_count_stack = {}\n    local paren_char_stack_stack_stack = {}\n    local paren_char_stack_stack_index_stack = {}\n    local paren_char_stack_stack_count_stack = {}\n    local paren_char_stack_stack_stack_index = 0\n    local paren_char_stack_stack_stack_count = 0\n    local paren_char_stack_stack_stack_index_stack = {}\n    local paren_char_stack_stack_stack_count_stack = {}\n    local paren_char_stack_stack_stack_stack = {}\n    local paren_char_stack_stack_stack_index_stack = {}\n    local paren_char_stack_stack_stack_count_stack = {}\n    local paren_char_stack_stack_stack_stack = {}\n    local paren_char_stack_stack_stack_index_stack = {}\n    local paren_char_stack_stack_stack_count_stack = {}\n    local paren_char_stack_stack_stack_stack = {}\n    local paren_char_stack_stack_stack_index_stack = {}\n    local paren_char_stack",
    "    local result = {}\n    local paren_stack = {}\n    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack] == 0 then\n                result[#result + 1] = i - 1\n            end\n            paren_stack[#paren_stack + 1] = i\n        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack] > 0 then\n                paren_stack[#paren_stack] = paren_stack[#paren_stack] - 1\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_size = 0\n    local paren_stack_max = 0\n    local paren_stack_min = 0\n    local paren_stack_max_index = 0\n    local paren_stack_min_index = 0\n    local paren_stack_max_size = 0\n    local paren_stack_min_size = 0\n    local paren_stack_max_size_index = 0\n    local paren_stack_min_size_index = 0\n    local paren_stack_max_size_size = 0\n    local paren_stack_min_size_size = 0\n    local paren_stack_max_size_size_index = 0\n    local paren_stack_min_size_size_index = 0\n    local paren_stack_max_size_size_size = 0\n    local paren_stack_min_size_size_size = 0\n    local paren_stack_max_size_size_size_index = 0\n    local paren_stack_min_size_size_size_index = 0\n    local paren_stack_max_size_size_size_size = 0\n    local paren_stack_min_size_size_size_size = 0\n    local paren_stack_max_size_size_size_size_index = 0\n    local paren_stack_min_size_size_size_size_index = 0\n    local paren_stack_max_size_size_size_size_size = 0\n    local paren_stack_min_size_size_size_size_size = 0\n    local paren_stack_max_size_size_size_size_size_index = 0\n    local paren_stack_min_size_size_size_size_size_index = 0\n    local paren_stack_max_size_size_size_size_size_size = 0\n    local paren_stack_min_size_size_size_size_size_size = 0\n    local paren_stack_max_",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    for i=1,#paren_string,2 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack] == 0 then\n                paren_stack[#paren_stack] = 1\n            else\n                paren_stack[#paren_stack] = 0\n            end\n            paren_count = paren_count + 1\n            paren_level = paren_stack[#paren_stack]\n            paren_string = paren_string[i+1]\n        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack] == 1 then\n                paren_stack[#paren_stack] = 0\n            else\n                paren_stack[#paren_stack] = 1\n            end\n            paren_count = paren_count - 1\n            paren_level = paren_stack[#paren_stack]\n            paren_string = paren_string[i+1]\n        end\n    end\n    return paren_count, paren_level\nend",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_index = 1\n    local paren_start = 1\n    local paren_end = 0\n    local paren_string_length = len(paren_string)\n    local paren_string_index = 1\n    local paren_string_length_index = 1\n    local paren_string_index_index = 1\n    local paren_string_index_length = 0\n    local paren_string_index_length_index = 1\n    local paren_string_index_length_length = 0\n    local paren_string_index_length_length_index = 1\n    local paren_string_index_length_length_length = 0\n    local paren_string_index_length_length_length_index = 1\n    local paren_string_index_length_length_length_length = 0\n    local paren_string_index_length_length_length_length_index = 1\n    local paren_string_index_length_length_length_length_length = 0\n    local paren_string_index_length_length_length_length_length_index = 1\n    local paren_string_index_length_length_length_length_length_length = 0\n    local paren_string_index_length_length_length_length_length_length_index = 1\n    local paren_string_index_length_length_length_length_length_length_length = 0\n    local paren_string_index_length_length_length_length_length_length_length_index = 1\n    local paren_string_index_length_length_length_length_length_length_length_length = 0\n    local paren_string_index_length_length_length_length_length_length_length_length_index = 1\n    local paren_string_index_length_length_length_length_length_length_length_length_length = 0\n    local paren_string_index_length_length_length_length_length_length_length_length_length_index = 1\n",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_string_index = 1\n    local paren_string_count = 0\n    local paren_string_depth = 0\n    local paren_string_stack = {}\n    local paren_string_stack_index = 1\n    local paren_string_stack_count = 0\n    local paren_string_stack_depth = 0\n    local paren_string_stack_stack = {}\n    local paren_string_stack_stack_index = 1\n    local paren_string_stack_stack_count = 0\n    local paren_string_stack_stack_depth = 0\n    local paren_string_stack_stack_stack = {}\n    local paren_string_stack_stack_stack_index = 1\n    local paren_string_stack_stack_stack_count = 0\n    local paren_string_stack_stack_stack_depth = 0\n    local paren_string_stack_stack_stack_stack = {}\n    local paren_string_stack_stack_stack_stack_index = 1\n    local paren_string_stack_stack_stack_stack_count = 0\n    local paren_string_stack_stack_stack_stack_depth = 0\n    local paren_string_stack_stack_stack_stack_stack = {}\n    local paren_string_stack_stack_stack_stack_stack_index = 1\n    local paren_string_stack_stack_stack_stack_stack_count = 0\n    local paren_string_stack_stack_stack_stack_stack_depth = 0\n    local paren_string_stack_stack_stack_stack_stack_stack = {}\n    local paren_string_stack_stack_stack_stack_stack_stack_index = 1\n    local paren_string_stack_stack_stack_stack_stack_stack_count = 0\n    local paren_string_stack_stack_stack_stack_stack_stack_depth = 0\n    local paren_string_stack_stack_stack_stack",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_stack_index = 1\n    local paren_stack_count = 0\n    local paren_stack_depth = 0\n    local paren_stack_string = ''\n    local paren_stack_index = 1\n    local paren_stack_count = 0\n    local paren_stack_depth = 0\n    local paren_stack_string = ''\n    local paren_stack_index = 1\n    local paren_stack_count = 0\n    local paren_stack_depth = 0\n    local paren_stack_string = ''\n    local paren_stack_index = 1\n    local paren_stack_count = 0\n    local paren_stack_depth = 0\n    local paren_stack_string = ''\n    local paren_stack_index = 1\n    local paren_stack_count = 0\n    local paren_stack_depth = 0\n    local paren_stack_string = ''\n    local paren_stack_index = 1\n    local paren_stack_count = 0\n    local paren_stack_depth = 0\n    local paren_stack_string = ''\n    local paren_stack_index = 1\n    local paren_stack_count = 0\n    local paren_stack_depth = 0\n    local paren_stack_string = ''\n    local paren_stack_index = 1\n    local paren_stack_count = 0\n    local paren_stack_depth = 0\n    local paren_stack_string = ''\n    local paren_stack_index = 1\n    local paren_stack_count = 0\n    local paren_stack_depth = 0\n    local paren_stack_string = ''\n    local paren_stack_index = 1\n    local paren_stack_count = 0\n    local paren_stack_depth = 0\n    local paren_stack_string = ''\n    local paren_stack_index = 1\n    local paren_stack_count = 0\n    local paren_",
    "    local paren_count = 0\n    local paren_stack = {}\n    local paren_stack_count = 0\n    local paren_stack_count_max = 0\n    local paren_stack_count_min = 0\n    local paren_stack_count_min_max = 0\n    local paren_stack_count_min_min = 0\n    local paren_stack_count_min_min_max = 0\n    local paren_stack_count_min_min_min = 0\n    local paren_stack_count_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_count = 0\n    local paren_stack_max = 0\n    local paren_stack_max_index = 0\n    local paren_stack_max_count = 0\n    local paren_stack_max_count_index = 0\n    local paren_stack_max_count_count = 0\n    local paren_stack_max_count_count_index = 0\n    local paren_stack_max_count_count_count = 0\n    local paren_stack_max_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_count = 0\n    local paren_stack_max = 0\n    local paren_stack_max_index = 0\n    local paren_stack_max_count = 0\n    local paren_stack_max_count_index = 0\n    local paren_stack_max_count_count = 0\n    local paren_stack_max_count_count_index = 0\n    local paren_stack_max_count_count_count = 0\n    local paren_stack_max_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count",
    "    local result = {}\n    local paren_stack = {}\n    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n            if not paren_stack[#paren_stack] then\n                paren_stack[#paren_stack] = 1\n            else\n                paren_stack[#paren_stack] = paren_stack[#paren_stack] + 1\n            end\n        else\n            if paren_stack[#paren_stack] then\n                if paren_stack[#paren_stack] == 1 then\n                    result[#result + 1] = i - 1\n                end\n                paren_stack[#paren_stack] = paren_stack[#paren_stack] - 1\n            end\n        end\n    end\n    return result\nend",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n            paren_count = paren_count + 1\n            if paren_count > paren_level then\n                paren_level = paren_count\n            end\n        elseif paren_string[i] == ')' then\n            paren_count = paren_count - 1\n            if paren_count < paren_level then\n                paren_level = paren_count\n            end\n        end\n    end\n    return paren_stack[1]\nend",
    "    local result = {}\n    local paren_stack = {}\n    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack] == 0 then\n                result[#result + 1] = i - 1\n            end\n            paren_stack[#paren_stack] = #paren_stack + 1\n        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack] == 1 then\n                result[#result + 1] = i - 1\n            end\n            paren_stack[#paren_stack] = #paren_stack - 1\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?)')) do\n        local depth = 0\n        for _, paren in ipairs(group) do\n            if paren == '(' then depth = depth + 1\n            elseif paren == ')' then depth = depth - 1\n        end\n        result[depth] = result[depth] + 1\n    end\n    return result\nend",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result+1] = #group\n    end\n    return result\nend",
    "    local paren_groups = {}\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 0\n    local paren_start = 0\n    local paren_end = 0\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 0\n    local paren_start = 0\n    local paren_end = 0\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 0\n    local paren_start = 0\n    local paren_end = 0\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 0\n    local paren_start = 0\n    local paren_end = 0\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 0\n    local paren_start = 0\n    local paren_end = 0\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 0\n    local paren_start = 0\n    local paren_end = 0\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 0\n    local paren_start = 0\n    local paren_end = 0\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 0\n    local paren_start = 0\n    local paren_end = 0\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 0\n    local paren_start = 0\n    local paren_end = 0\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 0\n    local paren_start = 0\n    local paren_end = 0\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 0\n    local paren_start = 0\n    local paren_end = 0",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 1\n    local paren_stack_size = 0\n    local paren_stack_max = 0\n    local paren_stack_max_index = 0\n    local paren_stack_max_size = 0\n    local paren_stack_max_size_index = 0\n    local paren_stack_max_size_size = 0\n    local paren_stack_max_size_size_index = 0\n    local paren_stack_max_size_size_size = 0\n    local paren_stack_max_size_size_size_index = 0\n    local paren_stack_max_size_size_size_size = 0\n    local paren_stack_max_size_size_size_size_index = 0\n    local paren_stack_max_size_size_size_size_size = 0\n    local paren_stack_max_size_size_size_size_size_index = 0\n    local paren_stack_max_size_size_size_size_size_size = 0\n    local paren_stack_max_size_size_size_size_size_size_index = 0\n    local paren_stack_max_size_size_size_size_size_size_size = 0\n    local paren_stack_max_size_size_size_size_size_size_size_index = 0\n    local paren_stack_max_size_size_size_size_size_size_size_size = 0\n    local paren_stack_max_size_size_size_size_size_size_size_size_index = 0\n    local paren_stack_max_size_size_size_size_size_size_size_size_size = 0\n    local paren_stack_max_size_size_size_size_size_size_size_size_size_index = 0\n    local paren_stack_max_size_size_size_size_size_size_size_size_size_size = 0\n    local paren_stack_max_size_size",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_string_index = 1\n    local paren_string_len = len(paren_string)\n    local paren_string_index_end = paren_string_len\n    local paren_stack_index = 1\n    local paren_stack_len = 0\n    local paren_stack_index_end = 0\n    local paren_stack_index_start = 1\n    local paren_stack_len_end = 0\n    local paren_stack_index_start_end = 0\n    local paren_stack_len_start = 0\n    local paren_stack_index_start_end_end = 0\n    local paren_stack_len_start_end = 0\n    local paren_stack_index_start_end_end_end = 0\n    local paren_stack_len_start_end_end = 0\n    local paren_stack_index_start_end_end_end = 0\n    local paren_stack_len_start_end_end = 0\n    local paren_stack_index_start_end_end_end = 0\n    local paren_stack_len_start_end_end = 0\n    local paren_stack_index_start_end_end_end = 0\n    local paren_stack_len_start_end_end = 0\n    local paren_stack_index_start_end_end_end = 0\n    local paren_stack_len_start_end_end = 0\n    local paren_stack_index_start_end_end_end = 0\n    local paren_stack_len_start_end_end = 0\n    local paren_stack_index_start_end_end_end = 0\n    local paren_stack_len_start_end_end = 0\n    local paren_stack_index_start_end_end_end = 0\n    local paren_stack_len_start_end_end = 0\n    local paren_stack_index_start_end_end_end = 0\n    local p",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack] == 0 then\n                paren_stack[#paren_stack] = 1\n                paren_count = paren_count + 1\n            end\n            if paren_stack[#paren_stack] == 1 then\n                paren_stack[#paren_stack] = 2\n                paren_level = paren_level + 1\n            end\n        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack] == 2 then\n                paren_stack[#paren_stack] = 1\n                paren_level = paren_level - 1\n            end\n            if paren_stack[#paren_stack] == 1 then\n                if paren_level == 0 then\n                    paren_count = paren_count - 1\n                    if paren_count == 0 then\n                        return paren_stack[1]\n                    end\n                end\n            end\n        end\n    end\n    return nil\nend",
    "    local result = {}\n    local paren_stack = {}\n    for i = 1,#paren_string,2 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack] == 0 then\n                result[#result+1] = i\n            end\n            paren_stack[#paren_stack+1] = #paren_stack\n        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack] > 0 then\n                paren_stack[#paren_stack] = paren_stack[#paren_stack]-1\n            end\n        end\n    end\n    for i = 1,#paren_stack,1 do\n        if paren_stack[i] > 0 then\n            result[#result+1] = i\n        end\n    end\n    return result\nend",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_size = 0\n    local paren_stack_max = 0\n    local paren_stack_min = math.inf\n    local paren_stack_max_index = 0\n    local paren_stack_min_index = 0\n    local paren_stack_min_size = math.inf\n    local paren_stack_min_max_index = 0\n    local paren_stack_min_max_size = math.inf\n    local paren_stack_min_max_index_size = math.inf\n    local paren_stack_min_max_size_index = 0\n    local paren_stack_min_max_size_size = math.inf\n    local paren_stack_min_max_size_index_size = 0\n    local paren_stack_min_max_size_size_index = 0\n    local paren_stack_min_max_size_size_size = math.inf\n    local paren_stack_min_max_size_size_index_size = 0\n    local paren_stack_min_max_size_size_size_index = 0\n    local paren_stack_min_max_size_size_size_size = math.inf\n    local paren_stack_min_max_size_size_size_index_size = 0\n    local paren_stack_min_max_size_size_size_size_index = 0\n    local paren_stack_min_max_size_size_size_size_size = math.inf\n    local paren_stack_min_max_size_size_size_size_index_size = 0\n    local paren_stack_min_max_size_size_size_size_size_index = 0\n    local paren_stack_min_max_size_size_size_size_size_size = math.inf\n    local paren_stack_min_max_size_size_size_size_size_index_size = 0\n    local paren_stack_min_max_size",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack_index = 0\n    local paren_stack_count = 0\n    local paren_stack_level = 0\n    local paren_stack_string = ''\n    local paren_stack_index_count = 0\n    local paren_stack_index_level = 0\n    local paren_stack_index_string = ''\n    local paren_stack_index_count_level = 0\n    local paren_stack_index_count_level_string = ''\n    local paren_stack_index_count_level_string_count = 0\n    local paren_stack_index_count_level_string_count_string = ''\n    local paren_stack_index_count_level_string_count_string_count = 0\n    local paren_stack_index_count_level_string_count_string_count_string = ''\n    local paren_stack_index_count_level_string_count_string_count_string_count = 0\n    local paren_stack_index_count_level_string_count_string_count_string_count_string = ''\n    local paren_stack_index_count_level_string_count_string_count_string_count_string_count = 0\n    local paren_stack_index_count_level_string_count_string_count_string_count_string_count_string = ''\n    local paren_stack_index_count_level_string_count_string_count_string_count_string_count_string_count = 0\n    local paren_stack_index_count_level_string_count_string_count_string_count_string_count_string_count_string = ''\n    local paren_stack_index_count_level_string_count_string_count_string_count_string_count_string_count_string_count_string = ''\n    local paren_stack_index_count_level_string_count_string_count_string_count_string_count_string_count_string_count_string_count",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    for i = 1,#paren_string,2 do\n        if paren_string[i] == '(' then\n            paren_count = paren_count + 1\n            paren_stack[paren_count] = paren_level\n            paren_level = paren_level + 1\n        elseif paren_string[i] == ')' then\n            paren_level = paren_level - 1\n            if paren_level < 0 then\n                error('unbalanced parentheses')\n            end\n            if paren_count > 0 then\n                paren_count = paren_count - 1\n                if paren_count < 0 then\n                    error('unbalanced parentheses')\n                end\n                if paren_count == 0 then\n                    if paren_level > 0 then\n                        error('unbalanced parentheses')\n                    end\n                    return paren_stack[1]\n                end\n            end\n        end\n        paren_string = paren_string:sub(i+1,#paren_string)\n    end\n    error('unbalanced parentheses')\nend",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    for i = 1,#paren_string,1 do\n        if paren_string[i] == '(' then\n            if paren_stack_index == #paren_stack then\n                paren_stack[#paren_stack] = paren_count\n                paren_stack_index = #paren_stack\n                paren_count = 0\n            end\n            paren_count = paren_count + 1\n            paren_stack_index = paren_stack_index + 1\n        elseif paren_string[i] == ')' then\n            if paren_stack_index == 1 then\n                return paren_stack[1]\n            end\n            paren_count = paren_count - 1\n            if paren_count < 0 then\n                return nil\n            end\n            paren_stack_index = paren_stack_index - 1\n        end\n    end\nend",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_string_index = 1\n    local paren_string_length = len(paren_string)\n    local paren_string_index_end = paren_string_index + 1\n    local paren_string_index_start = paren_string_index + 1\n    while paren_string_index < paren_string_length do\n        if paren_string[paren_string_index] == '(' then\n            if paren_string[paren_string_index_end] == ')' then\n                -- This is a single level of nesting.\n                -- Add it to the stack.\n                -- Increment the count.\n                -- Increment the level.\n                -- Increment the index.\n                -- Increment the length.\n                -- Increment the index end.\n                -- Increment the index start.\n                -- Increment the string.\n                -- Increment the string index.\n                -- Increment the string length.\n                -- Increment the string index end.\n                -- Increment the string index start.\n                -- Increment the string.\n                -- Increment the string index.\n                -- Increment the string length.\n                -- Increment the string index end.\n                -- Increment the string index start.\n                -- Increment the string.\n                -- Increment the string index.\n                -- Increment the string length.\n                -- Increment the string index end.\n                -- Increment the string index start.\n                -- Increment the string.\n                -- Increment the string index.\n                -- Increment the string length.\n                -- Increment the string index end.\n                -- Increment the string index start.\n                -- Increment the string.\n                -- Increment the string index.\n                -- Increment the string length.\n                -- Increment the string index end.\n                -- Increment the string index start.\n                -- Increment the string.\n                -- Increment the string index.\n                -- Increment the string length.\n                -- Increment the string index end.\n                -- Increment the string index start.\n                -- Increment the string.\n",
    "    local result = {}\n    for i = 1, #paren_string, 2 do\n        local paren_count = 0\n        local paren_level = 0\n        for j = i, #paren_string, 2 do\n            if paren_string[j] == '(' then\n                paren_count = paren_count + 1\n                if paren_count > paren_level then\n                    paren_level = paren_count\n                end\n            elseif paren_string[j] == ')' then\n                paren_count = paren_count - 1\n                if paren_count < paren_level then\n                    paren_level = paren_count\n                end\n            end\n        end\n        result[#result + 1] = paren_level\n        i = i + 2\n    end\n    return result\nend",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_size = 0\n    local paren_stack_max = 0\n    local paren_stack_max_index = 0\n    local paren_stack_max_size = 0\n    local paren_stack_max_max = 0\n    local paren_stack_max_max_index = 0\n    local paren_stack_max_max_size = 0\n    local paren_stack_max_max_max = 0\n    local paren_stack_max_max_max_index = 0\n    local paren_stack_max_max_max_size = 0\n    local paren_stack_max_max_max_max = 0\n    local paren_stack_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max = 0\n    local paren_stack_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max = 0\n    local paren_stack_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max_max = 0\n    local paren_stack_max_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max_max_max = 0\n    local paren_stack_max_max_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_max_max_size = 0",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_count = 0\n    local paren_stack_max = 0\n    local paren_stack_max_index = 0\n    local paren_stack_max_count = 0\n    local paren_stack_max_count_index = 0\n    local paren_stack_max_count_count = 0\n    local paren_stack_max_count_count_index = 0\n    local paren_stack_max_count_count_count = 0\n    local paren_stack_max_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count",
    "    local result = {}\n    local paren_stack = {}\n    local paren_count = 0\n    for i=1,#paren_string,2 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack] == 0 then\n                paren_stack[#paren_stack] = 1\n            end\n            paren_count = paren_count + 1\n        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack] == 1 then\n                result[#result + 1] = paren_count\n                paren_stack[#paren_stack] = 0\n            end\n            paren_count = paren_count - 1\n        end\n    end\n    return result\nend",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_stack_index = 0\n    local paren_stack_count = 0\n    local paren_stack_depth = 0\n    local paren_stack_index_count = 0\n    local paren_stack_count_count = 0\n    local paren_stack_depth_count = 0\n    local paren_stack_index_depth = 0\n    local paren_stack_count_depth = 0\n    local paren_stack_depth_depth = 0\n    local paren_stack_index_depth_depth = 0\n    local paren_stack_count_depth_depth = 0\n    local paren_stack_depth_depth_depth = 0\n    local paren_stack_index_depth_depth_depth = 0\n    local paren_stack_count_depth_depth_depth = 0\n    local paren_stack_depth_depth_depth_depth = 0\n    local paren_stack_index_depth_depth_depth_depth = 0\n    local paren_stack_count_depth_depth_depth_depth = 0\n    local paren_stack_depth_depth_depth_depth_depth = 0\n    local paren_stack_index_depth_depth_depth_depth_depth = 0\n    local paren_stack_count_depth_depth_depth_depth_depth = 0\n    local paren_stack_depth_depth_depth_depth_depth_depth = 0\n    local paren_stack_index_depth_depth_depth_depth_depth_depth = 0\n    local paren_stack_count_depth_depth_depth_depth_depth_depth = 0\n    local paren_stack_depth_depth_depth_depth_depth_depth_depth = 0\n    local paren_stack_index_depth_depth_depth_depth_depth_depth_depth = 0\n    local paren_stack_count_depth_depth_depth_depth_depth_depth_depth = 0\n    local paren_stack_depth_depth_depth_depth_depth_depth_depth_depth = 0\n    local paren_stack_index_depth_depth_depth",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_count = 0\n    local paren_stack_count_max = 0\n    local paren_stack_count_min = math.inf\n    local paren_stack_count_min_index = 0\n    local paren_stack_count_min_index_max = 0\n    local paren_stack_count_min_index_min = math.inf\n    local paren_stack_count_min_index_min_index = 0\n    local paren_stack_count_min_index_min_index_max = 0\n    local paren_stack_count_min_index_min_index_min = math.inf\n    local paren_stack_count_min_index_min_index_min_index = 0\n    local paren_stack_count_min_index_min_index_min_index_max = 0\n    local paren_stack_count_min_index_min_index_min_index_min = math.inf\n    local paren_stack_count_min_index_min_index_min_index_min_index = 0\n    local paren_stack_count_min_index_min_index_min_index_min_index_max = 0\n    local paren_stack_count_min_index_min_index_min_index_min_index_min = math.inf\n    local paren_stack_count_min_index_min_index_min_index_min_index_min_index = 0\n    local paren_stack_count_min_index_min_index_min_index_min_index_min_index_max = 0\n    local paren_stack_count_min_index_min_index_min_index_min_index_min_index_min = math.inf\n    local paren_stack_count_min_index_min_index_min_index_min_index_min_index_min_index = 0\n    local paren_stack_count_min_index_min_index_min_index_min_index_",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n            paren_count = paren_count + 1\n            if paren_count > paren_level then\n                paren_level = paren_count\n                paren_stack[paren_count] = i\n            end\n        else\n            if paren_count > paren_level then\n                paren_count = paren_count - 1\n                if paren_count == paren_level then\n                    if paren_stack[paren_count] ~= nil then\n                        local paren_start = paren_stack[paren_count]\n                        local paren_end = i\n                        local paren_string = paren_string[paren_start+1, paren_end]\n                        local paren_string_length = #paren_string\n                        local paren_string_new = ''\n                        for j = 1, paren_string_length, 2 do\n                            if paren_string[j] == '(' then\n                                paren_string_new = paren_string_new .. '('\n                            else\n                                paren_string_new = paren_string_new .. ')'\n                            end\n                            j = j + 1\n                        end\n                        if paren_string_new ~= '' then\n                            if paren_string_new ~= paren_string then\n                                local paren_string_new_length = #paren_string_new\n                                local paren_string_new_new = ''\n                                for j = 1, paren_string_new_length, 2 do\n                                    if paren_string_new[j] == '(' then\n                                        paren_string_new_new = paren_string_new_new .. '('\n                                    else\n                                        paren_string_new_new = paren_string_new_new .. ')'\n                                    end\n                                    j = j + 1\n                                end\n                                if paren_string_new_new ~= '' then\n                                    if p",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_count = 0\n    local paren_stack_max = 0\n    local paren_stack_max_index = 0\n    local paren_stack_max_count = 0\n    local paren_stack_max_count_index = 0\n    local paren_stack_max_count_count = 0\n    local paren_stack_max_count_count_index = 0\n    local paren_stack_max_count_count_count = 0\n    local paren_stack_max_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    for i = 1,#paren_string,1 do\n        if paren_string[i] == '(' then\n            if paren_stack_index == #paren_stack then\n                paren_stack[#paren_stack] = paren_count\n                paren_stack_index = #paren_stack\n                paren_count = 0\n            end\n            paren_count = paren_count + 1\n            paren_stack_index = paren_stack_index + 1\n            paren_level = paren_level + 1\n        elseif paren_string[i] == ')' then\n            paren_count = paren_count - 1\n            if paren_count < 0 then\n                error('Unbalanced parentheses')\n            end\n            if paren_count == 0 then\n                if paren_stack_index == #paren_stack then\n                    error('Unbalanced parentheses')\n                end\n                paren_stack_index = paren_stack_index - 1\n                if paren_stack_index < 0 then\n                    error('Unbalanced parentheses')\n                end\n                paren_level = paren_level - 1\n            end\n        end\n    end\n    return paren_stack[1]\nend",
    "    local paren_count = 0\n    local paren_stack = {}\n    local paren_stack_count = 0\n    local paren_stack_count_max = 0\n    local paren_stack_count_min = math.inf\n    local paren_stack_count_min_max = math.inf\n    local paren_stack_count_min_min = math.inf\n    local paren_stack_count_min_min_max = math.inf\n    local paren_stack_count_min_min_min = math.inf\n    local paren_stack_count_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_min_min_min = math.inf\n    local paren_",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_string_len = 0\n    local paren_string_index = 1\n    local paren_string_len_index = 1\n    local paren_string_len_len = 0\n    local paren_string_len_len_index = 1\n    local paren_string_len_len_len = 0\n    local paren_string_len_len_len_index = 1\n    local paren_string_len_len_len_len = 0\n    local paren_string_len_len_len_len_index = 1\n    local paren_string_len_len_len_len_len = 0\n    local paren_string_len_len_len_len_len_index = 1\n    local paren_string_len_len_len_len_len_len = 0\n    local paren_string_len_len_len_len_len_len_index = 1\n    local paren_string_len_len_len_len_len_len_len = 0\n    local paren_string_len_len_len_len_len_len_len_index = 1\n    local paren_string_len_len_len_len_len_len_len_len = 0\n    local paren_string_len_len_len_len_len_len_len_len_index = 1\n    local paren_string_len_len_len_len_len_len_len_len_len = 0\n    local paren_string_len_len_len_len_len_len_len_len_len_index = 1\n    local paren_string_len_len_len_len_len_len_len_len_len_len = 0\n    local paren_string_len_len_len_len_len_len_len_len_len_len_index = 1\n    local paren_string_len_len_len_len_len_len_len_len_len_len_len = 0\n    local paren_",
    "    local result = {}\n    local paren_stack = {}\n    for i = 1,#paren_string,2 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack] == 0 then\n                result[#result+1] = i\n            end\n            paren_stack[#paren_stack+1] = i\n        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack] > 0 then\n                result[#result+1] = i\n                paren_stack[#paren_stack] = 0\n            end\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend",
    "    local paren_count = 0\n    local paren_stack = {}\n    local paren_stack_count = 0\n    local paren_stack_count_max = 0\n    local paren_stack_count_min = 0\n    local paren_stack_count_min_max = 0\n    local paren_stack_count_min_min = 0\n    local paren_stack_count_min_min_max = 0\n    local paren_stack_count_min_min_min = 0\n    local paren_stack_count_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?)')) do\n        result[#result + 1] = #(group)\n    end\n    return result\nend",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_count = 0\n    local paren_stack_max = 0\n    local paren_stack_max_index = 0\n    local paren_stack_max_count = 0\n    local paren_stack_max_count_index = 0\n    local paren_stack_max_count_count = 0\n    local paren_stack_max_count_count_index = 0\n    local paren_stack_max_count_count_count = 0\n    local paren_stack_max_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n            if paren_stack_index == #paren_stack then\n                paren_stack[#paren_stack] = paren_count\n                paren_stack_index = #paren_stack\n                paren_count = 0\n            end\n            paren_count = paren_count + 1\n            paren_stack_index = paren_stack_index + 1\n        elseif paren_string[i] == ')' then\n            if paren_stack_index == 1 then\n                return paren_stack[1]\n            else\n                paren_stack_index = paren_stack_index - 1\n            end\n            paren_count = paren_count - 1\n        end\n    end\n    return nil\nend",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n            paren_count = paren_count + 1\n            if paren_count > paren_level then\n                paren_level = paren_count\n                paren_stack[paren_count] = i\n            end\n        elseif paren_string[i] == ')' then\n            paren_count = paren_count - 1\n            if paren_count < paren_level then\n                paren_level = paren_count\n                paren_stack[paren_count] = i\n            end\n        end\n        if paren_count == 0 then\n            if paren_level > 0 then\n                print(paren_stack[1] .. ' ' .. paren_stack[2])\n            end\n            return\n        end\n    end\nend",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result+1] = #group\n    end\n    return result\nend",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #paren_string, 2 do\n        local paren_group = string.sub(paren_string, i, i)\n        local paren_count = 0\n        for j = 1, #paren_group, 2 do\n            if paren_group[j] == '(' then\n                paren_count = paren_count + 1\n            elseif paren_group[j] == ')' then\n                paren_count = paren_count - 1\n            end\n        end\n        result[#result + 1] = paren_count\n    end\n    return result\nend",
    "    local paren_count = 0\n    local paren_stack = {}\n    local paren_stack_count = 0\n    local paren_stack_count_max = 0\n    local paren_stack_count_min = 0\n    local paren_stack_count_min_max = 0\n    local paren_stack_count_min_min = 0\n    local paren_stack_count_min_min_max = 0\n    local paren_stack_count_min_min_min = 0\n    local paren_stack_count_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_start = 1\n    local paren_end = 1\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_start = 1\n    local paren_end = 1\n    for i = 1,#paren_string,1 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack] == 0 then\n                paren_stack[#paren_stack] = 1\n                paren_count = paren_count + 1\n                paren_start = i\n            end\n        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack] == 1 then\n                paren_stack[#paren_stack] = 0\n                paren_count = paren_count - 1\n                paren_end = i\n            end\n        elseif paren_stack[#paren_stack] == 1 then\n            if paren_string[i] == '(' then\n                paren_stack[#paren_stack] = 2\n                paren_depth = paren_depth + 1\n            elseif paren_string[i] == ')' then\n                paren_stack[#paren_stack] = 1\n                paren_depth = paren_depth - 1\n            end\n        end\n    end\n    return paren_count, paren_depth\nend",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result+1] = #group\n    end\n    return result\nend",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_count = 0\n    local paren_stack_max = 0\n    local paren_stack_max_index = 0\n    local paren_stack_max_count = 0\n    local paren_stack_max_count_index = 0\n    local paren_stack_max_count_count = 0\n    local paren_stack_max_count_count_index = 0\n    local paren_stack_max_count_count_count = 0\n    local paren_stack_max_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    for i = 1, #paren_string, 1 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack] == 0 then\n                paren_stack[#paren_stack] = 1\n            else\n                paren_stack[#paren_stack] = 0\n            end\n            paren_count = paren_count + 1\n        else\n            if paren_stack[#paren_stack] == 1 then\n                paren_stack[#paren_stack] = 0\n                if paren_count > paren_level then\n                    paren_level = paren_count\n                end\n            end\n            paren_count = paren_count - 1\n        end\n    end\n    return paren_level\nend",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_size = 0\n    local paren_stack_max = 0\n    local paren_stack_min = math.inf\n    local paren_stack_max_index = 0\n    local paren_stack_min_index = math.inf\n    local paren_stack_max_size = 0\n    local paren_stack_min_size = math.inf\n    local paren_stack_max_size_index = 0\n    local paren_stack_min_size_index = math.inf\n    local paren_stack_max_size_size = 0\n    local paren_stack_min_size_size = math.inf\n    local paren_stack_max_size_size_index = 0\n    local paren_stack_min_size_size_index = math.inf\n    local paren_stack_max_size_size_size = 0\n    local paren_stack_min_size_size_size = math.inf\n    local paren_stack_max_size_size_size_index = 0\n    local paren_stack_min_size_size_size_index = math.inf\n    local paren_stack_max_size_size_size_size = 0\n    local paren_stack_min_size_size_size_size = math.inf\n    local paren_stack_max_size_size_size_size_index = 0\n    local paren_stack_min_size_size_size_size_index = math.inf\n    local paren_stack_max_size_size_size_size_size = 0\n    local paren_stack_min_size_size_size_size_size = math.inf\n    local paren_stack_max_size_size_size_size_size_index = 0\n    local paren_stack_min_size_size_size_size_size_index = math.inf\n    local paren_stack_max_size_size_size_size_size_size = 0\n    local paren_stack_min",
    "    local paren_count = 0\n    local paren_stack = {}\n    local paren_stack_count = 0\n    local paren_stack_count_max = 0\n    local paren_stack_count_min = math.inf\n    local paren_stack_count_min_max = math.inf\n    local paren_stack_count_min_min = math.inf\n    local paren_stack_count_min_min_max = math.inf\n    local paren_stack_count_min_min_min = math.inf\n    local paren_stack_count_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_min_min_min = math.inf\n    local paren_",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 1\n    local paren_stack_count = 0\n    local paren_stack_index_count = 0\n    local paren_stack_count_count = 0\n    local paren_stack_count_index = 0\n    local paren_stack_count_index_count = 0\n    local paren_stack_count_index_count_count = 0\n    local paren_stack_count_index_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count_count_count_count_count",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result+1] = #group\n    end\n    return result\nend",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 1\n    local paren_stack_size = 0",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_stack_index = 0\n    local paren_stack_max = 0\n    local paren_stack_max_index = 0\n    local paren_stack_max_depth = 0\n    local paren_stack_max_depth_index = 0\n    local paren_stack_max_depth_count = 0\n    local paren_stack_max_depth_count_index = 0\n    local paren_stack_max_depth_count_count = 0\n    local paren_stack_max_depth_count_count_index = 0\n    local paren_stack_max_depth_count_count_count = 0\n    local paren_stack_max_depth_count_count_count_index = 0\n    local paren_stack_max_depth_count_count_count_count = 0\n    local paren_stack_max_depth_count_count_count_count_index = 0\n    local paren_stack_max_depth_count_count_count_count_count = 0\n    local paren_stack_max_depth_count_count_count_count_count_index = 0\n    local paren_stack_max_depth_count_count_count_count_count_count = 0\n    local paren_stack_max_depth_count_count_count_count_count_count_index = 0\n    local paren_stack_max_depth_count_count_count_count_count_count_count = 0\n    local paren_stack_max_depth_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_depth_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_depth_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_depth_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_depth_count_count_count_count_count_count_",
    "    local paren_count = 0\n    local paren_stack = {}\n    local paren_stack_count = 0\n    local paren_stack_count_max = 0\n    local paren_stack_count_min = math.inf\n    local paren_stack_count_min_max = math.inf\n    local paren_stack_count_min_min = math.inf\n    local paren_stack_count_min_min_max = math.inf\n    local paren_stack_count_min_min_min = math.inf\n    local paren_stack_count_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_min_min = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_min_min_max = math.inf\n    local paren_stack_count_min_min_min_min_min_min_min_min_min_min = math.inf\n    local paren_",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_count = 0\n    local paren_stack_max = 0\n    local paren_stack_max_index = 0\n    local paren_stack_max_count = 0\n    local paren_stack_max_count_index = 0\n    local paren_stack_max_count_count = 0\n    local paren_stack_max_count_count_index = 0\n    local paren_stack_max_count_count_count = 0\n    local paren_stack_max_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_string_len = 0\n    local paren_string_index = 0\n    local paren_string_index_end = 0\n    local paren_string_index_start = 0\n    local paren_string_index_end_prev = 0\n    local paren_string_index_start_prev = 0\n    local paren_string_index_start_prev_prev = 0\n    local paren_string_index_end_prev_prev = 0\n    local paren_string_index_start_prev_prev_prev = 0\n    local paren_string_index_end_prev_prev_prev = 0\n    local paren_string_index_start_prev_prev_prev_prev = 0\n    local paren_string_index_end_prev_prev_prev_prev = 0\n    local paren_string_index_start_prev_prev_prev_prev_prev = 0\n    local paren_string_index_end_prev_prev_prev_prev_prev = 0\n    local paren_string_index_start_prev_prev_prev_prev_prev_prev = 0\n    local paren_string_index_end_prev_prev_prev_prev_prev_prev = 0\n    local paren_string_index_start_prev_prev_prev_prev_prev_prev_prev = 0\n    local paren_string_index_end_prev_prev_prev_prev_prev_prev_prev = 0\n    local paren_string_index_start_prev_prev_prev_prev_prev_prev_prev_prev = 0\n    local paren_string_index_end_prev_prev_prev_prev_prev_prev_prev_prev = 0\n    local paren_string_index_start_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0\n    local paren_string_index_end_prev_prev_prev_prev_prev_prev_prev_prev_prev_prev = 0\n    local paren_string_index_start_prev",
    "    local result = {}\n    local paren_stack = {}\n    for i = 1,#paren_string,2 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack] == 0 then\n                result[#result+1] = i\n            end\n            paren_stack[#paren_stack+1] = i\n        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack] == 0 then\n                result[#result+1] = i\n            end\n            paren_stack[#paren_stack-1] = i\n        end\n    end\n    return result\nend",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 1\n    local paren_stack_count = 0\n    local paren_stack_index_count = 0\n    local paren_stack_count_count = 0\n    local paren_stack_count_index = 0\n    local paren_stack_count_index_count = 0\n    local paren_stack_count_index_count_count = 0\n    local paren_stack_count_index_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count_count_count_count_count",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        if group ~= '' then\n            result[#result + 1] = #group\n        end\n    end\n    return result\nend",
    "    local result = {}\n    local paren_stack = {}\n    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack] == 0 then\n                result[#result + 1] = i\n            end\n            paren_stack[#paren_stack] = #paren_stack + 1\n        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack] == 1 then\n                result[#result + 1] = i\n            end\n            paren_stack[#paren_stack] = #paren_stack - 1\n        end\n    end\n    return result\nend",
    "    local paren_count = 0\n    local paren_stack = {}\n    local paren_stack_count = 0\n    local paren_stack_count_max = 0\n    local paren_stack_count_min = math.inf\n    local paren_stack_count_min_index = 0\n    local paren_stack_count_max_index = 0\n    local paren_stack_count_min_index_max = 0\n    local paren_stack_count_max_index_min = 0\n    local paren_stack_count_min_index_max_index = 0\n    local paren_stack_count_max_index_min_index = 0\n    local paren_stack_count_min_index_max_index_min = 0\n    local paren_stack_count_max_index_min_index_max = 0\n    local paren_stack_count_min_index_max_index_min_index = 0\n    local paren_stack_count_max_index_min_index_max_index = 0\n    local paren_stack_count_min_index_max_index_min_index_max = 0\n    local paren_stack_count_max_index_min_index_max_index_min = 0\n    local paren_stack_count_min_index_max_index_min_index_max_index = 0\n    local paren_stack_count_max_index_min_index_max_index_min_index = 0\n    local paren_stack_count_min_index_max_index_min_index_max_index_min = 0\n    local paren_stack_count_max_index_min_index_max_index_min_index_max = 0\n    local paren_stack_count_min_index_max_index_min_index_max_index_min_index = 0\n    local paren_stack_count_max_index_min_index_max_index_min_index_max_index = 0\n    local paren_stack_count_min_index_max_index_min_index_max_index_min_index_max = 0\n    local paren_stack_count",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result+1] = #group\n    end\n    return result\nend",
    "    local result = {}\n    local paren_stack = {}\n    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack] == 0 then\n                result[#result + 1] = i - 1\n            end\n            paren_stack[#paren_stack] = #paren_stack + 1\n        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack] == 1 then\n                result[#result + 1] = i - 1\n            end\n            paren_stack[#paren_stack] = #paren_stack - 1\n        end\n    end\n    return result\nend",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_stack_index = 0\n    local paren_stack_count = 0\n    local paren_stack_depth = 0\n    local paren_stack_index_count = 0\n    local paren_stack_depth_count = 0\n    local paren_stack_depth_index = 0\n    local paren_stack_depth_index_count = 0\n    local paren_stack_depth_index_count_max = 0\n    local paren_stack_depth_index_count_min = 0\n    local paren_stack_depth_index_count_max_min = 0\n    local paren_stack_depth_index_count_min_max = 0\n    local paren_stack_depth_index_count_min_max_min = 0\n    local paren_stack_depth_index_count_min_max_min_max = 0\n    local paren_stack_depth_index_count_min_max_min_max_min = 0\n    local paren_stack_depth_index_count_min_max_min_max_min_max = 0\n    local paren_stack_depth_index_count_min_max_min_max_min_max_min = 0\n    local paren_stack_depth_index_count_min_max_min_max_min_max_min_max = 0\n    local paren_stack_depth_index_count_min_max_min_max_min_max_min_max_min = 0\n    local paren_stack_depth_index_count_min_max_min_max_min_max_min_max_min_max = 0\n    local paren_stack_depth_index_count_min_max_min_max_min_max_min_max_min_max_min = 0\n    local paren_stack_depth_index_count_min_max_min_max_min_max_min_max_min_max_min_max = 0\n    local paren_stack_depth_index_count_min_max_min_max_min_max_min",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_stack_index = 0\n    local paren_stack_size = 0\n    local paren_stack_max = 0\n    local paren_stack_max_index = 0\n    local paren_stack_max_size = 0\n    local paren_stack_max_max = 0\n    local paren_stack_max_max_index = 0\n    local paren_stack_max_max_size = 0\n    local paren_stack_max_max_max = 0\n    local paren_stack_max_max_max_index = 0\n    local paren_stack_max_max_max_size = 0\n    local paren_stack_max_max_max_max = 0\n    local paren_stack_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max = 0\n    local paren_stack_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max = 0\n    local paren_stack_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max_max = 0\n    local paren_stack_max_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max_max_max = 0\n    local paren_stack_max_max_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_max_max_size = 0",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack] == 0 then\n                paren_stack[#paren_stack] = 1\n            else\n                paren_stack[#paren_stack] = 0\n            end\n            paren_count = paren_count + 1\n            paren_level = paren_level + 1\n        else\n            if paren_stack[#paren_stack] == 1 then\n                paren_stack[#paren_stack] = 0\n            else\n                paren_stack[#paren_stack] = 1\n            end\n            paren_count = paren_count - 1\n            if paren_count == 0 then\n                if paren_level > 1 then\n                    return paren_level\n                end\n            end\n        end\n    end\n    return 0\nend",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?)')) do\n        result[#result + 1] = #(group)\n    end\n    return result\nend",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend",
    "    local result = {}\n    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n            if paren_string[i+1] == '(' then\n                result[#result+1] = #result\n            else\n                result[#result+1] = #result + 1\n            end\n        else\n            result[#result+1] = #result\n        end\n    end\n    return result\nend",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_index = 1\n    local paren_start = 1\n    local paren_end = 0\n    local paren_string = ''\n    local paren_string_length = 0\n    local paren_string_index = 0\n    local paren_string_index_start = 0\n    local paren_string_index_end = 0\n    local paren_string_index_end_start = 0\n    local paren_string_index_end_end = 0\n    local paren_string_index_end_end_start = 0\n    local paren_string_index_end_end_end = 0\n    local paren_string_index_end_end_end_start = 0\n    local paren_string_index_end_end_end_end = 0\n    local paren_string_index_end_end_end_end_start = 0\n    local paren_string_index_end_end_end_end_end = 0\n    local paren_string_index_end_end_end_end_end_start = 0\n    local paren_string_index_end_end_end_end_end_end = 0\n    local paren_string_index_end_end_end_end_end_end_start = 0\n    local paren_string_index_end_end_end_end_end_end_end = 0\n    local paren_string_index_end_end_end_end_end_end_end_start = 0\n    local paren_string_index_end_end_end_end_end_end_end_end = 0\n    local paren_string_index_end_end_end_end_end_end_end_end_start = 0\n    local paren_string_index_end_end_end_end_end_end_end_end_end = 0\n    local paren_string_index_end_end_end_end_end_end_end_end_end_start = 0\n    local paren_string_index_end_end_end_end_end",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = group\n    end\n    return result\nend",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_string_len = 0\n    local paren_string_index = 0\n    local paren_string_index_end = 0\n    local paren_string_index_start = 0\n    local paren_string_index_end_prev = 0\n    local paren_string_index_start_prev = 0\n    local paren_string_index_start_next = 0\n    local paren_string_index_end_next = 0\n    local paren_string_index_start_next_prev = 0\n    local paren_string_index_end_next_prev = 0\n    local paren_string_index_start_next_next = 0\n    local paren_string_index_end_next_next = 0\n    local paren_string_index_start_next_next_prev = 0\n    local paren_string_index_end_next_next_prev = 0\n    local paren_string_index_start_next_next_next = 0\n    local paren_string_index_end_next_next_next = 0\n    local paren_string_index_start_next_next_next_prev = 0\n    local paren_string_index_end_next_next_next_prev = 0\n    local paren_string_index_start_next_next_next_next = 0\n    local paren_string_index_end_next_next_next_next = 0\n    local paren_string_index_start_next_next_next_next_prev = 0\n    local paren_string_index_end_next_next_next_next_next = 0\n    local paren_string_index_start_next_next_next_next_next_prev = 0\n    local paren_string_index_end_next_next_next_next_next_next = 0\n    local paren_string_index_start_next_next_next_next_next_next_prev = 0\n    local paren_string_index_end_next_next_next_",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_index = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_index = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_index = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_index = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_index = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_index = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_index = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_index = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_index = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_index = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_index = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_stack_index = 0\n    local paren_stack_count = 0\n    local paren_stack_depth = 0\n    local paren_stack_index_count = 0\n    local paren_stack_depth_count = 0\n    local paren_stack_depth_index = 0\n    local paren_stack_depth_index_count = 0\n    local paren_stack_depth_index_count_max = 0\n    local paren_stack_depth_index_count_min = 0\n    local paren_stack_depth_index_count_max_index = 0\n    local paren_stack_depth_index_count_min_index = 0\n    local paren_stack_depth_index_count_max_index_count = 0\n    local paren_stack_depth_index_count_min_index_count = 0\n    local paren_stack_depth_index_count_max_index_count_index = 0\n    local paren_stack_depth_index_count_min_index_count_index = 0\n    local paren_stack_depth_index_count_max_index_count_index_count = 0\n    local paren_stack_depth_index_count_min_index_count_index_count = 0\n    local paren_stack_depth_index_count_max_index_count_index_count_index = 0\n    local paren_stack_depth_index_count_min_index_count_index_count_index = 0\n    local paren_stack_depth_index_count_max_index_count_index_count_index_count = 0\n    local paren_stack_depth_index_count_min_index_count_index_count_index_count_index = 0\n    local paren_stack_depth_index_count_max_index_count_index_count_index_count_index_count = 0\n    local paren_stack_depth_index_count_min_index_count_index_count_index_count_index_count_index = 0\n    local paren_stack",
    "    local result = {}\n    local paren_stack = {}\n    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack] == 0 then\n                result[#result + 1] = i - 1\n            end\n            paren_stack[#paren_stack] = #paren_stack + 1\n        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack] == 1 then\n                result[#result + 1] = i - 1\n            end\n            paren_stack[#paren_stack] = #paren_stack - 1\n        end\n    end\n    return result\nend",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    for i = 1,#paren_string,2 do\n        if paren_string[i] == '(' then\n            if paren_stack_index == #paren_stack then\n                paren_stack[#paren_stack] = paren_count\n                paren_stack_index = #paren_stack\n                paren_count = 0\n            end\n            paren_count = paren_count + 1\n            paren_stack_index = paren_stack_index + 1\n            paren_level = paren_level + 1\n        elseif paren_string[i] == ')' then\n            paren_count = paren_count - 1\n            if paren_count < 0 then\n                print('Error: unmatched parenthesis')\n                return\n            end\n            if paren_count == 0 then\n                paren_level = paren_level - 1\n                if paren_level < 0 then\n                    print('Error: unmatched parenthesis')\n                    return\n                end\n            end\n        end\n    end\n    return paren_stack[1]\nend",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_index = 1\n    local paren_char = ''\n    local paren_char_count = 0\n    local paren_char_index = 1\n    local paren_char_count_stack = {}\n    local paren_char_index_stack = {}\n    local paren_char_stack = {}\n    local paren_char_stack_index = 0\n    local paren_char_stack_count = 0\n    local paren_char_stack_count_stack = {}\n    local paren_char_stack_index_stack = {}\n    local paren_char_stack_stack = {}\n    local paren_char_stack_stack_index = 0\n    local paren_char_stack_stack_count = 0\n    local paren_char_stack_stack_count_stack = {}\n    local paren_char_stack_stack_index_stack = {}\n    local paren_char_stack_stack_stack = {}\n    local paren_char_stack_stack_stack_index = 0\n    local paren_char_stack_stack_stack_count = 0\n    local paren_char_stack_stack_stack_count_stack = {}\n    local paren_char_stack_stack_stack_index_stack = {}\n    local paren_char_stack_stack_stack_stack = {}\n    local paren_char_stack_stack_stack_stack_index = 0\n    local paren_char_stack_stack_stack_stack_count = 0\n    local paren_char_stack_stack_stack_stack_count_stack = {}\n    local paren_char_stack_stack_stack_stack_index_stack = {}\n    local paren_char_stack_stack_stack_stack_stack = {}\n    local paren_char_stack_stack_stack_stack_stack_index = 0\n    local paren_char_stack_stack_stack_stack_stack_count = 0\n    local paren_char_stack_stack_stack_stack_stack_count_stack = {}\n    local paren_char_",
    "    local result = {}\n    for i=1,#paren_string,2 do\n        if paren_string[i] == '(' then\n            if paren_string[i+1] == '(' then\n                result[#result+1] = #result\n                i = i+2\n            else\n                result[#result+1] = #result\n                i = i+1\n        else\n            result[#result+1] = #result\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?)')) do\n        result[#result + 1] = #(group)\n    end\n    return result\nend",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_string_count = 0\n    local paren_string_level = 0\n    for i = 1, #paren_string, 1 do\n        if paren_string[i] == '(' then\n            if paren_string[i+1] == '(' then\n                paren_stack[paren_count] = paren_level\n                paren_count = paren_count + 1\n                paren_level = paren_level + 1\n                paren_string_count = paren_string_count + 1\n                paren_string_level = paren_string_level + 1\n                i = i + 1\n            elseif paren_string[i+1] == ')' then\n                paren_stack[paren_count] = paren_level\n                paren_count = paren_count + 1\n                paren_level = paren_level - 1\n                paren_string_count = paren_string_count + 1\n                paren_string_level = paren_string_level - 1\n                i = i + 1\n            else\n                paren_string = paren_string .. ' ' .. paren_string[i]\n                paren_string_count = paren_string_count + 1\n            end\n        elseif paren_string[i] == ')' then\n            if paren_string[i+1] == ')' then\n                paren_stack[paren_count] = paren_level\n                paren_count = paren_count + 1\n                paren_level = paren_level - 1\n                paren_string_count = paren_string_count + 1\n                paren_string_level = paren_string_level - 1\n                i = i + 1\n            elseif paren_string[i+1] == '(' then\n                paren_stack[paren_count] = paren_level\n                paren_count = paren_count + 1\n                paren_level = paren_level + 1\n                paren_string_count = paren_string_count + 1\n                paren_string_level = paren_string_level",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_index = 1\n    local paren_char = ''\n    local paren_char_count = 0\n    local paren_char_index = 1\n    local paren_char_count_stack = {}\n    local paren_char_index_stack = {}\n    local paren_char_stack = {}\n    local paren_char_stack_count = 0\n    local paren_char_stack_index = 1\n    local paren_char_stack_count_stack = {}\n    local paren_char_stack_index_stack = {}\n    local paren_char_stack_stack = {}\n    local paren_char_stack_stack_count = 0\n    local paren_char_stack_stack_index = 1\n    local paren_char_stack_stack_count_stack = {}\n    local paren_char_stack_stack_index_stack = {}\n    local paren_char_stack_stack_stack = {}\n    local paren_char_stack_stack_count = 0\n    local paren_char_stack_stack_index = 1\n    local paren_char_stack_stack_count_stack = {}\n    local paren_char_stack_stack_index_stack = {}\n    local paren_char_stack_stack_stack = {}\n    local paren_char_stack_stack_count = 0\n    local paren_char_stack_stack_index = 1\n    local paren_char_stack_stack_count_stack = {}\n    local paren_char_stack_stack_index_stack = {}\n    local paren_char_stack_stack_stack = {}\n    local paren_char_stack_stack_count = 0\n    local paren_char_stack_stack_index = 1\n    local paren_char_stack_stack_count_stack = {}\n    local paren_char_stack_stack_index_stack = {}\n    local paren_char_stack_stack_stack = {}\n    local paren_char_stack_stack_count = 0\n    local paren_char_stack",
    "    local paren_count = 0\n    local paren_stack = {}\n    local paren_stack_count = 0\n    local paren_stack_count_max = 0\n    local paren_stack_count_min = 0\n    local paren_stack_count_min_max = 0\n    local paren_stack_count_min_min = 0\n    local paren_stack_count_min_min_max = 0\n    local paren_stack_count_min_min_min = 0\n    local paren_stack_count_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_stack_index = 1\n    local paren_stack_size = 0\n    local paren_stack_max = 0\n    local paren_stack_max_index = 0\n    local paren_stack_max_size = 0\n    local paren_stack_max_max_index = 0\n    local paren_stack_max_max_size = 0\n    local paren_stack_max_max_max_index = 0\n    local paren_stack_max_max_max_size = 0\n    local paren_stack_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max",
    "    local result = {}\n    local paren_stack = {}\n    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack] == 0 then\n                result[#result + 1] = i - 1\n            end\n            paren_stack[#paren_stack] = #paren_stack + 1\n        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack] == 1 then\n                result[#result + 1] = i - 1\n            end\n            paren_stack[#paren_stack] = #paren_stack - 1\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend",
    "    local result = {}\n    local paren_stack = {}\n    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack] == 0 then\n                result[#result + 1] = i - 1\n            end\n            paren_stack[#paren_stack] = #paren_stack + 1\n        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack] == 1 then\n                result[#result + 1] = i - 1\n            end\n            paren_stack[#paren_stack] = #paren_stack - 1\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        if group ~= '' then\n            result[#result + 1] = #group\n        end\n    end\n    return result\nend",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_stack_index = 0\n    local paren_stack_count = 0\n    local paren_stack_depth = 0\n    local paren_stack_index_count = 0\n    local paren_stack_count_count = 0\n    local paren_stack_depth_count = 0\n    local paren_stack_index_depth = 0\n    local paren_stack_count_depth = 0\n    local paren_stack_depth_depth = 0\n    local paren_stack_index_depth_depth = 0\n    local paren_stack_count_depth_depth = 0\n    local paren_stack_depth_depth_depth = 0\n    local paren_stack_index_depth_depth_depth = 0\n    local paren_stack_count_depth_depth_depth = 0\n    local paren_stack_depth_depth_depth_depth = 0\n    local paren_stack_index_depth_depth_depth_depth = 0\n    local paren_stack_count_depth_depth_depth_depth = 0\n    local paren_stack_depth_depth_depth_depth_depth = 0\n    local paren_stack_index_depth_depth_depth_depth_depth = 0\n    local paren_stack_count_depth_depth_depth_depth_depth = 0\n    local paren_stack_depth_depth_depth_depth_depth_depth = 0\n    local paren_stack_index_depth_depth_depth_depth_depth_depth = 0\n    local paren_stack_count_depth_depth_depth_depth_depth_depth = 0\n    local paren_stack_depth_depth_depth_depth_depth_depth_depth = 0\n    local paren_stack_index_depth_depth_depth_depth_depth_depth_depth = 0\n    local paren_stack_count_depth_depth_depth_depth_depth_depth_depth = 0\n    local paren_stack_depth_depth_depth_depth_depth_depth_depth_depth = 0\n    local paren_stack_index_depth_depth_depth",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_count = 0\n    local paren_stack_max = 0\n    local paren_stack_max_index = 0\n    local paren_stack_max_count = 0\n    local paren_stack_max_count_index = 0\n    local paren_stack_max_count_count = 0\n    local paren_stack_max_count_count_index = 0\n    local paren_stack_max_count_count_count = 0\n    local paren_stack_max_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?)')) do\n        result[#result+1] = #(group)\n    end\n    return result\nend",
    "    local result = {}\n    local paren_stack = {}\n    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack] == 0 then\n                result[#result + 1] = #paren_stack\n                table.insert(result, #result)\n            end\n            paren_stack[#paren_stack + 1] = #paren_stack\n            table.insert(paren_stack, #paren_stack)\n        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack] > paren_stack[#paren_stack + 1] then\n                result[#result + 1] = #paren_stack - paren_stack[#paren_stack]\n                table.insert(result, #result)\n            end\n            if paren_stack[#paren_stack] == paren_stack[#paren_stack + 1] then\n                table.erase(table.concat(result, paren_stack))\n                result = {}\n                table.insert(result, #result)\n            end\n            paren_stack[#paren_stack - 1] = #paren_stack\n            table.erase(table.concat(paren_stack, 1))\n        end\n    end\n    return result\nend",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 1\n    local paren_stack_size = 0\n    local paren_stack_max = 0\n    local paren_stack_min = math.inf\n    local paren_stack_max_index = 0\n    local paren_stack_min_index = math.inf\n    local paren_stack_max_size = 0\n    local paren_stack_min_size = math.inf\n    local paren_stack_max_size_index = 0\n    local paren_stack_min_size_index = math.inf\n    local paren_stack_max_size_size = 0\n    local paren_stack_min_size_size = math.inf\n    local paren_stack_max_size_size_index = 0\n    local paren_stack_min_size_size_index = math.inf\n    local paren_stack_max_size_size_size = 0\n    local paren_stack_min_size_size_size = math.inf\n    local paren_stack_max_size_size_size_index = 0\n    local paren_stack_min_size_size_size_index = math.inf\n    local paren_stack_max_size_size_size_size = 0\n    local paren_stack_min_size_size_size_size = math.inf\n    local paren_stack_max_size_size_size_size_index = 0\n    local paren_stack_min_size_size_size_size_index = math.inf\n    local paren_stack_max_size_size_size_size_size = 0\n    local paren_stack_min_size_size_size_size_size = math.inf\n    local paren_stack_max_size_size_size_size_size_index = 0\n    local paren_stack_min_size_size_size_size_size_index = math.inf\n    local paren_stack_max_size_size_size_size_size_size = 0\n    local paren_stack_min",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_count = 0\n    local paren_stack_max = 0\n    local paren_stack_max_index = 0\n    local paren_stack_max_count = 0\n    local paren_stack_max_count_index = 0\n    local paren_stack_max_count_count = 0\n    local paren_stack_max_count_count_index = 0\n    local paren_stack_max_count_count_count = 0\n    local paren_stack_max_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count",
    "    local paren_count = 0\n    local paren_stack = {}\n    local paren_stack_count = 0\n    local paren_stack_count_max = 0\n    local paren_stack_count_min = 0\n    local paren_stack_count_min_max = 0\n    local paren_stack_count_min_min = 0\n    local paren_stack_count_min_min_max = 0\n    local paren_stack_count_min_min_min = 0\n    local paren_stack_count_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_min_min = 0\n    local paren_stack_count_min_min_min_min_min_min_min_min_min_min_max = 0\n    local paren_stack_count_min",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    for i=1,#paren_string,2 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack] == 0 then\n                paren_stack[#paren_stack] = 1\n                paren_count = paren_count + 1\n            end\n            paren_stack[#paren_stack] = paren_stack[#paren_stack] + 1\n        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack] == 1 then\n                paren_stack[#paren_stack] = paren_stack[#paren_stack] - 1\n                if paren_stack[#paren_stack] == 0 then\n                    paren_count = paren_count - 1\n                end\n            end\n        end\n        if paren_stack[#paren_stack] == 0 then\n            if paren_count == 0 then\n                paren_level = paren_level + 1\n            end\n        end\n        paren_string = paren_string .. ' ' .. paren_string[i]\n    end\n    return paren_level\nend",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 1\n    local paren_stack_count = 0\n    local paren_stack_index_count = 0\n    local paren_stack_count_count = 0\n    local paren_stack_count_index = 0\n    local paren_stack_count_index_count = 0\n    local paren_stack_count_index_count_count = 0\n    local paren_stack_count_index_count_index = 0\n    local paren_stack_count_index_count_index_count = 0\n    local paren_stack_count_index_count_index_count_index = 0\n    local paren_stack_count_index_count_index_count_index_count = 0\n    local paren_stack_count_index_count_index_count_index_count_index = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count_index = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count_index_count = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count_index_count_index = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count_index_count_index_count = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count_index_count_index_count_index = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index = 0\n    local paren_stack_count_index_count_index_",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend",
    "    local paren_count = 0\n    local paren_stack = {}\n    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n            paren_count = paren_count + 1\n            if paren_count > paren_stack[-1] then\n                paren_stack[-1] = paren_count\n            end\n        elseif paren_string[i] == ')' then\n            paren_count = paren_count - 1\n            if paren_count < paren_stack[-1] then\n                paren_stack[-1] = paren_count\n            end\n        end\n    end\n    return paren_stack\nend",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    local paren_stack = {}",
    "    local result = {}\n    local paren_stack = {}\n    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack] == 0 then\n                result[#result + 1] = i - 1\n            end\n            paren_stack[#paren_stack + 1] = i\n        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack] > 0 then\n                paren_stack[#paren_stack] = paren_stack[#paren_stack] - 1\n            end\n        end\n    end\n    return result\nend",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_size = 0\n    local paren_stack_max = 0\n    local paren_stack_min = 0\n    local paren_stack_count = 0\n    local paren_stack_max_count = 0\n    local paren_stack_min_count = 0\n    local paren_stack_count_max = 0\n    local paren_stack_count_min = 0\n    local paren_stack_count_max_count = 0\n    local paren_stack_count_min_count = 0\n    local paren_stack_count_max_count_min = 0\n    local paren_stack_count_min_count_max = 0\n    local paren_stack_count_max_count_min_count = 0\n    local paren_stack_count_min_count_max_count = 0\n    local paren_stack_count_max_count_min_count_max = 0\n    local paren_stack_count_min_count_max_count_min_count = 0\n    local paren_stack_count_max_count_min_count_max_count_min = 0\n    local paren_stack_count_min_count_max_count_min_count_max_count_min = 0\n    local paren_stack_count_max_count_min_count_max_count_min_count_max_count_min = 0\n    local paren_stack_count_min_count_max_count_min_count_max_count_min_count_max_count_min = 0\n    local paren_stack_count_max_count_min_count_max_count_min_count_max_count_min_count_max_count_min = 0\n    local paren_stack_count_min_count_max_count_min_count_max_count_min_count_max_count_min_count_max_count_min = 0\n    local paren_stack_count_max_count_min_count_max_count_min",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?)')) do\n        if group ~= '' then\n            result[#result + 1] = #group\n        end\n    end\n    return result\nend",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend",
    "    local result = {}\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_char = ''\n    local paren_index = 1\n    local paren_start = 1\n    local paren_end = 0\n    local paren_length = 0\n    local paren_index_start = 1\n    local paren_index_end = 0\n    local paren_index_length = 0\n    local paren_index_count = 0\n    local paren_index_char = ''\n    local paren_index_start_char = ''\n    local paren_index_end_char = ''\n    local paren_index_char_count = 0\n    local paren_index_char_start = 1\n    local paren_index_char_end = 0\n    local paren_index_char_length = 0\n    local paren_index_char_count = 0\n    local paren_index_char_start_char = ''\n    local paren_index_char_end_char = ''\n    local paren_index_char_length = 0\n    local paren_index_char_count = 0\n    local paren_index_char_start = 1\n    local paren_index_char_end = 0\n    local paren_index_char_length = 0\n    local paren_index_char_count = 0\n    local paren_index_char_start_char = ''\n    local paren_index_char_end_char = ''\n    local paren_index_char_length = 0\n    local paren_index_char_count = 0\n    local paren_index_char_start = 1\n    local paren_index_char_end = 0\n    local paren_index_char_length = 0\n    local paren_index_char_count = 0\n    local paren_index_char_start_char = ''\n    local paren_index_char_end_char = ''\n    local paren_index_char_length = 0\n    local paren_index_char_count = 0\n    local paren_index_char_start = 1\n    local p",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_stack_index = 0\n    local paren_stack_size = 0\n    local paren_stack_max = 0\n    local paren_stack_min = 0\n    local paren_stack_max_index = 0\n    local paren_stack_min_index = 0\n    local paren_stack_max_size = 0\n    local paren_stack_min_size = 0\n    local paren_stack_max_size_index = 0\n    local paren_stack_min_size_index = 0\n    local paren_stack_max_size_size = 0\n    local paren_stack_min_size_size = 0\n    local paren_stack_max_size_size_index = 0\n    local paren_stack_min_size_size_index = 0\n    local paren_stack_max_size_size_size = 0\n    local paren_stack_min_size_size_size = 0\n    local paren_stack_max_size_size_size_index = 0\n    local paren_stack_min_size_size_size_index = 0\n    local paren_stack_max_size_size_size_size = 0\n    local paren_stack_min_size_size_size_size = 0\n    local paren_stack_max_size_size_size_size_index = 0\n    local paren_stack_min_size_size_size_size_index = 0\n    local paren_stack_max_size_size_size_size_size = 0\n    local paren_stack_min_size_size_size_size_size = 0\n    local paren_stack_max_size_size_size_size_size_index = 0\n    local paren_stack_min_size_size_size_size_size_index = 0\n    local paren_stack_max_size_size_size_size_size_size = 0\n    local paren_stack_min_size_size_size_size_size_size = 0\n    local paren_stack_max_",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 1\n    local paren_stack_max = 0\n    local paren_stack_max_index = 0\n    local paren_stack_max_count = 0\n    local paren_stack_max_count_index = 0\n    local paren_stack_max_count_count = 0\n    local paren_stack_max_count_count_index = 0\n    local paren_stack_max_count_count_count = 0\n    local paren_stack_max_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_string_index = 1\n    local paren_string_length = len(paren_string)\n    local paren_string_length_index = 1\n    local paren_string_length_length = len(paren_string_length)\n    local paren_string_length_length_index = 1\n    local paren_string_length_length_length = len(paren_string_length_length)\n    local paren_string_length_length_length_index = 1\n    local paren_string_length_length_length_length = len(paren_string_length_length_length)\n    local paren_string_length_length_length_length_index = 1\n    local paren_string_length_length_length_length_length = len(paren_string_length_length_length_length)\n    local paren_string_length_length_length_length_length_index = 1\n    local paren_string_length_length_length_length_length_length = len(paren_string_length_length_length_length_length)\n    local paren_string_length_length_length_length_length_length_index = 1\n    local paren_string_length_length_length_length_length_length_length = len(paren_string_length_length_length_length_length_length)\n    local paren_string_length_length_length_length_length_length_length_index = 1\n    local paren_string_length_length_length_length_length_length_length_length = len(paren_string_length_length_length_length_length_length_length)\n    local paren_string_length_length_length_length_length_length_length_length_index = 1\n    local paren_string_length_length_length_length_length_length_length_length_length = len(paren_string_length_length_length_length_length_length_length_length_length)\n    local paren_string",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend",
    "    local paren_count = 0\n    local paren_stack = {}\n    local paren_stack_count = 0\n    local paren_stack_count_max = 0\n    local paren_stack_count_min = 0\n    local paren_stack_count_max_min = 0\n    local paren_stack_count_min_max = 0\n    local paren_stack_count_min_max_min = 0\n    local paren_stack_count_min_max_min_max = 0\n    local paren_stack_count_min_max_min_max_min = 0\n    local paren_stack_count_min_max_min_max_min_max = 0\n    local paren_stack_count_min_max_min_max_min_max_min = 0\n    local paren_stack_count_min_max_min_max_min_max_min_max = 0\n    local paren_stack_count_min_max_min_max_min_max_min_max_min = 0\n    local paren_stack_count_min_max_min_max_min_max_min_max_min_max = 0\n    local paren_stack_count_min_max_min_max_min_max_min_max_min_max_min = 0\n    local paren_stack_count_min_max_min_max_min_max_min_max_min_max_min_max = 0\n    local paren_stack_count_min_max_min_max_min_max_min_max_min_max_min_max_min = 0\n    local paren_stack_count_min_max_min_max_min_max_min_max_min_max_min_max_min_max = 0\n    local paren_stack_count_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min = 0\n    local paren_stack_count_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max = 0\n    local paren_stack_",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_index = 1\n    local paren_char = ''\n    local paren_char_count = 0\n    local paren_char_index = 1\n    local paren_char_count_stack = {}\n    local paren_char_count_stack_index = 0\n    local paren_char_count_stack_count = 0\n    local paren_char_count_stack_count_stack = {}\n    local paren_char_count_stack_count_stack_index = 0\n    local paren_char_count_stack_count_stack_count = 0\n    local paren_char_count_stack_count_stack_count_stack = {}\n    local paren_char_count_stack_count_stack_count_stack_index = 0\n    local paren_char_count_stack_count_stack_count_stack_count = 0\n    local paren_char_count_stack_count_stack_count_stack_count_stack = {}\n    local paren_char_count_stack_count_stack_count_stack_count_stack_index = 0\n    local paren_char_count_stack_count_stack_count_stack_count_stack_count = 0\n    local paren_char_count_stack_count_stack_count_stack_count_stack_count_stack = {}\n    local paren_char_count_stack_count_stack_count_stack_count_stack_count_stack_index = 0\n    local paren_char_count_stack_count_stack_count_stack_count_stack_count_stack_count = 0\n    local paren_char_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack = {}\n    local paren_char_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack_index = 0\n    local paren_char_count_stack_count_stack_count_stack_count_stack_count_stack_count_stack_count = 0\n    local paren_char_",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        if group ~= '' then\n            result[#result + 1] = #group\n        end\n    end\n    return result\nend",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 1\n    local paren_stack_size = 0\n    local paren_stack_max = 0\n    local paren_stack_min = 0\n    local paren_stack_max_index = 0\n    local paren_stack_min_index = 0\n    local paren_stack_max_size = 0\n    local paren_stack_min_size = 0\n    local paren_stack_max_size_index = 0\n    local paren_stack_min_size_index = 0\n    local paren_stack_max_size_size = 0\n    local paren_stack_min_size_size = 0\n    local paren_stack_max_size_size_index = 0\n    local paren_stack_min_size_size_index = 0\n    local paren_stack_max_size_size_size = 0\n    local paren_stack_min_size_size_size = 0\n    local paren_stack_max_size_size_size_index = 0\n    local paren_stack_min_size_size_size_index = 0\n    local paren_stack_max_size_size_size_size = 0\n    local paren_stack_min_size_size_size_size = 0\n    local paren_stack_max_size_size_size_size_index = 0\n    local paren_stack_min_size_size_size_size_index = 0\n    local paren_stack_max_size_size_size_size_size = 0\n    local paren_stack_min_size_size_size_size_size = 0\n    local paren_stack_max_size_size_size_size_size_index = 0\n    local paren_stack_min_size_size_size_size_size_index = 0\n    local paren_stack_max_size_size_size_size_size_size = 0\n    local paren_stack_min_size_size_size_size_size_size = 0\n    local paren_stack_max_",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_size = 0\n    local paren_stack_max = 0\n    local paren_stack_min = 0\n    local paren_stack_max_index = 0\n    local paren_stack_min_index = 0\n    local paren_stack_max_size = 0\n    local paren_stack_min_size = 0\n    local paren_stack_max_size_index = 0\n    local paren_stack_min_size_index = 0\n    local paren_stack_max_size_size = 0\n    local paren_stack_min_size_size = 0\n    local paren_stack_max_size_size_index = 0\n    local paren_stack_min_size_size_index = 0\n    local paren_stack_max_size_size_size = 0\n    local paren_stack_min_size_size_size = 0\n    local paren_stack_max_size_size_size_index = 0\n    local paren_stack_min_size_size_size_index = 0\n    local paren_stack_max_size_size_size_size = 0\n    local paren_stack_min_size_size_size_size = 0\n    local paren_stack_max_size_size_size_size_index = 0\n    local paren_stack_min_size_size_size_size_index = 0\n    local paren_stack_max_size_size_size_size_size = 0\n    local paren_stack_min_size_size_size_size_size = 0\n    local paren_stack_max_size_size_size_size_size_index = 0\n    local paren_stack_min_size_size_size_size_size_index = 0\n    local paren_stack_max_size_size_size_size_size_size = 0\n    local paren_stack_min_size_size_size_size_size_size = 0\n    local paren_stack_max_",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_count = 0\n    local paren_stack_max = 0\n    local paren_stack_max_index = 0\n    local paren_stack_max_count = 0\n    local paren_stack_max_count_index = 0\n    local paren_stack_max_count_count = 0\n    local paren_stack_max_count_count_index = 0\n    local paren_stack_max_count_count_count = 0\n    local paren_stack_max_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_stack_index = 0\n    local paren_stack_size = 0\n    local paren_stack_max = 0\n    local paren_stack_min = 0\n    local paren_stack_max_index = 0\n    local paren_stack_min_index = 0\n    local paren_stack_max_size = 0\n    local paren_stack_min_size = 0\n    local paren_stack_max_size_index = 0\n    local paren_stack_min_size_index = 0\n    local paren_stack_max_size_size = 0\n    local paren_stack_min_size_size = 0\n    local paren_stack_max_size_size_index = 0\n    local paren_stack_min_size_size_index = 0\n    local paren_stack_max_size_size_size = 0\n    local paren_stack_min_size_size_size = 0\n    local paren_stack_max_size_size_size_index = 0\n    local paren_stack_min_size_size_size_index = 0\n    local paren_stack_max_size_size_size_size = 0\n    local paren_stack_min_size_size_size_size = 0\n    local paren_stack_max_size_size_size_size_index = 0\n    local paren_stack_min_size_size_size_size_index = 0\n    local paren_stack_max_size_size_size_size_size = 0\n    local paren_stack_min_size_size_size_size_size = 0\n    local paren_stack_max_size_size_size_size_size_index = 0\n    local paren_stack_min_size_size_size_size_size_index = 0\n    local paren_stack_max_size_size_size_size_size_size = 0\n    local paren_stack_min_size_size_size_size_size_size = 0\n    local paren_stack_max_",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result+1] = #(group)\n    end\n    return result\nend",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_stack_index = 1\n    local paren_stack_max = 0\n    local paren_stack_max_index = 0\n    local paren_stack_max_depth = 0\n    local paren_stack_max_depth_index = 0\n    local paren_stack_max_depth_count = 0\n    local paren_stack_max_depth_count_index = 0\n    local paren_stack_max_depth_count_count = 0\n    local paren_stack_max_depth_count_count_index = 0\n    local paren_stack_max_depth_count_count_count = 0\n    local paren_stack_max_depth_count_count_count_index = 0\n    local paren_stack_max_depth_count_count_count_count = 0\n    local paren_stack_max_depth_count_count_count_count_index = 0\n    local paren_stack_max_depth_count_count_count_count_count = 0\n    local paren_stack_max_depth_count_count_count_count_count_index = 0\n    local paren_stack_max_depth_count_count_count_count_count_count = 0\n    local paren_stack_max_depth_count_count_count_count_count_count_index = 0\n    local paren_stack_max_depth_count_count_count_count_count_count_count = 0\n    local paren_stack_max_depth_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_depth_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_depth_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_depth_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_depth_count_count_count_count_count_count_",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 1\n    local paren_stack_size = 0\n    local paren_stack_max = 0\n    local paren_stack_max_index = 0\n    local paren_stack_max_size = 0\n    local paren_stack_max_max_index = 0\n    local paren_stack_max_max_size = 0\n    local paren_stack_max_max_max_index = 0\n    local paren_stack_max_max_max_size = 0\n    local paren_stack_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max_max_max_max_max_max_max_max_index = 0\n    local paren_stack_max_max_max_max_max_max_max_max_max_max_size = 0\n    local paren_stack_max_max_max",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_string = ''\n    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack] == 0 then\n                paren_stack[#paren_stack] = 1\n                paren_count = paren_count + 1\n            end\n            if paren_stack[#paren_stack] == 1 then\n                paren_stack[#paren_stack] = 2\n            end\n        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack] == 2 then\n                paren_stack[#paren_stack] = 3\n            end\n        end\n        if paren_stack[#paren_stack] == 3 then\n            if paren_count == 0 then\n                paren_count = paren_count + 1\n            end\n            if paren_count == 1 then\n                paren_level = paren_level + 1\n            end\n        end\n        if paren_stack[#paren_stack] == 2 then\n            if paren_count == 1 then\n                paren_count = paren_count + 1\n            end\n            if paren_count == 2 then\n                paren_level = paren_level + 1\n            end\n        end\n        if paren_stack[#paren_stack] == 1 then\n            if paren_count == 2 then\n                paren_count = paren_count + 1\n            end\n            if paren_count == 3 then\n                paren_level = paren_level + 1\n            end\n        end\n        if paren_stack[#paren_stack] == 0 then\n            if paren_count == 3 then\n                paren_count = paren_count + 1\n            end\n            if paren_count == 4 then\n                paren_level = paren_level + 1\n            end\n        end\n        if paren_stack[#paren_stack] == 3 then\n            if paren_count == 4 then\n                paren_count = paren_count + 1\n            end\n            if paren_",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_stack_index = 0\n    local paren_stack_count = 0\n    local paren_stack_depth = 0\n    local paren_stack_index_count = 0\n    local paren_stack_depth_count = 0\n    local paren_stack_index_depth = 0\n    local paren_stack_index_depth_count = 0\n    local paren_stack_index_depth_count_count = 0\n    local paren_stack_index_depth_count_count_count = 0\n    local paren_stack_index_depth_count_count_count_count = 0\n    local paren_stack_index_depth_count_count_count_count_count = 0\n    local paren_stack_index_depth_count_count_count_count_count_count = 0\n    local paren_stack_index_depth_count_count_count_count_count_count_count = 0\n    local paren_stack_index_depth_count_count_count_count_count_count_count_count = 0\n    local paren_stack_index_depth_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_index_depth_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_index_depth_count_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_index_depth_count_count_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_index_depth_count_count_count_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_index_depth_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_index_depth_count_count_count_count_count_",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?)')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    for i = 1,#paren_string,1 do\n        if paren_string[i] == '(' then\n            paren_stack[#paren_stack+1] = paren_count\n            paren_count = paren_count + 1\n            paren_depth = paren_depth + 1\n        elseif paren_string[i] == ')' then\n            if paren_depth == 1 then\n                return paren_stack[#paren_stack]\n            else\n                paren_stack[#paren_stack] = paren_stack[#paren_stack] + 1\n                paren_depth = paren_depth - 1\n            end\n        end\n    end\n    return 0\nend",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 1\n    local paren_stack_count = 0\n    local paren_stack_index_count = 0\n    local paren_stack_count_index = 0\n    local paren_stack_count_index_count = 0\n    local paren_stack_count_index_count_index = 0\n    local paren_stack_count_index_count_index_count = 0\n    local paren_stack_count_index_count_index_count_index = 0\n    local paren_stack_count_index_count_index_count_index_count = 0\n    local paren_stack_count_index_count_index_count_index_count_index = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count_index = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count_index_count = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count_index_count_index = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count_index_count_index_count = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count_index_count_index_count_index = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index = 0\n    local paren_stack_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count = 0\n    local",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 0\n    local paren_stack_count = 0\n    local paren_stack_max = 0\n    local paren_stack_max_index = 0\n    local paren_stack_max_count = 0\n    local paren_stack_max_count_index = 0\n    local paren_stack_max_count_count = 0\n    local paren_stack_max_count_count_index = 0\n    local paren_stack_max_count_count_count = 0\n    local paren_stack_max_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_index = 0\n    local paren_stack_max_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_max_count_count",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_string = ''\n    for i = 1, #paren_string, 2 do\n        if paren_string[i] == '(' then\n            if paren_stack[#paren_stack] == 0 then\n                paren_stack[#paren_stack] = 1\n                paren_count = paren_count + 1\n            end\n            if paren_stack[#paren_stack] > paren_depth then\n                paren_depth = paren_stack[#paren_stack]\n            end\n        elseif paren_string[i] == ')' then\n            if paren_stack[#paren_stack] == 1 then\n                paren_stack[#paren_stack] = 0\n                paren_count = paren_count - 1\n            end\n            if paren_stack[#paren_stack] > paren_depth then\n                paren_depth = paren_stack[#paren_stack]\n            end\n        end\n        if paren_count == 0 then\n            if paren_stack[#paren_stack] > 0 then\n                print(paren_stack[#paren_stack])\n            end\n            paren_stack[#paren_stack] = 0\n        end\n        paren_string = paren_string:sub(i, i)\n    end\nend",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result + 1] = #group - 1\n    end\n    return result\nend",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_stack_index = 0\n    local paren_stack_count = 0\n    local paren_stack_depth = 0\n    local paren_stack_index_count = 0\n    local paren_stack_count_count = 0\n    local paren_stack_depth_count = 0\n    local paren_stack_index_depth_count = 0\n    local paren_stack_count_depth_count = 0\n    local paren_stack_depth_index_count = 0\n    local paren_stack_depth_count_count = 0\n    local paren_stack_depth_index_depth_count = 0\n    local paren_stack_depth_count_depth_count = 0\n    local paren_stack_depth_index_depth_count_count = 0\n    local paren_stack_depth_count_depth_count_count = 0\n    local paren_stack_depth_index_depth_count_count_count = 0\n    local paren_stack_depth_count_depth_count_count_count = 0\n    local paren_stack_depth_index_depth_count_count_count_count = 0\n    local paren_stack_depth_count_depth_count_count_count_count = 0\n    local paren_stack_depth_index_depth_count_count_count_count_count = 0\n    local paren_stack_depth_count_depth_count_count_count_count_count = 0\n    local paren_stack_depth_index_depth_count_count_count_count_count_count = 0\n    local paren_stack_depth_count_depth_count_count_count_count_count_count = 0\n    local paren_stack_depth_index_depth_count_count_count_count_count_count_count = 0\n    local paren_stack_depth_count_depth_count_count_count_count_count_count_count = 0\n    local paren_stack_depth_index_depth_count_count_count_count_count_count_count_count = 0\n",
    "    local paren_stack = {}\n    local paren_count = 0\n    local paren_level = 0\n    local paren_stack_index = 1\n    local paren_stack_count = 0\n    local paren_stack_index_count = 0\n    local paren_stack_count_count = 0\n    local paren_stack_count_index = 0\n    local paren_stack_count_index_count = 0\n    local paren_stack_count_index_count_count = 0\n    local paren_stack_count_index_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count_count_count_count_count_count_count_count = 0\n    local paren_stack_count_index_count_count_count_count_count_count_count_count_count_count_count",
    "    local paren_groups = {}\n    local paren_stack = {}\n    local paren_count = 0\n    local paren_depth = 0\n    local paren_index = 1\n    local paren_string = ''\n    local paren_group = ''\n    local paren_depth_stack = {}\n    local paren_depth_stack_index = 1\n    local paren_depth_stack_count = 0\n    local paren_depth_stack_max = 0\n    local paren_depth_stack_max_index = 0\n    local paren_depth_stack_max_count = 0\n    local paren_depth_stack_max_count_index = 0\n    local paren_depth_stack_max_count_count = 0\n    local paren_depth_stack_max_count_count_index = 0\n    local paren_depth_stack_max_count_count_count = 0\n    local paren_depth_stack_max_count_count_count_index = 0\n    local paren_depth_stack_max_count_count_count_count = 0\n    local paren_depth_stack_max_count_count_count_count_index = 0\n    local paren_depth_stack_max_count_count_count_count_count = 0\n    local paren_depth_stack_max_count_count_count_count_count_index = 0\n    local paren_depth_stack_max_count_count_count_count_count_count = 0\n    local paren_depth_stack_max_count_count_count_count_count_count_index = 0\n    local paren_depth_stack_max_count_count_count_count_count_count_count = 0\n    local paren_depth_stack_max_count_count_count_count_count_count_count_index = 0\n    local paren_depth_stack_max_count_count_count_count_count_count_count_count = 0\n    local paren_depth_stack_max_count_count_count_count_count_count_count_count_index = 0\n    local paren_depth_stack_max_count_count_count",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result+1] = #(group)\n    end\n    return result\nend",
    "    local result = {}\n    for _, group in ipairs(string.gmatch(paren_string, '(.*?) *(?= )')) do\n        result[#result+1] = #group\n    end\n    return result\nend"
  ],
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ]
}