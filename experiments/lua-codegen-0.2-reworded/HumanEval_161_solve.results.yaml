language: lua
name: HumanEval_161_solve
results:
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n--\
    \ >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function\
    \ solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local\
    \ result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n         \
    \   if s[i] ~= \" \" then\n                result = result .. string.upper(s[i])\n\
    \            else\n                result = result .. s[i]\n            end\n\
    \        else\n            result = result .. s[i]\n        end\n        i = i\
    \ + 1\n    end\n    return result\nend\n<|endoftext|><|python|>#             \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                         \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp50tdh91c.lua:31: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1661907503
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n--\
    \ >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function\
    \ solve(s)\n    if s == \"\" then return \"\" end\n    local i, j = 1, 1\n   \
    \ local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n   \
    \         if s[i] >= 'a' and s[i] <= 'z' then\n                result = result\
    \ .. string.upper(s[i])\n            else\n                result = result ..\
    \ string.lower(s[i])\n            end\n        else\n            result = result\
    \ .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n<|endoftext|><|python|>#\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1ef3g6je.lua:31: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1661907503
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n--\
    \ >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function\
    \ solve(s)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1]\
    \ then\n            t[s[i]] = s[i+1]\n        end\n    end\n    if #t == 0 then\n\
    \        return s\n    end\n    for i = 1, #t, 2 do\n        s[i] = t[i]\n   \
    \ end\n    return s\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1j4kz9ia.lua:28: unexpected symbol near ''*''

    '
  stdout: ''
  timestamp: 1661907503
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n--\
    \ >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function\
    \ solve(s)\n    if s:match(\"^[a-zA-Z]*$\") then\n        return string.gsub(s,\
    \ \"([a-z])([A-Z])\", \"$2$1\")\n    else\n        return string.gsub(s, \"([a-z])([A-Z])\"\
    , \"$2$1\")\n    end\nend\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptbfvxsju.lua:20: unexpected symbol near ''*''

    '
  stdout: ''
  timestamp: 1661907503
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n--\
    \ >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function\
    \ solve(s)\n    if s == \"\" then return \"\" end\n    local i, j = 1, 1\n   \
    \ local res = \"\"\n    while i <= #s do\n        if s[i] ~= \"\" then\n     \
    \       if s[i] >= \"a\" and s[i] <= \"z\" then\n                res = res ..\
    \ string.upper(s[i])\n            else\n                res = res .. string.lower(s[i])\n\
    \            end\n        else\n            res = res .. s[i]\n        end\n \
    \       i = i + 1\n    end\n    return res\nend\n<|endoftext|><|python|>#\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdont3w7m.lua:31: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1661907503
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n--\
    \ >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function\
    \ solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local\
    \ result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n         \
    \   result = string.gsub(result, s[i], string.upper(s[i]))\n        else\n   \
    \         result = string.gsub(result, s[i], s[i])\n        end\n        i = i\
    \ + 1\n    end\n    return result\nend\n<|endoftext|><|python|>#             \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \       \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpubc5zr0g.lua:27: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1661907503
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n--\
    \ >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function\
    \ solve(s)\n    local t = {}\n    for i=1,#\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8j5a2dql.lua:16: ''do'' expected near ''=''

    '
  stdout: ''
  timestamp: 1661907503
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n--\
    \ >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function\
    \ solve(s)\n    local i,j\n    for i=1,#\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpysn2b_b6.lua:16: ''do'' expected near ''=''

    '
  stdout: ''
  timestamp: 1661907503
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n--\
    \ >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function\
    \ solve(s)\n    local i, j, k, c, l, r\n    i = 1\n    j = 1\n    k = 1\n    c\
    \ = \"\"\n    l = 0\n    r = 0\n    while i <= #s do\n        if s[i] ~= nil then\n\
    \            if s[i] ~= \" \" then\n                if s[i] ~= \"#\" then\n  \
    \                  c = c .. string.upper(s[i])\n                else\n       \
    \             c = c .. string.lower(s[i])\n                end\n            else\n\
    \                c = c .. s[i]\n            end\n        else\n            c =\
    \ c .. s[i]\n        end\n        i = i + 1\n    end\n    while j <= #c do\n \
    \       if c[j] ~= nil then\n            if c[j] ~= \" \" then\n             \
    \   if c[j] ~= \"#\" then\n                    c = c .. string.lower(c[j])\n \
    \               else\n                    c = c .. string.upper(c[j])\n      \
    \          end\n            else\n                c = c .. c[j]\n            end\n\
    \        else\n            c = c .. c[j]\n        end\n        j = j + 1\n   \
    \ end\n    while k <= #c do\n        if c[k] ~= nil then\n            if c[k]\
    \ ~= \" \" then\n                if c[k] ~= \"#\" then\n                    c\
    \ = c .. string.upper(c[k])\n                else\n                    c = c ..\
    \ string.lower(c[k])\n                end\n            else\n                c\
    \ = c .. c[k]\n            end\n        else\n            c = c .. c[k]\n    \
    \    end\n        k = k + 1\n    end\n    if l == 0 and r == 0 then\n        return\
    \ c\n    else\n        return \"\"\n    end\nend\n<|endoftext|><|python|>#\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdexk8m3u.lua:75: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1661907503
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n--\
    \ >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function\
    \ solve(s)\n    local t = {}\n    for i=1,#                                  \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \          \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxnaxxtlq.lua:16: ''do'' expected near ''=''

    '
  stdout: ''
  timestamp: 1661907503
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n--\
    \ >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function\
    \ solve(s)\n    local i, j, k, c\n    for i = 1, #s, 2 do\n        if s[i] ~=\
    \ s[i+1] then\n            c = s[i+1]\n            s[i+1] = c\n            s[i]\
    \ = c\n        end\n    end\n    return s\nend\n*/\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6olufppm.lua:24: unexpected symbol near ''*''

    '
  stdout: ''
  timestamp: 1661907503
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n--\
    \ >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function\
    \ solve(s)\n    local i, j\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1]\
    \ then\n            s = string.gsub(s, s[i], string.upper(s[i]))\n           \
    \ s = string.gsub(s, s[i], string.lower(s[i]))\n        end\n    end\n    return\
    \ s\nend\n<|endoftext|><|python|>#\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpefvsm7z3.lua:23: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1661907503
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n--\
    \ >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function\
    \ solve(s)\n    if s:match(\"[a-zA-Z]\") then\n        return string.gsub(s, \"\
    [a-z]\", \"A\") .. string.gsub(s, \"[A-Z]\", \"a\")\n    else\n        return\
    \ string.gsub(s, \"[a-z]\", \"A\") .. string.gsub(s, \"[A-Z]\", \"a\")\n    end\n\
    end\n*/\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqui8_87h.lua:20: unexpected symbol near ''*''

    '
  stdout: ''
  timestamp: 1661907503
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n--\
    \ >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function\
    \ solve(s)\n    local i, j, k\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1]\
    \ then\n            if s[i] ~= \" \" then\n                s = string.gsub(s,\
    \ s[i], string.upper(s[i]))\n            else\n                s = string.gsub(s,\
    \ s[i], s[i])\n            end\n        end\n    end\n    return s\nend\n<|endoftext|><|python|>#\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1xpqj5fd.lua:26: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1661907503
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n--\
    \ >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function\
    \ solve(s)\n    local t = {}\n    for i=1,#                                  \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                  \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkpnl_9ez.lua:16: ''do'' expected near ''=''

    '
  stdout: ''
  timestamp: 1661907503
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n--\
    \ >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function\
    \ solve(s)\n    if s == \"\" then return \"\" end\n    local i, l = 1, #s\n  \
    \  local result = \"\"\n    while i <= l do\n        if s[i] ~= nil then\n   \
    \         result = result .. string.char(toupper(s[i]) .. tolower(s[i]))\n   \
    \     else\n            result = result .. s[i]\n        end\n        i = i +\
    \ 1\n    end\n    return result\nend\n<|endoftext|><|python|>#\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpblkszhju.lua:27: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1661907503
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n--\
    \ >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function\
    \ solve(s)\n    local t = {}\n    for i = 1, #s, 2 do\n        if s[i] ~= s[i+1]\
    \ then\n            t[s[i]] = s[i+1]\n        end\n    end\n    if #t == 0 then\n\
    \        return s\n    end\n    for k, v in pairs(t) do\n        s = string.gsub(s,\
    \ k, v)\n    end\n    return s\nend\n<|endoftext|><|python|>#\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcd3kcwn2.lua:28: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1661907503
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n--\
    \ >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function\
    \ solve(s)\n    if s:match(\"^[a-zA-Z]*$\") then\n        return string.gsub(s,\
    \ \"[a-z]\", \"A\") .. \"Z\" .. string.gsub(s, \"[A-Z]\", \"a\") .. \"z\"\n  \
    \  else\n        return string.gsub(s, \"[^a-zA-Z]\", \"\")\n    end\nend\n*/\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdpd6iwg4.lua:20: unexpected symbol near ''*''

    '
  stdout: ''
  timestamp: 1661907503
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n--\
    \ >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function\
    \ solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local\
    \ j = 1\n    local result = \"\"\n    while i <= #s do\n        if s[i] ~= nil\
    \ then\n            if s[i] >= \"a\" and s[i] <= \"z\" then\n                result\
    \ = result .. string.upper(s[i])\n            else\n                result = result\
    \ .. string.lower(s[i])\n            end\n        else\n            result = result\
    \ .. s[i]\n        end\n        i = i + 1\n    end\n    return result\nend\n<|endoftext|><|python|>#\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpny4wt455.lua:32: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1661907503
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve(\"1234\") \n-- \"4321\"\n--\
    \ >>> solve(\"ab\") \n-- \"AB\"\n-- >>> solve(\"#a@C\") \n-- \"#A@c\"\nlocal function\
    \ solve(s)\n    if s == \"\" then return \"\" end\n    local i = 1\n    local\
    \ result = \"\"\n    while i <= #s do\n        if s[i] ~= nil then\n         \
    \   if s[i] ~= \" \" then\n                result = result .. string.upper(s[i])\n\
    \            else\n                result = result .. string.lower(s[i])\n   \
    \         end\n        else\n            result = result .. s[i]\n        end\n\
    \        i = i + 1\n    end\n    return result\nend\n<|endoftext|><|python|>#\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                      \nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n \
    \   lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7y4cuuss.lua:31: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1661907503
