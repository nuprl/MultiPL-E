name: HumanEval_127_intersection
language: lua
prompt: "-- You are given two intervals,\n-- where each interval is a pair of integers.\
  \ For example, interval = (start, end) = (1, 2).\n-- The given intervals are closed\
  \ which means that the interval (start, end)\n-- includes both start and end.\n\
  -- For each given interval, it is assumed that its start is less or equal its end.\n\
  -- Your task is to determine whether the length of intersection of these two \n\
  -- intervals is a prime number.\n-- Example, the intersection of the intervals (1,\
  \ 3), (2, 4) is (2, 3)\n-- which its length is 1, which not a prime number.\n--\
  \ If the length of the intersection is a prime number, return \"YES\",\n-- otherwise,\
  \ return \"NO\".\n-- If the two intervals don't intersect, return \"NO\".\n-- [input/output]\
  \ samples:\n-- >>> intersection((1, 2), (2, 3))\n-- \"NO\"\n-- >>> intersection((-1,\
  \ 1), (0, 4))\n-- \"NO\"\n-- >>> intersection((-3, -1), (-5, 5))\n-- \"YES\"\nlocal\
  \ function intersection(interval1, interval2)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection\n\
  \    lu.assertEquals(candidate({1, 2}, {2, 3}), 'NO')\n    lu.assertEquals(candidate({-1,\
  \ 1}, {0, 4}), 'NO')\n    lu.assertEquals(candidate({-3, -1}, {-5, 5}), 'YES')\n\
  \    lu.assertEquals(candidate({-2, 2}, {-4, 0}), 'YES')\n    lu.assertEquals(candidate({-11,\
  \ 2}, {-1, -1}), 'NO')\n    lu.assertEquals(candidate({1, 2}, {3, 5}), 'NO')\n \
  \   lu.assertEquals(candidate({1, 2}, {1, 2}), 'NO')\n    lu.assertEquals(candidate({-2,\
  \ -2}, {-3, -2}), 'NO')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local start1 = interval1[1]\n    local end1 = interval1[2]\n  \
    \  local start2 = interval2[1]\n    local end2 = interval2[2]\n    if start1 >\
    \ end1 or start2 > end2 then\n        return \"NO\"\n    end1 = end1 - 1\n   \
    \ end2 = end2 - 1\n    local length = end1 - start1 + 1\n    if length == 0 then\n\
    \        return \"NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n    local length2\
    \ = end2 - start2 + 1\n    if length2 == 0 then\n        return \"NO\"\n    end2\
    \ = end2 - 1\n    end1 = end1 - 1\n    local length3 = end1 - start1 + 1\n   \
    \ if length3 == 0 then\n        return \"NO\"\n    end1 = end1 + 1\n    end2 =\
    \ end2 + 1\n    local length4 = end2 - start2 + 1\n    if length4 == 0 then\n\
    \        return \"NO\"\n    end2 = end2 - 1\n    end1 = end1 - 1\n    local length5\
    \ = end1 - start1 + 1\n    if length5 == 0 then\n        return \"NO\"\n    end1\
    \ = end1 + 1\n    end2 = end2 + 1\n    local length6 = end2 - start2 + 1\n   \
    \ if length6 == 0 then\n        return \"NO\"\n    end2 = end2 - 1\n    end1 =\
    \ end1 - 1\n    local length7 = end1 - start1 + 1\n    if length7 == 0 then\n\
    \        return \"NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n    local length8\
    \ = end2 - start2 + 1\n    if length8 == 0 then\n        return \"NO\"\n    end2\
    \ = end2 - 1\n    end1 = end1 - 1\n    local length9 = end1 - start1 + 1\n   \
    \ if length9 == 0 then\n        return \"NO\"\n    end1 = end1 + 1\n    end2 =\
    \ end2 + 1\n    local length10 = end2 - start2 + 1\n    if length10 == 0 then\n\
    \        return \"NO\"", "    local start1, end1, start2, end2\n    start1, end1\
    \ = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1 =\
    \ end1 - 1\n    end2 = end2 - 1\n    return (end1 - start1 + 1) * (end2 - start2\
    \ + 1) == math.mod(end1 - start1 + 1, end2 - start2 + 1) and \"YES\" or \"NO\"\
    \nend", "    local start1, end1, start2, end2\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    if start1 >\
    \ end2 or start2 > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n   \
    \ end2 = end2 - 1\n    return (end1 - start1 + 1) * (end2 - start2 + 1) == math.mod(end1\
    \ - start1 + 1, end2 - start2 + 1) and \"YES\" or \"NO\"\nend", "    local start1,\
    \ end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2,\
    \ end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n\
    \        return \"NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n    return end1\
    \ - start1 == end2 - start2 and is_prime(end1 - start1)\nend", "    local start1,\
    \ end1, start2, end2, length\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1, end2 = end1 + 1, end2 + 1\n  \
    \  length = end1 - start1\n    if length == 0 or length == 1 then\n        return\
    \ \"NO\"\n    if length % 2 == 0 then\n        return \"NO\"\n    return \"YES\"\
    \nend", "    local start1 = interval1[1]\n    local end1 = interval1[2]\n    local\
    \ start2 = interval2[1]\n    local end2 = interval2[2]\n    local length = end1\
    \ - start1\n    local length2 = end2 - start2\n    local result = false\n    if\
    \ length > 0 and length2 > 0 then\n        if length == length2 then\n       \
    \     result = true\n        else\n            result = false\n        end\n \
    \   end\n    return result\nend", "    local start1, end1, start2, end2\n    start1,\
    \ end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1 =\
    \ end1 - 1\n    end2 = end2 - 1\n    local length = end1 - start1 + 1\n    if\
    \ length % 2 == 0 then\n        return \"NO\"\n    end1 = end1 + 1\n    end2 =\
    \ end2 + 1\n    return \"YES\"\nend", "    local start1, end1, start2, end2, length,\
    \ i, j\n    start1 = interval1[1]\n    end1 = interval1[2]\n    start2 = interval2[1]\n\
    \    end2 = interval2[2]\n    length = end1 - start1\n    if length == 0 then\n\
    \        return \"NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n    for i =\
    \ start1, end1, 1 do\n        for j = start2, end2, 1 do\n            if i > j\
    \ then\n                return \"NO\"\n            end1 = end1 + 1\n         \
    \   end2 = end2 + 1\n        end\n    end\n    return \"YES\"\nend", "    local\
    \ start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    local length = end1 - start1\n\
    \    if length == 0 then return \"NO\" end\n    if length == 1 then return \"\
    YES\" end\n    local length2 = end2 - start2\n    if length2 == 0 then return\
    \ \"NO\" end\n    if length2 == 1 then return \"YES\" end\n    local prime = math.modf(length\
    \ / length2)[1]\n    if prime == 0 then return \"NO\" end\n    return \"YES\"\n\
    end", "    local start1, end1, start2, end2\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    if start1 >\
    \ end2 or start2 > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n   \
    \ end2 = end2 - 1\n    return (end1 - start1 + 1) * (end2 - start2 + 1) == math.mod(end1\
    \ - start1 + 1, end2 - start2 + 1) and \"YES\" or \"NO\"\nend", "    local start1,\
    \ end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2,\
    \ end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n\
    \        return \"NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n    return end1\
    \ - start2 <= end2 - start1 and start1 <= start2 and end1 >= end2 and end1 - start2\
    \ == end2 - start1 and end1 - start2 == math.floor(end1 - start2) and end1 - start2\
    \ == math.floor(end2 - start1) and end1 - start2 == math.floor(end1 - start2)\
    \ and end1 - start2 == math.floor(end2 - start1) and end1 - start2 == math.floor(end1\
    \ - start2) and end1 - start2 == math.floor(end2 - start1) and end1 - start2 ==\
    \ math.floor(end1 - start2) and end1 - start2 == math.floor(end2 - start1) and\
    \ end1 - start2 == math.floor(end1 - start2) and end1 - start2 == math.floor(end2\
    \ - start1) and end1 - start2 == math.floor(end1 - start2) and end1 - start2 ==\
    \ math.floor(end2 - start1) and end1 - start2 == math.floor(end1 - start2) and\
    \ end1 - start2 == math.floor(end2 - start1) and end1 - start2 == math.floor(end1\
    \ - start2) and end1 - start2 == math.floor(end2 - start1) and end1 - start2 ==\
    \ math.floor(end1 - start2) and end1 - start2 == math.floor(end2 - start1) and\
    \ end1 - start2 == math.floor(end1 - start2) and end1 - start2 == math.floor(end2\
    \ - start1) and end1 - start2 == math.floor(end1 - start2) and end1 - start2 ==\
    \ math.floor(end2 - start1) and end1 - start2 == math.floor(end", "    local start1,\
    \ end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2,\
    \ end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n\
    \        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    local length\
    \ = end1 - start1 + 1\n    if length == 0 then\n        return \"NO\"\n    end1\
    \ = end1 + 1\n    end2 = end2 + 1\n    local length2 = end2 - start2 + 1\n   \
    \ if length2 == 0 then\n        return \"NO\"\n    end2 = end2 - 1\n    end1 =\
    \ end1 - 1\n    return \"YES\"\nend", "    local start1, end1, start2, end2, length\
    \ = interval1[1], interval1[2], interval2[1], interval2[2], 0\n    while start1\
    \ <= end1 and start2 <= end2 do\n        if start1 > end2 or start2 > end1 then\
    \ break\n        if start1 <= end2 and start2 <= end1 then\n            length\
    \ = length + 1\n            start1 = start1 + 1\n            start2 = start2 +\
    \ 1\n        end1 = end1 - 1\n        end2 = end2 - 1\n    end\n    return length\
    \ ~= 0 and \"YES\" or \"NO\"\nend", "    local start1, end1, start2, end2\n  \
    \  start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return end1 - start2 + 1 ==\
    \ math.floor(end1 - start2 + 1 / math.sqrt(2)) and \"YES\" or \"NO\"\nend", " \
    \   local start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n\
    \    return start2 <= end1 and end2 <= start1 and isPrime(end1 - start2)\nend",
  "    local start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n\
    \    return (end1 - start1 + 1) * (end2 - start2 + 1) == math.mod(end1 - start1\
    \ + 1, end2 - start2 + 1) and \"YES\" or \"NO\"\nend", "    local start1, end1,\
    \ start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2\
    \ = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n \
    \       return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return start1\
    \ <= end2 and start2 <= end1 and math.floor(end1 / end2) == math.floor(end2 /\
    \ end1) and math.floor(end1 / end2) == math.floor(end2 / end1) and math.floor(end1\
    \ / end2) == math.floor(end2 / end1) and math.floor(end1 / end2) == math.floor(end2\
    \ / end1) and math.floor(end1 / end2) == math.floor(end2 / end1) and math.floor(end1\
    \ / end2) == math.floor(end2 / end1) and math.floor(end1 / end2) == math.floor(end2\
    \ / end1) and math.floor(end1 / end2) == math.floor(end2 / end1) and math.floor(end1\
    \ / end2) == math.floor(end2 / end1) and math.floor(end1 / end2) == math.floor(end2\
    \ / end1) and math.floor(end1 / end2) == math.floor(end2 / end1) and math.floor(end1\
    \ / end2) == math.floor(end2 / end1) and math.floor(end1 / end2) == math.floor(end2\
    \ / end1) and math.floor(end1 / end2) == math.floor(end2 / end1) and math.floor(end1\
    \ / end2) == math.floor(end2 / end1) and math.floor(end1 / end2) == math.floor(end2\
    \ / end1) and math.floor(end1 / end2) == math.floor(end2 / end1) and math.floor(end1\
    \ / end2) == math.floor(end2 / end1) and math.floor(end1 / end2) == math.", " \
    \   local start1, end1, start2, end2 = interval1[1], interval1[2], interval2[1],\
    \ interval2[2]\n    local length = end1 - start1\n    local length2 = end2 - start2\n\
    \    if length > length2 then\n        return \"NO\"\n    end\n    if length <\
    \ length2 then\n        return \"NO\"\n    end\n    if length == 1 then\n    \
    \    return \"YES\"\n    end\n    local prime = true\n    for i = start1 + 1,\
    \ end1 - 1 do\n        if not prime then\n            return \"NO\"\n        end\n\
    \        if interval1[i] > interval2[2] or interval1[i] < interval2[1] then\n\
    \            continue\n        end\n        if interval1[i] == interval2[1] or\
    \ interval1[i] == interval2[2] then\n            continue\n        end\n     \
    \   prime = false\n    end\n    return \"YES\"\nend", "    local start1, end1,\
    \ start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2\
    \ = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n \
    \       return \"NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n    return start1\
    \ <= end2 and start2 <= end1 and (end1 - start1) % 2 == 1 and (end2 - start2)\
    \ % 2 == 1\nend", "    local start1, end1, start2, end2, length\n    start1, end1\
    \ = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1,\
    \ end2 = end1 - 1, end2 - 1\n    length = end1 - start1 + 1\n    if length ==\
    \ 0 then\n        return \"NO\"\n    end1, end2 = end2 + 1, end1 + 1\n    length\
    \ = end2 - start2 + 1\n    if length == 0 then\n        return \"NO\"\n    end1,\
    \ end2 = end1 + 1, end2 - 1\n    length = end2 - start1 + 1\n    if length ==\
    \ 0 then\n        return \"NO\"\n    end1, end2 = end2 - 1, end1 - 1\n    length\
    \ = end1 - start2 + 1\n    if length == 0 then\n        return \"NO\"\n    end1,\
    \ end2 = end1 - 1, end2 + 1\n    length = end1 - start1 + 1\n    if length ==\
    \ 0 then\n        return \"NO\"\n    end1, end2 = end2 + 1, end1 + 1\n    length\
    \ = end2 - start2 + 1\n    if length == 0 then\n        return \"NO\"\n    end1,\
    \ end2 = end1 + 1, end2 - 1\n    length = end2 - start1 + 1\n    if length ==\
    \ 0 then\n        return \"NO\"\n    end1, end2 = end2 - 1, end1 - 1\n    length\
    \ = end1 - start2 + 1\n    if length == 0 then\n        return \"NO\"\n    end1,\
    \ end2 = end1 - 1, end2 + 1\n    length = end2 - start1 + 1\n    if length ==\
    \ 0 then\n        return \"NO\"\n    end1, end2 = end2 + 1, end1 + 1\n    length\
    \ = end1 - start2 + 1\n    if length == 0 then\n        return \"NO\"\n    end1,\
    \ end2 = end1 + 1, end2 - 1\n    length = end2 - start1 + 1\n    "]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
