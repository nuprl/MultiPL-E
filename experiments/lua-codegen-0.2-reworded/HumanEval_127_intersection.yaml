name: HumanEval_127_intersection
language: lua
prompt: "-- You are given two intervals,\n-- where each interval is a pair of integers.\
  \ For example, interval = (start, end) = (1, 2).\n-- The given intervals are closed\
  \ which means that the interval (start, end)\n-- includes both start and end.\n\
  -- For each given interval, it is assumed that its start is less or equal its end.\n\
  -- Your task is to determine whether the length of intersection of these two \n\
  -- intervals is a prime number.\n-- Example, the intersection of the intervals (1,\
  \ 3), (2, 4) is (2, 3)\n-- which its length is 1, which not a prime number.\n--\
  \ If the length of the intersection is a prime number, return \"YES\",\n-- otherwise,\
  \ return \"NO\".\n-- If the two intervals don't intersect, return \"NO\".\n-- [input/output]\
  \ samples:\n-- >>> intersection((1, 2), (2, 3))\n-- \"NO\"\n-- >>> intersection((-1,\
  \ 1), (0, 4))\n-- \"NO\"\n-- >>> intersection((-3, -1), (-5, 5))\n-- \"YES\"\nlocal\
  \ function intersection(interval1, interval2)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection\n\
  \    lu.assertEquals(candidate({1, 2}, {2, 3}), 'NO')\n    lu.assertEquals(candidate({-1,\
  \ 1}, {0, 4}), 'NO')\n    lu.assertEquals(candidate({-3, -1}, {-5, 5}), 'YES')\n\
  \    lu.assertEquals(candidate({-2, 2}, {-4, 0}), 'YES')\n    lu.assertEquals(candidate({-11,\
  \ 2}, {-1, -1}), 'NO')\n    lu.assertEquals(candidate({1, 2}, {3, 5}), 'NO')\n \
  \   lu.assertEquals(candidate({1, 2}, {1, 2}), 'NO')\n    lu.assertEquals(candidate({-2,\
  \ -2}, {-3, -2}), 'NO')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local start1 = interval1[1]\n    local end1 = interval1[2]\n  \
    \  local start2 = interval2[1]\n    local end2 = interval2[2]\n    if start1 >\
    \ end1 or start2 > end2 then\n        return \"NO\"\n    end1 = end1 - 1\n   \
    \ end2 = end2 - 1\n    local length = end1 - start1 + 1\n    if length == 0 then\n\
    \        return \"NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n    local length2\
    \ = end2 - start2 + 1\n    if length2 == 0 then\n        return \"NO\"\n    end2\
    \ = end2 - 1\n    end1 = end1 - 1\n    local length3 = end1 - start1 + 1\n   \
    \ if length3 == 0 then\n        return \"NO\"\n    end1 = end1 + 1\n    end2 =\
    \ end2 + 1\n    local length4 = end2 - start2 + 1\n    if length4 == 0 then\n\
    \        return \"NO\"\n    end2 = end2 - 1\n    end1 = end1 - 1\n    local length5\
    \ = end1 - start1 + 1\n    if length5 == 0 then\n        return \"NO\"\n    end1\
    \ = end1 + 1\n    end2 = end2 + 1\n    local length6 = end2 - start2 + 1\n   \
    \ if length6 == 0 then\n        return \"NO\"\n    end2 = end2 - 1\n    end1 =\
    \ end1 - 1\n    local length7 = end1 - start1 + 1\n    if length7 == 0 then\n\
    \        return \"NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n    local length8\
    \ = end2 - start2 + 1\n    if length8 == 0 then\n        return \"NO\"\n    end2\
    \ = end2 - 1\n    end1 = end1 - 1\n    local length9 = end1 - start1 + 1\n   \
    \ if length9 == 0 then\n        return \"NO\"\n    end1 = end1 + 1\n    end2 =\
    \ end2 + 1\n    local length10 = end2 - start2 + 1\n    if length10 == 0 then\n\
    \        return \"NO\"", "    local start1, end1, start2, end2\n    start1, end1\
    \ = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1 =\
    \ end1 - 1\n    end2 = end2 - 1\n    return (end1 - start1 + 1) * (end2 - start2\
    \ + 1) == math.mod(end1 - start1 + 1, end2 - start2 + 1) and \"YES\" or \"NO\"\
    \nend", "    local start1, end1, start2, end2\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    if start1 >\
    \ end2 or start2 > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n   \
    \ end2 = end2 - 1\n    return (end1 - start1 + 1) * (end2 - start2 + 1) == math.mod(end1\
    \ - start1 + 1, end2 - start2 + 1) and \"YES\" or \"NO\"\nend", "    local start1,\
    \ end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2,\
    \ end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n\
    \        return \"NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n    return end1\
    \ - start1 == end2 - start2 and is_prime(end1 - start1)\nend", "    local start1,\
    \ end1, start2, end2, length\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1, end2 = end1 + 1, end2 + 1\n  \
    \  length = end1 - start1\n    if length == 0 or length == 1 then\n        return\
    \ \"NO\"\n    if length % 2 == 0 then\n        return \"NO\"\n    return \"YES\"\
    \nend", "    local start1 = interval1[1]\n    local end1 = interval1[2]\n    local\
    \ start2 = interval2[1]\n    local end2 = interval2[2]\n    local length = end1\
    \ - start1\n    local length2 = end2 - start2\n    local result = false\n    if\
    \ length > 0 and length2 > 0 then\n        if length == length2 then\n       \
    \     result = true\n        else\n            result = false\n        end\n \
    \   end\n    return result\nend", "    local start1, end1, start2, end2\n    start1,\
    \ end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1 =\
    \ end1 - 1\n    end2 = end2 - 1\n    local length = end1 - start1 + 1\n    if\
    \ length % 2 == 0 then\n        return \"NO\"\n    end1 = end1 + 1\n    end2 =\
    \ end2 + 1\n    return \"YES\"\nend", "    local start1, end1, start2, end2, length,\
    \ i, j\n    start1 = interval1[1]\n    end1 = interval1[2]\n    start2 = interval2[1]\n\
    \    end2 = interval2[2]\n    length = end1 - start1\n    if length == 0 then\n\
    \        return \"NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n    for i =\
    \ start1, end1, 1 do\n        for j = start2, end2, 1 do\n            if i > j\
    \ then\n                return \"NO\"\n            end1 = end1 + 1\n         \
    \   end2 = end2 + 1\n        end\n    end\n    return \"YES\"\nend", "    local\
    \ start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    local length = end1 - start1\n\
    \    if length == 0 then return \"NO\" end\n    if length == 1 then return \"\
    YES\" end\n    local length2 = end2 - start2\n    if length2 == 0 then return\
    \ \"NO\" end\n    if length2 == 1 then return \"YES\" end\n    local prime = math.modf(length\
    \ / length2)[1]\n    if prime == 0 then return \"NO\" end\n    return \"YES\"\n\
    end", "    local start1, end1, start2, end2\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    if start1 >\
    \ end2 or start2 > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n   \
    \ end2 = end2 - 1\n    return (end1 - start1 + 1) * (end2 - start2 + 1) == math.mod(end1\
    \ - start1 + 1, end2 - start2 + 1) and \"YES\" or \"NO\"\nend", "    local start1,\
    \ end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2,\
    \ end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n\
    \        return \"NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n    return end1\
    \ - start2 <= end2 - start1 and start1 <= start2 and end1 >= end2 and end1 - start2\
    \ == end2 - start1 and end1 - start2 == math.floor(end1 - start2) and end1 - start2\
    \ == math.floor(end2 - start1) and end1 - start2 == math.floor(end1 - start2)\
    \ and end1 - start2 == math.floor(end2 - start1) and end1 - start2 == math.floor(end1\
    \ - start2) and end1 - start2 == math.floor(end2 - start1) and end1 - start2 ==\
    \ math.floor(end1 - start2) and end1 - start2 == math.floor(end2 - start1) and\
    \ end1 - start2 == math.floor(end1 - start2) and end1 - start2 == math.floor(end2\
    \ - start1) and end1 - start2 == math.floor(end1 - start2) and end1 - start2 ==\
    \ math.floor(end2 - start1) and end1 - start2 == math.floor(end1 - start2) and\
    \ end1 - start2 == math.floor(end2 - start1) and end1 - start2 == math.floor(end1\
    \ - start2) and end1 - start2 == math.floor(end2 - start1) and end1 - start2 ==\
    \ math.floor(end1 - start2) and end1 - start2 == math.floor(end2 - start1) and\
    \ end1 - start2 == math.floor(end1 - start2) and end1 - start2 == math.floor(end2\
    \ - start1) and end1 - start2 == math.floor(end1 - start2) and end1 - start2 ==\
    \ math.floor(end2 - start1) and end1 - start2 == math.floor(end", "    local start1,\
    \ end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2,\
    \ end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n\
    \        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    local length\
    \ = end1 - start1 + 1\n    if length == 0 then\n        return \"NO\"\n    end1\
    \ = end1 + 1\n    end2 = end2 + 1\n    local length2 = end2 - start2 + 1\n   \
    \ if length2 == 0 then\n        return \"NO\"\n    end2 = end2 - 1\n    end1 =\
    \ end1 - 1\n    return \"YES\"\nend", "    local start1, end1, start2, end2, length\
    \ = interval1[1], interval1[2], interval2[1], interval2[2], 0\n    while start1\
    \ <= end1 and start2 <= end2 do\n        if start1 > end2 or start2 > end1 then\
    \ break\n        if start1 <= end2 and start2 <= end1 then\n            length\
    \ = length + 1\n            start1 = start1 + 1\n            start2 = start2 +\
    \ 1\n        end1 = end1 - 1\n        end2 = end2 - 1\n    end\n    return length\
    \ ~= 0 and \"YES\" or \"NO\"\nend", "    local start1, end1, start2, end2\n  \
    \  start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return end1 - start2 + 1 ==\
    \ math.floor(end1 - start2 + 1 / math.sqrt(2)) and \"YES\" or \"NO\"\nend", " \
    \   local start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n\
    \    return start2 <= end1 and end2 <= start1 and isPrime(end1 - start2)\nend",
  "    local start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n\
    \    return (end1 - start1 + 1) * (end2 - start2 + 1) == math.mod(end1 - start1\
    \ + 1, end2 - start2 + 1) and \"YES\" or \"NO\"\nend", "    local start1, end1,\
    \ start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2\
    \ = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n \
    \       return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return start1\
    \ <= end2 and start2 <= end1 and math.floor(end1 / end2) == math.floor(end2 /\
    \ end1) and math.floor(end1 / end2) == math.floor(end2 / end1) and math.floor(end1\
    \ / end2) == math.floor(end2 / end1) and math.floor(end1 / end2) == math.floor(end2\
    \ / end1) and math.floor(end1 / end2) == math.floor(end2 / end1) and math.floor(end1\
    \ / end2) == math.floor(end2 / end1) and math.floor(end1 / end2) == math.floor(end2\
    \ / end1) and math.floor(end1 / end2) == math.floor(end2 / end1) and math.floor(end1\
    \ / end2) == math.floor(end2 / end1) and math.floor(end1 / end2) == math.floor(end2\
    \ / end1) and math.floor(end1 / end2) == math.floor(end2 / end1) and math.floor(end1\
    \ / end2) == math.floor(end2 / end1) and math.floor(end1 / end2) == math.floor(end2\
    \ / end1) and math.floor(end1 / end2) == math.floor(end2 / end1) and math.floor(end1\
    \ / end2) == math.floor(end2 / end1) and math.floor(end1 / end2) == math.floor(end2\
    \ / end1) and math.floor(end1 / end2) == math.floor(end2 / end1) and math.floor(end1\
    \ / end2) == math.floor(end2 / end1) and math.floor(end1 / end2) == math.", " \
    \   local start1, end1, start2, end2 = interval1[1], interval1[2], interval2[1],\
    \ interval2[2]\n    local length = end1 - start1\n    local length2 = end2 - start2\n\
    \    if length > length2 then\n        return \"NO\"\n    end\n    if length <\
    \ length2 then\n        return \"NO\"\n    end\n    if length == 1 then\n    \
    \    return \"YES\"\n    end\n    local prime = true\n    for i = start1 + 1,\
    \ end1 - 1 do\n        if not prime then\n            return \"NO\"\n        end\n\
    \        if interval1[i] > interval2[2] or interval1[i] < interval2[1] then\n\
    \            continue\n        end\n        if interval1[i] == interval2[1] or\
    \ interval1[i] == interval2[2] then\n            continue\n        end\n     \
    \   prime = false\n    end\n    return \"YES\"\nend", "    local start1, end1,\
    \ start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2\
    \ = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n \
    \       return \"NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n    return start1\
    \ <= end2 and start2 <= end1 and (end1 - start1) % 2 == 1 and (end2 - start2)\
    \ % 2 == 1\nend", "    local start1, end1, start2, end2, length\n    start1, end1\
    \ = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1,\
    \ end2 = end1 - 1, end2 - 1\n    length = end1 - start1 + 1\n    if length ==\
    \ 0 then\n        return \"NO\"\n    end1, end2 = end2 + 1, end1 + 1\n    length\
    \ = end2 - start2 + 1\n    if length == 0 then\n        return \"NO\"\n    end1,\
    \ end2 = end1 + 1, end2 - 1\n    length = end2 - start1 + 1\n    if length ==\
    \ 0 then\n        return \"NO\"\n    end1, end2 = end2 - 1, end1 - 1\n    length\
    \ = end1 - start2 + 1\n    if length == 0 then\n        return \"NO\"\n    end1,\
    \ end2 = end1 - 1, end2 + 1\n    length = end1 - start1 + 1\n    if length ==\
    \ 0 then\n        return \"NO\"\n    end1, end2 = end2 + 1, end1 + 1\n    length\
    \ = end2 - start2 + 1\n    if length == 0 then\n        return \"NO\"\n    end1,\
    \ end2 = end1 + 1, end2 - 1\n    length = end2 - start1 + 1\n    if length ==\
    \ 0 then\n        return \"NO\"\n    end1, end2 = end2 - 1, end1 - 1\n    length\
    \ = end1 - start2 + 1\n    if length == 0 then\n        return \"NO\"\n    end1,\
    \ end2 = end1 - 1, end2 + 1\n    length = end2 - start1 + 1\n    if length ==\
    \ 0 then\n        return \"NO\"\n    end1, end2 = end2 + 1, end1 + 1\n    length\
    \ = end1 - start2 + 1\n    if length == 0 then\n        return \"NO\"\n    end1,\
    \ end2 = end1 + 1, end2 - 1\n    length = end2 - start1 + 1\n    ", "    local\
    \ start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n\
    \    return (end1 - start1 + 1) * (end2 - start2 + 1) == math.mod(end1 - start1\
    \ + 1, end2 - start2 + 1) and \"YES\" or \"NO\"\nend", "    local start1, end1,\
    \ start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2\
    \ = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n \
    \       return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return start1\
    \ <= end2 and start2 <= end1 and math.mod(end1 - start1 + 1, end2 - start2 + 1)\
    \ == 1\nend", "    local start1, end1, start2, end2, length, i, j\n    start1,\
    \ end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end1 or start2 > end2 then\n        return \"NO\"\n    end1 =\
    \ end1 + 1\n    end2 = end2 + 1\n    length = end1 - start1\n    for i = start1,\
    \ end1, 1 do\n        for j = start2, end2, 1 do\n            if i > j then\n\
    \                break\n            if i == j then\n                if math.mod(length,\
    \ math.pow(2, j)) == 0 then\n                    return \"YES\"\n            \
    \    end2 = end2 + 1\n            end1 = end1 + 1\n        end2 = end2 + 1\n \
    \   end1 = end1 + 1\n    end2 = end2 + 1\n    return \"NO\"\nend", "    local\
    \ start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n\
    \    return start1 <= end2 and start2 <= end1 and isPrime(end2 - start1 + 1)\n\
    end", "    local start1, end1, start2, end2\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    if start1 >\
    \ end2 or start2 > end1 then\n        return \"NO\"\n    end1 = math.min(end1,\
    \ start2)\n    end2 = math.min(end2, start1)\n    return end1 - start1 + 1 ==\
    \ math.floor(end2 - start2 + 1) and \"YES\" or \"NO\"\nend", "    local start1,\
    \ end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2,\
    \ end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n\
    \        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return (end1\
    \ - start1 + 1) * (end2 - start2 + 1) == math.mod(end1 - start1 + 1, end2 - start2\
    \ + 1) and \"YES\" or \"NO\"\nend", "    local start1, end1, start2, end2\n  \
    \  start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return start1 <= end2 and\
    \ start2 <= end1 and\n        math.floor(end1 / math.floor(end2 / start1)) ==\
    \ 1 and\n        math.floor(end2 / math.floor(end1 / start2)) == 1 and\n     \
    \   math.floor(end1 / math.floor(end2 / start1)) == math.floor(end2 / math.floor(end1\
    \ / start2)) and\n        math.floor(end1 / math.floor(end2 / start1)) == math.floor(end1\
    \ / math.floor(end2 / start2)) and\n        math.floor(end2 / math.floor(end1\
    \ / start2)) == math.floor(end2 / math.floor(end1 / start1)) and\n        math.floor(end2\
    \ / math.floor(end1 / start2)) == math.floor(end2 / math.floor(end1 / start1))\n\
    end", "    local start1, end1, start2, end2, length, i, j\n    start1, end1 =\
    \ interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    length = end1 - start1\n    if start1 > end2 or start2 > end1 then\n    \
    \    return \"NO\"\n    end1, end2 = end1 + 1, end2 + 1\n    for i = start1, end1,\
    \ 1 do\n        for j = start2, end2, 1 do\n            if i > j then\n      \
    \          return \"NO\"\n            end1, end2 = end1 + 1, end2 + 1\n      \
    \  end2 = end2 - 1\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return \"YES\"\
    \nend", "    local start1, end1, start2, end2, length, isPrime\n    start1, end1\
    \ = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    length = end1 - start1\n    isPrime = true\n    if length < 0 then\n    \
    \    isPrime = false\n        length = -length\n    end\n    if length < 0 then\n\
    \        isPrime = false\n        length = -length\n    end\n    if length ==\
    \ 0 then\n        isPrime = false\n    end\n    if length == 1 then\n        isPrime\
    \ = false\n    end\n    if isPrime then\n        if start1 <= start2 and end1\
    \ >= end2 then\n            return \"YES\"\n        end\n    end\n    return \"\
    NO\"\nend", "    local start1, end1, start2, end2, length\n    start1, end1 =\
    \ interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    length = end1 - start1\n    if end2 - start2 < length then return \"NO\"\
    \ end\n    if end1 > start2 then return \"NO\" end\n    if end2 > start1 then\
    \ return \"NO\" end\n    return \"YES\"\nend", "    local start1, end1, start2,\
    \ end2, length, prime\n    start1, end1 = interval1[1], interval1[2]\n    start2,\
    \ end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n\
    \        return \"NO\"\n    end1, end2 = end1 + 1, end2 + 1\n    length = end1\
    \ - start1\n    prime = math.mod(length, 2) == 1\n    return prime and \"YES\"\
    \ or \"NO\"\nend", "    local start1, end1, start2, end2, length, result\n   \
    \ start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end1 or start2 > end2 then\n        return \"\
    NO\"\n    end1, end2 = end1, end2\n    length = end1 - start1\n    if length ==\
    \ 0 then\n        return \"NO\"\n    end1, end2 = end2, end1\n    length = end2\
    \ - start2\n    if length == 0 then\n        return \"NO\"\n    end1, end2 = end2,\
    \ end1\n    length = end1 - start1\n    if length == 0 then\n        return \"\
    NO\"\n    end1, end2 = end2, end1\n    length = end2 - start2\n    if length ==\
    \ 0 then\n        return \"NO\"\n    end1, end2 = end2, end1\n    length = end1\
    \ - start1\n    if length == 0 then\n        return \"NO\"\n    end1, end2 = end2,\
    \ end1\n    length = end2 - start2\n    if length == 0 then\n        return \"\
    NO\"\n    end1, end2 = end2, end1\n    length = end1 - start1\n    if length ==\
    \ 0 then\n        return \"NO\"\n    end1, end2 = end2, end1\n    length = end2\
    \ - start2\n    if length == 0 then\n        return \"NO\"\n    end1, end2 = end2,\
    \ end1\n    length = end1 - start1\n    if length == 0 then\n        return \"\
    NO\"\n    end1, end2 = end2, end1\n    length = end2 - start2\n    if length ==\
    \ 0 then\n        return \"NO\"\n    end1, end2 = end2, end1\n    length = end1\
    \ - start1\n    if length == 0 then\n        return \"NO\"\n    end1, end2 = end2,\
    \ end1\n    length = end2 - start2\n    if length == 0 then\n        return \"\
    NO\"\n    end1, end2 = end2, end1\n    length = end", "    local start1, end1,\
    \ start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2\
    \ = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n \
    \       return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return (end1\
    \ - start1 + 1) * (end2 - start2 + 1) == math.mod(end1 - start1 + 1, end2 - start2\
    \ + 1) and \"YES\" or \"NO\"\nend", "    local start1, end1, start2, end2, length\n\
    \    start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    length = end1 - start1\n    if start1 > end2 or start2 > end1\
    \ then\n        return \"NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n    local\
    \ isPrime = true\n    for i = start1, end1, 1 do\n        if not isPrime(i) then\n\
    \            isPrime = false\n            break\n        end1 = end1 + 1\n   \
    \ end\n    if isPrime then\n        return \"YES\"\n    end\n    for i = start2,\
    \ end2, 1 do\n        if not isPrime(i) then\n            isPrime = false\n  \
    \          break\n        end2 = end2 + 1\n    end\n    if isPrime then\n    \
    \    return \"YES\"\n    end\n    return \"NO\"\nend", "    local start1, end1,\
    \ start2, end2 = interval1[1], interval1[2], interval2[1], interval2[2]\n    if\
    \ start1 > end1 or start2 > end2 then return \"NO\" end\n    local length = end1\
    \ - start1\n    if length == 0 then return \"NO\" end\n    if length == 1 then\
    \ return \"YES\" end\n    if length % 2 == 0 then return \"NO\" end\n    return\
    \ \"YES\"\nend", "    local start1, end1, start2, end2 = interval1[1], interval1[2],\
    \ interval2[1], interval2[2]\n    local result = false\n    if start1 <= end2\
    \ and start2 <= end1 then\n        local length = end1 - start1\n        if length\
    \ == 0 then\n            result = true\n        elseif length % 2 == 1 then\n\
    \            result = true\n        else\n            result = false\n       \
    \ end\n    end\n    return result\nend", "    local start1, end1, start2, end2,\
    \ length, result\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2\
    \ = interval2[1], interval2[2]\n    if start1 > end1 or start2 > end2 then\n \
    \       return \"NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n    length =\
    \ end1 - start1\n    if length == 0 then\n        return \"NO\"\n    end1 = end1\
    \ - 1\n    end2 = end2 - 1\n    result = math.mod(end2 - start2, length)\n   \
    \ if result == 0 then\n        return \"YES\"\n    end1 = end1 - 1\n    end2 =\
    \ end2 - 1\n    return \"NO\"\nend", "    local start1, end1, start2, end2 = interval1[1],\
    \ interval1[2], interval2[1], interval2[2]\n    local length = end1 - start1\n\
    \    local length2 = end2 - start2\n    if length < 0 or length2 < 0 then\n  \
    \      return \"NO\"\n    end\n    if length == 0 or length2 == 0 then\n     \
    \   return \"NO\"\n    end\n    if length == 1 or length2 == 1 then\n        return\
    \ \"YES\"\n    end\n    if length % 2 == 0 or length2 % 2 == 0 then\n        return\
    \ \"NO\"\n    end\n    if length2 < length then\n        start1, end1, start2,\
    \ end2 = start2, end2, start1, end1\n        length = length2\n    end\n    if\
    \ length2 == length then\n        return \"YES\"\n    end\n    return \"NO\"\n\
    end", "    local start1, end1, start2, end2\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    if start1 >\
    \ end2 or start2 > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n   \
    \ end2 = end2 - 1\n    return (end1 - start1 + 1) * (end2 - start2 + 1) == math.mod(end1\
    \ - start1 + 1, end2 - start2 + 1) and \"YES\" or \"NO\"\nend", "    local start1,\
    \ end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2,\
    \ end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n\
    \        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return (end1\
    \ - start1 + 1) * (end2 - start2 + 1) == math.mod(end1 - start1 + 1, end2 - start2\
    \ + 1) and \"YES\" or \"NO\"\nend", "    local start1, end1, start2, end2\n  \
    \  start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    local length = end1 - start1\n    if end2 - start2 < length\
    \ then\n        return \"NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n    return\
    \ \"YES\"\nend", "    local start1, end1, start2, end2, length, result\n    start1,\
    \ end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1 =\
    \ end1 + 1\n    end2 = end2 + 1\n    length = end1 - start1\n    result = math.mod(end2\
    \ - start2, length)\n    if result == 0 then\n        return \"YES\"\n    end1\
    \ = end1 - 1\n    end2 = end2 - 1\n    length = end1 - start1\n    result = math.mod(end2\
    \ - start2, length)\n    if result == 0 then\n        return \"YES\"\n    end1\
    \ = end1 - 1\n    end2 = end2 - 1\n    length = end1 - start1\n    result = math.mod(end2\
    \ - start2, length)\n    if result == 0 then\n        return \"YES\"\n    end1\
    \ = end1 - 1\n    end2 = end2 - 1\n    length = end1 - start1\n    result = math.mod(end2\
    \ - start2, length)\n    if result == 0 then\n        return \"YES\"\n    end1\
    \ = end1 - 1\n    end2 = end2 - 1\n    length = end1 - start1\n    result = math.mod(end2\
    \ - start2, length)\n    if result == 0 then\n        return \"YES\"\n    end1\
    \ = end1 - 1\n    end2 = end2 - 1\n    length = end1 - start1\n    result = math.mod(end2\
    \ - start2, length)\n    if result == 0 then\n        return \"YES\"\n    end1\
    \ = end1 - 1\n    end2 = end2 - 1\n    length = end1 - start1\n    result = math.mod(end2\
    \ - start2, length)\n    if result == 0 then\n        return \"YES\"\n    end1\
    \ = end1 - 1\n    end2 = end2 - 1\n    length = end1 - start1\n    result = math.mod(end2\
    \ - start2, length)\n    if", "    local start1, end1, start2, end2 = interval1[1],\
    \ interval1[2], interval2[1], interval2[2]\n    local length = end1 - start1\n\
    \    local length2 = end2 - start2\n    if length < 0 or length2 < 0 then\n  \
    \      return \"NO\"\n    end\n    if length == 0 or length2 == 0 then\n     \
    \   return \"NO\"\n    end\n    if length == 1 or length2 == 1 then\n        return\
    \ \"YES\"\n    end\n    if length % 2 == 0 or length2 % 2 == 0 then\n        return\
    \ \"NO\"\n    end\n    return \"YES\"\nend", "    local start1, end1, start2,\
    \ end2, length\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2\
    \ = interval2[1], interval2[2]\n    length = end1 - start1\n    if start1 > end2\
    \ or start2 > end1 then\n        return \"NO\"\n    end1 = end1 + 1\n    end2\
    \ = end2 + 1\n    return (end1 - start1) == (end2 - start2) and (end1 - start1)\
    \ % 2 == 1\nend", "    local start1, end1, start2, end2\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    if start1 >\
    \ end2 or start2 > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n   \
    \ end2 = end2 - 1\n    return start2 < end1 and end2 > start1 and math.floor(end1\
    \ - start2) == math.floor(end2 - start1) and math.floor(end1 - start2) == math.floor(end2\
    \ - start1)\nend", "    local start1, end1, start2, end2\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    if start1 >\
    \ end2 or start2 > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n   \
    \ end2 = end2 - 1\n    return start1 <= end2 and start2 <= end1 and math.floor(end1\
    \ - start1 + 1) == math.floor(end2 - start2 + 1) and math.floor(end1 - start1\
    \ + 1) == 2 and math.floor(end2 - start2 + 1) == 2 and math.floor(end1 - start1\
    \ + 1) == 2 and math.floor(end2 - start2 + 1) == 2 and math.floor(end1 - start1\
    \ + 1) == 2 and math.floor(end2 - start2 + 1) == 2 and math.floor(end1 - start1\
    \ + 1) == 2 and math.floor(end2 - start2 + 1) == 2 and math.floor(end1 - start1\
    \ + 1) == 2 and math.floor(end2 - start2 + 1) == 2 and math.floor(end1 - start1\
    \ + 1) == 2 and math.floor(end2 - start2 + 1) == 2 and math.floor(end1 - start1\
    \ + 1) == 2 and math.floor(end2 - start2 + 1) == 2 and math.floor(end1 - start1\
    \ + 1) == 2 and math.floor(end2 - start2 + 1) == 2 and math.floor(end1 - start1\
    \ + 1) == 2 and math.floor(end2 - start2 + 1) == 2 and math.floor(end1 - start1\
    \ + 1) == 2 and math.floor(end2 - start2 + 1) == 2 and math.floor(end1 - start1\
    \ + 1) == 2 and math.floor(end2 - start2 + 1) == 2 and math.floor(end1 - start1\
    \ + 1) == 2 and math.floor(end2 - start2 + 1) == 2 and math.floor(end1 - start1\
    \ + 1) == 2 and math.floor(end2 - start", "    local start1, end1, start2, end2\n\
    \    start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return end1 - start1 + 1 ==\
    \ math.floor(end1 - start1 + 1 / 2) and end2 - start2 + 1 == math.floor(end2 -\
    \ start2 + 1 / 2) and start1 <= end2 and start2 <= end1\nend", "    local start1,\
    \ end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2,\
    \ end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n\
    \        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    local result\
    \ = 0\n    while start1 <= end1 and start2 <= end2 do\n        if start1 >= start2\
    \ and start1 <= end2 then\n            result = result + 1\n        end1 = end1\
    \ - 1\n        end2 = end2 - 1\n    end\n    if result == 0 then\n        return\
    \ \"NO\"\n    elseif result == 1 then\n        return \"YES\"\n    else\n    \
    \    return \"NO\"\nend", "    local start1, end1, start2, end2, length, i, j\n\
    \    start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    length = end1 - start1\n    if start1 > end2 or start2 > end1\
    \ then\n        return \"NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n    for\
    \ i = start1, end1, 1 do\n        for j = start2, end2, 1 do\n            if i\
    \ >= j then\n                break\n            end2 = end2 + 1\n        end1\
    \ = end1 + 1\n    end1 = end1 - 1\n    end2 = end2 - 1\n    if end1 - start1 ==\
    \ end2 - start2 then\n        return \"YES\"\n    end1 = end1 + 1\n    end2 =\
    \ end2 + 1\n    return \"NO\"\nend", "    local start1, end1, start2, end2, result\n\
    \    start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    result = end1 - start1 + 1\n\
    \    while start1 <= end1 and start2 <= end2 do\n        if start1 > end2 or start2\
    \ > end1 then\n            break\n        if start1 == start2 then\n         \
    \   result = result - 1\n        else\n            result = result + 1\n     \
    \   end1 = end1 - 1\n        end2 = end2 - 1\n    end1 = end1 + 1\n    end2 =\
    \ end2 + 1\n    return result == math.floor(result) and \"YES\" or \"NO\"\nend",
  "    local start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1 = math.min(end1, start2)\n    end2\
    \ = math.min(end2, start1)\n    if end1 > end2 then\n        return \"NO\"\n \
    \   return \"YES\"\nend", "    local start1, end1, start2, end2\n    start1, end1\
    \ = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1 =\
    \ end1 - 1\n    end2 = end2 - 1\n    return start1 <= end2 and start2 <= end1\
    \ and math.floor(end1) == end1 and math.floor(end2) == end2 and math.floor(start1)\
    \ == start1 and math.floor(start2) == start2 and math.floor(end1 - start1) ==\
    \ end1 - start1 and math.floor(end2 - start2) == end2 - start2 and math.floor(end1\
    \ - start1) == end1 - start1 and math.floor(end2 - start2) == end2 - start2 and\
    \ math.floor(start1 - end2) == start1 - end2 and math.floor(start2 - end1) ==\
    \ start2 - end1 and math.floor(start1 - end2) == start1 - end2 and math.floor(start2\
    \ - end1) == start2 - end1 and math.floor(start1 - end2) == start1 - end2 and\
    \ math.floor(start2 - end1) == start2 - end1 and math.floor(start1 - end2) ==\
    \ start1 - end2 and math.floor(start2 - end1) == start2 - end1 and math.floor(start1\
    \ - end2) == start1 - end2 and math.floor(start2 - end1) == start2 - end1 and\
    \ math.floor(start1 - end2) == start1 - end2 and math.floor(start2 - end1) ==\
    \ start2 - end1 and math.floor(start1 - end2) == start1 - end2 and math.floor(start2\
    \ - end1) == start2 - end1 and math.floor(start1 - end2) == start1 - end2 and\
    \ math.floor(start2 - end1) == start2 - end1 and math.floor(start1 - end2) ==\
    \ start1 - end2 and math.floor(start2 - end", "    local start1, end1, start2,\
    \ end2, length, result\n    start1, end1 = interval1[1], interval1[2]\n    start2,\
    \ end2 = interval2[1], interval2[2]\n    if end1 < start2 or end2 < start1 then\n\
    \        return \"NO\"\n    end1, end2 = math.min(end1, end2), math.max(end1,\
    \ end2)\n    length = end1 - start1\n    if length == 0 then\n        return \"\
    NO\"\n    end1, end2 = math.min(end1, end2), math.max(end1, end2)\n    length\
    \ = end2 - start2\n    if length == 0 then\n        return \"NO\"\n    end1, end2\
    \ = math.min(end1, end2), math.max(end1, end2)\n    length = end1 - start1\n \
    \   if length == 0 then\n        return \"NO\"\n    end1, end2 = math.min(end1,\
    \ end2), math.max(end1, end2)\n    length = end2 - start2\n    if length == 0\
    \ then\n        return \"NO\"\n    end1, end2 = math.min(end1, end2), math.max(end1,\
    \ end2)\n    length = end1 - start1\n    if length == 0 then\n        return \"\
    NO\"\n    end1, end2 = math.min(end1, end2), math.max(end1, end2)\n    length\
    \ = end2 - start2\n    if length == 0 then\n        return \"NO\"\n    end1, end2\
    \ = math.min(end1, end2), math.max(end1, end2)\n    length = end1 - start1\n \
    \   if length == 0 then\n        return \"NO\"\n    end1, end2 = math.min(end1,\
    \ end2), math.max(end1, end2)\n    length = end2 - start2\n    if length == 0\
    \ then\n        return \"NO\"\n    end1, end2 = math.min(end1, end2), math.max(end1,\
    \ end2)\n    length = end1 - start1\n", "    local start1, end1, start2, end2\n\
    \    start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n    return end1 - start1 == end2\
    \ - start2 and start1 <= start2 and start2 <= end1 and end1 <= end2 and end2 <=\
    \ end1 and end1 - start1 and end2 - start2 and end1 - start2 and end2 - start2\
    \ and end1 - start1 and end2 - start2 and end1 - start1 and end2 - start2 and\
    \ end1 - start1 and end2 - start2 and end1 - start1 and end2 - start2 and end1\
    \ - start1 and end2 - start2 and end1 - start1 and end2 - start2 and end1 - start1\
    \ and end2 - start2 and end1 - start1 and end2 - start2 and end1 - start1 and\
    \ end2 - start2 and end1 - start1 and end2 - start2 and end1 - start1 and end2\
    \ - start2 and end1 - start1 and end2 - start2 and end1 - start1 and end2 - start2\
    \ and end1 - start1 and end2 - start2 and end1 - start1 and end2 - start2 and\
    \ end1 - start1 and end2 - start2 and end1 - start1 and end2 - start2 and end1\
    \ - start1 and end2 - start2 and end1 - start1 and end2 - start2 and end1 - start1\
    \ and end2 - start2 and end1 - start1 and end2 - start2 and end1 - start1 and\
    \ end2 - start2 and end1 - start1 and end2 - start2 and end1 - start1 and end2\
    \ - start2 and end1 - start1 and end2 - start2 and end1 - start1 and end2 - start2\
    \ and end1 - start1 and end2 - start2 and end1 - start1 and end2 - start2 and\
    \ end1 - start1 and end2 - start2 and end1 - start1 and end2 - start2 and end",
  "    local start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n\
    \    return end1 - start2 and end2 - start1 and isPrime(end1 - start2) and isPrime(end2\
    \ - start1)\nend", "    local start1, end1, start2, end2\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    if start1 >\
    \ end2 or start2 > end1 then\n        return \"NO\"\n    end1 = end1 + 1\n   \
    \ end2 = end2 + 1\n    return (end1 - start1) * (end2 - start2) == math.mod(end1\
    \ - start1, end2 - start2) and \"YES\" or \"NO\"\nend", "    local start1, end1,\
    \ start2, end2, length\n    start1, end1 = interval1[1], interval1[2]\n    start2,\
    \ end2 = interval2[1], interval2[2]\n    length = end1 - start1\n    if start1\
    \ > end2 or start2 > end1 then\n        return \"NO\"\n    end1 = end1 + 1\n \
    \   end2 = end2 + 1\n    return start2 < end1 and start1 < end2 and length % 2\
    \ == 1\nend", "    local start1, end1, start2, end2\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    if start1 >\
    \ end2 or start2 > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n   \
    \ end2 = end2 - 1\n    return end1 - start2 + 1 == math.floor(end1 - start2 +\
    \ 1 / math.sqrt(2)) and \"YES\" or \"NO\"\nend", "    local start1, end1, start2,\
    \ end2, length\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2\
    \ = interval2[1], interval2[2]\n    length = end1 - start1\n    if start1 > end2\
    \ or start2 > end1 then\n        return \"NO\"\n    end1 = end1 + 1\n    end2\
    \ = end2 + 1\n    return \"YES\"\nend", "    local start1, end1, start2, end2\
    \ = interval1[1], interval1[2], interval2[1], interval2[2]\n    if start1 > end1\
    \ or start2 > end2 then return \"NO\" end\n    local length = end1 - start1\n\
    \    if length == 0 then return \"NO\" end\n    if length == 1 then return \"\
    YES\" end\n    local prime = math.modf(length)[1]\n    if prime == 0 then return\
    \ \"YES\" end\n    return \"NO\"\nend", "    local start1 = interval1[1]\n   \
    \ local end1 = interval1[2]\n    local start2 = interval2[1]\n    local end2 =\
    \ interval2[2]\n    local result = false\n    if start1 <= start2 and end1 >=\
    \ end2 then\n        if end1 - start1 == end2 - start2 then\n            result\
    \ = true\n        end\n    end\n    return result\nend", "    local start1 = interval1[1]\n\
    \    local end1 = interval1[2]\n    local start2 = interval2[1]\n    local end2\
    \ = interval2[2]\n    local length = end1 - start1\n    local length2 = end2 -\
    \ start2\n    if length < 0 or length2 < 0 then\n        return \"NO\"\n    end\n\
    \    if length == 0 or length2 == 0 then\n        return \"NO\"\n    end\n   \
    \ if length == 1 or length2 == 1 then\n        return \"YES\"\n    end\n    if\
    \ length % 2 == 0 or length2 % 2 == 0 then\n        return \"NO\"\n    end\n \
    \   return \"YES\"\nend", "    local start1, end1, start2, end2, length, i, j\n\
    \    start1 = interval1[1]\n    end1 = interval1[2]\n    start2 = interval2[1]\n\
    \    end2 = interval2[2]\n    length = end1 - start1\n    if start1 > end2 or\
    \ start2 > end1 then\n        return \"NO\"\n    end1 = end1 + 1\n    end2 = end2\
    \ + 1\n    for i = start1, end1, 1 do\n        for j = start2, end2, 1 do\n  \
    \          if i > j then\n                return \"NO\"\n            end2 = end2\
    \ + 1\n        end1 = end1 + 1\n    end1 = end1 - 1\n    end2 = end2 - 1\n   \
    \ return \"YES\"\nend", "    local start1, end1, start2, end2\n    start1, end1\
    \ = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1 =\
    \ end1 - 1\n    end2 = end2 - 1\n    return start1 <= end2 and end1 >= start2\
    \ and isPrime(end1 - start1 + 1)\nend", "    local start1, end1, start2, end2\n\
    \    start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1, end2 = end1 - 1, end2 - 1\n    return (end1 - start1 + 1) * (end2\
    \ - start2 + 1) == math.mod(end1 - start1 + 1, end2 - start2 + 1) and \"YES\"\
    \ or \"NO\"\nend", "    local start1, end1, start2, end2\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    if start1 >\
    \ end2 or start2 > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n   \
    \ end2 = end2 - 1\n    return (end1 - start1 + 1) * (end2 - start2 + 1) == math.mod(end1\
    \ - start1 + 1, end2 - start2 + 1) and \"YES\" or \"NO\"\nend", "    local start1,\
    \ end1, start2, end2, length, i, j, prime\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end1 or start2\
    \ > end2 then\n        return \"NO\"\n    end1, end2 = end1 + 1, end2 + 1\n  \
    \  length = end2 - start1\n    prime = true\n    for i = start1, end1, 1 do\n\
    \        for j = start2, end2, 1 do\n            if i > j then\n             \
    \   break\n            if i == j then\n                if i == 1 or i == 2 then\n\
    \                    prime = false\n                    break\n              \
    \  else\n                    i = i + 1\n                    continue\n       \
    \     end2 = j + 1\n            break\n        end1 = i + 1\n        if not prime\
    \ then\n            break\n    end1 = i + 1\n    return \"YES\" if prime and length\
    \ == end1 - start1 else \"NO\"\nend", "    local start1, end1, start2, end2, length,\
    \ i, j\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end1 or start2 > end2 then\n        return \"\
    NO\"\n    end1 = math.min(end1, start2)\n    end2 = math.min(end2, start1)\n \
    \   length = end1 - start1\n    if length == 0 then\n        return \"NO\"\n \
    \   end1 = math.min(end1, start2)\n    end2 = math.min(end2, start1)\n    if end1\
    \ > start1 and end2 > start2 then\n        return \"YES\"\n    for i = start1\
    \ + 1, end1 - 1 do\n        for j = start2 + 1, end2 - 1 do\n            if i\
    \ == j then\n                return \"YES\"\n            end1 = math.min(end1,\
    \ i + j)\n            end2 = math.min(end2, i + j)\n        end2 = math.min(end2,\
    \ start1 + length - 1)\n    end1 = math.min(end1, start2 + length - 1)\n    return\
    \ \"YES\"\nend", "    local start1, end1, start2, end2\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    if start1 >\
    \ end2 or start2 > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n   \
    \ end2 = end2 - 1\n    return start1 <= end2 and start2 <= end1 and\n        math.floor(end1\
    \ / math.floor(end1 / start1)) == math.floor(end2 / math.floor(end2 / start2))\
    \ and\n        math.floor(end1 / math.floor(end1 / start1)) == math.floor(end2\
    \ / math.floor(end2 / start2)) and\n        math.floor(end1 / math.floor(end1\
    \ / start1)) == math.floor(end2 / math.floor(end2 / start2)) and\n        math.floor(end1\
    \ / math.floor(end1 / start1)) == math.floor(end2 / math.floor(end2 / start2))\
    \ and\n        math.floor(end1 / math.floor(end1 / start1)) == math.floor(end2\
    \ / math.floor(end2 / start2)) and\n        math.floor(end1 / math.floor(end1\
    \ / start1)) == math.floor(end2 / math.floor(end2 / start2)) and\n        math.floor(end1\
    \ / math.floor(end1 / start1)) == math.floor(end2 / math.floor(end2 / start2))\
    \ and\n        math.floor(end1 / math.floor(end1 / start1)) == math.floor(end2\
    \ / math.floor(end2 / start2)) and\n        math.floor(end1 / math.floor(end1\
    \ / start1)) == math.floor(end2 / math.floor(end2 / start2)) and\n        math.floor(end1\
    \ / math.floor(end1 / start1)) == math.floor(end2 / math.floor(end2 / start2))\
    \ and\n        math.floor(end1 / math.floor(end1 / start1)) == math.floor(end2\
    \ / math.", "    local start1, end1, start2, end2\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    if start1 >\
    \ end2 or start2 > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n   \
    \ end2 = end2 - 1\n    return start1 <= end2 and start2 <= end1 and\n        math.mod(end1\
    \ - start1 + 1, end2 - start2 + 1) == 1\nend", "    local start1, end1, start2,\
    \ end2\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return start1 <= end2 and\
    \ start2 <= end1 and math.floor(end1 / end2) == math.floor(start2 / end2) and\
    \ math.floor(end1 / end2) == math.floor(start1 / end2) and math.floor(end2 / end1)\
    \ == math.floor(start2 / end1) and math.floor(end2 / end1) == math.floor(start1\
    \ / end1) and math.floor(end1 / end2) == math.floor(start1 / end2) and math.floor(end2\
    \ / end1) == math.floor(start2 / end1) and math.floor(end1 / end2) == math.floor(start2\
    \ / end2) and math.floor(end2 / end1) == math.floor(start1 / end1) and math.floor(end1\
    \ / end2) == math.floor(start2 / end2) and math.floor(end2 / end1) == math.floor(start1\
    \ / end1) and math.floor(end1 / end2) == math.floor(start2 / end2) and math.floor(end2\
    \ / end1) == math.floor(start1 / end1) and math.floor(end1 / end2) == math.floor(start2\
    \ / end2) and math.floor(end2 / end1) == math.floor(start1 / end1) and math.floor(end1\
    \ / end2) == math.floor(start2 / end2) and math.floor(end2 / end1) == math.floor(start1\
    \ / end1) and math.floor(end1 / end2) == math.floor(start2 / end2) and math.floor(end2\
    \ / end1) == math.floor(start1 / end1) and math.floor(end1 / end2) == math.",
  "    local start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n\
    \    return (end1 - start1 + 1) * (end2 - start2 + 1) == math.mod(end1 - start1\
    \ + 1, end2 - start2 + 1) and \"YES\" or \"NO\"\nend", "    local start1, end1,\
    \ start2, end2 = interval1[1], interval1[2], interval2[1], interval2[2]\n    local\
    \ length = end1 - start1 + 1\n    local length2 = end2 - start2 + 1\n    if length\
    \ < 0 or length2 < 0 then return \"NO\" end\n    if length == 0 or length2 ==\
    \ 0 then return \"NO\" end\n    if length == 1 or length2 == 1 then return \"\
    YES\" end\n    if length == 2 or length2 == 2 then return \"YES\" end\n    if\
    \ length == 3 or length2 == 3 then return \"YES\" end\n    if length == 4 or length2\
    \ == 4 then return \"YES\" end\n    if length == 5 or length2 == 5 then return\
    \ \"YES\" end\n    if length == 6 or length2 == 6 then return \"YES\" end\n  \
    \  if length == 7 or length2 == 7 then return \"YES\" end\n    if length == 8\
    \ or length2 == 8 then return \"YES\" end\n    if length == 9 or length2 == 9\
    \ then return \"YES\" end\n    if length == 10 or length2 == 10 then return \"\
    YES\" end\n    if length == 11 or length2 == 11 then return \"YES\" end\n    if\
    \ length == 12 or length2 == 12 then return \"YES\" end\n    if length == 13 or\
    \ length2 == 13 then return \"YES\" end\n    if length == 14 or length2 == 14\
    \ then return \"YES\" end\n    if length == 15 or length2 == 15 then return \"\
    YES\" end\n    if length == 16 or length2 == 16 then return \"YES\" end\n    if\
    \ length == 17 or length2 == 17 then return \"YES\" end\n    if length == 18 or\
    \ length2 == 18 then return \"YES\" end\n    if length == 19 or length2 == 19\
    \ then return \"YES\" end\n    if length == 20 or length2 == 20 then return \"\
    YES\" end\n    if length == 21 or length2 == 21 then return \"YES\" end\n    if\
    \ length == 22 or length2 == 22 then return \"YES\" end\n    if length == 23 or\
    \ length2 == 23 then return \"YES\" end\n    if length == 24 or length2 == 24\
    \ then return \"YES\" end\n    if length == 25 or length2 == 25", "    local start1,\
    \ end1, start2, end2 = interval1[1], interval1[2], interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1,\
    \ end2 = end1 + 1, end2 + 1\n    return start1 <= end2 and start2 <= end1 and\
    \ (end1 - start1) * (end2 - start2) == math.floor((end1 - start1) * (end2 - start2))\
    \ and (end1 - start1) * (end2 - start2) == math.floor((end2 - start2) * (end1\
    \ - start1)) and (end1 - start1) * (end2 - start2) == math.floor((end2 - start2)\
    \ * (end1 - start1)) and (end1 - start1) * (end2 - start2) == math.floor((end2\
    \ - start2) * (end1 - start1)) and (end1 - start1) * (end2 - start2) == math.floor((end2\
    \ - start2) * (end1 - start1)) and (end1 - start1) * (end2 - start2) == math.floor((end2\
    \ - start2) * (end1 - start1)) and (end1 - start1) * (end2 - start2) == math.floor((end2\
    \ - start2) * (end1 - start1)) and (end1 - start1) * (end2 - start2) == math.floor((end2\
    \ - start2) * (end1 - start1)) and (end1 - start1) * (end2 - start2) == math.floor((end2\
    \ - start2) * (end1 - start1)) and (end1 - start1) * (end2 - start2) == math.floor((end2\
    \ - start2) * (end1 - start1)) and (end1 - start1) * (end2 - start2) == math.floor((end2\
    \ - start2) * (end1 - start1)) and (end1 - start1) * (end2 - start2) == math.floor((end2\
    \ - start2) * (end1 - start1)) and (end1 - start", "    local start1, end1, start2,\
    \ end2, length, is_prime\n    start1, end1 = interval1[1], interval1[2]\n    start2,\
    \ end2 = interval2[1], interval2[2]\n    length = end1 - start1\n    is_prime\
    \ = true\n    if length > 0 then\n        if length % 2 == 0 then\n          \
    \  is_prime = false\n        end\n        end\n    end\n    if is_prime then\n\
    \        if end1 > start2 then\n            return \"YES\"\n        end\n    \
    \    if end2 > start1 then\n            return \"YES\"\n        end\n    end\n\
    \    return \"NO\"\nend", "    local start1, end1, start2, end2\n    start1, end1\
    \ = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1 =\
    \ math.min(end1, start2)\n    end2 = math.min(end2, start1)\n    if end1 > end2\
    \ then\n        return \"NO\"\n    return \"YES\"\nend", "    local start1, end1,\
    \ start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2\
    \ = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n \
    \       return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return start2\
    \ <= end1 and end2 >= start1 and math.mod(end1 - start2 + 1, 2) == 1\nend", " \
    \   local start1, end1, start2, end2 = interval1[1], interval1[2], interval2[1],\
    \ interval2[2]\n    local length = end1 - start1\n    if length < 0 then\n   \
    \     return \"NO\"\n    end\n    local length2 = end2 - start2\n    if length2\
    \ < 0 then\n        return \"NO\"\n    end\n    local length3 = end1 - start2\n\
    \    if length3 < 0 then\n        return \"NO\"\n    end\n    local length4 =\
    \ end2 - start1\n    if length4 < 0 then\n        return \"NO\"\n    end\n   \
    \ if length == 0 or length2 == 0 then\n        return \"NO\"\n    end\n    if\
    \ length == 1 or length2 == 1 then\n        return \"YES\"\n    end\n    if length\
    \ % 2 == 0 then\n        return \"NO\"\n    end\n    if length2 % 2 == 0 then\n\
    \        return \"NO\"\n    end\n    return \"YES\"\nend", "    local start1,\
    \ end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2,\
    \ end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n\
    \        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return (end1\
    \ - start1 + 1) * (end2 - start2 + 1) == math.mod(end1 - start1 + 1, end2 - start2\
    \ + 1) and \"YES\" or \"NO\"\nend", "    local start1, end1, start2, end2, length\n\
    \    start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1, end2 = end1, end2\n    length = end1 - start1\n    if length ==\
    \ 1 then\n        return \"YES\"\n    end1, end2 = end2, end1\n    length = end1\
    \ - start1\n    if length == 1 then\n        return \"YES\"\n    end1, end2 =\
    \ end2, end1\n    length = end1 - start1\n    if length == 1 then\n        return\
    \ \"YES\"\n    end1, end2 = end2, end1\n    length = end1 - start1\n    if length\
    \ == 1 then\n        return \"YES\"\n    end1, end2 = end2, end1\n    length =\
    \ end1 - start1\n    if length == 1 then\n        return \"YES\"\n    end1, end2\
    \ = end2, end1\n    length = end1 - start1\n    if length == 1 then\n        return\
    \ \"YES\"\n    end1, end2 = end2, end1\n    length = end1 - start1\n    if length\
    \ == 1 then\n        return \"YES\"\n    end1, end2 = end2, end1\n    length =\
    \ end1 - start1\n    if length == 1 then\n        return \"YES\"\n    end1, end2\
    \ = end2, end1\n    length = end1 - start1\n    if length == 1 then\n        return\
    \ \"YES\"\n    end1, end2 = end2, end1\n    length = end1 - start1\n    if length\
    \ == 1 then\n        return \"YES\"\n    end1, end2 = end2, end1\n    length =\
    \ end1 - start1\n    if length == 1 then\n        return \"YES\"\n    end1, end2\
    \ = end2, end1\n    length = end1 - start1\n    if length == 1 then\n        return\
    \ \"YES\"\n    end1, end2 = end2, end1\n    length = end1 -", "    local start1,\
    \ end1, start2, end2 = interval1[1], interval1[2], interval2[1], interval2[2]\n\
    \    local length = end1 - start1\n    local length2 = end2 - start2\n    if length\
    \ < 0 or length2 < 0 then\n        return \"NO\"\n    end\n    if length == 0\
    \ or length2 == 0 then\n        return \"NO\"\n    end\n    if length == 1 or\
    \ length2 == 1 then\n        return \"YES\"\n    end\n    if length % 2 == 0 or\
    \ length2 % 2 == 0 then\n        return \"NO\"\n    end\n    if length == length2\
    \ then\n        return \"YES\"\n    end\n    if length < length2 then\n      \
    \  return \"NO\"\n    end\n    if length > length2 then\n        return \"NO\"\
    \n    end\n    return \"YES\"\nend", "    local start1, end1, start2, end2\n \
    \   start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    local length = end1 - start1\
    \ + 1\n    local isPrime = true\n    for i = start1 + 1, end1, 1 do\n        isPrime\
    \ = isPrime and (i % length) == 1\n    end\n    if isPrime then\n        return\
    \ \"YES\"\n    end\n    return \"NO\"\nend", "    local start1, end1, start2,\
    \ end2 = interval1[1], interval1[2], interval2[1], interval2[2]\n    if start1\
    \ > end1 or start2 > end2 then return \"NO\" end\n    local length = end1 - start1\n\
    \    if length == 0 then return \"NO\" end\n    if length == 1 then return \"\
    YES\" end\n    local length2 = end2 - start2\n    if length2 == 0 then return\
    \ \"NO\" end\n    if length2 == 1 then return \"YES\" end\n    local length3 =\
    \ length * length2\n    local i = start1 + 1\n    while i <= end1 do\n       \
    \ if i >= start2 and i <= end2 then\n            if length3 % i == 0 then return\
    \ \"YES\" end\n        end\n        i = i + 1\n    end\n    return \"NO\"\nend",
  "    local start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n\
    \    return end1 - start1 == end2 - start2 and start1 <= start2 and start2 <=\
    \ end1 and end1 <= end2 and end2 <= end1 and end1 - start1 == end2 - start2 and\
    \ start1 <= start2 and start2 <= end1 and end1 <= end2 and end2 <= end1 and end1\
    \ - start1 == end2 - start2 and start1 <= start2 and start2 <= end1 and end1 <=\
    \ end2 and end2 <= end1 and end1 - start1 == end2 - start2 and start1 <= start2\
    \ and start2 <= end1 and end1 <= end2 and end2 <= end1 and end1 - start1 == end2\
    \ - start2 and start1 <= start2 and start2 <= end1 and end1 <= end2 and end2 <=\
    \ end1 and end1 - start1 == end2 - start2 and start1 <= start2 and start2 <= end1\
    \ and end1 <= end2 and end2 <= end1 and end1 - start1 == end2 - start2 and start1\
    \ <= start2 and start2 <= end1 and end1 <= end2 and end2 <= end1 and end1 - start1\
    \ == end2 - start2 and start1 <= start2 and start2 <= end1 and end1 <= end2 and\
    \ end2 <= end1 and end1 - start1 == end2 - start2 and start1 <= start2 and start2\
    \ <= end1 and end1 <= end2 and end2 <= end1 and end1 - start1 == end2 - start2\
    \ and start1 <= start2 and start2 <= end1 and end1 <= end2 and end2 <= end1 and\
    \ end1 - start1 == end2 - start2 and start1 <= start2 and start2 <= end1 and end1\
    \ <= end2 and end2 <= end1 and end1 - start1 == end2 - start2 and start1 <= start2\
    \ and start2 <= end1 and end", "    local start1 = interval1[1]\n    local end1\
    \ = interval1[2]\n    local start2 = interval2[1]\n    local end2 = interval2[2]\n\
    \    local length = end1 - start1\n    local length2 = end2 - start2\n    if length\
    \ < 0 or length2 < 0 then\n        return \"NO\"\n    end\n    if length == 0\
    \ or length2 == 0 then\n        return \"NO\"\n    end\n    local length3 = math.floor(math.sqrt(length\
    \ * length2))\n    local length4 = math.floor(math.sqrt(length2))\n    local length5\
    \ = math.floor(math.sqrt(length))\n    local length6 = math.floor(math.sqrt(length2))\n\
    \    local length7 = math.floor(math.sqrt(length))\n    local length8 = math.floor(math.sqrt(length2))\n\
    \    local length9 = math.floor(math.sqrt(length))\n    local length10 = math.floor(math.sqrt(length2))\n\
    \    local length11 = math.floor(math.sqrt(length))\n    local length12 = math.floor(math.sqrt(length2))\n\
    \    local length13 = math.floor(math.sqrt(length))\n    local length14 = math.floor(math.sqrt(length2))\n\
    \    local length15 = math.floor(math.sqrt(length))\n    local length16 = math.floor(math.sqrt(length2))\n\
    \    local length17 = math.floor(math.sqrt(length))\n    local length18 = math.floor(math.sqrt(length2))\n\
    \    local length19 = math.floor(math.sqrt(length))\n    local length20 = math.floor(math.sqrt(length2))\n\
    \    local length21 = math.floor(math.sqrt(length))\n    local length22 = math.floor(math.sqrt(length2))\n\
    \    local length23 = math.floor(math.sqrt(length))\n    local length24 = math.floor(math.sqrt(length2))\n\
    \    local length25 = math.floor(math.sqrt(length))\n", "    local start1, end1,\
    \ start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2\
    \ = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n \
    \       return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return start1\
    \ <= end2 and start2 <= end1 and\n        math.floor(end1 / math.floor(end1 /\
    \ start1)) == math.floor(end2 / math.floor(end2 / start2)) and\n        math.floor(end1\
    \ / math.floor(end1 / start1)) == math.floor(end2 / math.floor(end2 / start2))\
    \ and\n        math.floor(end1 / math.floor(end1 / start1)) == math.floor(end2\
    \ / math.floor(end2 / start2)) and\n        math.floor(end1 / math.floor(end1\
    \ / start1)) == math.floor(end2 / math.floor(end2 / start2)) and\n        math.floor(end1\
    \ / math.floor(end1 / start1)) == math.floor(end2 / math.floor(end2 / start2))\
    \ and\n        math.floor(end1 / math.floor(end1 / start1)) == math.floor(end2\
    \ / math.floor(end2 / start2)) and\n        math.floor(end1 / math.floor(end1\
    \ / start1)) == math.floor(end2 / math.floor(end2 / start2)) and\n        math.floor(end1\
    \ / math.floor(end1 / start1)) == math.floor(end2 / math.floor(end2 / start2))\
    \ and\n        math.floor(end1 / math.floor(end1 / start1)) == math.floor(end2\
    \ / math.floor(end2 / start2)) and\n        math.floor(end1 / math.floor(end1\
    \ / start1)) == math.floor(end2 / math.floor(end2 / start2)) and\n        math.floor(end1\
    \ / math.floor(end1 / start1)) == math.floor(end2 / math.", "    local start1,\
    \ end1, start2, end2, length, i, j, prime\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end1 or start2\
    \ > end2 then return \"NO\" end\n    length = end1 - start1\n    prime = true\n\
    \    for i = start1 + 1, end1, length do\n        for j = start2 + 1, end2, length\
    \ do\n            if i == j then break end\n            if i > j then break end\n\
    \            if i > j and not prime then break end\n            if i == j and\
    \ not prime then break end\n            if i == j and prime then break end\n \
    \           if i < j and prime then break end\n            if i < j and prime\
    \ then break end\n            if i < j and not prime then break end\n        \
    \    if i < j and not prime then break end\n            if i < j and prime then\
    \ break end\n            if i < j and prime then break end\n            if i <\
    \ j and prime then break end\n            if i < j and prime then break end\n\
    \            if i < j and prime then break end\n            if i < j and prime\
    \ then break end\n            if i < j and prime then break end\n            if\
    \ i < j and prime then break end\n            if i < j and prime then break end\n\
    \            if i < j and prime then break end\n            if i < j and prime\
    \ then break end\n            if i < j and prime then break end\n            if\
    \ i < j and prime then break end\n            if i < j and prime then break end\n\
    \            if i < j and prime then break end\n            if i < j and prime\
    \ then break end\n            if i < j and prime then break end\n            if\
    \ i < j and prime then break end\n            if i < j and prime then break end\n\
    \            if i < j and prime then break end\n            if i < j and prime\
    \ then break end\n            if i < j and prime then break end\n            if\
    \ i < j and prime then break end\n            if i < j and prime then break end\n\
    \            if i < j and prime then break end\n            if i < j and prime\
    \ then break end\n            if i < j", "    local start1, end1, start2, end2\n\
    \    start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1 = math.min(end1, start2)\n    end2 = math.min(end2, start1)\n \
    \   if end1 > end2 then\n        return \"NO\"\n    return \"YES\"\nend", "  \
    \  local start1, end1, start2, end2, length, i, j, result\n    start1, end1 =\
    \ interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1 =\
    \ end1 + 1\n    end2 = end2 + 1\n    length = end1 - start1\n    for i = start1,\
    \ end1, 1 do\n        for j = start2, end2, 1 do\n            if i >= j then\n\
    \                result = result or (i - j + 1)\n            end\n        end\n\
    \    end\n    return result == length and \"YES\" or \"NO\"\nend", "    local\
    \ start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n\
    \    return start1 <= end2 and end1 >= start2 and is_prime(end1 - start1 + 1)\n\
    end", "    local start1, end1, start2, end2, length, prime = 1\n    start1, end1\
    \ = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1 =\
    \ math.min(end1, start2)\n    end2 = math.min(end2, start1)\n    length = end1\
    \ - start1\n    for i = start1 + 1 to end1 do\n        if math.mod(i, length)\
    \ == 0 then\n            prime = 0\n            break\n        end1 = i\n    end2\
    \ = math.min(end2, start2)\n    length = end2 - start2\n    for i = start2 + 1\
    \ to end2 do\n        if math.mod(i, length) == 0 then\n            prime = 0\n\
    \            break\n        end2 = i\n    if prime == 1 then\n        return \"\
    YES\"\n    end1 = math.min(end1, start2)\n    end2 = math.min(end2, start1)\n\
    \    length = end1 - start1\n    for i = start1 + 1 to end1 do\n        if math.mod(i,\
    \ length) == 0 then\n            prime = 0\n            break\n        end1 =\
    \ i\n    end2 = math.min(end2, start2)\n    length = end2 - start2\n    for i\
    \ = start2 + 1 to end2 do\n        if math.mod(i, length) == 0 then\n        \
    \    prime = 0\n            break\n        end2 = i\n    if prime == 1 then\n\
    \        return \"YES\"\n    return \"NO\"\nend", "    local start1, end1, start2,\
    \ end2, length, result\n    start1, end1 = interval1[1], interval1[2]\n    start2,\
    \ end2 = interval2[1], interval2[2]\n    length = end1 - start1\n    if start1\
    \ > end2 or start2 > end1 then\n        return \"NO\"\n    end1, end2 = end1 +\
    \ 1, end2 + 1\n    result = 0\n    for i = start1, end1, 1 do\n        for j =\
    \ start2, end2, 1 do\n            result = result + 1\n            if i > j then\
    \ break\n        end2 = end2 + 1\n    end1 = end1 + 1\n    end2 = end2 + 1\n \
    \   if result == length then\n        return \"YES\"\n    end1 = end1 + 1\n  \
    \  end2 = end2 + 1\n    return \"NO\"\nend", "    local start1, end1, start2,\
    \ end2\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1 = math.min(end1, start2)\n    end2 = math.min(end2, start1)\n \
    \   if end1 - start1 == end2 - start2 then\n        return \"YES\"\n    return\
    \ \"NO\"\nend", "    local start1, end1, start2, end2, length\n    start1, end1\
    \ = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1,\
    \ end2 = end1, end2\n    length = end1 - start1\n    if length == 0 then\n   \
    \     return \"NO\"\n    end1, end2 = end2, end1\n    length = end2 - start2\n\
    \    if length == 0 then\n        return \"NO\"\n    end1, end2 = end2, end1\n\
    \    length = end1 - start1\n    if length == 0 then\n        return \"NO\"\n\
    \    end1, end2 = end2, end1\n    length = end2 - start2\n    if length == 0 then\n\
    \        return \"NO\"\n    end1, end2 = end2, end1\n    length = end1 - start1\n\
    \    if length == 0 then\n        return \"NO\"\n    end1, end2 = end2, end1\n\
    \    length = end2 - start2\n    if length == 0 then\n        return \"NO\"\n\
    \    end1, end2 = end2, end1\n    length = end1 - start1\n    if length == 0 then\n\
    \        return \"NO\"\n    end1, end2 = end2, end1\n    length = end2 - start2\n\
    \    if length == 0 then\n        return \"NO\"\n    end1, end2 = end2, end1\n\
    \    length = end1 - start1\n    if length == 0 then\n        return \"NO\"\n\
    \    end1, end2 = end2, end1\n    length = end2 - start2\n    if length == 0 then\n\
    \        return \"NO\"\n    end1, end2 = end2, end1\n    length = end1 - start1\n\
    \    if length == 0 then\n        return \"NO\"\n    end1, end2 = end2, end1\n\
    \    length = end2 - start2\n    if length == 0 then\n        return \"NO\"\n\
    \    end1, end2 = end2, end1\n    length = end1 -", "    local start1, end1, start2,\
    \ end2\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1, end2 = end1 - 1, end2 - 1\n    return (end1 - start1 + 1) * (end2\
    \ - start2 + 1) == math.mod(end1 - start1 + 1, end2 - start2 + 1) and \"YES\"\
    \ or \"NO\"\nend", "    local start1, end1, start2, end2\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    if start1 >\
    \ end2 or start2 > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n   \
    \ end2 = end2 - 1\n    return start1 <= end2 and end1 >= start2 and isPrime(end1\
    \ - start1 + 1)\nend", "    local start1, end1, start2, end2\n    start1, end1\
    \ = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1 =\
    \ end1 - 1\n    end2 = end2 - 1\n    return start1 <= end2 and start2 <= end1\
    \ and math.floor(end1 / start2) == math.floor(end2 / start1) and math.floor(end1\
    \ / start2) == math.floor(end2 / start1) and math.floor(end1 / start2) == math.floor(end2\
    \ / start1) and math.floor(end1 / start2) == math.floor(end2 / start1) and math.floor(end1\
    \ / start2) == math.floor(end2 / start1) and math.floor(end1 / start2) == math.floor(end2\
    \ / start1) and math.floor(end1 / start2) == math.floor(end2 / start1) and math.floor(end1\
    \ / start2) == math.floor(end2 / start1) and math.floor(end1 / start2) == math.floor(end2\
    \ / start1) and math.floor(end1 / start2) == math.floor(end2 / start1) and math.floor(end1\
    \ / start2) == math.floor(end2 / start1) and math.floor(end1 / start2) == math.floor(end2\
    \ / start1) and math.floor(end1 / start2) == math.floor(end2 / start1) and math.floor(end1\
    \ / start2) == math.floor(end2 / start1) and math.floor(end1 / start2) == math.floor(end2\
    \ / start1) and math.floor(end1 / start2) == math.floor(end2 / start1) and math.floor(end1\
    \ / start2) == math.floor(end2 / start1) and math.floor(end1 / start2) == math.floor(end2\
    \ / start1) and math.floor(end1 / start2) == math.", "    local start1 = interval1[1]\n\
    \    local end1 = interval1[2]\n    local start2 = interval2[1]\n    local end2\
    \ = interval2[2]\n    local result = false\n    if start1 <= start2 and end1 >=\
    \ end2 then\n        result = true\n    end\n    return result\nend", "    local\
    \ start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1, end2 = end1 - 1, end2 - 1\n  \
    \  return (end1 - start1 + 1) * (end2 - start2 + 1) == math.mod(end1 - start1\
    \ + 1, end2 - start2 + 1) and \"YES\" or \"NO\"\nend", "    local start1, end1,\
    \ start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2\
    \ = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n \
    \       return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return (end1\
    \ - start1 + 1) * (end2 - start2 + 1) == math.mod(end1 - start1 + 1, end2 - start2\
    \ + 1) and \"YES\" or \"NO\"\nend", "    local start1, end1, start2, end2, length,\
    \ is_prime\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2 =\
    \ interval2[1], interval2[2]\n    length = end1 - start1\n    is_prime = true\n\
    \    if length < 0 or start1 > end2 or start2 > end1 then\n        is_prime =\
    \ false\n    elseif length == 0 then\n        is_prime = false\n    elseif length\
    \ == 1 then\n        is_prime = true\n    else\n        is_prime = math.mod(length,\
    \ 2) == 1\n    end\n    return is_prime\nend", "    local start1, end1, start2,\
    \ end2, length\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2\
    \ = interval2[1], interval2[2]\n    length = end1 - start1\n    if start1 > end2\
    \ or start2 > end1 then\n        return \"NO\"\n    end1 = end1 + 1\n    end2\
    \ = end2 + 1\n    local i = 1\n    while i <= length do\n        if start1 <=\
    \ start2 and start2 <= end1 and end1 <= end2 then\n            end1 = end1 + 1\n\
    \            end2 = end2 + 1\n        else\n            return \"NO\"\n      \
    \  end1 = end1 + 1\n        end2 = end2 + 1\n        i = i + 1\n    end\n    return\
    \ \"YES\"\nend", "    local start1, end1, start2, end2, length\n    start1, end1\
    \ = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    length = end1 - start1\n    if end2 - start2 < length then\n        return\
    \ \"NO\"\n    end1, end2 = end2, end1\n    length = end2 - start2\n    if end1\
    \ - start1 < length then\n        return \"NO\"\n    end1, end2 = end1, end2\n\
    \    length = end2 - start1\n    if end1 - start1 < length then\n        return\
    \ \"NO\"\n    end1, end2 = end2, end1\n    length = end1 - start2\n    if end2\
    \ - start2 < length then\n        return \"NO\"\n    end1, end2 = end2, end1\n\
    \    length = end1 - start2\n    if end2 - start2 < length then\n        return\
    \ \"NO\"\n    end1, end2 = end2, end1\n    length = end1 - start2\n    if end2\
    \ - start2 < length then\n        return \"NO\"\n    end1, end2 = end2, end1\n\
    \    length = end2 - start1\n    if end1 - start1 < length then\n        return\
    \ \"NO\"\n    end1, end2 = end1, end2\n    length = end2 - start1\n    if end1\
    \ - start1 < length then\n        return \"NO\"\n    return \"YES\"\nend", " \
    \   local start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n\
    \    return end1 - start1 + 1 == math.floor(math.sqrt(end1 - start1 + 1)) and\n\
    \        end2 - start2 + 1 == math.floor(math.sqrt(end2 - start2 + 1)) and\n \
    \       end1 - start1 + 1 == end2 - start2 + 1 and\n        end1 - start1 + 1\
    \ == math.floor(end1 - start1 + 1) and\n        end2 - start2 + 1 == math.floor(end2\
    \ - start2 + 1)\nend", "    local start1, end1, start2, end2\n    start1, end1\
    \ = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1 =\
    \ end1 + 1\n    end2 = end2 + 1\n    return end1 - start2\nend", "    local start1\
    \ = interval1[1]\n    local end1 = interval1[2]\n    local start2 = interval2[1]\n\
    \    local end2 = interval2[2]\n    local length = end1 - start1\n    local length2\
    \ = end2 - start2\n    local result = false\n    if length > 0 and length2 > 0\
    \ then\n        if length == length2 then\n            result = true\n       \
    \ else\n            result = false\n        end\n    end\n    return result\n\
    end", "    local start1, end1, start2, end2\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    if start1 >\
    \ end2 or start2 > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n   \
    \ end2 = end2 - 1\n    return (end1 - start1 + 1) * (end2 - start2 + 1) == math.mod(end1\
    \ - start1 + 1, end2 - start2 + 1) and \"YES\" or \"NO\"\nend", "    local start1,\
    \ end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2,\
    \ end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n\
    \        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return (end1\
    \ - start1 + 1) * (end2 - start2 + 1) == math.mod(end1 - start1 + 1, end2 - start2\
    \ + 1) and \"YES\" or \"NO\"\nend", "    local start1, end1, start2, end2\n  \
    \  start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    local length = end1 - start1\
    \ + 1\n    local isPrime = true\n    for i = start1, end1, 1 do\n        if not\
    \ isPrime(i) then\n            isPrime = false\n            break\n        end1\
    \ = end1 - 1\n    end\n    if isPrime then\n        return \"YES\"\n    end\n\
    \    return \"NO\"\nend", "    local start1, end1, start2, end2, length\n    start1,\
    \ end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    length = end1 - start1\n    if length < end2 - start2 then\n        return\
    \ \"NO\"\n    end1, end2 = end2, end1\n    end1, end2 = end2, end1\n    end1,\
    \ end2 = end2, end1\n    end1, end2 = end2, end1\n    end1, end2 = end2, end1\n\
    \    end1, end2 = end2, end1\n    end1, end2 = end2, end1\n    end1, end2 = end2,\
    \ end1\n    end1, end2 = end2, end1\n    end1, end2 = end2, end1\n    end1, end2\
    \ = end2, end1\n    end1, end2 = end2, end1\n    end1, end2 = end2, end1\n   \
    \ end1, end2 = end2, end1\n    end1, end2 = end2, end1\n    end1, end2 = end2,\
    \ end1\n    end1, end2 = end2, end1\n    end1, end2 = end2, end1\n    end1, end2\
    \ = end2, end1\n    end1, end2 = end2, end1\n    end1, end2 = end2, end1\n   \
    \ end1, end2 = end2, end1\n    end1, end2 = end2, end1\n    end1, end2 = end2,\
    \ end1\n    end1, end2 = end2, end1\n    end1, end2 = end2, end1\n    end1, end2\
    \ = end2, end1\n    end1, end2 = end2, end1\n    end1, end2 = end2, end1\n   \
    \ end1, end2 = end2, end1\n    end1, end2 = end2, end1\n    end1, end2 = end2,\
    \ end1\n    end1, end2 = end2, end1\n    end1, end", "    local start1, end1,\
    \ start2, end2, length, isPrime\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    length = end1 - start1\n \
    \   if end2 - start2 < length then return \"NO\" end\n    isPrime = true\n   \
    \ for i = start1 + 1, end1 - 1, 1 do\n        if not (start2 + i - 1) <= end2\
    \ then return \"NO\" end\n        if not (start2 + i - 1) <= end2 then return\
    \ \"NO\" end\n        if not (start2 + i - 1) <= end2 then return \"NO\" end\n\
    \        if not (start2 + i - 1) <= end2 then return \"NO\" end\n        if not\
    \ (start2 + i - 1) <= end2 then return \"NO\" end\n        if not (start2 + i\
    \ - 1) <= end2 then return \"NO\" end\n        if not (start2 + i - 1) <= end2\
    \ then return \"NO\" end\n        if not (start2 + i - 1) <= end2 then return\
    \ \"NO\" end\n        if not (start2 + i - 1) <= end2 then return \"NO\" end\n\
    \        if not (start2 + i - 1) <= end2 then return \"NO\" end\n        if not\
    \ (start2 + i - 1) <= end2 then return \"NO\" end\n        if not (start2 + i\
    \ - 1) <= end2 then return \"NO\" end\n        if not (start2 + i - 1) <= end2\
    \ then return \"NO\" end\n        if not (start2 + i - 1) <= end2 then return\
    \ \"NO\" end\n        if not (start2 + i - 1) <= end2 then return \"NO\" end\n\
    \        if not (start2 + i - 1) <= end2 then return \"NO\" end\n        if not\
    \ (start2 + i - 1) <= end2 then return \"NO\" end\n        if not (start2 + i\
    \ - 1) <= end2 then return \"NO\" end\n        if not (start2 + i - 1) <= end2\
    \ then return \"NO\" end\n        if not (start2 + i - 1", "    local start1,\
    \ end1, start2, end2, length, i, j, result\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    length = end1 - start1\n \
    \   if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1, end2\
    \ = end1 + 1, end2 + 1\n    for i = start1, end1, 1 do\n        for j = start2,\
    \ end2, 1 do\n            if i > j then\n                result = \"NO\"\n   \
    \         elseif i == j then\n                result = \"YES\"\n            else\n\
    \                result = \"NO\"\n            end\n        end\n    end\n    return\
    \ result\nend", "    local start1, end1, start2, end2\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    if start1 >\
    \ end2 or start2 > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n   \
    \ end2 = end2 - 1\n    local length = end1 - start1 + 1\n    local isPrime = true\n\
    \    for i = start1 + 1, end1, 1 do\n        if not isPrime(i) then\n        \
    \    isPrime = false\n            break\n        end1 = end1 - 1\n    end1 = end1\
    \ + 1\n    end2 = end2 + 1\n    end1 = end1 - 1\n    end2 = end2 - 1\n    if isPrime\
    \ then\n        return \"YES\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n   \
    \ end1 = end1 - 1\n    end2 = end2 - 1\n    return \"NO\"\nend", "    local start1,\
    \ end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2,\
    \ end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n\
    \        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return (end1\
    \ - start1 + 1) * (end2 - start2 + 1) == math.mod(end1 - start1 + 1, end2 - start2\
    \ + 1) and \"YES\" or \"NO\"\nend", "    local start1, end1, start2, end2, length,\
    \ i, j\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1, end2 = end1, end2\n    length = end1 - start1\n    for i = start1\
    \ + 1 to end1 do\n        if end2 > start1 then\n            for j = start2 +\
    \ 1 to end2 do\n                if j > start1 and j < end1 then\n            \
    \        length = length - 1\n                end2 = end2 - 1\n            end2\
    \ = end2 - 1\n        end1 = end1 - 1\n    end1 = end1 - 1\n    if length == 1\
    \ then\n        return \"YES\"\n    end1, end2 = end1, end2\n    length = end1\
    \ - start1\n    for i = start1 + 1 to end1 do\n        if end2 > start1 then\n\
    \            for j = start2 + 1 to end2 do\n                if j > start1 and\
    \ j < end1 then\n                    length = length - 1\n                end2\
    \ = end2 - 1\n            end2 = end2 - 1\n        end1 = end1 - 1\n    end1 =\
    \ end1 - 1\n    if length == 1 then\n        return \"YES\"\n    end1, end2 =\
    \ end1, end2\n    length = end1 - start1\n    for i = start1 + 1 to end1 do\n\
    \        if end2 > start1 then\n            for j = start2 + 1 to end2 do\n  \
    \              if j > start1 and j < end1 then\n                    length = length\
    \ - 1\n                end2 = end2 - 1\n            end2 = end2 - 1\n        end1\
    \ = end1 - 1\n    end1 = end1 - 1\n    if length == 1 then\n        return \"\
    YES\"\n    end1, end2 = end1, end2\n    length = end1 - start1\n    for i = start1\
    \ + 1 to end1 do\n        if end2 > start1 then\n            for j = start2 +\
    \ 1 to end2 do\n", "    local start1, end1, start2, end2\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    if start1 >\
    \ end2 or start2 > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n   \
    \ end2 = end2 - 1\n    return start1 <= end2 and start2 <= end1 and\n        math.mod(end1\
    \ - start1 + 1, end2 - start2 + 1) == 1 and\n        math.mod(end2 - start2 +\
    \ 1, end1 - start1 + 1) == 1\nend", "    local start1, end1, start2, end2\n  \
    \  start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n    return end1 - start2\nend",
  "    local start1 = interval1[1]\n    local end1 = interval1[2]\n    local start2\
    \ = interval2[1]\n    local end2 = interval2[2]\n    local length = end1 - start1\n\
    \    local length2 = end2 - start2\n    if length > end2 - start1 then\n     \
    \   return \"NO\"\n    end\n    if length2 > end1 - start2 then\n        return\
    \ \"NO\"\n    end\n    local length3 = end1 - start2\n    if length3 > end2 -\
    \ start1 then\n        return \"NO\"\n    end\n    local length4 = end2 - start1\n\
    \    if length4 > end1 - start2 then\n        return \"NO\"\n    end\n    return\
    \ \"YES\"\nend", "    local start1, end1, start2, end2 = interval1[1], interval1[2],\
    \ interval2[1], interval2[2]\n    local length = end1 - start1\n    local length2\
    \ = end2 - start2\n    if length > length2 then\n        local length = length2\n\
    \        local start1, end1 = start2, end2\n    end\n    if length < 1 then\n\
    \        return \"NO\"\n    end\n    local length = length - 1\n    local result\
    \ = math.mod(length, 2)\n    if result == 1 then\n        return \"YES\"\n   \
    \ end\n    return \"NO\"\nend", "    local start1 = interval1[1]\n    local end1\
    \ = interval1[2]\n    local start2 = interval2[1]\n    local end2 = interval2[2]\n\
    \    local length = end1 - start1\n    local length2 = end2 - start2\n    if length\
    \ > length2 then\n        return \"NO\"\n    end\n    if length < length2 then\n\
    \        return \"NO\"\n    end\n    if length == length2 then\n        return\
    \ \"YES\"\n    end\n    return \"NO\"\nend", "    local start1, end1, start2,\
    \ end2, length, prime\n    start1, end1 = interval1[1], interval1[2]\n    start2,\
    \ end2 = interval2[1], interval2[2]\n    length = end1 - start1\n    if length\
    \ < 0 then\n        return \"NO\"\n    end1, start2 = start2, end2\n    length\
    \ = end2 - start2\n    if length < 0 then\n        return \"NO\"\n    end2, start1\
    \ = start1, end1\n    length = end1 - start1\n    if length < 0 then\n       \
    \ return \"NO\"\n    end1, start2 = start2, end2\n    length = end2 - start2\n\
    \    if length < 0 then\n        return \"NO\"\n    end2, start1 = start1, end1\n\
    \    length = end1 - start1\n    if length < 0 then\n        return \"NO\"\n \
    \   end1, start2 = start2, end2\n    length = end2 - start2\n    if length < 0\
    \ then\n        return \"NO\"\n    end2, start1 = start1, end1\n    length = end1\
    \ - start1\n    if length < 0 then\n        return \"NO\"\n    end1, start2 =\
    \ start2, end2\n    length = end2 - start2\n    if length < 0 then\n        return\
    \ \"NO\"\n    end2, start1 = start1, end1\n    length = end1 - start1\n    if\
    \ length < 0 then\n        return \"NO\"\n    end1, start2 = start2, end2\n  \
    \  length = end2 - start2\n    if length < 0 then\n        return \"NO\"\n   \
    \ end2, start1 = start1, end1\n    length = end1 - start1\n    if length < 0 then\n\
    \        return \"NO\"\n    end1, start2 = start2, end2\n    length = end2 - start2\n\
    \    if length < 0 then\n        return \"NO\"\n    end2, start1 = start1, end1\n\
    \    length = end1 - start1\n    if length < 0 then\n        return \"NO\"\n \
    \   end1, start2 = start2, end2\n    length =", "    local start1, end1, start2,\
    \ end2, length, result\n    start1, end1 = interval1[1], interval1[2]\n    start2,\
    \ end2 = interval2[1], interval2[2]\n    if start1 > end1 then\n        start1,\
    \ end1 = end1, start1\n    end1 = end1 + 1\n    end2 = end2 + 1\n    length =\
    \ end1 - start1\n    if length == 0 then\n        return \"NO\"\n    end1 = end1\
    \ - 1\n    end2 = end2 - 1\n    result = 0\n    for i = start1, end1, 1 do\n \
    \       for j = start2, end2, 1 do\n            if i > j then\n              \
    \  result = result + 1\n            end2 = end2 - 1\n        end1 = end1 - 1\n\
    \    end1 = end1 + 1\n    end2 = end2 + 1\n    if result == length then\n    \
    \    return \"YES\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return \"NO\"\
    \nend", "    local start1 = interval1[1]\n    local end1 = interval1[2]\n    local\
    \ start2 = interval2[1]\n    local end2 = interval2[2]\n    if start1 > end1 or\
    \ start2 > end2 then\n        return \"NO\"\n    end\n    end\n    return \"YES\"\
    \nend", "    local start1, end1, start2, end2\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    if start1 >\
    \ end2 or start2 > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n   \
    \ end2 = end2 - 1\n    local length = end1 - start1 + 1\n    local is_prime =\
    \ true\n    for i = start1 + 1, start2, 1 do\n        if not is_prime(i) then\n\
    \            is_prime = false\n            break\n        end2 = end2 - 1\n  \
    \  end1 = end1 - 1\n    end2 = end2 - 1\n    if is_prime then\n        if length\
    \ == 2 then\n            return \"YES\"\n        elseif length == 1 then\n   \
    \         return \"NO\"\n        else\n            return \"YES\"\n        end\n\
    \    end\n    return \"NO\"\nend", "    local start1 = interval1[1]\n    local\
    \ end1 = interval1[2]\n    local start2 = interval2[1]\n    local end2 = interval2[2]\n\
    \    local result = false\n    if start1 > end1 or start2 > end2 then\n      \
    \  return result\n    end1 = end1 + 1\n    end2 = end2 + 1\n    for i = start1,\
    \ end1 - 1 do\n        for j = start2, end2 - 1 do\n            if i > j then\n\
    \                break\n            if i == j then\n                result = true\n\
    \                break\n            if i + j > end1 - start1 + end2 - start2 then\n\
    \                break\n            if i + j > end2 - start2 + end1 - start1 then\n\
    \                break\n            if i + j > end1 - start1 + end2 - start2 then\n\
    \                break\n            if i + j > end2 - start2 + end1 - start1 then\n\
    \                break\n            if i + j > end1 - start1 + end2 - start2 then\n\
    \                break\n            if i + j > end2 - start2 + end1 - start1 then\n\
    \                break\n            if i + j > end1 - start1 + end2 - start2 then\n\
    \                break\n            if i + j > end2 - start2 + end1 - start1 then\n\
    \                break\n            if i + j > end1 - start1 + end2 - start2 then\n\
    \                break\n            if i + j > end2 - start2 + end1 - start1 then\n\
    \                break\n            if i + j > end1 - start1 + end2 - start2 then\n\
    \                break\n            if i + j > end2 - start2 + end1 - start1 then\n\
    \                break\n            if i + j > end1 - start1 + end2 - start2 then\n\
    \                break\n            if i + j > end2 - start2 + end1 - start1 then\n\
    \                break\n            if i + j > end1 - start1 + end2 - start2 then\n\
    \                break\n            if i + j > end2 - start2 + end1 - start1 then\n\
    \                break\n            if i + j > end1 - start1 + end2 - start2 then\n\
    \                break\n", "    local start1, end1, start2, end2\n    start1,\
    \ end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1 =\
    \ end1 - 1\n    end2 = end2 - 1\n    return start1 <= end2 and end1 >= start2\
    \ and is_prime(end1 - start1 + 1)\nend", "    local start1, end1, start2, end2\
    \ = interval1[1], interval1[2], interval2[1], interval2[2]\n    if start1 > end2\
    \ or start2 > end1 then\n        return \"NO\"\n    end1, end2 = end1 + 1, end2\
    \ + 1\n    return (end1 - start1) * (end2 - start2) == math.mod(end1 - start1,\
    \ end2 - start2) and \"YES\" or \"NO\"\nend", "    local start1, end1, start2,\
    \ end2 = interval1[1], interval1[2], interval2[1], interval2[2]\n    local length\
    \ = end1 - start1 + 1\n    local length2 = end2 - start2 + 1\n    if length >\
    \ length2 then\n        return \"NO\"\n    end\n    if length < length2 then\n\
    \        return \"NO\"\n    end\n    if length == length2 then\n        return\
    \ \"YES\"\n    end\n    return \"NO\"\nend", "    local start1, end1, start2,\
    \ end2\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return start1 <= end2 and\
    \ start2 <= end1 and math.floor(end1) - math.floor(start1) == math.floor(end2)\
    \ - math.floor(start2) and math.floor(end1) % 2 == math.floor(end2) % 2 and math.floor(end1)\
    \ % 3 == math.floor(end2) % 3 and math.floor(end1) % 5 == math.floor(end2) % 5\n\
    end", "    local start1, end1, start2, end2, length, i, j, prime\n    start1,\
    \ end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    length = end1 - start1\n    if length < end2 - start2 then\n        return\
    \ \"NO\"\n    end1, end2 = end2, end1\n    length = end2 - start2\n    if length\
    \ < end1 - start1 then\n        return \"NO\"\n    end2, end1 = end1, end2\n \
    \   length = end1 - start1\n    if length < end2 - start2 then\n        return\
    \ \"NO\"\n    end1, end2 = end2, end1\n    length = end2 - start2\n    if length\
    \ < end1 - start1 then\n        return \"NO\"\n    end2, end1 = end1, end2\n \
    \   length = end2 - start2\n    if length < end1 - start1 then\n        return\
    \ \"NO\"\n    end1, end2 = end2, end1\n    length = end2 - start2\n    if length\
    \ < end1 - start1 then\n        return \"NO\"\n    end2, end1 = end1, end2\n \
    \   length = end2 - start2\n    if length < end1 - start1 then\n        return\
    \ \"NO\"\n    end1, end2 = end2, end1\n    length = end2 - start2\n    if length\
    \ < end1 - start1 then\n        return \"NO\"\n    end2, end1 = end1, end2\n \
    \   length = end2 - start2\n    if length < end1 - start1 then\n        return\
    \ \"NO\"\n    end1, end2 = end2, end1\n    length = end2 - start2\n    if length\
    \ < end1 - start1 then\n        return \"NO\"\n    end2, end1 = end1, end2\n \
    \   length = end2 - start2\n    if length < end1 - start1 then\n        return\
    \ \"NO\"\n    end1, end2 = end2, end1\n    length = end2 - start2\n    if length\
    \ < end1 - start1 then\n        return \"NO\"", "    local start1 = interval1[1]\n\
    \    local end1 = interval1[2]\n    local start2 = interval2[1]\n    local end2\
    \ = interval2[2]\n    if start1 > end1 or start2 > end2 then\n        return \"\
    NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    local length = end1 - start1\
    \ + 1\n    local i = start1\n    while i <= end1 do\n        i = i + 1\n     \
    \   if i > end2 then\n            break\n        if i > end1 then\n          \
    \  break\n        if i == start2 then\n            break\n        if i == start1\
    \ then\n            break\n        if i == end2 then\n            break\n    \
    \    if i == end1 then\n            break\n        if i == start2 then\n     \
    \       break\n        if i == start1 then\n            break\n        if i ==\
    \ end2 then\n            break\n        if i == end1 then\n            break\n\
    \        if i == start2 then\n            break\n        if i == start1 then\n\
    \            break\n        if i == end2 then\n            break\n        if i\
    \ == end1 then\n            break\n        if i == start2 then\n            break\n\
    \        if i == start1 then\n            break\n        if i == end2 then\n \
    \           break\n        if i == end1 then\n            break\n        if i\
    \ == start2 then\n            break\n        if i == start1 then\n           \
    \ break\n        if i == end2 then\n            break\n        if i == end1 then\n\
    \            break\n        if i == start2 then\n            break\n        if\
    \ i == start1 then\n            break\n        if i == end2 then\n           \
    \ break\n        if i == end1 then\n            break\n        if i == start2\
    \ then\n            break\n        if i == start1 then\n            break\n  \
    \      if i == end2 then\n            break\n        if i == end1 then\n     \
    \       break\n        if i == start2 then\n            break\n        if i ==\
    \ start1 then\n            break\n        if i == end2 then\n            break\n\
    \        if i == end1 then\n            break\n        if i == start2 then\n \
    \           break\n        if i == start1 then\n            break", "    local\
    \ start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1, end2 = end1, end2\n    return\
    \ end1 - start1 + 1 == math.floor(math.sqrt(end1 - start1)) and\n        end2\
    \ - start2 + 1 == math.floor(math.sqrt(end2 - start2)) and\n        end1 - start1\
    \ + 1 == end2 - start2 + 1 and\n        end1 - start1 + 1 == math.floor(end1 -\
    \ start1) and\n        end2 - start2 + 1 == math.floor(end2 - start2) and\n  \
    \      end1 - start1 + 1 == math.floor(end1 - start1) and\n        end2 - start2\
    \ + 1 == math.floor(end2 - start2)\nend", "    local start1, end1, start2, end2\n\
    \    start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    local length = end1 - start1\n    local length2 = end2 - start2\n\
    \    if length > length2 then\n        return \"NO\"\n    end1, start2 = start2,\
    \ end2\n    end2, start1 = start1, end1\n    return \"YES\"\nend", "    local\
    \ start1, end1, start2, end2, length, prime\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    if start1 >\
    \ end2 or start2 > end1 then\n        return \"NO\"\n    end1, end2 = end1 + 1,\
    \ end2 + 1\n    length = end1 - start1\n    prime = math.floor(math.sqrt(length))\n\
    \    if prime * prime == length then\n        return \"YES\"\n    return \"NO\"\
    \nend", "    local start1, end1, start2, end2\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    if start1 >\
    \ end2 or start2 > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n   \
    \ end2 = end2 - 1\n    return start2 < end1 and start1 < end2 and math.floor(end1\
    \ - start1) == math.floor(end2 - start2) and math.floor(end1 - start1) % 2 ==\
    \ 0\nend", "    local start1 = interval1[1]\n    local end1 = interval1[2]\n \
    \   local start2 = interval2[1]\n    local end2 = interval2[2]\n    if start1\
    \ > end1 or start2 > end2 then\n        return \"NO\"\n    end\n    return \"\
    YES\"\nend", "    local start1, end1, start2, end2\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    if start1 >\
    \ end2 or start2 > end1 then\n        return \"NO\"\n    end1 = end1 + 1\n   \
    \ end2 = end2 + 1\n    return end1 - start1 == end2 - start2 and start1 <= start2\
    \ and start2 <= end1 and end1 <= end2 and end2 <= end1 and end1 - start1 and end2\
    \ - start2 and end1 - start2 and end2 - start1 and end1 - start2 and end2 - start1\
    \ and end1 - start2 and end2 - start1 and end1 - start2 and end2 - start1 and\
    \ end1 - start2 and end2 - start1 and end1 - start2 and end2 - start1 and end1\
    \ - start2 and end2 - start1 and end1 - start2 and end2 - start1 and end1 - start2\
    \ and end2 - start1 and end1 - start2 and end2 - start1 and end1 - start2 and\
    \ end2 - start1 and end1 - start2 and end2 - start1 and end1 - start2 and end2\
    \ - start1 and end1 - start2 and end2 - start1 and end1 - start2 and end2 - start1\
    \ and end1 - start2 and end2 - start1 and end1 - start2 and end2 - start1 and\
    \ end1 - start2 and end2 - start1 and end1 - start2 and end2 - start1 and end1\
    \ - start2 and end2 - start1 and end1 - start2 and end2 - start1 and end1 - start2\
    \ and end2 - start1 and end1 - start2 and end2 - start1 and end1 - start2 and\
    \ end2 - start1 and end1 - start2 and end2 - start1 and end1 - start2 and end2\
    \ - start1 and end1 - start2 and end2 - start1 and end1 - start2 and end2 - start1\
    \ and end1 - start2 and end2 - start1 and end1 - start2 and end2 - start1 and\
    \ end1 - start2 and end2 - start1 and end", "    local start1, end1, start2, end2,\
    \ length, result\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2\
    \ = interval2[1], interval2[2]\n    if start1 > end1 or start2 > end2 then\n \
    \       return \"NO\"\n    end1, end2 = end1, end2\n    length = end1 - start1\n\
    \    if length == 0 then\n        return \"NO\"\n    end1, end2 = end2, end1\n\
    \    length = end2 - start2\n    if length == 0 then\n        return \"NO\"\n\
    \    end1, end2 = end2, end1\n    length = end1 - start1\n    if length == 0 then\n\
    \        return \"NO\"\n    end1, end2 = end2, end1\n    length = end2 - start2\n\
    \    if length == 0 then\n        return \"NO\"\n    end1, end2 = end2, end1\n\
    \    length = end1 - start1\n    if length == 0 then\n        return \"NO\"\n\
    \    end1, end2 = end2, end1\n    length = end2 - start2\n    if length == 0 then\n\
    \        return \"NO\"\n    end1, end2 = end2, end1\n    length = end1 - start1\n\
    \    if length == 0 then\n        return \"NO\"\n    end1, end2 = end2, end1\n\
    \    length = end2 - start2\n    if length == 0 then\n        return \"NO\"\n\
    \    end1, end2 = end2, end1\n    length = end1 - start1\n    if length == 0 then\n\
    \        return \"NO\"\n    end1, end2 = end2, end1\n    length = end2 - start2\n\
    \    if length == 0 then\n        return \"NO\"\n    end1, end2 = end2, end1\n\
    \    length = end1 - start1\n    if length == 0 then\n        return \"NO\"\n\
    \    end1, end2 = end2, end1\n    length = end2 - start2\n    if length == 0 then\n\
    \        return \"NO\"\n    end1, end2 = end2, end1\n    length = end", "    local\
    \ start1, end1, start2, end2 = interval1[1], interval1[2], interval2[1], interval2[2]\n\
    \    local length = end1 - start1 + 1\n    local length2 = end2 - start2 + 1\n\
    \    if length > 0 and length2 > 0 then\n        if length == length2 then\n \
    \           if math.mod(length, 2) == 1 then\n                return \"YES\"\n\
    \            else\n                return \"NO\"\n            end\n        else\n\
    \            return \"NO\"\n        end\n    else\n        return \"NO\"\n   \
    \ end\nend", "    local start1, end1, start2, end2\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    if start1 >\
    \ end2 or start2 > end1 then\n        return \"NO\"\n    end1 = end1 + 1\n   \
    \ end2 = end2 + 1\n    return (end1 - start1) * (end2 - start2) == math.mod(end1\
    \ - start1, end2 - start2)\nend", "    local start1, end1, start2, end2 = interval1[1],\
    \ interval1[2], interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1\
    \ then\n        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    local\
    \ length = end1 - start1 + 1\n    if length % 2 == 0 then\n        return \"NO\"\
    \n    end1 = end1 + 1\n    end2 = end2 + 1\n    return \"YES\"\nend", "    local\
    \ start1, end1, start2, end2, length, result\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    if start1 >\
    \ end1 then\n        start1, end1 = end1, start1\n    end1 = end1 + 1\n    end2\
    \ = end2 + 1\n    length = end1 - start1\n    if length == 1 then\n        result\
    \ = \"YES\"\n    elseif length == 2 then\n        result = \"NO\"\n    else\n\
    \        result = \"NO\"\n    end\n    return result\nend", "    local start1,\
    \ end1, start2, end2 = interval1[1], interval1[2], interval2[1], interval2[2]\n\
    \    local length = end1 - start1\n    if length == 0 then return \"NO\" end\n\
    \    if length == 1 then return \"YES\" end\n    if start1 > end2 then return\
    \ \"NO\" end\n    if start2 > end1 then return \"NO\" end\n    local length2 =\
    \ end2 - start2\n    if length2 == 0 then return \"NO\" end\n    if length2 ==\
    \ 1 then return \"YES\" end\n    if length2 < length then return \"NO\" end\n\
    \    local i = start1\n    while i <= end1 do\n        if i >= start2 and i <=\
    \ end2 then return \"YES\" end\n        i = i + 1\n    end\n    return \"NO\"\n\
    end", "    local start1, end1, start2, end2, length\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    if start1 >\
    \ end2 or start2 > end1 then\n        return \"NO\"\n    end1, end2 = end1 + 1,\
    \ end2 + 1\n    length = end1 - start1\n    if length == 1 then\n        return\
    \ \"YES\"\n    end1, end2 = end2 + 1, end1 + 1\n    length = end2 - start2\n \
    \   if length == 1 then\n        return \"YES\"\n    return \"NO\"\nend", "  \
    \  local start1, end1, start2, end2, length, result\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    if start1 >\
    \ end1 then\n        start1, end1 = end1, start1\n    end1, start2 = start2, end2\n\
    \    end2, start1 = start1, end2\n    length = end1 - start1\n    if length <\
    \ 0 then\n        return \"NO\"\n    end1, start2 = start2, end1\n    end2, start1\
    \ = start1, end2\n    result = math.mod(start2 - start1, length)\n    if result\
    \ == 0 then\n        return \"YES\"\n    end1, start2 = start2, end1\n    end2,\
    \ start1 = start1, end2\n    return \"NO\"\nend", "    local start1, end1, start2,\
    \ end2\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return (end1 - start1 + 1)\
    \ * (end2 - start2 + 1) == math.mod(end1 - start1 + 1, end2 - start2 + 1) and\
    \ \"YES\" or \"NO\"\nend", "    local start1, end1, start2, end2\n    start1,\
    \ end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1 =\
    \ end1 - 1\n    end2 = end2 - 1\n    return start1 <= end2 and start2 <= end1\
    \ and math.floor(end1 / end2) == math.floor(end2 / end1) and math.floor(end1 /\
    \ end2) == math.floor(end2 / end1) and math.floor(end1 / end2) == math.floor(end2\
    \ / end1) and math.floor(end1 / end2) == math.floor(end2 / end1) and math.floor(end1\
    \ / end2) == math.floor(end2 / end1) and math.floor(end1 / end2) == math.floor(end2\
    \ / end1) and math.floor(end1 / end2) == math.floor(end2 / end1) and math.floor(end1\
    \ / end2) == math.floor(end2 / end1) and math.floor(end1 / end2) == math.floor(end2\
    \ / end1) and math.floor(end1 / end2) == math.floor(end2 / end1) and math.floor(end1\
    \ / end2) == math.floor(end2 / end1) and math.floor(end1 / end2) == math.floor(end2\
    \ / end1) and math.floor(end1 / end2) == math.floor(end2 / end1) and math.floor(end1\
    \ / end2) == math.floor(end2 / end1) and math.floor(end1 / end2) == math.floor(end2\
    \ / end1) and math.floor(end1 / end2) == math.floor(end2 / end1) and math.floor(end1\
    \ / end2) == math.floor(end2 / end1) and math.floor(end1 / end2) == math.floor(end2\
    \ / end1) and math.floor(end1 / end2) == math.", "    local start1, end1, start2,\
    \ end2\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return end1 - start2 + 1 ==\
    \ math.floor(end1 - start2 + 1 / 2) and \"YES\" or \"NO\"\nend", "    local start1,\
    \ end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2,\
    \ end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n\
    \        return \"NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n    return end1\
    \ - start2\nend", "    local start1, end1, start2, end2, length, i, j, result\n\
    \    start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end1 or start2 > end2 then\n        return \"\
    NO\"\n    end1, end2 = end1, end2\n    length = end1 - start1\n    if length <\
    \ 0 then\n        length = end2 - start2\n        end2 = start2\n    end2 = end2\
    \ - start1 + 1\n    if length < 0 then\n        length = end2 - start2\n     \
    \   end2 = start2\n    end2 = end2 + 1\n    result = \"\"\n    for i = start1,\
    \ end1, 1 do\n        for j = start2, end2, 1 do\n            if i > end1 or j\
    \ > end2 then\n                break\n            if i == j then\n           \
    \     result = result .. \" \" .. i\n            end2 = end2 + 1\n        end2\
    \ = start2\n        end2 = end2 + 1\n    end2 = start2\n    end2 = end2 + 1\n\
    \    end1 = end1 + 1\n    end1 = end1 + 1\n    return result\nend", "    local\
    \ start1, end1, start2, end2, length, isPrime\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    length = end1\
    \ - start1\n    isPrime = true\n    if length < 0 then\n        isPrime = false\n\
    \    end\n    return isPrime\nend", "    local start1, end1, start2, end2, length,\
    \ is_prime\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2 =\
    \ interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n   \
    \     return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    length = end1\
    \ - start1 + 1\n    is_prime = is_prime_number(length)\n    return is_prime and\
    \ \"YES\" or \"NO\"\nend", "    local start1, end1, start2, end2, length\n   \
    \ start1 = interval1[1]\n    end1 = interval1[2]\n    start2 = interval2[1]\n\
    \    end2 = interval2[2]\n    if start1 > end1 or start2 > end2 then\n       \
    \ return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    length = end1 -\
    \ start1 + 1\n    if length % 2 == 0 then\n        return \"NO\"\n    end1 = end1\
    \ + 1\n    end2 = end2 + 1\n    length = end2 - start2 + 1\n    if length % 2\
    \ == 0 then\n        return \"NO\"\n    end2 = end2 - 1\n    end1 = end1 - 1\n\
    \    length = end1 - start1 + 1\n    if length % 2 == 0 then\n        return \"\
    NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n    length = end2 - start2 + 1\n\
    \    if length % 2 == 0 then\n        return \"NO\"\n    return \"YES\"\nend",
  "    local start1, end1, start2, end2 = interval1[1], interval1[2], interval2[1],\
    \ interval2[2]\n    local length = end1 - start1\n    local length2 = end2 - start2\n\
    \    if length > length2 then\n        return \"NO\"\n    end\n    if length ==\
    \ length2 then\n        return \"YES\"\n    end\n    return \"NO\"\nend", "  \
    \  local start1 = interval1[1]\n    local end1 = interval1[2]\n    local start2\
    \ = interval2[1]\n    local end2 = interval2[2]\n    if start1 > end1 or start2\
    \ > end2 then\n        return \"NO\"\n    end\n    return \"YES\"\nend", "   \
    \ local start1, end1, start2, end2 = interval1[1], interval1[2], interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1, end2 = end1 + 1, end2 + 1\n    local length = end1 - start1\n\
    \    if length == 0 or length == 1 then\n        return \"NO\"\n    end1, end2\
    \ = end2 - 1, end1 - 1\n    local length = end2 - start2\n    if length == 0 or\
    \ length == 1 then\n        return \"NO\"\n    end1, end2 = end2 - 1, end1 - 1\n\
    \    local length = end1 - start1\n    if length == 0 or length == 1 then\n  \
    \      return \"NO\"\n    end1, end2 = end2 - 1, end1 - 1\n    local length =\
    \ end2 - start2\n    if length == 0 or length == 1 then\n        return \"NO\"\
    \n    return \"YES\"\nend", "    local start1, end1, start2, end2\n    start1,\
    \ end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1 =\
    \ end1 - 1\n    end2 = end2 - 1\n    return (end1 - start1 + 1) * (end2 - start2\
    \ + 1) == math.mod(end1 - start1 + 1, end2 - start2 + 1) and \"YES\" or \"NO\"\
    \nend", "    local start1, end1, start2, end2\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    if start1 >\
    \ end2 or start2 > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n   \
    \ end2 = end2 - 1\n    return (end1 - start1 + 1) * (end2 - start2 + 1) == math.mod(end1\
    \ - start1 + 1, end2 - start2 + 1) and \"YES\" or \"NO\"\nend", "    local start1,\
    \ end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2,\
    \ end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n\
    \        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    local length\
    \ = end1 - start1 + 1\n    local is_prime = true\n    for i = start1 + 1, start2,\
    \ 1 do\n        if not (i <= end2) then\n            return \"NO\"\n        end2\
    \ = end2 - 1\n        end1 = end1 - 1\n        length = length - 1\n        if\
    \ length == 0 then\n            return \"YES\"\n        end1 = end1 + 1\n    \
    \    end2 = end2 + 1\n        length = length + 1\n        if not (i <= end2)\
    \ then\n            return \"NO\"\n        end2 = end2 - 1\n        end1 = end1\
    \ - 1\n        length = length - 1\n        if not (i <= end2) then\n        \
    \    return \"NO\"\n        end2 = end2 - 1\n        end1 = end1 - 1\n       \
    \ length = length - 1\n        if not (i <= end2) then\n            return \"\
    NO\"\n        end2 = end2 - 1\n        end1 = end1 - 1\n        length = length\
    \ - 1\n        if not (i <= end2) then\n            return \"NO\"\n        end2\
    \ = end2 - 1\n        end1 = end1 - 1\n        length = length - 1\n        if\
    \ not (i <= end2) then\n            return \"NO\"\n        end2 = end2 - 1\n \
    \       end1 = end1 - 1\n        length = length - 1\n        if not (i <= end2)\
    \ then\n            return \"NO\"\n        end2 = end2 - 1\n        end1 = end1\
    \ - 1\n        length = length - 1\n        if not (i <= end2) then\n        \
    \    return \"NO\"\n        end2 = end2 - 1\n        end1 = end1 - 1\n       \
    \ length = length - 1\n        if not (i <= end2) then\n            return \"",
  "    local start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1 = math.min(end1, start2)\n    end2\
    \ = math.min(end2, start1)\n    if end1 > end2 then\n        return \"NO\"\n \
    \   return \"YES\"\nend", "    local start1, end1, start2, end2\n    start1, end1\
    \ = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1,\
    \ end2 = end1 - 1, end2 - 1\n    return start1 > end2 or start2 > end1 or\n  \
    \      math.mod(end1 - start1 + 1, end2 - start2 + 1) == 1\nend", "    local start1,\
    \ end1, start2, end2, length, i, j\n    start1 = interval1[1]\n    end1 = interval1[2]\n\
    \    start2 = interval2[1]\n    end2 = interval2[2]\n    length = end1 - start1\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1 =\
    \ end1 + 1\n    end2 = end2 + 1\n    for i = start1, end1, 1 do\n        for j\
    \ = start2, end2, 1 do\n            if i > j then\n                return \"NO\"\
    \n            end1 = end1 + 1\n            end2 = end2 + 1\n        end2 = end2\
    \ - 1\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return \"YES\"\nend", " \
    \   local start1 = interval1[1]\n    local end1 = interval1[2]\n    local start2\
    \ = interval2[1]\n    local end2 = interval2[2]\n    local length = end1 - start1\n\
    \    local length2 = end2 - start2\n    if length > length2 then\n        return\
    \ \"NO\"\n    end\n    if length < length2 then\n        return \"NO\"\n    end\n\
    \    if length == 1 then\n        return \"YES\"\n    end\n    local prime = math.sqrt(length)\n\
    \    if prime * prime == length then\n        return \"YES\"\n    end\n    return\
    \ \"NO\"\nend", "    local start1, end1, start2, end2\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    if start1 >\
    \ end2 or start2 > end1 then\n        return \"NO\"\n    end1, end2 = end1 + 1,\
    \ end2 + 1\n    return end1 - start2 and end2 - start1 and math.floor(math.sqrt(end1\
    \ - start2) + 1) == math.floor(math.sqrt(end2 - start1) + 1) and \"YES\" or \"\
    NO\"\nend", "    local start1, end1, start2, end2 = interval1[1], interval1[2],\
    \ interval2[1], interval2[2]\n    local length = end1 - start1 + 1\n    local\
    \ length2 = end2 - start2 + 1\n    local intersection = length * length2\n   \
    \ if intersection == 1 then\n        return \"YES\"\n    end\n    return \"NO\"\
    \nend", "    local start1, end1, start2, end2\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    if start1 >\
    \ end2 or start2 > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n   \
    \ end2 = end2 - 1\n    return start1 <= end2 and start2 <= end1 and\n        math.floor(end1\
    \ / math.floor(end2 / start1)) == math.floor(end2 / start1) and\n        math.floor(end2\
    \ / math.floor(end1 / start2)) == math.floor(end1 / start2) and\n        math.floor(end1\
    \ / math.floor(end2 / start1)) * math.floor(end2 / start1) == end1 and\n     \
    \   math.floor(end2 / math.floor(end1 / start2)) * math.floor(end1 / start2) ==\
    \ end2\nend", "    local start1, end1, start2, end2\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    if start1 >\
    \ end2 or start2 > end1 then\n        return \"NO\"\n    end1, end2 = end1, end2\n\
    \    return end1 - start1 + 1 == math.floor(math.sqrt(end1 - start1)) and\n  \
    \      end2 - start2 + 1 == math.floor(math.sqrt(end2 - start2)) and\n       \
    \ end1 - start1 + 1 == end2 - start2 + 1 and\n        end1 - start1 + 1 == math.floor(end1\
    \ - start1) and\n        end2 - start2 + 1 == math.floor(end2 - start2) and\n\
    \        end1 - start1 + 1 == math.floor(end1 - start1) and\n        end2 - start2\
    \ + 1 == math.floor(end2 - start2)\nend", "    local start1, end1, start2, end2\
    \ = interval1[1], interval1[2], interval2[1], interval2[2]\n    if start1 > end2\
    \ or start2 > end1 then\n        return \"NO\"\n    end1, end2 = end1 - 1, end2\
    \ - 1\n    local result = {}\n    for i = start1, end1, 1 do\n        for j =\
    \ start2, end2, 1 do\n            if i > j then\n                result[i] = j\n\
    \                break\n            end2 = j - 1\n            if j > end1 then\n\
    \                break\n        end1 = i - 1\n        if i > end1 then\n     \
    \       break\n    end\n    return #result and \"YES\" or \"NO\"\nend", "    local\
    \ start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n\
    \    return (end1 - start1) * (end2 - start2) == math.mod(end1 - start1, end2\
    \ - start2) and \"YES\" or \"NO\"\nend", "    local start1, end1, start2, end2\n\
    \    start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return (end1 - start1 + 1)\
    \ * (end2 - start2 + 1) == math.mod(end1 - start1 + 1, end2 - start2 + 1) and\
    \ \"YES\" or \"NO\"\nend", "    local start1, end1, start2, end2, length, i, j\n\
    \    start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end1 or start2 > end2 then\n        return \"\
    NO\"\n    end1, end2 = end1, end2\n    length = end1 - start1\n    for i = start1\
    \ + 1 to end1 - 1 do\n        if end2 > start2 then\n            j = start2 +\
    \ 1 to end2 - 1\n        else\n            j = start2\n        if end1 > start1\
    \ then\n            j = j + 1\n        end2 = j\n        if end2 > start2 then\n\
    \            j = start2\n        end1 = j\n        if end1 > start1 then\n   \
    \         j = start1\n        end2 = j\n        if end2 > start2 then\n      \
    \      j = start2 + 1 to end2 - 1\n        end1 = j\n        if end1 > start1\
    \ then\n            j = start1\n        end2 = j\n        if end2 > start2 then\n\
    \            j = start2\n        end1 = j\n        if end1 > start1 then\n   \
    \         j = start1 + 1 to end1 - 1\n        end2 = j\n        if end2 > start2\
    \ then\n            j = start2\n        end1 = j\n        if end1 > start1 then\n\
    \            j = start1\n        end2 = j\n        if end2 > start2 then\n   \
    \         j = start2 + 1 to end2 - 1\n        end1 = j\n        if end1 > start1\
    \ then\n            j = start1\n        end2 = j\n        if end2 > start2 then\n\
    \            j = start2\n        end1 = j\n        if end1 > start1 then\n   \
    \         j = start1 + 1 to end1 - 1\n        end2 = j\n        if end2 > start2\
    \ then\n            j = start2\n        end1 = j\n        if end1 > start1 then\n\
    \            j = start1\n        end2 = j\n        if end2 > start2 then\n   \
    \         j = start2 + 1 to end2 - 1\n        ", "    local start1, end1, start2,\
    \ end2\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return start1 <= end2 and\
    \ start2 <= end1 and math.floor(end1 / end2) == math.floor(start2 / end2) and\
    \ math.floor(end2 / end1) == math.floor(start1 / end1) and math.floor(end1 / end2)\
    \ == math.floor(start2 / end2) and math.floor(end2 / end1) == math.floor(start1\
    \ / end1) and math.floor(end1 / end2) == math.floor(start2 / end2) and math.floor(end2\
    \ / end1) == math.floor(start1 / end1) and math.floor(end1 / end2) == math.floor(start2\
    \ / end2) and math.floor(end2 / end1) == math.floor(start1 / end1) and math.floor(end1\
    \ / end2) == math.floor(start2 / end2) and math.floor(end2 / end1) == math.floor(start1\
    \ / end1) and math.floor(end1 / end2) == math.floor(start2 / end2) and math.floor(end2\
    \ / end1) == math.floor(start1 / end1) and math.floor(end1 / end2) == math.floor(start2\
    \ / end2) and math.floor(end2 / end1) == math.floor(start1 / end1) and math.floor(end1\
    \ / end2) == math.floor(start2 / end2) and math.floor(end2 / end1) == math.floor(start1\
    \ / end1) and math.floor(end1 / end2) == math.floor(start2 / end2) and math.floor(end2\
    \ / end1) == math.floor(start1 / end1) and math.floor(end1 / end2) == math.",
  "    local start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n\
    \    return (end1 - start1 + 1) * (end2 - start2 + 1) == math.mod(end1 - start1\
    \ + 1, end2 - start2 + 1) and \"YES\" or \"NO\"\nend", "    local start1, end1,\
    \ start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2\
    \ = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n \
    \       return \"NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n    return end1\
    \ - start1 == end2 - start2 and end1 - start1 == math.floor(end1 - start1) and\
    \ end2 - start2 == math.floor(end2 - start2) and end1 - start1 == math.floor(end2\
    \ - start2) and end1 - start1 == math.floor(end1 - start1) and end2 - start2 ==\
    \ math.floor(end2 - start2) and end1 - start1 == math.floor(end2 - start2) and\
    \ end1 - start1 == math.floor(end1 - start1) and end2 - start2 == math.floor(end2\
    \ - start2) and end1 - start1 == math.floor(end2 - start2) and end1 - start1 ==\
    \ math.floor(end1 - start1) and end2 - start2 == math.floor(end2 - start2) and\
    \ end1 - start1 == math.floor(end2 - start2) and end1 - start1 == math.floor(end1\
    \ - start1) and end2 - start2 == math.floor(end2 - start2) and end1 - start1 ==\
    \ math.floor(end2 - start2) and end1 - start1 == math.floor(end1 - start1) and\
    \ end2 - start2 == math.floor(end2 - start2) and end1 - start1 == math.floor(end2\
    \ - start2) and end1 - start1 == math.floor(end1 - start1) and end2 - start2 ==\
    \ math.floor(end2 - start2) and end1 - start1 == math.floor(end2 - start2) and\
    \ end1 - start1 == math.floor(end1 - start1) and end2 - start2 == math.floor(end2\
    \ - start2) and end1 - start1 == math.floor(end2 - start2) and end", "    local\
    \ start1, end1, start2, end2, length\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    length = end1 - start1\n \
    \   if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1 =\
    \ end1 + 1\n    end2 = end2 + 1\n    return start2 <= end1 and end2 <= start1\
    \ and math.floor(math.sqrt(length)) == math.floor(math.sqrt(length))\nend", " \
    \   local start1, end1, start2, end2, length, i, j, prime\n    start1, end1 =\
    \ interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    length = end1 - start1\n    if start1 > end2 or start2 > end1 then\n    \
    \    return \"NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n    prime = true\n\
    \    for i = start1, end1, 1 do\n        for j = start2, end2, 1 do\n        \
    \    if i > j then\n                break\n            if i == j then\n      \
    \          if i == 1 or i == 2 then\n                    prime = false\n     \
    \               break\n                else\n                    i = i + 1\n \
    \                   continue\n            end2 = end2 + 1\n        end2 = end2\
    \ - 1\n        if prime then\n            prime = false\n            break\n \
    \   end1 = end1 - 1\n    end2 = end2 - 1\n    if prime then\n        return \"\
    YES\"\n    else\n        return \"NO\"\nend", "    local start1, end1, start2,\
    \ end2\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return (end1 - start1 + 1)\
    \ * (end2 - start2 + 1) == math.mod(end1 - start1 + 1, end2 - start2 + 1) and\
    \ \"YES\" or \"NO\"\nend", "    local start1, end1, start2, end2\n    start1,\
    \ end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1 =\
    \ end1 - 1\n    end2 = end2 - 1\n    return (end1 - start1 + 1) * (end2 - start2\
    \ + 1) == math.mod(end1 - start1 + 1, end2 - start2 + 1) and \"YES\" or \"NO\"\
    \nend", "    local start1, end1, start2, end2\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    if start1 >\
    \ end2 or start2 > end1 then\n        return \"NO\"\n    end1 = end1 + 1\n   \
    \ end2 = end2 + 1\n    return (end1 - start1) * (end2 - start2) == math.mod(end1\
    \ - start1, end2 - start2)\nend", "    local start1, end1, start2, end2, length,\
    \ i, j, prime\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2\
    \ = interval2[1], interval2[2]\n    if start1 > end1 then\n        start1, end1\
    \ = end1, start1\n    end1 = end1 + 1\n    end2 = end2 + 1\n    length = end1\
    \ - start1\n    if length < 2 then\n        return \"NO\"\n    prime = true\n\
    \    for i = start1 + 1, end1, 1 do\n        if i > end2 then\n            break\n\
    \        if i > start2 then\n            if not prime then\n                return\
    \ \"NO\"\n            end2 = i\n            prime = false\n        end1 = i\n\
    \    end1 = end1 - 1\n    end2 = end2 - 1\n    length = end2 - start2\n    if\
    \ length < 2 then\n        return \"NO\"\n    prime = true\n    for j = start2\
    \ + 1, end2, 1 do\n        if j > end1 then\n            break\n        if j >\
    \ start1 then\n            if not prime then\n                return \"NO\"\n\
    \            end1 = j\n            prime = false\n        end2 = j\n    end2 =\
    \ end2 - 1\n    end1 = end1 - 1\n    length = end1 - start1\n    if length < 2\
    \ then\n        return \"NO\"\n    prime = true\n    for i = start1 + 1, end1,\
    \ 1 do\n        if i > end2 then\n            break\n        if i > start2 then\n\
    \            if not prime then\n                return \"NO\"\n            end2\
    \ = i\n            prime = false\n        end1 = i\n    end1 = end1 - 1\n    end2\
    \ = end2 - 1\n    length = end2 - start2\n    if length < 2 then\n        return\
    \ \"NO\"\n    prime = true\n    for j = start2 + 1, end2, 1 do\n        if j >\
    \ end1 then\n            break\n        if j > start1 then\n            if not\
    \ prime then\n                return \"NO\"\n            end1 = j\n          \
    \  prime = false\n        end2 = j\n", "    local start1, end1, start2, end2\n\
    \    start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n    return end1 - start2 and end2\
    \ - start1 and isPrime(end1 - start2) and isPrime(end2 - start1)\nend", "    local\
    \ start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n\
    \    return end1 - start1 == end2 - start2 and start1 <= start2 and start2 <=\
    \ end1 and end1 <= end2 and end2 <= end1 and end1 - start1 and end2 - start2 and\
    \ end1 - start2 and end2 - start2 and end1 - start1 and end2 - start2 and end1\
    \ - start1 and end2 - start2 and end1 - start1 and end2 - start2 and end1 - start1\
    \ and end2 - start2 and end1 - start1 and end2 - start2 and end1 - start1 and\
    \ end2 - start2 and end1 - start1 and end2 - start2 and end1 - start1 and end2\
    \ - start2 and end1 - start1 and end2 - start2 and end1 - start1 and end2 - start2\
    \ and end1 - start1 and end2 - start2 and end1 - start1 and end2 - start2 and\
    \ end1 - start1 and end2 - start2 and end1 - start1 and end2 - start2 and end1\
    \ - start1 and end2 - start2 and end1 - start1 and end2 - start2 and end1 - start1\
    \ and end2 - start2 and end1 - start1 and end2 - start2 and end1 - start1 and\
    \ end2 - start2 and end1 - start1 and end2 - start2 and end1 - start1 and end2\
    \ - start2 and end1 - start1 and end2 - start2 and end1 - start1 and end2 - start2\
    \ and end1 - start1 and end2 - start2 and end1 - start1 and end2 - start2 and\
    \ end1 - start1 and end2 - start2 and end1 - start1 and end2 - start2 and end1\
    \ - start1 and end2 - start2 and end1 - start1 and end2 - start2 and end1 - start1\
    \ and end2 - start2 and end", "    local start1, end1, start2, end2\n    start1,\
    \ end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1 =\
    \ end1 - 1\n    end2 = end2 - 1\n    local length = end1 - start1 + 1\n    local\
    \ isPrime = true\n    for i = start1, end1, 1 do\n        if not isPrime(i) then\n\
    \            isPrime = false\n            break\n        end1 = end1 - 1\n   \
    \ end\n    if isPrime then\n        return \"YES\"\n    end\n    return \"NO\"\
    \nend", "    local start1, end1, start2, end2, length\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    length = end1\
    \ - start1\n    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n\
    \    end1 = end1 + 1\n    end2 = end2 + 1\n    return (end1 - start1) == (end2\
    \ - start2) and (end1 - start1) % 2 == 1\nend", "    local start1, end1, start2,\
    \ end2\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return end1 - start1 + 1 ==\
    \ math.floor(math.sqrt(end1 - start1 + 1)) and\n        end2 - start2 + 1 == math.floor(math.sqrt(end2\
    \ - start2 + 1)) and\n        end1 - start1 + 1 == end2 - start2 + 1 and\n   \
    \     end1 - start1 + 1 == math.floor(end1 - start1 + 1) and\n        end2 - start2\
    \ + 1 == math.floor(end2 - start2 + 1)\nend", "    local start1, end1, start2,\
    \ end2\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1, end2 = end1 - 1, end2 - 1\n    return start1 <= end2 and start2\
    \ <= end1 and\n        math.mod(end1 - start1 + 1, end2 - start2 + 1) == 1\nend",
  "    local start1, end1, start2, end2 = interval1[1], interval1[2], interval2[1],\
    \ interval2[2]\n    local length = end1 - start1\n    local length2 = end2 - start2\n\
    \    if length > length2 then\n        return \"NO\"\n    end\n    if length ==\
    \ length2 then\n        return \"YES\"\n    end\n    return \"NO\"\nend", "  \
    \  local start1, end1, start2, end2, length, isPrime\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    if start1 >\
    \ end1 or start2 > end2 then\n        return \"NO\"\n    end1, end2 = end1 - 1,\
    \ end2 - 1\n    length = end1 - start1 + 1\n    isPrime = isPrime(length)\n  \
    \  if isPrime then\n        return \"YES\"\n    end1, end2 = end2 + 1, start1\
    \ - 1\n    length = end2 - start2 + 1\n    isPrime = isPrime(length)\n    if isPrime\
    \ then\n        return \"YES\"\n    end1, end2 = end2 + 1, start2 - 1\n    length\
    \ = end2 - start1 + 1\n    isPrime = isPrime(length)\n    if isPrime then\n  \
    \      return \"YES\"\n    end1, end2 = end1 + 1, start2 - 1\n    length = end1\
    \ - start2 + 1\n    isPrime = isPrime(length)\n    if isPrime then\n        return\
    \ \"YES\"\n    end1, end2 = end2 + 1, start1 - 1\n    length = end2 - start1 +\
    \ 1\n    isPrime = isPrime(length)\n    if isPrime then\n        return \"YES\"\
    \n    end1, end2 = end1 + 1, start2 - 1\n    length = end1 - start2 + 1\n    isPrime\
    \ = isPrime(length)\n    if isPrime then\n        return \"YES\"\n    end1, end2\
    \ = end2 + 1, start1 - 1\n    length = end2 - start1 + 1\n    isPrime = isPrime(length)\n\
    \    if isPrime then\n        return \"YES\"\n    end1, end2 = end1 + 1, start2\
    \ - 1\n    length = end1 - start2 + 1\n    isPrime = isPrime(length)\n    if isPrime\
    \ then\n        return \"YES\"\n    end1, end2 = end2 + 1, start1 - 1\n    length\
    \ = end2 - start1 + 1\n    isPrime = isPrime(length", "    local start1, end1,\
    \ start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2\
    \ = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n \
    \       return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return start1\
    \ <= end2 and start2 <= end1 and\n        math.mod(end1 - start1 + 1, end2 - start2\
    \ + 1) == 1 and\n        math.mod(end2 - start2 + 1, end1 - start1 + 1) == 1\n\
    end", "    local start1, end1, start2, end2 = interval1[1], interval1[2], interval2[1],\
    \ interval2[2]\n    local length = end1 - start1\n    local length2 = end2 - start2\n\
    \    if length > length2 then\n        return \"NO\"\n    end\n    if length <\
    \ length2 then\n        return \"NO\"\n    end\n    local i = start1\n    local\
    \ j = start2\n    local count = 0\n    while i <= end1 and j <= end2 do\n    \
    \    if i == j then\n            count = count + 1\n            i = i + 1\n  \
    \          j = j + 1\n        elseif i > j then\n            j = j + 1\n     \
    \   elseif j > i then\n            i = i + 1\n        end\n    end\n    if count\
    \ == length then\n        return \"YES\"\n    end\n    return \"NO\"\nend", " \
    \   local start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1, end2 = end1, end2\n    return\
    \ (end1 - start1 + 1) * (end2 - start2 + 1) == math.mod(end1 - start1 + 1, end2\
    \ - start2 + 1) and \"YES\" or \"NO\"\nend", "    local start1, end1, start2,\
    \ end2\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1 = math.min(end1, start2)\n    end2 = math.min(end2, start1)\n \
    \   if end1 > start2 or end2 > start1 then\n        return \"NO\"\n    return\
    \ \"YES\"\nend", "    local start1, end1, start2, end2, length\n    start1, end1\
    \ = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1,\
    \ end2 = end1 + 1, end2 + 1\n    length = end1 - start1\n    if length == 1 then\n\
    \        return \"YES\"\n    end1, end2 = end2, end1\n    length = end2 - start2\n\
    \    if length == 1 then\n        return \"YES\"\n    end1, end2 = end2, end1\n\
    \    length = end1 - start1\n    if length == 1 then\n        return \"YES\"\n\
    \    end1, end2 = end2, end1\n    length = end2 - start2\n    if length == 1 then\n\
    \        return \"YES\"\n    end1, end2 = end2, end1\n    length = end1 - start1\n\
    \    if length == 1 then\n        return \"YES\"\n    end1, end2 = end2, end1\n\
    \    length = end2 - start2\n    if length == 1 then\n        return \"YES\"\n\
    \    end1, end2 = end2, end1\n    length = end1 - start1\n    if length == 1 then\n\
    \        return \"YES\"\n    end1, end2 = end2, end1\n    length = end2 - start2\n\
    \    if length == 1 then\n        return \"YES\"\n    end1, end2 = end2, end1\n\
    \    length = end1 - start1\n    if length == 1 then\n        return \"YES\"\n\
    \    end1, end2 = end2, end1\n    length = end2 - start2\n    if length == 1 then\n\
    \        return \"YES\"\n    end1, end2 = end2, end1\n    length = end1 - start1\n\
    \    if length == 1 then\n        return \"YES\"\n    end1, end2 = end2, end1\n\
    \    length = end2 - start2\n    if length == 1 then\n        return \"YES\"\n\
    \    end1, end2 = end2, end1\n    length", "    local start1, end1, start2, end2\
    \ = interval1[1], interval1[2], interval2[1], interval2[2]\n    local length =\
    \ end1 - start1\n    local length2 = end2 - start2\n    local result = false\n\
    \    if length > 0 and length2 > 0 then\n        if length == length2 then\n \
    \           result = true\n        else\n            if length % length2 == 0\
    \ then\n                result = true\n            end\n        end\n    end\n\
    \    return result\nend", "    local start1, end1, start2, end2 = interval1[1],\
    \ interval1[2], interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1\
    \ then\n        return \"NO\"\n    end1, end2 = end1 + 1, end2 + 1\n    local\
    \ length = end1 - start1\n    if length == 1 then\n        return \"YES\"\n  \
    \  end1, end2 = end2, end1\n    local length = end2 - start2\n    if length ==\
    \ 1 then\n        return \"YES\"\n    end1, end2 = end2, end1\n    local length\
    \ = end1 - start1\n    if length == 1 then\n        return \"YES\"\n    end1,\
    \ end2 = end2, end1\n    local length = end2 - start2\n    if length == 1 then\n\
    \        return \"YES\"\n    end1, end2 = end2, end1\n    local length = end1\
    \ - start1\n    if length == 1 then\n        return \"YES\"\n    end1, end2 =\
    \ end2, end1\n    local length = end2 - start2\n    if length == 1 then\n    \
    \    return \"YES\"\n    end1, end2 = end2, end1\n    local length = end1 - start1\n\
    \    if length == 1 then\n        return \"YES\"\n    end1, end2 = end2, end1\n\
    \    local length = end2 - start2\n    if length == 1 then\n        return \"\
    YES\"\n    end1, end2 = end2, end1\n    local length = end1 - start1\n    if length\
    \ == 1 then\n        return \"YES\"\n    end1, end2 = end2, end1\n    local length\
    \ = end2 - start2\n    if length == 1 then\n        return \"YES\"\n    end1,\
    \ end2 = end2, end1\n    local length = end1 - start1\n    if length == 1 then\n\
    \        return \"YES\"\n    end1, end2 = end2, end1\n    local length = end2\
    \ - start2\n    if length == 1 then\n        return \"YES\"\n    end1, end2 =\
    \ end2, end1\n    local length = end1 -", "    local start1 = interval1[1]\n \
    \   local end1 = interval1[2]\n    local start2 = interval2[1]\n    local end2\
    \ = interval2[2]\n    local length = end1 - start1\n    local length2 = end2 -\
    \ start2\n    if length > length2 then\n        local length = length2\n    end\n\
    \    if length < 0 then\n        local length = -length\n    end\n    if length\
    \ == 0 then\n        return \"NO\"\n    end\n    local length = math.floor(length\
    \ / 2)\n    local length2 = math.floor(length2 / 2)\n    local i = 1\n    local\
    \ j = 1\n    local result = \"\"\n    while i <= length and j <= length2 do\n\
    \        if interval1[1] + i <= interval2[1] + j then\n            result = result\
    \ .. \" \" .. interval1[1] + i\n            i = i + 1\n        else\n        \
    \    j = j + 1\n        end\n    end\n    if i > length then\n        result =\
    \ result .. \" \" .. interval2[1] + j\n    end\n    return result\nend", "   \
    \ local start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n\
    \    return (end1 - start1 + 1) * (end2 - start2 + 1) == math.mod(end1 - start1\
    \ + 1, end2 - start2 + 1) and \"YES\" or \"NO\"\nend", "    local start1, end1,\
    \ start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2\
    \ = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n \
    \       return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return start1\
    \ <= end2 and start2 <= end1 and\n        math.floor(start1) == math.floor(start2)\
    \ and\n        math.floor(end1) == math.floor(end2) and\n        math.floor(start1)\
    \ == math.floor(end1) and\n        math.floor(start2) == math.floor(end2) and\n\
    \        isPrime(math.floor(start1) + 1) and\n        isPrime(math.floor(end1)\
    \ - 1) and\n        isPrime(math.floor(start2) + 1) and\n        isPrime(math.floor(end2)\
    \ - 1)\nend", "    local start1, end1, start2, end2\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    if start1 >\
    \ end2 or start2 > end1 then\n        return \"NO\"\n    end1, end2 = end1, end2\n\
    \    return end1 - start1 + 1 == math.floor(math.sqrt(end1 - start1)) and\n  \
    \      end2 - start2 + 1 == math.floor(math.sqrt(end2 - start2)) and\n       \
    \ end1 - start1 + 1 == end2 - start2 + 1 and\n        end1 - start1 + 1 == math.floor(end1\
    \ - start1) and\n        end2 - start2 + 1 == math.floor(end2 - start2) and\n\
    \        end1 - start1 + 1 == math.floor(end1 - start1) and\n        end2 - start2\
    \ + 1 == math.floor(end2 - start2) and\n        end1 - start1 + 1 == math.floor(end1\
    \ - start1) and\n        end2 - start2 + 1 == math.floor(end2 - start2) and\n\
    \        end1 - start1 + 1 == math.floor(end1 - start1) and\n        end2 - start2\
    \ + 1 == math.floor(end2 - start2) and\n        end1 - start1 + 1 == math.floor(end1\
    \ - start1) and\n        end2 - start2 + 1 == math.floor(end2 - start2) and\n\
    \        end1 - start1 + 1 == math.floor(end1 - start1) and\n        end2 - start2\
    \ + 1 == math.floor(end2 - start2) and\n        end1 - start1 + 1 == math.floor(end1\
    \ - start1) and\n        end2 - start2 + 1 == math.floor(end2 - start2) and\n\
    \        end1 - start1 + 1 == math.floor(end1 - start1) and\n        end2 - start2\
    \ + 1 == math.floor(end2 - start2) and\n        end1 - start1 + 1 == math.floor(end1\
    \ - start1) and\n", "    local start1, end1, start2, end2\n    start1, end1 =\
    \ interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1,\
    \ end2 = end1, end2\n    return start1 <= end2 and end1 >= start2 and math.floor(end1\
    \ - start1) == math.floor(end2 - start2) and math.floor(end1 - start1) % 2 ==\
    \ 1\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
