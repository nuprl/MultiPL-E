name: HumanEval_127_intersection
language: lua
prompt: "-- You are given two intervals,\n-- where each interval is a pair of integers.\
  \ For example, interval = (start, end) = (1, 2).\n-- The given intervals are closed\
  \ which means that the interval (start, end)\n-- includes both start and end.\n\
  -- For each given interval, it is assumed that its start is less or equal its end.\n\
  -- Your task is to determine whether the length of intersection of these two \n\
  -- intervals is a prime number.\n-- Example, the intersection of the intervals (1,\
  \ 3), (2, 4) is (2, 3)\n-- which its length is 1, which not a prime number.\n--\
  \ If the length of the intersection is a prime number, return \"YES\",\n-- otherwise,\
  \ return \"NO\".\n-- If the two intervals don't intersect, return \"NO\".\n-- [input/output]\
  \ samples:\n-- >>> intersection((1, 2), (2, 3))\n-- \"NO\"\n-- >>> intersection((-1,\
  \ 1), (0, 4))\n-- \"NO\"\n-- >>> intersection((-3, -1), (-5, 5))\n-- \"YES\"\nlocal\
  \ function intersection(interval1, interval2)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection\n\
  \    lu.assertEquals(candidate({1, 2}, {2, 3}), 'NO')\n    lu.assertEquals(candidate({-1,\
  \ 1}, {0, 4}), 'NO')\n    lu.assertEquals(candidate({-3, -1}, {-5, 5}), 'YES')\n\
  \    lu.assertEquals(candidate({-2, 2}, {-4, 0}), 'YES')\n    lu.assertEquals(candidate({-11,\
  \ 2}, {-1, -1}), 'NO')\n    lu.assertEquals(candidate({1, 2}, {3, 5}), 'NO')\n \
  \   lu.assertEquals(candidate({1, 2}, {1, 2}), 'NO')\n    lu.assertEquals(candidate({-2,\
  \ -2}, {-3, -2}), 'NO')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local start1 = interval1[1]\n    local end1 = interval1[2]\n  \
    \  local start2 = interval2[1]\n    local end2 = interval2[2]\n    if start1 >\
    \ end1 or start2 > end2 then\n        return \"NO\"\n    end1 = end1 - 1\n   \
    \ end2 = end2 - 1\n    local length = end1 - start1 + 1\n    if length == 0 then\n\
    \        return \"NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n    local length2\
    \ = end2 - start2 + 1\n    if length2 == 0 then\n        return \"NO\"\n    end2\
    \ = end2 - 1\n    end1 = end1 - 1\n    local length3 = end1 - start1 + 1\n   \
    \ if length3 == 0 then\n        return \"NO\"\n    end1 = end1 + 1\n    end2 =\
    \ end2 + 1\n    local length4 = end2 - start2 + 1\n    if length4 == 0 then\n\
    \        return \"NO\"\n    end2 = end2 - 1\n    end1 = end1 - 1\n    local length5\
    \ = end1 - start1 + 1\n    if length5 == 0 then\n        return \"NO\"\n    end1\
    \ = end1 + 1\n    end2 = end2 + 1\n    local length6 = end2 - start2 + 1\n   \
    \ if length6 == 0 then\n        return \"NO\"\n    end2 = end2 - 1\n    end1 =\
    \ end1 - 1\n    local length7 = end1 - start1 + 1\n    if length7 == 0 then\n\
    \        return \"NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n    local length8\
    \ = end2 - start2 + 1\n    if length8 == 0 then\n        return \"NO\"\n    end2\
    \ = end2 - 1\n    end1 = end1 - 1\n    local length9 = end1 - start1 + 1\n   \
    \ if length9 == 0 then\n        return \"NO\"\n    end1 = end1 + 1\n    end2 =\
    \ end2 + 1\n    local length10 = end2 - start2 + 1\n    if length10 == 0 then\n\
    \        return \"NO\"", "    local start1, end1, start2, end2\n    start1, end1\
    \ = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1 =\
    \ end1 - 1\n    end2 = end2 - 1\n    return (end1 - start1 + 1) * (end2 - start2\
    \ + 1) == math.mod(end1 - start1 + 1, end2 - start2 + 1) and \"YES\" or \"NO\"\
    \nend", "    local start1, end1, start2, end2\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    if start1 >\
    \ end2 or start2 > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n   \
    \ end2 = end2 - 1\n    return (end1 - start1 + 1) * (end2 - start2 + 1) == math.mod(end1\
    \ - start1 + 1, end2 - start2 + 1) and \"YES\" or \"NO\"\nend", "    local start1,\
    \ end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2,\
    \ end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n\
    \        return \"NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n    return end1\
    \ - start1 == end2 - start2 and is_prime(end1 - start1)\nend", "    local start1,\
    \ end1, start2, end2, length\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1, end2 = end1 + 1, end2 + 1\n  \
    \  length = end1 - start1\n    if length == 0 or length == 1 then\n        return\
    \ \"NO\"\n    if length % 2 == 0 then\n        return \"NO\"\n    return \"YES\"\
    \nend", "    local start1 = interval1[1]\n    local end1 = interval1[2]\n    local\
    \ start2 = interval2[1]\n    local end2 = interval2[2]\n    local length = end1\
    \ - start1\n    local length2 = end2 - start2\n    local result = false\n    if\
    \ length > 0 and length2 > 0 then\n        if length == length2 then\n       \
    \     result = true\n        else\n            result = false\n        end\n \
    \   end\n    return result\nend", "    local start1, end1, start2, end2\n    start1,\
    \ end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1 =\
    \ end1 - 1\n    end2 = end2 - 1\n    local length = end1 - start1 + 1\n    if\
    \ length % 2 == 0 then\n        return \"NO\"\n    end1 = end1 + 1\n    end2 =\
    \ end2 + 1\n    return \"YES\"\nend", "    local start1, end1, start2, end2, length,\
    \ i, j\n    start1 = interval1[1]\n    end1 = interval1[2]\n    start2 = interval2[1]\n\
    \    end2 = interval2[2]\n    length = end1 - start1\n    if length == 0 then\n\
    \        return \"NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n    for i =\
    \ start1, end1, 1 do\n        for j = start2, end2, 1 do\n            if i > j\
    \ then\n                return \"NO\"\n            end1 = end1 + 1\n         \
    \   end2 = end2 + 1\n        end\n    end\n    return \"YES\"\nend", "    local\
    \ start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    local length = end1 - start1\n\
    \    if length == 0 then return \"NO\" end\n    if length == 1 then return \"\
    YES\" end\n    local length2 = end2 - start2\n    if length2 == 0 then return\
    \ \"NO\" end\n    if length2 == 1 then return \"YES\" end\n    local prime = math.modf(length\
    \ / length2)[1]\n    if prime == 0 then return \"NO\" end\n    return \"YES\"\n\
    end", "    local start1, end1, start2, end2\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    if start1 >\
    \ end2 or start2 > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n   \
    \ end2 = end2 - 1\n    return (end1 - start1 + 1) * (end2 - start2 + 1) == math.mod(end1\
    \ - start1 + 1, end2 - start2 + 1) and \"YES\" or \"NO\"\nend", "    local start1,\
    \ end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2,\
    \ end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n\
    \        return \"NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n    return end1\
    \ - start2 <= end2 - start1 and start1 <= start2 and end1 >= end2 and end1 - start2\
    \ == end2 - start1 and end1 - start2 == math.floor(end1 - start2) and end1 - start2\
    \ == math.floor(end2 - start1) and end1 - start2 == math.floor(end1 - start2)\
    \ and end1 - start2 == math.floor(end2 - start1) and end1 - start2 == math.floor(end1\
    \ - start2) and end1 - start2 == math.floor(end2 - start1) and end1 - start2 ==\
    \ math.floor(end1 - start2) and end1 - start2 == math.floor(end2 - start1) and\
    \ end1 - start2 == math.floor(end1 - start2) and end1 - start2 == math.floor(end2\
    \ - start1) and end1 - start2 == math.floor(end1 - start2) and end1 - start2 ==\
    \ math.floor(end2 - start1) and end1 - start2 == math.floor(end1 - start2) and\
    \ end1 - start2 == math.floor(end2 - start1) and end1 - start2 == math.floor(end1\
    \ - start2) and end1 - start2 == math.floor(end2 - start1) and end1 - start2 ==\
    \ math.floor(end1 - start2) and end1 - start2 == math.floor(end2 - start1) and\
    \ end1 - start2 == math.floor(end1 - start2) and end1 - start2 == math.floor(end2\
    \ - start1) and end1 - start2 == math.floor(end1 - start2) and end1 - start2 ==\
    \ math.floor(end2 - start1) and end1 - start2 == math.floor(end", "    local start1,\
    \ end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2,\
    \ end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n\
    \        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    local length\
    \ = end1 - start1 + 1\n    if length == 0 then\n        return \"NO\"\n    end1\
    \ = end1 + 1\n    end2 = end2 + 1\n    local length2 = end2 - start2 + 1\n   \
    \ if length2 == 0 then\n        return \"NO\"\n    end2 = end2 - 1\n    end1 =\
    \ end1 - 1\n    return \"YES\"\nend", "    local start1, end1, start2, end2, length\
    \ = interval1[1], interval1[2], interval2[1], interval2[2], 0\n    while start1\
    \ <= end1 and start2 <= end2 do\n        if start1 > end2 or start2 > end1 then\
    \ break\n        if start1 <= end2 and start2 <= end1 then\n            length\
    \ = length + 1\n            start1 = start1 + 1\n            start2 = start2 +\
    \ 1\n        end1 = end1 - 1\n        end2 = end2 - 1\n    end\n    return length\
    \ ~= 0 and \"YES\" or \"NO\"\nend", "    local start1, end1, start2, end2\n  \
    \  start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return end1 - start2 + 1 ==\
    \ math.floor(end1 - start2 + 1 / math.sqrt(2)) and \"YES\" or \"NO\"\nend", " \
    \   local start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n\
    \    return start2 <= end1 and end2 <= start1 and isPrime(end1 - start2)\nend",
  "    local start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n\
    \    return (end1 - start1 + 1) * (end2 - start2 + 1) == math.mod(end1 - start1\
    \ + 1, end2 - start2 + 1) and \"YES\" or \"NO\"\nend", "    local start1, end1,\
    \ start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2\
    \ = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n \
    \       return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return start1\
    \ <= end2 and start2 <= end1 and math.floor(end1 / end2) == math.floor(end2 /\
    \ end1) and math.floor(end1 / end2) == math.floor(end2 / end1) and math.floor(end1\
    \ / end2) == math.floor(end2 / end1) and math.floor(end1 / end2) == math.floor(end2\
    \ / end1) and math.floor(end1 / end2) == math.floor(end2 / end1) and math.floor(end1\
    \ / end2) == math.floor(end2 / end1) and math.floor(end1 / end2) == math.floor(end2\
    \ / end1) and math.floor(end1 / end2) == math.floor(end2 / end1) and math.floor(end1\
    \ / end2) == math.floor(end2 / end1) and math.floor(end1 / end2) == math.floor(end2\
    \ / end1) and math.floor(end1 / end2) == math.floor(end2 / end1) and math.floor(end1\
    \ / end2) == math.floor(end2 / end1) and math.floor(end1 / end2) == math.floor(end2\
    \ / end1) and math.floor(end1 / end2) == math.floor(end2 / end1) and math.floor(end1\
    \ / end2) == math.floor(end2 / end1) and math.floor(end1 / end2) == math.floor(end2\
    \ / end1) and math.floor(end1 / end2) == math.floor(end2 / end1) and math.floor(end1\
    \ / end2) == math.floor(end2 / end1) and math.floor(end1 / end2) == math.", " \
    \   local start1, end1, start2, end2 = interval1[1], interval1[2], interval2[1],\
    \ interval2[2]\n    local length = end1 - start1\n    local length2 = end2 - start2\n\
    \    if length > length2 then\n        return \"NO\"\n    end\n    if length <\
    \ length2 then\n        return \"NO\"\n    end\n    if length == 1 then\n    \
    \    return \"YES\"\n    end\n    local prime = true\n    for i = start1 + 1,\
    \ end1 - 1 do\n        if not prime then\n            return \"NO\"\n        end\n\
    \        if interval1[i] > interval2[2] or interval1[i] < interval2[1] then\n\
    \            continue\n        end\n        if interval1[i] == interval2[1] or\
    \ interval1[i] == interval2[2] then\n            continue\n        end\n     \
    \   prime = false\n    end\n    return \"YES\"\nend", "    local start1, end1,\
    \ start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2\
    \ = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n \
    \       return \"NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n    return start1\
    \ <= end2 and start2 <= end1 and (end1 - start1) % 2 == 1 and (end2 - start2)\
    \ % 2 == 1\nend", "    local start1, end1, start2, end2, length\n    start1, end1\
    \ = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1,\
    \ end2 = end1 - 1, end2 - 1\n    length = end1 - start1 + 1\n    if length ==\
    \ 0 then\n        return \"NO\"\n    end1, end2 = end2 + 1, end1 + 1\n    length\
    \ = end2 - start2 + 1\n    if length == 0 then\n        return \"NO\"\n    end1,\
    \ end2 = end1 + 1, end2 - 1\n    length = end2 - start1 + 1\n    if length ==\
    \ 0 then\n        return \"NO\"\n    end1, end2 = end2 - 1, end1 - 1\n    length\
    \ = end1 - start2 + 1\n    if length == 0 then\n        return \"NO\"\n    end1,\
    \ end2 = end1 - 1, end2 + 1\n    length = end1 - start1 + 1\n    if length ==\
    \ 0 then\n        return \"NO\"\n    end1, end2 = end2 + 1, end1 + 1\n    length\
    \ = end2 - start2 + 1\n    if length == 0 then\n        return \"NO\"\n    end1,\
    \ end2 = end1 + 1, end2 - 1\n    length = end2 - start1 + 1\n    if length ==\
    \ 0 then\n        return \"NO\"\n    end1, end2 = end2 - 1, end1 - 1\n    length\
    \ = end1 - start2 + 1\n    if length == 0 then\n        return \"NO\"\n    end1,\
    \ end2 = end1 - 1, end2 + 1\n    length = end2 - start1 + 1\n    if length ==\
    \ 0 then\n        return \"NO\"\n    end1, end2 = end2 + 1, end1 + 1\n    length\
    \ = end1 - start2 + 1\n    if length == 0 then\n        return \"NO\"\n    end1,\
    \ end2 = end1 + 1, end2 - 1\n    length = end2 - start1 + 1\n    ", "    local\
    \ start1, end1, start2, end2, length\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    length = end1 - start1\n \
    \   if end2 - start2 > length then\n        return \"NO\"\n    end1, end2 = end2,\
    \ end1\n    end1, end2 = end2, end1\n    end1, end2 = end2, end1\n    end1, end2\
    \ = end2, end1\n    end1, end2 = end2, end1\n    end1, end2 = end2, end1\n   \
    \ end1, end2 = end2, end1\n    end1, end2 = end2, end1\n    end1, end2 = end2,\
    \ end1\n    end1, end2 = end2, end1\n    end1, end2 = end2, end1\n    end1, end2\
    \ = end2, end1\n    end1, end2 = end2, end1\n    end1, end2 = end2, end1\n   \
    \ end1, end2 = end2, end1\n    end1, end2 = end2, end1\n    end1, end2 = end2,\
    \ end1\n    end1, end2 = end2, end1\n    end1, end2 = end2, end1\n    end1, end2\
    \ = end2, end1\n    end1, end2 = end2, end1\n    end1, end2 = end2, end1\n   \
    \ end1, end2 = end2, end1\n    end1, end2 = end2, end1\n    end1, end2 = end2,\
    \ end1\n    end1, end2 = end2, end1\n    end1, end2 = end2, end1\n    end1, end2\
    \ = end2, end1\n    end1, end2 = end2, end1\n    end1, end2 = end2, end1\n   \
    \ end1, end2 = end2, end1\n    end1, end2 = end2, end1\n    end1, end2 = end2,\
    \ end1\n    end1, end", "    local start1, end1, start2, end2\n    start1 = interval1[1]\n\
    \    end1 = interval1[2]\n    start2 = interval2[1]\n    end2 = interval2[2]\n\
    \    if start1 > end1 or start2 > end2 then\n        return \"NO\"\n    end1 =\
    \ end1 - 1\n    end2 = end2 - 1\n    return (end1 - start1 + 1) * (end2 - start2\
    \ + 1) == math.mod(end1 - start1 + 1, end2 - start2 + 1) and \"YES\" or \"NO\"\
    \nend", "    local start1, end1, start2, end2 = interval1[1], interval1[2], interval2[1],\
    \ interval2[2]\n    local length = end1 - start1\n    if length < 0 then return\
    \ \"NO\" end\n    if length == 0 then return \"NO\" end\n    local length2 = end2\
    \ - start2\n    if length2 < 0 then return \"NO\" end\n    if length2 == 0 then\
    \ return \"NO\" end\n    local prime = math.sqrt(length * length2)\n    if prime\
    \ == math.floor(prime) then return \"YES\" end\n    return \"NO\"\nend", "   \
    \ local start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n\
    \    return (end1 - start1 + 1) * (end2 - start2 + 1) == math.mod(end1 - start1\
    \ + 1, end2 - start2 + 1) and \"YES\" or \"NO\"\nend", "    local start1, end1,\
    \ start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2\
    \ = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n \
    \       return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return start1\
    \ > end2 and start2 > end1 and math.floor(math.sqrt(end1 - start1)) == math.floor(math.sqrt(end2\
    \ - start2)) and math.floor(math.sqrt(end1 - start1)) == math.floor(math.sqrt(end2\
    \ - start2)) and math.floor(math.sqrt(end1 - start1)) == math.floor(math.sqrt(end2\
    \ - start2)) and math.floor(math.sqrt(end1 - start1)) == math.floor(math.sqrt(end2\
    \ - start2)) and math.floor(math.sqrt(end1 - start1)) == math.floor(math.sqrt(end2\
    \ - start2)) and math.floor(math.sqrt(end1 - start1)) == math.floor(math.sqrt(end2\
    \ - start2)) and math.floor(math.sqrt(end1 - start1)) == math.floor(math.sqrt(end2\
    \ - start2)) and math.floor(math.sqrt(end1 - start1)) == math.floor(math.sqrt(end2\
    \ - start2)) and math.floor(math.sqrt(end1 - start1)) == math.floor(math.sqrt(end2\
    \ - start2)) and math.floor(math.sqrt(end1 - start1)) == math.floor(math.sqrt(end2\
    \ - start2)) and math.floor(math.sqrt(end1 - start1)) == math.floor(math.sqrt(end2\
    \ - start2)) and math.floor(math.sqrt(end1 - start1)) == math.floor(math.sqrt(end2\
    \ - start2)) and math.floor(math.sqrt(end1 - start1)) == math.floor(math.sqrt(",
  "    local start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1, end2 = end1, end2\n    return\
    \ start1 <= end2 and start2 <= end1 and math.floor(end1 - start1) == math.floor(end2\
    \ - start2) and math.floor(end1 - start1) % 2 == 1\nend", "    local start1, end1,\
    \ start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2\
    \ = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n \
    \       return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return start1\
    \ <= end2 and start2 <= end1 and math.floor(end1 - start1) == math.floor(end2\
    \ - start2) and math.floor(end1 - start1) % 2 == 0 and math.floor(end2 - start2)\
    \ % 2 == 0\nend", "    local start1, end1, start2, end2\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    if start1 >\
    \ end2 or start2 > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n   \
    \ end2 = end2 - 1\n    return start1 <= end2 and end1 >= start2 and is_prime(end1\
    \ - start1 + 1)\nend", "    local start1, end1, start2, end2\n    start1, end1\
    \ = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1 =\
    \ end1 - 1\n    end2 = end2 - 1\n    return start1 <= end2 and start2 <= end1\
    \ and math.floor(end1 / end2) == math.floor(start1 / start2) and math.floor(end1\
    \ / end2) == math.floor(end2 / start1) and math.floor(end1 / end2) == math.floor(end2\
    \ / start1) and math.floor(end1 / end2) == math.floor(end2 / start1) and math.floor(end1\
    \ / end2) == math.floor(end2 / start1) and math.floor(end1 / end2) == math.floor(end2\
    \ / start1) and math.floor(end1 / end2) == math.floor(end2 / start1) and math.floor(end1\
    \ / end2) == math.floor(end2 / start1) and math.floor(end1 / end2) == math.floor(end2\
    \ / start1) and math.floor(end1 / end2) == math.floor(end2 / start1) and math.floor(end1\
    \ / end2) == math.floor(end2 / start1) and math.floor(end1 / end2) == math.floor(end2\
    \ / start1) and math.floor(end1 / end2) == math.floor(end2 / start1) and math.floor(end1\
    \ / end2) == math.floor(end2 / start1) and math.floor(end1 / end2) == math.floor(end2\
    \ / start1) and math.floor(end1 / end2) == math.floor(end2 / start1) and math.floor(end1\
    \ / end2) == math.floor(end2 / start1) and math.floor(end1 / end2) == math.floor(end2\
    \ / start1) and math.floor(end1 / end2) == math.", "    local start1, end1, start2,\
    \ end2\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return (end1 - start1 + 1)\
    \ * (end2 - start2 + 1) == math.mod(end1 - start1 + 1, end2 - start2 + 1) and\
    \ \"YES\" or \"NO\"\nend", "    local start1, end1, start2, end2\n    start1,\
    \ end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1 =\
    \ end1 - 1\n    end2 = end2 - 1\n    return start1 > end2 and start2 > end1 and\n\
    \        math.mod(end1 - start1 + 1, end2 - start2 + 1) == 1 and\n        math.mod(end2\
    \ - start2 + 1, end1 - start1 + 1) == 1\nend", "    local start1, end1, start2,\
    \ end2 = interval1[1], interval1[2], interval2[1], interval2[2]\n    local length\
    \ = end1 - start1\n    if length == 0 then return \"NO\" end\n    if length ==\
    \ 1 then return \"YES\" end\n    local length2 = end2 - start2\n    if length2\
    \ == 0 then return \"NO\" end\n    if length2 == 1 then return \"YES\" end\n \
    \   local prime = math.sqrt(length)\n    local prime2 = math.sqrt(length2)\n \
    \   if prime == prime2 then return \"YES\" end\n    return \"NO\"\nend", "   \
    \ local start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n\
    \    return start2 <= end1 and end2 >= start1 and math.mod(end1 - start2 + 1,\
    \ 2) == 1\nend", "    local start1, end1, start2, end2\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    if start1 >\
    \ end2 or start2 > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n   \
    \ end2 = end2 - 1\n    return start1 <= end2 and start2 <= end1 and\n        math.floor(end1\
    \ / math.floor(end2 / start1)) == math.floor(end2 / start1) and\n        math.floor(end2\
    \ / math.floor(end1 / start2)) == math.floor(end1 / start2) and\n        math.floor(end1\
    \ / math.floor(end2 / start1)) == math.floor(end2 / start1) and\n        math.floor(end2\
    \ / math.floor(end1 / start2)) == math.floor(end1 / start2) and\n        math.floor(end1\
    \ / math.floor(end2 / start1)) == math.floor(end2 / start1) and\n        math.floor(end2\
    \ / math.floor(end1 / start2)) == math.floor(end1 / start2) and\n        math.floor(end1\
    \ / math.floor(end2 / start1)) == math.floor(end2 / start1) and\n        math.floor(end2\
    \ / math.floor(end1 / start2)) == math.floor(end1 / start2) and\n        math.floor(end1\
    \ / math.floor(end2 / start1)) == math.floor(end2 / start1) and\n        math.floor(end2\
    \ / math.floor(end1 / start2)) == math.floor(end1 / start2) and\n        math.floor(end1\
    \ / math.floor(end2 / start1)) == math.floor(end2 / start1) and\n        math.floor(end2\
    \ / math.floor(end1 / start2)) == math.floor(end1 / start2) and\n        math.floor(end1\
    \ / math.floor(end2 / start1)) == math.floor(end2 / start1) and\n        math.floor(",
  "    local start1, end1, start2, end2, length\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    if start1 >\
    \ end2 or start2 > end1 then\n        return \"NO\"\n    end1, end2 = end1 - 1,\
    \ end2 - 1\n    length = end1 - start1 + 1\n    if length == 0 then\n        return\
    \ \"NO\"\n    end1, end2 = end2 - 1, end1 - 1\n    length = end1 - start2 + 1\n\
    \    if length == 0 then\n        return \"NO\"\n    end1, end2 = end2 - 1, end1\
    \ - 1\n    length = end1 - start2 + 1\n    if length == 0 then\n        return\
    \ \"NO\"\n    end1, end2 = end2 - 1, end1 - 1\n    length = end1 - start2 + 1\n\
    \    if length == 0 then\n        return \"NO\"\n    end1, end2 = end2 - 1, end1\
    \ - 1\n    length = end1 - start2 + 1\n    if length == 0 then\n        return\
    \ \"NO\"\n    end1, end2 = end2 - 1, end1 - 1\n    length = end1 - start2 + 1\n\
    \    if length == 0 then\n        return \"NO\"\n    end1, end2 = end2 - 1, end1\
    \ - 1\n    length = end1 - start2 + 1\n    if length == 0 then\n        return\
    \ \"NO\"\n    end1, end2 = end2 - 1, end1 - 1\n    length = end1 - start2 + 1\n\
    \    if length == 0 then\n        return \"NO\"\n    end1, end2 = end2 - 1, end1\
    \ - 1\n    length = end1 - start2 + 1\n    if length == 0 then\n        return\
    \ \"NO\"\n    end1, end2 = end2 - 1, end1 - 1\n    length = end1 - start2 + 1\n\
    \    if length == 0 then\n        return \"NO\"\n    end1, end2 = end2 - 1, end1\
    \ - 1\n    length = end1 - start2 + 1\n    ", "    local start1, end1, start2,\
    \ end2\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return (end1 - start1 + 1)\
    \ * (end2 - start2 + 1) == math.mod(end1 - start1 + 1, end2 - start2 + 1) and\
    \ \"YES\" or \"NO\"\nend", "    local start1, end1, start2, end2\n    start1,\
    \ end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    local length = end1 - start1\n    if start1 > end2 or start2 > end1 then\n\
    \        return \"NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n    local length2\
    \ = end2 - start2\n    if length != length2 then\n        return \"NO\"\n    end2\
    \ = end2 + 1\n    end1 = end1 + 1\n    return \"YES\"\nend", "    local start1,\
    \ end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2,\
    \ end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n\
    \        return \"NO\"\n    end1, end2 = end1, end2\n    return start2 > end1\
    \ and start1 > end2 and\n        math.floor(math.sqrt(start1 * end2)) == math.floor(math.sqrt(start2\
    \ * end1)) and\n        math.floor(math.sqrt(start1 * end2)) == math.floor(math.sqrt(start2\
    \ * end1)) and\n        math.floor(math.sqrt(start1 * end2)) == math.floor(math.sqrt(start2\
    \ * end1)) and\n        math.floor(math.sqrt(start1 * end2)) == math.floor(math.sqrt(start2\
    \ * end1)) and\n        math.floor(math.sqrt(start1 * end2)) == math.floor(math.sqrt(start2\
    \ * end1)) and\n        math.floor(math.sqrt(start1 * end2)) == math.floor(math.sqrt(start2\
    \ * end1)) and\n        math.floor(math.sqrt(start1 * end2)) == math.floor(math.sqrt(start2\
    \ * end1)) and\n        math.floor(math.sqrt(start1 * end2)) == math.floor(math.sqrt(start2\
    \ * end1)) and\n        math.floor(math.sqrt(start1 * end2)) == math.floor(math.sqrt(start2\
    \ * end1)) and\n        math.floor(math.sqrt(start1 * end2)) == math.floor(math.sqrt(start2\
    \ * end1)) and\n        math.floor(math.sqrt(start1 * end2)) == math.floor(math.sqrt(start2\
    \ * end1)) and\n        math.floor(math.sqrt(start1 * end2)) == math.floor(math.sqrt(start2\
    \ * end1)) and\n        math.floor(", "    local start1, end1, start2, end2\n\
    \    start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return (end1 - start1 + 1)\
    \ * (end2 - start2 + 1) == math.mod(end1 - start1 + 1, end2 - start2 + 1) and\
    \ \"YES\" or \"NO\"\nend", "    local start1, end1, start2, end2\n    start1,\
    \ end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1 =\
    \ end1 - 1\n    end2 = end2 - 1\n    return (end1 - start1 + 1) * (end2 - start2\
    \ + 1) == math.mod(end1 - start1 + 1, end2 - start2 + 1) and \"YES\" or \"NO\"\
    \nend", "    local start1, end1, start2, end2\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    if start1 >\
    \ end2 or start2 > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n   \
    \ end2 = end2 - 1\n    return start1 <= end2 and end1 >= start2 and isPrime(end1\
    \ - start1 + 1)\nend", "    local start1, end1, start2, end2\n    start1, end1\
    \ = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1 =\
    \ end1 - 1\n    end2 = end2 - 1\n    return (end1 - start1 + 1) * (end2 - start2\
    \ + 1) == math.mod(end1 - start1 + 1, end2 - start2 + 1) and \"YES\" or \"NO\"\
    \nend", "    local start1, end1, start2, end2\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    if start1 >\
    \ end2 or start2 > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n   \
    \ end2 = end2 - 1\n    return (end1 - start1 + 1) * (end2 - start2 + 1) == math.mod(end1\
    \ - start1 + 1, end2 - start2 + 1) and \"YES\" or \"NO\"\nend", "    local start1,\
    \ end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2,\
    \ end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n\
    \        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return start2\
    \ <= end1 and end2 >= start1 and math.mod(end1 - start2 + 1, 2) == 1\nend", " \
    \   local start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n\
    \    return (end1 - start1 + 1) * (end2 - start2 + 1) == math.mod(end1 - start1\
    \ + 1, end2 - start2 + 1) and \"YES\" or \"NO\"\nend", "    local start1, end1,\
    \ start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2\
    \ = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n \
    \       return \"NO\"\n    end1, end2 = end1, end2\n    return end1 - start1 +\
    \ 1 == math.floor(math.sqrt(end1 - start1)) and\n        end2 - start2 + 1 ==\
    \ math.floor(math.sqrt(end2 - start2)) and\n        end1 - start1 + 1 == end2\
    \ - start2 + 1 and\n        end1 - start1 + 1 == math.floor(end1 - start1) and\n\
    \        end2 - start2 + 1 == math.floor(end2 - start2) and\n        end1 - start1\
    \ + 1 == math.floor(end1 - start1) and\n        end2 - start2 + 1 == math.floor(end2\
    \ - start2)\nend", "    local start1, end1, start2, end2, length\n    start1 =\
    \ interval1[1]\n    end1 = interval1[2]\n    start2 = interval2[1]\n    end2 =\
    \ interval2[2]\n    if start1 > end1 or start2 > end2 then\n        return \"\
    NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    length = end1 - start1 + 1\n\
    \    if length == 0 then\n        return \"NO\"\n    end1 = end1 + 1\n    end2\
    \ = end2 + 1\n    length = end2 - start2 + 1\n    if length == 0 then\n      \
    \  return \"NO\"\n    end2 = end2 - 1\n    end1 = end1 - 1\n    length = end1\
    \ - start1 + 1\n    if length == 0 then\n        return \"NO\"\n    end1 = end1\
    \ + 1\n    end2 = end2 + 1\n    length = end2 - start2 + 1\n    if length == 0\
    \ then\n        return \"NO\"\n    end2 = end2 - 1\n    end1 = end1 - 1\n    length\
    \ = end1 - start1 + 1\n    if length == 0 then\n        return \"NO\"\n    end1\
    \ = end1 + 1\n    end2 = end2 + 1\n    length = end2 - start2 + 1\n    if length\
    \ == 0 then\n        return \"NO\"\n    end2 = end2 - 1\n    end1 = end1 - 1\n\
    \    length = end1 - start1 + 1\n    if length == 0 then\n        return \"NO\"\
    \n    end1 = end1 + 1\n    end2 = end2 + 1\n    length = end2 - start2 + 1\n \
    \   if length == 0 then\n        return \"NO\"\n    end2 = end2 - 1\n    end1\
    \ = end1 - 1\n    length = end1 - start1 + 1\n    if length == 0 then\n      \
    \  return \"NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n    length = end2\
    \ - start2 + 1\n    if length == 0 then\n        return \"NO\"\n    end2 = end2\
    \ - 1\n    end1 = end1", "    local start1, end1, start2, end2\n    start1, end1\
    \ = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1 =\
    \ end1 - 1\n    end2 = end2 - 1\n    return start1 <= end2 and end1 >= start2\
    \ and isPrime(end1 - start1 + 1)\nend", "    local start1, end1, start2, end2\
    \ = interval1[1], interval1[2], interval2[1], interval2[2]\n    local length =\
    \ end1 - start1 + 1\n    local length2 = end2 - start2 + 1\n    local result =\
    \ false\n    if length > 0 and length2 > 0 then\n        if length == length2\
    \ then\n            result = true\n        else\n            result = math.mod(length,\
    \ length2) == 1\n        end\n    end\n    return result\nend", "    local start1,\
    \ end1, start2, end2, length, i, j\n    start1 = interval1[1]\n    end1 = interval1[2]\n\
    \    start2 = interval2[1]\n    end2 = interval2[2]\n    length = end1 - start1\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1 =\
    \ end1 + 1\n    end2 = end2 + 1\n    for i = start1, end1, 1 do\n        for j\
    \ = start2, end2, 1 do\n            if i > j then\n                return \"NO\"\
    \n            end2 = end2 + 1\n        end1 = end1 + 1\n    end1 = end1 - 1\n\
    \    end2 = end2 - 1\n    return \"YES\"\nend", "    local start1, end1, start2,\
    \ end2, length\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2\
    \ = interval2[1], interval2[2]\n    length = end1 - start1\n    if length > end2\
    \ - start2 then\n        return \"NO\"\n    end1, end2 = end2, end1\n    end2\
    \ = end2 + 1\n    return \"YES\"\nend", "    local start1, end1, start2, end2\n\
    \    start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return (end1 - start1 + 1)\
    \ * (end2 - start2 + 1) == math.mod(end1 - start1 + 1, end2 - start2 + 1) and\
    \ \"YES\" or \"NO\"\nend", "    local start1, end1, start2, end2\n    start1,\
    \ end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1,\
    \ end2 = end1, end2\n    return end1 - start1 + 1 == math.floor(math.sqrt(end1\
    \ - start1)) and\n        end2 - start2 + 1 == math.floor(math.sqrt(end2 - start2))\
    \ and\n        end1 - start1 + 1 == end2 - start2 + 1 and\n        end1 - start1\
    \ + 1 == math.floor(end1 - start1) and\n        end2 - start2 + 1 == math.floor(end2\
    \ - start2) and\n        end1 - start1 + 1 == math.floor(end1 - start1) and\n\
    \        end2 - start2 + 1 == math.floor(end2 - start2)\nend", "    local start1,\
    \ end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2,\
    \ end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n\
    \        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return start1\
    \ <= end2 and start2 <= end1 and math.mod(end1 - start1 + 1, end2 - start2 + 1)\
    \ == 1\nend", "    local start1, end1, start2, end2 = interval1[1], interval1[2],\
    \ interval2[1], interval2[2]\n    local length = end1 - start1\n    if length\
    \ < 0 then\n        return \"NO\"\n    end\n    local length2 = end2 - start2\n\
    \    if length2 < 0 then\n        return \"NO\"\n    end\n    local length3 =\
    \ end1 - start2\n    if length3 < 0 then\n        return \"NO\"\n    end\n   \
    \ local length4 = end2 - start1\n    if length4 < 0 then\n        return \"NO\"\
    \n    end\n    if length == length2 and length == length3 and length == length4\
    \ then\n        return \"YES\"\n    end\n    return \"NO\"\nend", "    local start1,\
    \ end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2,\
    \ end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n\
    \        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return start1\
    \ > end2 and start2 > end1 and\n        math.floor(math.sqrt(end1 - start1)) *\
    \ math.floor(math.sqrt(end2 - start2)) == end1 - start1 and\n        math.floor(math.sqrt(end1\
    \ - start1)) * math.floor(math.sqrt(end2 - start2)) == end2 - start2\nend", " \
    \   local start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n\
    \    return start1 <= end2 and start2 <= end1 and\n        math.mod(end1 - start1\
    \ + 1, end2 - start2 + 1) == 1\nend", "    local start1, end1, start2, end2\n\
    \    start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n    return end1 - start2 and end2\
    \ - start1 and isPrime(end1 - start2) and isPrime(end2 - start1)\nend", "    local\
    \ start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n\
    \    return (end1 - start1 + 1) * (end2 - start2 + 1) == math.mod(end1 - start1\
    \ + 1, end2 - start2 + 1) and \"YES\" or \"NO\"\nend", "    local start1, end1,\
    \ start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2\
    \ = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n \
    \       return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return start1\
    \ <= end2 and start2 <= end1 and\n        math.floor(end1 / math.floor(end2 /\
    \ start1)) == math.floor(end2 / start1) and\n        math.floor(end2 / math.floor(end1\
    \ / start2)) == math.floor(end1 / start2) and\n        math.floor(end1 / math.floor(end2\
    \ / start1)) * math.floor(end2 / start1) == end1 and\n        math.floor(end2\
    \ / math.floor(end1 / start2)) * math.floor(end1 / start2) == end2\nend", "  \
    \  local start1, end1, start2, end2 = interval1[1], interval1[2], interval2[1],\
    \ interval2[2]\n    if start1 > end1 or start2 > end2 then\n        return \"\
    NO\"\n    end1, end2 = end1 + 1, end2 + 1\n    local length = end1 - start1\n\
    \    if length == 0 or length == 1 then\n        return \"NO\"\n    end1, end2\
    \ = end2 - 1, end1 - 1\n    local length = end2 - start2\n    if length == 0 or\
    \ length == 1 then\n        return \"NO\"\n    return \"YES\"\nend", "    local\
    \ start1, end1, start2, end2, length, isPrime\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    if end1 < start2\
    \ or end2 < start1 then\n        return \"NO\"\n    end1, end2 = end1 - 1, end2\
    \ - 1\n    length = end1 - start1 + 1\n    isPrime = isPrime(length)\n    if isPrime\
    \ then\n        return \"YES\"\n    end1, end2 = end2 + 1, end1 + 1\n    length\
    \ = end2 - start2 + 1\n    isPrime = isPrime(length)\n    if isPrime then\n  \
    \      return \"YES\"\n    end1, end2 = end1 + 1, end2 - 1\n    length = end1\
    \ - start1 + 1\n    isPrime = isPrime(length)\n    if isPrime then\n        return\
    \ \"YES\"\n    end1, end2 = end2 + 1, end1 - 1\n    length = end2 - start2 + 1\n\
    \    isPrime = isPrime(length)\n    if isPrime then\n        return \"YES\"\n\
    \    end1, end2 = end1 + 1, end2 - 1\n    length = end1 - start1 + 1\n    isPrime\
    \ = isPrime(length)\n    if isPrime then\n        return \"YES\"\n    end1, end2\
    \ = end2 + 1, end1 - 1\n    length = end2 - start2 + 1\n    isPrime = isPrime(length)\n\
    \    if isPrime then\n        return \"YES\"\n    end1, end2 = end1 + 1, end2\
    \ - 1\n    length = end1 - start1 + 1\n    isPrime = isPrime(length)\n    if isPrime\
    \ then\n        return \"YES\"\n    end1, end2 = end2 + 1, end1 - 1\n    length\
    \ = end2 - start2 + 1\n    isPrime = isPrime(length)\n    if isPrime then\n  \
    \      return \"YES\"\n    end1, end2 = end1 + 1, end2 - 1\n    length = end1\
    \ - start1 + 1\n    isPrime = isPrime(length", "    local start1, end1, start2,\
    \ end2, length\n    start1 = interval1[1]\n    end1 = interval1[2]\n    start2\
    \ = interval2[1]\n    end2 = interval2[2]\n    if start1 > end1 or start2 > end2\
    \ then\n        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    length\
    \ = end1 - start1 + 1\n    if length % 2 == 0 then\n        return \"NO\"\n  \
    \  end1 = end1 + 1\n    end2 = end2 + 1\n    length = end2 - start2 + 1\n    if\
    \ length % 2 == 0 then\n        return \"NO\"\n    return \"YES\"\nend", "   \
    \ local start1, end1, start2, end2 = interval1[1], interval1[2], interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1, end2 = end1 + 1, end2 + 1\n    return (end1 - start1) * (end2\
    \ - start2) == math.mod(end1 - start1, end2 - start2) and \"YES\" or \"NO\"\n\
    end", "    local start1, end1, start2, end2, length\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    if start1 >\
    \ end2 or start2 > end1 then\n        return \"NO\"\n    end1, end2 = end1, end2\n\
    \    length = end1 - start1\n    if length == 0 then\n        return \"NO\"\n\
    \    end1, end2 = end2, end1\n    length = end2 - start2\n    if length == 0 then\n\
    \        return \"NO\"\n    end1, end2 = end2, end1\n    length = end1 - start1\n\
    \    if length == 0 then\n        return \"NO\"\n    end1, end2 = end2, end1\n\
    \    length = end2 - start2\n    if length == 0 then\n        return \"NO\"\n\
    \    end1, end2 = end2, end1\n    length = end1 - start1\n    if length == 0 then\n\
    \        return \"NO\"\n    end1, end2 = end2, end1\n    length = end2 - start2\n\
    \    if length == 0 then\n        return \"NO\"\n    end1, end2 = end2, end1\n\
    \    length = end1 - start1\n    if length == 0 then\n        return \"NO\"\n\
    \    end1, end2 = end2, end1\n    length = end2 - start2\n    if length == 0 then\n\
    \        return \"NO\"\n    end1, end2 = end2, end1\n    length = end1 - start1\n\
    \    if length == 0 then\n        return \"NO\"\n    end1, end2 = end2, end1\n\
    \    length = end2 - start2\n    if length == 0 then\n        return \"NO\"\n\
    \    end1, end2 = end2, end1\n    length = end1 - start1\n    if length == 0 then\n\
    \        return \"NO\"\n    end1, end2 = end2, end1\n    length = end2 - start2\n\
    \    if length == 0 then\n        return \"NO\"\n    end1, end2 = end2, end1\n\
    \    length = end1 -", "    local start1, end1, start2, end2\n    start1, end1\
    \ = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1 =\
    \ end1 + 1\n    end2 = end2 + 1\n    return \"YES\"\nend", "    local start1,\
    \ end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2,\
    \ end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n\
    \        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return (end1\
    \ - start1 + 1) * (end2 - start2 + 1) == math.mod(end1 - start1 + 1, end2 - start2\
    \ + 1) and \"YES\" or \"NO\"\nend", "    local start1, end1, start2, end2\n  \
    \  start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return end1 - start2 + 1 ==\
    \ math.floor(end1 - start2 + 1 / math.sqrt(2)) and \"YES\" or \"NO\"\nend", " \
    \   local start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n\
    \    return (end1 - start1 + 1) * (end2 - start2 + 1) == math.mod(end1 - start1\
    \ + 1, end2 - start2 + 1) and \"YES\" or \"NO\"\nend", "    local start1, end1,\
    \ start2, end2, length\n    start1, end1 = interval1[1], interval1[2]\n    start2,\
    \ end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n\
    \        return \"NO\"\n    end1, end2 = end1, end2\n    length = end1 - start1\n\
    \    if length == 0 then\n        return \"NO\"\n    end1, end2 = end2, end1\n\
    \    length = end2 - start2\n    if length == 0 then\n        return \"NO\"\n\
    \    end1, end2 = end2, end1\n    length = end1 - start1\n    if length == 0 then\n\
    \        return \"NO\"\n    end1, end2 = end2, end1\n    length = end2 - start2\n\
    \    if length == 0 then\n        return \"NO\"\n    end1, end2 = end2, end1\n\
    \    length = end1 - start1\n    if length == 0 then\n        return \"NO\"\n\
    \    end1, end2 = end2, end1\n    length = end2 - start2\n    if length == 0 then\n\
    \        return \"NO\"\n    end1, end2 = end2, end1\n    length = end1 - start1\n\
    \    if length == 0 then\n        return \"NO\"\n    end1, end2 = end2, end1\n\
    \    length = end2 - start2\n    if length == 0 then\n        return \"NO\"\n\
    \    end1, end2 = end2, end1\n    length = end1 - start1\n    if length == 0 then\n\
    \        return \"NO\"\n    end1, end2 = end2, end1\n    length = end2 - start2\n\
    \    if length == 0 then\n        return \"NO\"\n    end1, end2 = end2, end1\n\
    \    length = end1 - start1\n    if length == 0 then\n        return \"NO\"\n\
    \    end1, end2 = end2, end1\n    length = end2 - start2\n    if length == 0 then\n\
    \        return \"NO\"\n    end1, end2 = end2, end1\n    length = end1 -", " \
    \   local start1, end1, start2, end2 = interval1[1], interval1[2], interval2[1],\
    \ interval2[2]\n    local length = end1 - start1\n    local length2 = end2 - start2\n\
    \    if length > length2 then\n        local length = length2\n        local start\
    \ = start2\n    end\n    end\n    if length == 1 then\n        return \"YES\"\n\
    \    end\n    return \"NO\"\nend", "    local start1, end1, start2, end2\n   \
    \ start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return start1 <= end2 and\
    \ start2 <= end1 and\n        math.floor(end1 / math.floor(end2 / start1)) ==\
    \ 1 and\n        math.floor(end2 / math.floor(end1 / start2)) == 1 and\n     \
    \   math.floor(end1 / math.floor(end2 / start1)) == math.floor(end2 / math.floor(end1\
    \ / start2))\nend", "    local start1, end1, start2, end2\n    start1, end1 =\
    \ interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1 =\
    \ end1 + 1\n    end2 = end2 + 1\n    return start1 <= end2 and end1 >= start2\
    \ and isPrime(end1 - start1)\nend", "    local start1, end1, start2, end2\n  \
    \  start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n    return \"YES\"\nend", "  \
    \  local start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n\
    \    return start1 <= end2 and start2 <= end1 and math.mod(end1 - start1 + 1,\
    \ end2 - start2 + 1) == 1\nend", "    local start1, end1, start2, end2\n    start1,\
    \ end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1,\
    \ end2 = end1, end2\n    return end1 - start1 + 1 == math.floor(math.sqrt(end1\
    \ - start1)) and\n        end2 - start2 + 1 == math.floor(math.sqrt(end2 - start2))\
    \ and\n        end1 - start1 + 1 == end2 - start2 + 1 and\n        end1 - start1\
    \ + 1 == math.floor(end1 - start1) and\n        end2 - start2 + 1 == math.floor(end2\
    \ - start2) and\n        end1 - start1 + 1 == math.floor(end1 - start1) and\n\
    \        end2 - start2 + 1 == math.floor(end2 - start2) and\n        end1 - start1\
    \ + 1 == math.floor(end1 - start1) and\n        end2 - start2 + 1 == math.floor(end2\
    \ - start2) and\n        end1 - start1 + 1 == math.floor(end1 - start1) and\n\
    \        end2 - start2 + 1 == math.floor(end2 - start2) and\n        end1 - start1\
    \ + 1 == math.floor(end1 - start1) and\n        end2 - start2 + 1 == math.floor(end2\
    \ - start2) and\n        end1 - start1 + 1 == math.floor(end1 - start1) and\n\
    \        end2 - start2 + 1 == math.floor(end2 - start2) and\n        end1 - start1\
    \ + 1 == math.floor(end1 - start1) and\n        end2 - start2 + 1 == math.floor(end2\
    \ - start2) and\n        end1 - start1 + 1 == math.floor(end1 - start1) and\n\
    \        end2 - start2 + 1 == math.floor(end2 - start2) and\n        end1 - start1\
    \ + 1 == math.floor(end1 - start1) and\n", "    local start1, end1, start2, end2\
    \ = interval1[1], interval1[2], interval2[1], interval2[2]\n    local length =\
    \ end1 - start1\n    local length2 = end2 - start2\n    if length < 0 or length2\
    \ < 0 then\n        return \"NO\"\n    end\n    if length == 0 or length2 == 0\
    \ then\n        return \"NO\"\n    end\n    if length == 1 or length2 == 1 then\n\
    \        return \"YES\"\n    end\n    if length % 2 == 0 or length2 % 2 == 0 then\n\
    \        return \"NO\"\n    end\n    if length == length2 then\n        return\
    \ \"YES\"\n    end\n    return \"NO\"\nend", "    local start1, end1, start2,\
    \ end2, result\n    start1 = interval1[1]\n    end1 = interval1[2]\n    start2\
    \ = interval2[1]\n    end2 = interval2[2]\n    if start1 > end1 or start2 > end2\
    \ then\n        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    result\
    \ = 0\n    while start1 <= end1 and start2 <= end2 do\n        if start1 > end2\
    \ or start2 > end1 then\n            break\n        elseif start1 == start2 then\n\
    \            result = result + 1\n            start1 = end1 + 1\n            start2\
    \ = end2 + 1\n        elseif start1 > start2 then\n            start1 = start1\
    \ + 1\n        elseif start2 > start1 then\n            start2 = start2 + 1\n\
    \        end1 = end1 - 1\n        end2 = end2 - 1\n    end1 = end1 + 1\n    end2\
    \ = end2 + 1\n    if result == 0 then\n        return \"NO\"\n    elseif result\
    \ == 1 then\n        return \"YES\"\n    else\n        return \"NO\"\nend", " \
    \   local start1 = interval1[1]\n    local end1 = interval1[2]\n    local start2\
    \ = interval2[1]\n    local end2 = interval2[2]\n    local length = end1 - start1\n\
    \    local length2 = end2 - start2\n    if length > length2 then\n        return\
    \ \"NO\"\n    end\n    if length < length2 then\n        return \"NO\"\n    end\n\
    \    local length3 = end2 - start1\n    if length3 > length2 then\n        return\
    \ \"NO\"\n    end\n    if length3 < length2 then\n        return \"NO\"\n    end\n\
    \    return \"YES\"\nend", "    local start1, end1, start2, end2\n    start1,\
    \ end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1 =\
    \ end1 - 1\n    end2 = end2 - 1\n    return start1 <= end2 and start2 <= end1\
    \ and\n        math.floor(end1 / math.floor(end2 / start1)) == math.floor(end2\
    \ / start1) and\n        math.floor(end2 / math.floor(end1 / start2)) == math.floor(end1\
    \ / start2) and\n        math.floor(end1 / math.floor(end2 / start1)) * math.floor(end2\
    \ / start1) == end1 and\n        math.floor(end2 / math.floor(end1 / start2))\
    \ * math.floor(end1 / start2) == end2\nend", "    local start1, end1, start2,\
    \ end2, length, result\n    start1, end1 = interval1[1], interval1[2]\n    start2,\
    \ end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n\
    \        return \"NO\"\n    end1, end2 = end1, end2\n    length = end1 - start1\n\
    \    if length == 0 then\n        return \"NO\"\n    end1, end2 = end2, end1\n\
    \    length = end2 - start2\n    if length == 0 then\n        return \"NO\"\n\
    \    end1, end2 = end2, end1\n    length = end1 - start1\n    if length == 0 then\n\
    \        return \"NO\"\n    end1, end2 = end2, end1\n    length = end2 - start2\n\
    \    if length == 0 then\n        return \"NO\"\n    end1, end2 = end2, end1\n\
    \    length = end1 - start1\n    if length == 0 then\n        return \"NO\"\n\
    \    end1, end2 = end2, end1\n    length = end2 - start2\n    if length == 0 then\n\
    \        return \"NO\"\n    end1, end2 = end2, end1\n    length = end1 - start1\n\
    \    if length == 0 then\n        return \"NO\"\n    end1, end2 = end2, end1\n\
    \    length = end2 - start2\n    if length == 0 then\n        return \"NO\"\n\
    \    end1, end2 = end2, end1\n    length = end1 - start1\n    if length == 0 then\n\
    \        return \"NO\"\n    end1, end2 = end2, end1\n    length = end2 - start2\n\
    \    if length == 0 then\n        return \"NO\"\n    end1, end2 = end2, end1\n\
    \    length = end1 - start1\n    if length == 0 then\n        return \"NO\"\n\
    \    end1, end2 = end2, end1\n    length = end2 - start2\n    if length == 0 then\n\
    \        return \"NO\"\n    end1, end2 = end2, end1\n    length = end", "    local\
    \ start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n\
    \    return (end1 - start1 + 1) * (end2 - start2 + 1) == math.mod(end1 - start1\
    \ + 1, end2 - start2 + 1) and \"YES\" or \"NO\"\nend", "    local start1 = interval1[1]\n\
    \    local end1 = interval1[2]\n    local start2 = interval2[1]\n    local end2\
    \ = interval2[2]\n    local length = end1 - start1 + 1\n    local length2 = end2\
    \ - start2 + 1\n    if length < 0 or length2 < 0 then\n        return \"NO\"\n\
    \    end\n    if length == 0 or length2 == 0 then\n        return \"NO\"\n   \
    \ end\n    if length == 1 or length2 == 1 then\n        return \"YES\"\n    end\n\
    \    local prime = math.sqrt(length * length2)\n    if prime < length then\n \
    \       return \"YES\"\n    end\n    return \"NO\"\nend", "    local start1 =\
    \ interval1[1]\n    local end1 = interval1[2]\n    local start2 = interval2[1]\n\
    \    local end2 = interval2[2]\n    local length = end1 - start1\n    local length2\
    \ = end2 - start2\n    if length < 0 or length2 < 0 then\n        return \"NO\"\
    \n    end\n    if length == 0 or length2 == 0 then\n        return \"NO\"\n  \
    \  end\n    if length == 1 or length2 == 1 then\n        return \"YES\"\n    end\n\
    \    if length % 2 == 0 or length2 % 2 == 0 then\n        return \"NO\"\n    end\n\
    \    if length2 == 2 or length2 == 3 then\n        return \"YES\"\n    end\n \
    \   if length2 == 4 then\n        return \"NO\"\n    end\n    if length2 == 5\
    \ then\n        return \"YES\"\n    end\n    if length2 == 6 then\n        return\
    \ \"NO\"\n    end\n    if length2 == 7 then\n        return \"YES\"\n    end\n\
    \    if length2 == 8 then\n        return \"NO\"\n    end\n    if length2 == 9\
    \ then\n        return \"YES\"\n    end\n    if length2 == 10 then\n        return\
    \ \"NO\"\n    end\n    if length2 == 11 then\n        return \"YES\"\n    end\n\
    \    if length2 == 12 then\n        return \"NO\"\n    end\n    if length2 ==\
    \ 13 then\n        return \"YES\"\n    end\n    if length2 == 14 then\n      \
    \  return \"NO\"\n    end\n    if length2 == 15 then\n        return \"YES\"\n\
    \    end\n    if length2 == 16 then\n        return \"NO\"\n    end\n    if length2\
    \ == 17 then\n        return \"YES\"\n    end\n    if length2 == 18 then\n   \
    \     return \"NO\"\n    end\n    if length2 == 19 then\n        return \"YES\"\
    \n    end\n    if length2 == 20 then\n        return \"NO\"\n    end\n    if length2\
    \ == 21 then\n        return \"YES\"\n    end\n    if length2 == 22 then\n   \
    \     return \"NO\"\n    end\n    if length2 == 23 then\n        return \"YES\"\
    \n", "    local start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n\
    \    return start1 <= end2 and start2 <= end1 and math.floor(end1 - start1) ==\
    \ math.floor(end2 - start2) and math.floor(end1 - start1) % 2 == 1\nend", "  \
    \  local start1, end1, start2, end2, length\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    length = end1\
    \ - start1\n    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n\
    \    end1 = end1 + 1\n    end2 = end2 + 1\n    return \"YES\"\nend", "    local\
    \ start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n\
    \    return (end1 - start1 + 1) * (end2 - start2 + 1) == math.mod(end1 - start1\
    \ + 1, end2 - start2 + 1) and \"YES\" or \"NO\"\nend", "    local start1, end1,\
    \ start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2\
    \ = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n \
    \       return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return (end1\
    \ - start1 + 1) * (end2 - start2 + 1) == math.mod(end1 - start1 + 1, end2 - start2\
    \ + 1) and \"YES\" or \"NO\"\nend", "    local start1, end1, start2, end2\n  \
    \  start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return start1 <= end2 and\
    \ start2 <= end1 and\n        math.floor(end1 / math.floor(end1 / start1)) ==\
    \ math.floor(end2 / math.floor(end2 / start2)) and\n        math.floor(end1 /\
    \ math.floor(end1 / start1)) == math.floor(end2 / math.floor(end2 / start2)) and\n\
    \        math.floor(end1 / math.floor(end1 / start1)) == math.floor(end2 / math.floor(end2\
    \ / start2)) and\n        math.floor(end1 / math.floor(end1 / start1)) == math.floor(end2\
    \ / math.floor(end2 / start2)) and\n        math.floor(end1 / math.floor(end1\
    \ / start1)) == math.floor(end2 / math.floor(end2 / start2)) and\n        math.floor(end1\
    \ / math.floor(end1 / start1)) == math.floor(end2 / math.floor(end2 / start2))\
    \ and\n        math.floor(end1 / math.floor(end1 / start1)) == math.floor(end2\
    \ / math.floor(end2 / start2)) and\n        math.floor(end1 / math.floor(end1\
    \ / start1)) == math.floor(end2 / math.floor(end2 / start2)) and\n        math.floor(end1\
    \ / math.floor(end1 / start1)) == math.floor(end2 / math.floor(end2 / start2))\
    \ and\n        math.floor(end1 / math.floor(end1 / start1)) == math.floor(end2\
    \ / math.floor(end2 / start2)) and\n        math.floor(end1 / math.floor(end1\
    \ / start1)) == math.floor(end2 / math.", "    local start1, end1, start2, end2\n\
    \    start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n    return (end1 - start1) * (end2\
    \ - start2) == math.mod(end1 - start1, end2 - start2)\nend", "    local start1,\
    \ end1, start2, end2, length, result\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n\
    \    length = end1 - start1 + 1\n    result = math.mod(length, 2) == 1\n    return\
    \ result and \"YES\" or \"NO\"\nend", "    local start1, end1, start2, end2\n\
    \    start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return start2 < end1 and end2\
    \ > start1 and math.floor(end1 - start2 + 1) == math.floor(end2 - start1 + 1)\
    \ and math.floor(end1 - start2 + 1) == math.floor(end2 - start1 + 1) and math.floor(end1\
    \ - start2 + 1) == math.floor(end2 - start1 + 1) and math.floor(end1 - start2\
    \ + 1) == math.floor(end2 - start1 + 1) and math.floor(end1 - start2 + 1) == math.floor(end2\
    \ - start1 + 1) and math.floor(end1 - start2 + 1) == math.floor(end2 - start1\
    \ + 1) and math.floor(end1 - start2 + 1) == math.floor(end2 - start1 + 1) and\
    \ math.floor(end1 - start2 + 1) == math.floor(end2 - start1 + 1) and math.floor(end1\
    \ - start2 + 1) == math.floor(end2 - start1 + 1) and math.floor(end1 - start2\
    \ + 1) == math.floor(end2 - start1 + 1) and math.floor(end1 - start2 + 1) == math.floor(end2\
    \ - start1 + 1) and math.floor(end1 - start2 + 1) == math.floor(end2 - start1\
    \ + 1) and math.floor(end1 - start2 + 1) == math.floor(end2 - start1 + 1) and\
    \ math.floor(end1 - start2 + 1) == math.floor(end2 - start1 + 1) and math.floor(end1\
    \ - start2 + 1) == math.floor(end2 - start1 + 1) and math.floor(end1 - start2\
    \ + 1) == math.floor(end2", "    local start1, end1, start2, end2\n    start1,\
    \ end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1 =\
    \ end1 - 1\n    end2 = end2 - 1\n    return start1 <= end2 and end1 >= start2\
    \ and isPrime(end1 - start1 + 1)\nend", "    local start1, end1, start2, end2\
    \ = interval1[1], interval1[2], interval2[1], interval2[2]\n    local length =\
    \ end1 - start1\n    local length2 = end2 - start2\n    if length > length2 then\n\
    \        return \"NO\"\n    end\n    if length < length2 then\n        return\
    \ \"NO\"\n    end\n    if length == length2 then\n        return \"YES\"\n   \
    \ end\n    return \"NO\"\nend", "    local start1, end1, start2, end2, length,\
    \ result\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1, end2 = end1, end2\n    length = end1 - start1\n    if length ==\
    \ 0 then\n        return \"NO\"\n    end1, end2 = end2, end1\n    length = end2\
    \ - start2\n    if length == 0 then\n        return \"NO\"\n    end1, end2 = end2,\
    \ end1\n    length = end1 - start1\n    if length == 0 then\n        return \"\
    NO\"\n    end1, end2 = end2, end1\n    length = end2 - start2\n    if length ==\
    \ 0 then\n        return \"NO\"\n    end1, end2 = end2, end1\n    length = end1\
    \ - start1\n    if length == 0 then\n        return \"NO\"\n    end1, end2 = end2,\
    \ end1\n    length = end2 - start2\n    if length == 0 then\n        return \"\
    NO\"\n    end1, end2 = end2, end1\n    length = end1 - start1\n    if length ==\
    \ 0 then\n        return \"NO\"\n    end1, end2 = end2, end1\n    length = end2\
    \ - start2\n    if length == 0 then\n        return \"NO\"\n    end1, end2 = end2,\
    \ end1\n    length = end1 - start1\n    if length == 0 then\n        return \"\
    NO\"\n    end1, end2 = end2, end1\n    length = end2 - start2\n    if length ==\
    \ 0 then\n        return \"NO\"\n    end1, end2 = end2, end1\n    length = end1\
    \ - start1\n    if length == 0 then\n        return \"NO\"\n    end1, end2 = end2,\
    \ end1\n    length = end2 - start2\n    if length == 0 then\n        return \"\
    NO\"\n    end1, end2 = end2, end1\n    length = end", "    local start1, end1,\
    \ start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2\
    \ = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n \
    \       return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return end1\
    \ - start2 + 1 == math.floor(end1 - start2 + 1 / math.sqrt(2)) and \"YES\" or\
    \ \"NO\"\nend", "    local start1, end1, start2, end2\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    if start1 >\
    \ end2 or start2 > end1 then\n        return \"NO\"\n    end1 = end1 + 1\n   \
    \ end2 = end2 + 1\n    return \"YES\"\nend", "    local start1, end1, start2,\
    \ end2\n    start1 = interval1[1]\n    end1 = interval1[2]\n    start2 = interval2[1]\n\
    \    end2 = interval2[2]\n    if start1 > end1 or start2 > end2 then\n       \
    \ return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return (end1 -\
    \ start1 + 1) * (end2 - start2 + 1) == math.mod(end1 - start1 + 1, end2 - start2\
    \ + 1) and \"YES\" or \"NO\"\nend", "    local start1, end1, start2, end2\n  \
    \  start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n    return (end1 - start1) * (end2\
    \ - start2) == math.mod(end1 - start1, end2 - start2)\nend", "    local start1,\
    \ end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2,\
    \ end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n\
    \        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return (end1\
    \ - start1 + 1) * (end2 - start2 + 1) == math.mod(end1 - start1 + 1, end2 - start2\
    \ + 1) and \"YES\" or \"NO\"\nend", "    local start1, end1, start2, end2\n  \
    \  start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n    return end1 - start2 and end2\
    \ - start1 and isPrime(end1 - start2) and isPrime(end2 - start1)\nend", "    local\
    \ start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n\
    \    return (end1 - start1 + 1) * (end2 - start2 + 1) == math.mod(end1 - start1\
    \ + 1, end2 - start2 + 1) and \"YES\" or \"NO\"\nend", "    local start1, end1,\
    \ start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2\
    \ = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n \
    \       return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return start1\
    \ <= end2 and start2 <= end1 and\n        math.floor(end1 / math.floor(end2 /\
    \ start1)) == 1 and\n        math.floor(end2 / math.floor(end1 / start2)) == 1\
    \ and\n        end1 >= start2 and end2 >= start1\nend", "    local start1, end1,\
    \ start2, end2, length, i, j\n    start1 = interval1[1]\n    end1 = interval1[2]\n\
    \    start2 = interval2[1]\n    end2 = interval2[2]\n    length = end1 - start1\n\
    \    if end1 > start2 then\n        length = end2 - start2\n    end\n    if end2\
    \ > start1 then\n        length = end1 - start1\n    end\n    for i = start1 +\
    \ 1 to start2 - 1 do\n        for j = start2 + 1 to end1 - 1 do\n            if\
    \ i == j then\n                if i == start1 or i == end1 then\n            \
    \        if i == start2 or i == end2 then\n                        return \"YES\"\
    \n                    else\n                        return \"NO\"\n          \
    \      else\n                    return \"NO\"\n            else\n           \
    \     if i > j then\n                    return \"NO\"\n                else\n\
    \                    if i == start1 or i == end1 then\n                      \
    \  if i == start2 or i == end2 then\n                            return \"YES\"\
    \n                        else\n                            return \"NO\"\n  \
    \                  else\n                        return \"NO\"\n            end\n\
    \        end\n    end\n    return \"NO\"\nend", "    local start1, end1, start2,\
    \ end2 = interval1[1], interval1[2], interval2[1], interval2[2]\n    if start1\
    \ > end2 or start2 > end1 then\n        return \"NO\"\n    end1, end2 = end1 -\
    \ 1, end2 - 1\n    local result = {}\n    for i = start1, end1 do\n        for\
    \ j = start2, end2 do\n            if i > j then\n                break\n    \
    \        if i == j then\n                result[i] = true\n            end\n \
    \       end\n    end\n    if #result == math.mod(end1 - start1 + 1, 2) and #result\
    \ == math.mod(end2 - start2 + 1, 2) then\n        return \"YES\"\n    end\n  \
    \  return \"NO\"\nend", "    local start1, end1, start2, end2, length, isPrime\n\
    \    start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    length = end1 - start1\n    isPrime = isPrime(length)\n  \
    \  if isPrime == true then\n        return \"YES\"\n    else\n        return \"\
    NO\"\n    end\nend", "    local start1, end1, start2, end2\n    start1, end1 =\
    \ interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1 =\
    \ end1 - 1\n    end2 = end2 - 1\n    return start2 < end1 and end2 > start1 and\
    \ isPrime(end1 - start2 + 1)\nend", "    local start1, end1, start2, end2\n  \
    \  start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    local length = end1 - start1\n    if length == 0 then return\
    \ \"NO\" end\n    if length == 1 then return \"YES\" end\n    local length2 =\
    \ end2 - start2\n    if length2 == 0 then return \"NO\" end\n    if length2 ==\
    \ 1 then return \"YES\" end\n    local length3 = end1 - start2\n    if length3\
    \ == 0 then return \"NO\" end\n    if length3 == 1 then return \"YES\" end\n \
    \   local length4 = end2 - start1\n    if length4 == 0 then return \"NO\" end\n\
    \    if length4 == 1 then return \"YES\" end\n    local length5 = end1 - start1\n\
    \    if length5 == 0 then return \"NO\" end\n    if length5 == 1 then return \"\
    YES\" end\n    local length6 = end2 - start2\n    if length6 == 0 then return\
    \ \"NO\" end\n    if length6 == 1 then return \"YES\" end\n    local length7 =\
    \ end1 - start2\n    if length7 == 0 then return \"NO\" end\n    if length7 ==\
    \ 1 then return \"YES\" end\n    local length8 = end2 - start1\n    if length8\
    \ == 0 then return \"NO\" end\n    if length8 == 1 then return \"YES\" end\n \
    \   local length9 = end1 - start1\n    if length9 == 0 then return \"NO\" end\n\
    \    if length9 == 1 then return \"YES\" end\n    local length10 = end2 - start2\n\
    \    if length10 == 0 then return \"NO\" end\n    if length10 == 1 then return\
    \ \"YES\" end\n    local length11 = end1 - start2\n    if length11 == 0 then return\
    \ \"NO\" end\n    if length11 == 1 then return \"YES\" end\n    local length12\
    \ = end2 - start1\n    if length12 == 0 then return \"NO\" end\n    if length12\
    \ == 1 then return \"YES\" end\n    local length13 = end1 - start1\n    if length13\
    \ == 0 then return \"NO", "    local start1, end1, start2, end2\n    start1, end1\
    \ = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1 =\
    \ end1 - 1\n    end2 = end2 - 1\n    return start1 <= end2 and start2 <= end1\
    \ and\n        math.floor(end1 / math.floor(end2 / start1)) == math.floor(end2\
    \ / start1) and\n        math.floor(end2 / math.floor(end1 / start2)) == math.floor(end1\
    \ / start2) and\n        math.floor(end1 / math.floor(end2 / start1)) == math.floor(end2\
    \ / start1) and\n        math.floor(end2 / math.floor(end1 / start2)) == math.floor(end1\
    \ / start2) and\n        math.floor(end1 / math.floor(end2 / start1)) == math.floor(end2\
    \ / start1) and\n        math.floor(end2 / math.floor(end1 / start2)) == math.floor(end1\
    \ / start2) and\n        math.floor(end1 / math.floor(end2 / start1)) == math.floor(end2\
    \ / start1) and\n        math.floor(end2 / math.floor(end1 / start2)) == math.floor(end1\
    \ / start2) and\n        math.floor(end1 / math.floor(end2 / start1)) == math.floor(end2\
    \ / start1) and\n        math.floor(end2 / math.floor(end1 / start2)) == math.floor(end1\
    \ / start2) and\n        math.floor(end1 / math.floor(end2 / start1)) == math.floor(end2\
    \ / start1) and\n        math.floor(end2 / math.floor(end1 / start2)) == math.floor(end1\
    \ / start2) and\n        math.floor(end1 / math.floor(end2 / start1)) == math.floor(end2\
    \ / start1) and\n        math.floor(", "    local start1 = interval1[1]\n    local\
    \ end1 = interval1[2]\n    local start2 = interval2[1]\n    local end2 = interval2[2]\n\
    \    local length = end1 - start1\n    local length2 = end2 - start2\n    if length\
    \ < 0 or length2 < 0 then\n        return \"NO\"\n    end\n    if length == 0\
    \ or length2 == 0 then\n        return \"NO\"\n    end\n    if length == 1 or\
    \ length2 == 1 then\n        return \"YES\"\n    end\n    local length3 = math.floor(math.sqrt(length\
    \ * length2))\n    local length4 = math.floor(math.sqrt(length2))\n    local length5\
    \ = math.floor(math.sqrt(length))\n    local length6 = math.floor(math.sqrt(length2))\n\
    \    local length7 = math.floor(math.sqrt(length))\n    local length8 = math.floor(math.sqrt(length2))\n\
    \    local length9 = math.floor(math.sqrt(length))\n    local length10 = math.floor(math.sqrt(length2))\n\
    \    local length11 = math.floor(math.sqrt(length))\n    local length12 = math.floor(math.sqrt(length2))\n\
    \    local length13 = math.floor(math.sqrt(length))\n    local length14 = math.floor(math.sqrt(length2))\n\
    \    local length15 = math.floor(math.sqrt(length))\n    local length16 = math.floor(math.sqrt(length2))\n\
    \    local length17 = math.floor(math.sqrt(length))\n    local length18 = math.floor(math.sqrt(length2))\n\
    \    local length19 = math.floor(math.sqrt(length))\n    local length20 = math.floor(math.sqrt(length2))\n\
    \    local length21 = math.floor(math.sqrt(length))\n    local length22 = math.floor(math.sqrt(length2))\n\
    \    local length23 = math.floor(math.sqrt(length))\n    local length24 = math.floor(math.sqrt(",
  "    local start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n\
    \    return end1 - start1 + 1 == math.floor(end1 - start1 + 1 / math.sqrt(2))\
    \ and\n        end2 - start2 + 1 == math.floor(end2 - start2 + 1 / math.sqrt(2))\
    \ and\n        end1 - start1 + 1 == math.floor(end1 - start1 + 1 / math.sqrt(2))\
    \ and\n        end2 - start2 + 1 == math.floor(end2 - start2 + 1 / math.sqrt(2))\
    \ and\n        end1 - start1 + 1 == math.floor(end1 - start1 + 1 / math.sqrt(2))\
    \ and\n        end2 - start2 + 1 == math.floor(end2 - start2 + 1 / math.sqrt(2))\
    \ and\n        end1 - start1 + 1 == math.floor(end1 - start1 + 1 / math.sqrt(2))\
    \ and\n        end2 - start2 + 1 == math.floor(end2 - start2 + 1 / math.sqrt(2))\
    \ and\n        end1 - start1 + 1 == math.floor(end1 - start1 + 1 / math.sqrt(2))\
    \ and\n        end2 - start2 + 1 == math.floor(end2 - start2 + 1 / math.sqrt(2))\
    \ and\n        end1 - start1 + 1 == math.floor(end1 - start1 + 1 / math.sqrt(2))\
    \ and\n        end2 - start2 + 1 == math.floor(end2 - start2 + 1 / math.sqrt(2))\
    \ and\n        end1 - start1 + 1 == math.floor(end1 - start1 + 1 / math.sqrt(2))\
    \ and\n        end2 - start2 + 1 == math.floor(end2 - start2 + 1 / math.sqrt(2))\
    \ and\n        end", "    local start1, end1, start2, end2, length\n    start1,\
    \ end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    length = end1 - start1\n    if start1 > end2 or start2 > end1 then\n    \
    \    return \"NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n    return (end1\
    \ - start1) == (end2 - start2) and (end1 - start1) % 2 == 1\nend", "    local\
    \ start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n\
    \    return (end1 - start1 + 1) * (end2 - start2 + 1) == math.mod(end1 - start1\
    \ + 1, end2 - start2 + 1) and \"YES\" or \"NO\"\nend", "    local start1, end1,\
    \ start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2\
    \ = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n \
    \       return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return (end1\
    \ - start1 + 1) * (end2 - start2 + 1) == math.mod(end1 - start1 + 1, end2 - start2\
    \ + 1) and \"YES\" or \"NO\"\nend", "    local start1, end1, start2, end2\n  \
    \  start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return (end1 - start1 + 1)\
    \ * (end2 - start2 + 1) == math.mod(end1 - start1 + 1, end2 - start2 + 1) and\
    \ \"YES\" or \"NO\"\nend", "    local start1, end1, start2, end2\n    start1,\
    \ end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1 =\
    \ end1 - 1\n    end2 = end2 - 1\n    return start2 < end1 and end2 > start1 and\
    \ isPrime(end1 - start2 + 1)\nend", "    local start1, end1, start2, end2, length\n\
    \    start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    length = end1 - start1\n    if length > end2 - start2 then\n\
    \        return \"NO\"\n    end1, end2 = end2, end1\n    end2 = end2 + 1\n   \
    \ return \"YES\"\nend", "    local start1, end1, start2, end2\n    start1, end1\
    \ = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1 =\
    \ end1 + 1\n    end2 = end2 + 1\n    return start1 <= end2 and start2 <= end1\
    \ and isPrime(end1 - start1) and isPrime(end2 - start2)\nend", "    local start1,\
    \ end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2,\
    \ end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n\
    \        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return (end1\
    \ - start1 + 1) * (end2 - start2 + 1) == math.mod(end1 - start1 + 1, end2 - start2\
    \ + 1) and \"YES\" or \"NO\"\nend", "    local start1, end1, start2, end2, length\n\
    \    start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    length = end1 - start1\n    if start1 > end2 or start2 > end1\
    \ then\n        return \"NO\"\n    end1, end2 = end1 + 1, end2 + 1\n    return\
    \ start2 < end1 and start1 < end2 and length % 2 == 1\nend", "    local start1,\
    \ end1, start2, end2 = interval1[1], interval1[2], interval2[1], interval2[2]\n\
    \    local length = end1 - start1\n    local length2 = end2 - start2\n    if length\
    \ < 0 or length2 < 0 then\n        return \"NO\"\n    end\n    if length == 0\
    \ or length2 == 0 then\n        return \"NO\"\n    end\n    if length == 1 or\
    \ length2 == 1 then\n        return \"YES\"\n    end\n    if length % 2 == 0 or\
    \ length2 % 2 == 0 then\n        return \"NO\"\n    end\n    if length2 == 2 or\
    \ length2 == 3 then\n        return \"YES\"\n    end\n    if length2 == 4 then\n\
    \        return \"YES\"\n    end\n    return \"NO\"\nend", "    local start1,\
    \ end1, start2, end2 = interval1[1], interval1[2], interval2[1], interval2[2]\n\
    \    if start1 > end1 or start2 > end2 then\n        return \"NO\"\n    end1,\
    \ end2 = end1 - 1, end2 - 1\n    local length = end1 - start1 + 1\n    if length\
    \ == 0 then\n        return \"NO\"\n    end1, end2 = end2 + 1, end1 + 1\n    local\
    \ length = end2 - start2 + 1\n    if length == 0 then\n        return \"NO\"\n\
    \    end1, end2 = end1 + 1, end2 - 1\n    local length = end1 - start1 + 1\n \
    \   if length == 0 then\n        return \"NO\"\n    end1, end2 = end2 + 1, end1\
    \ - 1\n    local length = end2 - start2 + 1\n    if length == 0 then\n       \
    \ return \"NO\"\n    end1, end2 = end1 - 1, end2 + 1\n    local length = end1\
    \ - start1 + 1\n    if length == 0 then\n        return \"NO\"\n    end1, end2\
    \ = end2 - 1, end1 + 1\n    local length = end2 - start2 + 1\n    if length ==\
    \ 0 then\n        return \"NO\"\n    end1, end2 = end1 + 1, end2 - 1\n    local\
    \ length = end1 - start1 + 1\n    if length == 0 then\n        return \"NO\"\n\
    \    end1, end2 = end2 - 1, end1 - 1\n    local length = end2 - start2 + 1\n \
    \   if length == 0 then\n        return \"NO\"\n    end1, end2 = end1 - 1, end2\
    \ + 1\n    local length = end1 - start1 + 1\n    if length == 0 then\n       \
    \ return \"NO\"\n    end1, end2 = end2 + 1, end1 + 1\n    local length = end2\
    \ - start2 + 1\n    if length == 0 then\n        return \"NO\"\n    end1, end2\
    \ = end1 + 1, end2 - 1\n    local length = end1 - start1 + 1\n    if length ==\
    \ 0 then\n", "    local start1, end1, start2, end2\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    if start1 >\
    \ end2 or start2 > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n   \
    \ end2 = end2 - 1\n    return (end1 - start1 + 1) * (end2 - start2 + 1) == math.mod(end1\
    \ - start1 + 1, end2 - start2 + 1) and \"YES\" or \"NO\"\nend", "    local start1,\
    \ end1, start2, end2, length\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1, end2 = end1, end2\n    length\
    \ = end1 - start1\n    if length == 0 then\n        return \"NO\"\n    end1, end2\
    \ = end2, end1\n    length = end2 - start2\n    if length == 0 then\n        return\
    \ \"NO\"\n    end1, end2 = end2, end1\n    length = end1 - start1\n    if length\
    \ == 0 then\n        return \"NO\"\n    end1, end2 = end2, end1\n    length =\
    \ end2 - start2\n    if length == 0 then\n        return \"NO\"\n    end1, end2\
    \ = end2, end1\n    length = end1 - start1\n    if length == 0 then\n        return\
    \ \"NO\"\n    end1, end2 = end2, end1\n    length = end2 - start2\n    if length\
    \ == 0 then\n        return \"NO\"\n    end1, end2 = end2, end1\n    length =\
    \ end1 - start1\n    if length == 0 then\n        return \"NO\"\n    end1, end2\
    \ = end2, end1\n    length = end2 - start2\n    if length == 0 then\n        return\
    \ \"NO\"\n    end1, end2 = end2, end1\n    length = end1 - start1\n    if length\
    \ == 0 then\n        return \"NO\"\n    end1, end2 = end2, end1\n    length =\
    \ end2 - start2\n    if length == 0 then\n        return \"NO\"\n    end1, end2\
    \ = end2, end1\n    length = end1 - start1\n    if length == 0 then\n        return\
    \ \"NO\"\n    end1, end2 = end2, end1\n    length = end2 - start2\n    if length\
    \ == 0 then\n        return \"NO\"\n    end1, end2 = end2, end1\n    length =\
    \ end1 -", "    local start1, end1, start2, end2 = interval1[1], interval1[2],\
    \ interval2[1], interval2[2]\n    if start1 > end1 or start2 > end2 then\n   \
    \     return \"NO\"\n    end1, end2 = end1 + 1, end2 + 1\n    return start1 <=\
    \ end2 and start2 <= end1 and isPrime(end2 - start1)\nend", "    local start1,\
    \ end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2,\
    \ end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n\
    \        return \"NO\"\n    end1, end2 = end1, end2\n    return end1 - start1\
    \ + 1 == math.floor(math.sqrt(end1 - start1)) and\n        end2 - start2 + 1 ==\
    \ math.floor(math.sqrt(end2 - start2)) and\n        end1 - start1 + 1 == end2\
    \ - start2 + 1 and\n        end1 - start1 + 1 == math.floor(end1 - start1) and\n\
    \        end2 - start2 + 1 == math.floor(end2 - start2) and\n        end1 - start1\
    \ + 1 == math.floor(math.sqrt(end1 - start1)) and\n        end2 - start2 + 1 ==\
    \ math.floor(math.sqrt(end2 - start2)) and\n        end1 - start1 + 1 == math.floor(end1\
    \ - start1) and\n        end2 - start2 + 1 == math.floor(end2 - start2)\nend",
  "    local start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n\
    \    return start1 <= end2 and start2 <= end1 and\n        math.floor(end1 / math.floor(end2\
    \ / start1)) == math.floor(end2 / start1)\nend", "    local start1, end1, start2,\
    \ end2\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return (end1 - start1 + 1)\
    \ * (end2 - start2 + 1) == math.mod(end1 - start1 + 1, end2 - start2 + 1) and\
    \ \"YES\" or \"NO\"\nend", "    local start1, end1, start2, end2\n    start1,\
    \ end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1 =\
    \ end1 - 1\n    end2 = end2 - 1\n    return start1 <= end2 and start2 <= end1\
    \ and math.mod(end1 - start1 + 1, end2 - start2 + 1) == 1\nend", "    local start1,\
    \ end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2,\
    \ end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n\
    \        return \"NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n    return end1\
    \ - start1 == end2 - start2 and is_prime(end1 - start1)\nend", "    local start1,\
    \ end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2,\
    \ end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n\
    \        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return start1\
    \ > end2 and start2 > end1 and\n        math.floor(math.sqrt(end1 - start1)) *\
    \ math.floor(math.sqrt(end2 - start2)) == end1 - start1 and\n        math.floor(math.sqrt(end1\
    \ - start1)) * math.floor(math.sqrt(end2 - start2)) == end2 - start2\nend", " \
    \   local start1, end1, start2, end2\n    start1 = interval1[1]\n    end1 = interval1[2]\n\
    \    start2 = interval2[1]\n    end2 = interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n\
    \    return end1 - start2 + 1 == math.floor(end1 - start2 + 1 / 2) and \"YES\"\
    \ or \"NO\"\nend", "    local start1, end1, start2, end2\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    if start1 >\
    \ end2 or start2 > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n   \
    \ end2 = end2 - 1\n    return start1 <= end2 and end1 >= start2 and isPrime(end1\
    \ - start1 + 1)\nend", "    local start1, end1, start2, end2\n    start1, end1\
    \ = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1 =\
    \ end1 - 1\n    end2 = end2 - 1\n    return start1 > end2 and start2 > end1 and\n\
    \        math.floor(math.sqrt(start1 - end2)) * math.floor(math.sqrt(start2 -\
    \ end1)) == start1 - end2 and\n        math.floor(math.sqrt(end1 - start2)) *\
    \ math.floor(math.sqrt(end2 - start1)) == end1 - start2\nend", "    local start1,\
    \ end1, start2, end2 = interval1[1], interval1[2], interval2[1], interval2[2]\n\
    \    if start1 > end1 or start2 > end2 then\n        return \"NO\"\n    end1,\
    \ end2 = end1 + 1, end2 + 1\n    return start1 <= end2 and start2 <= end1 and\
    \ math.floor(end1 / 2) == math.floor(end2 / 2) and math.floor(end1 / 2) == math.floor(start2\
    \ / 2) and math.floor(end2 / 2) == math.floor(start1 / 2) and math.floor(end1\
    \ / 2) == math.floor(start1 / 2) and math.floor(end2 / 2) == math.floor(start2\
    \ / 2) and math.floor(end1 / 2) == math.floor(start2 / 2) and math.floor(end2\
    \ / 2) == math.floor(start1 / 2) and math.floor(end1 / 2) == math.floor(start1\
    \ / 2) and math.floor(end2 / 2) == math.floor(start2 / 2) and math.floor(end1\
    \ / 2) == math.floor(start2 / 2) and math.floor(end2 / 2) == math.floor(start1\
    \ / 2) and math.floor(end1 / 2) == math.floor(start1 / 2) and math.floor(end2\
    \ / 2) == math.floor(start2 / 2) and math.floor(end1 / 2) == math.floor(start2\
    \ / 2) and math.floor(end2 / 2) == math.floor(start1 / 2) and math.floor(end1\
    \ / 2) == math.floor(start1 / 2) and math.floor(end2 / 2) == math.floor(start2\
    \ / 2) and math.floor(end1 / 2) == math.floor(start2 / 2) and math.floor(end2\
    \ / 2) == math.floor(start1 / 2) and math.floor(end1 / 2) == math.floor(start1\
    \ / 2) and math.floor(end2 / 2) == math.floor(start2 / 2) and math.floor(end",
  "    local start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n\
    \    return end1 - start1 + 1 == math.floor(end1 - start1 + 1 / 2) and\n     \
    \   end2 - start2 + 1 == math.floor(end2 - start2 + 1 / 2) and\n        end1 -\
    \ start1 + 1 == end2 - start2 + 1 and\n        end1 - start1 + 1 == math.floor(end1\
    \ - start1 + 1 / 2) and\n        end2 - start2 + 1 == math.floor(end2 - start2\
    \ + 1 / 2)\nend", "    local start1, end1, start2, end2, length\n    start1, end1\
    \ = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    length = end1 - start1\n    if start1 > end2 or start2 > end1 then\n    \
    \    return \"NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n    return \"YES\"\
    \nend", "    local start1, end1, start2, end2, length, isPrime\n    start1, end1\
    \ = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end1 then\n        start1, end1 = end1, start1\n    end1, start2\
    \ = start2, end2\n    end2, start1 = start1, end2\n    length = end1 - start1\n\
    \    isPrime = isPrime(length)\n    return isPrime and \"YES\" or \"NO\"\nend",
  "    local start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n\
    \    return end1 - start1 + 1 == math.floor(end1 - start1 + 1 / math.sqrt(2))\
    \ and\n        end2 - start2 + 1 == math.floor(end2 - start2 + 1 / math.sqrt(2))\
    \ and\n        end1 - start1 + 1 == math.floor(end1 - start1 + 1 / math.sqrt(2))\
    \ and\n        end2 - start2 + 1 == math.floor(end2 - start2 + 1 / math.sqrt(2))\
    \ and\n        end1 - start1 + 1 == math.floor(end1 - start1 + 1 / math.sqrt(2))\
    \ and\n        end2 - start2 + 1 == math.floor(end2 - start2 + 1 / math.sqrt(2))\
    \ and\n        end1 - start1 + 1 == math.floor(end1 - start1 + 1 / math.sqrt(2))\
    \ and\n        end2 - start2 + 1 == math.floor(end2 - start2 + 1 / math.sqrt(2))\
    \ and\n        end1 - start1 + 1 == math.floor(end1 - start1 + 1 / math.sqrt(2))\
    \ and\n        end2 - start2 + 1 == math.floor(end2 - start2 + 1 / math.sqrt(2))\
    \ and\n        end1 - start1 + 1 == math.floor(end1 - start1 + 1 / math.sqrt(2))\
    \ and\n        end2 - start2 + 1 == math.floor(end2 - start2 + 1 / math.sqrt(2))\
    \ and\n        end1 - start1 + 1 == math.floor(end1 - start1 + 1 / math.sqrt(2))\
    \ and\n        end2 - start2 + 1 == math.floor(end2 - start2 + 1 / math.sqrt(2))\
    \ and\n        end", "    local start1, end1, start2, end2 = interval1[1], interval1[2],\
    \ interval2[1], interval2[2]\n    local length = end1 - start1\n    if length\
    \ == 0 then return \"NO\" end\n    local length2 = end2 - start2\n    if length2\
    \ == 0 then return \"NO\" end\n    local length3 = end1 - start2\n    if length3\
    \ == 0 then return \"NO\" end\n    if length3 == 1 then return \"YES\" end\n \
    \   if length % 2 == 0 then return \"NO\" end\n    return \"YES\"\nend", "   \
    \ local start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n\
    \    return start1 <= end2 and start2 <= end1 and\n        math.floor(end1 / math.floor(end2\
    \ / start1)) == math.floor(end2 / start1) and\n        math.floor(end2 / math.floor(end1\
    \ / start2)) == math.floor(end1 / start2) and\n        math.floor(end1 / math.floor(end2\
    \ / start1)) == math.floor(end2 / start1) and\n        math.floor(end2 / math.floor(end1\
    \ / start2)) == math.floor(end1 / start2) and\n        math.floor(end1 / math.floor(end2\
    \ / start1)) == math.floor(end2 / start1) and\n        math.floor(end2 / math.floor(end1\
    \ / start2)) == math.floor(end1 / start2) and\n        math.floor(end1 / math.floor(end2\
    \ / start1)) == math.floor(end2 / start1) and\n        math.floor(end2 / math.floor(end1\
    \ / start2)) == math.floor(end1 / start2) and\n        math.floor(end1 / math.floor(end2\
    \ / start1)) == math.floor(end2 / start1) and\n        math.floor(end2 / math.floor(end1\
    \ / start2)) == math.floor(end1 / start2) and\n        math.floor(end1 / math.floor(end2\
    \ / start1)) == math.floor(end2 / start1) and\n        math.floor(end2 / math.floor(end1\
    \ / start2)) == math.floor(end1 / start2) and\n        math.floor(end1 / math.floor(end2\
    \ / start1)) == math.floor(end2 / start1) and\n        math.floor(", "    local\
    \ start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n\
    \    return (end1 - start1 + 1) * (end2 - start2 + 1) == math.mod(end1 - start1\
    \ + 1, end2 - start2 + 1) and \"YES\" or \"NO\"\nend", "    local start1, end1,\
    \ start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2\
    \ = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n \
    \       return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return start1\
    \ <= end2 and end1 >= start2 and isPrime(end1 - start1 + 1)\nend", "    local\
    \ start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n\
    \    return (end1 - start1 + 1) * (end2 - start2 + 1) == math.mod(end1 - start1\
    \ + 1, end2 - start2 + 1) and \"YES\" or \"NO\"\nend", "    local start1, end1,\
    \ start2, end2, length\n    start1, end1 = interval1[1], interval1[2]\n    start2,\
    \ end2 = interval2[1], interval2[2]\n    length = end1 - start1\n    if start1\
    \ > end2 or start2 > end1 then\n        return \"NO\"\n    end1 = end1 + 1\n \
    \   end2 = end2 + 1\n    if end1 > end2 then\n        end1 = end2\n    end2 =\
    \ end2 + 1\n    if end2 > end1 then\n        end2 = end1\n    end1 = end1 - 1\n\
    \    end2 = end2 - 1\n    return length == math.floor(math.sqrt(length)) and \"\
    YES\" or \"NO\"\nend", "    local start1, end1, start2, end2\n    start1, end1\
    \ = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1 =\
    \ end1 - 1\n    end2 = end2 - 1\n    return start1 <= end2 and start2 <= end1\
    \ and math.floor(end1 / end2) == math.floor(start2 / end2) and math.floor(end1\
    \ / end2) == math.floor(start1 / end2) and math.floor(end1 / end2) == math.floor(start2\
    \ / end2) and math.floor(end1 / end2) == math.floor(start1 / end2) and math.floor(end1\
    \ / end2) == math.floor(start2 / end2) and math.floor(end1 / end2) == math.floor(start1\
    \ / end2) and math.floor(end1 / end2) == math.floor(start2 / end2) and math.floor(end1\
    \ / end2) == math.floor(start1 / end2) and math.floor(end1 / end2) == math.floor(start2\
    \ / end2) and math.floor(end1 / end2) == math.floor(start1 / end2) and math.floor(end1\
    \ / end2) == math.floor(start2 / end2) and math.floor(end1 / end2) == math.floor(start1\
    \ / end2) and math.floor(end1 / end2) == math.floor(start2 / end2) and math.floor(end1\
    \ / end2) == math.floor(start1 / end2) and math.floor(end1 / end2) == math.floor(start2\
    \ / end2) and math.floor(end1 / end2) == math.floor(start1 / end2) and math.floor(end1\
    \ / end2) == math.floor(start2 / end2) and math.floor(end1 / end2) == math.floor(start1\
    \ / end2) and math.floor(end1 / end2) == math.", "    local start1, end1, start2,\
    \ end2\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return start1 <= end2 and\
    \ start2 <= end1 and\n        math.floor(math.sqrt(end1 - start1 + 1)) == math.floor(math.sqrt(end2\
    \ - start2 + 1)) and\n        math.floor(math.sqrt(end1 - start1 + 1)) == math.floor(math.sqrt(end2\
    \ - start2 + 1)) and\n        end1 - start1 == end2 - start2 and\n        end1\
    \ - start1 == end2 - start2 and\n        end1 - start1 == end2 - start2 and\n\
    \        end1 - start1 == end2 - start2 and\n        end1 - start1 == end2 - start2\
    \ and\n        end1 - start1 == end2 - start2 and\n        end1 - start1 == end2\
    \ - start2 and\n        end1 - start1 == end2 - start2 and\n        end1 - start1\
    \ == end2 - start2 and\n        end1 - start1 == end2 - start2 and\n        end1\
    \ - start1 == end2 - start2 and\n        end1 - start1 == end2 - start2 and\n\
    \        end1 - start1 == end2 - start2 and\n        end1 - start1 == end2 - start2\
    \ and\n        end1 - start1 == end2 - start2 and\n        end1 - start1 == end2\
    \ - start2 and\n        end1 - start1 == end2 - start2 and\n        end1 - start1\
    \ == end2 - start2 and\n        end1 - start1 == end2 - start2 and\n        end1\
    \ - start1 == end2 - start2 and\n        end1 - start1 == end2 - start2 and\n\
    \        end1 - start1 == end2 - start2 and\n        end1 - start1 == end2 - start2\
    \ and\n        end1 - start1 == end2 -", "    local start1, end1, start2, end2\n\
    \    start1 = interval1[1]\n    end1 = interval1[2]\n    start2 = interval2[1]\n\
    \    end2 = interval2[2]\n    if start1 > end2 or start2 > end1 then\n       \
    \ return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    local length =\
    \ end1 - start1 + 1\n    if length == 0 then\n        return \"NO\"\n    end1\
    \ = end1 + 1\n    end2 = end2 + 1\n    local length2 = end2 - start2 + 1\n   \
    \ if length2 == 0 then\n        return \"NO\"\n    end2 = end2 - 1\n    end1 =\
    \ end1 - 1\n    local length3 = end1 - start1 + 1\n    if length3 == 0 then\n\
    \        return \"NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n    local length4\
    \ = end2 - start2 + 1\n    if length4 == 0 then\n        return \"NO\"\n    end2\
    \ = end2 - 1\n    end1 = end1 - 1\n    local length5 = end1 - start1 + 1\n   \
    \ if length5 == 0 then\n        return \"NO\"\n    end1 = end1 + 1\n    end2 =\
    \ end2 + 1\n    local length6 = end2 - start2 + 1\n    if length6 == 0 then\n\
    \        return \"NO\"\n    end2 = end2 - 1\n    end1 = end1 - 1\n    local length7\
    \ = end1 - start1 + 1\n    if length7 == 0 then\n        return \"NO\"\n    end1\
    \ = end1 + 1\n    end2 = end2 + 1\n    local length8 = end2 - start2 + 1\n   \
    \ if length8 == 0 then\n        return \"NO\"\n    end2 = end2 - 1\n    end1 =\
    \ end1 - 1\n    local length9 = end1 - start1 + 1\n    if length9 == 0 then\n\
    \        return \"NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n    local length10\
    \ = end2 - start2 + 1\n    if length", "    local start1, end1, start2, end2\n\
    \    start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return (end1 - start1 + 1)\
    \ * (end2 - start2 + 1) == math.mod(end1 - start1 + 1, end2 - start2 + 1) and\
    \ \"YES\" or \"NO\"\nend", "    local start1, end1, start2, end2\n    start1,\
    \ end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    local length = end1 - start1\n    if length > end2 - start2 then\n      \
    \  return \"NO\"\n    end1, end2 = end2, end1\n    end2, start2 = start2, end2\n\
    \    end1, start1 = start1, end1\n    return \"YES\"\nend", "    local start1,\
    \ end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2,\
    \ end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n\
    \        return \"NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n    return end1\
    \ - start2\nend", "    local start1, end1, start2, end2 = interval1[1], interval1[2],\
    \ interval2[1], interval2[2]\n    local length = end1 - start1\n    local length2\
    \ = end2 - start2\n    if length < 0 or length2 < 0 then\n        return \"NO\"\
    \n    end\n    if length == 0 or length2 == 0 then\n        return \"NO\"\n  \
    \  end\n    if length == 1 or length2 == 1 then\n        return \"YES\"\n    end\n\
    \    if length % 2 == 0 or length2 % 2 == 0 then\n        return \"NO\"\n    end\n\
    \    if length == length2 then\n        return \"YES\"\n    end\n    return \"\
    NO\"\nend", "    local start1, end1, start2, end2\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    if start1 >\
    \ end2 or start2 > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n   \
    \ end2 = end2 - 1\n    return (end1 - start1 + 1) * (end2 - start2 + 1) == math.mod(end1\
    \ - start1 + 1, end2 - start2 + 1) and \"YES\" or \"NO\"\nend", "    local start1,\
    \ end1, start2, end2\n    start1 = interval1[1]\n    end1 = interval1[2]\n   \
    \ start2 = interval2[1]\n    end2 = interval2[2]\n    if start1 > end1 or start2\
    \ > end2 then\n        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n\
    \    return start2 <= end1 and end2 >= start1 and math.floor(end1 - start2 + 1)\
    \ == math.floor(end2 - start1 + 1) and math.floor(end1 - start2 + 1) == math.floor(end2\
    \ - start1 + 1) and math.floor(end1 - start2 + 1) == math.floor(end2 - start1\
    \ + 1) and math.floor(end1 - start2 + 1) == math.floor(end2 - start1 + 1) and\
    \ math.floor(end1 - start2 + 1) == math.floor(end2 - start1 + 1) and math.floor(end1\
    \ - start2 + 1) == math.floor(end2 - start1 + 1) and math.floor(end1 - start2\
    \ + 1) == math.floor(end2 - start1 + 1) and math.floor(end1 - start2 + 1) == math.floor(end2\
    \ - start1 + 1) and math.floor(end1 - start2 + 1) == math.floor(end2 - start1\
    \ + 1) and math.floor(end1 - start2 + 1) == math.floor(end2 - start1 + 1) and\
    \ math.floor(end1 - start2 + 1) == math.floor(end2 - start1 + 1) and math.floor(end1\
    \ - start2 + 1) == math.floor(end2 - start1 + 1) and math.floor(end1 - start2\
    \ + 1) == math.floor(end2 - start1 + 1) and math.floor(end1 - start2 + 1) == math.floor(end2\
    \ - start1 + 1) and math.floor(end1 - start2 + 1) == math.floor(end2 - start1\
    \ + 1) and math.floor(end1 - start2 + 1) == math.", "    local start1, end1, start2,\
    \ end2, length\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2\
    \ = interval2[1], interval2[2]\n    length = end1 - start1\n    if start1 > end2\
    \ or start2 > end1 then\n        return \"NO\"\n    end1 = end1 + 1\n    end2\
    \ = end2 + 1\n    return \"YES\"\nend", "    local start1, end1, start2, end2\n\
    \    start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return (end1 - start1 + 1)\
    \ * (end2 - start2 + 1) == math.mod(end1 - start1 + 1, end2 - start2 + 1) and\
    \ \"YES\" or \"NO\"\nend", "    local start1, end1, start2, end2\n    start1,\
    \ end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1 =\
    \ end1 - 1\n    end2 = end2 - 1\n    return (end1 - start1 + 1) * (end2 - start2\
    \ + 1) == math.mod(end1 - start1 + 1, end2 - start2 + 1) and \"YES\" or \"NO\"\
    \nend", "    local start1, end1, start2, end2\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    if start1 >\
    \ end2 or start2 > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n   \
    \ end2 = end2 - 1\n    return start1 <= end2 and start2 <= end1 and math.floor(end1)\
    \ - math.floor(start1) == math.floor(end2) - math.floor(start2) and math.floor(end1)\
    \ % 2 == math.floor(end2) % 2 and math.floor(end1) % 3 == math.floor(end2) % 3\
    \ and math.floor(end1) % 5 == math.floor(end2) % 5 and math.floor(end1) % 7 ==\
    \ math.floor(end2) % 7 and math.floor(end1) % 11 == math.floor(end2) % 11 and\
    \ math.floor(end1) % 13 == math.floor(end2) % 13 and math.floor(end1) % 17 ==\
    \ math.floor(end2) % 17 and math.floor(end1) % 19 == math.floor(end2) % 19 and\
    \ math.floor(end1) % 23 == math.floor(end2) % 23 and math.floor(end1) % 29 ==\
    \ math.floor(end2) % 29 and math.floor(end1) % 31 == math.floor(end2) % 31 and\
    \ math.floor(end1) % 37 == math.floor(end2) % 37 and math.floor(end1) % 41 ==\
    \ math.floor(end2) % 41 and math.floor(end1) % 43 == math.floor(end2) % 43 and\
    \ math.floor(end1) % 47 == math.floor(end2) % 47 and math.floor(end1) % 53 ==\
    \ math.floor(end2) % 53 and math.floor(end1) % 59 == math.floor(end2) % 59 and\
    \ math.floor(end1) % 61 == math.floor(end2) % 61 and math.floor(end1) % 67 ==\
    \ math.floor(end2)", "    local start1, end1, start2, end2\n    start1, end1 =\
    \ interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1 =\
    \ end1 + 1\n    end2 = end2 + 1\n    return (end1 - start1) * (end2 - start2)\
    \ == math.mod(end1 - start1, end2 - start2) and \"YES\" or \"NO\"\nend", "   \
    \ local start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n\
    \    return (end1 - start1 + 1) * (end2 - start2 + 1) == math.mod(end1 - start1\
    \ + 1, end2 - start2 + 1) and \"YES\" or \"NO\"\nend", "    local start1, end1,\
    \ start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2\
    \ = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n \
    \       return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return start1\
    \ > end2 and start2 > end1 and\n        math.floor(math.sqrt(start1 - end2)) *\
    \ math.floor(math.sqrt(start2 - end1)) == start1 - end2 and\n        math.floor(math.sqrt(end1\
    \ - start2)) * math.floor(math.sqrt(end2 - start1)) == end1 - start2\nend", " \
    \   local start1, end1, start2, end2 = interval1[1], interval1[2], interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1, end2 = end1 + 1, end2 + 1\n    return start1 <= end2 and start2\
    \ <= end1 and math.floor(math.sqrt(end1 - start1)) == math.floor(math.sqrt(end2\
    \ - start2)) and math.floor(math.sqrt(end1 - start1)) == math.floor(math.sqrt(end2\
    \ - start2)) and math.floor(math.sqrt(end1 - start1)) == math.floor(math.sqrt(end2\
    \ - start2)) and math.floor(math.sqrt(end1 - start1)) == math.floor(math.sqrt(end2\
    \ - start2)) and math.floor(math.sqrt(end1 - start1)) == math.floor(math.sqrt(end2\
    \ - start2)) and math.floor(math.sqrt(end1 - start1)) == math.floor(math.sqrt(end2\
    \ - start2)) and math.floor(math.sqrt(end1 - start1)) == math.floor(math.sqrt(end2\
    \ - start2)) and math.floor(math.sqrt(end1 - start1)) == math.floor(math.sqrt(end2\
    \ - start2)) and math.floor(math.sqrt(end1 - start1)) == math.floor(math.sqrt(end2\
    \ - start2)) and math.floor(math.sqrt(end1 - start1)) == math.floor(math.sqrt(end2\
    \ - start2)) and math.floor(math.sqrt(end1 - start1)) == math.floor(math.sqrt(end2\
    \ - start2)) and math.floor(math.sqrt(end1 - start1)) == math.floor(math.sqrt(end2\
    \ - start2)) and math.floor(math.sqrt(end1 - start1)) == math.floor(math.sqrt(end2\
    \ - start2)) and math.floor(math.sqrt(", "    local start1, end1, start2, end2,\
    \ length\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    length = end1 - start1\n    if length > end2 - start2 then\n\
    \        return \"NO\"\n    end1, end2 = end2, end1\n    length = end2 - start2\n\
    \    if length > end1 - start1 then\n        return \"NO\"\n    end1, end2 = end2,\
    \ end1\n    length = end1 - start1\n    if length == 1 then\n        return \"\
    YES\"\n    end1, end2 = end2, end1\n    length = end2 - start2\n    if length\
    \ == 1 then\n        return \"YES\"\n    end1, end2 = end2, end1\n    length =\
    \ end1 - start1\n    if length == 1 then\n        return \"YES\"\n    end1, end2\
    \ = end2, end1\n    length = end2 - start2\n    if length == 1 then\n        return\
    \ \"YES\"\n    end1, end2 = end2, end1\n    length = end1 - start1\n    if length\
    \ == 1 then\n        return \"YES\"\n    end1, end2 = end2, end1\n    length =\
    \ end2 - start2\n    if length == 1 then\n        return \"YES\"\n    end1, end2\
    \ = end2, end1\n    length = end1 - start1\n    if length == 1 then\n        return\
    \ \"YES\"\n    end1, end2 = end2, end1\n    length = end2 - start2\n    if length\
    \ == 1 then\n        return \"YES\"\n    end1, end2 = end2, end1\n    length =\
    \ end1 - start1\n    if length == 1 then\n        return \"YES\"\n    end1, end2\
    \ = end2, end1\n    length = end2 - start2\n    if length == 1 then\n        return\
    \ \"YES\"\n    end1, end2 = end2, end1\n    length = end1 - start1\n    if length\
    \ == 1 then\n        return \"YES\"\n    end1, end2 = end2,", "    local start1,\
    \ end1, start2, end2, length, prime\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    length = end1 - start1\n \
    \   if length > end2 - start2 then\n        length = end2 - start2\n    end1,\
    \ start2 = start2, end2\n    length = length - 1\n    prime = math.floor(math.sqrt(length))\n\
    \    for i = 1, prime, 2 do\n        if start1 + i <= end1 and start2 + i <= end2\
    \ then\n            if length % i == 0 then\n                return \"YES\"\n\
    \            end1, start2 = start2, end2\n            length = length - 1\n  \
    \      end2, start1 = start1, end1\n        length = length - 1\n    end1, start2\
    \ = start2, end2\n    length = length - 1\n    end2, start1 = start1, end1\n \
    \   length = length - 1\n    end1, start2 = start2, end2\n    length = length\
    \ - 1\n    end2, start1 = start1, end1\n    length = length - 1\n    end1, start2\
    \ = start2, end2\n    length = length - 1\n    end2, start1 = start1, end1\n \
    \   length = length - 1\n    end1, start2 = start2, end2\n    length = length\
    \ - 1\n    end2, start1 = start1, end1\n    length = length - 1\n    end1, start2\
    \ = start2, end2\n    length = length - 1\n    end2, start1 = start1, end1\n \
    \   length = length - 1\n    end1, start2 = start2, end2\n    length = length\
    \ - 1\n    end2, start1 = start1, end1\n    length = length - 1\n    end1, start2\
    \ = start2, end2\n    length = length - 1\n    end2, start1 = start1, end1\n \
    \   length = length - 1\n    end1, start2 = start2, end2\n    length = length\
    \ - 1\n    end2, start1 = start1", "    local start1, end1, start2, end2\n   \
    \ start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return start2 < end1 and end2\
    \ > start1 and isPrime(end1 - start2 + 1)\nend", "    local start1, end1, start2,\
    \ end2, length\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2\
    \ = interval2[1], interval2[2]\n    length = end1 - start1\n    if start1 > end2\
    \ or start2 > end1 then\n        return \"NO\"\n    end1, end2 = end1 + 1, end2\
    \ + 1\n    return (end2 - start2) == math.floor(math.sqrt(length * length - 1))\
    \ and \"YES\" or \"NO\"\nend", "    local start1, end1, start2, end2, length,\
    \ is_prime\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2 =\
    \ interval2[1], interval2[2]\n    length = end1 - start1\n    is_prime = is_prime_number(length)\n\
    \    if is_prime then\n        return \"YES\"\n    else\n        return \"NO\"\
    \n    end\nend", "    local start1, end1, start2, end2, length, result\n    start1,\
    \ end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1 =\
    \ end1 + 1\n    end2 = end2 + 1\n    length = end1 - start1\n    if length ==\
    \ 1 then\n        result = \"YES\"\n    elseif length % 2 == 0 then\n        result\
    \ = \"NO\"\n    else\n        result = \"YES\"\n    end\n    return result\nend",
  "    local start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n\
    \    return start1 <= end2 and start2 <= end1 and math.floor(end1) - math.floor(start1)\
    \ == math.floor(end2) - math.floor(start2) and math.floor(end1) - math.floor(start1)\
    \ == math.floor(end2) - math.floor(start2) and math.floor(end1) - math.floor(start1)\
    \ == math.floor(end2) - math.floor(start2) and math.floor(end1) - math.floor(start1)\
    \ == math.floor(end2) - math.floor(start2) and math.floor(end1) - math.floor(start1)\
    \ == math.floor(end2) - math.floor(start2) and math.floor(end1) - math.floor(start1)\
    \ == math.floor(end2) - math.floor(start2) and math.floor(end1) - math.floor(start1)\
    \ == math.floor(end2) - math.floor(start2) and math.floor(end1) - math.floor(start1)\
    \ == math.floor(end2) - math.floor(start2) and math.floor(end1) - math.floor(start1)\
    \ == math.floor(end2) - math.floor(start2) and math.floor(end1) - math.floor(start1)\
    \ == math.floor(end2) - math.floor(start2) and math.floor(end1) - math.floor(start1)\
    \ == math.floor(end2) - math.floor(start2) and math.floor(end1) - math.floor(start1)\
    \ == math.floor(end2) - math.floor(start2) and math.floor(end1) - math.floor(start1)\
    \ == math.floor(end2) - math", "    local start1, end1, start2, end2\n    start1,\
    \ end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1 =\
    \ end1 - 1\n    end2 = end2 - 1\n    return start1 > end2 and start2 > end1 and\n\
    \        math.floor(math.sqrt(start1 - end2)) * math.floor(math.sqrt(start2 -\
    \ end1)) == math.floor(start1 - end2) * math.floor(start2 - end1) and\n      \
    \  math.floor(math.sqrt(end1 - start2)) * math.floor(math.sqrt(end2 - start1))\
    \ == math.floor(end1 - start2) * math.floor(end2 - start1) and\n        \"YES\"\
    \nend", "    local start1, end1, start2, end2\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    if start1 >\
    \ end2 or start2 > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n   \
    \ end2 = end2 - 1\n    return start1 <= end2 and start2 <= end1 and math.floor(end1\
    \ - start1) == math.floor(end2 - start2) and math.floor(end1 - start1) % 2 ==\
    \ 0\nend", "    local start1, end1, start2, end2, length\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    if start1 >\
    \ end1 or start2 > end2 then\n        return \"NO\"\n    end1, end2 = end1, end2\n\
    \    length = end1 - start1\n    if length < end2 - start2 then\n        length\
    \ = end2 - start2\n    end1, end2 = end2, end1\n    length = end1 - start1\n \
    \   if length < end2 - start2 then\n        length = end2 - start2\n    end1,\
    \ end2 = end2, end1\n    length = end1 - start1\n    if length < end2 - start2\
    \ then\n        length = end2 - start2\n    end1, end2 = end2, end1\n    length\
    \ = end1 - start1\n    if length < end2 - start2 then\n        length = end2 -\
    \ start2\n    end1, end2 = end2, end1\n    length = end1 - start1\n    if length\
    \ < end2 - start2 then\n        length = end2 - start2\n    end1, end2 = end2,\
    \ end1\n    length = end1 - start1\n    if length < end2 - start2 then\n     \
    \   length = end2 - start2\n    end1, end2 = end2, end1\n    length = end1 - start1\n\
    \    if length < end2 - start2 then\n        length = end2 - start2\n    end1,\
    \ end2 = end2, end1\n    length = end1 - start1\n    if length < end2 - start2\
    \ then\n        length = end2 - start2\n    end1, end2 = end2, end1\n    length\
    \ = end1 - start1\n    if length < end2 - start2 then\n        length = end2 -\
    \ start2\n    end1, end2 = end2, end1\n    length = end1 - start1\n    if length\
    \ < end2 - start2 then\n        length = end2 - start2\n    end1, end2 = end2,\
    \ end1\n    length = end1 -", "    local start1, end1, start2, end2, length, result\n\
    \    start1 = interval1[1]\n    end1 = interval1[2]\n    start2 = interval2[1]\n\
    \    end2 = interval2[2]\n    if start1 > end1 or start2 > end2 then\n       \
    \ return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    length = end1 -\
    \ start1 + 1\n    if length == 0 then\n        return \"NO\"\n    end1 = end1\
    \ + 1\n    end2 = end2 + 1\n    result = \"\"\n    for i = start1, end1, 1 do\n\
    \        for j = start2, end2, 1 do\n            if i == j then\n            \
    \    result = result .. \"YES\"\n                break\n            end2 = end2\
    \ - 1\n            if end2 < start2 then\n                break\n        end1\
    \ = end1 - 1\n        if end1 < start1 then\n            break\n    end1 = end1\
    \ + 1\n    end2 = end2 + 1\n    if length == 1 then\n        return result\n \
    \   end1 = end1 - 1\n    end2 = end2 - 1\n    for i = start1, end1, 1 do\n   \
    \     for j = start2, end2, 1 do\n            if i == j then\n               \
    \ result = result .. \"YES\"\n                break\n            end2 = end2 -\
    \ 1\n            if end2 < start2 then\n                break\n        end1 =\
    \ end1 - 1\n        if end1 < start1 then\n            break\n    end1 = end1\
    \ + 1\n    end2 = end2 + 1\n    return result\nend", "    local start1, end1,\
    \ start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2\
    \ = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n \
    \       return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return (end1\
    \ - start1 + 1) * (end2 - start2 + 1) == math.mod(end1 - start1 + 1, end2 - start2\
    \ + 1) and \"YES\" or \"NO\"\nend", "    local start1, end1, start2, end2\n  \
    \  start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return start1 <= end2 and\
    \ start2 <= end1 and math.floor(end1) - math.floor(start1) == math.floor(end2)\
    \ - math.floor(start2) and math.floor(end1) - math.floor(start1) == math.floor(end2)\
    \ - math.floor(start2) and math.floor(end1) - math.floor(start1) == math.floor(end2)\
    \ - math.floor(start2) and math.floor(end1) - math.floor(start1) == math.floor(end2)\
    \ - math.floor(start2) and math.floor(end1) - math.floor(start1) == math.floor(end2)\
    \ - math.floor(start2) and math.floor(end1) - math.floor(start1) == math.floor(end2)\
    \ - math.floor(start2) and math.floor(end1) - math.floor(start1) == math.floor(end2)\
    \ - math.floor(start2) and math.floor(end1) - math.floor(start1) == math.floor(end2)\
    \ - math.floor(start2) and math.floor(end1) - math.floor(start1) == math.floor(end2)\
    \ - math.floor(start2) and math.floor(end1) - math.floor(start1) == math.floor(end2)\
    \ - math.floor(start2) and math.floor(end1) - math.floor(start1) == math.floor(end2)\
    \ - math.floor(start2) and math.floor(end1) - math.floor(start1) == math.floor(end2)\
    \ - math.floor(start2) and math.floor(end1) - math.floor(start1) == math.floor(end2)\
    \ - math", "    local start1, end1, start2, end2, length, i, j\n    start1, end1\
    \ = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end1 or start2 > end2 then\n        return \"NO\"\n    end1 =\
    \ end1 + 1\n    end2 = end2 + 1\n    length = end1 - start1\n    for i = start1\
    \ + 1 to end1 do\n        for j = start2 + 1 to end2 do\n            if i == j\
    \ then\n                length = length - 1\n            end\n        end\n  \
    \  end\n    if length == 1 then\n        return \"YES\"\n    end\n    return \"\
    NO\"\nend", "    local start1, end1, start2, end2 = interval1[1], interval1[2],\
    \ interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n   \
    \     return \"NO\"\n    end1, end2 = end1 - 1, end2 - 1\n    return start1 <=\
    \ end2 and start2 <= end1 and (end2 - start1 + 1) == math.floor((end2 - start1\
    \ + 1)/2) and (end1 - start2 + 1) == math.floor((end1 - start2 + 1)/2)\nend",
  "    local start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n\
    \    return start1 <= end2 and end1 >= start2 and isPrime(end1 - start1 + 1)\n\
    end", "    local start1, end1, start2, end2 = interval1[1], interval1[2], interval2[1],\
    \ interval2[2]\n    local length = end1 - start1\n    local length2 = end2 - start2\n\
    \    if length > length2 then\n        return \"NO\"\n    end\n    if length <\
    \ length2 then\n        return \"NO\"\n    end\n    if length == length2 then\n\
    \        return \"YES\"\n    end\n    return \"NO\"\nend", "    local start1,\
    \ end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2,\
    \ end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n\
    \        return \"NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n    return end1\
    \ - start2 and end2 - start1 and isPrime(end1 - start2) and isPrime(end2 - start1)\n\
    end", "    local start1, end1, start2, end2 = interval1[1], interval1[2], interval2[1],\
    \ interval2[2]\n    local result = false\n    if start1 <= end2 and start2 <=\
    \ end1 then\n        local length = end1 - start1\n        local isPrime = true\n\
    \        for i = 1, length, 2 do\n            if not (start1 + i) % length then\n\
    \                isPrime = false\n                break\n            end\n   \
    \     end\n        if isPrime then\n            result = true\n        end\n \
    \   end\n    return result\nend", "    local start1, end1, start2, end2\n    start1,\
    \ end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1 =\
    \ end1 - 1\n    end2 = end2 - 1\n    return (end1 - start1 + 1) * (end2 - start2\
    \ + 1) == math.mod(end1 - start1 + 1, end2 - start2 + 1) and \"YES\" or \"NO\"\
    \nend", "    local start1, end1, start2, end2\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    if start1 >\
    \ end2 or start2 > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n   \
    \ end2 = end2 - 1\n    return (end1 - start1 + 1) * (end2 - start2 + 1) == math.mod(end1\
    \ - start1 + 1, end2 - start2 + 1) and \"YES\" or \"NO\"\nend", "    local start1,\
    \ end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2,\
    \ end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n\
    \        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return (end1\
    \ - start1 + 1) * (end2 - start2 + 1) == math.mod(end1 - start1 + 1, end2 - start2\
    \ + 1) and \"YES\" or \"NO\"\nend", "    local start1, end1, start2, end2\n  \
    \  start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return (end1 - start1 + 1)\
    \ * (end2 - start2 + 1) == math.mod(end1 - start1 + 1, end2 - start2 + 1) and\
    \ \"YES\" or \"NO\"\nend", "    local start1, end1, start2, end2\n    start1,\
    \ end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1,\
    \ end2 = end1, end2\n    return end1 - start1 + 1 == math.floor(math.sqrt(end1\
    \ - start1)) and\n        end2 - start2 + 1 == math.floor(math.sqrt(end2 - start2))\
    \ and\n        end1 - start1 + 1 == end2 - start2 + 1 and\n        end1 - start1\
    \ + 1 == math.floor(end1 - start1) and\n        end2 - start2 + 1 == math.floor(end2\
    \ - start2) and\n        end1 - start1 + 1 == math.floor(end1 - start1) and\n\
    \        end2 - start2 + 1 == math.floor(end2 - start2) and\n        end1 - start1\
    \ + 1 == math.floor(end1 - start1) and\n        end2 - start2 + 1 == math.floor(end2\
    \ - start2) and\n        end1 - start1 + 1 == math.floor(end1 - start1) and\n\
    \        end2 - start2 + 1 == math.floor(end2 - start2) and\n        end1 - start1\
    \ + 1 == math.floor(end1 - start1) and\n        end2 - start2 + 1 == math.floor(end2\
    \ - start2) and\n        end1 - start1 + 1 == math.floor(end1 - start1) and\n\
    \        end2 - start2 + 1 == math.floor(end2 - start2) and\n        end1 - start1\
    \ + 1 == math.floor(end1 - start1) and\n        end2 - start2 + 1 == math.floor(end2\
    \ - start2) and\n        end1 - start1 + 1 == math.floor(end1 - start1) and\n\
    \        end2 - start2 + 1 == math.floor(end2 - start2) and\n        end1 - start1\
    \ + 1 == math.floor(end1 - start1) and\n", "    local start1, end1, start2, end2\n\
    \    start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return (end1 - start1 + 1)\
    \ * (end2 - start2 + 1) == math.mod(end1 - start1 + 1, end2 - start2 + 1) and\
    \ \"YES\" or \"NO\"\nend", "    local start1, end1, start2, end2, length\n   \
    \ start1 = interval1[1]\n    end1 = interval1[2]\n    start2 = interval2[1]\n\
    \    end2 = interval2[2]\n    length = end1 - start1\n    if length < end2 - start2\
    \ then\n        return \"NO\"\n    end\n    end\n    return \"YES\"\nend", " \
    \   local start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n\
    \    return (end1 - start1 + 1) * (end2 - start2 + 1) == math.mod(end1 - start1\
    \ + 1, end2 - start2 + 1) and \"YES\" or \"NO\"\nend", "    local start1, end1,\
    \ start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2\
    \ = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n \
    \       return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return (end1\
    \ - start1 + 1) * (end2 - start2 + 1) == math.mod(end1 - start1 + 1, end2 - start2\
    \ + 1) and \"YES\" or \"NO\"\nend", "    local start1, end1, start2, end2\n  \
    \  start1, end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1],\
    \ interval2[2]\n    if start1 > end2 or start2 > end1 then\n        return \"\
    NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return (end1 - start1 + 1)\
    \ * (end2 - start2 + 1) == math.mod(end1 - start1 + 1, end2 - start2 + 1) and\
    \ \"YES\" or \"NO\"\nend", "    local start1, end1, start2, end2\n    start1,\
    \ end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1 =\
    \ end1 - 1\n    end2 = end2 - 1\n    return start1 <= end2 and start2 <= end1\
    \ and\n        math.floor(end1 / math.floor(end2 / start1)) == math.floor(end2\
    \ / start1)\nend", "    local start1, end1, start2, end2, result\n    start1,\
    \ end1 = interval1[1], interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n\
    \    if start1 > end2 or start2 > end1 then\n        return \"NO\"\n    end1,\
    \ end2 = end1 - 1, end2 - 1\n    result = math.min(end1, end2) - math.max(start1,\
    \ start2) + 1\n    return result == math.floor(result) and \"YES\" or \"NO\"\n\
    end", "    local start1, end1, start2, end2\n    start1, end1 = interval1[1],\
    \ interval1[2]\n    start2, end2 = interval2[1], interval2[2]\n    if start1 >\
    \ end2 or start2 > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n   \
    \ end2 = end2 - 1\n    return (end1 - start1 + 1) * (end2 - start2 + 1) == math.mod(end1\
    \ - start1 + 1, end2 - start2 + 1) and \"YES\" or \"NO\"\nend", "    local start1,\
    \ end1, start2, end2, length\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end1 then\n  \
    \      start1, end1 = end1, start1\n    end1 = end1 + 1\n    end2 = end2 + 1\n\
    \    length = end1 - start1\n    if length == 0 then\n        return \"NO\"\n\
    \    end1 = end1 - 1\n    end2 = end2 - 1\n    length = end2 - start2\n    if\
    \ length == 0 then\n        return \"NO\"\n    end2 = end2 - 1\n    length = end1\
    \ - start2\n    if length == 0 then\n        return \"NO\"\n    end1 = end1 -\
    \ 1\n    length = end2 - start1\n    if length == 0 then\n        return \"NO\"\
    \n    end2 = end2 - 1\n    length = end1 - start2\n    if length == 0 then\n \
    \       return \"NO\"\n    end1 = end1 - 1\n    length = end2 - start1\n    if\
    \ length == 0 then\n        return \"NO\"\n    end2 = end2 - 1\n    length = end1\
    \ - start2\n    if length == 0 then\n        return \"NO\"\n    end1 = end1 -\
    \ 1\n    length = end2 - start1\n    if length == 0 then\n        return \"NO\"\
    \n    end2 = end2 - 1\n    length = end1 - start2\n    if length == 0 then\n \
    \       return \"NO\"\n    end1 = end1 - 1\n    length = end2 - start1\n    if\
    \ length == 0 then\n        return \"NO\"\n    end2 = end2 - 1\n    length = end1\
    \ - start2\n    if length == 0 then\n        return \"NO\"\n    end1 = end1 -\
    \ 1\n    length = end2 - start1\n    if length == 0 then\n        return \"NO\"\
    \n    end2 = end2 - 1\n    length = end1 - start2\n    if length == 0 then\n \
    \       return \"NO\"\n    end1 = end1 - 1\n    length = end2 - start1", "   \
    \ local start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n\
    \    return (end1 - start1 + 1) * (end2 - start2 + 1) == math.mod(end1 - start1\
    \ + 1, end2 - start2 + 1) and \"YES\" or \"NO\"\nend", "    local start1, end1,\
    \ start2, end2\n    start1, end1 = interval1[1], interval1[2]\n    start2, end2\
    \ = interval2[1], interval2[2]\n    if start1 > end2 or start2 > end1 then\n \
    \       return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n    return start1\
    \ <= end2 and end1 >= start2 and isPrime(end1 - start1 + 1)\nend", "    local\
    \ start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1 = end1 - 1\n    end2 = end2 - 1\n\
    \    return start1 <= end2 and start2 <= end1 and\n        math.floor(end1 / math.floor(end2\
    \ / start1)) == math.floor(end2 / start1) and\n        math.floor(end2 / math.floor(end1\
    \ / start2)) == math.floor(end1 / start2) and\n        math.floor(end1 / math.floor(end2\
    \ / start1)) * math.floor(end2 / start1) == end1 and\n        math.floor(end2\
    \ / math.floor(end1 / start2)) * math.floor(end1 / start2) == end2\nend", "  \
    \  local start1, end1, start2, end2\n    start1, end1 = interval1[1], interval1[2]\n\
    \    start2, end2 = interval2[1], interval2[2]\n    if start1 > end2 or start2\
    \ > end1 then\n        return \"NO\"\n    end1 = end1 + 1\n    end2 = end2 + 1\n\
    \    return (end1 - start1) * (end2 - start2) == math.mod(end1 - start1, end2\
    \ - start2) and \"YES\" or \"NO\"\nend", "    local start1, end1, start2, end2,\
    \ length, i, j\n    start1 = interval1[1]\n    end1 = interval1[2]\n    start2\
    \ = interval2[1]\n    end2 = interval2[2]\n    length = end1 - start1\n    if\
    \ length < end2 - start2 then\n        return \"NO\"\n    end1 = end1 + 1\n  \
    \  end2 = end2 + 1\n    for i = start1, end1, 1 do\n        for j = start2, end2,\
    \ 1 do\n            if i > j then\n                return \"NO\"\n           \
    \ end2 = end2 + 1\n        end1 = end1 + 1\n    end1 = end1 - 1\n    end2 = end2\
    \ - 1\n    return \"YES\"\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
