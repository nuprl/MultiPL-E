{
  "language": "lua",
  "name": "HumanEval_163_generate_integers",
  "results": [
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ddgmde0.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp4ddgmde0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            result[i] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w4qqmne.lua:23: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmp5w4qqmne.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        result[i] = i\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpli2a9wp5.lua:21: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmpli2a9wp5.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        t[i] = true\n    end\n    return t.keys()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsws2ele_.lua:15: attempt to call a nil value (field 'keys')\nstack traceback:\n\t/tmp/tmpsws2ele_.lua:15: in local 'candidate'\n\t/tmp/tmpsws2ele_.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq3hv831.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmpiq3hv831.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphtb2e14i.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmphtb2e14i.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > b then break end\n        if i % 2 == 0 then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp32f6xjio.lua:24: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp32f6xjio.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ddgmde0.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp4ddgmde0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        result[i] = i\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpli2a9wp5.lua:21: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmpli2a9wp5.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ddgmde0.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp4ddgmde0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ddgmde0.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp4ddgmde0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            result[i] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w4qqmne.lua:23: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmp5w4qqmne.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i > 0 then\n            result[i] = i\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w4qqmne.lua:23: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmp5w4qqmne.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        result[i] = i\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpli2a9wp5.lua:21: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmpli2a9wp5.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpefflfnfi.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmpefflfnfi.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        result[i] = i\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpli2a9wp5.lua:21: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmpli2a9wp5.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(t, i)\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ddgmde0.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmp4ddgmde0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        result[i] = i\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpli2a9wp5.lua:21: expected: {2, 4, 6, 8}\nactual: {2=2, 4=4, 6=6, 8=8, 10=10}\nstack traceback:\n\t/tmp/tmpli2a9wp5.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local t = {}\n    for i = a, b, 2 do\n        table.insert(t, i)\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbaebno38.lua:21: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmpbaebno38.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    },
    {
      "exit_code": 1,
      "program": "-- Given two positive integers a and b, return the even digits between a\n-- and b, in ascending order.\n-- For example:\n-- >>> generate_integers(2, 8) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(8, 2) \n-- [2, 4, 6, 8]\n-- >>> generate_integers(10, 14) \n-- []\nlocal function generate_integers(a, b)\n    local result = {}\n    for i = a, b, 2 do\n        if i % 2 == 0 then\n            table.insert(result, i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = generate_integers\n    lu.assertEquals(candidate(2, 10), {2, 4, 6, 8})\n    lu.assertEquals(candidate(10, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(132, 2), {2, 4, 6, 8})\n    lu.assertEquals(candidate(17, 89), {})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpefflfnfi.lua:23: expected: {2, 4, 6, 8}\nactual: {2, 4, 6, 8, 10}\nstack traceback:\n\t/tmp/tmpefflfnfi.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907490
    }
  ]
}