name: HumanEval_80_is_happy
language: lua
prompt: "-- You are given a string s.\n-- Your task is to check if the string is haplua\
  \ or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive\
  \ letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- False\n-- >>> is_happy(aa)\n\
  -- False\n-- >>> is_happy(abcd)\n-- True\n-- >>> is_happy(aabb)\n-- False\n-- >>>\
  \ is_happy(adb)\n-- True\n-- >>> is_happy(xyy)\n-- False\nlocal function is_happy(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
  \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
  \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
  \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
  \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
  \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local t = {}\n    for i = 1, #s, 3 do\n        if s[i] ~= s[i+1]\
    \ and s[i+1] ~= s[i+2] then\n            t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n\
    \        end\n    end\n    return #t == #s\nend", "    if len(s) < 3 then return\
    \ false end\n    local t = {}\n    for i = 1, len(s), 3 do\n        if t[s[i]]\
    \ == true then return false end\n        t[s[i]] = true\n    end\n    return true\n\
    end", "    if s:len() < 3 then return false end\n    local t = {}\n    for i =\
    \ 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n\
    \            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]]\
    \ = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]]\
    \ and t[s[i+1]] and t[s[i+2]] then\n            return true\n        end\n   \
    \ end\n    return false\nend\nprint(is_happy(\"a\"))\nprint(is_happy(\"aa\"))\n\
    print(is_happy(\"abcd\"))\nprint(is_happy(\"aabb\"))\nprint(is_happy(\"adb\"))\n\
    print(is_happy(\"xyy\"))\n<|endoftext|><|python|>#                           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \               ", "    if s:len() < 3 then return false end\n    local t = {}\n\
    \    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2]\
    \ then\n            t[s[i]] = true\n            t[s[i+1]] = true\n           \
    \ t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n \
    \       if not t[s[i]] or not t[s[i+1]] or not t[s[i+2]] then\n            return\
    \ false\n        end\n    end\n    return true\nend\nprint(is_happy('a'))\nprint(is_happy('aa'))\n\
    print(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n\
    <|endoftext|><|python|>#", "    if s:len() < 3 then return false end\n    local\
    \ t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s:sub(i, i + 3) ~= s:sub(i\
    \ + 1, i + 3) then return false end\n        t[s:sub(i, i + 3)] = true\n    end\n\
    \    return true\nend", "    if len(s) < 3 then return false end\n    local t\
    \ = {}\n    for i = 1, len(s), 3 do\n        if t[s[i]] == true then return false\
    \ end\n        t[s[i]] = true\n    end\n    return true\nend", "    local t =\
    \ {}\n    for i = 1, #s, 3 do\n        if t[s[i]] == s[i+1] and t[s[i+1]] == s[i+2]\
    \ then\n            return true\n        end\n        t[s[i]] = s[i+1]\n     \
    \   t[s[i+1]] = s[i+2]\n    end\n    return false\nend", "    local t = {}\n \
    \   for i = 1, #s, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n\
    \            t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n        end\n    end\n  \
    \  return #t == #s\nend", "    if len(s) < 3 then return false end\n    local\
    \ t = {}\n    for i = 1, len(s) - 2 do\n        if s[i] == s[i+1] and s[i+1] ==\
    \ s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n    \
    \        t[s[i+2]] = true\n        end\n    end\n    for i = 1, len(s) - 1 do\n\
    \        if not t[s[i]] or not t[s[i+1]] then return false end\n    end\n    return\
    \ true\nend", "    if len(s) < 3 then return false end\n    local t = {}\n   \
    \ for i = 1, len(s), 3 do\n        if t[s[i]] == true then return false end\n\
    \        t[s[i]] = true\n    end\n    return true\nend", "    if len(s) < 3 then\
    \ return false end\n    local t = {}\n    for i = 1, len(s), 3 do\n        if\
    \ t[s[i-1]] == s[i] or t[s[i]] == s[i-1] then return false end\n        t[s[i-1]]\
    \ = s[i]\n    end\n    return true\nend", "    if s:len() < 3 then return false\
    \ end\n    local t = {}\n    for i = 1, s:len(), 3 do\n        if s:sub(i, i +\
    \ 3) ~= s:sub(i, i + 3) then return false end\n        table.insert(t, s:sub(i,\
    \ i + 3))\n    end\n    return true\nend", "    if s:len() < 3 then return false\
    \ end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] ==\
    \ s[i + 1] and s[i + 1] == s[i + 2] then\n            t[s[i]] = true\n       \
    \     t[s[i + 1]] = true\n            t[s[i + 2]] = true\n        end\n    end\n\
    \    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and t[s[i + 1]] and t[s[i\
    \ + 2]] then\n            return true\n        end\n    end\n    return false\n\
    end\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\n\
    print(is_happy('adb'))\nprint(is_happy('xyy'))\n<|endoftext|><|python|>#     \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                     ", "    if s:len() < 3 then return false end\n    local\
    \ t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1]\
    \ == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n \
    \           t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1,\
    \ 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]]\
    \ = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n       \
    \ end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and t[s[i+1]]\
    \ and t[s[i+2]] then\n            return true\n        end\n    end\n    return\
    \ false\nend", "    if s:len() < 3 then return false end\n    local t = {}\n \
    \   for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2]\
    \ then\n            t[s[i]] = true\n            t[s[i+1]] = true\n           \
    \ t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n \
    \       if t[s[i]] and t[s[i+1]] and t[s[i+2]] then\n            return true\n\
    \        end\n    end\n    return false\nend\nprint(is_happy('a'))\nprint(is_happy('aa'))\n\
    print(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n\
    <|endoftext|><|python|>#                                                     \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                 ", "    local t = {}\n    for\
    \ i = 1, #s, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n     \
    \       t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n        end\n    end\n    return\
    \ #t == #s\nend", "    if s:len() < 3 then return false end\n    local t = {}\n\
    \    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2]\
    \ then\n            t[s[i]] = true\n            t[s[i+1]] = true\n           \
    \ t[s[i+2]] = true\n        end\n    end\n    for k, v in pairs(t) do\n      \
    \  if v == false then\n            return false\n        end\n    end\n    return\
    \ true\nend", "    if s:len() < 3 then return false end\n    local t = {}\n  \
    \  for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2]\
    \ then\n            t[s[i]] = true\n            t[s[i+1]] = true\n           \
    \ t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n \
    \       if t[s[i]] and t[s[i+1]] and t[s[i+2]] then\n            return true\n\
    \        end\n    end\n    return false\nend", "    local t = {}\n    for i =\
    \ 1, #s, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n         \
    \   t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n        end\n    end\n    return #t\
    \ == #s\nend\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\n\
    print(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n<|endoftext|><|python|>#\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ", "    local t = {}\n\
    \    for i = 1, #s, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n\
    \            t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n        end\n    end\n  \
    \  return #t == #s\nend", "    if len(s) < 3 then return false end\n    local\
    \ t = {}\n    for i = 1, len(s) - 2, 3 do\n        if s[i] == s[i+1] and s[i+1]\
    \ == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n \
    \           t[s[i+2]] = true\n        end\n    end\n    for i = 1, len(s) - 1\
    \ do\n        if not t[s[i]] and not t[s[i+1]] then return false end\n    end\n\
    \    return true\nend", "    if len(s) < 3 then return false end\n    local t\
    \ = {}\n    for i = 1, len(s) - 2, 3 do\n        if s[i] == s[i+1] and s[i+1]\
    \ == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n \
    \           t[s[i+2]] = true\n        end\n    end\n    for i = 1, len(s) - 1\
    \ do\n        if t[s[i]] and t[s[i+1]] then\n            return false\n      \
    \  end\n    end\n    return true\nend\nprint(is_happy(\"a\"))\nprint(is_happy(\"\
    aa\"))\nprint(is_happy(\"abcd\"))\nprint(is_happy(\"aabb\"))\nprint(is_happy(\"\
    adb\"))\nprint(is_happy(\"xyy\"))\n", "    if s:len() < 3 then return false end\n\
    \    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s:sub(i, i + 3)\
    \ ~= s:sub(i + 1, i + 3) then return false end\n        t[s:sub(i, i + 3)] = true\n\
    \    end\n    return true\nend", "    if s:len() < 3 then return false end\n \
    \   local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1]\
    \ and s[i+1] == s[i+2] then\n            if t[s[i]] == nil then\n            \
    \    t[s[i]] = 1\n            else\n                t[s[i]] = t[s[i]] + 1\n  \
    \          end\n        end\n    end\n    for i = 1, s:len() - 2, 3 do\n     \
    \   if t[s[i]] == t[s[i+1]] and t[s[i+1]] == t[s[i+2]] then\n            return\
    \ true\n        end\n    end\n    return false\nend\nprint(is_happy('a'))\nprint(is_happy('aa'))\n\
    print(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n",
  "    local t = {}\n    for i = 1, #s, 3 do\n        if t[s[i]] == true then\n  \
    \          return false\n        end\n        t[s[i]] = true\n    end\n    return\
    \ true\nend", "    local t = {}\n    for i = 1, #s, 3 do\n        if s[i] == s[i+1]\
    \ and s[i+1] == s[i+2] then\n            t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n\
    \        end\n    end\n    return #t == #s\nend", "    local t = {}\n    for i\
    \ = 1, #s, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n       \
    \     t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n        end\n    end\n    return\
    \ #t == #s\nend", "    if s:len() < 3 then return false end\n    local t = {}\n\
    \    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2]\
    \ then\n            t[s[i]] = true\n            t[s[i+1]] = true\n           \
    \ t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n \
    \       if not t[s[i]] or not t[s[i+1]] or not t[s[i+2]] then\n            return\
    \ false\n        end\n    end\n    return true\nend\nprint(is_happy(\"abcd\"))\n\
    print(is_happy(\"aabb\"))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"xyy\"))\n",
  "    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len(),\
    \ 3 do\n        if s:sub(i, i + 3) ~= s:sub(i, i + 3) then return false end\n\
    \        table.insert(t, s:sub(i, i + 3))\n    end\n    return true\nend\nprint(is_happy('a'))\n\
    print(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\n\
    print(is_happy('xyy'))\n", "    if s:len() < 3 then return false end\n    local\
    \ t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s:sub(i, i + 3) ~= s:sub(i\
    \ + 1, i + 3) then return false end\n        t[s:sub(i, i + 3)] = true\n    end\n\
    \    return true\nend", "    if s:len() < 3 then return false end\n    local t\
    \ = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1]\
    \ == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n \
    \           t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1,\
    \ 3 do\n        if not t[s[i]] or not t[s[i+1]] or not t[s[i+2]] then\n      \
    \      return false\n        end\n    end\n    return true\nend\nprint(is_happy('abcd'))\n\
    print(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\nprint(is_happy('abcd'))\n\
    print(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n", " \
    \   if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len()\
    \ - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n           \
    \ t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n\
    \        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and\
    \ t[s[i+1]] and t[s[i+2]] then\n            return true\n        end\n    end\n\
    \    return false\nend\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\n\
    print(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n", " \
    \   if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len()\
    \ - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n           \
    \ t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n\
    \        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and\
    \ t[s[i+1]] and t[s[i+2]] then\n            return true\n        end\n    end\n\
    \    return false\nend\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\n\
    print(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n", " \
    \   if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len()\
    \ - 2, 3 do\n        if s[i] == s[i + 1] and s[i + 1] == s[i + 2] then\n     \
    \       t[s[i]] = true\n            t[s[i + 1]] = true\n            t[s[i + 2]]\
    \ = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]]\
    \ and t[s[i + 1]] and t[s[i + 2]] then\n            return true\n        end\n\
    \    end\n    return false\nend\nprint(is_happy('a'))\nprint(is_happy('aa'))\n\
    print(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n",
  "    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len()\
    \ - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n           \
    \ t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n\
    \        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if not t[s[i]]\
    \ or not t[s[i+1]] or not t[s[i+2]] then\n            return false\n        end\n\
    \    end\n    return true\nend", "    if s:len() < 3 then return false end\n \
    \   local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s:sub(i, i + 3)\
    \ ~= s:sub(i + 1, i + 3) then return false end\n        table.insert(t, s:sub(i,\
    \ i + 3))\n    end\n    return true\nend\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\n\
    print(is_happy('adb'))\nprint(is_happy('xyy'))\n", "    if s:len() < 3 then return\
    \ false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i]\
    \ == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = t[s[i+1]] = t[s[i+2]]\
    \ = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]]\
    \ and t[s[i+1]] and t[s[i+2]] then\n            return true\n        end\n   \
    \ end\n    return false\nend\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\n\
    print(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n", " \
    \   local t = {}\n    for i = 1, #s, 3 do\n        if s[i] == s[i+1] and s[i+1]\
    \ == s[i+2] then\n            t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n       \
    \ end\n    end\n    return #t == #s\nend", "    local t = {}\n    for i = 1, #s,\
    \ 3 do\n        if t[s[i]] == nil then\n            t[s[i]] = 1\n        else\n\
    \            return false\n        end\n    end\n    return true\nend", "    if\
    \ s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len(),\
    \ 3 do\n        if s:sub(i, i + 3) ~= s:sub(i, i + 3) then return false end\n\
    \        table.insert(t, s:sub(i, i + 3))\n    end\n    return true\nend", " \
    \   if len(s) < 3 then\n        return false\n    end\n    local function is_consecutive_distinct(a,\
    \ b)\n        return a != b\n    end\n    for i = 1, len(s), 3 do\n        if\
    \ not is_consecutive_distinct(s[i], s[i+1]) or not is_consecutive_distinct(s[i+1],\
    \ s[i+2]) then\n            return false\n        end\n    end\n    return true\n\
    end\nprint(is_happy(a))\nprint(is_happy(aa))\nprint(is_happy(abcd))\nprint(is_happy(aabb))\n\
    print(is_happy(adb))\nprint(is_happy(xyy))\n", "    local t = {}\n    for i =\
    \ 1, #s, 3 do\n        if t[s[i]] == s[i+1] and t[s[i+1]] == s[i+2] then\n   \
    \         return true\n        end\n    end\n    return false\nend", "    if s:len()\
    \ < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n\
    \        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n\
    \            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n   \
    \ end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and t[s[i+1]] and\
    \ t[s[i+2]] then\n            return true\n        end\n    end\n    return false\n\
    end\nprint(is_happy(\"a\"))\nprint(is_happy(\"aa\"))\nprint(is_happy(\"abcd\"\
    ))\nprint(is_happy(\"aabb\"))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"xyy\"\
    ))\n", "    if s:len() < 3 then return false end\n    local t = {}\n    for i\
    \ = 1, s:len() - 2, 3 do\n        if s:sub(i, i + 3) ~= s:sub(i + 1, i + 3) then\
    \ return false end\n        table.insert(t, s:sub(i, i + 3))\n    end\n    return\
    \ true\nend", "    if s:len() < 3 then return false end\n    local t = {}\n  \
    \  for i = 1, s:len(), 3 do\n        if s:sub(i, i + 3) ~= s:sub(i, i + 3) then\
    \ return false end\n        table.insert(t, s:sub(i, i + 3))\n    end\n    return\
    \ true\nend", "    if s:len() < 3 then return false end\n    local t = {}\n  \
    \  for i = 1, s:len(), 3 do\n        if s:sub(i, i + 3) ~= s:sub(i, i + 3) then\
    \ return false end\n        table.insert(t, s:sub(i, i + 3))\n    end\n    return\
    \ true\nend", "    if s:len() < 3 then return false end\n    local t = {}\n  \
    \  for i = 1, s:len(), 3 do\n        if s:sub(i, i + 3) ~= s:sub(i, i + 3) then\
    \ return false end\n        table.insert(t, s:sub(i, i + 3))\n    end\n    return\
    \ true\nend", "    local t = {}\n    for i = 1, #s, 3 do\n        if t[s[i]] ==\
    \ s[i+1] and t[s[i+1]] == s[i+2] then\n            return true\n        end\n\
    \        t[s[i]] = s[i+1]\n        t[s[i+1]] = s[i+2]\n    end\n    return false\n\
    end", "    if s:len() < 3 then return false end\n    local t = {}\n    for i =\
    \ 1, s:len() - 2, 3 do\n        if s:sub(i, i + 3) ~= s:sub(i + 1, i + 3) then\
    \ return false end\n        table.insert(t, s:sub(i, i + 3))\n    end\n    return\
    \ true\nend", "    if s:len() < 3 then return false end\n    local t = {}\n  \
    \  for i = 1, s:len(), 3 do\n        if s:sub(i, i + 3) ~= s:sub(i, i + 3) then\
    \ return false end\n        table.insert(t, s:sub(i, i + 3))\n    end\n    return\
    \ true\nend", "    if s:len() < 3 then return false end\n    local t = {}\n  \
    \  for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2]\
    \ then\n            t[s[i]] = true\n            t[s[i+1]] = true\n           \
    \ t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n \
    \       if t[s[i]] and t[s[i+1]] and t[s[i+2]] then\n            return true\n\
    \        end\n    end\n    return false\nend", "    if s:len() < 3 then return\
    \ false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i]\
    \ == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n          \
    \  t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for\
    \ i = 1, s:len() - 1, 3 do\n        if not t[s[i]] or not t[s[i+1]] or not t[s[i+2]]\
    \ then\n            return false\n        end\n    end\n    return true\nend\n\
    print(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\n\
    print(is_happy('adb'))\nprint(is_happy('xyy'))\n", "    if len(s) < 3 then return\
    \ false end\n    local t = {}\n    for i = 1, len(s) - 2, 3 do\n        if s[i]\
    \ == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n          \
    \  t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for\
    \ i = 1, len(s) - 1 do\n        if t[s[i]] and t[s[i+1]] then\n            return\
    \ true\n        end\n    end\n    return false\nend\nprint(is_happy('a'))\nprint(is_happy('aa'))\n\
    print(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n",
  "    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len()\
    \ - 2, 3 do\n        if s:sub(i, i + 3) ~= s:sub(i, i + 3) then return false end\n\
    \        table.insert(t, s:sub(i, i + 3))\n    end\n    return true\nend", " \
    \   local t = {}\n    for i = 1, #s, 3 do\n        if s[i] == s[i+1] and s[i+1]\
    \ == s[i+2] then\n            t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n       \
    \ end\n    end\n    return #t == #s\nend", "    if s:len() < 3 then return false\
    \ end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] ==\
    \ s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]]\
    \ = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len()\
    \ - 1, 3 do\n        if not t[s[i]] or not t[s[i+1]] or not t[s[i+2]] then\n \
    \           return false\n        end\n    end\n    return true\nend\nprint(is_happy('abcd'))\n\
    print(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\nprint(is_happy('a'))\n\
    print(is_happy('aa'))\nprint(is_happy('aaa'))\nprint(is_happy('aaaa'))\nprint(is_happy('aaaaa'))\n\
    print(is_happy('aaaaaa'))\nprint(is_happy('aaaaaaa'))\nprint(is_happy('aaaaaaaa'))\n\
    print(is_happy('aaaaaaaaa'))\nprint(is_happy('aaaaaaaaaa'))\nprint(is_happy('aaaaaaaaaaa'))\n\
    print(is_happy('aaaaaaaaaaaa'))\nprint(is_happy('aaaaaaaaaaaaa'))\nprint(is_happy('aaaaaaaaaaaaaa'))\n\
    print(is_happy('aaaaaaaaaaaaaaa'))\nprint(is_happy('aaaaaaaaaaaaaaaa'))\nprint(is_happy('aaaaaaaaaaaaaaaaa'))\n\
    print(is_happy('aaaaaaaaaaaaaaaaaa'))\nprint(is_happy('aaaaaaaaaaaaaaaaaaa'))\n\
    print(is_happy('aaaaaaaaaaaaaaaaaaaa'))\nprint(is_happy('aaaaaaaaaaaaaaaaaaaaa'))\n\
    print(is_happy('aaaaaaaaaaaaaaaaaaaaaa'))\nprint(is_happy('aaaaaaaaaaaaaaaaaaaaaaa'))\n\
    print(is_happy('aaaaaaaaaaaaaaaaaaaaaaaa'))\nprint", "    local t = {}\n    for\
    \ i = 1, #s, 3 do\n        if t[s[i]] == s[i+1] and t[s[i+1]] == s[i+2] then\n\
    \            return true\n        end\n        t[s[i]] = s[i+1]\n        t[s[i+1]]\
    \ = s[i+2]\n    end\n    return false\nend", "    local t = {}\n    for i = 1,\
    \ #s, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]]\
    \ = t[s[i+1]] = t[s[i+2]] = true\n        end\n    end\n    return #t == #s\n\
    end", "    local t = {}\n    for i = 1, #s, 3 do\n        if s[i] == s[i+1] and\
    \ s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n\
    \            t[s[i+2]] = true\n        end\n    end\n    return #t == #s\nend",
  "    if len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s),\
    \ 3 do\n        if t[s[i]] == true then return false end\n        t[s[i]] = true\n\
    \    end\n    return true\nend", "    if s:len() < 3 then return false end\n \
    \   local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1]\
    \ and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]]\
    \ = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len()\
    \ - 1, 3 do\n        if not t[s[i]] or not t[s[i+1]] or not t[s[i+2]] then\n \
    \           return false\n        end\n    end\n    return true\nend", "    if\
    \ s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len(),\
    \ 3 do\n        if s:sub(i, i + 3) ~= s:sub(i, i + 3) then return false end\n\
    \        table.insert(t, s:sub(i, i + 3))\n    end\n    return true\nend", " \
    \   if len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s),\
    \ 3 do\n        if not t[s[i]] then t[s[i]] = 1 end\n        if not t[s[i+1]]\
    \ then t[s[i+1]] = 1 end\n        if not t[s[i+2]] then t[s[i+2]] = 1 end\n  \
    \  end\n    return t[s[1]] and t[s[2]] and t[s[3]]\nend", "    if s:len() < 3\
    \ then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n\
    \        if s:sub(i, i + 3) ~= s:sub(i + 1, i + 3) then return false end\n   \
    \     t[s:sub(i, i + 3)] = true\n    end\n    return true\nend", "    local t\
    \ = {}\n    for i = 1, #s, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2]\
    \ then\n            t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n        end\n    end\n\
    \    return #t == #s\nend", "    local t = {}\n    for i = 1, #s, 3 do\n     \
    \   if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = t[s[i+1]]\
    \ = t[s[i+2]] = true\n        end\n    end\n    return #t == #s\nend", "    if\
    \ len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s), 3\
    \ do\n        if t[s[i]] == true then return false end\n        t[s[i]] = true\n\
    \    end\n    return true\nend", "    if s:len() < 3 then return false end\n \
    \   local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1]\
    \ and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]]\
    \ = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len()\
    \ - 1, 3 do\n        if t[s[i]] and t[s[i+1]] and t[s[i+2]] then\n           \
    \ return true\n        end\n    end\n    return false\nend", "    if len(s) <\
    \ 3 then return false end\n    local t = {}\n    for i = 1, len(s), 3 do\n   \
    \     if t[s[i]] == true then return false end\n        t[s[i]] = true\n    end\n\
    \    return true\nend", "    if s:len() < 3 then return false end\n    local t\
    \ = {}\n    for i = 1, s:len() - 2, 3 do\n        if s:sub(i, i + 3) ~= s:sub(i\
    \ + 1, i + 3) then return false end\n        t[s:sub(i, i + 3)] = true\n    end\n\
    \    return true\nend", "    if s:len() < 3 then return false end\n    local t\
    \ = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1]\
    \ == s[i+2] then\n            t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n       \
    \ end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and t[s[i+1]]\
    \ and t[s[i+2]] then\n            return true\n        end\n    end\n    return\
    \ false\nend\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\n\
    print(is_happy('xyy'))\n", "    local t = {}\n    for i = 1, #s, 3 do\n      \
    \  if t[s[i]] == s[i+1] and t[s[i+1]] == s[i+2] then\n            return true\n\
    \        end\n        t[s[i]] = s[i+1]\n        t[s[i+1]] = s[i+2]\n    end\n\
    \    return false\nend", "    if len(s) < 3 then return false end\n    local t\
    \ = {}\n    for i = 1, len(s), 3 do\n        if t[s[i]] == true then return false\
    \ end\n        t[s[i]] = true\n    end\n    return true\nend", "    if s:len()\
    \ < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n\
    \        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n\
    \            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n   \
    \ end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and t[s[i+1]] and\
    \ t[s[i+2]] then\n            return true\n        end\n    end\n    return false\n\
    end\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\n\
    print(is_happy('adb'))\nprint(is_happy('xyy'))\n", "    local t = {}\n    for\
    \ i = 1, #s, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n     \
    \       t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] =\
    \ true\n        end\n    end\n    return #t == #s\nend", "    if s:len() < 3 then\
    \ return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n     \
    \   if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n\
    \            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n   \
    \ end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and t[s[i+1]] and\
    \ t[s[i+2]] then\n            return true\n        end\n    end\n    return false\n\
    end\nprint(is_happy(\"a\"))\nprint(is_happy(\"aa\"))\nprint(is_happy(\"abcd\"\
    ))\nprint(is_happy(\"aabb\"))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"xyy\"\
    ))\n", "    if len(s) < 3 then return false end\n    local t = {}\n    for i =\
    \ 1, len(s) - 2 do\n        if t[s[i]] == true then return false end\n       \
    \ t[s[i]] = true\n    end\n    return true\nend", "    local t = {}\n    for i\
    \ = 1, #s, 3 do\n        if t[s[i]] == nil then\n            t[s[i]] = 1\n   \
    \     else\n            return false\n        end\n    end\n    return true\n\
    end", "    if s:len() < 3 then return false end\n    local t = {}\n    for i =\
    \ 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n\
    \            t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]]\
    \ = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]]\
    \ and t[s[i+1]] and t[s[i+2]] then\n            return true\n        end\n   \
    \ end\n    return false\nend\nprint(is_happy(\"a\"))\nprint(is_happy(\"aa\"))\n\
    print(is_happy(\"abcd\"))\nprint(is_happy(\"aabb\"))\nprint(is_happy(\"adb\"))\n\
    print(is_happy(\"xyy\"))\n", "    if s:len() < 3 then return false end\n    local\
    \ t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1]\
    \ == s[i+2] then\n            if t[s[i]] == nil then\n                t[s[i]]\
    \ = 1\n            else\n                t[s[i]] = t[s[i]] + 1\n            end\n\
    \        end\n    end\n    for k, v in pairs(t) do\n        if v > 1 then\n  \
    \          return false\n        end\n    end\n    return true\nend\nprint(is_happy(\"\
    a\"))\nprint(is_happy(\"aa\"))\nprint(is_happy(\"abcd\"))\nprint(is_happy(\"aabb\"\
    ))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"xyy\"))\n", "    if len(s) < 3\
    \ then return false end\n    local t = {}\n    for i = 1, len(s), 3 do\n     \
    \   if t[s[i]] == true then return false end\n        t[s[i]] = true\n    end\n\
    \    return true\nend", "    if s:len() < 3 then return false end\n    local t\
    \ = {}\n    for i = 1, s:len(), 3 do\n        if s:sub(i, i+3) ~= s:sub(i+1, i+3)\
    \ then return false end\n        table.insert(t, s:sub(i, i+3))\n    end\n   \
    \ return true\nend", "    if s:len() < 3 then return false end\n    local t =\
    \ {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] ==\
    \ s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n    \
    \        t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3\
    \ do\n        if t[s[i]] and t[s[i+1]] and t[s[i+2]] then\n            return\
    \ true\n        end\n    end\n    return false\nend\nprint(is_happy('a'))\nprint(is_happy('aa'))\n\
    print(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n",
  "    if len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s),\
    \ 3 do\n        if not t[s[i]] then t[s[i]] = 1 end\n        if not t[s[i+1]]\
    \ then t[s[i+1]] = 1 end\n        if not t[s[i+2]] then t[s[i+2]] = 1 end\n  \
    \  end\n    return t[1] and t[2] and t[3]\nend", "    if len(s) < 3 then return\
    \ false end\n    local t = {}\n    for i = 1, len(s), 3 do\n        if not t[s[i]]\
    \ then t[s[i]] = 1 end\n        if not t[s[i+1]] then t[s[i+1]] = 1 end\n    \
    \    if not t[s[i+2]] then t[s[i+2]] = 1 end\n    end\n    return len(t) == len(s)\n\
    end", "    if s:len() < 3 then return false end\n    local t = {}\n    for i =\
    \ 1, s:len(), 3 do\n        if s:sub(i, i + 3) ~= s:sub(i, i + 3) then return\
    \ false end\n        t[s:sub(i, i + 3)] = true\n    end\n    return true\nend",
  "    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len()\
    \ do\n        if s[i] == s[i+1] and s[i] == s[i+2] then\n            t[s[i]] =\
    \ t[s[i]] or true\n        end\n    end\n    for i = 1, s:len() do\n        if\
    \ t[s[i]] then\n            return false\n        end\n    end\n    return true\n\
    end", "    if s:len() < 3 then return false end\n    local t = {}\n    for i =\
    \ 1, s:len() do\n        if t[s[i]] == true then return false end\n        t[s[i]]\
    \ = true\n    end\n    return true\nend", "    if len(s) < 3 then return false\
    \ end\n    local t = {}\n    for i = 1, len(s), 3 do\n        if t[s[i]] == true\
    \ then return false end\n        t[s[i]] = true\n    end\n    return true\nend",
  "    local t = {}\n    for i = 1, #s, 3 do\n        if s[i] == s[i+1] and s[i+1]\
    \ == s[i+2] then\n            table.insert(t, s[i])\n            table.insert(t,\
    \ s[i+1])\n            table.insert(t, s[i+2])\n        end\n    end\n    return\
    \ #t == #s\nend", "    if s:len() < 3 then return false end\n    local t = {}\n\
    \    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2]\
    \ then\n            t[s[i]] = true\n            t[s[i+1]] = true\n           \
    \ t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n \
    \       if t[s[i]] and t[s[i+1]] and t[s[i+2]] then\n            return true\n\
    \        end\n    end\n    return false\nend\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\n\
    print(is_happy('adb'))\nprint(is_happy('xyy'))\n", "    if len(s) < 3 then return\
    \ false end\n    local t = {}\n    for i = 1, len(s), 3 do\n        if t[s[i]]\
    \ == true then return false end\n        t[s[i]] = true\n    end\n    return true\n\
    end", "    if len(s) < 3 then return false end\n    local t = {}\n    for i =\
    \ 1, len(s), 3 do\n        if t[s[i]] == true then return false end\n        t[s[i]]\
    \ = true\n    end\n    return true\nend", "    if s:len() < 3 then return false\
    \ end\n    local t = {}\n    for i = 1, s:len(), 3 do\n        if s:sub(i, i +\
    \ 3) ~= s:sub(i, i + 3) then return false end\n        t[s:sub(i, i + 3)] = true\n\
    \    end\n    return true\nend", "    if s:len() < 3 then return false end\n \
    \   local t = {}\n    for i = 1, s:len(), 3 do\n        if s:sub(i, i + 3) ~=\
    \ s:sub(i, i + 3) then return false end\n        table.insert(t, s:sub(i, i +\
    \ 3))\n    end\n    return true\nend", "    if s:len() < 3 then return false end\n\
    \    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1]\
    \ and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]]\
    \ = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len()\
    \ - 1, 3 do\n        if t[s[i]] and t[s[i+1]] and t[s[i+2]] then\n           \
    \ return true\n        end\n    end\n    return false\nend\nprint(is_happy('a'))\n\
    print(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\n\
    print(is_happy('xyy'))\n", "    if s:len() < 3 then return false end\n    local\
    \ t = {}\n    for i = 1, s:len(), 3 do\n        if s:sub(i, i + 3) ~= s:sub(i,\
    \ i + 3) then return false end\n        table.insert(t, s:sub(i, i + 3))\n   \
    \ end\n    return true\nend", "    if len(s) < 3 then return false end\n    local\
    \ t = {}\n    for i = 1, len(s), 3 do\n        if t[s[i]] == true then return\
    \ false end\n        t[s[i]] = true\n    end\n    return true\nend", "    if s:len()\
    \ < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n\
    \        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n\
    \            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n   \
    \ end\n    for i = 1, s:len() - 1, 3 do\n        if not t[s[i]] or not t[s[i+1]]\
    \ or not t[s[i+2]] then\n            return false\n        end\n    end\n    return\
    \ true\nend", "    if s:len() < 3 then return false end\n    local t = {}\n  \
    \  for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2]\
    \ then\n            t[s[i]] = true\n            t[s[i+1]] = true\n           \
    \ t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n \
    \       if t[s[i]] and t[s[i+1]] and t[s[i+2]] then\n            return true\n\
    \        end\n    end\n    return false\nend", "    if s:len() < 3 then return\
    \ false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i]\
    \ == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n          \
    \  t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for\
    \ i = 1, s:len() - 1, 3 do\n        if t[s[i]] and t[s[i+1]] and t[s[i+2]] then\n\
    \            return true\n        end\n    end\n    return false\nend\nprint(is_happy('abcd'))\n\
    print(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\nprint(is_happy('abcd'))\n\
    print(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\nprint(is_happy('abcd'))\n\
    print(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\nprint(is_happy('abcd'))\n\
    print(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\nprint(is_happy('abcd'))\n\
    print(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\nprint(is_happy('abcd'))\n\
    print(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\nprint(is_happy('abcd'))\n\
    print(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\nprint(is_happy('abcd'))\n\
    print(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xy", "    if\
    \ s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len()\
    \ - 2, 3 do\n        if s:sub(i, i + 3) ~= s:sub(i, i + 3) then return false end\n\
    \        table.insert(t, s:sub(i, i + 3))\n    end\n    return true\nend", " \
    \   if len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s)\
    \ - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then return false\
    \ end\n        if t[s[i]] == true then return false end\n        t[s[i]] = true\n\
    \    end\n    return true\nend", "    if s:len() < 3 then return false end\n \
    \   local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s:sub(i, i + 3)\
    \ ~= s:sub(i, i + 3) then return false end\n        table.insert(t, s:sub(i, i\
    \ + 3))\n    end\n    return true\nend", "    if s:len() < 3 then return false\
    \ end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s:sub(i,\
    \ i + 3) ~= s:sub(i + 1, i + 3) then return false end\n        table.insert(t,\
    \ s:sub(i, i + 3))\n    end\n    return true\nend", "    if s:len() < 3 then return\
    \ false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s:sub(i,\
    \ i + 3) ~= s:sub(i + 1, i + 3) then return false end\n        table.insert(t,\
    \ s:sub(i, i + 3))\n    end\n    return true\nend", "    if s:len() < 3 then return\
    \ false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s:sub(i,\
    \ i + 3) ~= s:sub(i + 1, i + 3) then return false end\n        table.insert(t,\
    \ s:sub(i, i + 3))\n    end\n    return true\nend", "    if s:len() < 3 then return\
    \ false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i]\
    \ == s[i+1] and s[i+1] == s[i+2] then\n            if t[s[i]] == nil then\n  \
    \              t[s[i]] = 1\n            else\n                t[s[i]] = t[s[i]]\
    \ + 1\n            end\n        end\n    end\n    for k, v in pairs(t) do\n  \
    \      if v == 3 then\n            return true\n        end\n    end\n    return\
    \ false\nend", "    if s:len() < 3 then return false end\n    local t = {}\n \
    \   for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i + 1] and s[i + 1] ==\
    \ s[i + 2] then\n            t[s[i]] = true\n            t[s[i + 1]] = true\n\
    \            t[s[i + 2]] = true\n        end\n    end\n    for i = 1, s:len()\
    \ - 1, 3 do\n        if t[s[i]] and t[s[i + 1]] and t[s[i + 2]] then\n       \
    \     return true\n        end\n    end\n    return false\nend\nprint(is_happy(\"\
    a\"))\nprint(is_happy(\"aa\"))\nprint(is_happy(\"abcd\"))\nprint(is_happy(\"aabb\"\
    ))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"xyy\"))\n", "    if s:len() < 3\
    \ then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n\
    \        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n\
    \            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n   \
    \ end\n    for i = 1, s:len() - 1, 3 do\n        if not t[s[i]] or not t[s[i+1]]\
    \ or not t[s[i+2]] then\n            return false\n        end\n    end\n    return\
    \ true\nend", "    if s:len() < 3 then return false end\n    local t = {}\n  \
    \  for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2]\
    \ then\n            t[s[i]] = true\n            t[s[i+1]] = true\n           \
    \ t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n \
    \       if t[s[i]] and t[s[i+1]] and t[s[i+2]] then\n            return true\n\
    \        end\n    end\n    return false\nend\nprint(is_happy('a'))\nprint(is_happy('aa'))\n\
    print(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n",
  "    local t = {}\n    for i = 1, #s, 3 do\n        if s[i] == s[i+1] and s[i+1]\
    \ == s[i+2] then\n            t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n       \
    \ end\n    end\n    return #t == #s\nend", "    if len(s) < 3 then return false\
    \ end\n    local t = {}\n    for i = 1, len(s), 3 do\n        if t[s[i]] == true\
    \ then return false end\n        t[s[i]] = true\n    end\n    return true\nend",
  "    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len()\
    \ - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n           \
    \ t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n\
    \        end\n    end\n    for k, v in pairs(t) do\n        if v == false then\n\
    \            return false\n        end\n    end\n    return true\nend", "    if\
    \ s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len()\
    \ - 2, 3 do\n        if s[i] == s[i + 1] and s[i + 1] == s[i + 2] then\n     \
    \       t[s[i]] = true\n            t[s[i + 1]] = true\n            t[s[i + 2]]\
    \ = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]]\
    \ and t[s[i + 1]] and t[s[i + 2]] then\n            return true\n        end\n\
    \    end\n    return false\nend\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\n\
    print(is_happy('adb'))\nprint(is_happy('xyy'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\n\
    print(is_happy('adb'))\nprint(is_happy('xyy'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\n\
    print(is_happy('adb'))\nprint(is_happy('xyy'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\n\
    print(is_happy('adb'))\nprint(is_happy('xyy'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\n\
    print(is_happy('adb'))\nprint(is_happy('xyy'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\n\
    print(is_happy('adb'))\nprint(is_happy('xyy'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\n\
    print(is_happy('adb'))\nprint(is_happy('xyy'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\n\
    print(is_happy('adb'))\nprint(is_happy('xy", "    if s:len() < 3 then return false\
    \ end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] ==\
    \ s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]]\
    \ = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len()\
    \ - 1, 3 do\n        if not t[s[i]] or not t[s[i+1]] or not t[s[i+2]] then\n \
    \           return false\n        end\n    end\n    return true\nend\nprint(is_happy('a'))\n\
    print(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\n\
    print(is_happy('xyy'))\n", "    local t = {}\n    for i = 1, #s, 3 do\n      \
    \  if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            table.insert(t, s[i])\n\
    \            table.insert(t, s[i+1])\n            table.insert(t, s[i+2])\n  \
    \      end\n    end\n    return #t == #s\nend", "    if s:len() < 3 then return\
    \ false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i]\
    \ == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n          \
    \  t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for\
    \ i = 1, s:len() - 1, 3 do\n        if t[s[i]] and t[s[i+1]] and t[s[i+2]] then\n\
    \            return true\n        end\n    end\n    return false\nend\nprint(is_happy('abcd'))\n\
    print(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\nprint(is_happy('a'))\n\
    print(is_happy('aa'))\nprint(is_happy('aaa'))\nprint(is_happy('ab'))\nprint(is_happy('abcd'))\n\
    print(is_happy('abcd'))\nprint(is_happy('abcd'))\nprint(is_happy('abcd'))\nprint(is_happy('abcd'))\n\
    print(is_happy('abcd'))\nprint(is_happy('abcd'))\nprint(is_happy('abcd'))\nprint(is_happy('abcd'))\n\
    print(is_happy('abcd'))\nprint(is_happy('abcd'))\nprint(is_happy('abcd'))\nprint(is_happy('abcd'))\n\
    print(is_happy('abcd'))\nprint(is_happy('abcd'))\nprint(is_happy('abcd'))\nprint(is_happy('abcd'))\n\
    print(is_happy('abcd'))\nprint(is_happy('abcd'))\nprint(is_happy('abcd'))\nprint(is_happy('abcd'))\n\
    print(is_happy('abcd'))\nprint(is_happy('abcd'))\nprint(is_happy('abcd'))\n",
  "    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len()\
    \ - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n           \
    \ t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n\
    \        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and\
    \ t[s[i+1]] and t[s[i+2]] then\n            return true\n        end\n    end\n\
    \    return false\nend\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\n\
    print(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n", " \
    \   local t = {}\n    for i = 1, #s, 3 do\n        if s[i] == s[i+1] and s[i+1]\
    \ == s[i+2] then\n            table.insert(t, s[i])\n            table.insert(t,\
    \ s[i+1])\n            table.insert(t, s[i+2])\n        end\n    end\n    return\
    \ #t == #s\nend", "    if s:len() < 3 then return false end\n    local t = {}\n\
    \    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i + 1] and s[i + 1] ==\
    \ s[i + 2] then\n            t[s[i]] = true\n            t[s[i + 1]] = true\n\
    \            t[s[i + 2]] = true\n        end\n    end\n    for i = 1, s:len()\
    \ - 1, 3 do\n        if not t[s[i]] or not t[s[i + 1]] or not t[s[i + 2]] then\n\
    \            return false\n        end\n    end\n    return true\nend\nprint(is_happy('a'))\n\
    print(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\n\
    print(is_happy('xyy'))\n", "    local t = {}\n    for i = 1, #s, 3 do\n      \
    \  if s[i] ~= s[i+1] and s[i+1] ~= s[i+2] then\n            t[s[i]] = t[s[i+1]]\
    \ = t[s[i+2]] = true\n        end\n    end\n    return #t == #s\nend", "    if\
    \ s:len() < 3 then return false end\n    local t = {}\n    for i=1,s:len(),3 do\n\
    \        if s:sub(i,i+3) ~= s:sub(i,i+3) then return false end\n        table.insert(t,s:sub(i,i+3))\n\
    \    end\n    return true\nend", "    if s:len() < 3 then return false end\n \
    \   local t = {}\n    for i = 1, s:len(), 3 do\n        if s:sub(i, i + 3) ~=\
    \ s:sub(i, i + 3) then return false end\n        table.insert(t, s:sub(i, i +\
    \ 3))\n    end\n    return true\nend", "    if s:len() < 3 then return false end\n\
    \    local t = {}\n    for i = 1, s:len(), 3 do\n        if s:sub(i, i+3) ~= s:sub(i+1,\
    \ i+3) then return false end\n        table.insert(t, s:sub(i, i+3))\n    end\n\
    \    return true\nend", "    if s:len() < 3 then return false end\n    local t\
    \ = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1]\
    \ == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n \
    \           t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1,\
    \ 3 do\n        if t[s[i]] and t[s[i+1]] and t[s[i+2]] then\n            return\
    \ true\n        end\n    end\n    return false\nend\nprint(is_happy('a'))\nprint(is_happy('aa'))\n\
    print(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n",
  "    if len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s),\
    \ 3 do\n        if t[s[i]] == true then return false end\n        t[s[i]] = true\n\
    \    end\n    return true\nend", "    local t = {}\n    for i = 1, #s, 3 do\n\
    \        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = t[s[i+1]]\
    \ = t[s[i+2]] = true\n        end\n    end\n    return #t == #s\nend", "    if\
    \ len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s), 3\
    \ do\n        if t[s[i]] == true then return false end\n        t[s[i]] = true\n\
    \    end\n    return true\nend", "    if s:len() < 3 then return false end\n \
    \   local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1]\
    \ and s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]]\
    \ = true\n            t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len()\
    \ - 1, 3 do\n        if t[s[i]] and t[s[i+1]] and t[s[i+2]] then\n           \
    \ return true\n        end\n    end\n    return false\nend\nprint(is_happy('a'))\n\
    print(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\n\
    print(is_happy('xyy'))\n", "    if s:len() < 3 then return false end\n    local\
    \ t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1]\
    \ == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n \
    \           t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1,\
    \ 3 do\n        if t[s[i]] and t[s[i+1]] and t[s[i+2]] then\n            return\
    \ true\n        end\n    end\n    return false\nend\nprint(is_happy('a'))\nprint(is_happy('aa'))\n\
    print(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n",
  "    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len()\
    \ - 2, 3 do\n        if s:sub(i, i + 3) ~= s:sub(i + 1, i + 3) then return false\
    \ end\n        table.insert(t, s:sub(i, i + 3))\n    end\n    return true\nend",
  "    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len(),\
    \ 3 do\n        if s:sub(i, i + 3) ~= s:sub(i, i + 3) then return false end\n\
    \        table.insert(t, s:sub(i, i + 3))\n    end\n    return true\nend", " \
    \   if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len(),\
    \ 3 do\n        if s:sub(i, i + 3) ~= s:sub(i, i + 3) then return false end\n\
    \        table.insert(t, s:sub(i, i + 3))\n    end\n    return true\nend", " \
    \   local t = {}\n    for i = 1, #s, 3 do\n        if t[s[i]] == s[i+1] and t[s[i+1]]\
    \ == s[i+2] then\n            return true\n        end\n    end\n    return false\n\
    end", "    if s:len() < 3 then return false end\n    local t = {}\n    for i =\
    \ 1, s:len() - 2, 3 do\n        if s:sub(i, i + 3) ~= s:sub(i + 1, i + 3) then\
    \ return false end\n        t[s:sub(i, i + 3)] = true\n    end\n    return true\n\
    end", "    local t = {}\n    for i = 1, #s, 3 do\n        if s[i] == s[i+1] and\
    \ s[i+1] == s[i+2] then\n            t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n\
    \        end\n    end\n    return #t == #s\nend", "    if s:len() < 3 then return\
    \ false end\n    local t = {}\n    for i = 1, s:len(), 3 do\n        if s:sub(i,\
    \ i+3) ~= s:sub(i+1, i+3) then return false end\n        table.insert(t, s:sub(i,\
    \ i+3))\n    end\n    return true\nend", "    if len(s) < 3 then return false\
    \ end\n    local t = {}\n    for i = 1, len(s), 3 do\n        if t[s[i]] == true\
    \ then return false end\n        t[s[i]] = true\n    end\n    return true\nend",
  "    local t = {}\n    for i = 1, #s, 3 do\n        if t[s[i]] == nil then\n   \
    \         t[s[i]] = 1\n        else\n            return false\n        end\n \
    \   end\n    return true\nend", "    if s:len() < 3 then return false end\n  \
    \  local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and\
    \ s[i+1] == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n\
    \            t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() -\
    \ 1, 3 do\n        if t[s[i]] and t[s[i+1]] and t[s[i+2]] then\n            return\
    \ true\n        end\n    end\n    return false\nend\nprint(is_happy('a'))\nprint(is_happy('aa'))\n\
    print(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n",
  "    if len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s),\
    \ 3 do\n        if t[s[i]] == true then return false end\n        t[s[i]] = true\n\
    \    end\n    return true\nend", "    if s:len() < 3 then return false end\n \
    \   local t = {}\n    for i = 1, s:len(), 3 do\n        if s:sub(i, i + 3) ~=\
    \ s:sub(i, i + 3) then return false end\n        table.insert(t, s:sub(i, i +\
    \ 3))\n    end\n    return true\nend", "    if len(s) < 3 then return false end\n\
    \    local t = {}\n    for i = 1, len(s), 3 do\n        if t[s[i]] == true then\
    \ return false end\n        t[s[i]] = true\n    end\n    return true\nend", " \
    \   local t = {}\n    for i = 1, #s, 3 do\n        if t[s[i]] == 0 then\n    \
    \        t[s[i]] = 1\n        else\n            return false\n        end\n  \
    \  end\n    return true\nend", "    local t = {}\n    for i = 1, #s, 3 do\n  \
    \      if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = t[s[i+1]]\
    \ = t[s[i+2]] = true\n        end\n    end\n    return #t == #s\nend", "    if\
    \ s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len()\
    \ - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n           \
    \ t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n\
    \        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and\
    \ t[s[i+1]] and t[s[i+2]] then\n            return true\n        end\n    end\n\
    \    return false\nend", "    if len(s) < 3 then return false end\n    local t\
    \ = {}\n    for i = 1, len(s), 3 do\n        if t[s[i]] == true then return false\
    \ end\n        t[s[i]] = true\n    end\n    return true\nend", "    if s:len()\
    \ < 3 then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n\
    \        if s:sub(i, i + 3) ~= s:sub(i + 1, i + 3) then return false end\n   \
    \     table.insert(t, s:sub(i, i + 3))\n    end\n    return true\nend", "    if\
    \ len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s), 3\
    \ do\n        if t[s[i]] == true then return false end\n        t[s[i]] = true\n\
    \    end\n    return true\nend", "    local t = {}\n    for i = 1, #s, 3 do\n\
    \        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = t[s[i+1]]\
    \ = t[s[i+2]] = true\n        end\n    end\n    return #t == #s\nend", "    if\
    \ s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len(),\
    \ 3 do\n        if s:sub(i, i + 3) ~= s:sub(i, i + 3) then return false end\n\
    \        table.insert(t, s:sub(i, i + 3))\n    end\n    return true\nend", " \
    \   if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len()\
    \ - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n           \
    \ t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n\
    \        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and\
    \ t[s[i+1]] and t[s[i+2]] then\n            return true\n        end\n    end\n\
    \    return false\nend\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\n\
    print(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n", " \
    \   if len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s),\
    \ 3 do\n        if t[s[i]] == true then return false end\n        t[s[i]] = true\n\
    \    end\n    return true\nend", "    local t = {}\n    for i = 1, #s, 3 do\n\
    \        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = t[s[i+1]]\
    \ = t[s[i+2]] = true\n        end\n    end\n    return #t == #s\nend", "    local\
    \ t = {}\n    for i = 1, #s, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2]\
    \ then\n            t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n        end\n    end\n\
    \    return #t == #s\nend", "    if s:len() < 3 then return false end\n    local\
    \ t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1]\
    \ == s[i+2] then\n            t[s[i]] = true\n            t[s[i+1]] = true\n \
    \           t[s[i+2]] = true\n        end\n    end\n    for i = 1, s:len() - 1,\
    \ 3 do\n        if not t[s[i]] or not t[s[i+1]] or not t[s[i+2]] then\n      \
    \      return false\n        end\n    end\n    return true\nend\nprint(is_happy('a'))\n\
    print(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\n\
    print(is_happy('xyy'))\n", "    if len(s) < 3 then\n        return false\n   \
    \ end\n    local function is_consecutive_letter(a, b)\n        if a == b then\n\
    \            return true\n        end\n        return false\n    end\n    for\
    \ i = 1, len(s), 3 do\n        if not is_consecutive_letter(s[i], s[i+1]) then\n\
    \            return false\n        end\n    end\n    return true\nend", "    if\
    \ s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len()\
    \ - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n           \
    \ t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n\
    \        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and\
    \ t[s[i+1]] and t[s[i+2]] then\n            return true\n        end\n    end\n\
    \    return false\nend\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\n\
    print(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n", " \
    \   local t = {}\n    for i = 1, #s, 3 do\n        if s[i] == s[i+1] and s[i+1]\
    \ == s[i+2] then\n            t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n       \
    \ end\n    end\n    return #t == #s\nend", "    if len(s) < 3 then return false\
    \ end\n    local t = {}\n    for i = 1, len(s), 3 do\n        if t[s[i]] == true\
    \ then return false end\n        t[s[i]] = true\n    end\n    return true\nend",
  "    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len()\
    \ - 2, 3 do\n        if s:sub(i, i + 3) ~= s:sub(i + 1, i + 3) then return false\
    \ end\n        table.insert(t, s:sub(i, i + 3))\n    end\n    return true\nend\n\
    print(is_happy(\"a\"))\nprint(is_happy(\"aa\"))\nprint(is_happy(\"abcd\"))\nprint(is_happy(\"\
    aabb\"))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"xyy\"))\n", "    local t\
    \ = {}\n    for i = 1, #s, 3 do\n        if t[s[i]] == nil then\n            t[s[i]]\
    \ = 1\n        else\n            return false\n        end\n    end\n    return\
    \ true\nend", "    local t = {}\n    for i = 1, #s, 3 do\n        if s[i] == s[i+1]\
    \ and s[i+1] == s[i+2] then\n            t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n\
    \        end\n    end\n    return #t == #s\nend", "    if s:len() < 3 then return\
    \ false end\n    local t = {}\n    for i = 1, s:len(), 3 do\n        if s:sub(i,\
    \ i + 3) ~= s:sub(i, i + 3) then return false end\n        table.insert(t, s:sub(i,\
    \ i + 3))\n    end\n    return true\nend", "    if s:len() < 3 then return false\
    \ end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] ==\
    \ s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = t[s[i+1]] = t[s[i+2]]\
    \ = true\n        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if not\
    \ t[s[i]] or not t[s[i+1]] or not t[s[i+2]] then\n            return false\n \
    \       end\n    end\n    return true\nend\nprint(is_happy('a'))\nprint(is_happy('aa'))\n\
    print(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n",
  "    if s:len() < 3 then return false end\n    local t = {}\n    for i = 1, s:len()\
    \ - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n           \
    \ t[s[i]] = true\n            t[s[i+1]] = true\n            t[s[i+2]] = true\n\
    \        end\n    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and\
    \ t[s[i+1]] and t[s[i+2]] then\n            return true\n        end\n    end\n\
    \    return false\nend\nprint(is_happy(\"a\"))\nprint(is_happy(\"aa\"))\nprint(is_happy(\"\
    abcd\"))\nprint(is_happy(\"aabb\"))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"\
    xyy\"))\n", "    local t = {}\n    for i = 1, #s, 3 do\n        if s[i] == s[i+1]\
    \ and s[i+1] == s[i+2] then\n            t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n\
    \        end\n    end\n    return #t == #s\nend", "    if s:len() < 3 then return\
    \ false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s:sub(i,\
    \ i + 3) ~= s:sub(i + 1, i + 3) then return false end\n        table.insert(t,\
    \ s:sub(i, i + 3))\n    end\n    return true\nend", "    local t = {}\n    for\
    \ i = 1, #s, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n     \
    \       t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n        end\n    end\n    return\
    \ #t == #s\nend\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\n\
    print(is_happy('aabb'))\nprint(is_happy('adb'))\nprint(is_happy('xyy'))\n", " \
    \   if len(s) < 3 then\n        return false\n    end\n    local t = {}\n    for\
    \ i = 1, len(s), 3 do\n        if t[s[i]] == true then\n            return false\n\
    \        end\n        t[s[i]] = true\n    end\n    return true\nend", "    local\
    \ t = {}\n    for i = 1, #s, 3 do\n        if t[s[i]] == true then\n         \
    \   return false\n        end\n        t[s[i]] = true\n    end\n    return true\n\
    end", "    if s:len() < 3 then return false end\n    local t = {}\n    for i =\
    \ 1, s:len() - 2, 3 do\n        if s:sub(i, i + 3) ~= s:sub(i + 1, i + 3) then\
    \ return false end\n        t[s:sub(i, i + 3)] = true\n    end\n    return true\n\
    end", "    if s:len() < 3 then return false end\n    local t = {}\n    for i =\
    \ 1, s:len() - 2, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n\
    \            if t[s[i]] == nil then\n                t[s[i]] = 1\n           \
    \ else\n                t[s[i]] = t[s[i]] + 1\n            end\n        end\n\
    \    end\n    for k, v in pairs(t) do\n        if v > 1 then\n            return\
    \ false\n        end\n    end\n    return true\nend", "    if s:len() < 3 then\
    \ return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n     \
    \   if s[i] == s[i + 1] and s[i + 1] == s[i + 2] then\n            t[s[i]] = true\n\
    \            t[s[i + 1]] = true\n            t[s[i + 2]] = true\n        end\n\
    \    end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and t[s[i + 1]]\
    \ and t[s[i + 2]] then\n            return true\n        end\n    end\n    return\
    \ false\nend\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\nprint(is_happy('adb'))\n\
    print(is_happy('xyy'))\n", "    local t = {}\n    for i = 1, #s, 3 do\n      \
    \  if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = t[s[i+1]]\
    \ = t[s[i+2]] = true\n        end\n    end\n    return #t == #s\nend", "    local\
    \ t = {}\n    for i = 1, #s, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2]\
    \ then\n            t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n        end\n    end\n\
    \    return #t == #s\nend", "    if len(s) < 3 then return false end\n    local\
    \ t = {}\n    for i = 1, len(s), 3 do\n        if t[s[i]] == true then return\
    \ false end\n        t[s[i]] = true\n    end\n    return true\nend", "    if s:len()\
    \ < 3 then return false end\n    local t = {}\n    for i = 1, s:len() do\n   \
    \     if s[i] == s[i+1] and s[i] == s[i+2] then\n            t[s[i]] = true\n\
    \            i = i + 1\n        end\n    end\n    for k, v in pairs(t) do\n  \
    \      if v == false then\n            return false\n        end\n    end\n  \
    \  return true\nend", "    if len(s) < 3 then\n        return false\n    end\n\
    \    local t = {}\n    for i = 1, len(s), 3 do\n        if t[s[i]] == true then\n\
    \            return false\n        end\n        t[s[i]] = true\n    end\n    return\
    \ true\nend", "    if s:len() < 3 then return false end\n    local t = {}\n  \
    \  for i = 1, s:len() - 2, 3 do\n        if s:sub(i, i + 3) ~= s:sub(i + 1, i\
    \ + 3) then return false end\n        t[s:sub(i, i + 3)] = true\n    end\n   \
    \ return true\nend", "    if len(s) < 3 then return false end\n    local t = {}\n\
    \    for i = 1, len(s), 3 do\n        if t[s[i]] == true then return false end\n\
    \        t[s[i]] = true\n    end\n    return true\nend", "    if s:len() < 3 then\
    \ return false end\n    local t = {}\n    for i = 1, s:len(), 3 do\n        if\
    \ s:sub(i, i + 3) ~= s:sub(i, i + 3) then return false end\n        table.insert(t,\
    \ s:sub(i, i + 3))\n    end\n    return true\nend", "    if s:len() < 3 then return\
    \ false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s:sub(i,\
    \ i + 3) ~= s:sub(i + 1, i + 3) then return false end\n        table.insert(t,\
    \ s:sub(i, i + 3))\n    end\n    return true\nend", "    if s:len() < 3 then return\
    \ false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i]\
    \ == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n          \
    \  t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n    end\n    for\
    \ i = 1, s:len() - 1, 3 do\n        if not t[s[i]] or not t[s[i+1]] or not t[s[i+2]]\
    \ then\n            return false\n        end\n    end\n    return true\nend",
  "    if len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s),\
    \ 3 do\n        if not t[s[i]] then t[s[i]] = 1 end\n        if not t[s[i+1]]\
    \ then t[s[i+1]] = 1 end\n        if not t[s[i+2]] then t[s[i+2]] = 1 end\n  \
    \  end\n    return len(t) == len(s)\nend", "    if len(s) < 3 then return false\
    \ end\n    local t = {}\n    for i = 1, len(s), 3 do\n        if not t[s[i]] then\
    \ t[s[i]] = true end\n        if not t[s[i+1]] then t[s[i+1]] = true end\n   \
    \     if not t[s[i+2]] then t[s[i+2]] = true end\n    end\n    return t[s[1]]\
    \ and t[s[2]] and t[s[3]]\nend", "    if len(s) < 3 then return false end\n  \
    \  local t = {}\n    for i = 1, len(s), 3 do\n        if t[s[i]] == true then\
    \ return false end\n        t[s[i]] = true\n    end\n    return true\nend", " \
    \   if len(s) < 3 then return false end\n    local t = {}\n    for i = 1, len(s),\
    \ 3 do\n        if t[s[i]] == true then return false end\n        t[s[i]] = true\n\
    \    end\n    return true\nend", "    if s:len() < 3 then return false end\n \
    \   local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s:sub(i, i + 3)\
    \ ~= s:sub(i + 1, i + 3) then return false end\n        t[s:sub(i, i + 3)] = true\n\
    \    end\n    return true\nend", "    if s:len() < 3 then return false end\n \
    \   local t = {}\n    for i = 1, s:len() - 2, 3 do\n        if s[i] == s[i+1]\
    \ and s[i+1] == s[i+2] then\n            if t[s[i]] == nil then\n            \
    \    t[s[i]] = true\n            else\n                return false\n        \
    \    end\n        end\n    end\n    return true\nend", "    if s:len() < 3 then\
    \ return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n     \
    \   if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n\
    \            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n   \
    \ end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and t[s[i+1]] and\
    \ t[s[i+2]] then\n            return true\n        end\n    end\n    return false\n\
    end\nprint(is_happy('a'))\nprint(is_happy('aa'))\nprint(is_happy('abcd'))\nprint(is_happy('aabb'))\n\
    print(is_happy('adb'))\nprint(is_happy('xyy'))\n", "    local t = {}\n    for\
    \ i = 1, #s, 3 do\n        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n     \
    \       t[s[i]] = t[s[i+1]] = t[s[i+2]] = true\n        end\n    end\n    return\
    \ #t == #s\nend", "    if len(s) < 3 then\n        return false\n    end\n   \
    \ local t = {}\n    for i = 1, len(s), 3 do\n        if t[s[i]] == true then\n\
    \            return false\n        end\n        t[s[i]] = true\n    end\n    return\
    \ true\nend", "    if len(s) < 3 then return false end\n    local t = {}\n   \
    \ for i = 1, len(s), 3 do\n        if t[s[i]] == true then return false end\n\
    \        t[s[i]] = true\n    end\n    return true\nend", "    local t = {}\n \
    \   for i = 1, #s, 3 do\n        if t[s[i]] == s[i+1] and t[s[i+1]] == s[i+2]\
    \ then\n            return true\n        end\n        t[s[i]] = s[i+1]\n     \
    \   t[s[i+1]] = s[i+2]\n    end\n    return false\nend", "    if len(s) < 3 then\
    \ return false end\n    local t = {}\n    for i = 1, len(s), 3 do\n        if\
    \ t[s[i]] == true then return false end\n        t[s[i]] = true\n    end\n   \
    \ return true\nend", "    local t = {}\n    for i = 1, #s, 3 do\n        if s[i]\
    \ == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = t[s[i+1]] = t[s[i+2]]\
    \ = true\n        end\n    end\n    return #t == #s\nend", "    if s:len() < 3\
    \ then return false end\n    local t = {}\n    for i = 1, s:len() - 2, 3 do\n\
    \        if s[i] == s[i+1] and s[i+1] == s[i+2] then\n            t[s[i]] = true\n\
    \            t[s[i+1]] = true\n            t[s[i+2]] = true\n        end\n   \
    \ end\n    for i = 1, s:len() - 1, 3 do\n        if t[s[i]] and t[s[i+1]] and\
    \ t[s[i+2]] then\n            return true\n        end\n    end\n    return false\n\
    end", "    if len(s) < 3 then return false end\n    local t = {}\n    for i =\
    \ 1, len(s), 3 do\n        if not t[s[i]] then t[s[i]] = 1 end\n        if t[s[i]]\
    \ == t[s[i+1]] == t[s[i+2]] then return true end\n    end\n    return false\n\
    end\nprint(is_happy(\"a\"))\nprint(is_happy(\"aa\"))\nprint(is_happy(\"abcd\"\
    ))\nprint(is_happy(\"aabb\"))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"xyy\"\
    ))\n"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
