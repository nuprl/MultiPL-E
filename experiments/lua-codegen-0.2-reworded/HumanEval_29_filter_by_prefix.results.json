{
  "language": "lua",
  "name": "HumanEval_29_filter_by_prefix",
  "results": [
    {
      "exit_code": 1,
      "program": "-- Filter an input table of strings only for ones that start with a given prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings, prefix)\n    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, #prefix) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwpp7l1zo.lua:9: attempt to call a nil value (field 'substring')\nstack traceback:\n\t/tmp/tmpwpp7l1zo.lua:9: in local 'candidate'\n\t/tmp/tmpwpp7l1zo.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907513
    },
    {
      "exit_code": 1,
      "program": "-- Filter an input table of strings only for ones that start with a given prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings, prefix)\n    local result = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc2lo7af_.lua:9: attempt to perform arithmetic on a nil value (field 'length')\nstack traceback:\n\t/tmp/tmpc2lo7af_.lua:9: in local 'candidate'\n\t/tmp/tmpc2lo7af_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907513
    },
    {
      "exit_code": 1,
      "program": "-- Filter an input table of strings only for ones that start with a given prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings, prefix)\n    local filtered = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqnc74neu.lua:9: attempt to perform arithmetic on a nil value (field 'length')\nstack traceback:\n\t/tmp/tmpqnc74neu.lua:9: in local 'candidate'\n\t/tmp/tmpqnc74neu.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907513
    },
    {
      "exit_code": 1,
      "program": "-- Filter an input table of strings only for ones that start with a given prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings, prefix)\n    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpocq5nsts.lua:9: attempt to perform arithmetic on a nil value (field 'length')\nstack traceback:\n\t/tmp/tmpocq5nsts.lua:9: in local 'candidate'\n\t/tmp/tmpocq5nsts.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907513
    },
    {
      "exit_code": 1,
      "program": "-- Filter an input table of strings only for ones that start with a given prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings, prefix)\n    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpocq5nsts.lua:9: attempt to perform arithmetic on a nil value (field 'length')\nstack traceback:\n\t/tmp/tmpocq5nsts.lua:9: in local 'candidate'\n\t/tmp/tmpocq5nsts.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907513
    },
    {
      "exit_code": 1,
      "program": "-- Filter an input table of strings only for ones that start with a given prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings, prefix)\n    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpocq5nsts.lua:9: attempt to perform arithmetic on a nil value (field 'length')\nstack traceback:\n\t/tmp/tmpocq5nsts.lua:9: in local 'candidate'\n\t/tmp/tmpocq5nsts.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907513
    },
    {
      "exit_code": 1,
      "program": "-- Filter an input table of strings only for ones that start with a given prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings, prefix)\n    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpocq5nsts.lua:9: attempt to perform arithmetic on a nil value (field 'length')\nstack traceback:\n\t/tmp/tmpocq5nsts.lua:9: in local 'candidate'\n\t/tmp/tmpocq5nsts.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907513
    },
    {
      "exit_code": 1,
      "program": "-- Filter an input table of strings only for ones that start with a given prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings, prefix)\n    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpocq5nsts.lua:9: attempt to perform arithmetic on a nil value (field 'length')\nstack traceback:\n\t/tmp/tmpocq5nsts.lua:9: in local 'candidate'\n\t/tmp/tmpocq5nsts.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907513
    },
    {
      "exit_code": 1,
      "program": "-- Filter an input table of strings only for ones that start with a given prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings, prefix)\n    local result = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc2lo7af_.lua:9: attempt to perform arithmetic on a nil value (field 'length')\nstack traceback:\n\t/tmp/tmpc2lo7af_.lua:9: in local 'candidate'\n\t/tmp/tmpc2lo7af_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907513
    },
    {
      "exit_code": 1,
      "program": "-- Filter an input table of strings only for ones that start with a given prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings, prefix)\n    local result = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc2lo7af_.lua:9: attempt to perform arithmetic on a nil value (field 'length')\nstack traceback:\n\t/tmp/tmpc2lo7af_.lua:9: in local 'candidate'\n\t/tmp/tmpc2lo7af_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907513
    },
    {
      "exit_code": 1,
      "program": "-- Filter an input table of strings only for ones that start with a given prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings, prefix)\n    local result = {}\n    for _, string in pairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmsn0qs8l.lua:9: attempt to perform arithmetic on a nil value (field 'length')\nstack traceback:\n\t/tmp/tmpmsn0qs8l.lua:9: in local 'candidate'\n\t/tmp/tmpmsn0qs8l.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907513
    },
    {
      "exit_code": 1,
      "program": "-- Filter an input table of strings only for ones that start with a given prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings, prefix)\n    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpocq5nsts.lua:9: attempt to perform arithmetic on a nil value (field 'length')\nstack traceback:\n\t/tmp/tmpocq5nsts.lua:9: in local 'candidate'\n\t/tmp/tmpocq5nsts.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907513
    },
    {
      "exit_code": 1,
      "program": "-- Filter an input table of strings only for ones that start with a given prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings, prefix)\n    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpocq5nsts.lua:9: attempt to perform arithmetic on a nil value (field 'length')\nstack traceback:\n\t/tmp/tmpocq5nsts.lua:9: in local 'candidate'\n\t/tmp/tmpocq5nsts.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907513
    },
    {
      "exit_code": 1,
      "program": "-- Filter an input table of strings only for ones that start with a given prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings, prefix)\n    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, #prefix) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwpp7l1zo.lua:9: attempt to call a nil value (field 'substring')\nstack traceback:\n\t/tmp/tmpwpp7l1zo.lua:9: in local 'candidate'\n\t/tmp/tmpwpp7l1zo.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907513
    },
    {
      "exit_code": 1,
      "program": "-- Filter an input table of strings only for ones that start with a given prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings, prefix)\n    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpocq5nsts.lua:9: attempt to perform arithmetic on a nil value (field 'length')\nstack traceback:\n\t/tmp/tmpocq5nsts.lua:9: in local 'candidate'\n\t/tmp/tmpocq5nsts.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907513
    },
    {
      "exit_code": 1,
      "program": "-- Filter an input table of strings only for ones that start with a given prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings, prefix)\n    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, #prefix) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwpp7l1zo.lua:9: attempt to call a nil value (field 'substring')\nstack traceback:\n\t/tmp/tmpwpp7l1zo.lua:9: in local 'candidate'\n\t/tmp/tmpwpp7l1zo.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907513
    },
    {
      "exit_code": 1,
      "program": "-- Filter an input table of strings only for ones that start with a given prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings, prefix)\n    local result = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc2lo7af_.lua:9: attempt to perform arithmetic on a nil value (field 'length')\nstack traceback:\n\t/tmp/tmpc2lo7af_.lua:9: in local 'candidate'\n\t/tmp/tmpc2lo7af_.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907513
    },
    {
      "exit_code": 1,
      "program": "-- Filter an input table of strings only for ones that start with a given prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings, prefix)\n    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpocq5nsts.lua:9: attempt to perform arithmetic on a nil value (field 'length')\nstack traceback:\n\t/tmp/tmpocq5nsts.lua:9: in local 'candidate'\n\t/tmp/tmpocq5nsts.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907513
    },
    {
      "exit_code": 1,
      "program": "-- Filter an input table of strings only for ones that start with a given prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings, prefix)\n    local result = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, #prefix) == prefix then\n            table.insert(result, string)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplxy35uje.lua:9: attempt to call a nil value (field 'substring')\nstack traceback:\n\t/tmp/tmplxy35uje.lua:9: in local 'candidate'\n\t/tmp/tmplxy35uje.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907513
    },
    {
      "exit_code": 1,
      "program": "-- Filter an input table of strings only for ones that start with a given prefix.\n-- >>> filter_by_prefix([], 'a')\n-- []\n-- >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n-- ['abc', 'array']\nlocal function filter_by_prefix(strings, prefix)\n    local filtered = {}\n    for _, string in ipairs(strings) do\n        if string.substring(1, prefix.length + 1) == prefix then\n            table.insert(filtered, string)\n        end\n    end\n    return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_prefix\n    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpocq5nsts.lua:9: attempt to perform arithmetic on a nil value (field 'length')\nstack traceback:\n\t/tmp/tmpocq5nsts.lua:9: in local 'candidate'\n\t/tmp/tmpocq5nsts.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907513
    }
  ]
}