name: HumanEval_126_is_sorted
language: lua
prompt: "-- Given a table of numbers, return whether or not they are sorted\n-- in\
  \ ascending order. If table has more than 1 duplicate of the same\n-- number, return\
  \ false. Assume no negative numbers and only integers.\n-- Examples\n-- >>> is_sorted([5])\
  \ \n-- True\n-- >>> is_sorted([1, 2, 3, 4, 5]) \n-- True\n-- >>> is_sorted([1, 3,\
  \ 2, 4, 5]) \n-- False\n-- >>> is_sorted([1, 2, 3, 4, 5, 6]) \n-- True\n-- >>> is_sorted([1,\
  \ 2, 3, 4, 5, 6, 7]) \n-- True\n-- >>> is_sorted([1, 3, 2, 4, 5, 6, 7]) \n-- False\n\
  -- >>> is_sorted([1, 2, 2, 3, 3, 4]) \n-- True\n-- >>> is_sorted([1, 2, 2, 2, 3,\
  \ 4]) \n-- False\nlocal function is_sorted(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_sorted\n\
  \    lu.assertEquals(candidate({5}), true)\n    lu.assertEquals(candidate({1, 2,\
  \ 3, 4, 5}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5}), false)\n   \
  \ lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({1,\
  \ 2, 3, 4, 5, 6, 7}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5, 6, 7}),\
  \ false)\n    lu.assertEquals(candidate({}), true)\n    lu.assertEquals(candidate({1}),\
  \ true)\n    lu.assertEquals(candidate({3, 2, 1}), false)\n    lu.assertEquals(candidate({1,\
  \ 2, 2, 2, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 3, 3, 3, 4}), false)\n\
  \    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4}), true)\n    lu.assertEquals(candidate({1,\
  \ 2, 3, 4}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local i, j, tmp\n    for i = 1, #lst, 1 do\n        for j = i +\
    \ 1, #lst, 1 do\n            if lst[i] > lst[j] then\n                tmp = lst[i]\n\
    \                lst[i] = lst[j]\n                lst[j] = tmp\n            end\n\
    \        end\n    end\n    return lst\nend", "    local i = 1\n    local j = 2\n\
    \    local len = #lst\n    while i < len do\n        if lst[i] < lst[i-1] then\n\
    \            return false\n        end\n        i = i + 1\n    end\n    return\
    \ true\nend", "    local i, j, n = 1, 1, #lst\n    while n > 1 do\n        i =\
    \ 1\n        while i < n and lst[i] <= lst[i+1] then\n            i = i + 1\n\
    \        j = n - 1\n        while j > i and lst[j] >= lst[j-1] then\n        \
    \    j = j - 1\n        if j < i then\n            return false\n        n = j\
    \ - i + 1\n        end\n    end\n    return true\nend", "    local sorted = true\n\
    \    for i = 1, #lst do\n        if lst[i] < lst[i-1] then\n            sorted\
    \ = false\n            break\n        end\n    end\n    return sorted\nend", " \
    \   local sorted = true\n    for i = 1, #lst, 2 do\n        if lst[i] < lst[i-1]\
    \ then\n            sorted = false\n            break\n        end\n    end\n\
    \    return sorted\nend", "    local sorted = true\n    for i = 1, #lst do\n \
    \       if lst[i] < lst[i - 1] then\n            sorted = false\n            break\n\
    \        end\n    end\n    return sorted\nend", "    local i = 1\n    local j\
    \ = 2\n    while j <= #lst do\n        if lst[i] < lst[j] then\n            return\
    \ false\n        end\n        i = i + 1\n        j = j + 1\n    end\n    return\
    \ true\nend", "    local i = 1\n    local j = 2\n    while j <= #lst do\n    \
    \    if lst[i] > lst[j] then\n            return false\n        end\n        i\
    \ = i + 1\n        j = j + 1\n    end\n    return true\nend", "    local sorted\
    \ = true\n    for i = 1, #lst do\n        if lst[i] < lst[i-1] then\n        \
    \    sorted = false\n            break\n        end\n    end\n    return sorted\n\
    end", "    local i = 1\n    local j = 2\n    while i < #lst do\n        if lst[i]\
    \ < lst[j] then\n            return false\n        end\n        j = j + 1\n  \
    \      i = i + 1\n    end\n    return true\nend", "    local i, j, temp\n    for\
    \ i = 1, #lst do\n        for j = i + 1, #lst do\n            if lst[i] > lst[j]\
    \ then\n                temp = lst[i]\n                lst[i] = lst[j]\n     \
    \           lst[j] = temp\n            end\n        end\n    end\n    return #lst\
    \ == 1\nend", "    local sorted = true\n    for i = 1, #lst, 2 do\n        if\
    \ lst[i] < lst[i-1] then\n            sorted = false\n            break\n    \
    \    end\n    end\n    return sorted\nend", "    local i, j\n    for i = 1, #lst\
    \ do\n        for j = i + 1, #lst do\n            if lst[i] > lst[j] then\n  \
    \              return false\n            end\n        end\n    end\n    return\
    \ true\nend", "    local t = {}\n    for i = 1, #lst do\n        if lst[i] < lst[i-1]\
    \ then\n            t[lst[i]] = true\n        end\n    end\n    for i = 1, #lst\
    \ do\n        if not t[i] then\n            return false\n        end\n    end\n\
    \    return true\nend", "    local i = 1\n    local j = 2\n    while i < #lst\
    \ do\n        if lst[i] < lst[j] then\n            return false\n        end\n\
    \        j = j + 1\n        i = i + 1\n    end\n    return true\nend", "    local\
    \ i = 1\n    local j = 2\n    while j <= #lst do\n        if lst[i] > lst[j] then\n\
    \            return false\n        end\n        i = i + 1\n        j = j + 1\n\
    \    end\n    return true\nend", "    local i = 1\n    local j = 2\n    while\
    \ i < #lst do\n        if lst[i] < lst[j] then\n            return false\n   \
    \     end\n        i = i + 1\n        j = j + 1\n    end\n    return true\nend",
  "    local i = 1\n    local j = 2\n    while j <= #lst do\n        if lst[i] < lst[j]\
    \ then\n            return false\n        end\n        i = i + 1\n        j =\
    \ j + 1\n    end\n    return true\nend", "    local i = 1\n    local j = 2\n \
    \   while i < #lst do\n        if lst[i] < lst[j] then\n            return false\n\
    \        end\n        i = i + 1\n        j = j + 1\n    end\n    return true\n\
    end", "    local sorted = true\n    for i = 1, #lst do\n        if lst[i] < lst[i-1]\
    \ then\n            sorted = false\n            break\n        end\n    end\n\
    \    return sorted\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
