{
  "name": "HumanEval_147_get_max_triples",
  "language": "lua",
  "prompt": "-- You are given a positive integer n. You have to create an integer table a of length n.\n-- For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n-- Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n-- and a[i] + a[j] + a[k] is a multiple of 3.\n-- Example :\n-- >>> get_max_triples(5)\n-- 1\n-- Explanation: \n-- a = [1, 3, 7, 13, 21]\n-- The only valid triple is (1, 7, 13).\nlocal function get_max_triples(n)\n",
  "tests": "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_triples\n    lu.assertEquals(candidate(5), 1)\n    lu.assertEquals(candidate(6), 4)\n    lu.assertEquals(candidate(10), 36)\n    lu.assertEquals(candidate(100), 53361)\nend\n\nos.exit(lu.LuaUnit.run())",
  "completions": [
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a)\nend",
    "    local t = {}\n    for i = 1, n do\n        t[i] = i * i - i + 1\n    end\n    return t:reduce(function(a, b) return a + b end) / 3\nend",
    "    local t = {}\n    for i = 1, n do\n        t[i] = i * i - i + 1\n    end\n    return function(a)\n        local i, j, k, count = 1, 1, 1, 0\n        for i = 1, n do\n            for j = i + 1, n do\n                for k = j + 1, n do\n                    if t[i] + t[j] + t[k] % 3 == 0 then\n                        count = count + 1\n                    end\n                end\n            end\n        end\n        return count\n    end\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return #a\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return #a\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a)\nend",
    "    local t = {}\n    for i = 1, n do\n        t[i] = i * i - i + 1\n    end\n    return t:reduce(function(a, b)\n        return a + b\n    end, 0) / 3\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return function(i, j, k)\n        return (a[i] + a[j] + a[k]) % 3 == 0\n    end\nend",
    "    local t = {}\n    for i = 1, n, 1 do\n        t[i] = i * i - i + 1\n    end\n    return t:reduce(function(a, b)\n        return a + b\n    end, 0) / 3\nend",
    "    local t = {}\n    for i = 1, n do\n        t[i] = i * i - i + 1\n    end\n    return t:reduce(function(a, b)\n        return a + b\n    end, 0) / 3\nend",
    "    local t = {}\n    for i = 1, n, 1 do\n        for j = i + 1, n, 1 do\n            for k = j + 1, n, 1 do\n                if i * i - i + 1 == j * j - j + 1 and j * j - j + 1 == k * k - k + 1 then\n                    table.insert(t, i, j, k)\n                end\n            end\n        end\n    end\n    return #t\nend",
    "    local t = {}\n    for i = 1, n do\n        t[i] = i * i - i + 1\n    end\n    return t:reduce(function(a, b)\n        return a + b\n    end, 0) / 3\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_max_triples_helper(a, 0, n - 1)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return function(i, j, k)\n        return (a[i] + a[j] + a[k]) % 3 == 0\n    end\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return function(i, j, k)\n        return a[i] + a[j] + a[k] % 3 == 0\n    end\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_max_triples_helper(a, 1, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_max_triples_helper(a, 1, n)\nend",
    "    local t = {}\n    for i = 1, n do\n        t[i] = i * i - i + 1\n    end\n    return t:reduce(function(a, b)\n        return a + b\n    end, 0) / 3\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return #a\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return function(i, j, k)\n        return (a[i] + a[j] + a[k]) % 3 == 0\n    end\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_max_triples_helper(a, 1, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_max_triples_helper(a, 1, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return function(i, j, k)\n        return a[i] * a[j] * a[k] == (a[i] + a[j] + a[k]) * 3\n    end\nend",
    "    local t = {}\n    for i = 1, n do\n        t[i] = i * i - i + 1\n    end\n    return t:reduce(function(a, b)\n        return a + b\n    end, 0) / 3\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_max_triples_helper(a, 1, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return #a\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return #a\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_max_triples_aux(a, 1, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_max_triples_helper(a, 1, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return #a\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return function(i, j, k)\n        return a[i] * a[j] * a[k] == 0 and i < j and j < k\n    end\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return function(i, j, k)\n        return a[i] * a[j] * a[k] == 0 and a[i] + a[j] + a[k] % 3 == 0\n    end\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_max_triples_helper(a, 1, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return #a\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_max_triples_helper(a, 1, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_max_triples_helper(a, 0, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local t = {}\n    for i = 1, n do\n        t[i] = i * i - i + 1\n    end\n    return t:reduce(function(a, b) return a + b end, t) / 3\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a)\nend",
    "    local t = {}\n    for i = 1, n do\n        t[i] = i * i - i + 1\n    end\n    return t:reduce(function(a, b) return a + b end, t) / 3\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return #a\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return #a\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return #a\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return function(i, j, k)\n        return a[i] + a[j] + a[k] % 3 == 0\n    end\nend",
    "    local t = {}\n    for i = 1, n do\n        t[i] = i * i - i + 1\n    end\n    return t:reduce(function(a, b)\n        return a + b\n    end, 0) / 3\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_max_triples_helper(a, 1, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return #a\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return function(i, j, k)\n        return (a[i] + a[j] + a[k]) % 3 == 0\n    end\nend",
    "    local t = {}\n    for i = 1, n do\n        t[i] = i * i - i + 1\n    end\n    return t:reduce(function(a, b)\n        return a + b\n    end, 0) / 3\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return #a\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return #a\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_max_triples_helper(a, 1, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return #a\nend",
    "    local t = {}\n    for i = 1, n do\n        t[i] = i * i - i + 1\n    end\n    return t:reduce(function(a, b)\n        return a + b\n    end, 0) / 3\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return #a\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a)\nend",
    "    local t = {}\n    for i = 1, n do\n        t[i] = i * i - i + 1\n    end\n    return t:reduce(function(a, b)\n        return a + b\n    end, 0) / 3\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return function(i, j, k)\n        return a[i] * a[j] * a[k] == (a[i] + a[j] + a[k]) * 3\n    end\nend",
    "    local t = {}\n    for i = 1, n do\n        t[i] = i * i - i + 1\n    end\n    return t:reduce(function(a, b) return a + b end, t) / 3\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return function(i, j, k)\n        return a[i] + a[j] + a[k] % 3 == 0\n    end\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return function(i, j, k)\n        return (a[i] + a[j] + a[k]) % 3 == 0\n    end\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_max_triples_helper(a, 1, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_max_triples_helper(a, 1, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_max_triples_helper(a, 1, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return function(i, j, k)\n        return a[i] + a[j] + a[k] % 3 == 0\n    end\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_max_triples_helper(a, 1, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a)\nend",
    "    local t = {}\n    for i = 1, n do\n        t[i] = i * i - i + 1\n    end\n    return t:reduce(function(a, b)\n        return a + b\n    end, 0) / 3\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_max_triples_helper(a, 1, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return function(i, j, k)\n        if i > j then return 0 end\n        if i > k then return 0 end\n        if j > k then return 0 end\n        if a[i] + a[j] + a[k] % 3 == 0 then return 1 end\n        return 0\n    end\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_max_triples_helper(a, 1, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_max_triples_helper(a, 1, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return function(i, j, k)\n        return (a[i] + a[j] + a[k]) % 3 == 0\n    end\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return #a\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_max_triples_helper(a, 1, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return #a\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return #a\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return function(i, j, k)\n        return a[i] * a[j] * a[k] == i * j * k and i < j and j < k\n    end\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_max_triples_helper(a, 1, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return function(i, j, k)\n        return (a[i] + a[j] + a[k]) % 3 == 0\n    end\nend",
    "    local t = {}\n    for i = 1, n do\n        t[i] = i * i - i + 1\n    end\n    return t:reduce(function(a, b) return a + b end, t) / 3\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_max_triples_helper(a, 1, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_max_triples_helper(a, 1, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return #a\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return function(i, j, k)\n        return #a[i] * #a[j] * #a[k]\n    end\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_max_triples_helper(a, 1, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return #a\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return function(i, j, k)\n        return (a[i] + a[j] + a[k]) % 3 == 0\n    end\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_max_triples_helper(a, 0, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_max_triples_helper(a, 1, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_max_triples_helper(a, 1, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return #a\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_max_triples_helper(a, 1, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return function(i, j, k)\n        return a[i] * a[j] * a[k] == 0 and a[i] + a[j] + a[k] % 3 == 0\n    end\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return function(i, j, k)\n        return (a[i] + a[j] + a[k]) % 3 == 0\n    end\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return function(i, j, k)\n        return a[i] * a[j] * a[k] == 0 and i < j and j < k and a[i] + a[j] + a[k] % 3 == 0\n    end\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return #a\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_max_triples_helper(a, 1, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_max_triples_helper(a, 1, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_max_triples_helper(a, 1, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return function(i, j, k)\n        return (a[i] + a[j] + a[k]) % 3 == 0\n    end\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_max_triples_helper(a, 1, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_max_triples_helper(a, 1, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_max_triples_helper(a, 1, n)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a, n)\nend",
    "    local t = {}\n    for i = 1, n do\n        t[i] = i * i - i + 1\n    end\n    return t:reduce(function(a, b) return a + b end, t) / 3\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return #a\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a)\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return function(i, j, k)\n        return a[i] + a[j] + a[k] % 3 == 0\n    end\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return #a\nend",
    "    local t = {}\n    for i = 1, n do\n        t[i] = i * i - i + 1\n    end\n    return t:reduce(function(a, b)\n        return a + b\n    end, 0) / 3\nend",
    "    local a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    return get_triples(a)\nend"
  ],
  "stop_tokens": [
    "\nlocal",
    "\nfunction",
    "\n--",
    "\n\n"
  ]
}