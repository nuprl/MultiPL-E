{
  "language": "lua",
  "name": "HumanEval_151_double_the_difference",
  "results": [
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    return sum(lst[1:]) * sum(lst[1:]) - sum(lst[1:]) * sum(lst[1:]) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpk_gw0w38.lua:14: ']' expected near ':'\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    return sum(lst[1:]) * sum(lst[1:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpjfb8baxt.lua:14: 'end' expected (to close 'if' at line 13) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp_lgu1gff.lua:16: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        if lst[i] > 0 and math.floor(lst[i]) == lst[i] then\n            sum = sum + lst[i] * lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6g6wh_x3.lua:30: expected: 0, actual: 64\nstack traceback:\n\t/tmp/tmp6g6wh_x3.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    local sum = 0\n    for i = 1, #lst, 2 do\n        if lst[i] > 0 and lst[i] % 2 == 1 then\n            sum = sum + lst[i] * lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpghuugcj6.lua:14: 'end' expected (to close 'if' at line 13) near 'local'\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    return sum(lst[1:]) + sum(lst[1:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpesne1_7h.lua:14: ']' expected near ':'\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    return sum(lst[1:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmplncl7u7v.lua:14: 'end' expected (to close 'if' at line 13) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst do\n        if lst[i] ~= 0 and lst[i] % 2 == 1 then\n            sum = sum + lst[i] * lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx81vtcge.lua:30: expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpx81vtcge.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp_lgu1gff.lua:16: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        if lst[i] > 0 and lst[i] % 2 == 1 then\n            sum = sum + lst[i] * lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfn_73r02.lua:31: expected: 34, actual: 25\nstack traceback:\n\t/tmp/tmpfn_73r02.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        if lst[i] > 0 and lst[i] % 2 == 1 then\n            sum = sum + lst[i] * lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfn_73r02.lua:31: expected: 34, actual: 25\nstack traceback:\n\t/tmp/tmpfn_73r02.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    return sum(map(function(x) return x*x end, lst))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_a70d984.lua:14: attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmp_a70d984.lua:14: in local 'candidate'\n\t/tmp/tmp_a70d984.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp_lgu1gff.lua:16: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i, v in ipairs(lst) do\n        if v < 0 or v % 1 ~= 0 then continue end\n        sum = sum + v * v\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpj7gm3yb6.lua:16: syntax error near 'end'\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i] * lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbfg5c_bb.lua:26: expected: 0, actual: 0.1\nstack traceback:\n\t/tmp/tmpbfg5c_bb.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i] * lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbfg5c_bb.lua:26: expected: 0, actual: 0.1\nstack traceback:\n\t/tmp/tmpbfg5c_bb.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for inlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmp_lgu1gff.lua:16: 'do' expected near '='\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    return sum(lst) - sum(lst) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwz5uz4ei.lua:14: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpwz5uz4ei.lua:14: in local 'candidate'\n\t/tmp/tmpwz5uz4ei.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    return sum(lst[1:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmprd5uk7f9.lua:14: ']' expected near ':'\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    return sum(lst[1:]) * sum(lst[1:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpjfb8baxt.lua:14: 'end' expected (to close 'if' at line 13) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        if lst[i] ~= 0 and math.floor(lst[i]) ~= lst[i] then\n            sum = sum + math.pow(lst[i], 2)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3hnc4mjd.lua:27: expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmp3hnc4mjd.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i=1,#lst,2 do\n        if lst[i] ~= 0 and lst[i] ~= 0 and lst[i] ~= 0 then\n            sum = sum + lst[i]*lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuuxj9uia.lua:28: expected: 0, actual: 0.1\nstack traceback:\n\t/tmp/tmpuuxj9uia.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i=1,#lst,2 do\n        if lst[i] > 0 and lst[i] % 2 == 1 then\n            sum = sum + lst[i]*lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9mn1hn4z.lua:31: expected: 34, actual: 25.0\nstack traceback:\n\t/tmp/tmp9mn1hn4z.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i=1,#lst do\n        if lst[i] > 0 and lst[i] % 2 == 1 then\n            sum = sum + lst[i]*lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    local sum = 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i] * lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "lua: /tmp/tmphb9m4n9c.lua:14: 'end' expected (to close 'if' at line 13) near 'local'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i=1,#lst,2 do\n        if lst[i] ~= 0 and math.mod(lst[i], 2) == 1 then\n            sum = sum + math.pow(lst[i], 2)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    return sum(lst[1:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmprd5uk7f9.lua:14: ']' expected near ':'\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i=1,#lst,2 do\n        if lst[i] > 0 and lst[i] % 2 == 1 then\n            sum = sum + lst[i]*lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9mn1hn4z.lua:31: expected: 34, actual: 25.0\nstack traceback:\n\t/tmp/tmp9mn1hn4z.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        if lst[i] > 0 and lst[i] % 2 == 1 then\n            sum = sum + lst[i] * lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfn_73r02.lua:31: expected: 34, actual: 25\nstack traceback:\n\t/tmp/tmpfn_73r02.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907450
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    local sum = 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i] * lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "lua: /tmp/tmphb9m4n9c.lua:14: 'end' expected (to close 'if' at line 13) near 'local'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i=1,#lst,2 do\n        if lst[i] > 0 and lst[i] % 2 == 1 then\n            sum = sum + lst[i]*lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9mn1hn4z.lua:31: expected: 34, actual: 25.0\nstack traceback:\n\t/tmp/tmp9mn1hn4z.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    return sum(lst[1:]) * sum(lst[1:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpjfb8baxt.lua:14: 'end' expected (to close 'if' at line 13) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    return sum(lst[1:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmplncl7u7v.lua:14: 'end' expected (to close 'if' at line 13) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i=1,#lst,2 do\n        if lst[i] ~= 0 and lst[i] ~= 0 then\n            sum = sum + lst[i]*lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw0yy_6on.lua:28: expected: 0, actual: 0.1\nstack traceback:\n\t/tmp/tmpw0yy_6on.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i=1,#lst,2 do\n        if lst[i] > 0 and math.floor(lst[i]) == lst[i] then\n            sum = sum + lst[i]*lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw4rn6xwx.lua:30: expected: 0, actual: 64.0\nstack traceback:\n\t/tmp/tmpw4rn6xwx.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i=1,#lst,2 do\n        if lst[i] > 0 and lst[i] % 2 == 1 then\n            sum = sum + lst[i] * lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj5ku3fqk.lua:31: expected: 34, actual: 25.0\nstack traceback:\n\t/tmp/tmpj5ku3fqk.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    local sum = 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i] * lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "lua: /tmp/tmphb9m4n9c.lua:14: 'end' expected (to close 'if' at line 13) near 'local'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    return sum(lst[1:]) * sum(lst[1:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpjfb8baxt.lua:14: 'end' expected (to close 'if' at line 13) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i] * lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbfg5c_bb.lua:26: expected: 0, actual: 0.1\nstack traceback:\n\t/tmp/tmpbfg5c_bb.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    return sum(lst[1:]) * sum(lst[1:]) - sum(lst[1:]) * sum(lst[1:]) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpk_gw0w38.lua:14: ']' expected near ':'\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i=1,#lst do\n        if lst[i] > 0 and math.floor(lst[i]) == lst[i] then\n            sum = sum + lst[i]*lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp358xnfyg.lua:27: expected: 25, actual: 41.0\nstack traceback:\n\t/tmp/tmp358xnfyg.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i=1,#lst,2 do\n        sum = sum + lst[i]*lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy1zm2wxa.lua:26: expected: 0, actual: 0.1\nstack traceback:\n\t/tmp/tmpy1zm2wxa.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i=1,#lst,2 do\n        if lst[i] ~= 0 and lst[i] ~= 0 then\n            sum = sum + lst[i]*lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw0yy_6on.lua:28: expected: 0, actual: 0.1\nstack traceback:\n\t/tmp/tmpw0yy_6on.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i=1,#lst do\n        if lst[i] > 0 and math.floor(lst[i]) == lst[i] then\n            sum = sum + math.pow(lst[i],2)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoiyqyl1u.lua:27: expected: 25, actual: 41.0\nstack traceback:\n\t/tmp/tmpoiyqyl1u.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    return sum(lst[1:]) * sum(lst[1:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpjfb8baxt.lua:14: 'end' expected (to close 'if' at line 13) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    return sum(lst[1:]) * sum(lst[1:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpjfb8baxt.lua:14: 'end' expected (to close 'if' at line 13) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        if lst[i] ~= 0 and math.floor(lst[i]) ~= lst[i] then\n            sum = sum + math.pow(lst[i], 2)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3hnc4mjd.lua:27: expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmp3hnc4mjd.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        if lst[i] ~= 0 and math.floor(lst[i]) ~= lst[i] then\n            sum = sum + math.pow(lst[i], 2)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3hnc4mjd.lua:27: expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmp3hnc4mjd.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst do\n        if lst[i] ~= 0 and math.floor(lst[i]) ~= lst[i] then\n            sum = sum + math.pow(lst[i], 2)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3uba0y4_.lua:27: expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmp3uba0y4_.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    local sum = 0\n    for i = 1, #lst, 2 do\n        if lst[i] > 0 and lst[i] % 2 == 1 then\n            sum = sum + lst[i] * lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpghuugcj6.lua:14: 'end' expected (to close 'if' at line 13) near 'local'\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    return sum(lst[1:]) * sum(lst[1:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpjfb8baxt.lua:14: 'end' expected (to close 'if' at line 13) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    return sum(lst[1:])^2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "lua: /tmp/tmp8elt6y4h.lua:14: 'end' expected (to close 'if' at line 13) near 'return'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    return math.sqrt(sum(lst)^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbje9o86a.lua:14: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpbje9o86a.lua:14: in local 'candidate'\n\t/tmp/tmpbje9o86a.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i=1,#lst,2 do\n        if lst[i] ~= 0 and math.floor(lst[i]) ~= 0 then\n            sum = sum + math.pow(lst[i],2)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj4xc_j50.lua:29: expected: 0, actual: 1000.0\nstack traceback:\n\t/tmp/tmpj4xc_j50.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i=1,#lst,2 do\n        if lst[i] ~= 0 then\n            sum = sum + lst[i]*lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjnb1rjcn.lua:28: expected: 0, actual: 0.1\nstack traceback:\n\t/tmp/tmpjnb1rjcn.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        if lst[i] ~= 0 and math.floor(lst[i]) ~= lst[i] then\n            sum = sum + math.pow(lst[i], 2)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3hnc4mjd.lua:27: expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmp3hnc4mjd.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    return sum(lst) * #lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "lua: /tmp/tmpvjpa1sbi.lua:14: 'end' expected (to close 'if' at line 13) near 'return'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i] * lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbfg5c_bb.lua:26: expected: 0, actual: 0.1\nstack traceback:\n\t/tmp/tmpbfg5c_bb.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907450
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    return sum(lst) - sum(filter(function(x) x > 0 and math.floor(x) == x, lst))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "lua: /tmp/tmpdwkuxnj6.lua:14: syntax error near '>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        if lst[i] > 0 and math.floor(lst[i]) == lst[i] then\n            sum = sum + lst[i] * lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6g6wh_x3.lua:30: expected: 0, actual: 64\nstack traceback:\n\t/tmp/tmp6g6wh_x3.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    return sum(lst[1:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmplncl7u7v.lua:14: 'end' expected (to close 'if' at line 13) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        if lst[i] ~= 0 and lst[i] ~= 0 then\n            sum = sum + lst[i] * lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_cuqs3xl.lua:28: expected: 0, actual: 0.1\nstack traceback:\n\t/tmp/tmp_cuqs3xl.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    return sum(map(function(x) return x * x end, lst))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpraumtft6.lua:14: attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmpraumtft6.lua:14: in local 'candidate'\n\t/tmp/tmpraumtft6.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    return sum(lst[1:]) * sum(lst[1:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpjfb8baxt.lua:14: 'end' expected (to close 'if' at line 13) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        if lst[i] ~= 0 and math.floor(lst[i]) ~= lst[i] then\n            sum = sum + math.pow(lst[i], 2)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3hnc4mjd.lua:27: expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmp3hnc4mjd.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    return sum(lst[1:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmplncl7u7v.lua:14: 'end' expected (to close 'if' at line 13) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i=1,#lst,2 do\n        if lst[i] ~= 0 and lst[i] ~= 0 then\n            sum = sum + lst[i]*lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw0yy_6on.lua:28: expected: 0, actual: 0.1\nstack traceback:\n\t/tmp/tmpw0yy_6on.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i=1,#lst,2 do\n        if lst[i] ~= 0 and math.floor(lst[i]) ~= lst[i] then\n            sum = sum + math.pow(lst[i],2)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_inkvve.lua:27: expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmp7_inkvve.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i=1,#lst,2 do\n        sum = sum + lst[i] * lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_g17uiel.lua:26: expected: 0, actual: 0.1\nstack traceback:\n\t/tmp/tmp_g17uiel.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    return sum(lst[1:]) - sum(lst[2:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "lua: /tmp/tmpkr7_7x5g.lua:14: ']' expected near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    return sum(lst[1:]) - sum(lst[2:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "lua: /tmp/tmpkr7_7x5g.lua:14: ']' expected near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    return sum(lst[1:]) * sum(lst[1:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpjfb8baxt.lua:14: 'end' expected (to close 'if' at line 13) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    return math.sqrt(sum(lst) + sum(lst)^2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6kg9ydbw.lua:14: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmp6kg9ydbw.lua:14: in local 'candidate'\n\t/tmp/tmp6kg9ydbw.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        if lst[i] > 0 and lst[i] % 2 == 1 then\n            sum = sum + lst[i] * lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfn_73r02.lua:31: expected: 34, actual: 25\nstack traceback:\n\t/tmp/tmpfn_73r02.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        if lst[i] > 0 and lst[i] % 2 == 1 then\n            sum = sum + lst[i] * lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfn_73r02.lua:31: expected: 34, actual: 25\nstack traceback:\n\t/tmp/tmpfn_73r02.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        if lst[i] > 0 and lst[i] % 2 == 1 then\n            sum = sum + lst[i] * lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfn_73r02.lua:31: expected: 34, actual: 25\nstack traceback:\n\t/tmp/tmpfn_73r02.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i] * lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbfg5c_bb.lua:26: expected: 0, actual: 0.1\nstack traceback:\n\t/tmp/tmpbfg5c_bb.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    local sum = 0\n    for i = 1, #lst, 2 do\n        if lst[i] > 0 and lst[i] % 2 == 1 then\n            sum = sum + lst[i] * lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpghuugcj6.lua:14: 'end' expected (to close 'if' at line 13) near 'local'\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst do\n        if lst[i] ~= 0 and math.floor(lst[i]) ~= lst[i] then\n            sum = sum + math.pow(lst[i], 2)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3uba0y4_.lua:27: expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmp3uba0y4_.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    return sum(lst[1:]) * sum(lst[1:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpjfb8baxt.lua:14: 'end' expected (to close 'if' at line 13) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i=1,#lst,2 do\n        if lst[i] ~= 0 and math.floor(lst[i]) ~= lst[i] then\n            sum = sum + math.pow(lst[i], 2)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuw5w4kah.lua:27: expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmpuw5w4kah.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    return sum(lst[1:]) * sum(lst[1:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpjfb8baxt.lua:14: 'end' expected (to close 'if' at line 13) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    return sum(lst[1:]) * sum(lst[1:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpjfb8baxt.lua:14: 'end' expected (to close 'if' at line 13) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    return sum(lst[1:]) * sum(lst[1:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpjfb8baxt.lua:14: 'end' expected (to close 'if' at line 13) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i] * lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbfg5c_bb.lua:26: expected: 0, actual: 0.1\nstack traceback:\n\t/tmp/tmpbfg5c_bb.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907450
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    return sum(lst) - sum(filter(function(x) x > 0 and math.floor(x) == x, lst)) ** 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "lua: /tmp/tmpvpwoccqc.lua:14: syntax error near '>'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i=1,#lst,2 do\n        if lst[i] > 0 and lst[i] % 2 == 1 then\n            sum = sum + lst[i]*lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9mn1hn4z.lua:31: expected: 34, actual: 25.0\nstack traceback:\n\t/tmp/tmp9mn1hn4z.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    return sum(lst[1:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmprd5uk7f9.lua:14: ']' expected near ':'\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    return sum(lst) * sum(lst)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "lua: /tmp/tmpa4eli4il.lua:14: 'end' expected (to close 'if' at line 13) near 'return'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i] * lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbfg5c_bb.lua:26: expected: 0, actual: 0.1\nstack traceback:\n\t/tmp/tmpbfg5c_bb.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    return sum(lst[1:]) * sum(lst[1:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpjfb8baxt.lua:14: 'end' expected (to close 'if' at line 13) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    return sum(lst[1:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmplncl7u7v.lua:14: 'end' expected (to close 'if' at line 13) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i] * lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbfg5c_bb.lua:26: expected: 0, actual: 0.1\nstack traceback:\n\t/tmp/tmpbfg5c_bb.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    return sum(lst[1:]) * sum(lst[1:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpjfb8baxt.lua:14: 'end' expected (to close 'if' at line 13) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    return sum(lst[1:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmplncl7u7v.lua:14: 'end' expected (to close 'if' at line 13) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    return sum(lst[1:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmplncl7u7v.lua:14: 'end' expected (to close 'if' at line 13) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    local sum = 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i] * lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "lua: /tmp/tmphb9m4n9c.lua:14: 'end' expected (to close 'if' at line 13) near 'local'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        if lst[i] > 0 and lst[i] % 2 == 1 then\n            sum = sum + lst[i] * lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfn_73r02.lua:31: expected: 34, actual: 25\nstack traceback:\n\t/tmp/tmpfn_73r02.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i] * lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbfg5c_bb.lua:26: expected: 0, actual: 0.1\nstack traceback:\n\t/tmp/tmpbfg5c_bb.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907450
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i=1,#lst,2 do\n        if lst[i] ~= 0 and math.floor(lst[i]) ~= 0 then\n            sum = sum + math.pow(lst[i],2)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj4xc_j50.lua:29: expected: 0, actual: 1000.0\nstack traceback:\n\t/tmp/tmpj4xc_j50.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    return sum(lst) * #lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "lua: /tmp/tmpvjpa1sbi.lua:14: 'end' expected (to close 'if' at line 13) near 'return'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    local sum = 0\n    for i = 1, #lst, 2 do\n        if lst[i] > 0 and lst[i] % 2 == 1 then\n            sum = sum + lst[i] * lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpghuugcj6.lua:14: 'end' expected (to close 'if' at line 13) near 'local'\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    return sum(lst[1:]) * sum(lst[1:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpjfb8baxt.lua:14: 'end' expected (to close 'if' at line 13) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i] * lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbfg5c_bb.lua:26: expected: 0, actual: 0.1\nstack traceback:\n\t/tmp/tmpbfg5c_bb.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        if lst[i] > 0 and lst[i] % 2 == 1 then\n            sum = sum + lst[i] * lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfn_73r02.lua:31: expected: 34, actual: 25\nstack traceback:\n\t/tmp/tmpfn_73r02.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i] * lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbfg5c_bb.lua:26: expected: 0, actual: 0.1\nstack traceback:\n\t/tmp/tmpbfg5c_bb.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        if lst[i] > 0 and lst[i] % 2 == 1 then\n            sum = sum + lst[i] * lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfn_73r02.lua:31: expected: 34, actual: 25\nstack traceback:\n\t/tmp/tmpfn_73r02.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    return sum(lst[1:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmprd5uk7f9.lua:14: ']' expected near ':'\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    local sum = 0\n    for i = 1, #lst, 2 do\n        if lst[i] > 0 and lst[i] % 2 == 1 then\n            sum = sum + lst[i] * lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpghuugcj6.lua:14: 'end' expected (to close 'if' at line 13) near 'local'\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i=1,#lst,2 do\n        sum = sum + lst[i]*lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy1zm2wxa.lua:26: expected: 0, actual: 0.1\nstack traceback:\n\t/tmp/tmpy1zm2wxa.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i] * lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbfg5c_bb.lua:26: expected: 0, actual: 0.1\nstack traceback:\n\t/tmp/tmpbfg5c_bb.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907450
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    return sum(lst) - sum(filter(function(x) x > 0, lst)) ** 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "lua: /tmp/tmpqvb9jvdt.lua:14: 'end' expected (to close 'if' at line 13) near 'return'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    return sum(lst[1:]) * sum(lst[1:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpjfb8baxt.lua:14: 'end' expected (to close 'if' at line 13) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    return sum(lst[1:]) - sum(lst[1:]) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "lua: /tmp/tmp0_88jvuc.lua:14: ']' expected near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    return sum(lst[1:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmplncl7u7v.lua:14: 'end' expected (to close 'if' at line 13) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        if lst[i] > 0 and lst[i] % 2 == 1 then\n            sum = sum + lst[i] * lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfn_73r02.lua:31: expected: 34, actual: 25\nstack traceback:\n\t/tmp/tmpfn_73r02.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907450
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i=1,#lst,2 do\n        if lst[i] > 0 and lst[i] % 2 == 1 then\n            sum = sum + lst[i]*lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9mn1hn4z.lua:31: expected: 34, actual: 25.0\nstack traceback:\n\t/tmp/tmp9mn1hn4z.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    return sum(lst[1:]) * sum(lst[1:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpjfb8baxt.lua:14: 'end' expected (to close 'if' at line 13) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    return sum(lst[1:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmplncl7u7v.lua:14: 'end' expected (to close 'if' at line 13) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst do\n        if lst[i] > 0 and lst[i] % 2 == 1 then\n            sum = sum + lst[i] * lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i=1,#lst,2 do\n        if lst[i] > 0 and lst[i] % 2 == 1 then\n            sum = sum + lst[i] * lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj5ku3fqk.lua:31: expected: 34, actual: 25.0\nstack traceback:\n\t/tmp/tmpj5ku3fqk.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i=1,#lst do\n        if lst[i] > 0 and math.floor(lst[i]) == lst[i] then\n            sum = sum + math.pow(lst[i],2)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoiyqyl1u.lua:27: expected: 25, actual: 41.0\nstack traceback:\n\t/tmp/tmpoiyqyl1u.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        if lst[i] > 0 and lst[i] % 2 == 1 then\n            sum = sum + lst[i] * lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfn_73r02.lua:31: expected: 34, actual: 25\nstack traceback:\n\t/tmp/tmpfn_73r02.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907450
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    return sum(lst) * sum(lst)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "lua: /tmp/tmpa4eli4il.lua:14: 'end' expected (to close 'if' at line 13) near 'return'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i=1,#lst,2 do\n        if lst[i] > 0 and lst[i] % 2 == 1 then\n            sum = sum + lst[i]*lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9mn1hn4z.lua:31: expected: 34, actual: 25.0\nstack traceback:\n\t/tmp/tmp9mn1hn4z.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    return sum(lst[1:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmprd5uk7f9.lua:14: ']' expected near ':'\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        if lst[i] > 0 and lst[i] % 2 == 1 then\n            sum = sum + lst[i] * lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfn_73r02.lua:31: expected: 34, actual: 25\nstack traceback:\n\t/tmp/tmpfn_73r02.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907450
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i=1,#lst,2 do\n        if lst[i] > 0 and lst[i] % 2 == 1 then\n            sum = sum + lst[i]*lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9mn1hn4z.lua:31: expected: 34, actual: 25.0\nstack traceback:\n\t/tmp/tmp9mn1hn4z.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        if lst[i] > 0 and lst[i] % 2 == 1 then\n            sum = sum + lst[i] * lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfn_73r02.lua:31: expected: 34, actual: 25\nstack traceback:\n\t/tmp/tmpfn_73r02.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907450
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i=1,#lst do\n        if lst[i] ~= 0 and math.floor(lst[i]) ~= lst[i] then\n            sum = sum + math.pow(lst[i],2)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57kn7iac.lua:27: expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmp57kn7iac.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    return sum(map(function(x) return x * x end, lst))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpraumtft6.lua:14: attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmpraumtft6.lua:14: in local 'candidate'\n\t/tmp/tmpraumtft6.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i] * lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbfg5c_bb.lua:26: expected: 0, actual: 0.1\nstack traceback:\n\t/tmp/tmpbfg5c_bb.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907450
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i=1,#lst,2 do\n        if lst[i] ~= 0 and lst[i] ~= 0 then\n            sum = sum + lst[i]*lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw0yy_6on.lua:28: expected: 0, actual: 0.1\nstack traceback:\n\t/tmp/tmpw0yy_6on.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        if lst[i] > 0 and math.floor(lst[i]) == lst[i] then\n            sum = sum + lst[i] * lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6g6wh_x3.lua:30: expected: 0, actual: 64\nstack traceback:\n\t/tmp/tmp6g6wh_x3.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907450
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i=1,#lst do\n        if lst[i] > 0 and math.floor(lst[i]) == lst[i] then\n            sum = sum + lst[i]*lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp358xnfyg.lua:27: expected: 25, actual: 41.0\nstack traceback:\n\t/tmp/tmp358xnfyg.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    return sum(lst[1:]) * sum(lst[1:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpjfb8baxt.lua:14: 'end' expected (to close 'if' at line 13) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        if lst[i] ~= 0 and math.floor(lst[i]) ~= lst[i] then\n            sum = sum + math.pow(lst[i], 2)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3hnc4mjd.lua:27: expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmp3hnc4mjd.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    return sum(lst[1:]) * #lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "lua: /tmp/tmp6kqijicj.lua:14: 'end' expected (to close 'if' at line 13) near 'return'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i=1,#lst do\n        if lst[i] ~= 0 and math.floor(lst[i]) ~= lst[i] then\n            sum = sum + math.pow(lst[i], 2)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeis1i6ab.lua:27: expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmpeis1i6ab.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    return sum(lst[1:]) * sum(lst[1:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpjfb8baxt.lua:14: 'end' expected (to close 'if' at line 13) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i=1,#lst,2 do\n        if lst[i] ~= 0 and math.floor(lst[i]) ~= lst[i] then\n            sum = sum + math.pow(lst[i],2)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_inkvve.lua:27: expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmp7_inkvve.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i=1,#lst,2 do\n        if lst[i] ~= 0 and math.floor(lst[i]) ~= lst[i] then\n            sum = sum + math.pow(lst[i],2)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_inkvve.lua:27: expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmp7_inkvve.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i=1,#lst do\n        if lst[i] ~= 0 and lst[i] ~= 0 then\n            sum = sum + lst[i]*lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvlenz4t2.lua:27: expected: 25, actual: 41.0\nstack traceback:\n\t/tmp/tmpvlenz4t2.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    local sum = 0\n    for i=1,#lst,2 do\n        if lst[i] > 0 and lst[i] % 2 == 1 then\n            sum = sum + lst[i] * lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "lua: /tmp/tmpctnnh9ea.lua:14: 'end' expected (to close 'if' at line 13) near 'local'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst do\n        if lst[i] > 0 and lst[i] % 2 == 1 then\n            sum = sum + lst[i] * lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    return sum(lst) * #lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp911c2al5.lua:14: attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmp911c2al5.lua:14: in local 'candidate'\n\t/tmp/tmp911c2al5.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        if lst[i] ~= 0 and math.floor(lst[i]) ~= lst[i] then\n            sum = sum + math.pow(lst[i], 2)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3hnc4mjd.lua:27: expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmp3hnc4mjd.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        if lst[i] > 0 and lst[i] % 2 == 1 then\n            sum = sum + lst[i] * lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfn_73r02.lua:31: expected: 34, actual: 25\nstack traceback:\n\t/tmp/tmpfn_73r02.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907450
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    return sum(lst[1:]) * sum(lst[1:]) - sum(lst[2:]) * sum(lst[2:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "lua: /tmp/tmpa0e7dhps.lua:14: ']' expected near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i=1,#lst,2 do\n        if lst[i] > 0 and lst[i] % 2 == 1 then\n            sum = sum + lst[i]*lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9mn1hn4z.lua:31: expected: 34, actual: 25.0\nstack traceback:\n\t/tmp/tmp9mn1hn4z.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i=1,#lst,2 do\n        if lst[i] > 0 and lst[i] % 2 == 1 then\n            sum = sum + lst[i]*lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9mn1hn4z.lua:31: expected: 34, actual: 25.0\nstack traceback:\n\t/tmp/tmp9mn1hn4z.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    return sum(lst) * sum(lst)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "lua: /tmp/tmpa4eli4il.lua:14: 'end' expected (to close 'if' at line 13) near 'return'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    return sum(lst[1:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmplncl7u7v.lua:14: 'end' expected (to close 'if' at line 13) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i=1,#lst,2 do\n        if lst[i] ~= 0 and math.floor(lst[i]) ~= lst[i] then\n            sum = sum + math.pow(lst[i],2)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_inkvve.lua:27: expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmp7_inkvve.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    local sum = 0\n    for i=1,#lst do\n        if lst[i] > 0 and lst[i] % 2 == 1 then\n            sum = sum + lst[i] * lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "lua: /tmp/tmpt9qb9mil.lua:14: 'end' expected (to close 'if' at line 13) near 'local'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i] * lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbfg5c_bb.lua:26: expected: 0, actual: 0.1\nstack traceback:\n\t/tmp/tmpbfg5c_bb.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907450
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i=1,#lst,2 do\n        if lst[i] > 0 and lst[i] % 2 == 1 then\n            sum = sum + lst[i] * lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj5ku3fqk.lua:31: expected: 34, actual: 25.0\nstack traceback:\n\t/tmp/tmpj5ku3fqk.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i=1,#lst,2 do\n        if lst[i] > 0 and math.floor(lst[i]) == lst[i] then\n            sum = sum + math.pow(lst[i],2)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmporaizm17.lua:30: expected: 0, actual: 64.0\nstack traceback:\n\t/tmp/tmporaizm17.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        if lst[i] ~= 0 and math.floor(lst[i]) ~= lst[i] then\n            sum = sum + math.pow(lst[i], 2)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3hnc4mjd.lua:27: expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmp3hnc4mjd.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i=1,#lst,2 do\n        if lst[i] ~= 0 and math.floor(lst[i]) ~= lst[i] then\n            sum = sum + math.pow(lst[i],2)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_inkvve.lua:27: expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmp7_inkvve.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        if lst[i] > 0 and lst[i] % 2 == 1 then\n            sum = sum + lst[i] * lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfn_73r02.lua:31: expected: 34, actual: 25\nstack traceback:\n\t/tmp/tmpfn_73r02.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907450
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i=1,#lst,2 do\n        if lst[i] ~= 0 and math.floor(lst[i]) ~= lst[i] then\n            sum = sum + math.pow(lst[i],2)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_inkvve.lua:27: expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmp7_inkvve.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        if lst[i] > 0 and lst[i] % 2 == 1 then\n            sum = sum + lst[i] * lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfn_73r02.lua:31: expected: 34, actual: 25\nstack traceback:\n\t/tmp/tmpfn_73r02.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907450
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        if lst[i] ~= 0 and math.floor(lst[i]) ~= lst[i] then\n            sum = sum + math.pow(lst[i], 2)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3hnc4mjd.lua:27: expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmp3hnc4mjd.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i] * lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbfg5c_bb.lua:26: expected: 0, actual: 0.1\nstack traceback:\n\t/tmp/tmpbfg5c_bb.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907450
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    return sum(lst[1:])^2 - sum(lst[1:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "lua: /tmp/tmpflfa7ufs.lua:14: 'end' expected (to close 'if' at line 13) near 'return'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    return sum(lst[1:]) * sum(lst[1:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpjfb8baxt.lua:14: 'end' expected (to close 'if' at line 13) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i=1,#lst do\n        if lst[i] ~= 0 and math.floor(lst[i]) ~= lst[i] then\n            sum = sum + math.pow(lst[i],2)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57kn7iac.lua:27: expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmp57kn7iac.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i=1,#lst do\n        if lst[i] > 0 and math.floor(lst[i]) == lst[i] then\n            sum = sum + lst[i]*lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp358xnfyg.lua:27: expected: 25, actual: 41.0\nstack traceback:\n\t/tmp/tmp358xnfyg.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    local sum = 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i] * lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "lua: /tmp/tmphb9m4n9c.lua:14: 'end' expected (to close 'if' at line 13) near 'local'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        if lst[i] ~= 0 and math.floor(lst[i]) ~= lst[i] then\n            sum = sum + math.pow(lst[i], 2)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3hnc4mjd.lua:27: expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmp3hnc4mjd.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        if lst[i] ~= 0 and math.floor(lst[i]) ~= lst[i] then\n            sum = sum + math.pow(lst[i], 2)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3hnc4mjd.lua:27: expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmp3hnc4mjd.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    return sum(lst) * #lst\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "lua: /tmp/tmpvjpa1sbi.lua:14: 'end' expected (to close 'if' at line 13) near 'return'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        if lst[i] > 0 and lst[i] % 2 == 1 then\n            sum = sum + lst[i] * lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfn_73r02.lua:31: expected: 34, actual: 25\nstack traceback:\n\t/tmp/tmpfn_73r02.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907450
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i=1,#lst,2 do\n        if lst[i] > 0 and lst[i] % 2 == 1 then\n            sum = sum + lst[i]*lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9mn1hn4z.lua:31: expected: 34, actual: 25.0\nstack traceback:\n\t/tmp/tmp9mn1hn4z.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    local sum = 0\n    for i=1,#lst,2 do\n        if lst[i] > 0 and lst[i] % 2 == 1 then\n            sum = sum + lst[i]*lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "lua: /tmp/tmp6dcdddia.lua:14: 'end' expected (to close 'if' at line 13) near 'local'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    return sum(lst[1:]) - sum(lst[2:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "lua: /tmp/tmpkr7_7x5g.lua:14: ']' expected near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i] * lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbfg5c_bb.lua:26: expected: 0, actual: 0.1\nstack traceback:\n\t/tmp/tmpbfg5c_bb.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    return sum(lst[1:]) * sum(lst[1:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpjfb8baxt.lua:14: 'end' expected (to close 'if' at line 13) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    return sum(lst[1:]) - sum(lst[1:]) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "lua: /tmp/tmp0_88jvuc.lua:14: ']' expected near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    local sum = 0\n    for i=1,#lst,2 do\n        if lst[i] > 0 and lst[i] % 2 == 1 then\n            sum = sum + lst[i] * lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "lua: /tmp/tmpctnnh9ea.lua:14: 'end' expected (to close 'if' at line 13) near 'local'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    return sum(lst[1:]) * sum(lst[1:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpjfb8baxt.lua:14: 'end' expected (to close 'if' at line 13) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i] * lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbfg5c_bb.lua:26: expected: 0, actual: 0.1\nstack traceback:\n\t/tmp/tmpbfg5c_bb.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907450
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i=1,#lst,2 do\n        if lst[i] > 0 and lst[i] % 2 == 1 then\n            sum = sum + lst[i] * lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj5ku3fqk.lua:31: expected: 34, actual: 25.0\nstack traceback:\n\t/tmp/tmpj5ku3fqk.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    return sum(lst[1:]) * sum(lst[1:]) - sum(lst[1:]) * sum(lst[1:]) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpk_gw0w38.lua:14: ']' expected near ':'\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    return sum(lst) * sum(lst)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "lua: /tmp/tmpa4eli4il.lua:14: 'end' expected (to close 'if' at line 13) near 'return'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    return sum(lst[1:]) - sum(lst[2:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "lua: /tmp/tmpkr7_7x5g.lua:14: ']' expected near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i=1,#lst,2 do\n        if lst[i] > 0 and lst[i] % 2 == 1 then\n            sum = sum + lst[i]*lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9mn1hn4z.lua:31: expected: 34, actual: 25.0\nstack traceback:\n\t/tmp/tmp9mn1hn4z.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i=1,#lst do\n        if lst[i] > 0 and math.floor(lst[i]) == lst[i] then\n            sum = sum + lst[i]*lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp358xnfyg.lua:27: expected: 25, actual: 41.0\nstack traceback:\n\t/tmp/tmp358xnfyg.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    return sum(lst[1:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmplncl7u7v.lua:14: 'end' expected (to close 'if' at line 13) near 'return'\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        sum = sum + lst[i] * lst[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbfg5c_bb.lua:26: expected: 0, actual: 0.1\nstack traceback:\n\t/tmp/tmpbfg5c_bb.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907450
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    local sum = 0\n    for i = 1, #lst, 2 do\n        if lst[i] > 0 and lst[i] % 2 == 1 then\n            sum = sum + lst[i] * lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "lua: /tmp/tmpghuugcj6.lua:14: 'end' expected (to close 'if' at line 13) near 'local'\n",
      "stdout": "",
      "timestamp": 1661907450
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        if lst[i] ~= 0 and math.floor(lst[i]) ~= lst[i] then\n            sum = sum + math.pow(lst[i], 2)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3hnc4mjd.lua:27: expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmp3hnc4mjd.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i=1,#lst,2 do\n        if lst[i] ~= 0 and math.floor(lst[i]) ~= lst[i] then\n            sum = sum + math.pow(lst[i],2)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_inkvve.lua:27: expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmp7_inkvve.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    return sum(lst) - sum(filter(function(x) x > 0 and math.floor(x) == x, lst)) ** 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "lua: /tmp/tmps2pzv92h.lua:14: 'end' expected (to close 'if' at line 13) near 'return'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        if lst[i] > 0 and lst[i] % 2 == 1 then\n            sum = sum + lst[i] * lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfn_73r02.lua:31: expected: 34, actual: 25\nstack traceback:\n\t/tmp/tmpfn_73r02.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907450
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    return sum(lst[1:]) * sum(lst[1:]) - sum(lst[1:])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "lua: /tmp/tmp8x58x77b.lua:14: ']' expected near ':'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "exit_code": 1,
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst, 2 do\n        if lst[i] > 0 and lst[i] % 2 == 1 then\n            sum = sum + lst[i] * lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "status": "Exception",
      "stderr": "",
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfn_73r02.lua:31: expected: 34, actual: 25\nstack traceback:\n\t/tmp/tmpfn_73r02.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "timestamp": 1661907450
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0\n    local sum = 0\n    for i=1,#lst,2 do\n        if lst[i] > 0 and lst[i] % 2 == 1 then\n            sum = sum + lst[i]*lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "",
      "stderr": "lua: /tmp/tmp6dcdddia.lua:14: 'end' expected (to close 'if' at line 13) near 'local'\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "-- Given a table of numbers, return the sum of squares of the numbers\n-- in the table that are odd. Ignore numbers that are negative or not integers.\n-- >>> double_the_difference([1, 3, 2, 0])\n-- 10\n-- >>> double_the_difference([-1, -2, 0])\n-- 0\n-- >>> double_the_difference([9, -2])\n-- 81\n-- >>> double_the_difference([0])\n-- 0  \n-- If the input table is empty, return 0.\nlocal function double_the_difference(lst)\n    if #lst == 0 then return 0 end\n    local sum = 0\n    for i = 1, #lst do\n        if lst[i] ~= 0 and math.floor(lst[i]) ~= lst[i] then\n            sum = sum + math.pow(lst[i], 2)\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5.0, 4.0}), 25)\n    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10.0, -20.0, -30.0}), 0)\n    lu.assertEquals(candidate({-1.0, -2.0, 8.0}), 0)\n    lu.assertEquals(candidate({0.2, 3.0, 5.0}), 34)\n    lu.assertEquals(candidate({-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0}), 165)\nend\n\nos.exit(lu.LuaUnit.run())",
      "timestamp": 1664292466,
      "stdout": "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3uba0y4_.lua:27: expected: 25, actual: 0\nstack traceback:\n\t/tmp/tmp3uba0y4_.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}